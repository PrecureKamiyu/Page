<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>5.3 Program Example</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000496E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000430AE" data-uri="chapter05.xhtml#P70004970270000000000000000430AE" epub:type="title"><span class="pcalibre label pcalibre1">5.3 </span>Program Example</h1></header>
<p id="P70004970270000000000000000430AF" data-uri="chapter05.xhtml#P70004970270000000000000000430AF" class="pcalibre1 pcalibre calibre2">To demonstrate how an abstract program can be systematically transformed into more efficient code, we will use a running example based on the vector data structure shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004971"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.3</span></a>. A vector is represented with two blocks of memory: the header and the data array. The header is a structure declared as follows:</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004971" data-uri="chapter05.xhtml#P7000497027000000000000000004971">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004972" title="505" data-uri="chapter05.xhtml#P7000497027000000000000000004972" epub:type="pagebreak"></span>
<img alt="A diagram shows a box with two elements: len on top and data below. An arrow from data points to a series of boxes numbered 0, 1, 2,..., len minus 1." id="P70004970270000000000000000430B0" data-uri="P700049702700000000000000000B70E" src="../images/p505-1.png" class="pcalibre1 calibre169 pcalibre"/>
<figcaption id="P70004970270000000000000000430B1" data-uri="chapter05.xhtml#P70004970270000000000000000430B1" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000430B2" data-uri="chapter05.xhtml#P70004970270000000000000000430B2" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.3 </span>Vector abstract data type.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000430B3" data-uri="chapter05.xhtml#P70004970270000000000000000430B3"><p id="P70004970270000000000000000430B4" data-uri="chapter05.xhtml#P70004970270000000000000000430B4" class="pcalibre calibre3 pcalibre1">A vector is represented by header information plus an array of designated length.</p></div></figcaption></figure>
<pre id="P70004970270000000000000000430B5" data-uri="chapter05.xhtml#P70004970270000000000000000430B5" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430B6" data-uri="chapter05.xhtml#P70004970270000000000000000430B6" class="calibre10 pcalibre pcalibre1">
-----------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/opt/vec.h</i>
1	/* Create abstract data type for vector */
2	typedef struct {
3		long len;
4		data_t *data;
5	} vec_rec, *vec_ptr;
-----------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/opt/vec.h</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000430B7" data-uri="chapter05.xhtml#P70004970270000000000000000430B7">The declaration uses <code id="P70004970270000000000000000430B8" data-uri="chapter05.xhtml#P70004970270000000000000000430B8" class="pcalibre1 calibre8 pcalibre">data_t</code> to designate the data type of the underlying elements. In our evaluation, we measured the performance of our code for integer (C <code id="P70004970270000000000000000430B9" data-uri="chapter05.xhtml#P70004970270000000000000000430B9" class="pcalibre1 calibre8 pcalibre">int</code> and <code id="P70004970270000000000000000430BA" data-uri="chapter05.xhtml#P70004970270000000000000000430BA" class="pcalibre1 calibre8 pcalibre">long</code>), and floating-point (C <code id="P70004970270000000000000000430BB" data-uri="chapter05.xhtml#P70004970270000000000000000430BB" class="pcalibre1 calibre8 pcalibre">float</code> and <code id="P70004970270000000000000000430BC" data-uri="chapter05.xhtml#P70004970270000000000000000430BC" class="pcalibre1 calibre8 pcalibre">double</code>) data. We do this by compiling and running the program separately for different type declarations, such as the following for data type <code id="P70004970270000000000000000430BD" data-uri="chapter05.xhtml#P70004970270000000000000000430BD" class="pcalibre1 calibre8 pcalibre">long</code>:</p>
<pre id="P70004970270000000000000000430BE" data-uri="chapter05.xhtml#P70004970270000000000000000430BE" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430BF" data-uri="chapter05.xhtml#P70004970270000000000000000430BF" class="calibre10 pcalibre pcalibre1">
typedef long data_t;
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000430C0" data-uri="chapter05.xhtml#P70004970270000000000000000430C0">We allocate the data array block to store the vector elements as an array of <code id="P70004970270000000000000000430C1" data-uri="chapter05.xhtml#P70004970270000000000000000430C1" class="pcalibre1 calibre8 pcalibre">len</code> objects of type <code id="P70004970270000000000000000430C2" data-uri="chapter05.xhtml#P70004970270000000000000000430C2" class="pcalibre1 calibre8 pcalibre">data_t</code>.</p>
<p id="P70004970270000000000000000430C3" data-uri="chapter05.xhtml#P70004970270000000000000000430C3" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004991"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.4</span></a> shows some basic procedures for generating vectors, accessing vector elements, and determining the length of a vector. An important feature to note is that <code id="P70004970270000000000000000430C4" data-uri="chapter05.xhtml#P70004970270000000000000000430C4" class="pcalibre1 calibre8 pcalibre">get_vec_element</code>, the vector access routine, performs bounds checking for every vector reference. This code is similar to the array representations used in many other languages, including Java. Bounds checking reduces the chances of program error, but it can also slow down program execution.</p>
<p id="P70004970270000000000000000430C5" data-uri="chapter05.xhtml#P70004970270000000000000000430C5" class="pcalibre1 pcalibre calibre2">As an optimization example, consider the code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000499B"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.5</span></a>, which combines all of the elements in a vector into a single value according to some operation. By using different definitions of compile-time constants <code id="P70004970270000000000000000430C6" data-uri="chapter05.xhtml#P70004970270000000000000000430C6" class="pcalibre1 calibre8 pcalibre">IDENT</code> and OP, the code can be recompiled to perform different operations on the data. In particular, using the declarations</p>
<pre id="P70004970270000000000000000430C7" data-uri="chapter05.xhtml#P70004970270000000000000000430C7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430C8" data-uri="chapter05.xhtml#P70004970270000000000000000430C8" class="calibre10 pcalibre pcalibre1">
#define IDENT 0
#define OP +
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000430C9" data-uri="chapter05.xhtml#P70004970270000000000000000430C9">it sums the elements of the vector. Using the declarations</p>
<pre id="P70004970270000000000000000430CA" data-uri="chapter05.xhtml#P70004970270000000000000000430CA" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430CB" data-uri="chapter05.xhtml#P70004970270000000000000000430CB" class="calibre10 pcalibre pcalibre1">
#define IDENT 1
#define OP *
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000430CC" data-uri="chapter05.xhtml#P70004970270000000000000000430CC">it computes the product of the vector elements.</p>
<p id="P70004970270000000000000000430CD" data-uri="chapter05.xhtml#P70004970270000000000000000430CD" class="pcalibre1 pcalibre calibre2">In our presentation, we will proceed through a series of transformations of the code, writing different versions of the combining function. To gauge progress,</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004991" data-uri="chapter05.xhtml#P7000497027000000000000000004991">
<pre id="P70004970270000000000000000430CE" data-uri="chapter05.xhtml#P70004970270000000000000000430CE" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430CF" data-uri="chapter05.xhtml#P70004970270000000000000000430CF" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000004994" title="506" data-uri="chapter05.xhtml#P7000497027000000000000000004994" epub:type="pagebreak"></span>1	/* Create vector of specified length */
2	vec_ptr new_vec(long len)
3	{
4		/* Allocate header structure */
5		vec_ptr result = (vec_ptr) malloc(sizeof(vec_rec));
6		data_t *data = NULL;
7		if (!result)
8			return NULL; /* Couldn't allocate storage */
9		result-&gt;len = len;
10		/* Allocate array */
11		if (len &gt; 0) {
12			data = (data_t *)calloc(len, sizeof(data_t));
13			if (!data) {
14				free((void *) result);
15				return NULL; /* Couldn't allocate storage */
16			}
17		}
18		/* Data will either be NULL or allocated array */
19		result-&gt;data = data;
20		return result;
21	}
22	
23	/*
24	* Retrieve vector element and store at dest.
25	* Return 0 (out of bounds) or 1 (successful)
26	*/
27	int get_vec_element(vec_ptr v, long index, data_t *dest)
28	{
29		if (index &lt; 0 | | index &gt;= v-&gt;len)
30			return 0;
31		*dest = v-&gt;data [index];
32		return 1 ;
33	}
34	
35	/* Return length of vector */
36	long vec_length(vec_ptr v)
37	{
38		return v-&gt;len;
39	}
</code></pre>
<figcaption id="P70004970270000000000000000430D0" data-uri="chapter05.xhtml#P70004970270000000000000000430D0" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000430D1" data-uri="chapter05.xhtml#P70004970270000000000000000430D1" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.4 </span>Implementation of vector abstract data type.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000430D2" data-uri="chapter05.xhtml#P70004970270000000000000000430D2"><p id="P70004970270000000000000000430D3" data-uri="chapter05.xhtml#P70004970270000000000000000430D3" class="pcalibre calibre3 pcalibre1">In the actual program, data type <code id="P70004970270000000000000000430D4" data-uri="chapter05.xhtml#P70004970270000000000000000430D4" class="pcalibre1 calibre8 pcalibre">data_t</code> is declared to be <code id="P70004970270000000000000000430D5" data-uri="chapter05.xhtml#P70004970270000000000000000430D5" class="pcalibre1 calibre8 pcalibre">int, long, float, or double.</code></p></div></figcaption></figure>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000499B" data-uri="chapter05.xhtml#P700049702700000000000000000499B">
<pre id="P70004970270000000000000000430D6" data-uri="chapter05.xhtml#P70004970270000000000000000430D6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000430D7" data-uri="chapter05.xhtml#P70004970270000000000000000430D7" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000499E" title="507" data-uri="chapter05.xhtml#P700049702700000000000000000499E" epub:type="pagebreak"></span>1	/* Implementation with maximum use of data abstraction */
2	void combinel(vec_ptr v, data_t *dest)
3	{
4		long i;
5	
6		*dest = IDENT;
7		for (i = 0; i &lt; vec_length(v); i++) {
8			data_t val;
9			get_vec_element(v, i, &amp;val);
10			*dest = *dest OP val;
11		}
12	}
</code></pre>
<figcaption id="P70004970270000000000000000430D8" data-uri="chapter05.xhtml#P70004970270000000000000000430D8" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000430D9" data-uri="chapter05.xhtml#P70004970270000000000000000430D9" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.5 </span>Initial implementation of combining operation.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000430DA" data-uri="chapter05.xhtml#P70004970270000000000000000430DA"><p id="P70004970270000000000000000430DB" data-uri="chapter05.xhtml#P70004970270000000000000000430DB" class="pcalibre calibre3 pcalibre1">Using different declarations of identity element <code id="P70004970270000000000000000430DC" data-uri="chapter05.xhtml#P70004970270000000000000000430DC" class="pcalibre1 calibre8 pcalibre">IDENT</code> and combining operation <code id="P70004970270000000000000000430DD" data-uri="chapter05.xhtml#P70004970270000000000000000430DD" class="pcalibre1 calibre8 pcalibre">OP</code>, we can measure the routine for different operations.</p></div></figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000430DE" data-uri="chapter05.xhtml#P70004970270000000000000000430DE">we measured the CPE performance of the functions on a machine with an Intel Core i7 Haswell processor, which we refer to as our <i class="calibre5 pcalibre pcalibre1">reference machine.</i> Some characteristics of this processor were given in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001E06.xhtml#P7000497027000000000000000001E06"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.1</span></a>. These measurements characterize performance in terms of how the programs run on just one particular machine, and so there is no guarantee of comparable performance on other combinations of machine and compiler. However, we have compared the results with those for a number of different compiler/processor combinations, and we have found them generally consistent with those presented here.</p>
<p id="P70004970270000000000000000430DF" data-uri="chapter05.xhtml#P70004970270000000000000000430DF" class="pcalibre1 pcalibre calibre2">As we proceed through a set of transformations, we will find that many lead to only minimal performance gains, while others have more dramatic effects. Determining which combinations of transformations to apply is indeed part of the "black art" of writing fast code. Some combinations that do not provide measurable benefits are indeed ineffective, while others are important as ways to enable further optimizations by the compiler. In our experience, the best approach involves a combination of experimentation and analysis: repeatedly attempting different approaches, performing measurements, and examining the assembly-code representations to identify underlying performance bottlenecks.</p>
<p id="P70004970270000000000000000430E0" data-uri="chapter05.xhtml#P70004970270000000000000000430E0" class="pcalibre1 pcalibre calibre2">As a starting point, the following table shows CPE measurements for <code id="P70004970270000000000000000430E1" data-uri="chapter05.xhtml#P70004970270000000000000000430E1" class="pcalibre1 calibre8 pcalibre">combine1</code> running on our reference machine, with different combinations of operation (addition or multiplication) and data type (long integer and double-precision floating-point). Our experiments with many different programs showed that operations on 32-bit and 64-bit integers have identical performance, with the exception of code involving division operations. Similarly, we found identical performance for programs operating on single- or double-precision floating-point data. In our tables, we will therefore show only separate results for integer data and for floating-point data.</p>

<table id="P70004970270000000000000000430E2" data-uri="chapter05.xhtml#P70004970270000000000000000430E2" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000430E3" data-uri="chapter05.xhtml#P70004970270000000000000000430E3" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000430E4" data-uri="chapter05.xhtml#P70004970270000000000000000430E4" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000430E5" data-uri="chapter05.xhtml#P70004970270000000000000000430E5" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P70004970270000000000000000430E6" data-uri="chapter05.xhtml#P70004970270000000000000000430E6" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000049AE" title="508" data-uri="chapter05.xhtml#P70004970270000000000000000049AE" epub:type="pagebreak"></span>Integer</th>
<th colspan="2" id="P70004970270000000000000000430E7" data-uri="chapter05.xhtml#P70004970270000000000000000430E7" class="calibre18 pcalibre pcalibre1">Floating point</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000430E8" data-uri="chapter05.xhtml#P70004970270000000000000000430E8" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P70004970270000000000000000430E9" data-uri="chapter05.xhtml#P70004970270000000000000000430E9" class="calibre18 pcalibre pcalibre1">Page</th>
<th id="P70004970270000000000000000430EA" data-uri="chapter05.xhtml#P70004970270000000000000000430EA" class="calibre18 pcalibre pcalibre1">Method</th>
<th id="P70004970270000000000000000430EB" data-uri="chapter05.xhtml#P70004970270000000000000000430EB" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P70004970270000000000000000430EC" data-uri="chapter05.xhtml#P70004970270000000000000000430EC" class="calibre18 pcalibre pcalibre1">*</th>
<th id="P70004970270000000000000000430ED" data-uri="chapter05.xhtml#P70004970270000000000000000430ED" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P70004970270000000000000000430EE" data-uri="chapter05.xhtml#P70004970270000000000000000430EE" class="calibre18 pcalibre pcalibre1">*</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000430EF" data-uri="chapter05.xhtml#P70004970270000000000000000430EF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000430F0" data-uri="chapter05.xhtml#P70004970270000000000000000430F0" class="calibre10 pcalibre pcalibre1">combine1</code></td>
<td id="P70004970270000000000000000430F1" data-uri="chapter05.xhtml#P70004970270000000000000000430F1" class="calibre20 pcalibre pcalibre1">507</td>
<td id="P70004970270000000000000000430F2" data-uri="chapter05.xhtml#P70004970270000000000000000430F2" class="calibre20 pcalibre pcalibre1">Abstract unoptimized</td>
<td id="P70004970270000000000000000430F3" data-uri="chapter05.xhtml#P70004970270000000000000000430F3" class="calibre20 pcalibre pcalibre1">22.68</td>
<td id="P70004970270000000000000000430F4" data-uri="chapter05.xhtml#P70004970270000000000000000430F4" class="calibre20 pcalibre pcalibre1">20.02</td>
<td id="P70004970270000000000000000430F5" data-uri="chapter05.xhtml#P70004970270000000000000000430F5" class="calibre20 pcalibre pcalibre1">19.98</td>
<td id="P70004970270000000000000000430F6" data-uri="chapter05.xhtml#P70004970270000000000000000430F6" class="calibre20 pcalibre pcalibre1">20.18</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000430F7" data-uri="chapter05.xhtml#P70004970270000000000000000430F7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000430F8" data-uri="chapter05.xhtml#P70004970270000000000000000430F8" class="calibre10 pcalibre pcalibre1">combine1</code></td>
<td id="P70004970270000000000000000430F9" data-uri="chapter05.xhtml#P70004970270000000000000000430F9" class="calibre20 pcalibre pcalibre1">507</td>
<td id="P70004970270000000000000000430FA" data-uri="chapter05.xhtml#P70004970270000000000000000430FA" class="calibre20 pcalibre pcalibre1">Abstract <code id="P70004970270000000000000000430FB" data-uri="chapter05.xhtml#P70004970270000000000000000430FB" class="calibre10 pcalibre pcalibre1">−01</code></td>
<td id="P70004970270000000000000000430FC" data-uri="chapter05.xhtml#P70004970270000000000000000430FC" class="calibre20 pcalibre pcalibre1">10.12</td>
<td id="P70004970270000000000000000430FD" data-uri="chapter05.xhtml#P70004970270000000000000000430FD" class="calibre20 pcalibre pcalibre1">10.12</td>
<td id="P70004970270000000000000000430FE" data-uri="chapter05.xhtml#P70004970270000000000000000430FE" class="calibre20 pcalibre pcalibre1">10.17</td>
<td id="P70004970270000000000000000430FF" data-uri="chapter05.xhtml#P70004970270000000000000000430FF" class="calibre20 pcalibre pcalibre1">11.14</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000043100" data-uri="chapter05.xhtml#P7000497027000000000000000043100" class="pcalibre1 pcalibre calibre2">We can see that our measurements are somewhat imprecise. The more likely CPE number for integer sum is 23.00, rather than 22.68, while the number for integer product is likely 20.0 instead of 20.02. Rather than "fudging" our numbers to make them look good, we will present the measurements we actually obtained. There are many factors that complicate the task of reliably measuring the precise number of clock cycles required by some code sequence. It helps when examining these numbers to mentally round the results up or down by a few hundredths of a clock cycle.</p>
<p id="P7000497027000000000000000043101" data-uri="chapter05.xhtml#P7000497027000000000000000043101" class="pcalibre1 pcalibre calibre2">The unoptimized code provides a direct translation of the C code into machine code, often with obvious inefficiencies. By simply giving the command-line option <code id="P7000497027000000000000000043102" data-uri="chapter05.xhtml#P7000497027000000000000000043102" class="pcalibre1 calibre8 pcalibre">−01</code>, we enable a basic set of optimizations. As can be seen, this significantly improves the program performance—more than a factor of 2—with no effort on behalf of the programmer. In general, it is good to get into the habit of enabling some level of optimization. (Similar performance results were obtained with optimization level <code id="P7000497027000000000000000043103" data-uri="chapter05.xhtml#P7000497027000000000000000043103" class="pcalibre1 calibre8 pcalibre">−0g</code>.) For the remainder of our measurements, we use optimization levels <code id="P7000497027000000000000000043104" data-uri="chapter05.xhtml#P7000497027000000000000000043104" class="pcalibre1 calibre8 pcalibre">−01</code> and <code id="P7000497027000000000000000043105" data-uri="chapter05.xhtml#P7000497027000000000000000043105" class="pcalibre1 calibre8 pcalibre">−02</code> when generating and measuring our programs.</p>
</section></body></html>
