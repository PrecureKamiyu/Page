<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>11.5 Web Servers</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007E82" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000469DD" data-uri="chapter11.xhtml#P70004970270000000000000000469DD" epub:type="title"><span class="pcalibre label pcalibre1">11.5 </span>Web Servers</h1></header>
<p id="P70004970270000000000000000469DE" data-uri="chapter11.xhtml#P70004970270000000000000000469DE" class="pcalibre1 pcalibre calibre2">So far we have discussed network programming in the context of a simple echo server. In this section, we will show you how to use the basic ideas of network programming to build your own small, but quite functional, Web server.</p>
<section id="P7000497027000000000000000007E85" data-uri="chapter11.xhtml#P7000497027000000000000000007E85" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000469DF" data-uri="chapter11.xhtml#P70004970270000000000000000469DF" epub:type="title"><span class="pcalibre label pcalibre1">11.5.1 </span>Web Basics</h1></header>
<p id="P70004970270000000000000000469E0" data-uri="chapter11.xhtml#P70004970270000000000000000469E0" class="pcalibre1 pcalibre calibre2">Web clients and servers interact using a text-based application-level protocol known as <i class="calibre5 pcalibre pcalibre1">HTTP (hypertext transfer protocol).</i> HTTP is a simple protocol. A Web client (known as a <i class="calibre5 pcalibre pcalibre1">browser)</i> opens an Internet connection to a server and requests some <i class="calibre5 pcalibre pcalibre1">content.</i> The server responds with the requested content and then closes the connection. The browser reads the content and displays it on the screen.</p>
<p id="P70004970270000000000000000469E1" data-uri="chapter11.xhtml#P70004970270000000000000000469E1" class="pcalibre1 pcalibre calibre2">What distinguishes Web services from conventional file retrieval services such as FTP? The main difference is that Web content can be written in a language known as <i class="calibre5 pcalibre pcalibre1">HTML (hypertext markup language).</i> An HTML program (page) contains instructions (tags) that tell the browser how to display various text and graphical objects in the page. For example, the code</p>
<pre id="P70004970270000000000000000469E2" data-uri="chapter11.xhtml#P70004970270000000000000000469E2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000469E3" data-uri="chapter11.xhtml#P70004970270000000000000000469E3" class="calibre10 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1"> Make me bold! </b></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000469E4" data-uri="chapter11.xhtml#P70004970270000000000000000469E4">tells the browser to print the text between the <b class="calibre4 pcalibre pcalibre1"> and </b> tags in boldface type. However, the real power of HTML is that a page can contain pointers (hyperlinks) to content stored on any Internet host. For example, an HTML line of the form</p>
<pre id="P70004970270000000000000000469E5" data-uri="chapter11.xhtml#P70004970270000000000000000469E5" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000469E6" data-uri="chapter11.xhtml#P70004970270000000000000000469E6" class="calibre10 pcalibre pcalibre1">Carnegie Mellon</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000469E7" data-uri="chapter11.xhtml#P70004970270000000000000000469E7">tells the browser to highlight the text object <code id="P70004970270000000000000000469E8" data-uri="chapter11.xhtml#P70004970270000000000000000469E8" class="pcalibre1 calibre8 pcalibre">Carnegie Mellon</code> and to create a hyperlink to an HTML file called <code id="P70004970270000000000000000469E9" data-uri="chapter11.xhtml#P70004970270000000000000000469E9" class="pcalibre1 calibre8 pcalibre">index.html</code> that is stored on the CMU Web server. If the user clicks on the highlighted text object, the browser requests the corresponding HTML file from the CMU server and displays it.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007E91" data-uri="chapter11.xhtml#P7000497027000000000000000007E91"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P70004970270000000000000000469EA" data-uri="chapter11.xhtml#P70004970270000000000000000469EA" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007E93" title="949" data-uri="chapter11.xhtml#P7000497027000000000000000007E93" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Origins of the World Wide Web</h1></header>
<p id="P70004970270000000000000000469EB" data-uri="chapter11.xhtml#P70004970270000000000000000469EB" class="calibre13 pcalibre pcalibre1">The World Wide Web was invented by Tim Berners-Lee, a software engineer working at CERN, a Swiss physics lab. In 1989, Berners-Lee wrote an internal memo proposing a distributed hypertext system that would connect a "web of notes with links." The intent of the proposed system was to help CERN scientists share and manage information. Over the next two years, after Berners-Lee implemented the first Web server and Web browser, the Web developed a small following within CERN and a few other sites. A pivotal event occurred in 1993, when Marc Andreesen (who later founded Netscape and Andreessen Horowitz) and his colleagues at NCSA released a graphical browser called <span class="smallcaps pcalibre pcalibre1">mosaic </span>for all three major platforms: Linux, Windows, and Macintosh. After the release of <span class="smallcaps pcalibre pcalibre1">mosaic</span>, interest in the Web exploded, with the number of Web sites increasing at an exponential rate. By 2015, there were over 975,000,000 sites worldwide.</p>
<div class="source2 pcalibre pcalibre1" id="P70004970270000000000000000469EC" data-uri="chapter11.xhtml#P70004970270000000000000000469EC"><p id="P70004970270000000000000000469ED" data-uri="chapter11.xhtml#P70004970270000000000000000469ED" class="calibre54 pcalibre pcalibre1">(<span class="pcalibre label pcalibre1">Source:</span> Netcraft Web Survey)</p></div>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007E97" data-uri="chapter11.xhtml#P7000497027000000000000000007E97">
<table id="P70004970270000000000000000469EE" data-uri="chapter11.xhtml#P70004970270000000000000000469EE" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000469EF" data-uri="chapter11.xhtml#P70004970270000000000000000469EF" class="calibre18 pcalibre pcalibre1">MIME type</th>
<th id="P70004970270000000000000000469F0" data-uri="chapter11.xhtml#P70004970270000000000000000469F0" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000469F1" data-uri="chapter11.xhtml#P70004970270000000000000000469F1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000469F2" data-uri="chapter11.xhtml#P70004970270000000000000000469F2" class="calibre10 pcalibre pcalibre1">text/html</code></td>
<td id="P70004970270000000000000000469F3" data-uri="chapter11.xhtml#P70004970270000000000000000469F3" class="calibre20 pcalibre pcalibre1">HTML page</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000469F4" data-uri="chapter11.xhtml#P70004970270000000000000000469F4" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000469F5" data-uri="chapter11.xhtml#P70004970270000000000000000469F5" class="calibre10 pcalibre pcalibre1">text/plain</code></td>
<td id="P70004970270000000000000000469F6" data-uri="chapter11.xhtml#P70004970270000000000000000469F6" class="calibre20 pcalibre pcalibre1">Unformatted text</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000469F7" data-uri="chapter11.xhtml#P70004970270000000000000000469F7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000469F8" data-uri="chapter11.xhtml#P70004970270000000000000000469F8" class="calibre10 pcalibre pcalibre1">application/postscript</code></td>
<td id="P70004970270000000000000000469F9" data-uri="chapter11.xhtml#P70004970270000000000000000469F9" class="calibre20 pcalibre pcalibre1">Postscript document</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000469FA" data-uri="chapter11.xhtml#P70004970270000000000000000469FA" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000469FB" data-uri="chapter11.xhtml#P70004970270000000000000000469FB" class="calibre10 pcalibre pcalibre1">image/gif</code></td>
<td id="P70004970270000000000000000469FC" data-uri="chapter11.xhtml#P70004970270000000000000000469FC" class="calibre20 pcalibre pcalibre1">Binary image encoded in GIF format</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000469FD" data-uri="chapter11.xhtml#P70004970270000000000000000469FD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000469FE" data-uri="chapter11.xhtml#P70004970270000000000000000469FE" class="calibre10 pcalibre pcalibre1">image/png</code></td>
<td id="P70004970270000000000000000469FF" data-uri="chapter11.xhtml#P70004970270000000000000000469FF" class="calibre20 pcalibre pcalibre1">Binary image encoded in PNG format</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A00" data-uri="chapter11.xhtml#P7000497027000000000000000046A00" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046A01" data-uri="chapter11.xhtml#P7000497027000000000000000046A01" class="calibre10 pcalibre pcalibre1">image/jpeg</code></td>
<td id="P7000497027000000000000000046A02" data-uri="chapter11.xhtml#P7000497027000000000000000046A02" class="calibre20 pcalibre pcalibre1">Binary image encoded in JPEG format</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000046A03" data-uri="chapter11.xhtml#P7000497027000000000000000046A03" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046A04" data-uri="chapter11.xhtml#P7000497027000000000000000046A04" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.23 </span>Example MIME types.</h1></header>
</figcaption>
</figure>
</section>
<section id="P7000497027000000000000000007EAF" data-uri="chapter11.xhtml#P7000497027000000000000000007EAF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046A05" data-uri="chapter11.xhtml#P7000497027000000000000000046A05" epub:type="title"><span class="pcalibre label pcalibre1">11.5.2 </span>Web Content</h1></header>
<p id="P7000497027000000000000000046A06" data-uri="chapter11.xhtml#P7000497027000000000000000046A06" class="pcalibre1 pcalibre calibre2">To Web clients and servers, <i class="calibre5 pcalibre pcalibre1">content</i> is a sequence of bytes with an associated <i class="calibre5 pcalibre pcalibre1">MIME (multipurpose internet mail extensions)</i> type. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007E97"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.23</span></a> shows some common MIME types.</p>
<p id="P7000497027000000000000000046A07" data-uri="chapter11.xhtml#P7000497027000000000000000046A07" class="pcalibre1 pcalibre calibre2">Web servers provide content to clients in two different ways:</p>
<ul id="P7000497027000000000000000046A08" data-uri="chapter11.xhtml#P7000497027000000000000000046A08" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000046A09" data-uri="chapter11.xhtml#P7000497027000000000000000046A09" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046A0A" data-uri="chapter11.xhtml#P7000497027000000000000000046A0A" class="pcalibre calibre3 pcalibre1">Fetch a disk file and return its contents to the client. The disk file is known as <i class="calibre5 pcalibre pcalibre1">static content</i> and the process of returning the file to the client is known as <i class="calibre5 pcalibre pcalibre1">serving static content</i>.</p></li>
<li id="P7000497027000000000000000046A0B" data-uri="chapter11.xhtml#P7000497027000000000000000046A0B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046A0C" data-uri="chapter11.xhtml#P7000497027000000000000000046A0C" class="pcalibre calibre3 pcalibre1">Run an executable file and return its output to the client. The output produced by the executable at run time is known as <i class="calibre5 pcalibre pcalibre1">dynamic content</i>, and the process of running the program and returning its output to the client is known as <i class="calibre5 pcalibre pcalibre1">serving dynamic content</i>.</p></li>
</ul>
<p id="P7000497027000000000000000046A0D" data-uri="chapter11.xhtml#P7000497027000000000000000046A0D" class="pcalibre1 pcalibre calibre2">Every piece of content returned by a Web server is associated with some file that it manages. Each of these files has a unique name known as a <i class="calibre5 pcalibre pcalibre1">URL (universal resource locator)</i>. For example, the URL</p>
<p id="P7000497027000000000000000046A0E" data-uri="chapter11.xhtml#P7000497027000000000000000046A0E" class="pcalibre1 pcalibre calibre2"><code id="P7000497027000000000000000046A0F" data-uri="chapter11.xhtml#P7000497027000000000000000046A0F" class="pcalibre1 calibre8 pcalibre"><a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="http://www.google.com:80/index.html">http:/<wbr class="pcalibre pcalibre1"/>/<wbr class="pcalibre pcalibre1"/>www.google.com:80/<wbr class="pcalibre pcalibre1"/>index.html</a></code></p>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A10" data-uri="chapter11.xhtml#P7000497027000000000000000046A10"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007EBC" title="950" data-uri="chapter11.xhtml#P7000497027000000000000000007EBC" epub:type="pagebreak"></span>identifies an HTML file called <code id="P7000497027000000000000000046A11" data-uri="chapter11.xhtml#P7000497027000000000000000046A11" class="pcalibre1 calibre8 pcalibre">/index.html</code> on Internet host <code id="P7000497027000000000000000046A12" data-uri="chapter11.xhtml#P7000497027000000000000000046A12" class="pcalibre1 calibre8 pcalibre"><a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="http://www.google.com">www.google.com</a></code> that is managed by a Web server listening on port 80. The port number is optional and defaults to the well-known HTTP port 80. URLs for executable files can include program arguments after the filename. A `?' character separates the filename from the arguments, and each argument is separated by an `&amp;' character. For example, the URL</p>
<pre id="P7000497027000000000000000046A13" data-uri="chapter11.xhtml#P7000497027000000000000000046A13" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A14" data-uri="chapter11.xhtml#P7000497027000000000000000046A14" class="calibre10 pcalibre pcalibre1">
<span class="url-obsolete pcalibre pcalibre1">http://bluefish.ics.cs.cmu.edu:8000/cgi-bin/adder?15000&amp;213</span>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A15" data-uri="chapter11.xhtml#P7000497027000000000000000046A15">identifies an executable called <code id="P7000497027000000000000000046A16" data-uri="chapter11.xhtml#P7000497027000000000000000046A16" class="pcalibre1 calibre8 pcalibre">/cgi-bin/adder</code> that will be called with two argument strings: 15000 and 213. Clients and servers use different parts of the URL during a transaction. For instance, a client uses the prefix</p>
<p id="P7000497027000000000000000046A17" data-uri="chapter11.xhtml#P7000497027000000000000000046A17" class="pcalibre1 pcalibre calibre2"><a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="http://www.google.com">http:/<wbr class="pcalibre pcalibre1"/>/<wbr class="pcalibre pcalibre1"/>www.google.com:80</a></p>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A18" data-uri="chapter11.xhtml#P7000497027000000000000000046A18">to determine what kind of server to contact, where the server is, and what port it is listening on. The server uses the suffix</p>
<pre id="P7000497027000000000000000046A19" data-uri="chapter11.xhtml#P7000497027000000000000000046A19" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A1A" data-uri="chapter11.xhtml#P7000497027000000000000000046A1A" class="calibre10 pcalibre pcalibre1">/index.html</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A1B" data-uri="chapter11.xhtml#P7000497027000000000000000046A1B">to find the file on its filesystem and to determine whether the request is for static or dynamic content.</p>
<p id="P7000497027000000000000000046A1C" data-uri="chapter11.xhtml#P7000497027000000000000000046A1C" class="pcalibre1 pcalibre calibre2">There are several points to understand about how servers interpret the suffix of a URL:</p>
<ul id="P7000497027000000000000000046A1D" data-uri="chapter11.xhtml#P7000497027000000000000000046A1D" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000046A1E" data-uri="chapter11.xhtml#P7000497027000000000000000046A1E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046A1F" data-uri="chapter11.xhtml#P7000497027000000000000000046A1F" class="pcalibre calibre3 pcalibre1">There are no standard rules for determining whether a URL refers to static or dynamic content. Each server has its own rules for the files it manages. A classic (old-fashioned) approach is to identify a set of directories, such as <code id="P7000497027000000000000000046A20" data-uri="chapter11.xhtml#P7000497027000000000000000046A20" class="pcalibre1 calibre8 pcalibre">cgi-bin</code>, where all executables must reside.</p></li>
<li id="P7000497027000000000000000046A21" data-uri="chapter11.xhtml#P7000497027000000000000000046A21" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046A22" data-uri="chapter11.xhtml#P7000497027000000000000000046A22" class="pcalibre calibre3 pcalibre1">The initial `/' in the suffix does <i class="calibre5 pcalibre pcalibre1">not</i> denote the Linux root directory. Rather, it denotes the home directory for whatever kind of content is being requested. For example, a server might be configured so that all static content is stored in directory <code id="P7000497027000000000000000046A23" data-uri="chapter11.xhtml#P7000497027000000000000000046A23" class="pcalibre1 calibre8 pcalibre">/usr/httpd/html</code> and all dynamic content is stored in directory <code id="P7000497027000000000000000046A24" data-uri="chapter11.xhtml#P7000497027000000000000000046A24" class="pcalibre1 calibre8 pcalibre">/usr/httpd/cgi-bin</code>.</p></li>
<li id="P7000497027000000000000000046A25" data-uri="chapter11.xhtml#P7000497027000000000000000046A25" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046A26" data-uri="chapter11.xhtml#P7000497027000000000000000046A26" class="pcalibre calibre3 pcalibre1">The minimal URL suffix is the `/' character, which all servers expand to some default home page such as <code id="P7000497027000000000000000046A27" data-uri="chapter11.xhtml#P7000497027000000000000000046A27" class="pcalibre1 calibre8 pcalibre">/index.html</code>. This explains why it is possible to fetch the home page of a site by simply typing a domain name to the browser. The browser appends the missing `/' to the URL and passes it to the server, which expands the `/' to some default filename.</p></li>
</ul>
</section>
<section id="P7000497027000000000000000007ED4" data-uri="chapter11.xhtml#P7000497027000000000000000007ED4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046A28" data-uri="chapter11.xhtml#P7000497027000000000000000046A28" epub:type="title"><span class="pcalibre label pcalibre1">11.5.3 </span>HTTP Transactions</h1></header>
<p id="P7000497027000000000000000046A29" data-uri="chapter11.xhtml#P7000497027000000000000000046A29" class="pcalibre1 pcalibre calibre2">Since HTTP is based on text lines transmitted over Internet connections, we can use the Linux <span class="smallcaps pcalibre pcalibre1">telnet </span>program to conduct transactions with any Web server on the Internet. The <span class="smallcaps pcalibre pcalibre1">telnet </span>program has been largely supplanted by <span class="smallcaps pcalibre pcalibre1">ssh </span>as a remote login tool, but it is very handy for debugging servers that talk to clients with text lines over connections. For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007ED7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.24</span></a> uses <span class="smallcaps pcalibre pcalibre1">telnet </span>to request the home page from the AOL Web server.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007ED7" data-uri="chapter11.xhtml#P7000497027000000000000000007ED7">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007ED8" title="951" data-uri="chapter11.xhtml#P7000497027000000000000000007ED8" epub:type="pagebreak"></span>
<pre id="P7000497027000000000000000046A2A" data-uri="chapter11.xhtml#P7000497027000000000000000046A2A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A2B" data-uri="chapter11.xhtml#P7000497027000000000000000046A2B" class="calibre10 pcalibre pcalibre1">
1	linux&gt; <i class="calibre5 pcalibre pcalibre1">telnet www.aol.com 80</i>		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Client: open connection to server</i></b>
2	Trying 205.188.146.23...		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Telnet prints 3 lines to the terminal</i></b>
3	Connected to aol.com.	
4	Escape character is `⁁]'. 
5	<i class="calibre5 pcalibre pcalibre1">GET / HTTP/1.1</i>				<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Client: request line</i></b>
6	<i class="calibre5 pcalibre pcalibre1">Host: www.aol.com</i>			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Client: required HTTP/1.1 header</i></b>
7						<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Client: empty line terminates headers</i></b>
8	HTTP/1.0 200 OK				<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: response line</i></b>
9	MIME-Version: 1.0			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: followed by five response headers</i></b>
10	Date: Mon, 8 Jan 2010 4:59:42 GMT	
11	Server: Apache-Coyote/1.1	
12	Content-Type: text/html			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: expect HTML in the response body</i></b>
13	Content-Length: 42092			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: expect 42,092 bytes in the response body</i></b>
14						<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: empty line terminates response headers</i></b>
15	&lt;html&gt;					<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: first HTML line in response body</i></b>
16	…					<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: 766 lines of HTML not shown</i></b>
17	&lt;/html&gt;					<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: last HTML line in response body</i></b>
18	Connection closed by foreign host.	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Server: closes connection</i></b>
19	linux&gt;					<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Client: closes connection and terminates</i></b>
</code></pre>
<figcaption id="P7000497027000000000000000046A2C" data-uri="chapter11.xhtml#P7000497027000000000000000046A2C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046A2D" data-uri="chapter11.xhtml#P7000497027000000000000000046A2D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.24 </span>Example of an HTTP transaction that serves static content.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046A2E" data-uri="chapter11.xhtml#P7000497027000000000000000046A2E" class="pcalibre1 pcalibre calibre2">In line 1, we run <span class="smallcaps pcalibre pcalibre1">telnet </span>from a Linux shell and ask it to open a connection to the AOL Web server. <span class="smallcaps pcalibre pcalibre1">telnet </span>prints three lines of output to the terminal, opens the connection, and then waits for us to enter text (line 5). Each time we enter a text line and hit the <code id="P7000497027000000000000000046A2F" data-uri="chapter11.xhtml#P7000497027000000000000000046A2F" class="pcalibre1 calibre8 pcalibre">enter</code> key, <span class="smallcaps pcalibre pcalibre1">telnet </span>reads the line, appends carriage return and line feed characters (<code id="P7000497027000000000000000046A30" data-uri="chapter11.xhtml#P7000497027000000000000000046A30" class="pcalibre1 calibre8 pcalibre">'\r\n'</code> in C notation), and sends the line to the server. This is consistent with the HTTP standard, which requires every text line to be terminated by a carriage return and line feed pair. To initiate the transaction, we enter an HTTP request (lines 5−7). The server replies with an HTTP response (lines 8−17) and then closes the connection (line 18).</p>
<section id="P7000497027000000000000000007EE0" data-uri="chapter11.xhtml#P7000497027000000000000000007EE0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A31" data-uri="chapter11.xhtml#P7000497027000000000000000046A31" epub:type="title">HTTP Requests</h1></header>
<p id="P7000497027000000000000000046A32" data-uri="chapter11.xhtml#P7000497027000000000000000046A32" class="pcalibre1 pcalibre calibre2">An <i class="calibre5 pcalibre pcalibre1">HTTP request</i> consists of a <i class="calibre5 pcalibre pcalibre1">request line</i> (line 5), followed by zero or more <i class="calibre5 pcalibre pcalibre1">request headers</i> (line 6), followed by an empty text line that terminates the list of headers (line 7). A request line has the form</p>
<p id="P7000497027000000000000000046A33" data-uri="chapter11.xhtml#P7000497027000000000000000046A33" class="pcalibre1 pcalibre calibre2"><i class="calibre5 pcalibre pcalibre1">method URI version</i></p>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A34" data-uri="chapter11.xhtml#P7000497027000000000000000046A34">HTTP supports a number of different <i class="calibre5 pcalibre pcalibre1">methods</i>, including GET, POST, OPTIONS, HEAD, PUT, DELETE, and TRACE. We will only discuss the workhorse GET method, which accounts for a majority of HTTP requests. The GET method instructs the server to generate and return the content identified by the <i class="calibre5 pcalibre pcalibre1">URI</i> <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007EE5" title="952" data-uri="chapter11.xhtml#P7000497027000000000000000007EE5" epub:type="pagebreak"></span><i class="calibre5 pcalibre pcalibre1">(uniform resource identifier)</i>. The URI is the suffix of the corresponding URL that includes the filename and optional arguments.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P700049702700000000000000000805A" epub:type="noteref" href="#P700049702700000000000000000805A">3</a></p><aside class="footnote pcalibre5 pcalibre" id="P700049702700000000000000000805A" data-uri="chapter11.xhtml#P700049702700000000000000000805A" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P700049702700000000000000000805A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">3. </a></span>Actually, this is only true when a browser requests content. If a proxy server requests content, then the URI must be the complete URL.</p></aside>
<p id="P7000497027000000000000000046A35" data-uri="chapter11.xhtml#P7000497027000000000000000046A35" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">version</i> field in the request line indicates the HTTP version to which the request conforms. The most recent HTTP version is HTTP/1.1 <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3EB">[37]</a>. HTTP/1.0 is an earlier, much simpler version from 1996 <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3AC">[6]</a>. HTTP/1.1 defines additional headers that provide support for advanced features such as caching and security, as well as a mechanism that allows a client and server to perform multiple transactions over the same <i class="calibre5 pcalibre pcalibre1">persistent connection</i>. In practice, the two versions are compatible because HTTP/1.0 clients and servers simply ignore unknown HTTP/1.1 headers.</p>
<p id="P7000497027000000000000000046A36" data-uri="chapter11.xhtml#P7000497027000000000000000046A36" class="pcalibre1 pcalibre calibre2">To summarize, the request line in line 5 asks the server to fetch and return the HTML file <code id="P7000497027000000000000000046A37" data-uri="chapter11.xhtml#P7000497027000000000000000046A37" class="pcalibre1 calibre8 pcalibre">/index.html</code>. It also informs the server that the remainder of the request will be in HTTP/1.1 format.</p>
<p id="P7000497027000000000000000046A38" data-uri="chapter11.xhtml#P7000497027000000000000000046A38" class="pcalibre1 pcalibre calibre2">Request headers provide additional information to the server, such as the brand name of the browser or the MIME types that the browser understands. Request headers have the form</p>
<p id="P7000497027000000000000000046A39" data-uri="chapter11.xhtml#P7000497027000000000000000046A39" class="pcalibre1 pcalibre calibre2"><i class="calibre5 pcalibre pcalibre1">header-name</i>: <i class="calibre5 pcalibre pcalibre1">header-data</i></p>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A3A" data-uri="chapter11.xhtml#P7000497027000000000000000046A3A">For our purposes, the only header to be concerned with is the <code id="P7000497027000000000000000046A3B" data-uri="chapter11.xhtml#P7000497027000000000000000046A3B" class="pcalibre1 calibre8 pcalibre">Host</code> header (line 6), which is required in HTTP/1.1 requests, but not in HTTP/1.0 requests. The <code id="P7000497027000000000000000046A3C" data-uri="chapter11.xhtml#P7000497027000000000000000046A3C" class="pcalibre1 calibre8 pcalibre">Host</code> header is used by <i class="calibre5 pcalibre pcalibre1">proxy caches</i>, which sometimes serve as intermediaries between a browser and the <i class="calibre5 pcalibre pcalibre1">origin server</i> that manages the requested file. Multiple proxies can exist between a client and an origin server in a so-called proxy chain. The data in the <code id="P7000497027000000000000000046A3D" data-uri="chapter11.xhtml#P7000497027000000000000000046A3D" class="pcalibre1 calibre8 pcalibre">Host</code> header, which identifies the domain name of the origin server, allow a proxy in the middle of a proxy chain to determine if it might have a locally cached copy of the requested content.</p>
<p id="P7000497027000000000000000046A3E" data-uri="chapter11.xhtml#P7000497027000000000000000046A3E" class="pcalibre1 pcalibre calibre2">Continuing with our example in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007ED7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.24</span></a>, the empty text line in line 7 (generated by hitting <code id="P7000497027000000000000000046A3F" data-uri="chapter11.xhtml#P7000497027000000000000000046A3F" class="pcalibre1 calibre8 pcalibre">enter</code> on our keyboard) terminates the headers and instructs the server to send the requested HTML file.</p>
</section>
<section id="P7000497027000000000000000007EF1" data-uri="chapter11.xhtml#P7000497027000000000000000007EF1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A40" data-uri="chapter11.xhtml#P7000497027000000000000000046A40" epub:type="title">HTTP Responses</h1></header>
<p id="P7000497027000000000000000046A41" data-uri="chapter11.xhtml#P7000497027000000000000000046A41" class="pcalibre1 pcalibre calibre2">HTTP responses are similar to HTTP requests. An <i class="calibre5 pcalibre pcalibre1">HTTP response</i> consists of a <i class="calibre5 pcalibre pcalibre1">response line</i> (line 8), followed by zero or more <i class="calibre5 pcalibre pcalibre1">response headers</i> (lines 9−13), followed by an empty line that terminates the headers (line 14), followed by the <i class="calibre5 pcalibre pcalibre1">response body</i> (lines 15−17). A response line has the form</p>
<p id="P7000497027000000000000000046A42" data-uri="chapter11.xhtml#P7000497027000000000000000046A42" class="pcalibre1 pcalibre calibre2"><i class="calibre5 pcalibre pcalibre1">version status-code status-message</i></p>
<p id="P7000497027000000000000000046A43" data-uri="chapter11.xhtml#P7000497027000000000000000046A43" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">version</i> field describes the HTTP version that the response conforms to. The <i class="calibre5 pcalibre pcalibre1">status-code</i> is a three-digit positive integer that indicates the disposition of the request. The <i class="calibre5 pcalibre pcalibre1">status-message</i> gives the English equivalent of the error code. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007EFA"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.25</span></a> lists some common status codes and their corresponding messages.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007EF6" data-uri="chapter11.xhtml#P7000497027000000000000000007EF6"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046A44" data-uri="chapter11.xhtml#P7000497027000000000000000046A44" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007EF8" title="953" data-uri="chapter11.xhtml#P7000497027000000000000000007EF8" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Passing arguments in HTTP POST requests</h1></header>
<p id="P7000497027000000000000000046A45" data-uri="chapter11.xhtml#P7000497027000000000000000046A45" class="pcalibre calibre3 pcalibre1">Arguments for HTTP POST requests are passed in the request body rather than in the URI.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007EFA" data-uri="chapter11.xhtml#P7000497027000000000000000007EFA">
<table id="P7000497027000000000000000046A46" data-uri="chapter11.xhtml#P7000497027000000000000000046A46" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046A47" data-uri="chapter11.xhtml#P7000497027000000000000000046A47" class="calibre18 pcalibre pcalibre1">Status code</th>
<th id="P7000497027000000000000000046A48" data-uri="chapter11.xhtml#P7000497027000000000000000046A48" class="calibre18 pcalibre pcalibre1">Status message</th>
<th id="P7000497027000000000000000046A49" data-uri="chapter11.xhtml#P7000497027000000000000000046A49" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A4A" data-uri="chapter11.xhtml#P7000497027000000000000000046A4A" class="calibre20 pcalibre pcalibre1">200</td>
<td id="P7000497027000000000000000046A4B" data-uri="chapter11.xhtml#P7000497027000000000000000046A4B" class="calibre20 pcalibre pcalibre1">OK</td>
<td id="P7000497027000000000000000046A4C" data-uri="chapter11.xhtml#P7000497027000000000000000046A4C" class="calibre20 pcalibre pcalibre1">Request was handled without error.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A4D" data-uri="chapter11.xhtml#P7000497027000000000000000046A4D" class="calibre20 pcalibre pcalibre1">301</td>
<td id="P7000497027000000000000000046A4E" data-uri="chapter11.xhtml#P7000497027000000000000000046A4E" class="calibre20 pcalibre pcalibre1">Moved permanently</td>
<td id="P7000497027000000000000000046A4F" data-uri="chapter11.xhtml#P7000497027000000000000000046A4F" class="calibre20 pcalibre pcalibre1">Content has moved to the hostname in the Location header.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A50" data-uri="chapter11.xhtml#P7000497027000000000000000046A50" class="calibre20 pcalibre pcalibre1">400</td>
<td id="P7000497027000000000000000046A51" data-uri="chapter11.xhtml#P7000497027000000000000000046A51" class="calibre20 pcalibre pcalibre1">Bad request</td>
<td id="P7000497027000000000000000046A52" data-uri="chapter11.xhtml#P7000497027000000000000000046A52" class="calibre20 pcalibre pcalibre1">Request could not be understood by the server.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A53" data-uri="chapter11.xhtml#P7000497027000000000000000046A53" class="calibre20 pcalibre pcalibre1">403</td>
<td id="P7000497027000000000000000046A54" data-uri="chapter11.xhtml#P7000497027000000000000000046A54" class="calibre20 pcalibre pcalibre1">Forbidden</td>
<td id="P7000497027000000000000000046A55" data-uri="chapter11.xhtml#P7000497027000000000000000046A55" class="calibre20 pcalibre pcalibre1">Server lacks permission to access the requested file.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A56" data-uri="chapter11.xhtml#P7000497027000000000000000046A56" class="calibre20 pcalibre pcalibre1">404</td>
<td id="P7000497027000000000000000046A57" data-uri="chapter11.xhtml#P7000497027000000000000000046A57" class="calibre20 pcalibre pcalibre1">Not found</td>
<td id="P7000497027000000000000000046A58" data-uri="chapter11.xhtml#P7000497027000000000000000046A58" class="calibre20 pcalibre pcalibre1">Server could not find the requested file.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A59" data-uri="chapter11.xhtml#P7000497027000000000000000046A59" class="calibre20 pcalibre pcalibre1">501</td>
<td id="P7000497027000000000000000046A5A" data-uri="chapter11.xhtml#P7000497027000000000000000046A5A" class="calibre20 pcalibre pcalibre1">Not implemented</td>
<td id="P7000497027000000000000000046A5B" data-uri="chapter11.xhtml#P7000497027000000000000000046A5B" class="calibre20 pcalibre pcalibre1">Server does not support the request method.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A5C" data-uri="chapter11.xhtml#P7000497027000000000000000046A5C" class="calibre20 pcalibre pcalibre1">505</td>
<td id="P7000497027000000000000000046A5D" data-uri="chapter11.xhtml#P7000497027000000000000000046A5D" class="calibre20 pcalibre pcalibre1">HTTP version not supported</td>
<td id="P7000497027000000000000000046A5E" data-uri="chapter11.xhtml#P7000497027000000000000000046A5E" class="calibre20 pcalibre pcalibre1">Server does not support version in request.</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000046A5F" data-uri="chapter11.xhtml#P7000497027000000000000000046A5F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046A60" data-uri="chapter11.xhtml#P7000497027000000000000000046A60" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.25 </span>Some HTTP status codes.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046A61" data-uri="chapter11.xhtml#P7000497027000000000000000046A61" class="pcalibre1 pcalibre calibre2">The response headers in lines 9−13 provide additional information about the response. For our purposes, the two most important headers are <code id="P7000497027000000000000000046A62" data-uri="chapter11.xhtml#P7000497027000000000000000046A62" class="pcalibre1 calibre8 pcalibre">Content-Type</code> (line 12), which tells the client the MIME type of the content in the response body, and <code id="P7000497027000000000000000046A63" data-uri="chapter11.xhtml#P7000497027000000000000000046A63" class="pcalibre1 calibre8 pcalibre">Content-Length</code> (line 13), which indicates its size in bytes.</p>
<p id="P7000497027000000000000000046A64" data-uri="chapter11.xhtml#P7000497027000000000000000046A64" class="pcalibre1 pcalibre calibre2">The empty text line in line 14 that terminates the response headers is followed by the response body, which contains the requested content.</p>
</section>
</section>
<section id="P7000497027000000000000000007F1A" data-uri="chapter11.xhtml#P7000497027000000000000000007F1A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046A65" data-uri="chapter11.xhtml#P7000497027000000000000000046A65" epub:type="title"><span class="pcalibre label pcalibre1">11.5.4 </span>Serving Dynamic Content</h1></header>
<p id="P7000497027000000000000000046A66" data-uri="chapter11.xhtml#P7000497027000000000000000046A66" class="pcalibre1 pcalibre calibre2">If we stop to think for a moment how a server might provide dynamic content to a client, certain questions arise. For example, how does the client pass any program arguments to the server? How does the server pass these arguments to the child process that it creates? How does the server pass other information to the child that it might need to generate the content? Where does the child send its output? These questions are addressed by a de facto standard called <i class="calibre5 pcalibre pcalibre1">CGI (common gateway interface)</i>.</p>
<section id="P7000497027000000000000000007F1D" data-uri="chapter11.xhtml#P7000497027000000000000000007F1D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A67" data-uri="chapter11.xhtml#P7000497027000000000000000046A67" epub:type="title">How Does the Client Pass Program Arguments to the Server?</h1></header>
<p id="P7000497027000000000000000046A68" data-uri="chapter11.xhtml#P7000497027000000000000000046A68" class="pcalibre1 pcalibre calibre2">Arguments for GET requests are passed in the URI. As we have seen, a `?' character separates the filename from the arguments, and each argument is separated by an `&amp;' character. Spaces are not allowed in arguments and must be represented with the %20 string. Similar encodings exist for other special characters.</p>
</section>
<section id="P7000497027000000000000000007F20" data-uri="chapter11.xhtml#P7000497027000000000000000007F20" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A69" data-uri="chapter11.xhtml#P7000497027000000000000000046A69" epub:type="title">How Does the Server Pass Arguments to the Child?</h1></header>
<p id="P7000497027000000000000000046A6A" data-uri="chapter11.xhtml#P7000497027000000000000000046A6A" class="pcalibre1 pcalibre calibre2">After a server receives a request such as</p>
<pre id="P7000497027000000000000000046A6B" data-uri="chapter11.xhtml#P7000497027000000000000000046A6B" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A6C" data-uri="chapter11.xhtml#P7000497027000000000000000046A6C" class="calibre10 pcalibre pcalibre1">GET /cgi-bin/adder?15000&amp;213 HTTP/1.1</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007F25" data-uri="chapter11.xhtml#P7000497027000000000000000007F25">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007F26" title="954" data-uri="chapter11.xhtml#P7000497027000000000000000007F26" epub:type="pagebreak"></span>
<table id="P7000497027000000000000000046A6D" data-uri="chapter11.xhtml#P7000497027000000000000000046A6D" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046A6E" data-uri="chapter11.xhtml#P7000497027000000000000000046A6E" class="calibre18 pcalibre pcalibre1">Environment variable</th>
<th id="P7000497027000000000000000046A6F" data-uri="chapter11.xhtml#P7000497027000000000000000046A6F" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A70" data-uri="chapter11.xhtml#P7000497027000000000000000046A70" class="calibre20 pcalibre pcalibre1">QUERY_STRING</td>
<td id="P7000497027000000000000000046A71" data-uri="chapter11.xhtml#P7000497027000000000000000046A71" class="calibre20 pcalibre pcalibre1">Program arguments</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A72" data-uri="chapter11.xhtml#P7000497027000000000000000046A72" class="calibre20 pcalibre pcalibre1">SERVER_PORT</td>
<td id="P7000497027000000000000000046A73" data-uri="chapter11.xhtml#P7000497027000000000000000046A73" class="calibre20 pcalibre pcalibre1">Port that the parent is listening on</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A74" data-uri="chapter11.xhtml#P7000497027000000000000000046A74" class="calibre20 pcalibre pcalibre1">REQUEST_METHOD</td>
<td id="P7000497027000000000000000046A75" data-uri="chapter11.xhtml#P7000497027000000000000000046A75" class="calibre20 pcalibre pcalibre1">GET or POST</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A76" data-uri="chapter11.xhtml#P7000497027000000000000000046A76" class="calibre20 pcalibre pcalibre1">REMOTE_HOST</td>
<td id="P7000497027000000000000000046A77" data-uri="chapter11.xhtml#P7000497027000000000000000046A77" class="calibre20 pcalibre pcalibre1">Domain name of client</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A78" data-uri="chapter11.xhtml#P7000497027000000000000000046A78" class="calibre20 pcalibre pcalibre1">REMOTE_ADDR</td>
<td id="P7000497027000000000000000046A79" data-uri="chapter11.xhtml#P7000497027000000000000000046A79" class="calibre20 pcalibre pcalibre1">Dotted-decimal IP address of client</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A7A" data-uri="chapter11.xhtml#P7000497027000000000000000046A7A" class="calibre20 pcalibre pcalibre1">CONTENT_TYPE</td>
<td id="P7000497027000000000000000046A7B" data-uri="chapter11.xhtml#P7000497027000000000000000046A7B" class="calibre20 pcalibre pcalibre1">POST only: MIME type of the request body</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046A7C" data-uri="chapter11.xhtml#P7000497027000000000000000046A7C" class="calibre20 pcalibre pcalibre1">CONTENT_LENGTH</td>
<td id="P7000497027000000000000000046A7D" data-uri="chapter11.xhtml#P7000497027000000000000000046A7D" class="calibre20 pcalibre pcalibre1">POST only: Size in bytes of the request body</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000046A7E" data-uri="chapter11.xhtml#P7000497027000000000000000046A7E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046A7F" data-uri="chapter11.xhtml#P7000497027000000000000000046A7F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.26 </span>Examples of CGI environment variables.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046A80" data-uri="chapter11.xhtml#P7000497027000000000000000046A80">it calls <code id="P7000497027000000000000000046A81" data-uri="chapter11.xhtml#P7000497027000000000000000046A81" class="pcalibre1 calibre8 pcalibre">fork</code> to create a child process and calls <code id="P7000497027000000000000000046A82" data-uri="chapter11.xhtml#P7000497027000000000000000046A82" class="pcalibre1 calibre8 pcalibre">execve</code> to run the <code id="P7000497027000000000000000046A83" data-uri="chapter11.xhtml#P7000497027000000000000000046A83" class="pcalibre1 calibre8 pcalibre">/cgi-bin/adder</code> program in the context of the child. Programs like the <code id="P7000497027000000000000000046A84" data-uri="chapter11.xhtml#P7000497027000000000000000046A84" class="pcalibre1 calibre8 pcalibre">adder</code> program are often referred to as <i class="calibre5 pcalibre pcalibre1">CGI programs</i> because they obey the rules of the CGI standard. Before the call to <code id="P7000497027000000000000000046A85" data-uri="chapter11.xhtml#P7000497027000000000000000046A85" class="pcalibre1 calibre8 pcalibre">execve</code>, the child process sets the CGI environment variable QUERY_STRING to <code id="P7000497027000000000000000046A86" data-uri="chapter11.xhtml#P7000497027000000000000000046A86" class="pcalibre1 calibre8 pcalibre">15000&amp;213</code>, which the <code id="P7000497027000000000000000046A87" data-uri="chapter11.xhtml#P7000497027000000000000000046A87" class="pcalibre1 calibre8 pcalibre">adder</code> program can reference at run time using the Linux <code id="P7000497027000000000000000046A88" data-uri="chapter11.xhtml#P7000497027000000000000000046A88" class="pcalibre1 calibre8 pcalibre">getenv</code> function.</p>
</section>
<section id="P7000497027000000000000000007F43" data-uri="chapter11.xhtml#P7000497027000000000000000007F43" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A89" data-uri="chapter11.xhtml#P7000497027000000000000000046A89" epub:type="title">How Does the Server Pass Other Information to the Child?</h1></header>
<p id="P7000497027000000000000000046A8A" data-uri="chapter11.xhtml#P7000497027000000000000000046A8A" class="pcalibre1 pcalibre calibre2">CGI defines a number of other environment variables that a CGI program can expect to be set when it runs. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007F25"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.26</span></a> shows a subset.</p>
</section>
<section id="P7000497027000000000000000007F46" data-uri="chapter11.xhtml#P7000497027000000000000000007F46" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046A8B" data-uri="chapter11.xhtml#P7000497027000000000000000046A8B" epub:type="title">Where Does the Child Send Its Output?</h1></header>
<p id="P7000497027000000000000000046A8C" data-uri="chapter11.xhtml#P7000497027000000000000000046A8C" class="pcalibre1 pcalibre calibre2">A CGI program sends its dynamic content to the standard output. Before the child process loads and runs the CGI program, it uses the Linux <code id="P7000497027000000000000000046A8D" data-uri="chapter11.xhtml#P7000497027000000000000000046A8D" class="pcalibre1 calibre8 pcalibre">dup2</code> function to redirect standard output to the connected descriptor that is associated with the client. Thus, anything that the CGI program writes to standard output goes directly to the client.</p>
<p id="P7000497027000000000000000046A8E" data-uri="chapter11.xhtml#P7000497027000000000000000046A8E" class="pcalibre1 pcalibre calibre2">Notice that since the parent does not know the type or size of the content that the child generates, the child is responsible for generating the <code id="P7000497027000000000000000046A8F" data-uri="chapter11.xhtml#P7000497027000000000000000046A8F" class="pcalibre1 calibre8 pcalibre">Content-type</code> and <code id="P7000497027000000000000000046A90" data-uri="chapter11.xhtml#P7000497027000000000000000046A90" class="pcalibre1 calibre8 pcalibre">Content-length</code> response headers, as well as the empty line that terminates the headers.</p>
<p id="P7000497027000000000000000046A91" data-uri="chapter11.xhtml#P7000497027000000000000000046A91" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007F59"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.27</span></a> shows a simple CGI program that sums its two arguments and returns an HTML file with the result to the client. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007F5E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.28</span></a> shows an HTTP transaction that serves dynamic content from the <code id="P7000497027000000000000000046A92" data-uri="chapter11.xhtml#P7000497027000000000000000046A92" class="pcalibre1 calibre8 pcalibre">adder</code> program.</p>
<section id="P7000497027000000000000000007F4F" data-uri="chapter11.xhtml#P7000497027000000000000000007F4F" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000046A93" data-uri="chapter11.xhtml#P7000497027000000000000000046A93" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">11.5 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000008021.xhtml#P7000497027000000000000000008051">969</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046A94" data-uri="chapter11.xhtml#P7000497027000000000000000046A94">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046A95" data-uri="chapter11.xhtml#P7000497027000000000000000046A95">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046A96" data-uri="chapter11.xhtml#P7000497027000000000000000046A96"><p id="P7000497027000000000000000046A97" data-uri="chapter11.xhtml#P7000497027000000000000000046A97" class="pcalibre calibre3 pcalibre1">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007AE3.xhtml#P7000497027000000000000000007AE3"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">10.11</span></a>, we warned you about the dangers of using the C standard I/O functions in network applications. Yet the CGI program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007F59"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.27</span></a> is able to use standard I/O without any problems. Why?</p></div></li>
</ol>
</section>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007F55" data-uri="chapter11.xhtml#P7000497027000000000000000007F55"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046A98" data-uri="chapter11.xhtml#P7000497027000000000000000046A98" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007F57" title="955" data-uri="chapter11.xhtml#P7000497027000000000000000007F57" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Passing arguments in HTTP POST requests to CGI programs</h1></header>
<p id="P7000497027000000000000000046A99" data-uri="chapter11.xhtml#P7000497027000000000000000046A99" class="pcalibre calibre3 pcalibre1">For POST requests, the child would also need to redirect standard input to the connected descriptor. The CGI program would then read the arguments in the request body from standard input.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007F59" data-uri="chapter11.xhtml#P7000497027000000000000000007F59">
<pre id="P7000497027000000000000000046A9A" data-uri="chapter11.xhtml#P7000497027000000000000000046A9A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A9B" data-uri="chapter11.xhtml#P7000497027000000000000000046A9B" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main(void) {
4		char *buf, *p;
5		char arg1[MAXLINE], arg2[MAXLINE], content[MAXLINE];
6		int n1=0, n2=0;
7	
8		/* Extract the two arguments */
9		if ((buf = getenv("QUERY_STRING")) != NULL) {
10			p = strchr(buf, `&amp;');
11			*p = `\0';
12			strcpy(arg1, buf);
13			strcpy(arg2, p+1);
14			n1 = atoi(arg1);
15			n2 = atoi(arg2);
16		}
17	
18		/* Make the response body */
19		sprintf(content, "QUERY_STRING=%s", buf);
20		sprintf(content, "Welcome to add.com: ");
21		sprintf(content, "%sTHE Internet addition portal.\r\n&lt;p&gt;", content);
22		sprintf(content, "%sThe answer is: %d + %d = %d\r\n&lt;p&gt;",
23			content, n1, n2, n1 + n2);
24		sprintf(content, "%sThanks for visiting!\r\n", content);
25	
26		/* Generate the HTTP response */
27		printf("Connection: close\r\n");
28		printf("Content-length: %d\r\n", (int)strlen(content));
29		printf("Content-type: text/html\r\n\r\n");
30		printf("%s", content);
31		fflush(stdout);
32	
33		exit(0);
34	}
</code></pre>
<figcaption id="P7000497027000000000000000046A9C" data-uri="chapter11.xhtml#P7000497027000000000000000046A9C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046A9D" data-uri="chapter11.xhtml#P7000497027000000000000000046A9D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.27 </span>CGI program that sums two integers.</h1></header>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007F5E" data-uri="chapter11.xhtml#P7000497027000000000000000007F5E">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007F5F" title="956" data-uri="chapter11.xhtml#P7000497027000000000000000007F5F" epub:type="pagebreak"></span>
<pre id="P7000497027000000000000000046A9E" data-uri="chapter11.xhtml#P7000497027000000000000000046A9E" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046A9F" data-uri="chapter11.xhtml#P7000497027000000000000000046A9F" class="calibre10 pcalibre pcalibre1">
1	linux&gt; <i class="calibre5 pcalibre pcalibre1">telnet kittyhawk.cmcl.cs.cmu.edu 8000</i>	<i class="calibre5 pcalibre pcalibre1">Client: open connection</i>
2	Trying 128.2.194.242...
3	Connected to kittyhawk.cmcl.cs.cmu.edu.
4	Escape character is `⁁]'.
5	<i class="calibre5 pcalibre pcalibre1">GET /cgi-bin/adder?15000&amp;213 HTTP/1.0</i>			<i class="calibre5 pcalibre pcalibre1">Client: request line</i>
6								<i class="calibre5 pcalibre pcalibre1">Client: empty line terminates headers</i>
7	HTTP/1.0 200 OK						<i class="calibre5 pcalibre pcalibre1">Server: response line</i>
8	Server: Tiny Web Server					<i class="calibre5 pcalibre pcalibre1">Server: identify server</i>
9	Content-length: 115					<i class="calibre5 pcalibre pcalibre1">Adder: expect 115 bytes in response body</i>
10	Content-type: text/html					<i class="calibre5 pcalibre pcalibre1">Adder: expect HTML in response body</i>
11								<i class="calibre5 pcalibre pcalibre1">Adder: empty line terminates headers</i>
12	Welcome to add.com: THE Internet addition portal.	<i class="calibre5 pcalibre pcalibre1">Adder: first HTML line</i>
13	&lt;p&gt;The answer is: 15000 + 213 = 15213			<i class="calibre5 pcalibre pcalibre1">Adder: second HTML line in response body</i>
14	&lt;p&gt;Thanks for visiting!					<i class="calibre5 pcalibre pcalibre1">Adder: third HTML line in response body</i>
15	Connection closed by foreign host.			<i class="calibre5 pcalibre pcalibre1">Server: closes connection</i>
16	linux&gt;							<i class="calibre5 pcalibre pcalibre1">Client: closes connection and terminates</i>
</code></pre>
<figcaption id="P7000497027000000000000000046AA0" data-uri="chapter11.xhtml#P7000497027000000000000000046AA0" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046AA1" data-uri="chapter11.xhtml#P7000497027000000000000000046AA1" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">11.28 </span>An HTTP transaction that serves dynamic HTML content.</h1></header>
</figcaption>
</figure>
</section>
</section>
</section></body></html>
