<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.3   Normal Forms</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part153.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part155.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">7.3   <span style=" color: #00AEEF;">Normal Forms</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">As stated in Section 7.1.3, there are a number of diﬀerent normal forms that are used in designing relational databases. In this section, we cover two of the most common ones.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">7.3.1 Boyce – Codd Normal Form</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">One of the more desirable normal forms that we can obtain is <span class="s63">Boyce– Codd normal form </span>(<span class="s64">BCNF</span>). It eliminates all redundancy that can be discovered based on functional depen- dencies, though, as we shall see in Section 7.6, there may be other types of redundancy remaining.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">7.3.1.1 Definition</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;line-height: 76%;text-align: justify;">A relation schema <i>R </i>is in <span class="s44">BCNF </span>with respect to a set <i>F </i>of functional dependencies if, for all functional dependencies in <i>F </i><span class="s181">+</span><span class="s15"> </span>of the form <span class="s15">α </span><span class="s86">→ </span><span class="s15">β</span>, where <span class="s15">α </span><span class="s83">⊆ </span><i>R </i>and <span class="s15">β </span><span class="s83">⊆ </span><i>R</i>, at least one of the following holds:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1906.png"/></span></p><p class="s111" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;"><span class="s77">5</span><span class="s78">The case for </span>R<span class="s234">1 </span><span class="s230">∩ </span>R<span class="s234">2 </span><span class="s235">→ </span>R<span class="s234">2 </span><span class="s78">is symmetrical, and ignored.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 20pt;text-align: left;"><span class="s39">• </span>α <span class="s86">→ </span>β <span class="p">is a trivial functional dependency (i.e., </span>β <span class="s83">⊆ </span>α<span class="p">).</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span class="s39">• </span><span class="s15">α </span>is a superkey for schema <i>R</i>.</p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A database design is in <span class="s44">BCNF </span>if each member of the set of relation schemas that con- stitutes the design is in <span class="s44">BCNF</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We have already seen in Section 7.1 an example of a relational schema that is not in <span class="s44">BCNF</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1907.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1908.png"/></span></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: center;"><i>in dep </i>(<span class="s69">ID</span>, <i>name</i>, <i>salary</i>, <i>dept name</i>, <i>building</i>, <i>budget</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1909.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1910.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1911.png"/></span></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 86%;text-align: justify;"><span class="p">The functional dependency </span>dept name <span class="s86">→ </span>budget <span class="p">holds on </span>in dep<span class="p">, but </span>dept name <span class="p">is not a superkey (because a department may have a number of diﬀerent instructors). In Section</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1912.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">7.1 we saw that the decomposition of <i>in dep </i>into <i>instructor </i>and <i>department </i>is a better design. The <i>instructor </i>schema is in <span class="s44">BCNF</span>. All of the nontrivial functional dependencies that hold, such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1913.png"/></span></p><p class="s13" style="padding-top: 10pt;padding-left: 63pt;text-indent: 0pt;text-align: center;"><span class="s69">ID </span><span class="s86">→ </span>name<span class="p">, </span>dept name<span class="p">, </span>salary</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1914.png"/></span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">include <span class="s69">ID </span>on the left side of the arrow, and <span class="s69">ID </span>is a superkey (actually, in this case, the primary key) for <i>instructor</i>. (In other words, there is no nontrivial functional depen- dency with any combination of <i>name</i>, <i>dept name</i>, and <i>salary</i>, without <span class="s69">ID</span>, on the left side.) Thus, <i>instructor </i>is in <span class="s44">BCNF</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Similarly, the <i>department </i>schema is in <span class="s44">BCNF </span>because all of the nontrivial functional dependencies that hold, such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1915.png"/></span></p><p class="s13" style="padding-top: 10pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">dept name <span class="s86">→ </span>building<span class="p">, </span>budget</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1916.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1917.png"/></span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">include <i>dept name </i>on the left side of the arrow, and <i>dept name </i>is a superkey (and the primary key) for <i>department</i>. Thus, <i>department </i>is in <span class="s44">BCNF</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;line-height: 92%;text-align: justify;">We now state a general rule for decomposing schemas that are not in <span class="s44">BCNF</span>. Let <i>R </i>be a schema that is not in <span class="s44">BCNF</span>. Then there is at least one nontrivial functional dependency <span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>such that <span class="s15">α </span>is not a superkey for <i>R</i>. We replace <i>R </i>in our design with two schemas:</p><p class="s39" style="padding-top: 10pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">• <span class="s40">(</span><span class="s15">α ∪ β</span><span class="p">)</span></p><p class="s15" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;"><span class="s39">• </span><span class="s40">(</span><span class="s13">R </span>− <span class="p">(</span>β − α<span class="p">))</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1918.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1919.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1920.png"/></span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In the case of <i>in dep </i>above, <span class="s15">α= </span><i>dept name</i>, <span class="s15">β= </span><span class="s95">{</span><i>building</i>, <i>budget</i><span class="s95">}</span>, and <i>in dep </i>is replaced by</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1921.png"/></span></p><p style="padding-top: 10pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">(</span><span class="s15">α ∪ β</span>)= (<i>dept name</i>, <i>building</i>,<i>budget</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1922.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">(</span><i>R </i><span class="s15">− </span>(<span class="s15">β − α</span>)) = (<span class="s69">ID</span>, <i>name</i>, <i>dept name</i>, <i>salary</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:13pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" colspan="2" bgcolor="#C7EAFB"><p class="s70" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">department</p></td></tr><tr style="height:40pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" colspan="2"><p class="s236" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">dept_name</p><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">building budget</p></td></tr><tr style="height:22pt"><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:16pt"><td style="width:36pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s70" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">student</p></td></tr><tr style="height:10pt"><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p class="s236" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">ID</p><p class="s70" style="padding-top: 1pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">name tot_cred</p></td></tr><tr style="height:33pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-left: 284pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: 56pt;">	</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="230" height="78" alt="image" src="Image_1923.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">dept_advisor</p><p style="text-indent: 0pt;text-align: left;"/><p class="s99" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">ID</p><p class="s69" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">name salary</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">instructor</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1924.png"/></span></p><p class="s74" style="padding-top: 4pt;padding-left: 211pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 7.6 </span>The <span class="s91">dept advisor </span>relationship set.</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In this example, it turns out that <span class="s15">β − α = β</span>. We need to state the rule as we did so as to deal correctly with functional dependencies that have attributes that appear on both sides of the arrow. The technical reasons for this are covered later in Section 7.5.1.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When we decompose a schema that is not in <span class="s44">BCNF</span>, it may be that one or more of the resulting schemas are not in <span class="s44">BCNF</span>. In such cases, further decomposition is required, the eventual result of which is a set of <span class="s44">BCNF </span>schemas.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">7.3.1.2 BCNF and Dependency Preservation</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We have seen several ways in which to express database consistency constraints: primary-key constraints, functional dependencies, <b>check </b>constraints, assertions, and triggers. Testing these constraints each time the database is updated can be costly and, therefore, it is useful to design the database in a way that constraints can be tested eﬃ- ciently. In particular, if testing a functional dependency can be done by considering just one relation, then the cost of testing this constraint is low. We shall see that, in some cases, decomposition into <span class="s44">BCNF </span>can prevent eﬃcient testing of certain functional de- pendencies.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To illustrate this, suppose that we make a small change to our university organiza- tion. In the design of Figure 6.15, a student may have only one advisor. This follows from the relationship set <i>advisor </i>being many-to-one from <i>student </i>to <i>advisor</i>. The “small” change we shall make is that an instructor can be associated with only a single depart- ment, and a student may have more than one advisor, but no more than one from a given department.<span class="s76">6</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1925.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">One way to implement this change using the <span class="s44">E-R </span>design is by replacing the <i>advi- sor </i>relationship set with a ternary relationship set, <i>dept advisor</i>, involving entity sets <i>instructor</i>, <i>student</i>, and <i>department </i>that is many-to-one from the pair <span class="s95">{</span><i>student</i>, <i>instruc- tor</i><span class="s95">} </span>to <i>department </i>as shown in Figure 7.6. The <span class="s44">E-R </span>diagram speciﬁes the constraint that</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1926.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">6<span class="s78">Such an arrangement makes sense for students with a double major.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">“a student may have more than one advisor, but at most one corresponding to a given department.”</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1927.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">With this new <span class="s44">E-R </span>diagram, the schemas for the <i>instructor</i>, <i>department</i>, and <i>student </i>relations are unchanged. However, the schema derived from the <i>dept advisor </i>relation- ship set is now:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1928.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1929.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1930.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1931.png"/></span></p><p class="s13" style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">dept advisor <span class="p">(</span>s <span class="s101">ID</span><span class="p">, </span>i <span class="s101">ID</span><span class="p">, </span>dept name<span class="p">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Although not speciﬁed in the <span class="s44">E-R </span>diagram, suppose we have the additional con- straint that “an instructor can act as advisor for only a single department.”</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1932.png"/></span></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;">Then, the following functional dependencies hold on <i>dept advisor</i>:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1933.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1934.png"/></span></p><p class="s13" style="padding-top: 10pt;padding-left: 226pt;text-indent: 0pt;line-height: 15pt;text-align: left;">i <span class="s101">ID </span><span class="s86">→ </span>dept name</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1935.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1936.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1937.png"/></span></p><p class="s13" style="padding-left: 226pt;text-indent: 0pt;line-height: 15pt;text-align: left;">s <span class="s101">ID</span><span class="p">, </span>dept name <span class="s86">→ </span>i <span class="s101">ID</span></p><p style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The ﬁrst functional dependency follows from our requirement that “an instructor can act as an advisor for only one department.” The second functional dependency fol- lows from our requirement that “a student may have at most one advisor for a given department.”</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1938.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1939.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1940.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Notice that with this design, we are forced to repeat the department name once for each time an instructor participates ina <i>dept advisor </i>relationship. We see that <i>dept advisor </i>is not in <span class="s44">BCNF </span>because <i>i </i><span class="s101">ID </span>is not a superkey. Following our rule for <span class="s44">BCNF </span>decomposition, we get:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1941.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1942.png"/></span></p><p style="padding-top: 2pt;padding-left: 238pt;text-indent: 0pt;text-align: left;">(<i>s </i><span class="s101">ID</span>, <i>i </i><span class="s101">ID</span>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1943.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1944.png"/></span></p><p style="padding-left: 238pt;text-indent: 0pt;text-align: left;">(<i>i </i><span class="s101">ID</span>, <i>dept name</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Both the above schemas are <span class="s44">BCNF</span>. (In fact, you can verify that any schema with only two attributes is in <span class="s44">BCNF </span>by deﬁnition.)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1945.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1946.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1947.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1948.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1949.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1950.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1951.png"/></span></p><p class="s13" style="padding-top: 1pt;padding-left: 88pt;text-indent: 17pt;line-height: 82%;text-align: justify;"><span class="p">Note, however, that in our </span><span class="s44">BCNF </span><span class="p">design, there is no schema that includes all the attributes appearing in the functional dependency </span>s <span class="s101">ID</span><span class="p">, </span>dept name <span class="s86">→ </span>i <span class="s101">ID</span><span class="p">. The only dependency that can be enforced on the individual decomposed relations is </span><span class="s69">ID </span><span class="s86">→ </span>dept name<span class="p">. The functional dependency </span>s <span class="s101">ID</span><span class="p">, </span>dept name <span class="s86">→ </span>i <span class="s101">ID </span><span class="p">can only be checked by computing the join of the decomposed relations.</span><span class="s76">7</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Because our design does not permit the enforcement of this functional dependency without a join, we say that our design is <i>not </i><span class="s63">dependency preserving </span>(we provide a formal deﬁnition of dependency preservation in Section 7.4.4). Because dependency preser- vation is usually considered desirable, we consider another normal form, weaker than <span class="s44">BCNF</span>, that will allow us to preserve dependencies. That normal form is called the third normal form.<span class="s76">8</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1952.png"/></span></p><p class="s78" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s77">7</span>Technically, it is possible that a dependency whose attributes do not all appear in any one schema is still implicitly enforced, because of the presence of other dependencies that imply it logically. We address that case in Section 7.4.4. <span class="s77">8</span>You may have noted that we skipped second normal form. It is of historical signiﬁcance only and, in practice, one of third normal form or <span class="s153">BCNF </span>is always a better choice. We explore second normal form in Exercise 7.19. First normal form pertains to attribute domains, not decomposition. We discuss it in Section 7.8.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">7.3.2 Third Normal Form</p><p class="s15" style="padding-top: 5pt;padding-left: 119pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="s42">BCNF </span><span class="s43">requires that all nontrivial dependencies be of the form </span>α <span class="s86">→ </span>β<span class="p">, where </span>α <span class="p">is a superkey. Third normal form (</span><span class="s44">3NF</span><span class="p">) relaxes this constraint slightly by allowing certain nontrivial functional dependencies whose left side is not a superkey. Before we deﬁne</span></p><p class="s42" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">3NF<span class="s43">, we recall that a candidate key is a minimal superkey— that is, a superkey no proper subset of which is also a superkey.</span></p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 17pt;line-height: 84%;text-align: justify;">A relation schema <i>R </i>is in <span class="s63">third normal form </span>with respect to a set <i>F </i>of functional dependencies if, for all functional dependencies in <i>F </i><span class="s181">+</span><span class="s15"> </span>of the form <span class="s15">α </span><span class="s86">→ </span><span class="s15">β</span>, where <span class="s15">α </span><span class="s83">⊆ </span><i>R</i></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">and <span class="s15">β </span><span class="s83">⊆ </span><i>R</i>, at least one of the following holds:</p><p class="s15" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>α <span class="s86">→ </span>β <span class="p">is a trivial functional dependency.</span></p><p style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s15">α </span>is a superkey for <i>R</i>.</p><p style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">Each attribute </span><i>A </i>in <span class="s15">β − α </span>is contained in a candidate key for <i>R</i>.</p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Note that the third condition above does not say that a single candidate key must con- tain all the attributes in <span class="s15">β− α</span>; each attribute <i>A </i>in <span class="s15">β−α </span>may be contained in a <i>diﬀerent </i>candidate key.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The ﬁrst two alternatives are the same as the two alternatives in the deﬁnition of <span class="s44">BCNF</span>. The third alternative in the <span class="s44">3NF </span>deﬁnition seems rather unintuitive, and it is not obvious why it is useful. It represents, in some sense, a minimal relaxation of the <span class="s44">BCNF </span>conditions that helps ensure that every schema has a dependency-preserving decompo- sition into <span class="s44">3NF</span>. Its purpose will become more clear later, when we study decomposition into <span class="s44">3NF</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Observe that any schema that satisﬁes <span class="s44">BCNF </span>also satisﬁes <span class="s44">3NF</span>, since each of its functional dependencies would satisfy one of the ﬁrst two alternatives. <span class="s44">BCNF </span>is there- fore a more restrictive normal form than is <span class="s44">3NF</span>.</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 17pt;line-height: 88%;text-align: justify;">The deﬁnition of <span class="s44">3NF </span>allows certain functional dependencies that are not allowed in <span class="s44">BCNF</span>. A dependency <span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>that satisﬁes only the third alternative of the <span class="s44">3NF </span>deﬁnition is not allowed in <span class="s44">BCNF </span>but is allowed in <span class="s44">3NF</span>.<span class="s76">9</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1953.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Now, let us again consider the schema for the <i>dept advisor </i>relation, which has the following functional dependencies:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1954.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1955.png"/></span></p><p class="s13" style="padding-top: 10pt;padding-left: 257pt;text-indent: 0pt;line-height: 15pt;text-align: left;">i <span class="s101">ID </span><span class="s86">→ </span>dept name</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1956.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1957.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1958.png"/></span></p><p class="s13" style="padding-left: 257pt;text-indent: 0pt;line-height: 15pt;text-align: left;">s <span class="s101">ID</span><span class="p">, </span>dept name <span class="s86">→ </span>i <span class="s101">ID</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1959.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1960.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1961.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1962.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1963.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1964.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1965.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1966.png"/></span></p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;line-height: 87%;text-align: justify;">In Section 7.3.1.2, we argued that the functional dependency “<i>i </i><span class="s101">ID </span><span class="s86">→ </span><i>dept name</i>” caused the <i>dept advisor </i>schema not to be in <span class="s44">BCNF</span>. Note that here <span class="s15">α = </span><i>i </i><span class="s101">ID</span>, <span class="s15">β = </span><i>dept name</i>, and <span class="s15">β − α = </span><i>dept name</i>. Since the functional dependency <i>s </i><span class="s101">ID</span>, <i>dept name </i><span class="s86">→</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_1967.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">9<span class="s78">These dependencies are examples of </span><span class="s162">transitive dependencies </span><span class="s80">(see Practice Exercise 7.18). The original deﬁnition of</span></p><p class="s177" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">3NF <span class="s178">was in terms of transitive dependencies. The deﬁnition we use is equivalent but easier to understand.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1968.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1969.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1970.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1971.png"/></span></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><i>i </i><span class="s101">ID </span>holds on <i>dept advisor</i>, the attribute <i>dept name </i>is contained in a candidate key and, therefore, <i>dept advisor </i>is in <span class="s44">3NF</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We have seen the trade-oﬀ that must be made between <span class="s44">BCNF </span>and <span class="s44">3NF </span>when there is no dependency-preserving <span class="s44">BCNF </span>design. These trade-oﬀs are described in more detail in Section 7.3.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">7.3.3 Comparison of BCNF and 3NF</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Of the two normal forms for relational database schemas, <span class="s44">3NF </span>and <span class="s44">BCNF </span>there are advantages to <span class="s44">3NF </span>in that we know that it is always possible to obtain a <span class="s44">3NF </span>design without sacriﬁcing losslessness or dependency preservation. Nevertheless, there are disadvantages to <span class="s44">3NF</span>: We may have to use null values to represent some of the possible meaningful relationships among data items, and there is the problem of repetition of information.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">Our goals of database design with functional dependencies are:</p><p class="s63" style="padding-top: 10pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">1. <span class="s42">BCNF</span><span class="s43">.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">2. <span class="p">Losslessness.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">3. <span class="p">Dependency preservation.</span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Since it is not always possible to satisfy all three, we may be forced to choose between</p><p class="s42" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">BCNF <span class="s43">and dependency preservation with </span>3NF<span class="s43">.</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It is worth noting that <span class="s44">SQL </span>does not provide a way of specifying functional depen- dencies, except for the special case of declaring superkeys by using the <b>primary key </b>or <b>unique </b>constraints. It is possible, although a little complicated, to write assertions that enforce a functional dependency (see Practice Exercise 7.9); unfortunately, currently no database system supports the complex assertions that are required to enforce ar- bitrary functional dependencies, and the assertions would be expensive to test. Thus even if we had a dependency-preserving decomposition, if we use standard <span class="s44">SQL </span>we can test eﬃciently only those functional dependencies whose left-hand side is a key.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">Although testing functional dependencies may involve a join if the decomposition is not dependency preserving, if the database system supports materialized views, we could in principle reduce the cost by storing the join result as materialized view; how- ever, this approach is feasible only if the database system supports <b>primary key </b>con- straints or <b>unique </b>constraints on materialized views. On the negative side, there is a space and time overhead due to the materialized view, but on the positive side, the application programmer need not worry about writing code to keep redundant data consistent on updates; it is the job of the database system to maintain the material- ized view, that is, keep it up to date when the database is updated. (In Section 16.5, we outline how a database system can perform materialized view maintenance eﬃciently.) Unfortunately, most current database systems limit constraints on materialized views or do not support them at all. Even if such constraints are allowed, there is an additional requirement: the database must update the view and check the constraint</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">immediately (as part of the same transaction) when an underlying relation is updated. Otherwise, a constraint violation may get detected well after the update has been per- formed and the transaction that caused the violation has committed.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In summary, even if we are not able to get a dependency-preserving <span class="s44">BCNF </span>decom- position, it is still preferable to opt for <span class="s44">BCNF</span>, since checking functional dependencies other than primary key constraints is diﬃcult in <span class="s44">SQL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">7.3.4 Higher Normal Forms</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1972.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1973.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1974.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1975.png"/></span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Using functional dependencies to decompose schemas may not be suﬃcient to avoid unnecessary repetition of information in certain cases. Consider a slight variation in the <i>instructor </i>entity-set deﬁnition in which we record with each instructor a set of children’s names and a set of landline phone numbers that may be shared by multiple people. Thus, <i>phone number </i>and <i>child name </i>would be multivalued attributes and, following our rules for generating schemas from an <span class="s44">E-R </span>design, we would have two schemas, one for each of the multivalued attributes, <i>phone number </i>and <i>child name</i>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1976.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1977.png"/></span></p><p style="padding-left: 264pt;text-indent: 0pt;text-align: left;">(<span class="s69">ID</span>, <i>child name</i>) (<span class="s69">ID</span>, <i>phone number</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">If we were to combine these schemas to get</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1978.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1979.png"/></span></p><p style="padding-left: 239pt;text-indent: 0pt;text-align: left;">(<span class="s69">ID</span>, <i>child name</i>, <i>phone number</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">we would ﬁnd the result to be in <span class="s44">BCNF </span>because no nontrivial functional dependencies hold. As a result we might think that such a combination is a good idea. However, such a combination is a bad idea, as we can see by considering the example of an instruc- tor with two children and two phone numbers. For example, let the instructor with <span class="s69">ID </span>99999 have two children named “David” and “William” and two phone numbers, 512-555-1234 and 512-555-4321. In the combined schema, we must repeat the phone numbers once for each dependent:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 238pt;text-indent: 0pt;text-align: left;">(99999, David, 512-555-1234)</p><p style="padding-left: 238pt;text-indent: 0pt;text-align: left;">(99999, David, 512-555-4321)</p><p style="padding-left: 238pt;text-indent: 0pt;text-align: left;">(99999, William, 512-555-1234)</p><p style="padding-left: 238pt;text-indent: 0pt;text-align: left;">(99999, William, 512-555-4321)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If we did not repeat the phone numbers, and we stored only the ﬁrst and last tu- ples, we would have recorded the dependent names and the phone numbers, but the resultant tuples would imply that David corresponded to 512-555-1234, while William corresponded to 512-555-4321. This would be incorrect.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Because normal forms based on functional dependencies are not suﬃcient to deal with situations like this, other dependencies and normal forms have been deﬁned. We cover these in Section 7.6 and Section 7.7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part153.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part155.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
