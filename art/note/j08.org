* 数据访问对象模式 (Data Access Object interface) 

在软件中，数据访问对象（DAO）是一种模式，它为某种类型的数据库或其他持
久性机制提供了一个抽象接口。通过将应用程序调用映射到持久层，DAO提供数
据操作而不暴露数据库细节。这种隔离支持单一职责原则。 [[https://en.wikipedia.org/wiki/Data_access_object][wiki]]

数据访问对象接口定义了要在模型对象上执行的标准操作。数据访问对象具体类
实现了上述接口。这个类负责从数据源获取数据，数据源可以是数据库/ xml 或
任何其他存储机制

下面是一个简单的数据访问对象模式的例子：

#+BEGIN_SRC
// interface as you can see
public interface StudentDao {
    public List<Student> getAllStudents();
    public Student getStudent(int rollNo);
    public void updateStudent(Student student);
    public void deleteStudent(Student student);
}

// a class implements the interface as you can see  
public class StudentDaoImpl implements StudentDao {
    // it has a list in Student.
    List<Student> students;

    public StudentDaoImpl(){
        students = new ArrayList<Student>();
        Student student1 = new Student("Robert",0);
        Student student2 = new Student("John",1);
        students.add(student1);
        students.add(student2);      
    }

    // it rewrite the function
    @Override
    public void deleteStudent(Student student) {
        students.remove(student.getRollNo());
        System.out.println("Student: Roll No " + student.getRollNo() +", deleted from database");
    }

    @Override
    public List<Student> getAllStudents() {
        return students;
    }
    @Override
    public Student getStudent(int rollNo) {
        return students.get(rollNo);
    }
    @Override
    public void updateStudent(Student student) {
        students.get(student.getRollNo()).setName(student.getName());
        System.out.println("Student: Roll No " + student.getRollNo() +", updated in the database");
    }
}
#+END_SRC

在这个例子中，StudentDao 是数据访问对象接口，定义了要在学生模型对象上
执行的标准操作。StudentDaoImpl 是实现了数据访问对象接口的实体类，负责
从数据源（在这种情况下是一个简单的列表）获取数据。

* 流家族和输入输出流 (Stream Family and I/O stream)

** 分类学

Java I/O 流分为两大类：字节流和字符流。字节流以字节为单位进行读写操作，
字符流以字符为单位进行读写操作。

字节流的抽象基类是 InputStream 和 OutputStream，它们分别代表了输入流和
输出流。常用的字节流类有 FileInputStream、FileOutputStream、
BufferedInputStream 和 BufferedOutputStream 等。

字符流的抽象基类是 Reader 和 Writer，它们分别代表了输入流和输出流。常
用的字符流类有 FileReader、FileWriter、BufferedReader 和
BufferedWriter 等。

** 字节流和字符流

字节流和字符流是 Java 中两种基本的 I/O 流类型。

字节流以字节为单位进行读写操作，它可以处理所有类型的数据，包括文本数据
和二进制数据。字节流的抽象基类是 InputStream 和 OutputStream，它们分别
代表了输入流和输出流。

字符流以字符为单位进行读写操作，它只能处理文本数据。字符流的抽象基类是
Reader 和 Writer，它们分别代表了输入流和输出流。字符流在读写操作时会自
动进行字符集编码和解码，因此可以方便地处理文本数据。

** 字节流和字符流(不同演绎)

在Java中，字节流（Byte Streams）和字符流（Character Streams）都是用于
I/O操作的流类别。它们的主要区别在于它们处理数据的方式。

字节流以8位字节为单位进行操作，可以读取和写入二进制数据，如图像、音频
等文件。字节流包括 InputStream 和 OutputStream 类及其子类。

字符流以16位 Unicode 字符为单位进行操作，主要用于读取和写入文本文件。
字符流包括 Reader 和 Writer 类及其子类。

读取和写入字节流时，通常使用字节数组作为缓冲区，而读取和写入字符流时，
则通常使用字符数组。

在Java中，由于字符编码和字节编码之间的转换可能会导致数据损坏，因此字符
流提供了一些特殊的辅助类来处理不同的字符编码格式。例如，
InputStreamReader 和 OutputStreamWriter 类可以在字节流和字符流之间进行
转换，并支持指定所需的字符编码格式。

** Reader, BufferedReader

BufferedReader是Java中一个用于读取文本数据的类。它继承自Reader类，提供
了一个缓冲区来存储从输入流中读取的数据，以便程序能够更高效地读取数据。

BufferedReader 类的好处是可以减少读取操作的次数，从而提高程序的性能。
当我们用 BufferedReader 类读取文本数据时，通常将其与 InputStreamReader
一起使用，先将字节流转化为字符流，然后再通过 BufferedReader 类逐行读取
文本数据。下面是一个利用 BufferedReader 包装系统输入的例子.

#+BEGIN_SRC
BufferedReader in = new BufferedReader (new InputStreamReader(System.in));
#+END_SRC

This line of code creates a new BufferedReader object which reads text
from a character-input stream (in this case, System.in) and buffers
the input.

Here’s what each part of the code does:

1. System.in is an input stream that represents the standard input
   (usually the keyboard).

2. InputStreamReader is a bridge from byte streams to character streams.

3. BufferedReader reads text from a character-input stream, buffering
   characters so as to provide for the efficient reading of
   characters, arrays, and lines.

So when you run this line of code, you can read text from the standard
input (usually the keyboard) using the BufferedReader object1.

Reference:
1.  [[https://stackoverflow.com/questions/10547362/bufferedreader-explanation]]

* 操作文件

* 对象输入输出流与序列化

