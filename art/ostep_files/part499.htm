<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>44.4 Using Checksums</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part498.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part500.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">44.4 Using Checksums</p><p class="s57" style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;"><span class="p">With a checksum layout decided upon, we can now proceed to actu- ally understand how to </span><span class="s6">use </span><span class="p">the checksums. When reading a block </span><span class="s43">D</span><span class="p">, the client (i.e., file system or storage controller) also reads its checksum from </span><span class="s61">disk </span>C<span class="s58">s</span><span class="s59">(</span>D<span class="s59">)</span><span class="s61">, which we call the </span><span class="s232">stored checksum </span><span class="s61">(hence the subscript </span>C<span class="s58">s </span><span class="s61">). </span><span class="p">The client then </span><span class="s6">computes </span><span class="p">the checksum over the retrieved block </span><span class="s43">D</span><span class="p">, which </span><span class="s61">we call the </span><span class="s232">computed checksum </span>C<span class="s58">c</span><span class="s59">(</span>D<span class="s59">)</span><span class="s61">. At this point, the client com- pares the stored and computed checksums; if they are equal (i.e., </span>C<span class="s58">s</span><span class="s59">(</span>D<span class="s59">)</span></p><p class="s57" style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;"><span class="s61">== </span>C<span class="s58">c</span><span class="s59">(</span>D<span class="s59">)</span><span class="s61">, the data has likely not been corrupted, and thus can be safely returned to the user. If they do </span><span class="s146">not </span><span class="s61">match (i.e., </span>C<span class="s58">s</span><span class="s59">(</span>D<span class="s59">) </span><span class="s61">!= </span>C<span class="s58">c</span><span class="s59">(</span>D<span class="s59">)</span><span class="s61">), this im- </span><span class="p">plies the data has changed since the time it was stored (since the stored checksum reflects the value of the data at that time). In this case, we have a corruption, which our checksum has helped us to detect.</span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Given a corruption, the natural question is what should we do about it? If the storage system has a redundant copy, the answer is easy: try to use it instead. If the storage system has no such copy, the likely answer is to return an error. In either case, realize that corruption detection is not a magic bullet; if there is no other way to get the non-corrupted data, you are simply out of luck.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part498.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part500.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
