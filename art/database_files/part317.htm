<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>17.7  Transaction Isolation and Atomicity</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part316.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part318.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">17.7  <span style=" color: #00AEEF;">Transaction Isolation and Atomicity</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;line-height: 13pt;text-align: right;">So far, we have studied schedules while assuming implicitly that there are no transaction failures. We now address the eﬀect of transaction failures during concurrent execution. If a transaction <i>T</i><span class="s97">i </span>fails, for whatever reason, we need to undo the eﬀect of this transaction to ensure the atomicity property of the transaction. In a system that allows</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 88%;text-align: justify;">concurrent execution, the atomicity property requires that any transaction <i>T</i><span class="s145">j </span>that is dependent on <i>T</i><span class="s97">i </span>(i.e., <i>T</i><span class="s97">j </span>has read data written by <i>T</i><span class="s97">i</span>) is also aborted. To achieve this, we need to place restrictions on the types of schedules permitted in the system.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In the following two subsections, we address the issue of what schedules are accept- able from the viewpoint of recovery from transaction failure. We describe in Chapter 18 how to ensure that only such acceptable schedules are generated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">17.7.1 Recoverable Schedules</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Consider the partial schedule 9 in Figure 17.14, in which <i>T</i><span class="s98">7</span> is a transaction that per- forms only one instruction: <span class="s49">read</span>(<i>A</i>). We call this a <span class="s63">partial schedule </span>because we have not included a <b>commit </b>or <b>abort </b>operation for <i>T</i><span class="s98">6</span>. Notice that <i>T</i><span class="s98">7</span> commits immediately after executing the <span class="s49">read</span>(<i>A</i>) instruction. Thus, <i>T</i><span class="s98">7</span> commits while <i>T</i><span class="s98">6</span> is still in the ac- tive state. Now suppose that <i>T</i><span class="s98">6</span> fails before it commits. <i>T</i><span class="s98">7</span> has read the value of data item <i>A </i>written by <i>T</i><span class="s98">6</span>. Therefore, we say that <i>T</i><span class="s98">7</span> is <span class="s63">dependent </span>on <i>T</i><span class="s98">6</span>. Because of this, we must abort <i>T</i><span class="s98">7</span> to ensure atomicity. However, <i>T</i><span class="s98">7</span> has already committed and cannot be</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="136" height="118" alt="image" src="Image_2986.png"/></span></p><p style="text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s49">read</span>(<i>A</i>)</p><p style="text-indent: 0pt;text-align: left;"><span class="s49">write</span>(<i>A</i>)</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s49">read</span>(<i>A</i>)</p><p class="s49" style="text-indent: 0pt;text-align: left;">commit</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s49">read</span>(<i>B</i>)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">T<span class="s130">7</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-top: 2pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">T<span class="s130">6</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 17.14 <span class="s74">Schedule 9, a nonrecoverable schedule.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">aborted. Thus, we have a situation where it is impossible to recover correctly from the failure of <i>T</i><span class="s98">6</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Schedule 9 is an example of a <i>nonrecoverable </i>schedule. A <span class="s63">recoverable schedule </span>is one where, for each pair of transactions <i>T</i><span class="s97">i </span>and <i>T</i><span class="s97">j </span>such that <i>T</i><span class="s97">j </span>reads a data item previously written by <i>T</i><span class="s145">i</span>, the commit operation of <i>T</i><span class="s145">i </span>appears before the commit operation of <i>T</i><span class="s145">j </span>. For the example of schedule 9 to be recoverable, <i>T</i><span class="s98">7</span> would have to delay committing until after <i>T</i><span class="s98">6</span> commits.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">17.7.2 Cascadeless Schedules</p><p class="s13" style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="p">Even if a schedule is recoverable, to recover correctly from the failure of a transac- tion </span>T<span class="s145">i</span><span class="p">, we may have to roll back several transactions. Such situations occur if transac- tions have read data written by </span>T<span class="s145">i</span><span class="p">. As an illustration, consider the partial schedule of Figure 17.15. Transaction </span>T<span class="s98">8</span><span class="p"> writes a value of </span>A <span class="p">that is read by transaction </span>T<span class="s98">9</span><span class="p">. Transac- tion </span>T<span class="s98">9</span><span class="p"> writes a value of </span>A <span class="p">that is read by transaction </span>T<span class="s98">10</span><span class="p">. Suppose that, at this point, </span>T<span class="s130">8 </span><span class="s94">fails. </span>T<span class="s130">8 </span><span class="s94">must be rolled back. Since </span>T<span class="s130">9 </span><span class="s94">is dependent on </span>T<span class="s130">8</span><span class="s94">, </span>T<span class="s130">9 </span><span class="s94">must be rolled back. Since </span>T<span class="s130">10 </span><span class="s94">is dependent on </span>T<span class="s130">9</span><span class="s94">, </span>T<span class="s130">10 </span><span class="s94">must be rolled back. This phenomenon, in which a single transaction failure leads to a series of transaction rollbacks, is called </span><span class="s63">cascading rollback</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:196.314pt" cellspacing="0"><tr style="height:18pt"><td style="width:52pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">8</span></p></td><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 20pt;padding-right: 20pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">9</span></p></td><td style="width:50pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s426" style="padding-top: 2pt;padding-left: 5pt;padding-right: 6pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s352">10</span></p></td></tr><tr style="height:83pt"><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" rowspan="2"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: justify;"><span class="s424">read</span>(<i>A</i>) <span class="s424">read</span>(<i>B</i>) <span class="s424">write</span>(<i>A</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s424" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">abort</p></td><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 7pt;padding-right: 6pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>A</i>) <span class="s424">write</span>(<i>A</i>)</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;"><span class="s424">read</span>(<i>A</i>)</p></td></tr><tr style="height:13pt"><td style="width:103pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 17.15 <span class="s74">Schedule 10.</span></p><p class="s66" style="padding-top: 3pt;padding-left: 325pt;text-indent: 0pt;text-align: left;"><a name="bookmark374">17.8 </a><span style=" color: #00AEEF;">Transaction Isolation Levels  </span><span class="s164">821</span><a name="bookmark416">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Cascading rollback is undesirable, since it leads to the undoing of a signiﬁcant amount of work. It is desirable to restrict the schedules to those where cascading roll- backs cannot occur. Such schedules are called <i>cascadeless </i>schedules. Formally, a <span class="s63">cas- cadeless schedule </span>is one where, for each pair of transactions <i>T</i><span class="s97">i </span>and <i>T</i><span class="s97">j </span>such that <i>T</i><span class="s97">j </span>reads</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 79%;text-align: justify;">a data item previously written by <i>T</i><span class="s97">i</span>, the commit operation of <i>T</i><span class="s97">i </span>appears before the read</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">operation of <i>T</i><span class="s145">j </span>. It is easy to verify that every cascadeless schedule is also recoverable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part316.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part318.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
