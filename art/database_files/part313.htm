<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>17.3  Storage Structure</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part312.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part314.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">17.3  <span style=" color: #00AEEF;">Storage Structure</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">To understand how to ensure the atomicity and durability properties of a transaction, we must gain a better understanding of how the various data items in the database may be stored and accessed.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In Chapter 12, we saw that storage media can be distinguished by their relative speed, capacity, and resilience to failure, and classiﬁed as volatile storage or non-volatile storage. We review these terms and introduce another class of storage, called stable storage.</p><p class="s39" style="padding-top: 7pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Volatile storage</span><span class="p">. Information residing in volatile storage does not usually survive system crashes. Examples of such storage are main memory and cache memory. Access to volatile storage is extremely fast, both because of the speed of the mem- ory access itself and because it is possible to access any data item in volatile storage directly.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Non-volatile storage</span><span class="p">. Information residing in non-volatile storage survives system crashes. Examples of non-volatile storage include secondary storage devices such as magnetic disk and ﬂash storage, used for online storage, and tertiary storage devices such as optical media and magnetic tapes, used for archival storage. At the current state of technology, non-volatile storage is slower than volatile storage, par- ticularly for random access. Both secondary and tertiary storage devices, however, are susceptible to failures that may result in loss of information.</span></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s63">Stable storage</span>. Information residing in stable storage is <i>never </i>lost (<i>never </i>should be taken with a grain of salt, since theoretically <i>never </i>cannot be guaranteed—for example, it is possible, although extremely unlikely, that a black hole may envelop the earth and permanently destroy all data!). Although stable storage is theoreti- cally impossible to obtain, it can be closely approximated by techniques that make data loss extremely unlikely. To implement stable storage, we replicate the informa- tion in several non-volatile storage media (usually disk) with independent failure modes. Updates must be done with care to ensure that a failure during an update to stable storage does not cause a loss of information. Section 19.2.1 discusses stable-storage implementation.</p><p class="s66" style="padding-top: 3pt;padding-left: 289pt;text-indent: 0pt;text-align: left;"><a name="bookmark370">17.4 </a><span style=" color: #00AEEF;">Transaction Atomicity and Durability  </span><span class="s164">805</span><a name="bookmark412">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The distinctions among the various storage types can be less clear in practice than in our presentation. For example, certain systems, for example some <span class="s44">RAID </span>controllers, provide battery backup, so that some main memory can survive system crashes and power failures.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">For a transaction to be durable, its changes need to be written to stable storage. Similarly, for a transaction to be atomic, log records need to be written to stable storage before any changes are made to the database on disk. The degree to which a system ensures durability and atomicity depends on how stable its implementation of stable storage really is. In some cases, a single copy on disk is considered suﬃcient, but ap- plications whose data are highly valuable and whose transactions are highly important require multiple copies, or, in other words, a closer approximation of the idealized concept of stable storage.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part312.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part314.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
