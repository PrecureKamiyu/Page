<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>41.3 Organizing Structure: The Cylinder Group</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part454.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part456.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">41.3 Organizing Structure: The Cylinder Group</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The first step was to change the on-disk structures. FFS divides the disk into a bunch of groups known as <b>cylinder groups </b>(some modern file systems like Linux ext2 and ext3 just call them <b>block groups</b>). We can thus imagine a disk with ten cylinder groups:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:77.0848pt" cellspacing="0"><tr style="height:21pt"><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G0</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G1</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G2</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G3</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G4</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G5</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G6</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G7</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G8</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">G9</p></td></tr></table><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: right;">These groups are the central mechanism that FFS uses to improve per- formance; by placing two files within the same group, FFS can ensure that accessing one after the other will not result in long seeks across the disk.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Thus, FFS needs to have the ability to allocate files and directories within each of these groups. Each group looks like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:77.0848pt" cellspacing="0"><tr style="height:21pt"><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s106" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">S</p></td><td style="width:22pt" bgcolor="#000000"><p class="s214" style="padding-top: 5pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ib db</p></td><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#A8A8A8"><p class="s106" style="padding-top: 5pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">Inodes</p></td><td style="width:130pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p class="s106" style="padding-top: 5pt;padding-left: 55pt;padding-right: 55pt;text-indent: 0pt;text-align: center;">Data</p></td></tr></table><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We now describe the components of a cylinder group. A copy of the <b>super block </b>(S) is found in each group for reliability reasons (e.g., if one gets corrupted or scratched, you can still mount and access the file system by using one of the others).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The <b>inode bitmap </b>(ib) and <b>data bitmap </b>(db) track whether each inode or data block is free, respectively. Bitmaps are an excellent way to manage free space in a file system because it is easy to find a large chunk of free space and allocate it to a file, perhaps avoiding some of the fragmentation problems of the free list in the old file system.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 90%;text-align: justify;">Finally, the inode and data block regions are just like in the previous very simple file system. Most of each cylinder group, as usual, is com- prised of data blocks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 95pt;text-indent: 0pt;line-height: 11pt;text-align: left;">A<span class="s7">SIDE</span>: <b>FFS F</b><span class="s45">ILE </span><b>C</b><span class="s45">REATION</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">As an example, think about what data structures must be updated when a file is created; assume, for this example, that the user creates a new file</p><p class="s41" style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">/foo/bar.txt <span class="p">and that the file is one block long (4KB). The file is new, and thus needs a new inode; thus, both the inode bitmap and the newly- allocated inode will be written to disk. The file also has data in it and thus it too must be allocated; the data bitmap and a data block will thus (eventually) be written to disk. Hence, at least four writes to the current cylinder group will take place (recall that these writes may be buffered in memory for a while before the write takes place). But this is not all! In particular, when creating a new file, we must also place the file in the file-system hierarchy; thus, the directory must be updated. Specifically, the parent directory </span>foo <span class="p">must be updated to add the entry for </span>bar.txt<span class="p">; this update may fit in an existing data block of </span>foo <span class="p">or require a new block to be allocated (with associated data bitmap). The inode of </span>foo <span class="p">must also be updated, both to reflect the new length of the directory as well as to update time fields (such as last-modified-time). Overall, it is a lot of work just to create a new file! Perhaps next time you do so, you should be more thankful, or at least surprised that it all works so well.</span></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part454.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part456.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
