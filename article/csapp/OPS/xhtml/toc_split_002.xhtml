<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Computer Systems: A Programmer's Perspective</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre pcalibre pcalibre1">
<nav id="illustrations" epub:type="loi" class="pcalibre halftitlepage pcalibre1"><h2 class="pcalibre1 pcalibre calibre354">List of Illustrations</h2><ol class="calibre72 pcalibre pcalibre1">
<li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008CB6_split_000.xhtml#P7000497027000000000000000008CCE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1 A typical code example.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008CB6_split_001.xhtml#P7000497027000000000000000008D42" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2 Five systems courses based on the CS:APP book.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000007F.xhtml#P70004970270000000000000000000AA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.1 The hello program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000007F.xhtml#P70004970270000000000000000000B4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.2 The ASCII text representation of hello.c.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000000D8.xhtml#P70004970270000000000000000000DE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.3 The compilation system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000011E.xhtml#P7000497027000000000000000000126" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.4 Hardware organization of a typical system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000011E.xhtml#P7000497027000000000000000000160" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.5 Reading the hello command from the keyboard.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000016E.xhtml#P7000497027000000000000000000174" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.6 Loading the executable from disk into main memory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000016E.xhtml#P7000497027000000000000000000179" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.7 Writing the output string from memory to the display.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000016E.xhtml#P700049702700000000000000000017D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.8 Cache memories.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000016E.xhtml#P7000497027000000000000000000186" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.9 An example of a memory hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000190.xhtml#P7000497027000000000000000000196" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.10 Layered view of a computer system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000190.xhtml#P700049702700000000000000000019B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.11 Abstractions provided by an operating system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000190.xhtml#P70004970270000000000000000001AE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.12 Process context switching.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000190.xhtml#P70004970270000000000000000001C0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.13 Process virtual address space.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000001E0.xhtml#P70004970270000000000000000001ED" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.14 A network is another I/O device.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000001E0.xhtml#P70004970270000000000000000001F2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.15 Using telnet to run hello remotely over a network.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000001FF.xhtml#P700049702700000000000000000022E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.16 Categorizing different processor configurations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000001FF.xhtml#P7000497027000000000000000000234" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.17 Multi-core processor organization.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000001FF.xhtml#P700049702700000000000000000024B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 1.18 Some abstractions provided by a computer system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000002C4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.1 Specifying different versions of C to GCC.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000002E9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.2 Hexadecimal notation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.3 Typical sizes (in bytes) of basic C data types.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P7000497027000000000000000000491" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.4 Code to print the byte representation of program objects.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000004B1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.5 Byte representation examples.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000004BB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.6 Byte representations of different data values.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000002AD_split_001.xhtml#P70004970270000000000000000005B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.7 Operations of Boolean algebra.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000781" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.8 Terminology for integer data and arithmetic operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P70004970270000000000000000007CF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.9 Typical ranges for C integral data types for 32-bit programs.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000807" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.10 Typical ranges for C integral data types for 64-bit programs.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000843" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.11 Guaranteed ranges for C integral data types.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000881" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.12 Unsigned number examples for</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P70004970270000000000000000008A3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.13 Two's-complement number examples for</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P70004970270000000000000000008E1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.14 Important numbers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P700049702700000000000000000095B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.15 Two's-complement representations of 12,345 and –12,345, and unsigned representation of 53,191.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000AE6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.16 Comparing unsigned and two's-complement representations for</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_001.xhtml#P7000497027000000000000000000AEC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.17 Conversion from two's complement to unsigned.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_001.xhtml#P7000497027000000000000000000B01" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.18 Conversion from unsigned to two's complement.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_001.xhtml#P7000497027000000000000000000B33" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.19 Effects of C promotion rules.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000077D_split_001.xhtml#P7000497027000000000000000000BD2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.20 Examples of sign extension from w = 3 to w = 4.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000CBD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.21 Integer addition.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000CF5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.22 Relation between integer addition and unsigned addition.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000CFD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.23 Unsigned addition.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000D58" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.24 Relation between integer and two's-complement addition.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000D6E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.25 Two's-complement addition examples.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000DB0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.26 Two's-complement addition.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_001.xhtml#P7000497027000000000000000000EB5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.27 Three-bit unsigned and two's-complement multiplication examples.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_001.xhtml#P7000497027000000000000000000FFB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.28 Dividing unsigned numbers by powers of 2.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_001.xhtml#P700049702700000000000000000102D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.29 Applying arithmetic right shift.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000CB3_split_001.xhtml#P700049702700000000000000000105F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.30 Dividing two's-complement numbers by powers of 2.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P70004970270000000000000000010F9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.31 Fractional binary representation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P7000497027000000000000000001164" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.32 Standard floating-point formats.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P7000497027000000000000000001188" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.33 Categories of single-precision floating-point values.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P700049702700000000000000000119C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.34 Representable values for 6-bit floating-point format.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P70004970270000000000000000011A2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.35 Example nonnegative values for 8-bit floating-point format.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P700049702700000000000000000132A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.36 Examples of nonnegative floating-point numbers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000010EA.xhtml#P700049702700000000000000000138C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 2.37 Illustration of rounding modes for dollar rounding.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001EF2.xhtml#P7000497027000000000000000001EFD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.1 Sizes of C data types in x86-64.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F4C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.2 Integer registers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F57" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.3 Operand forms.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000002001" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.4 Simple data movement instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P700049702700000000000000000203C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.5 Zero-extending data movement instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000002059" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.6 Sign-extending data movement instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P70004970270000000000000000020B2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.7 C and assembly code for exchange routine.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000002146" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.8 Push and pop instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000002158" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.9 Illustration of stack operation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002185.xhtml#P7000497027000000000000000002190" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.10 Integer arithmetic operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002185.xhtml#P7000497027000000000000000002282" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.11 C and assembly code for arithmetic function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002185.xhtml#P70004970270000000000000000022C1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.12 Special arithmetic operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002354" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.13 Comparison and test instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000238C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.14 The set instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000244F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.15 The jump instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.16 Compilation of conditional statements.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002580" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.17 Compilation of conditional statements using conditional assignment.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_000.xhtml#P70004970270000000000000000025B9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.18 The conditional move instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P7000497027000000000000000002672" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.19 Code for do-while version of factorial program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P70004970270000000000000000026C7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.20 C and assembly code for while version of factorial using jump-to-middle translation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P700049702700000000000000000270A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.21 C and assembly code for while version of factorial using guarded-do translation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P70004970270000000000000000027B9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.22 Example switch statement and its translation into extended C.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P70004970270000000000000000027CC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.23 Assembly code for switch statement example in Figure 3.22.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002339_split_001.xhtml#P7000497027000000000000000002815" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.24 Assembly code and jump table for Problem 3.31.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002849" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.25 General stack frame structure.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002880" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.26 Illustration of call and ret functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P70004970270000000000000000028B1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.27 Detailed execution of program involving procedure calls and returns.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P70004970270000000000000000029D0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.28 Registers for passing function arguments.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002A38" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.29 Example of function with multiple arguments of different types.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002A44" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.30 Stack frame structure for function proc.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002A74" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.31 Example of procedure definition and call.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002A89" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.32 Example of code to call function proc, defined in Figure 3.29.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002A96" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.33 Stack frame for function call_proc.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002ABE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.34 Code demonstrating use of callee-saved registers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000281F.xhtml#P7000497027000000000000000002AF2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.35 Code for recursive factorial program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002B19.xhtml#P7000497027000000000000000002C3A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.36 Elements of array in row-major order.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002B19.xhtml#P7000497027000000000000000002C79" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.37 Original and optimized code to compute element i, k of matrix product for fixed-length arrays.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002B19.xhtml#P7000497027000000000000000002CC3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.38 Original and optimized code to compute element i, k of matrix product for variable-size arrays.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002ED2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.39 Example gdb commands.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002F48" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.40 Stack organization for echo function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002F87" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.41 C and disassembled code for Practice Problem 3.46.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002FD7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.42 Stack organization for echo function with stack protector enabled.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000003022" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.43 Function requiring the use of a frame pointer.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000002E6D.xhtml#P700049702700000000000000000302E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.44 Stack frame structure for function vframe.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P7000497027000000000000000003091" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.45 Media registers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P700049702700000000000000000309B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.46 Floating-point movement instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P70004970270000000000000000030CF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.47 Two-operand floating-point conversion operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P70004970270000000000000000030F1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.48 Three-operand floating-point conversion operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P70004970270000000000000000031B9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.49 Scalar floating-point arithmetic operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P7000497027000000000000000003225" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.50 Bitwise operations on packed data.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003080.xhtml#P7000497027000000000000000003294" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.51 Illustration of conditional branching in floating-point code.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000032E1.xhtml#P7000497027000000000000000003346" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.52 Assembly code for Problem 3.62.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000032E1.xhtml#P7000497027000000000000000003355" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.53 Disassembled code for Problem 3.63.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000032E1.xhtml#P700049702700000000000000000340F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 3.54 Code for Problem 3.72.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ABC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.1 Y86-64 programmer-visible state.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.2 Y86-64 instruction set.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B10" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.3 Function codes for Y86-64 instruction set.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B18" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.4 Y86-64 program register identifiers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003BBD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.5 Y86-64 status codes.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003BE8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.6 Comparison of Y86-64 and x86-64 assembly programs.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C09" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.7 Sample program written in Y86-64 assembly code.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C11" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.8 Output of yas assembler.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003C8A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.9 Logic gate types.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003C98" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.10 Combinational circuit to test for bit equality.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CB4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.11 Single-bit multiplexor circuit.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CCB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.12 Word-level equality test circuit.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CE1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.13 Word-level multiplexor circuit.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CF4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.14 Four-way multiplexor.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D0E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.15 Arithmetic/logic unit (ALU).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D38" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.16 Register operation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.17 Sample Y86-64 instruction sequence.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D82" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.18 Computations in sequential implementation of Y86-64 instructions OPq, rrmovq, and irmovq. </a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003DFA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.19 Computations in sequential implementation of Y86-64 instructions rmmovq and mrmovq.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.20 Computations in sequential implementation of Y86-64 instructions pushq and popq.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.21 Computations in sequential implementation of Y86-64 instructions jXX, call, and ret.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FAD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.22 Abstract view of SEQ, a sequential implementation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.23 Hardware structure of SEQ, a sequential implementation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.24 Identifying the different computation steps in the sequential implementation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004031" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.25 Tracing two cycles of execution by SEQ.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000403D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.26 Constant values used in HCL descriptions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.27 SEQ fetch stage.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040E4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.28 SEQ decode and write-back stage.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004107" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.29 SEQ execute stage.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004125" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.30 SEQ memory stage.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004139" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.31 SEQ PC update stage.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P7000497027000000000000000004159" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.32 Unpipelined computation hardware.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P700049702700000000000000000416C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.33 Three-stage pipelined computation hardware.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P7000497027000000000000000004173" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.34 Three-stage pipeline timing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P7000497027000000000000000004180" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.35 One clock cycle of pipeline operation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P700049702700000000000000000419A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.36 Limitations of pipelining due to nonuniform stage delays.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041BF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.37 Limitations of pipelining due to overhead.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041DD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.38 Limitations of pipelining due to logical dependencies.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000041F2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.39 Shifting the timing of the PC computation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.40 SEQ+ hardware structure.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.41 Hardware structure of PIPE—, an initial pipelined implementation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004224" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.42 Example of instruction flow through pipeline.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004254" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.43 Pipelined execution of prog1 without special pipeline control.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004273" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.44 Pipelined execution of prog2 without special pipeline control.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004291" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.45 Pipelined execution of prog3 without special pipeline control.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000042AA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.46 Pipelined execution of prog4 without special pipeline control.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000042C2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.47 Pipelined execution of prog2 using stalls.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000042CF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.48 Pipelined execution of prog4 using stalls.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004304" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.49 Pipelined execution of prog2 using forwarding.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P700049702700000000000000000430C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.50 Pipelined execution of prog3 using forwarding.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P700049702700000000000000000431E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.51 Pipelined execution of prog4 using forwarding.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004349" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.52 Hardware structure of PIPE, our final pipelined implementation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004350" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.53 Example of load/use data hazard.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004362" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.54 Handling a load/use hazard by stalling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004370" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.55 Simplified view of ret instruction processing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004384" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.56 Processing mispredicted branch instructions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043B4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.57 PIPE PC selection and fetch logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000043D2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.58 PIPE decode and write-back stage logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000043FD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.59 Demonstration of forwarding priority.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000441C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.60 PIPE execute stage logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004422" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.61 PIPE memory stage logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004455" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.62 Detailed processing of the ret instruction.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000446C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.63 Processing invalid memory reference exception.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004474" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.64 Detection conditions for pipeline control logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000448C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.65 Additional pipeline register operations,</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.66 Actions for pipeline control logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044BD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.67 Pipeline states for special control conditions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004524" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.68 PIPE pipeline control logic.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000045E1.xhtml#P7000497027000000000000000004617" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.69 Switch statements can be translated into Y86-64 code.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000045E1.xhtml#P7000497027000000000000000004665" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.70 Execute and memory stages capable of load forwarding.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004718" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 4.71 Solution for Problem 4.10.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004949" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.1 Prefix-sum functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004951" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.2 Performance of prefix-sum functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000496E.xhtml#P7000497027000000000000000004971" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.3 Vector abstract data type.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000496E.xhtml#P7000497027000000000000000004991" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.4 Implementation of vector abstract data type.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000496E.xhtml#P700049702700000000000000000499B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.5 Initial implementation of combining operation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000049CE.xhtml#P70004970270000000000000000049F6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.6 Improving the efficiency of the loop test.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000049CE.xhtml#P7000497027000000000000000004A11" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.7 Lowercase conversion routines.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000049CE.xhtml#P7000497027000000000000000004A1E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.8 Comparative performance of lowercase conversion routines.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004A83.xhtml#P7000497027000000000000000004A8A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.9 Eliminating function calls within the loop.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004AB6.xhtml#P7000497027000000000000000004AD0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.10 Accumulating result in temporary.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004B76" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.11 Block diagram of an out-of-order processor.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004BAA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.12 Latency, issue time, and capacity characteristics of reference machine operations.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C1E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.13 Graphical representation of inner-loop code for combine4</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C33" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.14 Abstracting combine4 operations as a data-flow graph.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C57" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.15 Data-flow representation of computation by n iterations of the inner loop of combine4.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004C9D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.16 Applying 2 × 1 loop unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004CDE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.17 CPE performance for different degrees of k × 1 loop unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004CF5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.18 Graphical representation of inner-loop code for combine5.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004CFE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.19 Abstracting combine5 operations as a data-flow graph.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004D0A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.20 Data-flow representation of combine5 operating on a vector of length n.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D29" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.21 Applying 2 × 2 loop unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D63" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.22 Graphical representation of inner-loop code for combine6.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D6C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.23 Abstracting combine6 operations as a data-flow graph.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D77" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.24 Data-flow representation of combine6 operating on a vector of length n.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D82" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.25 CPE performance of k × k loop unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004DDC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.26 Applying 2 × 1a unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004DEE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.27 Graphical representation of inner-loop code for combine7.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004DF8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.28 Abstracting combine7 operations as a data-flow graph.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004E00" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.29 Data-flow representation of combine7 operating on a vector of length n.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004E0A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.30 CPE performance for k × 1a loop unrolling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004F57" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.31 Linked list function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004F6E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.32 Function to set array elements to 0.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004F75" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.33 Code to write and read memory locations, along with illustrative executions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004F90" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.34 Detail of load and store units.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FA1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.35 Graphical representation of inner-loop code for write_read.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FB3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.36 Abstracting the operations for write_read.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FC7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.37 Data-flow representation of function write_read.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000500C.xhtml#P7000497027000000000000000005064" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.38 Profile results for different versions of bigram-frequency counting program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000050E4.xhtml#P7000497027000000000000000005152" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 5.39 Data dependencies among multiplication operations for cases in Problem 5.8.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P70004970270000000000000000051C1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.1 Inverted pendulum.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P70004970270000000000000000051C7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.2 Characteristics of DRAM and SRAM memory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P70004970270000000000000000051EE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.3 High-level view of a 128-bit 16 × 8 DRAM chip.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P70004970270000000000000000051F7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.4 Reading the contents of a DRAM supercell.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005208" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.5 Reading the contents of a memory module.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005255" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.6 Example bus structure that connects the CPU and main memory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005263" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.7 Memory read transaction for a load operation: movq A, %rax.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P700049702700000000000000000526F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.8 Memory write transaction for a store operation: movq %rax, A.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005279" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.9 Disk geometry.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P700049702700000000000000000529F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.10 Disk dynamics.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005302" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.11 Example bus structure that connects the CPU, main memory, and I/O devices.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P700049702700000000000000000531A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.12 Reading a disk sector.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P700049702700000000000000000533E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.13 Solid state disk (SSD).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005346" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.14 Performance characteristics of a commercial solid state disk.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005378" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.15 Storage and processing technology trends.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000051B5.xhtml#P7000497027000000000000000005427" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.16 The gap between disk, DRAM, and CPU speeds.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005435.xhtml#P7000497027000000000000000005441" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.17 (a) A function with good locality, (b) Reference pattern for vector v (N = 8).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005435.xhtml#P7000497027000000000000000005478" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.18 (a) Another function with good locality, (b) Reference pattern for array a (M = 2, N = 3).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005435.xhtml#P7000497027000000000000000005498" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.19 (a) A function with poor spatial locality, (b) Reference pattern for array a (M = 2, N = 3).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005435.xhtml#P70004970270000000000000000054D5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.20 Code examples for Practice Problem 6.8.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000054EF.xhtml#P70004970270000000000000000054F7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.21 The memory hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000054EF.xhtml#P7000497027000000000000000005506" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.22 The basic principle of caching in a memory hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000054EF.xhtml#P7000497027000000000000000005523" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.23 The ubiquity of caching in modern computer systems.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P7000497027000000000000000005572" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.24 Typical bus structure for cache memories.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P700049702700000000000000000557F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.25 General organization of cache (S, E, B, m).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000055B3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.26 Summary of cache parameters.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000055CE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.27 Direct-mapped cache (E = 1).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000055D8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.28 Set selection in a direct-mapped cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000055DD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.29 Line matching and word selection in a direct-mapped cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000055FE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.30 4-bit address space for example direct-mapped cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P700049702700000000000000000572A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.31 Why caches index with the middle bits.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P700049702700000000000000000579A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.32 Set associative cache (1 &lt; E &lt; C/B).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000057A1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.33 Set selection in a set associative cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000057AC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.34 Line matching and word selection in a set associative cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000057B9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.35 Fully associative cache (E = C/B).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000057C0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.36 Set selection in a fully associative cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000057C6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.37 Line matching and word selection in a fully associative cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000058DD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.38 Intel Core i7 cache hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000556F.xhtml#P70004970270000000000000000058E2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.39 Characteristics of the Intel Core i7 cache hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005A68" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.40 Functions that measure and compute read throughput.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005A75" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.41 A memory mountain.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005A80" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.42 Ridges of temporal locality in the memory mountain.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005A8D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.43 A slope of spatial locality.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005AB5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.44 Six versions of matrix multiply.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005AD9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.45 Analysis of matrix multiply inner loops.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005A45.xhtml#P7000497027000000000000000005AFC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.46 Core i7 matrix multiply performance.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005B2F.xhtml#P7000497027000000000000000005DDF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.47 Functions referenced in Problem 6.37.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005E52.xhtml#P7000497027000000000000000005F7F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 6.48 Figure for solution to Problem 6.17.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000005FB4.xhtml#P7000497027000000000000000005FF0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.1 Example program 1.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006006.xhtml#P7000497027000000000000000006011" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.2 Static linking.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006040.xhtml#P700049702700000000000000000604E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.3 Typical ELF relocatable object file.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000608B.xhtml#P70004970270000000000000000060B9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.4 ELF symbol table entry.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000608B.xhtml#P700049702700000000000000000612D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.5 Example program for Practice Problem 7.1.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006160.xhtml#P70004970270000000000000000061F7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.6 Member object files in the libvector library.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006160.xhtml#P700049702700000000000000000621E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.7 Example program 2.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006160.xhtml#P7000497027000000000000000006229" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.8 Linking with static libraries.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000627E.xhtml#P7000497027000000000000000006298" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.9 ELF relocation entry.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000627E.xhtml#P70004970270000000000000000062B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.10 Relocation algorithm.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000627E.xhtml#P70004970270000000000000000062BC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.11 Code and relocation entries from main.o.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000627E.xhtml#P700049702700000000000000000630B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.12 Relocated .text and .data sections for the executable file prog.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006348.xhtml#P700049702700000000000000000634B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.13 Typical ELF executable object file.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006348.xhtml#P700049702700000000000000000634F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.14 Program header table for the example executable prog.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006385.xhtml#P7000497027000000000000000006397" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.15 Linux x86-64 run-time memory image.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000063A5.xhtml#P70004970270000000000000000063C1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.16 Dynamic linking with shared libraries.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000063E3.xhtml#P7000497027000000000000000006413" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.17 Example program 3.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006428.xhtml#P7000497027000000000000000006433" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.18 Using the GOT to reference a global variable.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006428.xhtml#P7000497027000000000000000006457" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.19 Using the PLT and GOT to call external functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006493.xhtml#P70004970270000000000000000064BB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.20 Compile-time interpositioning with the C preprocessor.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006493.xhtml#P70004970270000000000000000064CE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.21 Link-time interpositioning with the --wrap flag.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006493.xhtml#P7000497027000000000000000006503" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 7.22 Run-time interpositioning with LD_PRELOAD.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P70004970270000000000000000066B1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.1 Anatomy of an exception.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P70004970270000000000000000066C4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.2 Exception table.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P70004970270000000000000000066CB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.3 Generating the address of an exception handler.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P70004970270000000000000000066E8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.4 Classes of exceptions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P7000497027000000000000000006702" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.5 Interrupt handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P7000497027000000000000000006709" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.6 Trap handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P700049702700000000000000000671C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.7 Fault handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P7000497027000000000000000006723" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.8 Abort handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P7000497027000000000000000006734" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.9 Examples of exceptions in x86-64 systems.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P700049702700000000000000000675C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.10 Examples of popular system calls in Linux x86-64 systems.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000066A6.xhtml#P70004970270000000000000000067C2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.11 Implementing the hello program directly with Linux system calls.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000067D4.xhtml#P70004970270000000000000000067E6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.12 Logical control flows.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000067D4.xhtml#P7000497027000000000000000006819" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.13 Process address space.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000067D4.xhtml#P7000497027000000000000000006835" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.14 Anatomy of a process context switch.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P700049702700000000000000000689A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.15 Using fork to create a new process.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000068B3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.16 Process graph for the example program in Figure 8.15.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000068B8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.17 Process graph for a nested fork.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P7000497027000000000000000006957" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.18 Using the waitpid function to reap zombie children in no particular order.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P700049702700000000000000000697D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.19 Using waitpid to reap zombie children in the order they were created.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000069B1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.20 Organization of an argument list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000069B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.21 Organization of an environment variable list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000069D2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.22 Typical organization of the user stack when a new program starts.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P7000497027000000000000000006A09" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.23 The main routine for a simple shell program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P7000497027000000000000000006A1B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.24 eval evaluates the shell command line.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000685D.xhtml#P7000497027000000000000000006A24" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.25 parseline parses a line of input for the shell.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006A30" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.26 Linux signals.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006AC3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.27 Signal handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006AFD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.28 Foreground and background process groups.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006B18" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.29 Using the kill function to send a signal to a child.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006B55" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.30 A program that uses a signal handler to catch a SIGINT signal.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006B5C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.31 Handlers can be interrupted by other handlers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006B9C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.32 Temporarily blocking a signal from being received.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006BB5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.33 Async-signal-safe functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006CE5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.34 The Sio (Safe I/O) package for signal handlers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006CED" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.35 A safe version of the SICINT handler from Figure 8.30.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006D1F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.36 signal1. This program is flawed because it assumes that signals are queued.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006D36" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.37 signal2. An improved version of Figure 8.36 that correctly accounts for the fact that signals are not queued.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006D5B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.38 Signal. A wrapper for sigaction that provides portable signal handling on Posix-compliant systems.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006D9C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.39 A shell program with a subtle synchronization error.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006DC9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.40 Using sigprocmask to synchronize processes.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006A2D.xhtml#P7000497027000000000000000006DD6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.41 Waiting for a signal with a spin loop. </a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006DFA.xhtml#P7000497027000000000000000006DFF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.42 Waiting for a signal with sigsuspend.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006DFA.xhtml#P7000497027000000000000000006E32" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.43 Nonlocal jump example.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006DFA.xhtml#P7000497027000000000000000006E3C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.44 A program that uses nonlocal jumps to restart itself when the user types Ctrl+C.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006E81.xhtml#P7000497027000000000000000006F68" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.45 Counter program referenced in Problem 8.23.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FA2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.46 Sample shell session for Problem 8.26.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FA8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.47 Process graph for Practice Problem 8.2.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FBB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.48 Process graph for Practice Problem 8.3.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FC0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 8.49 Process graph for Practice Problem 8.4.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000702F.xhtml#P7000497027000000000000000007033" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.1 A system that uses physical addressing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000702F.xhtml#P7000497027000000000000000007037" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.2 A system that uses virtual addressing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P700049702700000000000000000706E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.3 How a VM system uses main memory as a cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P700049702700000000000000000707C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.4 Page table.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P70004970270000000000000000070A2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.5 VM page hit.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P70004970270000000000000000070A8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.6 VM page fault (before).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P70004970270000000000000000070AF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.7 VM page fault (after).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P70004970270000000000000000070B7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.8 Allocating a new virtual page.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007062.xhtml#P70004970270000000000000000070CD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.9 How VM provides processes with separate address spaces.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070EA.xhtml#P70004970270000000000000000070ED" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.10 Using VM to provide page-level memory protection.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P70004970270000000000000000070F9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.11 Summary of address translation symbols.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P7000497027000000000000000007121" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.12 Address translation with a page table.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P700049702700000000000000000713C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.13 Operational view of page hits and page faults.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P7000497027000000000000000007166" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.14 Integrating VM with a physically addressed cache.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P7000497027000000000000000007175" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.15 Components of a virtual address that are used to access the TLB.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P700049702700000000000000000717A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.16 Operational view of a TLB hit and miss.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P7000497027000000000000000007192" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.17 A two-level page table hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P7000497027000000000000000007199" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.18 Address translation with a k-level page table.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P70004970270000000000000000071B4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.19 Addressing for small memory system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000070F6.xhtml#P70004970270000000000000000071BA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.20 TLB, page table, and cache for small memory system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P700049702700000000000000000721A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.21 The Core i7 memory system.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P700049702700000000000000000721E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.22 Summary of Core i7 address translation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P7000497027000000000000000007229" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.23 Format of level 1, level 2, and level 3 page table entries.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P7000497027000000000000000007249" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.24 Format of level 4 page table entries.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P700049702700000000000000000726E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.25 Core i7 page table translation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P7000497027000000000000000007275" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.26 The virtual memory of a Linux process.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P7000497027000000000000000007284" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.27 How Linux organizes virtual memory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007216.xhtml#P70004970270000000000000000072A1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.28 Linux page fault handling.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000072B5.xhtml#P70004970270000000000000000072C7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.29 A shared object.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000072B5.xhtml#P70004970270000000000000000072CD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.30 A private copy-on-write object.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000072B5.xhtml#P70004970270000000000000000072EF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.31 How the loader maps the areas of the user address space.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000072B5.xhtml#P700049702700000000000000000730A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.32 Visual interpretation of mmap arguments.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P700049702700000000000000000734A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.33 The heap.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P700049702700000000000000000738C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.34 Allocating and freeing blocks with malloc and free.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000073FC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.35 Format of a simple heap block.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007400" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.36 Organizing the heap with an implicit free list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007439" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.37 Splitting a free block to satisfy a three-word allocation request.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P700049702700000000000000000744A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.38 An example of false fragmentation.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007461" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.39 Format of heap block that uses a boundary tag.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007472" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.40 Coalescing with boundary tags.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000074A9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.41 memlib. c: Memory system model.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000074B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.42 Invariant form of the implicit free list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000074D0" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.43 Basic constants and macros for manipulating the free list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000074E5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.44 mm_init creates a heap with an initial free block.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P70004970270000000000000000074EE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.45 extend_heap extends the heap with a new free block.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007509" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.46 mm_free frees a block and uses boundary-tag coalescing to merge it with any adjacent free blocks in constant time.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007512" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.47 mm_malloc allocates a block from the free list.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000733C.xhtml#P7000497027000000000000000007536" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.48 Format of heap blocks that use doubly linked free lists.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007565.xhtml#P700049702700000000000000000757B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.49 A garbage collector's view of memory as a directed graph.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007565.xhtml#P7000497027000000000000000007580" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.50 Integrating a conservative garbage collector and a C malloc package.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007565.xhtml#P7000497027000000000000000007591" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.51 Pseudocode for the mark and sweep functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007565.xhtml#P70004970270000000000000000075C6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.52 Mark&amp;Sweep example.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007565.xhtml#P70004970270000000000000000075CD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 9.53 Left and right pointers in a balanced tree of allocated blocks.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000078AD.xhtml#P70004970270000000000000000078CD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.1 Portion of the Linux directory hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000078E1.xhtml#P70004970270000000000000000078FD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.2 Access permission bits.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007939.xhtml#P700049702700000000000000000795F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.3 Using read and write to copy standard input to standard output 1 byte at a time.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007975.xhtml#P70004970270000000000000000079BE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.4 The rio_readn and rio_writen functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007975.xhtml#P70004970270000000000000000079C8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.5 Copying a text file from standard input to standard output.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007975.xhtml#P70004970270000000000000000079CF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.6 A read buffer of type rio_t and the rio_readinitb function that initializes it.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007975.xhtml#P70004970270000000000000000079E1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.7 The internal rio_read function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007975.xhtml#P70004970270000000000000000079F7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.8 The rio_readlineb and rio_readnb functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A14.xhtml#P7000497027000000000000000007A31" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.9 The stat structure.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A14.xhtml#P7000497027000000000000000007A38" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.10 Querying and manipulating a file's st_mode bits.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A3E.xhtml#P7000497027000000000000000007A5B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.11 Reading the contents of a directory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A61.xhtml#P7000497027000000000000000007A6E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.12 Typical kernel data structures for open files.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A61.xhtml#P7000497027000000000000000007A75" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.13 File sharing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A61.xhtml#P7000497027000000000000000007A82" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.14 How a child process inherits the parent's open files.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007A9B.xhtml#P7000497027000000000000000007ABD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.15 Kernel data structures after redirecting standard output by calling dup2(4, 1).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007AE3.xhtml#P7000497027000000000000000007AE6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 10.16 Relationship between Unix I/O, standard I/O, and Rio.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007B9A.xhtml#P7000497027000000000000000007BA5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.1 A client-server transaction.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BB4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.2 Hardware organization of a network host.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BB8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.3 Ethernet segment.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BC7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.4 Bridged Ethernet segments.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BCB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.5 Conceptual view of a LAN.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BD1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.6 A small internet.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BE5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.7 How data travel from one host to another on an internet.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BB0.xhtml#P7000497027000000000000000007BF9" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.8 Hardware and software organization of an Internet application.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BFE.xhtml#P7000497027000000000000000007C16" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.9 IP address structure.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BFE.xhtml#P7000497027000000000000000007C73" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.10 Subset of the Internet domain name hierarchy.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007BFE.xhtml#P7000497027000000000000000007CB5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.11 Anatomy of an Internet connection.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007CC4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.12 Overview of network applications based on the sockets interface.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007CCE" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.13 Socket address structures.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007D2D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.14 The roles of the listening and connected descriptors.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007D5E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.15 Data structure returned by getaddrinfo.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007D88" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.16 The addrinfo structure used by getaddrinfo.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007DE7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.17 Hostinfo displays the mapping of a domain name to its associated IP addresses.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E1F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.18 open_clientfd: Helper function that establishes a connection with a server.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E55" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.19 open_listenfd: Helper function that opens and returns a listening descriptor.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E5E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.20 Echo client main routine.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E72" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.21 Iterative echo server main routine.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E78" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.22 echo function that reads and echoes text lines.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007E97" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.23 Example MIME types.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007ED7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.24 Example of an HTTP transaction that serves static content.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007EFA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.25 Some HTTP status codes.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007F25" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.26 Examples of CGI environment variables.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007F59" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.27 CGI program that sums two integers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007F5E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.28 An HTTP transaction that serves dynamic HTML content.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007F74" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.29 The Tiny Web server.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007F7A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.30 Tiny doit handles one HTTP transaction.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007F8A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.31 Tiny clienterror sends an error message to the client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007F90" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.32 Tiny read_requesthdrs reads and ignores request headers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007FAB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.33 Tiny parse_uri parses an HTTP URI.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007FBD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.34 Tiny serve_static serves static content to a client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000007F64.xhtml#P7000497027000000000000000007FD4" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 11.35 Tiny serve_dynamic serves dynamic content to a client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008097.xhtml#P700049702700000000000000000809E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.1 Step 1: Server accepts connection request from client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008097.xhtml#P70004970270000000000000000080A2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.2 Step 2: Server forks a child process to service the client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008097.xhtml#P70004970270000000000000000080A7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.3 Step 3: Server accepts another connection request.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008097.xhtml#P70004970270000000000000000080B6" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.4 Step 4: Server forks another child to service the new client.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008097.xhtml#P70004970270000000000000000080CF" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.5 Concurrent echo server based on processes.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P7000497027000000000000000008109" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.6 An iterative echo server that uses I/O multiplexing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P7000497027000000000000000008129" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.7 State machine for a logical flow in a concurrent event-driven echo server.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P7000497027000000000000000008144" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.8 Concurrent echo server based on I/O multiplexing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P700049702700000000000000000814E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.9 init_pool initializes the pool of active clients.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P7000497027000000000000000008157" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.10 add_client adds a new client connection to the pool.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP70004970270000000000000000080DE.xhtml#P700049702700000000000000000815F" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.11 check_clients services ready client connections.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000817D.xhtml#P7000497027000000000000000008189" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.12 Concurrent thread execution.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000817D.xhtml#P7000497027000000000000000008195" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.13 hello.c: The Pthreads "Hello, world!" program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000817D.xhtml#P7000497027000000000000000008200" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.14 Concurrent echo server based on threads.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000821D.xhtml#P7000497027000000000000000008221" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.15 Example program that illustrates different aspects of sharing.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008286" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.16 badcnt.c: An improperly synchronized counter program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000082A5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.17 Assembly code for the counter loop (lines 40−41) in badcnt.c.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000082AA" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.18 Instruction orderings for the first loop iteration in badcnt.c.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000083A2" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.19 Progress graph for the first loop iteration of badcnt.c.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000083A7" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.20 An example trajectory.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000083B5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.21 Safe and unsafe trajectories.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P70004970270000000000000000083E5" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.22 Using semaphores for mutual exclusion.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008405" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.23 Producer-consumer problem.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P700049702700000000000000000841A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.24 sbuf_t: Bounded buffer used by the Sbuf package.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P700049702700000000000000000843D" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.25 Sbuf: A package for synchronizing concurrent access to bounded buffers.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008459" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.26 Solution to the first readers-writers problem.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008466" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.27 Organization of a prethreaded concurrent server.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008478" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.28 A prethreaded concurrent echo server.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008482" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.29 echo_cnt: A version of echo that counts all bytes received from clients.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008497" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.30 Relationships between the sets of sequential, concurrent, and parallel programs.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P70004970270000000000000000084BD" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.31 Main routine for psum-mutex.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P70004970270000000000000000084C8" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.32 Thread routine for psum-mutex.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P70004970270000000000000000084D3" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.33 Thread routine for psum-array.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P7000497027000000000000000008518" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.34 Thread routine for psum-local.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P7000497027000000000000000008522" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.35 Performance of psum-local (Figure 12.34).</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000849B.xhtml#P7000497027000000000000000008534" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.36 Speedup and parallel efficiency for the execution times in Figure 12.35.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008581" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.37 A thread-unsafe pseudorandom number generator.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P700049702700000000000000000859B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.38 Thread-safe wrapper function for the C standard library ctime function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P70004970270000000000000000085AC" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.39 Relationships between the sets of reentrant, thread-safe, and thread-unsafe functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P70004970270000000000000000085B1" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.40 rand_r: A reentrant version of the rand function from Figure 12.37.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P70004970270000000000000000085DB" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.41 Common thread-unsafe library functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008614" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.42 program with a race.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008638" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.43 </a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008648" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.44 Progress graph for a program that can deadlock.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008653" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.45 Progress graph for a deadlock-free program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000867A.xhtml#P7000497027000000000000000008687" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.46 Buggy program for Problem 12.17.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000867A.xhtml#P7000497027000000000000000008732" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.47 Driver program for Problems 12.31−12.33.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000875E.xhtml#P700049702700000000000000000885C" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.48 Progress graph for a program that deadlocks.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP700049702700000000000000000875E.xhtml#P7000497027000000000000000008861" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure 12.49 Progress graph for the corrected deadlock-free program.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000041.xhtml#P7000497027000000000000000000050" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure A.1 Error-reporting functions.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000041.xhtml#P7000497027000000000000000000058" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure A.2 Wrapper for Unix-style wait function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000041.xhtml#P7000497027000000000000000000060" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure A.3 Wrapper for Unix-style kill function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000041.xhtml#P7000497027000000000000000000069" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure A.4 Wrapper for Posix-style pthread_detach function.</a></li><li class="calibre12 pcalibre pcalibre1"><a href="fileP7000497027000000000000000000041.xhtml#P7000497027000000000000000000071" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">Figure A.5 Wrapper for GAI-style getaddrinfo function.</a></li>
</ol>
</nav>
</body>
</html>
