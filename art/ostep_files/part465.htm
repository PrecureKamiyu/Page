<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Crash Consistency Problem</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part464.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part466.htm">下一个 &gt;</a></p><p class="s32" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Crash Consistency Problem</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Hopefully, from these crash scenarios, you can see the many problems that can occur to our on-disk file system image because of crashes: we can have inconsistency in file system data structures; we can have space leaks; we can return garbage data to a user; and so forth. What we’d like to do ideally is move the file system from one consistent state (e.g., before the file got appended to) to another <b>atomically </b>(e.g., after the inode, bitmap, and new data block have been written to disk). Unfortunately, we can’t do this easily because the disk only commits one write at a time, and crashes or power loss may occur between these updates. We call this general problem the <b>crash-consistency problem </b>(we could also call it the <b>consistent-update problem</b>).</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part464.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part466.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
