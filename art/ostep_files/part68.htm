<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.3 First In, First Out (FIFO)</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part67.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part69.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">7.3 First In, First Out (FIFO)</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The most basic algorithm a scheduler can implement is known as <b>First In, First Out </b>(<b>FIFO</b>) scheduling or sometimes <b>First Come, First Served</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_042.png"/></span></p><p class="s11" style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: center;">1<span class="s12">Said in the same way you would say “A fully-operational Death Star.”</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: right;">(<b>FCFS</b>). FIFO has a number of positive properties: it is clearly very simple and thus easy to implement. Given our assumptions, it works pretty well. Let’s do a quick example together. Imagine three jobs arrive in the system, A, B, and C, at roughly the same time (<span class="s43">T</span><span class="s56">arrival</span><span class="s43"> </span><span class="s44">= 0</span>). Because FIFO has to put some job first, let’s assume that while they all arrived simultaneously, A arrived just a hair before B which arrived just a hair before C. Assume also that each job runs for 10 seconds. What will the</p><p class="s27" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">average turnaround time <span class="p">be for these jobs?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-bottom: 1pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">A B C</p><p style="padding-left: 105pt;text-indent: 0pt;text-align: left;"><span><img width="209" height="47" alt="image" src="Image_043.png"/></span></p><p class="s47" style="padding-left: 22pt;text-indent: 0pt;text-align: center;">0   20   40   60   80   100  120</p><p class="s47" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">Time</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 117pt;text-indent: 0pt;text-align: left;">Figure 7.1: <b>FIFO Simple Example</b></p><p class="s62" style="text-indent: 0pt;line-height: 6pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 11pt;text-align: left;">From Figure <span style=" color: #00AEEF;">7.1</span>, you can see that A finished at 10, B at 20, and C at 30. Thus, the average turnaround time for the three jobs is simply <span class="s63">10+20+30</span><span class="s64"> </span><span class="s44">=</span></p><p class="s44" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">20<span class="p">. Computing turnaround time is as easy as that.</span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now let’s relax one of our assumptions. In particular, let’s relax as- sumption 1, and thus no longer assume that each job runs for the same amount of time. How does FIFO perform now? What kind of workload could you construct to make FIFO perform poorly?</p><p class="s6" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(think about this before reading on ... keep thinking ... got it?!)</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Presumably you’ve figured this out by now, but just in case, let’s do an example to show how jobs of different lengths can lead to trouble for FIFO scheduling. In particular, let’s again assume three jobs (A, B, and C), but this time A runs for 100 seconds while B and C run for 10 each.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-bottom: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">A         B  C</p><p style="padding-left: 105pt;text-indent: 0pt;text-align: left;"><span><img width="209" height="47" alt="image" src="Image_044.png"/></span></p><p class="s47" style="padding-left: 22pt;text-indent: 0pt;text-align: center;">0   20   40   60   80   100  120</p><p class="s47" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">Time</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">Figure 7.2: <b>Why FIFO Is Not That Great</b></p><p class="s62" style="text-indent: 0pt;line-height: 6pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 94%;text-align: justify;">As you can see in Figure <span style=" color: #00AEEF;">7.2</span>, Job A runs first for the full 100 seconds before B or C even get a chance to run. Thus, the average turnaround time for the system is high: a painful 110 seconds ( <span class="s63">100+110+120</span><span class="s64"> </span><span class="s44">= 110</span>).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">This problem is generally referred to as the <b>convoy effect </b>[B+79], where a number of relatively-short potential consumers of a resource get queued behind a heavyweight resource consumer. This scheduling scenario might remind you of a single line at a grocery store and what you feel like when</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 97pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: T<span class="s7">HE </span>P<span class="s7">RINCIPLE OF </span>SJF</p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Shortest Job First represents a general scheduling principle that can be applied to any system where the perceived turnaround time per customer (or, in our case, a job) matters. Think of any line you have waited in: if the establishment in question cares about customer satisfaction, it is likely they have taken SJF into account. For example, grocery stores commonly have a “ten-items-or-less” line to ensure that shoppers with only a few things to purchase don’t get stuck behind the family preparing for some upcoming nuclear winter.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">you see the person in front of you with three carts full of provisions and a checkbook out; it’s going to be a while<span class="s35">2</span>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">So what should we do? How can we develop a better algorithm to deal with our new reality of jobs that run for different amounts of time? Think about it first; then read on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part67.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part69.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
