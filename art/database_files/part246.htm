<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>13.1   Database Storage Architecture</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part245.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part247.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">13.1   <span style=" color: #00AEEF;">Database Storage Architecture</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Persistent data are stored on non-volatile storage, which, as we saw in Chapter 12, is typically magnetic disk or <span class="s44">SSD</span>. Magnetic disks as well as <span class="s44">SSDs </span>are block structured devices, that is, data are read or written in units of a block. In contrast, databases deal with records, which are usually much smaller than a block (although in some cases records may have attributes that are very large).</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Most databases use operating system ﬁles as an intermediate layer for storing records, which abstract away some details of the underlying blocks. However, to en- sure eﬃcient access, as well as to support recovery from failures (as we will see later in Chapter 19), databases must continue to be aware of blocks. Thus, in Section 13.2, we study how individual records are stored in ﬁles, taking block structure into account.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Given a set of records, the next decision lies in how to organize them in the ﬁle structure; for example, they may stored in sorted order, in the order they are created, or in an arbitrary order. Section 13.3 studies several alternative ﬁle organizations.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Section 13.4 then describes how databases organize data about the relational schemas as well as storage organization, in the data dictionary. Information in the data dictionary is crucial for many tasks, for example, to locate and retrieve records of a relation when given the name of the relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">For a <span class="s44">CPU </span>to access data, it must be in main memory, whereas persistent data must be resident on non-volatile storage such as magnetic disks or <span class="s44">SSDs</span>. For databases that are larger than main memory, which is the usual case, data must be fetched from non- volatile storage and saved back if it is updated. Section 13.5 describes how databases use a region of memory called the database buﬀer to store blocks that are fetched from non-volatile storage.</p><p class="s20" style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">587</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;"><a name="bookmark266">An approach to storing data based on storing all values of a particular column together, rather than storing all attributes of a particular row together, has been found to work very well for analytical query processing. This idea, called </a><i>column-oriented storage</i>, is discussed in Section 13.6.<a name="bookmark300">&zwnj;</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Some applications need very fast access to data and have small enough data sizes that the entire database can ﬁt into the main memory of a database server machine. In such cases, we can keep a copy of the entire database in memory.<span class="s76">1</span> Databases that store the entire database in memory and optimize in-memory data structures as well as query processing and other algorithms used by the database to exploit the memory resi- dency of data are called <span class="s63">main-memory databases</span>. Storage organization in main-memory databases is discussed in Section 13.7. We note that non-volatile memory that allows direct access to individual bytes or cache lines, called <i>storage class memory</i>, is under development. Main-memory database architectures can be further optimized for such storage.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part245.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part247.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
