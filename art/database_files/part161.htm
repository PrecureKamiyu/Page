<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.10  Modeling Temporal Data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part160.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part162.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">7.10  <span style=" color: #00AEEF;">Modeling Temporal Data</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Suppose we retain data in our university organization showing not only the address of each instructor, but also all former addresses of which the university is aware. We may then ask queries, such as “Find all instructors who lived in Princeton in 1981.” In this case, we may have multiple addresses for instructors. Each address has an associated start and end date, indicating when the instructor was resident at that address. A special value for the end date, for example, null, or a value well into the future, such as 9999- 12-31, can be used to indicate that the instructor is still resident at that address.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In general, <span class="s63">temporal data </span>are data that have an associated time interval during which they are <b>valid</b>.<span class="s76">10</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Modeling temporal data is a challenging problem for several reasons. For example, suppose we have an <i>instructor </i>entity set with which we wish to associate a time-varying address. To add temporal information to an address, we would then have to create a multivalued attribute, each of whose values is a composite value containing an address and a time interval. In addition to time-varying attribute values, entities may themselves have an associated valid time. For example, a student entity may have a valid time from the date the student entered the university to the date the student graduated (or left the university). Relationships too may have associated valid times. For example, the <i>prereq </i>relationship may record when a course became a prerequisite for another course. We would thus have to add valid time intervals to attribute values, entity sets, and relationship sets. Adding such detail to an <span class="s44">E-R </span>diagram makes it very diﬃcult to create and to comprehend. There have been several proposals to extend the <span class="s44">E-R </span>notation to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2090.png"/></span></p><p class="s79" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s77">10 </span><span class="s78">There are other models of temporal data that distinguish between </span>valid time <span class="s80">and </span>transaction time<span class="s80">, the latter recording when a fact was recorded in the database. We ignore such details for simplicity.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:90.964pt" cellspacing="0"><tr style="height:15pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">course id</p></td><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">title</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">dept name</p></td><td style="width:42pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 11pt;text-align: center;">credits</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">start</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 11pt;text-align: center;">end</p></td></tr><tr style="height:16pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 3pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BIO-101</p></td><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Intro. to Biology</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Biology</p></td><td style="width:42pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;">4</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 12pt;text-align: center;">1985-01-01</p></td><td style="width:61pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">9999-12-31</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-201</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Intro. to C</p></td><td style="width:62pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Comp. Sci.</p></td><td style="width:42pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="text-indent: 0pt;line-height: 12pt;text-align: center;">4</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 12pt;text-align: center;">1985-01-01</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">1999-01-01</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-201</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Intro. to Java</p></td><td style="width:62pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Comp. Sci.</p></td><td style="width:42pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="text-indent: 0pt;line-height: 12pt;text-align: center;">4</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 12pt;text-align: center;">1999-01-01</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">2010-01-01</p></td></tr><tr style="height:14pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-201</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Intro. to Python</p></td><td style="width:62pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Comp. Sci.</p></td><td style="width:42pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="text-indent: 0pt;line-height: 12pt;text-align: center;">4</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 12pt;text-align: center;">2010-01-01</p></td><td style="width:61pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">9999-12-31</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2091.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2092.png"/></span></p><p class="s74" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 7.17 </span>A temporal version of the <span class="s91">course </span>relation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">specify in a simple manner that an attribute value or relationship is time varying, but there are no accepted standards.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In practice, database designers fall back to simpler approaches to designing tempo- ral databases. One commonly used approach is to design the entire database (including <span class="s44">E-R </span>design and relational design) ignoring temporal changes. After this, the designer studies the various relations and decides which relations require temporal variation to be tracked.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The next step is to add valid time information to each such relation by adding start and end time as attributes. For example, consider the <i>course </i>relation. The title of the course may change over time, which can be handled by adding a valid time range; the resultant schema would be:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2093.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2094.png"/></span></p><p class="s13" style="padding-top: 9pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">course <span class="p">(</span>course id<span class="p">, </span>title<span class="p">, </span>dept name<span class="p">, </span>credits<span class="p">, </span>start, end<span class="p">)</span></p><p style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">An instance of the relation is shown in Figure 7.17. Each tuple has a valid interval associated with it. Note that as per the <span class="s44">SQL:2011 </span>standard, the interval is <span class="s63">closed </span>on the left-hand side, that is, the tuple is valid at time <i>start</i>, but is <span class="s63">open </span>on the right-hand side, that is, the tuple is valid until just before time <i>end</i>, but is invalid at time <i>end</i>. This allows a tuple to have the same start time as the end time of another tuple, without overlapping. In general, left and right endpoints that are closed are denoted by [ and</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">], while left and right endpoints that are open are denoted by ( and ). Intervals in <span class="s44">SQL:2011 </span>are of the form [<i>start</i>, <i>end</i>), that is they are closed on the left and open on the right, Note that 9999-12-31 is the highest possible date as per the <span class="s44">SQL </span>standard.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It can be seen in Figure 7.17 that the title of the course CS-201 has changed several times. Suppose that on 2020-01-01 the title of the course is updated again to, say, “Intro. to Scala”. Then, the <i>end </i>attribute value of the tuple with title “Intro. to Python” would be updated to 2020-01-01, and a new tuple (CS-201, Intro. to Scala, Comp. Sci., 4, 2020-01-01, 9999-12-31) would be added to the relation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When we track data values across time, functional dependencies that we assumed to hold, such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2096.png"/></span></p><p class="s13" style="padding-top: 2pt;padding-left: 200pt;text-indent: 0pt;text-align: justify;">course id <span class="s86">→ </span>title<span class="p">, </span>dept name<span class="p">, </span>credits</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2098.png"/></span></p><p style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">may no longer hold. The following constraint (expressed in English) would hold in- stead: “A course <i>course id </i>has only one <i>title </i>and <i>dept name </i>value at any given time <i>t</i>.”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s118" style="text-indent: 0pt;text-align: left;">τ</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Functional dependencies that hold at a particular point in time are called temporal functional dependencies. We use the term <span class="s63">snapshot </span>of data to mean the value of the data at a particular point in time. Thus, a snapshot of <i>course </i>data gives the values of all attributes, such as title and department, of all courses at a particular point in time. Formally, a <span class="s63">temporal functional dependency </span><span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>holds on a relation schema <i>r</i>(<i>R</i>)</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">if, for all legal instances of <i>r</i>(<i>R</i>), all snapshots of <i>r </i>satisfy the functional dependency</p><p class="s15" style="padding-left: 119pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">α <span class="s86">→ </span>β<span class="p">.</span></p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The original primary key for a temporal relation would no longer uniquely identify</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">a tuple. We could try to ﬁx the problem by adding start and end time attributes to the primary key, ensuring no two tuples have the same primary key value. However, this solution is not correct, since it is possible to store data with overlapping valid time intervals, which would not be caught by merely adding the start and end time attributes to the primary-key constraint. Instead, the temporal version of the primary</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 84%;text-align: justify;">key constraint must ensure that if any two tuples have the same primary key values, their valid time intervals do not overlap. Formally, if <i>r</i><span class="s83">.</span><i>A </i>is a <span class="s63">temporal primary key </span>of</p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="p">relation </span>r<span class="p">, then whenever two tuples </span>t<span class="s130">1 </span><span class="s94">and </span>t<span class="s130">2 </span><span class="s94">in </span>r <span class="p">are such that </span>t<span class="s130">1</span><span class="s83">.</span>A <span class="s15">= </span>t<span class="s130">2</span><span class="s83">.</span>A<span class="p">, their valid</span></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="p">time intervals of </span>t<span class="s93">1 </span><span class="s94">and </span>t<span class="s93">2 </span><span class="s94">must not overlap.</span></p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Foreign-key constraints are also more complicated when the referenced relation</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">is a temporal relation. A temporal foreign key should ensure that not only does each tuple in the referencing relation, say <i>r</i>, have a matching tuple in the referenced relation, say <i>s</i>, but also their time intervals are accounted for. It is not required that there be a matching tuple in <i>s </i>with exactly the same time interval, nor even that a single tuple in <i>s </i>has a time interval containing the time interval of the <i>r </i>tuple. Instead, we allow the time interval of the <i>r </i>tuple to be covered by one or more <i>s </i>tuples. Formally, a <span class="s63">temporal</span></p><p class="s13" style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 72%;text-align: justify;"><span class="s63">foreign-key </span><span class="p">constraint from </span>r<span class="s83">.</span>A <span class="p">to </span>s<span class="s83">.</span>B <span class="p">ensures the following: for each tuple </span>t <span class="p">in </span>r<span class="p">, with valid time interval (</span>l<span class="p">, </span>u<span class="p">), there is a subset </span>s<span class="s145">t </span><span class="p">of one or more tuples in </span>s <span class="p">such that each tuple </span>s<span class="s97">i </span><span class="s15">∈ </span>s<span class="s97">t </span><span class="p">has </span>s<span class="s97">i</span><span class="s83">.</span>B <span class="s15">= </span>t<span class="s83">.</span>A<span class="p">, and further the union of the temporal intervals of all the </span>s<span class="s97">i </span><span class="p">contains (</span>l<span class="p">, </span>u<span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2099.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2100.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A record in a student’s transcript should refer to the course title at the time when the student took the course. Thus, the referencing relation must also record time in- formation, to identify a particular record from the <i>course </i>relation. In our university schema, <i>takes</i>.<i>course id </i>is a foreign key referencing <i>course</i>. The <i>year </i>and <i>semester </i>val- ues of a <i>takes </i>tuple could be mapped to a representative date, such as the start date of the semester; the resulting date value could be used to identify a tuple in the temporal version of the <i>course </i>relation whose valid time interval contains the speciﬁed date. Al- ternatively, a <i>takes </i>tuple may be associated with a valid time interval from the start date of the semester until the end date of the semester, and <i>course </i>tuples with a matching <i>course id </i>and an overlapping valid time may be retrieved; as long as <i>course </i>tuples are not updated during a semester, there would be only one such record.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Instead of adding temporal information to each relation, some database designers create for each relation a corresponding <i>history </i>relation that stores the history of up- dates to the tuples. For example, a designer may leave the <i>course </i>relation unchanged,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2101.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2102.png"/></span></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">but create a relation <i>course history </i>containing all the attributes of <i>course</i>, with an ad- ditional <i>timestamp </i>attribute indicating when a record was added to the <i>course history </i>table. However, such a scheme has limitations, such as an inability to associate a <i>takes </i>record with the correct course title.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL:2011 </span>standard added support for temporal data. In particular, it allows existing attributes to be declared to specify a valid time interval for a tuple. For example, for the extended <i>course </i>relation we saw above, we could declare</p><p class="s13" style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;text-align: justify;"><b>period for </b>validtime <span class="p">(</span>start, end<span class="p">)</span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">to specify that the tuple is valid in the interval speciﬁed by the <i>start </i>and <i>end </i>(which are otherwise ordinary attributes).</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Temporal primary keys can be declared in <span class="s44">SQL:2011</span>, as illustrated below, using the extended <i>course </i>schema:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2103.png"/></span></p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;text-align: justify;"><b>primary key </b>(<i>course id</i>, <i>validtime </i><b>without overlaps</b>)</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 17pt;text-align: right;"><span class="s42">SQL:2011 </span><span class="s43">also supports temporal foreign-key constraints that allow a </span><b>period </b>to be speciﬁed along with the referencing relation attributes, as well as with the referenced relation attributes. Most databases, with the exception of <span class="s44">IBM DB2</span>, Teradata, and pos- sibly a few others, do not support temporal primary-key constraints. To the best of our knowledge, no database system currently supports temporal foreign-key constraints (Teradata allows them to be speciﬁed, but at least as of 2018, does not enforce them). Some databases that do not directly support temporal primary-key constraints al-</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2104.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">low workarounds to enforce such constraints. For example, although <span class="s44">P</span>ostgre<span class="s44">SQL </span>does not support temporal primary-key constraints natively, such constraints can be en- forced using the <span class="s49">exclude </span>constraint feature supported by <span class="s44">P</span>ostgre<span class="s44">SQL</span>. For example, consider the <i>course </i>relation, whose primary key is <i>course id</i>. In <span class="s44">P</span>ostgre<span class="s44">SQL</span>, we can add an attribute <i>validtime</i>, of type <span class="s49">tsrange</span>; the <span class="s49">tsrange </span>data type of <span class="s44">P</span>ostgre<span class="s44">SQL </span>stores a timestamp range with a start and end timestamp. <span class="s44">P</span>ostgre<span class="s44">SQL </span>supports an &amp;&amp; oper- ator on a pair of ranges, which returns true if two ranges overlap and false otherwise. The temporal primary key can be enforced by adding the following <span class="s49">exclude </span>constraint (a type of constraint supported by <span class="s44">P</span>ostgre<span class="s44">SQL</span>) to the <i>course </i>relation as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2105.png"/></span></p><p class="s46" style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;text-align: justify;">exclude <span class="p">(</span><i>course id </i>with <span class="p">=, </span><i>validtime </i>with <span class="p">&amp;&amp;)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2106.png"/></span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The above constraint ensures that if two <i>course </i>tuples have the same <i>course id </i>value, then their <i>validtime </i>intervals do not overlap.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Relational algebra operations, such as select, project, or join, can be extended to take temporal relations as inputs and generate temporal relations as outputs. Selection and projection operations on temporal relations output tuples whose valid time inter- vals are the same as that of their corresponding input tuples. A <span class="s63">temporal join </span>is slightly diﬀerent: the valid time of a tuple in the join result is deﬁned as the intersection of the valid times of the tuples from which it is derived. If the valid times do not intersect, the tuple is discarded from the result. To the best of our knowledge, no database supports temporal joins natively, although they can be expressed by <span class="s44">SQL </span>queries that explicitly</p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;"><a name="bookmark144">7.11 </a><span style=" color: #00AEEF;">Summary  </span><span class="s164">351</span><a name="bookmark172">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">handle the temporal conditions. Predicates, such as <i>overlaps, contains, before, and after </i>and operations such as <i>intersection </i>and <i>diﬀerence </i>on pairs of intervals are supported by several database systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part160.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part162.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
