<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>31.3 Semaphores As Condition Variables</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part320.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part322.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">31.3 Semaphores As Condition Variables</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Semaphores are also useful when a thread wants to halt its progress waiting for a condition to become true. For example, a thread may wish to wait for a list to become non-empty, so it can delete an element from it. In this pattern of usage, we often find a thread <i>waiting </i>for something to happen, and a different thread making that something happen and then <i>signaling </i>that it has happened, thus waking the waiting thread. Because the waiting thread (or threads) is waiting for some <b>condition </b>in the pro- gram to change, we are using the semaphore as a <b>condition variable</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">sem_t s;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">2</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;">3  <span class="s38">void </span><span class="s39">*</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 85%;text-align: left;"><span class="s37">4  </span>child(void <span class="s39">*</span>arg) {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">5    <span class="s38">printf(&quot;child\n&quot;);</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6     <span class="s38">sem_post(&amp;s); // signal here: child is done</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7    <span class="s38">return NULL;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">8  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">9</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10  <span class="s38">int</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">11  </span>main(int argc, char <span class="s39">*</span>argv[]) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">12     <span class="s38">sem_init(&amp;s, 0, X); // what should X be?</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13    <span class="s38">printf(&quot;parent: begin\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">14    <span class="s38">pthread_t c;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15    <span class="s38">Pthread_create(c, NULL, child, NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">16     <span class="s38">sem_wait(&amp;s); // wait here for child</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">17    <span class="s38">printf(&quot;parent: end\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">18    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19  <span class="s38">}</span></p><p style="padding-top: 2pt;padding-left: 98pt;text-indent: 0pt;text-align: justify;">Figure 31.4: <b>A Parent Waiting For Its Child</b></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">A simple example is as follows. Imagine a thread creates another thread and then wants to wait for it to complete its execution (Figure <span style=" color: #00AEEF;">31.4</span>). When this program runs, we would like to see the following:</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">parent: begin child parent: end</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_437.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_438.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The question, then, is how to use a semaphore to achieve this effect, and is it turns out, it is relatively easy to understand. As you can see in the code, the parent simply calls <span class="s41">sem wait() </span>and the child <span class="s41">sem post() </span>to wait for the condition of the child finishing its execution to become true. However, this raises the question: what should the initial value of this semaphore be?</p><p class="s6" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(Again, think about it here, instead of reading ahead)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_439.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_440.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_441.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_442.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The answer, of course, is that the value of the semaphore should be set to is 0. There are two cases to consider. First, let us assume that the parent creates the child but the child has not run yet (i.e., it is sitting in a ready queue but not running). In this case (Table <span style=" color: #00AEEF;">31.3</span>), the parent will call <span class="s41">sem wait() </span>before the child has called <span class="s41">sem post()</span>; we’d like the parent to wait for the child to run. The only way this will happen is if the value of the semaphore is not greater than 0; hence, 0 is the initial value. The parent runs, decrements the semaphore (to -1), then waits (sleeping). When the child finally runs, it will call <span class="s41">sem post()</span>, increment the value of the semaphore to 0, and wake the parent, which will then return from <span class="s41">sem wait() </span>and finish the program.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_443.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_444.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_445.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_446.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">The second case (Table <span style=" color: #00AEEF;">31.4</span>) occurs when the child runs to comple- tion before the parent gets a chance to call <span class="s41">sem wait()</span>. In this case, the child will first call <span class="s41">sem post()</span>, thus incrementing the value of the semaphore from 0 to 1. When the parent then gets a chance to run, it will call <span class="s41">sem wait() </span>and find the value of the semaphore to be 1; the parent will thus decrement the value (to 0) and return from <span class="s41">sem wait() </span>without waiting, also achieving the desired effect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="379" height="128" alt="image" src="Image_447.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_448.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_449.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_450.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_451.png"/></span></p><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Value  Parent</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0  <span class="s38">create(Child)</span></p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0  call <span class="s38">sem wait()</span></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">-1  <span class="s38">decrement sem</span></p><p class="s38" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s12">-1  </span>(sem<span class="s149">&lt;</span>0)<span class="s148">→</span>sleep</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s12">-1  </span>Switch<span class="s148">→</span>Child</p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;line-height: 8pt;text-align: left;">-1</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p class="s12" style="padding-left: 7pt;text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">State</p><p class="s12" style="text-indent: 0pt;line-height: 92%;text-align: center;">Running Running Running Sleeping Sleeping Sleeping Sleeping Ready Ready Ready Ready</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Child</p><p class="s17" style="text-indent: 0pt;line-height: 8pt;text-align: left;">(Child exists; is runnable)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 7pt;text-align: left;">child runs</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: left;">call <span class="s38">sem post()</span></p><p class="s38" style="text-indent: 0pt;text-align: center;">increment sem wake(Parent) sem post() <span class="s12">returns</span></p><p class="s17" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Interrupt; Switch<span class="s148">→</span>Parent</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 7pt;text-align: left;">sem wait() <span class="s12">returns</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">State</p><p class="s12" style="text-indent: 0pt;line-height: 92%;text-align: center;">Ready Ready Ready Ready Running Running Running Running Running Ready Ready</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="376" height="128" alt="image" src="Image_452.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_453.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_454.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_455.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_456.png"/></span></p><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">Value</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Parent</p><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">create(Child)</p><p class="s17" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Interrupt; Switch<span class="s148">→</span>Child</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 7pt;text-align: left;">parent runs</p><p class="s38" style="text-indent: 0pt;line-height: 94%;text-align: left;"><span class="s12">call </span>sem wait() decrement sem (sem<span class="s148">≥</span>0)<span class="s148">→</span>awake sem wait() <span class="s12">returns</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">State   Child          State</p><p class="s12" style="padding-left: 3pt;text-indent: -3pt;line-height: 91%;text-align: left;">Running <i>(Child exists; is runnable)  </i>Ready Ready  <span class="s38">child runs    </span>Running</p><p class="s12" style="text-indent: 3pt;line-height: 91%;text-align: left;">Ready  call <span class="s38">sem post()  </span>Running Ready  <span class="s38">increment sem  </span>Running Ready  <span class="s38">wake(nobody)   </span>Running Ready <span class="s38">sem post() </span>returns  Running Running <i>Interrupt; Switch</i><span class="s148">→</span><i>Parent </i>Ready Running              Ready</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Running              Ready</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Running              Ready</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Running              Ready</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 5pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Table 31.3: <b>Thread Trace: Parent Waiting For Child (Case 1)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Table 31.4: <b>Thread Trace: Parent Waiting For Child (Case 2)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part320.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part322.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
