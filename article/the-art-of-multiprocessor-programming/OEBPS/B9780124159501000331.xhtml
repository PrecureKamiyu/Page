<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:mml="http://www.w3.org/1998/Math/MathML" lang="EN" xml:lang="en"><head><meta content="text/html; charset=utf-8" http-equiv="default-style"/><title>The Art of Multiprocessor Programming</title><link href="Elsevier_eBook.css" rel="stylesheet" type="text/css"/><link href="math.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:4f1c4a5b-a3e2-48ff-98f3-ff17812cd57a" name="Adept.expected.resource"/></head><body><section epub:type="bibliography" role="doc-bibliography"><div id="CN"/><div aria-label="Page 533" epub:type="pagebreak" id="page_533" role="doc-pagebreak"/><h1 class="chaptitle" id="ti0010">Bibliography</h1><section epub:type="bibliography" role="doc-bibliography"><div id="bl0010"><h2 class="reftitle" id="st0010">Bibliography</h2><p class="reflist" epub:type="biblioentry footnote" id="br0005" role="doc-biblioentry">[1] Sarita Adve, Kourosh Gharachorloo,  Shared memory consistency models: a tutorial,   <cite><i>Computer</i></cite> 1996;29(12):66–76.</p><p class="reflist" epub:type="biblioentry footnote" id="br0010" role="doc-biblioentry">[2] Yehuda Afek, Hagit Attiya, Danny Dolev, Eli Gafni, Michael Merritt, Nir Shavit,  Atomic snapshots of shared memory,   <cite><i>Journal of the ACM</i></cite> 1993;40(4):873–890.</p><p class="reflist" epub:type="biblioentry footnote" id="br0015" role="doc-biblioentry">[3] Yehuda Afek, Dalia Dauber, Dan Touitou,  Wait-free made fast,   <i>STOC '95: Proceedings of the Twenty-Seventh Annual ACM Symposium on Theory of Computing</i>.  New York, NY, USA: ACM Press; 1995:538–547.</p><p class="reflist" epub:type="biblioentry footnote" id="br0020" role="doc-biblioentry">[4] Yehuda Afek, Gideon Stupp, Dan Touitou,  Long-lived and adaptive atomic snapshot and immediate snapshot (extended abstract),   <i>Symposium on Principles of Distributed Computing</i>.  2000:71–80.</p><p class="reflist" epub:type="biblioentry footnote" id="br0025" role="doc-biblioentry">[5] Yehuda Afek, Eytan Weisberger, Hanan Weisman,  A completeness theorem for a class of synchronization objects,   <i>PODC '93: Proceedings of the Twelfth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1993:159–170.</p><p class="reflist" epub:type="biblioentry footnote" id="br0030" role="doc-biblioentry">[6] A. Agarwal, M. Cherian,  Adaptive backoff synchronization techniques,   <i>Proceedings of the 16th International Symposium on Computer Architecture</i>.  May 1989:396–406.</p><p class="reflist" epub:type="biblioentry footnote" id="br0035" role="doc-biblioentry">[7] Ole Agesen, David Detlefs, Alex Garthwaite, Ross Knippel, Y.S. Ramakrishna, Derek White,  An efficient meta-lock for implementing ubiquitous synchronization,   <cite><i>ACM SIGPLAN Notices</i></cite> 1999;34(10):207–222.</p><p class="reflist" epub:type="biblioentry footnote" id="br0040" role="doc-biblioentry">[8] M. Ajtai, J. Komlós, E. Szemerédi,  An <span class="hiddenClass"><mml:math><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mo>⁡</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math></span><span><img alt="Image" height="14" src="images/B9780124159501000331/si1.png" style="vertical-align:middle" width="68"/></span> sorting network,   <i>Proc. of the 15th Annual ACM Symposium on Theory of Computing</i>.  1983:1–9.</p><p class="reflist" epub:type="biblioentry footnote" id="br0045" role="doc-biblioentry">[9] G.M. Amdahl,  Validity of the single-processor approach to achieving large scale computing capabilities,   <i>AFIPS Conference Proceedings</i>.  <i>Atlantic City, NJ</i>.  Reston, VA: AFIPS Press; April 1967:483–485.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0050" role="doc-biblioentry">[10] James H. Anderson,  Composite registers,   <cite><i>Distributed Computing</i></cite> 1993;6(3):141–154.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0055" role="doc-biblioentry">[11] James H. Anderson, Mark Moir,  Universal constructions for multi-object operations,   <i>PODC '95: Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1995:184–193.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0060" role="doc-biblioentry">[12] Thomas E. Anderson,  The performance of spin lock alternatives for shared-memory multiprocessors,   <cite><i>IEEE Transactions on Parallel and Distributed Systems</i></cite> 1990;1(1):6–16.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0065" role="doc-biblioentry">[13] Nimar S. Arora, Robert D. Blumofe, C. Greg Plaxton,  Thread scheduling for multiprogrammed multiprocessors,   <i>Proceedings of the Tenth Annual ACM Symposium on Parallel Algorithms and Architectures</i>.  ACM Press; 1998:119–129.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0070" role="doc-biblioentry">[14] James Aspnes, Maurice Herlihy, Nir Shavit,  Counting networks,   <cite><i>Journal of the ACM</i></cite> 1994;41(5):1020–1048.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0075" role="doc-biblioentry">[15] David F. Bacon, Ravi B. Konuru, Chet Murthy, Mauricio J. Serrano,  Thin locks: featherweight synchronization for Java,   <i>SIGPLAN Conference on Programming Language Design and Implementation</i>.  1998:258–268.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0080" role="doc-biblioentry">[16] K. Batcher,  Sorting networks and their applications,   <i>Proceedings of AFIPS Joint Computer Conference</i>.  1968:307–314.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0085" role="doc-biblioentry">[17] R. Bayer, M. Schkolnick,  Concurrency of operations on B-trees,   <cite><i>Acta Informatica</i></cite> 1977;9:1–21.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0090" role="doc-biblioentry">[18] Robert D. Blumofe, Charles E. Leiserson,  Scheduling multithreaded computations by work stealing,   <cite><i>Journal of the ACM</i></cite> 1999;46(5):720–748.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0095" role="doc-biblioentry">[19] Hans-J. Boehm,  Threads cannot be implemented as a library,   <i>Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation</i>.  <i>PLDI '05</i>.  New York, NY, USA: ACM; 2005:261–268.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0100" role="doc-biblioentry">[20] Hans-J. Boehm,  Can seqlocks get along with programming language memory models?  <i>Proceedings of the 2012 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness</i>.  <i>Beijing, China</i>.  June 2012:12–20.<span aria-label="Page 534" epub:type="pagebreak" id="page_534" role="doc-pagebreak"/></p><p class="reflist1" epub:type="biblioentry footnote" id="br0105" role="doc-biblioentry">[21] Elizabeth Borowsky, Eli Gafni,  Immediate atomic snapshots and fast renaming,   <i>PODC '93: Proceedings of the Twelfth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1993:41–51.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0110" role="doc-biblioentry">[22] Anastasia Braginsky, Alex Kogan, Erez Petrank,  Drop the anchor: lightweight memory management for non-blocking data structures,   <i>Proceedings of the 25th ACM Symposium on Parallelism in Algorithms and Architectures</i>.  <i>Montreal, Quebec, Canada</i>.  July 2013.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0115" role="doc-biblioentry">[23] Trevor Brown,  Reclaiming memory for lock-free data structures: there has to be a better way,   <i>Proceedings of the 34th ACM Symposium on Principles of Distributed Computing</i>.  <i>Portland, OR</i>.  June 2015.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0120" role="doc-biblioentry">[24] James E. Burns, Nancy A. Lynch,  Bounds on shared memory for mutual exclusion,   <cite><i>Information and Computation</i></cite> December 1993;107(2):171–184.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0125" role="doc-biblioentry">[25] James E. Burns, Gary L. Peterson,  Constructing multi-reader atomic values from non-atomic values,   <i>PODC '87: Proceedings of the Sixth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1987:222–231.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0130" role="doc-biblioentry">[26] Costas Busch, Marios Mavronicolas,  A combinatorial treatment of balancing networks,   <cite><i>Journal of the ACM</i></cite> 1996;43(5):794–839.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0135" role="doc-biblioentry">[27] Tushar Deepak Chandra, Prasad Jayanti, King Tan,  A polylog time wait-free construction for closed objects,   <i>PODC '98: Proceedings of the Seventeenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1998:287–296.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0140" role="doc-biblioentry">[28] Graham Chapman, John Cleese, Terry Gilliam, Eric Idle, Terry Jones, Michael Palin,  <i>Monty Phyton and the Holy Grail</i>.  1975.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0145" role="doc-biblioentry">[29] David Chase, Yossi Lev,  Dynamic circular work-stealing deque,   <i>SPAA '05: Proceedings of the Seventeenth Annual ACM Symposium on Parallelism in Algorithms and Architectures</i>.  New York, NY, USA: ACM Press; 2005:21–28.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0150" role="doc-biblioentry">[30] Alonzo Church,  A note on the entscheidungsproblem,   <cite><i>The Journal of Symbolic Logic</i></cite> 1936.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0155" role="doc-biblioentry">[31] Nachshon Cohen, Erez Petrank,  Efficient memory management for lock-free data structures with optimistic access,   <i>Proceedings of the 27th ACM Symposium on Parallelism in Algorithms and Architectures</i>.  <i>Portland, OR</i>.  June 2015.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0160" role="doc-biblioentry">[32] T. Craig,  <i>Building FIFO and priority-queueing spin locks from atomic swap</i>. [Technical Report TR 93-02-02] University of Washington, Department of Computer Science; February 1993.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0165" role="doc-biblioentry">[33] Luke Dalessandro, Michael Spear, Michael L. Scott,  NOrec: streamlining STM by abolishing ownership records,   <i>Proceedings of the 15th ACM Symposium on Principles and Practice of Parallel Programming</i>.  <i>Bangalore, India</i>.  January 2010.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0170" role="doc-biblioentry">[34] Jeffrey Dean, Sanjay Ghemawat,  MapReduce: simplified data processing on large clusters,   <i>Proceedings of the 6th Conference on Symposium on Operating Systems Design &amp; Implementation - Volume 6</i>.  <i>OSDI'04</i>.  Berkeley, CA, USA: USENIX Association; 2004:10.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0175" role="doc-biblioentry">[35] Dave Dice, Ori Shalev, Nir Shavit,  Transactional locking II,   <i>Proceedings of the 20th International Symposium on Distributed Computing</i>.  <i>Stockholm, Sweden</i>.  September 2006.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0180" role="doc-biblioentry">[36] David Dice,  Implementing fast Java monitors with relaxed-locks,   <i>Java Virtual Machine Research and Technology Symposium</i>.  2001:79–90.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0185" role="doc-biblioentry">[37] David Dice, Virendra J. Marathe, Nir Shavit,  Lock cohorting: a general technique for designing NUMA locks,   <cite><i>ACM Transactions on Parallel Computing</i></cite> 2015;1(2), 13.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0190" role="doc-biblioentry">[38] E.W. Dijkstra,  The structure of the THE multiprogramming system,   <cite><i>Communications of the ACM</i></cite> 1968;11(5):341–346.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0195" role="doc-biblioentry">[39] Danny Dolev, Nir Shavit,  Bounded concurrent time-stamping,   <cite><i>SIAM Journal on Computing</i></cite> 1997;26(2):418–455.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0200" role="doc-biblioentry">[40] Martin Dowd, Yehoshua Perl, Larry Rudolph, Michael Saks,  The periodic balanced sorting network,   <cite><i>Journal of the ACM</i></cite> 1989;36(4):738–757.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0205" role="doc-biblioentry">[41] Arthur Conan Doyle,  <i>A Study in Scarlet and the Sign of Four</i>.  Berkley Publishing Group; 1994 0425102408.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0210" role="doc-biblioentry">[42] Cynthia Dwork, Orli Waarts,  Simple and efficient bounded concurrent timestamping and the traceable use abstraction,   <cite><i>Journal of the ACM</i></cite> 1999;46(5):633–666.<span aria-label="Page 535" epub:type="pagebreak" id="page_535" role="doc-pagebreak"/></p><p class="reflist1" epub:type="biblioentry footnote" id="br0215" role="doc-biblioentry">[43] C. Ellis,  Concurrency in linear hashing,   <cite><i>ACM Transactions on Database Systems</i></cite> 1987;12(2):195–217.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0220" role="doc-biblioentry">[44]  Facebook,  Folly: Facebook Open-source Library,   <a href="https://github.com/facebook/folly/">https://github.com/facebook/folly/</a>; 2017.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0225" role="doc-biblioentry">[45] F.E. Fich, D. Hendler, N. Shavit,  Linear lower bounds on real-world implementations of concurrent objects,   <i>Proc. of the 46th Annual Symposium on Foundations of Computer Science</i>.  <i>FOCS 2005</i>.  2005:165–173.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0230" role="doc-biblioentry">[46] Michael J. Fischer, Nancy A. Lynch, Michael S. Paterson,  Impossibility of distributed consensus with one faulty process,   <cite><i>Journal of the ACM</i></cite> 1985;32(2):374–382.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0235" role="doc-biblioentry">[47] C. Flood, D. Detlefs, N. Shavit, C. Zhang,  Parallel garbage collection for shared memory multiprocessors,   <i>Proc. of the Java TM Virtual Machine Research and Technology Symposium</i>.  2001.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0240" role="doc-biblioentry">[48] K. Fraser,  <i>Practical Lock-Freedom</i>. [Ph.D. dissertation] Cambridge, England: Kings College, University of Cambridge; September 2003.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0245" role="doc-biblioentry">[49] B. Gamsa, O. Kreiger, E.W. Parsons, M. Stumm,  <i>Performance issues for multiprocessor operating systems</i>. [Technical report] Computer Systems Research Institute, University of Toronto; 1995.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0250" role="doc-biblioentry">[50] H. Gao, J.F. Groote, W.H. Hesselink,  Lock-free dynamic hash tables with open addressing,   <cite><i>Distributed Computing</i></cite> 2005;18(1):21–42.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0255" role="doc-biblioentry">[51] James R. Goodman, Mary K. Vernon, Philip J. Woest,  Efficient synchronization primitives for large-scale cache-coherent multiprocessors,   <i>Proceedings of the Third International Conference on Architectural Support for Programming Languages and Operating Systems</i>.  ACM Press; 1989:64–75.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0260" role="doc-biblioentry">[52] James Gosling, Bill Joy, Guy Steele, Gilad Bracha,  <i>The Java Language Specification</i>. third edition Prentice Hall PTR; 2005 0321246780.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0265" role="doc-biblioentry">[53] A. Gottlieb, R. Grishman, C.P. Kruskal, K.P. McAuliffe, L. Rudolph, M. Snir,  The NYU ultracomputer - designing an MIMD parallel computer,   <cite><i>IEEE Transactions on Computers</i></cite> February 1984;C-32(2):175–189.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0270" role="doc-biblioentry">[54] M. Greenwald,  Two-handed emulation: how to build non-blocking implementations of complex data structures using DCAS,   <i>Proceedings of the 21st Annual Symposium on Principles of Distributed Computing</i>.  ACM Press; 2002:260–269.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0275" role="doc-biblioentry">[55] S. Haldar, K. Vidyasankar,  Constructing 1-writer multireader multivalued atomic variables from regular variables,   <cite><i>Journal of the ACM</i></cite> 1995;42(1):186–203.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0280" role="doc-biblioentry">[56] Sibsankar Haldar, Paul Vitányi,  Bounded concurrent timestamp systems using vector clocks,   <cite><i>Journal of the ACM</i></cite> 2002;49(1):101–126.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0285" role="doc-biblioentry">[57] Per Brinch Hansen,  Structured multi-programming,   <cite><i>Communications of the ACM</i></cite> 1972;15(7):574–578.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0290" role="doc-biblioentry">[58] Tim Harris,  A pragmatic implementation of non-blocking linked-lists,   <i>Proceedings of 15th International Symposium on Distributed Computing</i>.  <i>DISC 2001, Lisbon, Portugal</i>.   <cite><i>Lecture Notes in Computer Science</i></cite>.  Springer Verlag; October 2001;vol. 2180:300–314.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0295" role="doc-biblioentry">[59] Tim Harris, James R. Larus, Ravi Rajwar,  <i>Transactional Memory</i>. 2nd edition  <cite>Synthesis Lectures on Computer Architecture</cite>.  Morgan and Claypool; 2010.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0300" role="doc-biblioentry">[60] S. Heller, M. Herlihy, V. Luchangco, M. Moir, W.N. Scherer III, N. Shavit,  A lazy concurrent list-based set algorithm,   <i>Proc. of the Ninth International Conference on Principles of Distributed Systems</i>.  <i>OPODIS 2005</i>.  2005:3–16.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0305" role="doc-biblioentry">[61] Danny Hendler, Nir Shavit,  Non-blocking steal-half work queues,   <i>Proceedings of the Twenty-First Annual Symposium on Principles of Distributed Computing</i>.  ACM Press; 2002:280–289.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0310" role="doc-biblioentry">[62] Danny Hendler, Nir Shavit, Lena Yerushalmi,  A scalable lock-free stack algorithm,   <i>SPAA '04: Proceedings of the Sixteenth Annual ACM Symposium on Parallelism in Algorithms and Architectures</i>.  New York, NY, USA: ACM Press; 2004:206–215.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0315" role="doc-biblioentry">[63] J.L. Hennessy, D.A. Patterson,  <i>Computer Architecture: A Quantitative Approach</i>.  Morgan Kaufmann Publishers; 1995.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0320" role="doc-biblioentry">[64] D. Hensgen, R. Finkel, U. Manber,  Two algorithms for barrier synchronization,   <cite><i>International Journal of Parallel Programming</i></cite>0885-7458 1988;17(1):1–17.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0325" role="doc-biblioentry">[65] M. Herlihy,  A methodology for implementing highly concurrent data objects,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> November 1993;15(5):745–770.<span aria-label="Page 536" epub:type="pagebreak" id="page_536" role="doc-pagebreak"/></p><p class="reflist1" epub:type="biblioentry footnote" id="br0330" role="doc-biblioentry">[66] M. Herlihy, Y. Lev, V. Luchangco, N. Shavit,  A provably correct scalable skiplist (brief announcement),   <i>Proc. of the 10th International Conference on Principles of Distributed Systems</i>.  <i>OPODIS 2006</i>.  2006.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0335" role="doc-biblioentry">[67] M. Herlihy, V. Luchangco, M. Moir,  The repeat offender problem: a mechanism for supporting lock-free dynamic-sized data structures,   <i>Proceedings of the 16th International Symposium on DIStributed Computing, vol. 2508</i>.  Springer-Verlag Heidelberg; January 2002:339–353.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0340" role="doc-biblioentry">[68] M. Herlihy, V. Luchangco, M. Moir,  Obstruction-free synchronization: double-ended queues as an example,   <i>Proceedings of the 23rd International Conference on Distributed Computing Systems</i>.  IEEE; 2003:522–529.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0345" role="doc-biblioentry">[69] Maurice Herlihy,  Wait-free synchronization,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1991;13(1):124–149.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0350" role="doc-biblioentry">[70] Maurice Herlihy, Yossi Lev, Nir Shavit,  <i>A lock-free concurrent skiplist with wait-free search</i>. 2007.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0355" role="doc-biblioentry">[71] Maurice Herlihy, Beng-Hong Lim, Nir Shavit,  Scalable concurrent counting,   <cite><i>ACM Transactions on Computer Systems</i></cite> 1995;13(4):343–364.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0360" role="doc-biblioentry">[72] Maurice Herlihy, Nir Shavit,  On the nature of progress,   <i>Proceedings of the 15th International Conference on Principles of Distributed Systems</i>.  <i>OPODIS'11</i>.  Berlin, Heidelberg: Springer-Verlag; 2011:313–328.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0365" role="doc-biblioentry">[73] Maurice Herlihy, Nir Shavit, Moran Tzafrir,  <i>Concurrent cuckoo hashing</i>. [Technical report] Brown University; 2007.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0370" role="doc-biblioentry">[74] Maurice P. Herlihy, J. Eliot B. Moss,  Transactional memory: architectural support for lock-free data structures,   <i>Proceedings of the 20th International Symposium on Computer Architecture</i>.  <i>San Diego, CA</i>.  May 1993.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0375" role="doc-biblioentry">[75] Maurice P. Herlihy, Jeannette M. Wing,  Linearizability: a correctness condition for concurrent objects,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1990;12(3):463–492.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0380" role="doc-biblioentry">[76] C.A.R. Hoare,  “Algorithm 63: partition,” “Algorithm 64: quicksort,” and “Algorithm 65: find”,   <cite><i>Communications of the ACM</i></cite> 1961;4(7):321–322.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0385" role="doc-biblioentry">[77] C.A.R. Hoare,  Monitors: an operating system structuring concept,   <cite><i>Communications of the ACM</i></cite> 1974;17(10):549–557.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0390" role="doc-biblioentry">[78] Richard Horsey,  <i>The Art of Chicken Sexing</i>.  Cogprints; 2002.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0395" role="doc-biblioentry">[79] M. Hsu, W.P. Yang,  Concurrent operations in extendible hashing,   <i>Symposium on Very Large Data Bases</i>.  1986:241–247.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0400" role="doc-biblioentry">[80] J.S. Huang, Y.C. Chow,  Parallel sorting and data partitioning by sampling,   <i>Proceedings of the IEEE Computer Society's Seventh International Computer Software and Applications Conference</i>.  1983:627–631.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0405" role="doc-biblioentry">[81] Richard L. Hudson, Bratin Saha, Ali-Reza Adl-Tabatabai, Benjamin Hertzberg,  A scalable transactional memory allocator,   <i>Proceedings of the International Symposium on Memory Management</i>.  <i>Ottawa, ON, Canada</i>.  June 2006.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0410" role="doc-biblioentry">[82] Galen C. Hunt, Maged M. Michael, Srinivasan Parthasarathy, Michael L. Scott,  An efficient algorithm for concurrent priority queue heaps,   <cite><i>Information Processing Letters</i></cite> 1996;60(3):151–157.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0415" role="doc-biblioentry">[83]  Intel Corporation,  <i>Pentium Processor User's Manual</i>.  Intel Books; 1993.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0420" role="doc-biblioentry">[84] A. Israeli, L. Rappaport,  Disjoint-access-parallel implementations of strong shared memory primitives,   <i>Proceedings of the 13th Annual ACM Symposium on Principles of Distributed Computing</i>.  <i>Los Angeles, CA, August 14–17</i>.  1994:151–160.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0425" role="doc-biblioentry">[85] Amos Israeli, Ming Li,  Bounded time stamps,   <cite><i>Distributed Computing</i></cite> 1993;6(5):205–209.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0430" role="doc-biblioentry">[86] Amos Israeli, Amnon Shaham,  Optimal multi-writer multi-reader atomic register,   <i>Symposium on Principles of Distributed Computing</i>.  1992:71–82.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0435" role="doc-biblioentry">[87] Mohammed Gouda, James Anderson, Ambuj Singh,  <i>The elusive atomic register</i>. [Technical Report TR 86.29] University of Texas at Austin; 1986.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0440" role="doc-biblioentry">[88] Prasad Jayanti,  Robust wait-free hierarchies,   <cite><i>Journal of the ACM</i></cite> 1997;44(4):592–614.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0445" role="doc-biblioentry">[89] Prasad Jayanti,  A lower bound on the local time complexity of universal constructions,   <i>PODC '98: Proceedings of the Seventeenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1998:183–192.<span aria-label="Page 537" epub:type="pagebreak" id="page_537" role="doc-pagebreak"/></p><p class="reflist1" epub:type="biblioentry footnote" id="br0450" role="doc-biblioentry">[90] Prasad Jayanti, Sam Toueg,  Some results on the impossibility, universality, and decidability of consensus,   <i>WDAG '92: Proceedings of the 6th International Workshop on Distributed Algorithms</i>.  London, UK: Springer-Verlag; 1992:69–84.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0455" role="doc-biblioentry">[91] D. Jimenez-Gonzalez, J.J. Navarro, J.-L. Lirriba-Pey,  Cc-radix: a cache conscious sorting based on radix sort,   <i>Proc. of the 11th Euromicro Conference on Parallel, Distributed and Network-Based Processing</i>.  2003:101–108.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0460" role="doc-biblioentry">[92] Lefteris M. Kirousis, Evangelos Kranakis, Paul M.B. Vitányi,  Atomic multireader register,   <i>Proceedings of the 2nd International Workshop on Distributed Algorithms</i>.  London, UK: Springer-Verlag; 1988:278–296.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0465" role="doc-biblioentry">[93] M.R. Klugerman,  <i>Small-depth counting networks and related topics</i>. [Technical Report MIT/LCS/TR-643] MIT Laboratory for Computer Science; 1994.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0470" role="doc-biblioentry">[94] Michael Klugerman, C. Greg Plaxton,  Small-depth counting networks,   <i>STOC '92: Proceedings of the Twenty-Fourth Annual ACM Symposium on Theory of Computing</i>.  New York, NY, USA: ACM Press; 1992:417–428.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0475" role="doc-biblioentry">[95] D. Knuth,  <i>The Art of Computer Programming: Fundamental Algorithms, vol. 3</i>.  Addison-Wesley; 1973.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0480" role="doc-biblioentry">[96] Clyde P. Kruskal, Larry Rudolph, Marc Snir,  Efficient synchronization of multiprocessors with shared memory,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1988;10(4):579–601.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0485" role="doc-biblioentry">[97] V. Kumar,  Concurrent operations on extendible hashing and its performance,   <cite><i>Communications of the ACM</i></cite> 1990;33(6):681–694.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0490" role="doc-biblioentry">[98] Christoph Lameter,  Effective synchronization on Linux/NUMA systems,   <i>Proceedings of the May 2005 Gelato Federation Meeting</i>.  <i>San Jose, CA</i>.  May 2005.</p><p class="reflist1" epub:type="biblioentry footnote" id="br0495" role="doc-biblioentry">[99] L. Lamport,  On interprocess communication,   <cite><i>Distributed Computing</i></cite> 1986;1:77–101.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0500" role="doc-biblioentry">[100] Leslie Lamport,  A new solution of Dijkstra's concurrent programming problem,   <cite><i>Communications of the ACM</i></cite> 1974;17(5):543–545.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0505" role="doc-biblioentry">[101] Leslie Lamport,  Time, clocks, and the ordering of events,   <cite><i>Communications of the ACM</i></cite> July 1978;21(7):558–565.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0510" role="doc-biblioentry">[102] Leslie Lamport,  How to make a multiprocessor computer that correctly executes multiprocess programs,   <cite><i>IEEE Transactions on Computers</i></cite> September 1979;C-28(9):690.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0515" role="doc-biblioentry">[103] Leslie Lamport,  Specifying concurrent program modules,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1983;5(2):190–222.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0520" role="doc-biblioentry">[104] Leslie Lamport,  Invited address: solved problems, unsolved problems and non-problems in concurrency,   <i>Proceedings of the Third Annual ACM Symposium on Principles of Distributed Computing</i>.  1984:1–11.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0525" role="doc-biblioentry">[105] Leslie Lamport,  On interprocess communication (part II),   <cite><i>Distributed Computing</i></cite> January 1986;1(1):203–213.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0530" role="doc-biblioentry">[106] Leslie Lamport,  A fast mutual exclusion algorithm,   <cite><i>ACM Transactions on Computer Systems</i></cite> January 1987;5(1):1–11.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0535" role="doc-biblioentry">[107] B. Lampson, D. Redell,  Experience with processes and monitors in Mesa,   <cite><i>Communications of the ACM</i></cite> 1980;2(23):105–117.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0540" role="doc-biblioentry">[108] Doug Lea,   <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentHashMap.html">http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentHashMap.html</a>; 2007.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0545" role="doc-biblioentry">[109] Doug Lea,   <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html">http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html</a>; 2007.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0550" role="doc-biblioentry">[110] Doug Lea,  Java community process, JSR 166, concurrency utilities,   <a href="http://www.jcp.org/en/jsr/detail?id=166">http://www.jcp.org/en/jsr/detail?id=166</a>; 2003.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0555" role="doc-biblioentry">[111] Shin-Jae Lee, Minsoo Jeon, Dongseung Kim, Andrew Sohn,  Partitioned parallel radix sort,   <cite><i>Journal of Parallel and Distributed Computing</i></cite> 2002;62(4):656–668.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0560" role="doc-biblioentry">[112] C. Leiserson, H. Prokop,  A minicourse on multithreaded programming,   <a href="http://supertech.csail.mit.edu/papers/minicourse.pdf">http://supertech.csail.mit.edu/papers/minicourse.pdf</a>; 1998.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0565" role="doc-biblioentry">[113] Li Ming, John Tromp, Paul M.B. Vitányi,  How to share concurrent wait-free variables,   <cite><i>Journal of the ACM</i></cite> 1996;43(4):723–746.<span aria-label="Page 538" epub:type="pagebreak" id="page_538" role="doc-pagebreak"/></p><p class="reflist2" epub:type="biblioentry footnote" id="br0570" role="doc-biblioentry">[114] Wai-Kau Lo, Vassos Hadzilacos,  All of us are smarter than any of us: wait-free hierarchies are not robust,   <i>STOC '97: Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing</i>.  New York, NY, USA: ACM Press; 1997:579–588.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0575" role="doc-biblioentry">[115] I. Lotan, N. Shavit,  Skiplist-based concurrent priority queues,   <i>Proc. of the 14th International Parallel and Distributed Processing Symposium</i>.  <i>IPDPS</i>.  2000:263–268.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0580" role="doc-biblioentry">[116] M. Loui, H. Abu-Amara,  Memory requirements for agreement among unreliable asynchronous processes,   F.P. Preparata, ed.  <i>Advances in Computing Research, vol. 4</i>.  Greenwich, CT: JAI Press; 1987:163–183.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0585" role="doc-biblioentry">[117] Victor Luchangco, Daniel Nussbaum, Nir Shavit,  A hierarchical CLH queue lock,   <i>Euro-Par</i>.  2006:801–810.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0590" role="doc-biblioentry">[118] P. Magnussen, A. Landin, E. Hagersten,  Queue locks on cache coherent multiprocessors,   <i>Proceedings of the 8th International Symposium on Parallel Processing</i>.  <i>IPPS</i>.  IEEE Computer Society; April 1994:165–171.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0595" role="doc-biblioentry">[119] Jeremy Manson, William Pugh, Sarita V. Adve,  The Java memory model,   <i>Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</i>.  <i>POPL '05</i>.  New York, NY, USA: ACM; 2005:378–391.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0600" role="doc-biblioentry">[120] Yandong Mao, Robert Morris, Frans Kaashoek,  <i>Optimizing MapReduce for multicore architectures</i>. [Technical Report MIT-CSAIL-TR-2010-020] MIT-CSAIL; 2010.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0605" role="doc-biblioentry">[121] Virendra J. Marathe, Mark Moir, Nir Shavit,  Composite abortable locks,   <i>Proceedings of the 20th International Conference on Parallel and Distributed Processing</i>.  <i>IPDPS'06</i>.  Washington, DC, USA: IEEE Computer Society; 2006:132.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0610" role="doc-biblioentry">[122] Paul E. McKenney,  Selecting locking primitives for parallel programming,   <cite><i>Communications of the ACM</i></cite> 1996;39(10):75–82.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0615" role="doc-biblioentry">[123] Paul E. McKenney,  <i>Exploiting Deferred Destruction: an Analysis of Read-Copy-Update Techniques in Operating System Kernels</i>. [PhD thesis] OGI School of Science and Engineering at Oregon Health and Sciences University; 2004.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0620" role="doc-biblioentry">[124] John Mellor-Crummey, Michael Scott,  Algorithms for scalable synchronization on shared-memory multiprocessors,   <cite><i>ACM Transactions on Computer Systems</i></cite> 1991;9(1):21–65.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0625" role="doc-biblioentry">[125] M.M. Michael, M.L. Scott,  Simple, fast and practical non-blocking and blocking concurrent queue algorithms,   <i>Proc. of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  ACM Press; 1996:267–275.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0630" role="doc-biblioentry">[126] Maged M. Michael,  High performance dynamic lock-free hash tables and list-based sets,   <i>Proceedings of the Fourteenth Annual ACM Symposium on Parallel Algorithms and Architectures</i>.  ACM Press; 2002:73–82.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0635" role="doc-biblioentry">[127] Maged M. Michael,  Hazard pointers: safe memory reclamation for lock-free objects,   <cite><i>IEEE Transactions on Parallel and Distributed Systems</i></cite> June 2004;15(6):491–504.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0640" role="doc-biblioentry">[128] Jaydev Misra,  Axioms for memory access in asynchronous hardware systems,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1986;8(1):142–153.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0645" role="doc-biblioentry">[129] Mark Moir,  Practical implementations of non-blocking synchronization primitives,   <i>PODC '97: Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1997:219–228.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0650" role="doc-biblioentry">[130] Mark Moir,  Laziness pays! Using lazy synchronization mechanisms to improve non-blocking constructions,   <i>PODC '00: Proceedings of the Nineteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 2000:61–70.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0655" role="doc-biblioentry">[131] Mark Moir, Daniel Nussbaum, Ori Shalev, Nir Shavit,  Using elimination to implement scalable and lock-free fifo queues,   <i>SPAA '05: Proceedings of the Seventeenth Annual ACM Symposium on Parallelism in Algorithms and Architectures</i>.  New York, NY, USA: ACM Press; 2005:253–262.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0660" role="doc-biblioentry">[132] James H. Morris,  <i>Real programming in functional languages</i>. [Technical Report 81-11] Xerox Palo Alto Research Center; 1981.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0665" role="doc-biblioentry">[133] Takuya Nakaike, Rei Odaira, Matthew Gaudet, Maged M. Michael, Hisanobu Tomari,  Quantitative comparison of hardware transactional memory for Blue Gene/Q, zEnterprise EC12, Intel Core, and POWER8,   <i>Proceedings of the 42nd Annual International Symposium on Computer Architecture</i>.  <i>Portland, OR</i>.  June 2015.<span aria-label="Page 539" epub:type="pagebreak" id="page_539" role="doc-pagebreak"/></p><p class="reflist2" epub:type="biblioentry footnote" id="br0670" role="doc-biblioentry">[134] Richard Newman-Wolfe,  A protocol for wait-free, atomic, multi-reader shared variables,   <i>PODC '87: Proceedings of the Sixth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1987:232–248.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0675" role="doc-biblioentry">[135] Isaac Newton, I. Bernard Cohen (Translator), Anne Whitman (Translator),  <i>The Principia: Mathematical Principles of Natural Philosophy</i>.  University of California Press; 1999.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0680" role="doc-biblioentry">[136] R. Pagh, F.F. Rodler,  Cuckoo hashing,   <cite><i>Journal of Algorithms</i></cite> 2004;51(2):122–144.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0685" role="doc-biblioentry">[137] Christos H. Papadimitriou,  The serializability of concurrent database updates,   <cite><i>Journal of the ACM</i></cite> 1979;26(4):631–653.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0690" role="doc-biblioentry">[138] Gary Peterson,  Myths about the mutual exclusion problem,   <cite><i>Information Processing Letters</i></cite> June 1981;12(3):115–116.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0695" role="doc-biblioentry">[139] Gary L. Peterson,  Concurrent reading while writing,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1983;5(1):46–55.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0700" role="doc-biblioentry">[140] S.A. Plotkin,  Sticky bits and universality of consensus,   <i>PODC '89: Proceedings of the Eighth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1989:159–175.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0705" role="doc-biblioentry">[141] W. Pugh,  <i>Concurrent maintenance of skip lists</i>. [Technical Report CS-TR-2222.1] Institute for Advanced Computer Studies, Department of Computer Science, University of Maryland; 1989.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0710" role="doc-biblioentry">[142] W. Pugh,  Skip lists: a probabilistic alternative to balanced trees,   <cite><i>ACM Transactions on Database Systems</i></cite> 1990;33(6):668–676.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0715" role="doc-biblioentry">[143] C. Purcell, T. Harris,  Non-blocking hashtables with open addressing,   <i>Proceedings of International Symposium on Distributed Computing</i>.  2005:108–121.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0720" role="doc-biblioentry">[144] Zoran Radović, Erik Hagersten,  Hierarchical backoff locks for nonuniform communication architectures,   <i>Ninth International Symposium on High Performance Computer Architecture</i>.  <i>Anaheim, California, USA</i>.  February 2003:241–252.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0725" role="doc-biblioentry">[145] Ravi Rajwar, James R. Goodman,  Speculative lock elision: enabling highly concurrent multithreaded execution,   <i>Proceedings of the 34th IEEE/ACM International Symposium on Microarchitecture</i>.  <i>Austin, TX</i>.  December 2001.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0730" role="doc-biblioentry">[146] Ravi Rajwar, James R. Goodman,  Transactional lock-free execution of lock-based programs,   <i>Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems</i>.  <i>ASPLOS-X</i>.  ACM Press; 2002:5–17.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0735" role="doc-biblioentry">[147] M. Raynal,  <i>Algorithms for Mutual Exclusion</i>.  Cambridge, MA: The MIT Press; 1986.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0740" role="doc-biblioentry">[148] John H. Reif, Leslie G. Valiant,  A logarithmic time sort for linear size networks,   <cite><i>Journal of the ACM</i></cite> 1987;34(1):60–76.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0745" role="doc-biblioentry">[149] Amitabha Roy, Steven Hand, Tim Harris,  A runtime system for software lock elision,   <i>Proceedings of the EuroSys2009 Conference</i>.  <i>Nuremberg, Germany</i>.  March 2009.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0750" role="doc-biblioentry">[150] L. Rudolph, Z. Segall,  Dynamic decentralized cache schemes for MIMD parallel processors,   <i>Proceedings of the 11th Annual International Symposium on Computer Architecture</i>.  ACM Press; 1984:340–347.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0755" role="doc-biblioentry">[151] L. Rudolph, M. Slivkin-Allalouf, E. Upfal,  A simple load balancing scheme for task allocation in parallel machines,   <i>Proceedings of the 3rd Annual ACM Symposium on Parallel Algorithms and Architectures</i>.  ACM Press; July 1991:237–245.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0760" role="doc-biblioentry">[152] Michael Saks, Nir Shavit, Heather Woll,  Optimal time randomized consensus — making resilient algorithms fast in practice,   <i>SODA '91: Proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms</i>.  Philadelphia, PA, USA: Society for Industrial and Applied Mathematics; 1991:351–362.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0765" role="doc-biblioentry">[153] Michael L. Scott,  Non-blocking timeout in scalable queue-based spin locks,   <i>PODC '02: Proceedings of the Twenty-First Annual Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 2002:31–40.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0770" role="doc-biblioentry">[154] Michael L. Scott, William N. Scherer,  Scalable queue-based spin locks with timeout,   <cite><i>ACM SIGPLAN Notices</i></cite> 2001;36(7):44–52.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0775" role="doc-biblioentry">[155] Maurice Sendak,  <i>Where the Wild Things Are</i>.  HarperCollins; 1988 0060254920.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0780" role="doc-biblioentry">[156] O. Shalev, N. Shavit,  Split-ordered lists: lock-free extensible hash tables,   <cite><i>Journal of the ACM</i></cite> 2006;53(3):379–405.<span aria-label="Page 540" epub:type="pagebreak" id="page_540" role="doc-pagebreak"/></p><p class="reflist2" epub:type="biblioentry footnote" id="br0785" role="doc-biblioentry">[157] N. Shavit, D. Touitou,  Software transactional memory,   <cite><i>Distributed Computing</i></cite> February 1997;10(2):99–116.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0790" role="doc-biblioentry">[158] Nir Shavit, Asaph Zemach,  Diffracting trees,   <cite><i>ACM Transactions on Computer Systems</i></cite> 1996;14(4):385–428.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0795" role="doc-biblioentry">[159] Eric Shenk,  The consensus hierarchy is not robust,   <i>PODC '97: Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  New York, NY, USA: ACM Press; 1997:279.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0800" role="doc-biblioentry">[160] Ambuj K. Singh, James H. Anderson, Mohamed G. Gouda,  The elusive atomic register,   <cite><i>Journal of the ACM</i></cite> 1994;41(2):311–339.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0805" role="doc-biblioentry">[161] Justin Talbot, Richard M. Yoo, Christos Kozyrakis,  Phoenix++: modular MapReduce for shared-memory systems,   <i>Proceedings of the Second International Workshop on MapReduce and Its Applications</i>.  <i>MapReduce '11</i>.  New York, NY, USA: ACM; 2011:9–16.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0810" role="doc-biblioentry">[162] R.K. Treiber,  <i>Systems programming: coping with parallelism</i>. [Technical Report RJ 5118] IBM Almaden Research Center; April 1986.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0815" role="doc-biblioentry">[163] Alan Turing,  On computable numbers, with an application to the entscheidungsproblem,   <cite><i>Proceedings of the London Mathematical Society</i></cite> 1937.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0820" role="doc-biblioentry">[164] John D. Valois,  Lock-free linked lists using compare-and-swap,   <i>Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing</i>.  ACM Press; 1995:214–222.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0825" role="doc-biblioentry">[165] Paul Vitányi, Baruch Awerbuch,  Atomic shared register access by asynchronous hardware,   <i>27th Annual Symposium on Foundations of Computer Science</i>.  Los Angeles, Ca., USA: IEEE Computer Society Press; October 1986:233–243.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0830" role="doc-biblioentry">[166] W.E. Weihl,  Local atomicity properties: modular concurrency control for abstract data types,   <cite><i>ACM Transactions on Programming Languages and Systems</i></cite> 1989;11(2):249–282.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0835" role="doc-biblioentry">[167] William N. Scherer III, Doug Lea, Michael L. Scott,  Scalable synchronous queues,   <i>PPoPP '06: Proceedings of the Eleventh ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</i>.  New York, NY, USA: ACM Press; 2006:147–156.</p><p class="reflist2" epub:type="biblioentry footnote" id="br0840" role="doc-biblioentry">[168] P. Yew, N. Tzeng, D. Lawrie,  Distributing hot-spot addressing in large-scale multiprocessors,   <cite><i>IEEE Transactions on Computers</i></cite> April 1987;C-36(4):388–395.</p></div></section></section></body></html>