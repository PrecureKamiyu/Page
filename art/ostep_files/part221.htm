<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>21.6 When Replacements Really Occur</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part220.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part222.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">21.6 When Replacements Really Occur</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Thus far, the way we’ve described how replacements occur assumes that the OS waits until memory is entirely full, and only then replaces (evicts) a page to make room for some other page. As you can imagine, this is a little bit unrealistic, and there are many reasons for the OS to keep a small portion of memory free more proactively.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">To keep a small amount of memory free, most operating systems thus have some kind of <b>high watermark </b>(<span class="s43">HW </span>) and <b>low watermark </b>(<span class="s43">LW </span>) to help decide when to start evicting pages from memory. How this works is as follows: when the OS notices that there are fewer than <span class="s43">LW </span>pages avail- able, a background thread that is responsible for freeing memory runs. The thread evicts pages until there are <span class="s43">HW </span>pages available. The back-</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">ground thread, sometimes called the <b>swap daemon </b>or <b>page daemon</b><span class="s35">1</span>, then goes to sleep, happy that is has freed some memory for running pro- cesses and the OS to use.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: right;">By performing a number of replacements at once, new performance optimizations become possible. For example, many systems will <b>cluster </b>or <b>group </b>a number of pages and write them out at once to the swap parti- tion, thus increasing the efficiency of the disk [LL82]; as we will see later when we discuss disks in more detail, such clustering reduces seek and rotational overheads of a disk and thus increases performance noticeably. To work with the background paging thread, the control flow in Figure</p><p class="s28" style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">21.3 <span style=" color: #231F20;">should be modified slightly; instead of performing a replacement directly, the algorithm would instead simply check if there are any free pages available. If not, it would signal that the background paging thread that free pages are needed; when the thread frees up some pages, it would re-awaken the original thread, which could then page in the desired page and go about its work.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_292.png"/></span></p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 13pt;line-height: 92%;text-align: justify;">1<span class="s12">The word “daemon”, usually pronounced “demon”, is an old term for a background thread or process that does something useful. Turns out (once again!) that the source of the term is Multics [CS94].</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: D<span class="s7">O </span>W<span class="s7">ORK </span>I<span class="s7">N </span>T<span class="s7">HE </span>B<span class="s7">ACKGROUND</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">When you have some work to do, it is often a good idea to do it in the <b>background </b>to increase efficiency and to allow for grouping of opera- tions. Operating systems often do work in the background; for example, many systems buffer file writes in memory before actually writing the data to disk. Doing so has many possible benefits: increased disk effi- ciency, as the disk may now receive many writes at once and thus better be able to schedule them; improved latency of writes, as the application thinks the writes completed quite quickly; the possibility of work reduc- tion, as the writes may need never to go to disk (i.e., if the file is deleted); and better use of <b>idle time</b>, as the background work may possibly be done when the system is otherwise idle, thus better utilizing the hard- ware [G+95].</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part220.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part222.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
