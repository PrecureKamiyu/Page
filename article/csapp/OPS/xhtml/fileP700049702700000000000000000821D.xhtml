<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>12.4 Shared Variables in Threaded Programs</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000821D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000046CEE" data-uri="chapter12.xhtml#P7000497027000000000000000046CEE" epub:type="title"><span class="pcalibre label pcalibre1">12.4 </span>Shared Variables in Threaded Programs</h1></header>
<p id="P7000497027000000000000000046CEF" data-uri="chapter12.xhtml#P7000497027000000000000000046CEF" class="pcalibre1 pcalibre calibre2">From a programmer's perspective, one of the attractive aspects of threads is the ease with which multiple threads can share the same program variables. However, this sharing can be tricky. In order to write correctly threaded programs, we must have a clear understanding of what we mean by sharing and how it works.</p>
<p id="P7000497027000000000000000046CF0" data-uri="chapter12.xhtml#P7000497027000000000000000046CF0" class="pcalibre1 pcalibre calibre2">There are some basic questions to work through in order to understand whether a variable in a C program is shared or not: (1) What is the underlying memory model for threads? (2) Given this model, how are instances of the variable mapped to memory? (3) Finally, how many threads reference each of these</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008221" data-uri="chapter12.xhtml#P7000497027000000000000000008221">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008222" title="993" data-uri="chapter12.xhtml#P7000497027000000000000000008222" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046CF1" data-uri="chapter12.xhtml#P7000497027000000000000000046CF1" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sharing.c</i></p>
<pre id="P7000497027000000000000000046CF2" data-uri="chapter12.xhtml#P7000497027000000000000000046CF2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046CF3" data-uri="chapter12.xhtml#P7000497027000000000000000046CF3" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	#define N 2
3	void *thread(void *vargp);
4	
5	char **ptr; /* Global variable */
6	
7	int main()
8	{
9		int i;
10		pthread_t tid;
11		char *msgs[N] = {
12			"Hello from foo",
13			"Hello from bar"
14		};
15	
16		ptr = msgs;
17		for (i = 0; i &lt; N; i++)
18			Pthread_create(&amp;tid, NULL, thread, (void *)i);
19		Pthread_exit(NULL);
20	}
21	
22	void *thread(void *vargp)
23	{
24		int myid = (int)vargp;
25		static int cnt = 0;
26		printf("[%d]: %s (cnt=%d)\n", myid, ptr[myid], ++cnt);
27		return NULL;
28	}
</code></pre>
<p id="P7000497027000000000000000046CF4" data-uri="chapter12.xhtml#P7000497027000000000000000046CF4" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sharing.c</i></p>
<figcaption id="P7000497027000000000000000046CF5" data-uri="chapter12.xhtml#P7000497027000000000000000046CF5" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046CF6" data-uri="chapter12.xhtml#P7000497027000000000000000046CF6" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.15 </span>Example program that illustrates different aspects of sharing.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046CF7" data-uri="chapter12.xhtml#P7000497027000000000000000046CF7">instances? The variable is <i class="calibre5 pcalibre pcalibre1">shared</i> if and only if multiple threads reference some instance of the variable.</p>
<p id="P7000497027000000000000000046CF8" data-uri="chapter12.xhtml#P7000497027000000000000000046CF8" class="pcalibre1 pcalibre calibre2">To keep our discussion of sharing concrete, we will use the program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008221"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.15</span></a> as a running example. Although somewhat contrived, it is nonetheless useful to study because it illustrates a number of subtle points about sharing. The example program consists of a main thread that creates two peer threads. The main thread passes a unique ID to each peer thread, which uses the ID to print a personalized message along with a count of the total number of times that the thread routine has been invoked.</p>
<section id="P700049702700000000000000000822B" data-uri="chapter12.xhtml#P700049702700000000000000000822B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046CF9" data-uri="chapter12.xhtml#P7000497027000000000000000046CF9" epub:type="title"><span class="pcalibre label pcalibre1">12.4.1 </span>Threads Memory Model</h1></header>
<p id="P7000497027000000000000000046CFA" data-uri="chapter12.xhtml#P7000497027000000000000000046CFA" class="pcalibre1 pcalibre calibre2">A pool of concurrent threads runs in the context of a process. Each thread has its own separate <i class="calibre5 pcalibre pcalibre1">thread context</i>, which includes a thread ID, stack, stack pointer, <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000822E" title="994" data-uri="chapter12.xhtml#P700049702700000000000000000822E" epub:type="pagebreak"></span>program counter, condition codes, and general-purpose register values. Each thread shares the rest of the process context with the other threads. This includes the entire user virtual address space, which consists of read-only text (code), read/write data, the heap, and any shared library code and data areas. The threads also share the same set of open files.</p>
<p id="P7000497027000000000000000046CFB" data-uri="chapter12.xhtml#P7000497027000000000000000046CFB" class="pcalibre1 pcalibre calibre2">In an operational sense, it is impossible for one thread to read or write the register values of another thread. On the other hand, any thread can access any location in the shared virtual memory. If some thread modifies a memory location, then every other thread will eventually see the change if it reads that location. Thus, registers are never shared, whereas virtual memory is always shared.</p>
<p id="P7000497027000000000000000046CFC" data-uri="chapter12.xhtml#P7000497027000000000000000046CFC" class="pcalibre1 pcalibre calibre2">The memory model for the separate thread stacks is not as clean. These stacks are contained in the stack area of the virtual address space and are <i class="calibre5 pcalibre pcalibre1">usually</i> accessed independently by their respective threads. We say <i class="calibre5 pcalibre pcalibre1">usually</i> rather than <i class="calibre5 pcalibre pcalibre1">always</i>, because different thread stacks are not protected from other threads. So if a thread somehow manages to acquire a pointer to another thread's stack, then it can read and write any part of that stack. Our example program shows this in line 26, where the peer threads reference the contents of the main thread's stack indirectly through the global <code id="P7000497027000000000000000046CFD" data-uri="chapter12.xhtml#P7000497027000000000000000046CFD" class="pcalibre1 calibre8 pcalibre">ptr</code> variable.</p>
</section>
<section id="P7000497027000000000000000008232" data-uri="chapter12.xhtml#P7000497027000000000000000008232" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046CFE" data-uri="chapter12.xhtml#P7000497027000000000000000046CFE" epub:type="title"><span class="pcalibre label pcalibre1">12.4.2 </span>Mapping Variables to Memory</h1></header>
<p id="P7000497027000000000000000046CFF" data-uri="chapter12.xhtml#P7000497027000000000000000046CFF" class="pcalibre1 pcalibre calibre2">Variables in threaded C programs are mapped to virtual memory according to their storage classes:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046D00" data-uri="chapter12.xhtml#P7000497027000000000000000046D00">
<li id="P7000497027000000000000000046D01" data-uri="chapter12.xhtml#P7000497027000000000000000046D01" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D02" data-uri="chapter12.xhtml#P7000497027000000000000000046D02" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Global variables. </span>A <i class="calibre5 pcalibre pcalibre1">global variable</i> is any variable declared outside of a function. At run time, the read/write area of virtual memory contains exactly one instance of each global variable that can be referenced by any thread. For example, the global <code id="P7000497027000000000000000046D03" data-uri="chapter12.xhtml#P7000497027000000000000000046D03" class="pcalibre1 calibre8 pcalibre">ptr</code> variable declared in line 5 has one run-time instance in the read/write area of virtual memory. When there is only one instance of a variable, we will denote the instance by simply using the variable name—in this case, <code id="P7000497027000000000000000046D04" data-uri="chapter12.xhtml#P7000497027000000000000000046D04" class="pcalibre1 calibre8 pcalibre">ptr</code>.</p></li>
<li id="P7000497027000000000000000046D05" data-uri="chapter12.xhtml#P7000497027000000000000000046D05" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D06" data-uri="chapter12.xhtml#P7000497027000000000000000046D06" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Local automatic variables. </span>A <i class="calibre5 pcalibre pcalibre1">local automatic variable</i> is one that is declared inside a function without the <code id="P7000497027000000000000000046D07" data-uri="chapter12.xhtml#P7000497027000000000000000046D07" class="pcalibre1 calibre8 pcalibre">static</code> attribute. At run time, each thread's stack contains its own instances of any local automatic variables. This is true even if multiple threads execute the same thread routine. For example, there is one instance of the local variable <code id="P7000497027000000000000000046D08" data-uri="chapter12.xhtml#P7000497027000000000000000046D08" class="pcalibre1 calibre8 pcalibre">tid</code>, and it resides on the stack of the main thread. We will denote this instance as <code id="P7000497027000000000000000046D09" data-uri="chapter12.xhtml#P7000497027000000000000000046D09" class="pcalibre1 calibre8 pcalibre">tid.m.</code> As another example, there are two instances of the local variable myid, one instance on the stack of peer thread 0 and the other on the stack of peer thread 1. We will denote these instances as <code id="P7000497027000000000000000046D0A" data-uri="chapter12.xhtml#P7000497027000000000000000046D0A" class="pcalibre1 calibre8 pcalibre">myid.p0</code> and <code id="P7000497027000000000000000046D0B" data-uri="chapter12.xhtml#P7000497027000000000000000046D0B" class="pcalibre1 calibre8 pcalibre">myid.p1</code>, respectively.</p></li>
<li id="P7000497027000000000000000046D0C" data-uri="chapter12.xhtml#P7000497027000000000000000046D0C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D0D" data-uri="chapter12.xhtml#P7000497027000000000000000046D0D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Local static variables. </span>A <i class="calibre5 pcalibre pcalibre1">local <code id="P7000497027000000000000000046D0E" data-uri="chapter12.xhtml#P7000497027000000000000000046D0E" class="pcalibre1 calibre8 pcalibre">static</code> variable</i> is one that is declared inside a function with the <code id="P7000497027000000000000000046D0F" data-uri="chapter12.xhtml#P7000497027000000000000000046D0F" class="pcalibre1 calibre8 pcalibre">static</code> attribute. As with global variables, the read/write area of virtual memory contains exactly one instance of each local static <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008245" title="995" data-uri="chapter12.xhtml#P7000497027000000000000000008245" epub:type="pagebreak"></span>variable declared in a program. For example, even though each peer thread in our example program declares <code id="P7000497027000000000000000046D10" data-uri="chapter12.xhtml#P7000497027000000000000000046D10" class="pcalibre1 calibre8 pcalibre">cnt</code> in line 25, at run time there is only one instance of <code id="P7000497027000000000000000046D11" data-uri="chapter12.xhtml#P7000497027000000000000000046D11" class="pcalibre1 calibre8 pcalibre">cnt</code> residing in the read/write area of virtual memory. Each peer thread reads and writes this instance.</p></li>
</ul>
</section>
<section id="P7000497027000000000000000008248" data-uri="chapter12.xhtml#P7000497027000000000000000008248" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046D12" data-uri="chapter12.xhtml#P7000497027000000000000000046D12" epub:type="title"><span class="pcalibre label pcalibre1">12.4.3 </span>Shared Variables</h1></header>
<p id="P7000497027000000000000000046D13" data-uri="chapter12.xhtml#P7000497027000000000000000046D13" class="pcalibre1 pcalibre calibre2">We say that a variable <var class="calibre5 pcalibre pcalibre1">v</var> is <i class="calibre5 pcalibre pcalibre1">shared</i> if and only if one of its instances is referenced by more than one thread. For example, variable <code id="P7000497027000000000000000046D14" data-uri="chapter12.xhtml#P7000497027000000000000000046D14" class="pcalibre1 calibre8 pcalibre">cnt</code> in our example program is shared because it has only one run-time instance and this instance is referenced by both peer threads. On the other hand, <code id="P7000497027000000000000000046D15" data-uri="chapter12.xhtml#P7000497027000000000000000046D15" class="pcalibre1 calibre8 pcalibre">myid</code> is not shared, because each of its two instances is referenced by exactly one thread. However, it is important to realize that local automatic variables such as <code id="P7000497027000000000000000046D16" data-uri="chapter12.xhtml#P7000497027000000000000000046D16" class="pcalibre1 calibre8 pcalibre">msgs</code> can also be shared.</p>
<section id="P700049702700000000000000000824E" data-uri="chapter12.xhtml#P700049702700000000000000000824E" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046D17" data-uri="chapter12.xhtml#P7000497027000000000000000046D17" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.6 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000867A.xhtml#P700049702700000000000000000875C">1036</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046D18" data-uri="chapter12.xhtml#P7000497027000000000000000046D18">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046D19" data-uri="chapter12.xhtml#P7000497027000000000000000046D19">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046D1A" data-uri="chapter12.xhtml#P7000497027000000000000000046D1A"><p id="P7000497027000000000000000046D1B" data-uri="chapter12.xhtml#P7000497027000000000000000046D1B" class="pcalibre calibre3 pcalibre1">Using the analysis from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000821D"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">12.4</span></a>, fill each entry in the following table with "Yes" or "No" for the example program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008221"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.15</span></a>. In the first column, the notation <i class="calibre5 pcalibre pcalibre1">v.t</i> denotes an instance of variable <var class="calibre5 pcalibre pcalibre1">v</var> residing on the local stack for thread <var class="calibre5 pcalibre pcalibre1">t</var>, where <var class="calibre5 pcalibre pcalibre1">t</var> is either <code id="P7000497027000000000000000046D1C" data-uri="chapter12.xhtml#P7000497027000000000000000046D1C" class="pcalibre1 calibre8 pcalibre">m</code> (main thread), <code id="P7000497027000000000000000046D1D" data-uri="chapter12.xhtml#P7000497027000000000000000046D1D" class="pcalibre1 calibre8 pcalibre">p0</code> (peer thread 0), or <code id="P7000497027000000000000000046D1E" data-uri="chapter12.xhtml#P7000497027000000000000000046D1E" class="pcalibre1 calibre8 pcalibre">p1</code> (peer thread 1).</p></div>
<table id="P7000497027000000000000000046D1F" data-uri="chapter12.xhtml#P7000497027000000000000000046D1F" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th rowspan="2" id="P7000497027000000000000000046D20" data-uri="chapter12.xhtml#P7000497027000000000000000046D20" class="calibre18 pcalibre pcalibre1">Variable instance</th>
<th colspan="3" id="P7000497027000000000000000046D21" data-uri="chapter12.xhtml#P7000497027000000000000000046D21" class="calibre18 pcalibre pcalibre1">Referenced by</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046D22" data-uri="chapter12.xhtml#P7000497027000000000000000046D22" class="calibre18 pcalibre pcalibre1">main thread?</th>
<th id="P7000497027000000000000000046D23" data-uri="chapter12.xhtml#P7000497027000000000000000046D23" class="calibre18 pcalibre pcalibre1">peer thread 0?</th>
<th id="P7000497027000000000000000046D24" data-uri="chapter12.xhtml#P7000497027000000000000000046D24" class="calibre18 pcalibre pcalibre1">peer thread 1?</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D25" data-uri="chapter12.xhtml#P7000497027000000000000000046D25" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D26" data-uri="chapter12.xhtml#P7000497027000000000000000046D26" class="calibre10 pcalibre pcalibre1">ptr</code></td>
<td id="P7000497027000000000000000046D27" data-uri="chapter12.xhtml#P7000497027000000000000000046D27" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D28" data-uri="chapter12.xhtml#P7000497027000000000000000046D28" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D29" data-uri="chapter12.xhtml#P7000497027000000000000000046D29" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D2A" data-uri="chapter12.xhtml#P7000497027000000000000000046D2A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D2B" data-uri="chapter12.xhtml#P7000497027000000000000000046D2B" class="calibre10 pcalibre pcalibre1">cnt</code></td>
<td id="P7000497027000000000000000046D2C" data-uri="chapter12.xhtml#P7000497027000000000000000046D2C" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D2D" data-uri="chapter12.xhtml#P7000497027000000000000000046D2D" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D2E" data-uri="chapter12.xhtml#P7000497027000000000000000046D2E" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D2F" data-uri="chapter12.xhtml#P7000497027000000000000000046D2F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D30" data-uri="chapter12.xhtml#P7000497027000000000000000046D30" class="calibre10 pcalibre pcalibre1">i.m</code></td>
<td id="P7000497027000000000000000046D31" data-uri="chapter12.xhtml#P7000497027000000000000000046D31" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D32" data-uri="chapter12.xhtml#P7000497027000000000000000046D32" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D33" data-uri="chapter12.xhtml#P7000497027000000000000000046D33" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D34" data-uri="chapter12.xhtml#P7000497027000000000000000046D34" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D35" data-uri="chapter12.xhtml#P7000497027000000000000000046D35" class="calibre10 pcalibre pcalibre1">msgs.m</code></td>
<td id="P7000497027000000000000000046D36" data-uri="chapter12.xhtml#P7000497027000000000000000046D36" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D37" data-uri="chapter12.xhtml#P7000497027000000000000000046D37" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D38" data-uri="chapter12.xhtml#P7000497027000000000000000046D38" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D39" data-uri="chapter12.xhtml#P7000497027000000000000000046D39" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D3A" data-uri="chapter12.xhtml#P7000497027000000000000000046D3A" class="calibre10 pcalibre pcalibre1">myid.p0</code></td>
<td id="P7000497027000000000000000046D3B" data-uri="chapter12.xhtml#P7000497027000000000000000046D3B" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D3C" data-uri="chapter12.xhtml#P7000497027000000000000000046D3C" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D3D" data-uri="chapter12.xhtml#P7000497027000000000000000046D3D" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D3E" data-uri="chapter12.xhtml#P7000497027000000000000000046D3E" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046D3F" data-uri="chapter12.xhtml#P7000497027000000000000000046D3F" class="calibre10 pcalibre pcalibre1">myid.p1</code></td>
<td id="P7000497027000000000000000046D40" data-uri="chapter12.xhtml#P7000497027000000000000000046D40" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D41" data-uri="chapter12.xhtml#P7000497027000000000000000046D41" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046D42" data-uri="chapter12.xhtml#P7000497027000000000000000046D42" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
</tbody>
</table></li>
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046D43" data-uri="chapter12.xhtml#P7000497027000000000000000046D43">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046D44" data-uri="chapter12.xhtml#P7000497027000000000000000046D44"><p id="P7000497027000000000000000046D45" data-uri="chapter12.xhtml#P7000497027000000000000000046D45" class="pcalibre calibre3 pcalibre1">Given the analysis in part A, which of the variables <code id="P7000497027000000000000000046D46" data-uri="chapter12.xhtml#P7000497027000000000000000046D46" class="pcalibre1 calibre8 pcalibre">ptr, cnt, i, msgs</code>, and <code id="P7000497027000000000000000046D47" data-uri="chapter12.xhtml#P7000497027000000000000000046D47" class="pcalibre1 calibre8 pcalibre">myid</code> are shared?</p></div></li>
</ol>
</section>
</section>
</section></body></html>
