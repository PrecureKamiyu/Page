<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Semaphores</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part317.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part319.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 3pt;padding-left: 247pt;text-indent: 0pt;text-align: left;">Semaphores</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: left;">As we know now, one needs both locks and condition variables to solve a broad range of relevant and interesting concurrency problems. One of the first people to realize this years ago was <b>Edsger Dijkstra </b>(though it is hard to know the exact history [GR92]), known among other things for his famous “shortest paths” algorithm in graph theory [D59], an early polemic on structured programming entitled “Goto Statements Consid- ered Harmful” [D68a] (what a great title!), and, in the case we will study here, the introduction of a synchronization primitive called the <b>semaphore </b>[D68b,D72]. Indeed, Dijkstra and colleagues invented the semaphore as a single primitive for all things related to synchronization; as you will see, one can use semaphores as both locks and condition variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 73pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">HE </span>C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>U<span class="s7">SE </span>S<span class="s7">EMAPHORES</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">How can we use semaphores instead of locks and condition variables? What is the definition of a semaphore? What is a binary semaphore? Is it straightforward to build a semaphore out of locks and condition variables? What about building locks and condition variables out of semaphores?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part319.htm">31.1 Semaphores: A Definition</a><a class="toc0" href="part320.htm">31.2 Binary Semaphores (Locks)</a><a class="toc0" href="part321.htm">31.3 Semaphores As Condition Variables</a><a class="toc0" href="part322.htm">31.4 The Producer/Consumer (Bounded-Buffer) Problem</a><a class="toc1" href="part323.htm">First Attempt</a><a class="toc1" href="part324.htm">A Solution: Adding Mutual Exclusion</a><a class="toc1" href="part325.htm">Avoiding Deadlock</a><a class="toc1" href="part326.htm">Finally, A Working Solution</a><a class="toc0" href="part327.htm">31.5 Reader-Writer Locks</a><a class="toc0" href="part328.htm">31.6 The Dining Philosophers</a><a class="toc1" href="part329.htm">Broken Solution</a><a class="toc1" href="part330.htm">A Solution: Breaking The Dependency</a><a class="toc0" href="part331.htm">31.7 How To Implement Semaphores</a><a class="toc0" href="part332.htm">31.8 Summary</a><a class="toc0" href="part333.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part317.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part319.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
