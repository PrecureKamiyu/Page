<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Figure 8.4: A Mixed I/O-intensive and CPU-intensive Workload</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part82.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part84.htm">下一个 &gt;</a></p><p style="padding-left: 41pt;text-indent: 14pt;text-align: justify;">Figure 8.4: <b>A Mixed I/O-intensive and CPU-intensive Workload</b></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">inserted into the highest queue; as its run-time is short (only 20 ms), B completes before reaching the bottom queue, in two time slices; then A resumes running (at low priority).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">From this example, you can hopefully understand one of the major goals of the algorithm: because it doesn’t <i>know </i>whether a job will be a short job or a long-running job, it first <i>assumes </i>it might be a short job, thus giving the job high priority. If it actually is a short job, it will run quickly and complete; if it is not a short job, it will slowly move down the queues, and thus soon prove itself to be a long-running more batch-like process. In this manner, MLFQ approximates SJF.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part82.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part84.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
