<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>3.2 Multiplexing and Demultiplexing</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000001139" class="level1"><header><h1 class="title" id="P700101195200000000000000000A0D2" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D2" epub:type="title"><span class="number">3.2</span> Multiplexing and Demultiplexing</h1></header>
<p id="P700101195200000000000000000A0D3" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D3">In this section, we discuss transport-layer multiplexing and demultiplexing, that is, extending the host-to-host delivery service provided by the network layer to a process-to-process delivery service for applications running on the hosts. In order to keep the discussion concrete, we’ll discuss this basic transport-layer service in the context of the Internet. We emphasize, however, that a multiplexing/demultiplexing service is needed for all computer networks.</p>
<p id="P700101195200000000000000000A0D4" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D4">At the destination host, the transport layer receives segments from the network layer just below. The transport layer has the responsibility of delivering the data in these segments to the appropriate application process running in the host. Let’s take a look at an example. Suppose you are sitting in front of your computer, and you are downloading Web pages while running one FTP session and two Telnet sessions. You therefore have four network application processes running—two Telnet processes, one FTP process, and one HTTP process. When the transport layer in your computer receives data from the network layer below, it needs to direct the received data to one of these four processes. Let’s now examine how this is done.</p>
<p id="P700101195200000000000000000A0D5" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D5">First recall from <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000E42" data-foobar="7"><span class="label">Section</span> <span class="number">2.7</span></a> that a process (as part of a network application) can have one or more <span class="keyword" id="P700101195200000000000000000113E" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000113E"><b>sockets</b></span>, doors through which data passes from the network to the process and through which data passes from the process to the network. Thus, as shown in <a class="xref" href="#P7001011952000000000000000001143" data-foobar="1"><span class="label">Figure</span> <span class="number">3.2</span></a>, the transport layer in the receiving host does not actually deliver data directly to a process, but instead to an intermediary socket. Because at any given time there can be more than one socket in the receiving host, each socket has a unique identifier. The format of the identifier depends on whether the socket is a UDP or a TCP socket, as we’ll discuss shortly.</p>
<p id="P700101195200000000000000000A0D6" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D6">Now let’s consider how a receiving host directs an incoming transport-layer segment to the appropriate socket. Each transport-layer segment has a set of fields in the segment for this purpose. At the receiving end, the transport layer examines these fields to identify the receiving socket and then directs the segment to that socket. This job of delivering the data in a transport-layer segment to the correct socket is called <span class="keyword" id="P7001011952000000000000000001140" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001140"><b>demultiplexing</b></span>. The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (that will later be used in demultiplexing) to create segments, and passing the segments to the network layer is called <span class="keyword" id="P7001011952000000000000000001141" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001141"><b>multiplexing</b></span>. Note that the transport layer in the middle host<span class="pagebreak" title="194" id="P7001011952000000000000000001142" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001142" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000001143" class="figure" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001143">
<img alt="Transport-layer multiplexing and demultiplexing." height="361" width="789" aria-describedby="P7001011952000000000000000001147" id="P700101195200000000000000000A0D7" data-uri="P700101195200000000000000000553E" src="../images/4055103002.png"></img>
<figcaption id="P700101195200000000000000000A0D8" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D8"><header><h1 class="title" id="P700101195200000000000000000A0D9" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0D9" epub:type="title"><span class="label">Figure </span><span class="number">3.2</span> Transport-layer multiplexing and demultiplexing</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000001147" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001147" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055103002.xhtml#la_4055103002"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A0E4" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0E4">in <a class="xref" href="#P7001011952000000000000000001143" data-foobar="1"><span class="label">Figure</span> <span class="number">3.2</span></a> must demultiplex segments arriving from the network layer below to either process P<sub>1</sub> or P<sub>2</sub> above; this is done by directing the arriving segment’s data to the corresponding process’s socket. The transport layer in the middle host must also gather outgoing data from these sockets, form transport-layer segments, and pass these segments down to the network layer. Although we have introduced multiplexing and demultiplexing in the context of the Internet transport protocols, it’s important to realize that they are concerns whenever a single protocol at one layer (at the transport layer or elsewhere) is used by multiple protocols at the next higher layer.</p>
<p id="P700101195200000000000000000A0E5" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0E5">To illustrate the demultiplexing job, recall the household analogy in the previous section. Each of the kids is identified by his or her name. When Bill receives a batch of mail from the mail carrier, he performs a demultiplexing operation by observing to whom the letters are addressed and then hand delivering the mail to his brothers and sisters. Ann performs a multiplexing operation when she collects letters from her brothers and sisters and gives the collected mail to the mail person.</p>
<p id="P700101195200000000000000000A0E6" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0E6">Now that we understand the roles of transport-layer multiplexing and demultiplexing, let us examine how it is actually done in a host. From the discussion above, we know that transport-layer multiplexing requires (1) that sockets have unique identifiers, and (2) that each segment have special fields that indicate the socket to which the segment is to be delivered. These special fields, illustrated in <a class="xref" href="#P7001011952000000000000000001159" data-foobar="1"><span class="label">Figure</span> <span class="number">3.3</span></a>, are the <span class="keyword" id="P7001011952000000000000000001155" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001155"><b>source port number field</b></span> and the <span class="keyword" id="P7001011952000000000000000001156" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001156"><b>destination port number field</b></span>. (The UDP and TCP segments have other fields as well, as discussed in the subsequent sections of this chapter.) Each port number is a 16-bit number, ranging from 0 to 65535. The port numbers ranging from 0 to 1023 are called <span class="keyword" id="P7001011952000000000000000001157" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001157"><b>well-known port numbers</b></span> and are restricted, which means that they are reserved for use by well-known<span class="pagebreak" title="195" id="P7001011952000000000000000001158" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001158" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000001159" class="figure" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001159">
<img alt="Illustration of source and destination port-number fields in a transport-layer segment." height="237" width="273" aria-describedby="P700101195200000000000000000115D" id="P700101195200000000000000000A0E7" data-uri="P700101195200000000000000000553F" src="../images/4055103003.png"></img>
<figcaption id="P700101195200000000000000000A0E8" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0E8"><header><h1 class="title" id="P700101195200000000000000000A0E9" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0E9" epub:type="title"><span class="label">Figure </span><span class="number">3.3</span> Source and destination port-number fields in a transport-layer segment</h1></header>

</figcaption>
</figure><div class="longdesc" id="P700101195200000000000000000115D" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000115D" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055103003.xhtml#la_4055103003"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A0F0" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F0">application protocols such as HTTP (which uses port number 80) and FTP (which uses port number 21). The list of well-known port numbers is given in RFC 1700 and is updated at <a class="ulink" href="http://www.iana.org">http:/<wbr></wbr>/<wbr></wbr>www.iana.org</a> <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B60" data-foobar="7">[RFC 3232]</a>. When we develop a new application (such as the simple application developed in <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000E42" data-foobar="7"><span class="label">Section</span> <span class="number">2.7</span></a>), we must assign the application a port number.</p>
<p id="P700101195200000000000000000A0F1" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F1">It should now be clear how the transport layer <i>could</i> implement the demultiplexing service: Each socket in the host could be assigned a port number, and when a segment arrives at the host, the transport layer examines the destination port number in the segment and directs the segment to the corresponding socket. The segment’s data then passes through the socket into the attached process. As we’ll see, this is basically how UDP does it. However, we’ll also see that multiplexing/demultiplexing in TCP is yet more subtle.</p>
<section id="P7001011952000000000000000001166" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001166" class="level2">
<section id="P7001011952000000000000000001167" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001167" class="level3"><header><h1 class="title" id="P700101195200000000000000000A0F2" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F2" epub:type="title">Connectionless Multiplexing and Demultiplexing</h1></header>
<p id="P700101195200000000000000000A0F3" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F3">Recall from <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000E4C" data-foobar="7"><span class="label">Section</span> <span class="number">2.7.1</span></a> that the Python program running in a host can create a UDP socket with the line</p>
<pre id="P700101195200000000000000000A0F4" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F4"><code id="P700101195200000000000000000A0F5" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F5">clientSocket = socket(AF_INET, SOCK_DGRAM)</code></pre>
<p class="continued" id="P700101195200000000000000000A0F6" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F6">When a UDP socket is created in this manner, the transport layer automatically assigns a port number to the socket. In particular, the transport layer assigns a port number in the range 1024 to 65535 that is currently not being used by any other UDP port in the host. Alternatively, we can add a line into our Python program after we create the socket to associate a specific port number (say, 19157) to this UDP socket via the socket <b>bind()</b> method:</p>
<pre id="P700101195200000000000000000A0F7" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F7"><code id="P700101195200000000000000000A0F8" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F8">clientSocket.bind((’’, 19157))</code></pre>
<p class="continued" id="P700101195200000000000000000A0F9" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0F9"><span class="pagebreak" title="196" id="P7001011952000000000000000001170" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001170" epub:type="pagebreak" role="doc-pagebreak"></span>If the application developer writing the code were implementing the server side of a “well-known protocol,” then the developer would have to assign the corresponding well-known port number. Typically, the client side of the application lets the transport layer automatically (and transparently) assign the port number, whereas the server side of the application assigns a specific port number.</p>
<p id="P700101195200000000000000000A0FA" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FA">With port numbers assigned to UDP sockets, we can now precisely describe UDP multiplexing/demultiplexing. Suppose a process in Host A, with UDP port 19157, wants to send a chunk of application data to a process with UDP port 46428 in Host B. The transport layer in Host A creates a transport-layer segment that includes the application data, the source port number (19157), the destination port number (46428), and two other values (which will be discussed later, but are unimportant for the current discussion). The transport layer then passes the resulting segment to the network layer. The network layer encapsulates the segment in an IP datagram and makes a best-effort attempt to deliver the segment to the receiving host. If the segment arrives at the receiving Host B, the transport layer at the receiving host examines the destination port number in the segment (46428) and delivers the segment to its socket identified by port 46428. Note that Host B could be running multiple processes, each with its own UDP socket and associated port number. As UDP segments arrive from the network, Host B directs (demultiplexes) each segment to the appropriate socket by examining the segment’s destination port number.</p>
<p id="P700101195200000000000000000A0FB" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FB">It is important to note that a UDP socket is fully identified by a two-tuple consisting of a destination IP address and a destination port number. As a consequence, if two UDP segments have different source IP addresses and/or source port numbers, but have the same <i>destination</i> IP address and <i>destination</i> port number, then the two segments will be directed to the same destination process via the same destination socket.</p>
<p id="P700101195200000000000000000A0FC" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FC">You may be wondering now, what is the purpose of the source port number? As shown in <a class="xref" href="#P700101195200000000000000000117A" data-foobar="1"><span class="label">Figure</span> <span class="number">3.4</span></a>, in the A-to-B segment the source port number serves as part of a “return address”—when B wants to send a segment back to A, the destination port in the B-to-A segment will take its value from the source port value of the A-to-B segment. (The complete return address is A’s IP address and the source port number.) As an example, recall the UDP server program studied in <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000E42" data-foobar="7"><span class="label">Section</span> <span class="number">2.7</span></a>. In <code id="P700101195200000000000000000A0FD" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FD">UDPServer.py</code>, the server uses the <code id="P700101195200000000000000000A0FE" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FE">recvfrom()</code> method to extract the client-side (source) port number from the segment it receives from the client; it then sends a new segment to the client, with the extracted source port number serving as the destination port number in this new segment.</p>
</section>
<section id="P7001011952000000000000000001176" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001176" class="level3"><header><h1 class="title" id="P700101195200000000000000000A0FF" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A0FF" epub:type="title">Connection-Oriented Multiplexing and Demultiplexing</h1></header>
<p id="P700101195200000000000000000A100" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A100">In order to understand TCP demultiplexing, we have to take a close look at TCP sockets and TCP connection establishment. One subtle difference between a TCP socket and a UDP socket is that a TCP socket is identified by a four-tuple: (source IP address, source port number, destination IP address, destination port number). Thus, when a TCP segment arrives from the network to a host, the host uses all four values to direct (demultiplex) the segment to the appropriate socket.<span class="pagebreak" title="197" id="P7001011952000000000000000001179" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001179" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P700101195200000000000000000117A" class="figure" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000117A">
<img alt="Illustration of the inversion of source and destination port numbers." height="383" width="673" aria-describedby="P700101195200000000000000000117E" id="P700101195200000000000000000A101" data-uri="P7001011952000000000000000005540" src="../images/4055103004.png"></img>
<figcaption id="P700101195200000000000000000A102" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A102"><header><h1 class="title" id="P700101195200000000000000000A103" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A103" epub:type="title"><span class="label">Figure </span><span class="number">3.4</span> The inversion of source and destination port numbers</h1></header>

</figcaption>
</figure><div class="longdesc" id="P700101195200000000000000000117E" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000117E" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055103004.xhtml#la_4055103004"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A10C" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A10C">In particular, and in contrast with UDP, two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP segment carrying the original connection-establishment request) be directed to two different sockets. To gain further insight, let’s reconsider the TCP client-server programming example in <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000ECB" data-foobar="7"><span class="label">Section</span> <span class="number">2.7.2</span></a>:</p>
<ul id="P700101195200000000000000000A10D" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A10D">
<li id="P700101195200000000000000000A10E" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A10E"><p id="P700101195200000000000000000A10F" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A10F">The TCP server application has a “welcoming socket,” that waits for connection-establishment requests from TCP clients (see <a class="xref" href="fileP7001011952000000000000000000E42.xhtml#P7001011952000000000000000000EE9" data-foobar="7"><span class="label">Figure</span> <span class="number">2.29</span></a>) on port number 12000.</p></li>
<li id="P700101195200000000000000000A110" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A110"><p id="P700101195200000000000000000A111" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A111">The TCP client creates a socket and sends a connection establishment request segment with the lines:</p>
<pre id="P700101195200000000000000000A112" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A112"><code id="P700101195200000000000000000A113" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A113">
clientSocket = socket(AF_INET, SOCK_STREAM)
               clientSocket.connect((serverName,12000))</code></pre></li>
<li id="P700101195200000000000000000A114" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A114"><p id="P700101195200000000000000000A115" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A115">A connection-establishment request is nothing more than a TCP segment with destination port number 12000 and a special connection-establishment bit set in the TCP header (discussed in <a class="xref" href="fileP7001011952000000000000000001442.xhtml#P7001011952000000000000000001442" data-foobar="7"><span class="label">Section</span> <span class="number">3.5</span></a>). The segment also includes a source port number that was chosen by the client.</p></li>
<li id="P700101195200000000000000000A116" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A116"><p id="P700101195200000000000000000A117" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A117">When the host operating system of the computer running the server process receives the incoming connection-request segment with destination port 12000, it locates the server process that is waiting to accept a connection on port number 12000. The server process then creates a new socket:</p>
<pre id="P700101195200000000000000000A118" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A118"><code id="P700101195200000000000000000A119" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A119">connectionSocket, addr = serverSocket.accept()</code></pre></li>
<li id="P700101195200000000000000000A11A" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11A"><p id="P700101195200000000000000000A11B" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11B"><span class="pagebreak" title="198" id="P7001011952000000000000000001197" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001197" epub:type="pagebreak" role="doc-pagebreak"></span>Also, the transport layer at the server notes the following four values in the connection-request segment: (1) the source port number in the segment, (2) the IP address of the source host, (3) the destination port number in the segment, and (4) its own IP address. The newly created connection socket is identified by these four values; all subsequently arriving segments whose source port, source IP address, destination port, and destination IP address match these four values will be demultiplexed to this socket. With the TCP connection now in place, the client and server can now send data to each other.</p></li>
</ul>
<p id="P700101195200000000000000000A11C" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11C">The server host may support many simultaneous TCP connection sockets, with each socket attached to a process, and with each socket identified by its own four-tuple. When a TCP segment arrives at the host, all four fields (source IP address, source port, destination IP address, destination port) are used to direct (demultiplex) the segment to the appropriate socket.</p>
<aside class="sidebar" id="P7001011952000000000000000001199" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001199"><header><h1 class="title" id="P700101195200000000000000000A11D" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11D" epub:type="title"><span class="label">FOCUS ON SECURITY </span></h1></header>
<section id="P700101195200000000000000000119B" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000119B"><header><h1 class="title" id="P700101195200000000000000000A11E" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11E" epub:type="title">Port Scanning</h1></header>
<p id="P700101195200000000000000000A11F" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A11F">We’ve seen that a server process waits patiently on an open port for contact by a remote client. Some ports are reserved for well-known applications (e.g., Web, FTP, DNS, and SMTP servers); other ports are used by convention by popular applications (e.g., the Microsoft 2000 SQL server listens for requests on UDP port 1434). Thus, if we determine that a port is open on a host, we may be able to map that port to a specific application running on the host. This is very useful for system administrators, who are often interested in knowing which network applications are running on the hosts in their networks. But attackers, in order to “case the joint,” also want to know which ports are open on target hosts. If a host is found to be running an application with a known security flaw (e.g., a SQL server listening on port 1434 was subject to a buffer overflow, allowing a remote user to execute arbitrary code on the vulnerable host, a flaw exploited by the Slammer worm <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000386B" data-foobar="7">[CERT 2003–04]</a>), then that host is ripe for attack.</p>
<p id="P700101195200000000000000000A120" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A120">Determining which applications are listening on which ports is a relatively easy task. Indeed there are a number of public domain programs, called port scanners, that do just that. Perhaps the most widely used of these is nmap, freely available at <a class="ulink" href="http://nmap.org">http:/<wbr></wbr>/<wbr></wbr>nmap.org</a> and included in most Linux distributions. For TCP, nmap sequentially scans ports, looking for ports that are accepting TCP connections. For UDP, nmap again sequentially scans ports, looking for UDP ports that respond to transmitted UDP segments. In both cases, nmap returns a list of open, closed, or unreachable ports. A host running nmap can attempt to scan any target host <i>anywhere</i> in the Internet. We’ll revisit nmap in <a class="xref" href="fileP7001011952000000000000000001442.xhtml#P70010119520000000000000000015D1" data-foobar="7"><span class="label">Section</span> <span class="number">3.5.6</span></a>, when we discuss TCP connection management.</p>
</section>
</aside>
<figure id="P700101195200000000000000000119F" class="figure" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000119F">
<img alt="Illustration of two clients communicating with one server." height="512" width="834" aria-describedby="P70010119520000000000000000011A4" id="P700101195200000000000000000A121" data-uri="P7001011952000000000000000005541" src="../images/4055103005.png"></img>
<figcaption id="P700101195200000000000000000A122" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A122"><header><h1 class="title" id="P700101195200000000000000000A123" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A123" epub:type="title"><span class="pagebreak" title="199" id="P70010119520000000000000000011A3" data-uri="M03_KURO4140_07_SE_C03.xhtml#P70010119520000000000000000011A3" epub:type="pagebreak" role="doc-pagebreak"></span><span class="label">Figure </span><span class="number">3.5</span> Two clients, using the same destination port number (80) to communicate with the same Web server application</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000011A4" data-uri="M03_KURO4140_07_SE_C03.xhtml#P70010119520000000000000000011A4" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055103005.xhtml#la_4055103005"><span class="label">Description</span></a></div>
<p id="P700101195200000000000000000A137" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A137">The situation is illustrated in <a class="xref" href="#P700101195200000000000000000119F" data-foobar="1"><span class="label">Figure</span> <span class="number">3.5</span></a>, in which Host C initiates two HTTP sessions to server B, and Host A initiates one HTTP session to B. Hosts A and C and server B each have their own unique IP address—A, C, and B, respectively. Host C assigns two different source port numbers (26145 and 7532) to its two HTTP connections. Because Host A is choosing source port numbers independently of C, it might also assign a source port of 26145 to its HTTP connection. But this is not a problem—server B will still be able to correctly demultiplex the two connections having the same source port number, since the two connections have different source IP addresses.</p>
</section>
<section id="P70010119520000000000000000011B9" data-uri="M03_KURO4140_07_SE_C03.xhtml#P70010119520000000000000000011B9" class="level3"><header><h1 class="title" id="P700101195200000000000000000A138" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A138" epub:type="title">Web Servers and TCP</h1></header>
<p id="P700101195200000000000000000A139" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A139">Before closing this discussion, it’s instructive to say a few additional words about Web servers and how they use port numbers. Consider a host running a Web server, such as an Apache Web server, on port 80. When clients (for example, browsers) send segments to the server, <i>all</i> segments will have destination port 80. In particular, both the initial connection-establishment segments and the segments carrying HTTP <span class="pagebreak" title="200" id="P70010119520000000000000000011BC" data-uri="M03_KURO4140_07_SE_C03.xhtml#P70010119520000000000000000011BC" epub:type="pagebreak" role="doc-pagebreak"></span>request messages will have destination port 80. As we have just described, the server distinguishes the segments from the different clients using source IP addresses and source port numbers.</p>
<p id="P700101195200000000000000000A13A" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A13A"><a class="xref" href="#P700101195200000000000000000119F" data-foobar="1"><span class="label">Figure</span> <span class="number">3.5</span></a> shows a Web server that spawns a new process for each connection. As shown in <a class="xref" href="#P700101195200000000000000000119F" data-foobar="1"><span class="label">Figure</span> <span class="number">3.5</span></a>, each of these processes has its own connection socket through which HTTP requests arrive and HTTP responses are sent. We mention, however, that there is not always a one-to-one correspondence between connection sockets and processes. In fact, today’s high-performing Web servers often use only one process, and create a new thread with a new connection socket for each new client connection. (A thread can be viewed as a lightweight subprocess.) If you did the first programming assignment in <a class="xref" href="fileP700101195200000000000000000096B.xhtml#P700101195200000000000000000096B" data-foobar="7"><span class="label">Chapter</span> <span class="number">2</span></a>, you built a Web server that does just this. For such a server, at any given time there may be many connection sockets (with different identifiers) attached to the same process.</p>
<p id="P700101195200000000000000000A13B" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A13B">If the client and server are using persistent HTTP, then throughout the duration of the persistent connection the client and server exchange HTTP messages via the same server socket. However, if the client and server use non-persistent HTTP, then a new TCP connection is created and closed for every request/response, and hence a new socket is created and later closed for every request/response. This frequent creating and closing of sockets can severely impact the performance of a busy Web server (although a number of operating system tricks can be used to mitigate the problem). Readers interested in the operating system issues surrounding persistent and non-persistent HTTP are encouraged to see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A77" data-foobar="7">[Nielsen 1997</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A68" data-foobar="7">Nahum 2002]</a>.</p>
<p id="P700101195200000000000000000A13C" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A13C">Now that we’ve discussed transport-layer multiplexing and demultiplexing, let’s move on and discuss one of the Internet’s transport protocols, UDP. In the next section we’ll see that UDP adds little more to the network-layer protocol than a multiplexing/demultiplexing service.</p>
</section>
</section>
</section></body></html>