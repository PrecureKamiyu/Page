<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Beyond Physical Memory: Policies</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part223.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part225.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 110pt;text-indent: 0pt;text-align: left;">Beyond Physical Memory: Policies</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In a virtual memory manager, life is easy when you have a lot of free memory. A page fault occurs, you find a free page on the free-page list, and assign it to the faulting page. Hey, Operating System, congratula- tions! You did it again.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Unfortunately, things get a little more interesting when little memory is free. In such a case, this <b>memory pressure </b>forces the OS to start <b>paging out </b>pages to make room for actively-used pages. Deciding which page (or pages) to <b>evict </b>is encapsulated within the <b>replacement policy </b>of the OS; historically, it was one of the most important decisions the early vir- tual memory systems made, as older systems had little physical memory. Minimally, it is an interesting set of policies worth knowing a little more about. And thus our problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">HE </span>C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>D<span class="s7">ECIDE </span>W<span class="s7">HICH </span>P<span class="s7">AGE </span>T<span class="s7">O </span>E<span class="s7">VICT</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">How can the OS decide which page (or pages) to evict from memory? This decision is made by the replacement policy of the system, which usu- ally follows some general principles (discussed below) but also includes certain tweaks to avoid corner-case behaviors.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part225.htm">22.1 Cache Management</a><a class="toc0" href="part226.htm">22.2 The Optimal Replacement Policy</a><a class="toc0" href="part227.htm">22.3 A Simple Policy: FIFO</a><a class="toc0" href="part228.htm">22.4 Another Simple Policy: Random</a><a class="toc0" href="part229.htm">22.5 Using History: LRU</a><a class="toc0" href="part230.htm">22.6 Workload Examples</a><a class="toc1" href="part231.htm">The No-Locality Workload</a><a class="toc1" href="part232.htm">Cache Size (Blocks)</a><a class="toc1" href="part233.htm">The 80-20 Workload</a><a class="toc1" href="part234.htm">Cache Size (Blocks)</a><a class="toc1" href="part235.htm">The Looping-Sequential Workload</a><a class="toc1" href="part236.htm">Cache Size (Blocks)</a><a class="toc0" href="part237.htm">22.7 Implementing Historical Algorithms</a><a class="toc0" href="part238.htm">22.8 Approximating LRU</a><a class="toc1" href="part239.htm">The 80-20 Workload</a><a class="toc1" href="part240.htm">Cache Size (Blocks)</a><a class="toc0" href="part241.htm">22.9 Considering Dirty Pages</a><a class="toc0" href="part242.htm">22.10 Other VM Policies</a><a class="toc0" href="part243.htm">22.11 Thrashing</a><a class="toc0" href="part244.htm">22.12 Summary</a><a class="toc0" href="part245.htm">References</a><a class="toc0" href="part246.htm">Homework</a><a class="toc1" href="part247.htm">Questions</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part223.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part225.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
