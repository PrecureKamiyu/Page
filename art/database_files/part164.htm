<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Practice Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part163.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part165.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 4pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">Practice Exercises</p><p style="padding-top: 11pt;padding-left: 125pt;text-indent: 0pt;text-align: left;"><b>7.1 </b>Suppose that we decompose the schema <i>R </i><span class="s15">= </span>(<i>A</i>, <i>B</i>, <i>C</i>, <i>D</i>, <i>E</i>) into</p><p style="padding-top: 10pt;padding-left: 153pt;text-indent: 0pt;text-align: center;">(<i>A</i>, <i>B</i>, <i>C</i>)</p><p style="padding-left: 156pt;text-indent: 0pt;text-align: center;">(<i>A</i>, <i>D</i>, <i>E</i>).</p><p style="padding-top: 9pt;padding-left: 150pt;text-indent: 0pt;text-align: left;">Show that this decomposition is a lossless decomposition if the following set <i>F</i></p><p style="padding-left: 150pt;text-indent: 0pt;text-align: left;">of functional dependencies holds:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 5pt;padding-left: 303pt;text-indent: 0pt;line-height: 77%;text-align: left;">A <span class="s86">→ </span>BC CD <span class="s86">→ </span>E</p><p class="s13" style="padding-left: 303pt;text-indent: 0pt;line-height: 77%;text-align: left;">B <span class="s86">→ </span>D E <span class="s86">→ </span>A</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 150pt;text-indent: -24pt;text-align: left;">7.2 <span class="p">List all nontrivial functional dependencies satisﬁed by the relation of Figure 7.18.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:265.264pt" cellspacing="0"><tr style="height:17pt"><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-right: 9pt;text-indent: 0pt;text-align: right;">A</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">B</p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="text-indent: 0pt;text-align: center;">C</p></td></tr><tr style="height:17pt"><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-right: 8pt;text-indent: 0pt;line-height: 13pt;text-align: right;">a<span class="s232">1</span></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 13pt;text-align: left;">b<span class="s232">1</span></p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 13pt;text-align: center;">c<span class="s232">1</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-right: 8pt;text-indent: 0pt;line-height: 12pt;text-align: right;">a<span class="s232">1</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s232">1</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s232">2</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-right: 8pt;text-indent: 0pt;line-height: 12pt;text-align: right;">a<span class="s232">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s232">1</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s232">1</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-right: 8pt;text-indent: 0pt;line-height: 12pt;text-align: right;">a<span class="s233">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s233">1</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s233">3</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 225pt;text-indent: 0pt;text-align: left;">Figure 7.18 <span class="s74">Relation of Exercise 7.2.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">7.3  <span class="p">Explain how functional dependencies can be used to indicate the following:</span></p><p class="s13" style="padding-top: 4pt;padding-left: 138pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s40">A one-to-one relationship set exists between entity sets </span>student <span class="p">and </span>instruc- tor<span class="p">.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 137pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s40">A many-to-one relationship set exists between entity sets </span>student <span class="p">and </span>instruc- tor<span class="p">.</span></p><p class="s15" style="padding-top: 8pt;padding-left: 118pt;text-indent: -24pt;line-height: 83%;text-align: justify;"><span class="s46">7.4 </span><span class="p">Use Armstrong’s axioms to prove the soundness of the union rule. (</span><span class="s13">Hint</span><span class="p">: Use the augmentation rule to show that, if </span>α <span class="s86">→ </span>β<span class="p">, then </span>α <span class="s86">→ </span>αβ<span class="p">. Apply the augmentation rule again, using </span>α <span class="s86">→ </span>γ<span class="p">, and then apply the transitivity rule.)</span></p><p class="s46" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: justify;">7.5  <span class="p">Use Armstrong’s axioms to prove the soundness of the pseudotransitivity rule.</span></p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -24pt;text-align: justify;"><b>7.6  </b>Compute the closure of the following set <i>F </i>of functional dependencies for rela- tion schema <i>R </i><span class="s15">= </span>(<i>A</i>, <i>B</i>, <i>C</i>, <i>D</i>, <i>E</i>).</p><p class="s13" style="padding-top: 10pt;padding-left: 272pt;text-indent: 0pt;line-height: 77%;text-align: left;">A <span class="s86">→ </span>BC CD <span class="s86">→ </span>E</p><p class="s13" style="padding-left: 272pt;text-indent: 0pt;line-height: 77%;text-align: left;">B <span class="s86">→ </span>D E <span class="s86">→ </span>A</p><p style="padding-top: 7pt;padding-left: 118pt;text-indent: 0pt;text-align: justify;">List the candidate keys for <i>R</i>.</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -24pt;text-align: justify;"><b>7.7 </b>Using the functional dependencies of Exercise 7.6, compute the canonical cover <i>F</i><span class="s97">c</span>.</p><p style="padding-top: 3pt;padding-left: 118pt;text-indent: -24pt;text-align: justify;"><b>7.8  </b>Consider the algorithm in Figure 7.19 to compute <span class="s15">α</span><span class="s239">+</span>. Show that this algorithm is more eﬃcient than the one presented in Figure 7.8 (Section 7.4.2) and that it computes <span class="s15">α</span><span class="s239">+ </span>correctly.</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -24pt;line-height: 94%;text-align: justify;"><b>7.9  </b>Given the database schema <i>R</i>(<i>A</i>, <i>B</i>, <i>C</i>), and a relation <i>r </i>on the schema <i>R</i>, write an <span class="s44">SQL </span>query to test whether the functional dependency <i>B </i><span class="s86">→ </span><i>C </i>holds on re- lation <i>r</i>. Also write an <span class="s44">SQL </span>assertion that enforces the functional dependency. Assume that no null values are present. (Although part of the <span class="s44">SQL </span>standard, such assertions are not supported by any database implementation currently.)</p><p class="s46" style="padding-top: 6pt;padding-left: 118pt;text-indent: -29pt;text-align: justify;">7.10  <span class="p">Our discussion of lossless decomposition implicitly assumed that attributes on the left-hand side of a functional dependency cannot take on null values. What could go wrong on decomposition, if this property is violated?</span></p><p style="padding-top: 7pt;padding-left: 118pt;text-indent: -29pt;line-height: 90%;text-align: justify;"><b>7.11  </b>In the <span class="s44">BCNF </span>decomposition algorithm, suppose you use a functional depen- dency <span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>to decompose a relation schema <i>r</i>(<span class="s15">α</span>, <span class="s15">β</span>, <span class="s15">γ</span>) into <i>r</i><span class="s98">1</span>(<span class="s15">α</span>, <span class="s15">β</span>) and <i>r</i><span class="s98">2</span>(<span class="s15">α</span>, <span class="s15">γ</span>).</p><p style="padding-top: 4pt;padding-left: 144pt;text-indent: -18pt;text-align: justify;">a. What primary and foreign-key constraint do you expect to hold on the decomposed relations?</p><p style="padding-top: 6pt;padding-left: 144pt;text-indent: -19pt;text-align: justify;">b.  Give an example of an inconsistency that can arise due to an erroneous update, if the foreign-key constraint were not enforced on the decomposed relations above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 174pt;text-indent: 0pt;text-align: left;"><i>result </i>:<span class="s15">= ∅</span>;</p><p style="padding-left: 186pt;text-indent: -11pt;text-align: left;">/* <i>fdcount </i>is an array whose <i>i</i>th element contains the number of attributes on the left side of the <i>i</i>th <i>FD </i>that are</p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: center;">not yet known to be in <span class="s15">α</span><span class="s239">+ </span>*/</p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;"><b>for </b><i>i </i>:<span class="s15">= </span>1 to</p><p style="text-indent: 0pt;line-height: 15pt;text-align: left;">let <span class="s15">β </span><span class="s86">→ </span><span class="s15">γ </span>denote the <i>i</i>th <i>FD</i>;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">begin</p><p class="s15" style="text-indent: 0pt;text-align: left;">|<span class="s13">F </span>| <span class="s46">do</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 72pt;text-indent: 0pt;line-height: 0pt;text-align: center;"><i>fdcount </i>[<i>i</i>] :<span class="s15">= β </span>;</p><p class="s46" style="padding-left: 59pt;text-indent: 0pt;line-height: 26pt;text-align: center;">end      <span class="s248">| |</span></p><p style="padding-left: 186pt;text-indent: -11pt;text-align: left;">/* <i>appears </i>is an array with one entry for each attribute. The entry for attribute <i>A </i>is a list of integers. Each integer</p><p class="s13" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">i <span class="p">on the list indicates that </span>A <span class="p">appears on the left side of the </span>i<span class="p">th </span>FD <span class="p">*/</span></p><p class="s46" style="padding-left: 186pt;text-indent: -11pt;text-align: left;">for each <span class="p">attribute </span><i>A </i>do begin</p><p class="s13" style="padding-left: 196pt;text-indent: 0pt;line-height: 12pt;text-align: left;">appears <span class="p">[</span>A<span class="p">] :</span><span class="s15">= </span>NIL<span class="p">;</span></p><p style="padding-left: 196pt;text-indent: 0pt;text-align: left;"><b>for </b><i>i </i>:<span class="s15">= </span>1 to</p><p class="s46" style="padding-left: 204pt;text-indent: 0pt;line-height: 12pt;text-align: left;">begin</p><p class="s15" style="text-indent: 0pt;text-align: left;">|<span class="s13">F </span>| <span class="s46">do</span></p><p style="padding-left: 214pt;text-indent: 0pt;line-height: 15pt;text-align: left;">let <span class="s15">β </span><span class="s86">→ </span><span class="s15">γ </span>denote the <i>i</i>th <i>FD</i>;</p><p class="s13" style="padding-left: 214pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>if </b>A <span class="s15">∈ β </span><b>then </b><span class="p">add </span>i <span class="p">to </span>appears <span class="p">[</span>A<span class="p">];</span></p><p class="s46" style="padding-left: 204pt;text-indent: 0pt;text-align: left;">end</p><p class="s46" style="padding-left: 186pt;text-indent: 0pt;line-height: 12pt;text-align: left;">end</p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;"><b>addin </b>(<span class="s15">α</span>);</p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;"><b>return </b>(<i>result</i>);</p><p style="padding-top: 7pt;padding-left: 174pt;text-indent: 0pt;text-align: left;"><b>procedure addin </b>(<span class="s15">α</span>);</p><p style="padding-left: 186pt;text-indent: -11pt;text-align: left;"><b>for each </b>attribute <i>A </i>in <span class="s15">α </span><b>do begin</b></p><p class="s13" style="padding-left: 204pt;text-indent: -8pt;text-align: left;"><b>if </b>A <span class="s15">∉ </span>result <b>then begin</b></p><p class="s13" style="padding-left: 214pt;text-indent: 0pt;line-height: 13pt;text-align: left;">result <span class="p">:</span><span class="s15">= </span>result <span class="s15">∪ {</span>A<span class="s15">}</span><span class="p">;</span></p><p style="padding-left: 222pt;text-indent: -8pt;text-align: left;"><b>for each </b>element <i>i </i>of <i>appears</i>[<i>A</i>] <b>do begin</b></p><p style="padding-left: 231pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><i>fdcount </i>[<i>i</i>] :<span class="s15">= </span><i>fdcount </i>[<i>i</i>] <span class="s15">− </span>1;</p><p style="padding-left: 240pt;text-indent: -8pt;text-align: left;"><b>if </b><i>fdcount </i>[<i>i</i>] :<span class="s15">= </span>0 <b>then begin</b></p><p style="padding-left: 250pt;text-indent: 0pt;line-height: 14pt;text-align: left;">let <span class="s15">β </span><span class="s86">→ </span><span class="s15">γ </span>denote the <i>i</i>th <i>FD</i>;</p><p style="padding-left: 250pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>addin </b>(<span class="s15">γ</span>);</p><p class="s46" style="padding-left: 240pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="text-indent: 0pt;text-align: left;">end</p><p class="s46" style="text-indent: 0pt;text-align: left;">end</p><p class="s74" style="padding-top: 7pt;padding-left: 214pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 7.19 </span>An algorithm to compute <span class="s112">α</span><span class="s240">+</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 144pt;text-indent: -18pt;text-align: justify;">c. When a relation schema is decomposed into <span class="s44">3NF </span>using the algorithm in Section 7.5.2, what primary and foreign-key dependencies would you ex- pect to hold on the decomposed schema?</p><p class="s106" style="text-indent: 0pt;line-height: 6pt;text-align: left;">I</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 118pt;text-indent: -29pt;line-height: 89%;text-align: left;"><b>7.12 </b>Let <i>R</i><span class="s98">1</span>, <i>R</i><span class="s98">2</span>, <span class="s15">… </span>, <i>R</i><span class="s145">n </span>be a decomposition of schema <i>U</i>. Let <i>u</i>(<i>U </i>) bea relation, and let <i>r</i><span class="s145">i </span><span class="s15">= Π</span><i>R</i><i> </i>(<i>u</i>). Show that</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 1pt;padding-left: 230pt;text-indent: 0pt;text-align: left;">u <span class="s83">⊆ </span>r<span class="s130">1 </span><span class="s86">⋈ </span>r<span class="s130">2 </span><span class="s86">⋈ ⋯ ⋈ </span>r<span class="s97">n</span></p><p class="s46" style="padding-top: 8pt;padding-left: 118pt;text-indent: -29pt;text-align: left;">7.13 <span class="p">Show that the decomposition in Exercise 7.1 is not a dependency-preserving decomposition.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 118pt;text-indent: -28pt;text-align: left;">7.14 <span class="p">Show that there can be more than one canonical cover for a given set of func- tional dependencies, using the following set of dependencies:</span></p><p class="s13" style="padding-top: 10pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">X <span class="s86">→ </span>YZ<span class="p">, </span>Y <span class="s86">→ </span>XZ<span class="p">, and </span>Z <span class="s86">→ </span>XY <span class="p">.</span></p><p class="s46" style="padding-top: 3pt;padding-left: 118pt;text-indent: -29pt;text-align: justify;">7.15  <span class="p">The algorithm to generate a canonical cover only removes one extraneous at- tribute at a time. Use the functional dependencies from Exercise 7.14 to show what can go wrong if two attributes inferred to be extraneous are deleted at once.</span></p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -29pt;text-align: justify;"><b>7.16  </b>Show that it is possible to ensure that a dependency-preserving decomposition into <span class="s44">3NF </span>is a lossless decomposition by guaranteeing that at least one schema contains a candidate key for the schema being decomposed. (<i>Hint</i>: Show that the join of all the projections onto the schemas of the decomposition cannot have more tuples than the original relation.)</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -28pt;text-align: justify;"><b>7.17  </b>Give an example of a relation schema <i>R</i><span class="s181">′</span><span class="s15"> </span>and set <i>F </i><span class="s181">′</span><span class="s15"> </span>of functional dependen- cies such that there are at least three distinct lossless decompositions of <i>R</i><span class="s181">′</span><span class="s15"> </span>into <span class="s44">BCNF</span>.</p><p style="padding-top: 7pt;padding-left: 118pt;text-indent: -29pt;line-height: 83%;text-align: justify;"><b>7.18 </b>Let a <span class="s63">prime </span>attribute be one that appears in at least one candidate key. Let <span class="s15">α </span>and <span class="s15">β </span>be sets of attributes such that <span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>holds, but <span class="s15">β </span><span class="s86">→ </span><span class="s15">α </span>does not hold. Let <i>A </i>be an attribute that is not in <span class="s15">α</span>, is not in <span class="s15">β</span>, and for which <span class="s15">β </span><span class="s86">→ </span><i>A </i>holds. We say that <i>A </i>is <span class="s63">transitively dependent </span>on <span class="s15">α</span>. We can restate the deﬁnition of <span class="s44">3NF </span>as follows:</p><p style="padding-left: 118pt;text-indent: 0pt;text-align: justify;">A relation schema <i>R </i>is in <span class="s44">3NF </span>with respect to a set <i>F </i>of functional dependencies if there are no nonprime attributes <i>A </i>in <i>R </i>for which <i>A </i>is transitively dependent on a key for <i>R</i>. Show that this new deﬁnition is equivalent to the original one.</p><p style="padding-top: 6pt;padding-left: 118pt;text-indent: -29pt;line-height: 81%;text-align: justify;"><b>7.19 </b>A functional dependency <span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>is called a <span class="s63">partial dependency </span>if there is a proper subset <span class="s15">γ </span>of <span class="s15">α </span>such that <span class="s15">γ </span><span class="s86">→ </span><span class="s15">β</span>; we say that <span class="s15">β </span>is <i>partially dependent </i>on <span class="s15">α</span>.A relation schema <i>R </i>is in <span class="s63">second normal form </span>(<span class="s64">2NF</span>) if each attribute <i>A </i>in <i>R </i>meets</p><p style="padding-left: 118pt;text-indent: 0pt;text-align: justify;">one of the following criteria:</p><p class="s39" style="padding-top: 4pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">• <span class="s40">It appears in a candidate key.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 153pt;text-indent: 0pt;text-align: left;">• <span class="s40">It is not partially dependent on a candidate key.</span></p><p style="padding-top: 6pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">Show that every <span class="s44">3NF </span>schema is in <span class="s44">2NF</span>. (<i>Hint</i>: Show that every partial depen- dency is a transitive dependency.)</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;"><b>7.20 </b>Give an example of a relation schema <i>R </i>and a set of dependencies such that <i>R</i></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;">is in <span class="s44">BCNF </span>but is not in <span class="s44">4NF</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part163.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part165.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
