<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>26.6  Smart Contracts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part466.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part468.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">26.6  <span style=" color: #00AEEF;">Smart Contracts</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">So far, we have focused on simple funds-transfer transactions. Actual blockchain trans- actions can be more complex because they may include executable code. Blockchains diﬀer not only in the supported language(s) for such code, but also, and more im- portantly, in the power of those languages. Some blockchains oﬀer Turing-complete languages, that is, languages that can express all possible computations. Others oﬀer more limited languages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">26.6.1 Languages and Transactions</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Bitcoin uses a language of limited power that is suitable for deﬁning many standard types of conditional funds-transfer transactions. Key to this capability is its <i>multisig</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">instruction, which requires <i>m </i>of <i>n </i>speciﬁed users to approve the transfer. This enables escrow transactions in which a trusted third party resolves any dispute between the two parties to the actual transfer. It also enables grouping several transactions between two users into one larger transaction without having to submit each component transaction separately to the blockchain. Because adding transactions to the blockchain has a time delay and a cost in transaction fees, this feature is quite important. This concept has been extended in oﬀ-chain processing systems, which we discuss in Section 26.7.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Ethereum as well as most blockchains targeting enterprise applications include a language that is Turing complete. Many use familiar programming languages or vari- ants based heavily on such languages. This would seem like an obvious advantage over less-powerful languages, but it comes at some risk. Whereas it is impossible to write an inﬁnite loop in Bitcoin’s language, it is possible to do so in any Turing-complete language. A malicious user could submit a transaction that encodes an inﬁnite loop, thereby consuming an arbitrarily large amount of resources for any node attempting to include that transaction in a newly mined block. Testing code for termination, the halting problem, is a provably unsolvable problem in the general case. Even if the ma- licious user avoids an inﬁnite loop, that user could submit code that runs for an excep- tionally long time, again consuming miner resources. The solution to this problem is that users submitting a transaction agree to pay the miner for code execution, with an upper bound placed on the payment. This limits the amount of total execution to some bounded amount of time.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The decentralized nature of a blockchain leads to an incentive system for users to convince miners to include their transaction and thus execute their code. Ethereum’s solution is based on the concept of <i>gas</i>, so named as to provide an analogy to auto- mobile fuel. Each instruction consumes a ﬁxed amount of gas. Gas consumption in a transaction is governed by three parameters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s63" style="padding-left: 113pt;text-indent: -16pt;text-align: justify;">1. <span style=" color: #231F20;">Gas price: </span><span class="p">the amount of ether the user is oﬀering to pay the miner for one unit of gas.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;">2. <span style=" color: #231F20;">Transaction gas limit: </span><span class="p">the upper bound on transaction gas consumption. Trans- actions that exceed their gas limit are aborted. The miner keeps the payment, but the transaction actions are never committed to the blockchain.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;">3. <span style=" color: #231F20;">Block gas limit: </span><span class="p">a limit in the blockchain system itself on the sum over all trans- actions in a block of their transaction gas limits.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">A user who sets a gas price too low may face a long wait to ﬁnd a miner willing to include the transaction. Setting the gas price too high results in the user overpaying.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Another hard choice is that of the gas limit. It is hard to set the limit to the pre- cise amount of gas that the contract will use. A user who sets the limit too low risks transaction failure, while a user who, fearing “running out of gas,” sets the transaction gas limit excessively high may ﬁnd that miners are unwilling to include the transaction because it consumes too large a fraction of the block gas limit. The result of this is an</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">interesting problem for transaction designers in optimizing for both cost and speed of mining.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In a Bitcoin-style transaction, transaction ordering is explicit. In a state-based blockchain like Ethereum, there is no explicit concept of input transactions. However, there may be important reasons why a smart contract may wish to enforce a transaction order. For transactions coming from the same account, Ethereum forces those trans- actions to be mined in the order in which the account created them by means of an <i>account nonce </i>associated with the transaction. An account nonce is merely a sequence number associated with each transaction from an account, and the set of transactions from an account must have consecutive sequence numbers. Two transactions from an account cannot have the same sequence number, and a transaction is accepted only after the transaction with the previous sequence number has been accepted, thus pre- venting any cheating in transaction ordering. If the transactions to be ordered are from diﬀerent accounts, they need to be designed such that the second transaction in the ordering would fail to validate until after the ﬁrst transaction is processed.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The fact that miners must run the smart-contract code of transactions they wish to include in a block, and that all full nodes must run the code of all transactions in mined blocks, regardless of which node mined the block, leads to a concern about security. Code is run in a safe manner, usually on a virtual machine designed in the style of the Java virtual machine. Ethereum has its own virtual machine, called the <span class="s44">EVM</span>. Hyperledger executes code in Docker containers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">26.6.2 External Input</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A smart contract may be deﬁned in terms of external events. As a simple example, consider a crop-insurance smart contract for a farmer that pays the farmer an amount of money dependent on the amount of rainfall in the growing season. Since the amount of rainfall in any future season is not known when the smart contract is written, that value cannot be hard-coded. Instead, input must be taken from an external source that is trusted by all parties to the smart contract. Such an external source is called an <span class="s63">oracle</span>.<span class="s76">6</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Oracles are essential to smart contracts in many business applications. The fact that the oracle must be trusted is a compromise on the general trustlessness of a blockchain environment. However, this is not a serious compromise in the sense that only the parties to a contract need to agree on any oracles used and, once that agreement is made, the agreement is coded into the smart contract and is immutable from that point forward.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Corruption of an oracle after it is coded into an operating smart contract is a real problem. This issue could be left as an externality for the legal system but ideally, a process for settlement of future disputes would be coded into the contract in a variety of ways. For example, parties to the contract could be required to send the contract</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_3469.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">6<span class="s78">This term is rooted in ancient Greek culture and bears no relationship to the company by the same name.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">certiﬁcation messages periodically, and code could be written deﬁning actions to be taken in case a party fails to recertify its approval of the oracle.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Direct external output from a smart contract is problematic since such output would have to occur during its execution and thus before the corresponding transaction is added to the blockchain. Ethereum, for example, deals with this by allowing a smart contract to <i>emit events </i>that are then logged in the blockchain. The public visibility of the blockchain then allows the actions of the smart contract to trigger activity external to the blockchain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">26.6.3 Autonomous Smart Contracts</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In many blockchains, including Ethereum, smart contracts can be deployed as indepen- dent entities. Such smart contracts have their own account, balance, and storage. This allows users (or other smart contracts) to use services provided by a smart contract and to send or receive currency from a smart contract.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Depending on how a speciﬁc smart contract is coded, a user may be able, by design, to control the smart contract by sending it messages (transactions). A smart contract may be coded so that it operates indeﬁnitely and autonomously. Such a contract is referred to as a <span class="s63">distributed autonomous organization </span>(<span class="s44">DAO</span>).<span class="s76">7</span> <span class="s44">DAO</span>s, once established, are diﬃcult to control and manage. There is no way to install bug ﬁxes. In addition, there are many unanswered questions about legal and regulatory matters. However, the ability to create these entities that communicate, store data, and do business independent of any user is one of the most powerful features of the blockchain concept. In an enterprise setting, smart contracts operate under some form of control by an organization or a consortium.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A smart contract may be used to create a currency on top of another currency. Ethereum often serves as the base blockchain as this allows the rich existing ecosystem for Ethereum to be leveraged to provide underlying infrastructure. Such higher-level currency units are called tokens, and the process of creating such currencies is referred to as an <span class="s63">initial coin oﬀering </span>(<span class="s44">ICO</span>). An important added beneﬁt of using an existing blockchain as the basis for a token is that it is then possible to reuse key elements of the user infrastructure, most importantly the wallet software users need to store tokens. The <span class="s44">ERC-20 </span>Ethereum standard for tokens is widely used. More recent standards, including <span class="s44">ERC-223, ERC-621, ERC-721, ERC-777</span>, and <span class="s44">ERC-827</span>, are discussed in the references in the Further Reading section at the end of the chapter.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The relative ease of creating an <span class="s44">ICO </span>has made it an important method of funding new ventures, but this has also led to several scams, resulting in attempts by govern- ments to regulate this fundraising methodology.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Beyond fundraising, an important application of smart contracts is to create inde- pendent, autonomous service providers whose operation is controlled not by humans</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_3470.png"/></span></p><p class="s78" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s77">7</span>The general use of <span class="s153">DAO </span>is distinct from a speciﬁc distributed autonomous organization called “The <span class="s153">DAO</span>”. The <span class="s153">DAO </span>was a crowdfunded venture-capital operation that failed due to a bug that enabled a major theft of funds (see Note 26.1 on page 1258).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">but by source code, often open-source. In this way, trustless services that do not require their users to trust any person or organization can be created. As we noted earlier, a fully autonomous contract cannot be stopped or modiﬁed. Thus, bugs last forever, and the contract can continue as long as it can raise enough currency to support its oper- ation (i.e., for Ethereum, earn enough ether to pay for gas). These risks suggest that some compromise on the concept of trustlessness may make sense in smart-contract design, such as giving the contract creator the ability to send a self-destruct message to the contract.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">26.6.4 Cross-Chain Transactions</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Up to this point, we have assumed implicitly that a blockchain transaction is limited to one speciﬁc blockchain. If one wished to transfer currency from an account on one blockchain to another account that is on a diﬀerent blockchain, not only is there the issue that the currencies are not the same, but also there is the problem that the two blockchains have to agree on the state of this cross-chain transaction at each point in time.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We have seen a related problem for distributed databases. If a single organization controls the entire distributed system, then two-phase commit can be used. However, if the system is controlled by multiple organizations as in the federated systems discussed in Section 23.5.3, coordination is more diﬃcult. In the blockchain setting, the high level of autonomy of each system and the requirement of immutability set an even higher barrier.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The simplest solution is to use a trusted intermediary organization that operates much like one that exchanges traditional ﬁat currencies.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If both users have accounts on both blockchains, a trustless transaction can be deﬁned by creating transactions on each chain for the required funds transfer that are designed such that if one transaction is added to its blockchain its smart-contract code reveals a secret that ensures that other transactions cannot be canceled. Techniques used include the following, among others:</p><p class="s39" style="padding-top: 6pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Time-lock transactions that reverse after a certain period of time unless speciﬁc events occur.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;text-align: justify;">• <span class="s40">Cross-chain exchange of Merkle-tree headers for validation purposes.</span></p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A risk in these techniques is the possibility that a successfully mined transaction winds up on an orphaned fork, though there are ways to mitigate these risks. The details are system speciﬁc. See the Further Reading section at the end of the chapter.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A more general solution is to create a smart contract that implements a market sim- ilar conceptually to a stock exchange in which willing buyers and sellers are matched. Such a contract operates in the role of trusted intermediary rather than a human-run bank or brokerage as would be used for ﬁat currencies. The technical issues in cross- chain transactions remain an area of active research.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part466.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part468.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
