<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>1.4   Database Languages</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part54.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part56.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">1.4   <span style=" color: #00AEEF;">Database Languages</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A database system provides a <span class="s63">data-deﬁnition language </span>(<span class="s64">DDL</span>) to specify the database schema and a <span class="s63">data-manipulation language </span>(<span class="s64">DML</span>) to express database queries and up- dates. In practice, the data-deﬁnition and data-manipulation languages are not two sep- arate languages; instead they simply form parts of a single database language, such as the <span class="s44">SQL </span>language. Almost all relational database systems employ the <span class="s44">SQL </span>language, which we cover in great detail in Chapter 3, Chapter 4, and Chapter 5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">1.4.1 Data-Definition Language</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We specify a database schema by a set of deﬁnitions expressed by a special language called a data-deﬁnition language (<span class="s44">DDL</span>). The <span class="s44">DDL </span>is also used to specify additional properties of the data.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We specify the storage structure and access methods used by the database system by a set of statements in a special type of <span class="s44">DDL </span>called a <span class="s63">data storage and deﬁnition </span>language. These statements deﬁne the implementation details of the database schemas, which are usually hidden from the users.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance of a department must never be negative. The <span class="s44">DDL </span>provides facilities to specify such constraints. The database system checks these constraints every time the database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus, database systems implement only those integrity constraints that can be tested with minimal overhead:</p><p class="s39" style="padding-top: 10pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Domain Constraints</span><span class="p">. A domain of possible values must be associated with every attribute (for example, integer types, character types, date/time types). Declaring an attribute to be of a particular domain acts as a constraint on the values that it</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: justify;">can take. Domain constraints are the most elementary form of integrity constraint. They are tested easily by the system whenever a new data item is entered into the database.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_033.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_034.png"/></span></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s63">Referential Integrity</span>. There are cases where we wish to ensure that a value that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example, the depart- ment listed for each course must be one that actually exists in the university. More precisely, the <i>dept name </i>value in a <i>course </i>record must appear in the <i>dept name </i>attribute of some record of the <i>department </i>relation. Database modiﬁcations can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the violation.</p><p class="s63" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Authorization<span class="p">. We may want to diﬀerentiate among the users as far as the type of access they are permitted on various data values in the database. These diﬀerentia- tions are expressed in terms of </span>authorization<span class="p">, the most common being: </span>read autho- rization<span class="p">, which allows reading, but not modiﬁcation, of data; </span>insert authorization<span class="p">, which allows insertion of new data, but not modiﬁcation of existing data; </span>update authorization<span class="p">, which allows modiﬁcation, but not deletion, of data; and </span>delete au- thorization<span class="p">, which allows deletion of data. We may assign the user all, none, or a combination of these types of authorization.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The processing of <span class="s44">DDL </span>statements, just like those of any other programming lan- guage, generates some output. The output of the <span class="s44">DDL </span>is placed in the <span class="s63">data dictionary</span>, which contains <span class="s63">metadata </span>— that is, data about data. The data dictionary is considered to be a special type of table that can be accessed and updated only by the database sys- tem itself (not a regular user). The database system consults the data dictionary before reading or modifying actual data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">1.4.2 The <span class="s81">SQL </span>Data-Definition Language</p><p class="s42" style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">SQL <span class="s43">provides a rich </span>DDL <span class="s43">that allows one to deﬁne tables with data types and integrity constraints.</span></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">For instance, the following <span class="s44">SQL DDL </span>statement deﬁnes the <i>department </i>table:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_035.png"/></span></p><p class="s13" style="padding-left: 214pt;text-indent: -13pt;text-align: left;"><b>create table </b>department <span class="p">(</span>dept name  <b>char </b><span class="p">(20), </span>building   <b>char </b><span class="p">(15),</span></p><p class="s13" style="padding-left: 217pt;text-indent: 0pt;text-align: left;">budget   <b>numeric </b><span class="p">(12,2));</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_036.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Execution of the preceding <span class="s44">DDL </span>statement creates the <i>department </i>table with three columns: <i>dept name</i>, <i>building</i>, and <i>budget</i>, each of which has a speciﬁc data type asso- ciated with it. We discuss data types in more detail in Chapter 3.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_037.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL DDL </span>also supports a number of types of integrity constraints. For exam- ple, one can specify that the <i>dept name </i>attribute value is a <i>primary key</i>, ensuring that no</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_038.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_039.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">two departments can have the same department name. As another example, one can specify that the <i>dept name </i>attribute value appearing in any <i>instructor </i>record must also appear in the <i>dept name </i>attribute of some record of the <i>department </i>table. We discuss <span class="s44">SQL </span>support for integrity constraints and authorizations in Chapter 3 and Chapter 4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">1.4.3 Data-Manipulation Language</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A <span class="s63">data-manipulation language </span>(<span class="s64">DML</span>) is a language that enables users to access or ma- nipulate data as organized by the appropriate data model. The types of access are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Retrieval of information stored in the database.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Insertion of new information into the database.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Deletion of information from the database.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Modiﬁcation of information stored in the database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">There are basically two types of data-manipulation language:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s63">Procedural </span><span class="s82">DML</span><span class="s63">s </span>require a user to specify <i>what </i>data are needed and <i>how </i>to get those data.</p><p class="s63" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>Declarative <span class="s82">DML</span>s <span class="p">(also referred to as </span>nonprocedural <span class="s82">DML</span>s<span class="p">) require a user to spec- ify </span><span class="s13">what </span><span class="p">data are needed </span><span class="s13">without </span><span class="p">specifying how to get those data.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Declarative <span class="s44">DML</span>s are usually easier to learn and use than are procedural <span class="s44">DML</span>s. However, since a user does not have to specify how to get the data, the database system has to ﬁgure out an eﬃcient means of accessing data.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A <span class="s63">query </span>is a statement requesting the retrieval of information. The portion of a <span class="s44">DML </span>that involves information retrieval is called a <span class="s63">query language</span>. Although technically incorrect, it is common practice to use the terms <i>query language </i>and <i>data-manipulation language </i>synonymously.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There are a number of database query languages in use, either commercially or experimentally. We study the most widely used query language, <span class="s44">SQL</span>, in Chapter 3 through Chapter 5.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The levels of abstraction that we discussed in Section 1.3 apply not only to deﬁning or structuring data, but also to manipulating data. At the physical level, we must deﬁne algorithms that allow eﬃcient access to data. At higher levels of abstraction, we em- phasize ease of use. The goal is to allow humans to interact eﬃciently with the system. The query processor component of the database system (which we study in Chapter 15 and Chapter 16) translates <span class="s44">DML </span>queries into sequences of actions at the physical level of the database system. In Chapter 22, we study the processing of queries in the increasingly common parallel and distributed settings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">1.4.4 The <span class="s81">SQL </span>Data-Manipulation Language</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s44">SQL </span>query language is nonprocedural. A query takes as input several tables (pos- sibly only one) and always returns a single table. Here is an example of an <span class="s44">SQL </span>query that ﬁnds the names of all instructors in the History department:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 192pt;text-indent: 0pt;text-align: left;"><b>select </b>instructor<span class="p">.</span>name</p><p class="s46" style="padding-left: 192pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_040.png"/></span></p><p class="s13" style="padding-left: 192pt;text-indent: 0pt;text-align: left;"><b>where </b>instructor<span class="p">.</span>dept name <span class="s15">= </span><span class="p">&#39;History&#39;;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_041.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_042.png"/></span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The query speciﬁes that those rows from the table <i>instructor </i>where the <i>dept name </i>is History must be retrieved, and the <i>name </i>attribute of these rows must be displayed. The result of executing this query is a table with a single column labeled <i>name </i>and a set of rows, each of which contains the name of an instructor whose <i>dept name </i>is History. If the query is run on the table in Figure 1.1, the result consists of two rows, one with the name El Said and the other with the name Caliﬁeri.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Queries may involve information from more than one table. For instance, the fol- lowing query ﬁnds the instructor <span class="s44">ID </span>and department name of all instructors associated with a department with a budget of more than $95,000.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_043.png"/></span></p><p style="padding-left: 157pt;text-indent: 0pt;text-align: left;"><b>select </b><i>instructor</i>.<span class="s69">ID</span>, <i>department</i>.<i>dept name</i></p><p class="s13" style="padding-left: 157pt;text-indent: 0pt;text-align: left;"><b>from </b>instructor<span class="p">, </span>department</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_044.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_045.png"/></span></p><p class="s13" style="padding-left: 157pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>where </b>instructor<span class="p">.</span>dept name<span class="s15">= </span>department<span class="p">.</span>dept name <b>and</b></p><p class="s13" style="padding-left: 185pt;text-indent: 0pt;line-height: 20pt;text-align: left;">department<span class="p">.</span>budget <span class="s83">&gt; </span><span class="p">95000;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_046.png"/></span></p><p style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">If the preceding query were run on the tables in Figure 1.1, the system would ﬁnd that there are two departments with a budget of greater than $95,000 — Computer Science and Finance; there are ﬁve instructors in these departments. Thus, the result consists of a table with two columns (<span class="s69">ID</span>, <i>dept name</i>) and ﬁve rows: (12121, Finance), (45565, Com- puter Science), (10101, Computer Science), (83821, Computer Science), and (76543, Finance).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">1.4.5 Database Access from Application Programs</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Non-procedural query languages such as <span class="s44">SQL </span>are not as powerful as a universal Turing machine; that is, there are some computations that are possible using a general-purpose programming language but are not possible using <span class="s44">SQL</span>. <span class="s44">SQL </span>also does not support ac- tions such as input from users, output to displays, or communication over the network. Such computations and actions must be written in a <i>host </i>language, such as C/C++, Java, or Python, with embedded <span class="s44">SQL </span>queries that access the data in the database. <span class="s63">Application programs </span>are programs that are used to interact with the database in this fashion. Examples in a university system are programs that allow students to register for courses, generate class rosters, calculate student <span class="s44">GPA</span>, generate payroll checks, and perform other tasks.</p><p class="s66" style="padding-top: 3pt;padding-left: 372pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">1.5 </a><span style=" color: #00AEEF;">Database Design</span><span class="s67">  </span><span class="s20">17</span><a name="bookmark25">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To access the database, <span class="s44">DML </span>statements need to be sent from the host to the database where they will be executed. This is most commonly done by using an application-program interface (set of procedures) that can be used to send <span class="s44">DML </span>and <span class="s44">DDL </span>statements to the database and retrieve the results. The Open Database Con- nectivity (<span class="s44">ODBC</span>) standard deﬁnes application program interfaces for use with C and several other languages. The Java Database Connectivity (<span class="s44">JDBC</span>) standard deﬁnes a corresponding interface for the Java language.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part54.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part56.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
