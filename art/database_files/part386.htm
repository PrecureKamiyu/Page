<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>21.3  Dealing with Skew in Partitioning</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part385.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part387.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">21.3  <span style=" color: #00AEEF;">Dealing with Skew in Partitioning</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">When a relation is partitioned (by a technique other than round-robin), there may be a skew in the distribution of tuples, with a high percentage of tuples placed in some</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">partitions and fewer tuples in other partitions. Such an imbalance in the distribution of data is called <span class="s63">data distribution skew</span>. Data distribution skew may be caused by one of two factors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Attribute-value skew</span><span class="p">, which refers to the fact that some values appear in the parti- tioning attributes of many tuples. All the tuples with the same value for the parti- tioning attribute end up in the same partition, resulting in skew.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Partition skew</span><span class="p">, which refers to the fact that there may be load imbalance in the partitioning, even when there is no attribute skew.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Attribute-value skew can result in skewed partitioning regardless of whether range partitioning or hash partitioning is used. If the partition vector is not chosen carefully, range partitioning may result in partition skew. Partition skew is less likely with hash partitioning if a good hash function is chosen.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As Section 20.4.2 noted, even a small skew can result in a signiﬁcant decrease in performance. Skew becomes an increasing problem with a higher degree of parallelism. For example, if a relation of 1000 tuples is divided into 10 parts, and the division is skewed, then there may be some partitions of size less than 100 and some partitions of size more than 100; if even one partition happens to be of size 200, the speedup that we would obtain by accessing the partitions in parallel is only 5, instead of the 10 for which we would have hoped. If the same relation has to be partitioned into 100 parts, a partition will have 10 tuples on an average. If even one partition has 40 tuples (which is possible, given the large number of partitions) the speedup that we would obtain by accessing them in parallel would be 25, rather than 100. Thus, we see that the loss of speedup due to skew increases with parallelism.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In addition to skew in the distribution of tuples, there may be <span class="s63">execution skew </span>even if there is no skew in the distribution of tuples, if queries tend to access some partitions more often than others. For example, suppose a relation is partitioned by the timestamp of the tuples, and most queries refer to recent tuples; then, even if all partitions contain the same number of tuples, the partition containing recent tuples would experience a signiﬁcantly higher load.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">In the rest of this section, we consider several approaches to handling skew.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">21.3.1 Balanced Range-Partitioning Vectors</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Data distribution skew in range partitioning can be avoided by choosing a <span class="s63">balanced range-partitioning vector</span>, which evenly distributes tuples across all nodes.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A balanced range-partitioning vector can be constructed by sorting, as follows: The relation is ﬁrst sorted on the partitioning attributes. The relation is then scanned in sorted order. After every 1<span class="s15">∕</span><i>n </i>of the relation has been read, the value of the partitioning attribute of the next tuple is added to the partition vector. Here, <i>n </i>denotes the number of partitions to be constructed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">The main disadvantage of this method is the extra <span class="s44">I/O </span>overhead incurred in doing the initial sort. The <span class="s44">I/O </span>overhead for constructing balanced range-partitioning vectors can be reduced by using a precomputed frequency table, or <span class="s63">histogram</span>, of the attribute values for each attribute of each relation. Figure 21.2 shows an example of a histogram for an integer-valued attribute that takes values in the range 1 to 25. It is straightfor- ward to construct a balanced range-partitioning function given a histogram on the par- titioning attributes. A histogram takes up only a little space, so histograms on several diﬀerent attributes can be stored in the system catalog. If the histogram is not stored, it can be computed approximately by sampling the relation, using only tuples from a randomly chosen subset of the disk blocks of the relation. Using a random sample al- lows the histogram to be constructed in much less time than it would take to sort the relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The preceding approach for creating range-partitioning vectors addresses data- distribution skew; extensions to handle execution skew are left as an exercise for the reader (Exercise 21.3).</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A drawback of the above approach is that it is <i>static</i>: the partitioning is decided at some point and is not automatically updated as tuples are inserted, deleted, or up- dated. The partitioning vectors can be recomputed, and the data repartitioned, when- ever the system detects skew in data distribution. However, the cost of repartitioning can be quite large, and doing it periodically would introduce a high load which can aﬀect normal processing. Dynamic techniques for avoiding skew, which can adapt in a continuous and less disruptive fashion, are discussed in Section 21.3.2 and in Section 21.3.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">21.3.2 Virtual Node Partitioning</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">Another approach to minimizing the eﬀect of skew is to use <i>virtual nodes</i>. In the <span class="s63">virtual nodes </span>approach, we pretend there are several times as many <i>virtual nodes </i>as the number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="227" height="152" alt="image" src="Image_3145.png"/></span></p><p class="s469" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">50</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s469" style="padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">frequency</p><p style="text-indent: 0pt;text-align: left;"/><p class="s469" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">40</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s469" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">30</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s469" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">20</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s469" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">10</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s469" style="padding-top: 7pt;padding-left: 143pt;text-indent: 0pt;text-align: center;">1–5  6–10 11–15 16–20 21–25</p><p class="s469" style="padding-top: 2pt;padding-left: 149pt;text-indent: 0pt;text-align: center;">value</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 228pt;text-indent: 0pt;text-align: left;">Figure 21.2 <span class="s74">Example of histogram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">of real nodes. Any of the partitioning techniques described earlier can be used, but to map tuples and work to virtual nodes instead of to real nodes.<span class="s76">3</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Virtual nodes, in turn, are mapped to real nodes. One way to map virtual nodes to real nodes is round-robin allocation; thus, if there are <i>n </i>real nodes numbered 1 to <i>n</i>, virtual node <i>i </i>is mapped to real node ((<i>i </i><span class="s15">− </span>1)<i>modn</i>) <span class="s15">+ </span>1. The idea is that even if one range had many more tuples than the others because of skew, these tuples would get split across multiple virtual nodes ranges. Round-robin allocation of virtual nodes to real nodes would distribute the extra work among multiple real nodes, so that one node does not have to bear all the burden.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A more sophisticated way of doing the mapping is by tracking the number of tuples in each virtual node, and the load (e.g., the number of accesses per second) on each virtual node. Virtual nodes are then mapped to real nodes in a way that balances the number of stored tuples as well as the load across the real nodes. Thus, data-distribution skew and execution skew can be minimized.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3146.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3147.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3148.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The system must then record this mapping and use it to route accesses to the correct real node. If virtual nodes are numbered by consecutive integers, this mapping can be stored as an array <i>virtual to real map[]</i>, with <i>m </i>entries, where there are <i>m </i>virtual nodes; the <i>i</i>th element of this array stores the real node to which virtual node <i>i </i>is mapped.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Yet another beneﬁt of the virtual node approach is that it allows <span class="s63">elasticity of storage</span>, that is, as the load on the system increases it is possible to add more resources (nodes) to the system to handle the load. When a new node is added, some of the virtual nodes are <i>migrated </i>to the new real node, which can be done without aﬀecting any of the other virtual nodes. If the amount of data mapped to each virtual node is small, the migration of a virtual node from one node to another can be done relatively fast, minimizing disruption.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">21.3.3 Dynamic Repartitioning</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">While the virtual-node approach can reduce skew with range partitioning as well as hash partitioning, it does not work very well if the data distribution changes over time, resulting in some virtual nodes having a very large number of tuples, or a very high execution load. For example, if partitioning was done by timestamps of records, the last timestamp range would get an increasing number of records, as more records are inserted, while other ranges would not get any new records. Thus, even if the initial partitioning is balanced, it could become increasingly skewed over time.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Skew can be dealt with by recomputing the partitioning scheme entirely. However, repartitioning the data based on the new partitioning scheme would, in general, be a very expensive operation. In the preceding example, we would end up moving a signiﬁ- cant number of records from each partition to a partition that precedes it in timestamp</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_3149.png"/></span></p><p class="s80" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s77">3</span><span class="s78">The virtual node approach is also called the </span><span class="s162">virtual processor </span>approach, a term used in earlier editions of this book; since the <i>term virtual </i>processor is now commonly used in a diﬀerent sense in the context of virtual machines, we now use the term <i>virtual node</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">order. When dealing with large amounts of data, such repartitioning would be unrea- sonably expensive.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Dynamic repartitioning can be done in an eﬃcient manner by instead exploiting the virtual node scheme. The basic idea is to split a virtual node into two virtual nodes when it has too many tuples, or too much load; the idea is very similar to a B<span class="s181">+</span>-tree node being split into two nodes when it is overfull. One of the newly created virtual nodes can then be migrated to a diﬀerent node to rebalance the data stored at each node, or the load at each node.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Considering the preceding example, if the virtual node corresponding to a range of timestamps 2017-01-01 to <i>MaxDate </i>were to become overfull, the partition could be split into two partitions. For example, if half the tuples in this range have timestamps less than 2018-01-01, one partition would have timestamps from 2017-01-01 to less than 2018-01-01, and the other would have tuples with timestamps from 2018-01-01 to <i>Max- Date</i>. To rebalance the number of tuples in a real node, we would just need to move one of the virtual nodes to a new real node.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Dynamic repartitioning in this way is very widely used in parallel databases and parallel data storage systems today. In data storage systems, the term <span class="s63">table </span>refers to a collection of data items. Tables are partitioned into multiple <span class="s63">tablets</span>. The number of tablets into which a table is divided is much larger than the number of real nodes in the system; thus tablets correspond to virtual nodes.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The system needs to maintain a <span class="s63">partition table</span>, which provides a mapping from the partitioning key ranges to a tablet identiﬁer, as well as the real node on which the tablet</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 84%;text-align: justify;">data reside. Figure 21.3 shows an example of a partition table, where the partition key is a date. Tablet0 stores records with key value <span class="s83">&lt; </span>2012-01-01. Tablet1 stores records</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">with key values <span class="s86">≥ </span>2012-01-01, but <span class="s83">&lt; </span>2013-01-01. Tablet2 stores records with key values</p><p style="padding-left: 137pt;text-indent: -17pt;line-height: 70%;text-align: justify;"><span class="s86">≥ </span>2013-01-01, but <span class="s83">&lt; </span>2014-01-01, and so on. Finally, Tablet6 stores values <span class="s86">≥ </span>2017-01-01. Read requests must specify a value for the partitioning attribute, which is used to</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">identify the tablet which could contain a record with that key value; a request that does not specify a value for the partitioning attribute would have to be sent to all tablets. A read request is processed by using the partitioning key value <i>v </i>to identify the tablet</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:169.924pt" cellspacing="0"><tr style="height:17pt"><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Value</p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Tablet ID</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Node ID</p></td></tr><tr style="height:16pt"><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2012-01-01</p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet0</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node0</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2013-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet1</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2014-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet2</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node2</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2015-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet3</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node2</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2016-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet4</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node0</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2017-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet5</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr><tr style="height:14pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MaxDate</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet6</p></td><td style="width:87pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;text-align: left;">Figure 21.3 <span class="s74">Example of a partition table.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">whose range of keys contains <i>v</i>, and then sending the request to the real node where the tablet resides. The request can be handled eﬃciently at that node by maintaining, for each tablet, an index on the partitioning key attribute.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Write, insert, and delete requests are processed similarly, by routing the requests to the correct tablet and real node, using the mechanism described above for reads.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The above scheme allows tablets to be split if they become too big; the key range corresponding to the tablet is split into two, with a newly created tablet getting half the key range. Records whose key range is mapped to the new tablet are then moved from the original tablet to the new tablet. The partition table is updated to reﬂect the split, so requests are then correctly directed to the appropriate tablet.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">If a real node gets overloaded, either due to a large number of requests or due to too much data at the node, some of the tablets from the node can be moved to a diﬀerent real node that has a lower load. Tablets can also be moved similarly in case one of the real nodes has a large amount of data, while another real node has less data. Finally, if a new real node joins a system, some tables can be moved from existing nodes to the new node. Whenever a tablet is moved to a diﬀerent real node, the partition table is updated; subsequent requests will then be sent to the correct real node.</p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 17pt;line-height: 90%;text-align: justify;">Figure 21.4 shows the partition table from Figure 21.3 after Tablet6, which had values <span class="s86">≥ </span>2017-01-01, has been split into two: Tablet6 now has values <span class="s86">≥ </span>2017-01-01, but</p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 70%;text-align: justify;"><span class="s83">&lt; </span>2018-01-01, while the new tablet, Tablet7, has values <span class="s86">≥ </span>2018-01-01. Such a split could be caused by a large number of inserts into Tablet6, making it very large; the split</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">rebalances the sizes of the tablets.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Note also that Tablet1, which was in Node1, has now been moved to Node0 in Figure 21.4. Such a tablet move could be because Node1 is overloaded due to excessive data, or due to a high number of requests.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most parallel data storage systems store the partition table at a <span class="s63">master </span>node. How- ever, to support a large number of requests each second, the partition table is usually replicated, either to all client nodes that access data or to multiple <span class="s63">routers</span>. Routers accept read/write requests from clients and forward the requests to the appropriate</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:138.484pt" cellspacing="0"><tr style="height:17pt"><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Value</p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Tablet ID</p></td><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Node ID</p></td></tr><tr style="height:16pt"><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2012-01-01</p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet0</p></td><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node0</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2013-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet1</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node0</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2014-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet2</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node2</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2015-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet3</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node2</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2016-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet4</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node0</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2017-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet5</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr><tr style="height:13pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2018-01-01</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet6</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr><tr style="height:14pt"><td style="width:94pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">MaxDate</p></td><td style="width:90pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Tablet7</p></td><td style="width:86pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Node1</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 21.4 <span class="s74">Example partition table after tablet split and tablet move.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark464">real node containing the tablet/virtual nodes based on the key values speciﬁed in the request.</a><a name="bookmark510">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">An alternative fully distributed approach is supported by a hash based partitioning scheme called <span class="s63">consistent hashing</span>. In the consistent hashing approach, keys are hashed to a large space, such as 32 bit integers. Further, node (or virtual node) identiﬁers are also hashed to the same space. A key <i>k</i><span class="s145">i </span>could be logically mapped to the node <i>n</i><span class="s145">j </span>whose</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 70%;text-align: justify;">hash value <i>h</i>(<i>n</i><span class="s145">j </span>) is the highest value among all nodes satisfying <i>h</i>(<i>n</i><span class="s145">j </span>) <span class="s83">&lt; </span><i>h</i>(<i>k</i><span class="s145">i</span>). But to ensure that every key is assigned to a node, hash values are treated as lying on a cycle</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 92%;text-align: justify;">similar to the face of a clock, where the maximum hash value <i>maxhash </i>is immediately followed by 0. Then, key <i>k</i><span class="s97">i </span>is then logically mapped to the node <i>n</i><span class="s97">j </span>whose hash value <i>h</i>(<i>n</i><span class="s97">j </span>) is the closest among all nodes, when we move anti-clockwise in the circle from <i>h</i>(<i>k</i><span class="s97">i</span>).</p><p class="s63" style="padding-left: 137pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Distributed hash tables <span class="p">based on this idea have been developed where there is no</span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">need for either a master node or a router; instead each participating node keeps track of a few other peer nodes, and routing is implemented in a cooperative manner. New nodes can join the system, and integrate themselves by following speciﬁed protocols in a completely peer-to-peer manner, without the need for a master. See the Further Reading section at the end of the chapter for references providing further details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part385.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part387.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
