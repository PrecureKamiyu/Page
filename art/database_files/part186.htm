<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.4   Alternative Server-Side Frameworks</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part185.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part187.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">9.4   <span style=" color: #00AEEF;">Alternative Server-Side Frameworks</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">There are several alternatives to Java Servlets for processing requests at the application server, including scripting languages and web application frameworks developed for languages such as Python.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.4.1 Server-Side Scripting</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Writing even a simple web application in a programming language such as Java or C is a time-consuming task that requires many lines of code and programmers who are familiar with the intricacies of the language. An alternative approach, that of <span class="s63">server- side scripting</span>, provides a much easier method for creating many applications. Scripting languages provide constructs that can be embedded within <span class="s44">HTML </span>documents.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In server-side scripting, before delivering a web page, the server executes the scripts embedded within the <span class="s44">HTML </span>contents of the page. Each piece of script, when executed, can generate text that is added to the page (or may even delete content from the page). The source code of the scripts is removed from the page, so the client may not even be aware that the page originally had any code in it. The executed script may also con- tain <span class="s44">SQL </span>code that is executed against a database. Many of these languages come with libraries and tools that together constitute a framework for web application develop- ment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2216.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-top: 2pt;padding-left: 157pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">html</span>&gt;</p><p class="s186" style="padding-left: 157pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">head</span>&gt; &lt;<span class="s49">title</span>&gt; <span class="s49">Hello </span>&lt;<span class="s49">/title</span>&gt; &lt;<span class="s49">/head</span>&gt;</p><p class="s186" style="padding-left: 157pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">body</span>&gt;</p><p class="s186" style="padding-left: 163pt;text-indent: 0pt;line-height: 13pt;text-align: left;">&lt; <span class="s49">% if (request.getParameter(“name”) == null)</span></p><p class="s49" style="padding-left: 169pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{ out.println(“Hello World”); }</p><p class="s49" style="padding-left: 169pt;text-indent: 0pt;line-height: 11pt;text-align: left;">else { out.println(“Hello, ” + request.getParameter(“name”)); }</p><p class="s49" style="padding-left: 163pt;text-indent: 0pt;line-height: 15pt;text-align: left;">%<span class="s186">&gt;</span></p><p class="s186" style="padding-left: 157pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/body</span>&gt;</p><p class="s186" style="padding-left: 157pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/html</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2217.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 194pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 9.9 </span>A <span class="s157">JSP </span>page with embedded Java code.</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Some of the widely used scripting frameworks include Java Server Pages (<span class="s44">JSP</span>), <span class="s44">ASP</span>.<span class="s44">NET </span>from Microsoft, <span class="s44">PHP</span>, and Ruby on Rails. These frameworks allow code writ- ten in languages such as Java, C#, VBScript, and Ruby to be embedded into or invoked from <span class="s44">HTML </span>pages. For instance, <span class="s44">JSP </span>allows Java code to be embedded in <span class="s44">HTML </span>pages, while Microsoft’s <span class="s44">ASP</span>.<span class="s44">NET </span>and <span class="s44">ASP </span>support embedded C# and <span class="s44">VBS</span>cript.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.4.1.1 Java Server Pages</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Next we brieﬂy describe <span class="s63">Java Server Pages </span>(<span class="s64">JSP</span>), a scripting language that allows <span class="s44">HTML </span>programmers to mix static <span class="s44">HTML </span>with dynamically generated <span class="s44">HTML</span>. The mo- tivation is that, for many dynamic web pages, most of their content is still static (i.e., the same content is present whenever the page is generated). The dynamic content of the web pages (which are generated, for example, on the basis of form parameters) is often a small part of the page. Creating such pages by writing servlet code results in a large amount of <span class="s44">HTML </span>being coded as Java strings. <span class="s44">JSP </span>instead allows Java code to be embedded in static <span class="s44">HTML</span>; the embedded Java code generates the dynamic part of the page. <span class="s44">JSP </span>scripts are actually translated into servlet code that is then compiled, but the application programmer is saved the trouble of writing much of the Java code to create the servlet.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 9.9 shows the source text of a <span class="s44">JSP </span>page that includes embedded Java code. The Java code in the script is distinguished from the surrounding <span class="s44">HTML </span>code by being</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 70%;text-align: justify;">enclosed in <span class="s83">&lt;</span>% <span class="s15">… </span>%<span class="s83">&gt;</span>. The code uses <span class="s49">request.getParameter() </span>to get the value of the attribute <span class="s49">name</span>.</p><p style="padding-top: 1pt;padding-left: 137pt;text-indent: 0pt;text-align: justify;">When a <span class="s44">JSP </span>page is requested by a browser, the application server generates <span class="s44">HTML</span></p><p style="padding-top: 2pt;padding-left: 119pt;text-indent: 0pt;line-height: 76%;text-align: justify;">output from the page, which is sent to the browser. The <span class="s44">HTML </span>part of the <span class="s44">JSP </span>page is output as is.<span class="s76">5</span> Wherever Java code is embedded within <span class="s83">&lt;</span>% <span class="s15">…</span>%<span class="s83">&gt;</span>, the code is replaced in the <span class="s44">HTML </span>output by the text it prints to the object <span class="s49">out</span>. In the <span class="s44">JSP </span>code in Figure 9.9,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2218.png"/></span></p><p class="s153" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s77">5</span>JSP <span class="s78">allows a more complex embedding, where </span>HTML <span class="s78">code is within a Java if-else statement, and gets output condition- ally depending on whether the if condition evaluates to true or not. We omit details here.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">if no value was entered for the form parameter <span class="s49">name</span>, the script prints “Hello World”; if a value was entered, the script prints “Hello” followed by the name.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A more realistic example may perform more complex actions, such as looking up values from a database using <span class="s44">JDBC</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">JSP </span><span class="s43">also supports the concept of a </span><i>tag library</i>, which allows the use of tags that look much like <span class="s44">HTML </span>tags but are interpreted at the server and are replaced by appro- priately generated <span class="s44">HTML </span>code. <span class="s44">JSP </span>provides a standard set of tags that deﬁne variables and control ﬂow (iterators, if-then-else), along with an expression language based on JavaScript (but interpreted at the server). The set of tags is extensible, and a number of tag libraries have been implemented. For example, there is a tag library that supports paginated display of large data sets and a library that simpliﬁes display and parsing of dates and times.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.4.1.2 PHP</p><p class="s42" style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;line-height: 84%;text-align: left;">PHP <span class="s43">is a scripting language that is widely used for server-side scripting. </span>PHP <span class="s43">code can be intermixed with </span>HTML <span class="s43">in a manner similar to </span>JSP<span class="s43">. The characters “</span><span class="s83">&lt;</span><span class="p">?php” indicate</span></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 11pt;text-align: left;">the start of <span class="s44">PHP </span>code, while the characters “?<span class="s83">&gt;</span>” indicate the end of <span class="s44">PHP </span>code. The</p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">following code performs the same actions as the <span class="s44">JSP </span>code in Figure 9.9.</p><p class="s186" style="padding-top: 7pt;padding-left: 169pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">html</span>&gt;</p><p class="s186" style="padding-left: 169pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">head</span>&gt; &lt;<span class="s49">title</span>&gt; <span class="s49">Hello </span>&lt;<span class="s49">/title</span>&gt; &lt;<span class="s49">/head</span>&gt;</p><p class="s186" style="padding-left: 169pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">body</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2219.png"/></span></p><p class="s186" style="padding-left: 175pt;text-indent: 0pt;line-height: 13pt;text-align: left;">&lt;<span class="s49">?php if (!isset($ REQUEST[&#39;name&#39;]))</span></p><p class="s49" style="padding-left: 181pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{ echo &#39;Hello World&#39;; }</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2220.png"/></span></p><p class="s49" style="padding-left: 181pt;text-indent: 0pt;line-height: 11pt;text-align: left;">else { echo &#39;Hello, &#39; . $ REQUEST[&#39;name&#39;]; }</p><p class="s49" style="padding-left: 175pt;text-indent: 0pt;line-height: 15pt;text-align: left;">?<span class="s186">&gt;</span></p><p class="s186" style="padding-left: 169pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/body</span>&gt;</p><p class="s186" style="padding-left: 169pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/html</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2221.png"/></span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">The array $ REQUEST contains the request parameters. Note that the array is indexed by the parameter name; in <span class="s44">PHP </span>arrays can be indexed by arbitrary strings, not just numbers. The function <span class="s49">isset </span>checks if the element of the array has been initialized. The <span class="s49">echo </span>function prints its argument to the output <span class="s44">HTML</span>. The operator “.” between two strings concatenates the strings.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">A suitably conﬁgured web server would interpret any ﬁle whose name ends in “.php” to be a <span class="s44">PHP </span>ﬁle. If the ﬁle is requested, the web server processes it in a manner similar to how <span class="s44">JSP </span>ﬁles are processed and returns the generated <span class="s44">HTML </span>to the browser.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A number of libraries are available for the <span class="s44">PHP </span>language, including libraries for database access using <span class="s44">ODBC </span>(similar to <span class="s44">JDBC </span>in Java).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.4.2 Web Application Frameworks</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Web application development frameworks ease the task of constructing web applica- tions by providing features such as these:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;text-align: justify;"><span class="s39">• </span>A library of functions to support <span class="s41">HTML </span>and <span class="s41">HTTP </span>features, including sessions.</p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: justify;">• <span class="s40">A template scripting system.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">A controller that maps user interaction events such as form submits to appropriate functions that handle the event. The controller also manages authentication and sessions. Some frameworks also provide tools for managing authorizations.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>A (relatively) declarative way of specifying a form with validation constraints on user inputs, from which the system generates <span class="s41">HTML </span>and Javascript/Ajax code to implement the form.</p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">An object-oriented model with an object-relational mapping to store data in a re- lational database (described in Section 9.6.2).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Thus, these frameworks provide a variety of features that are required to build web applications in an integrated manner. By generating forms from declarative speciﬁca- tions and managing data access transparently, the frameworks minimize the amount of coding that a web application programmer has to carry out.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There are a large number of such frameworks, based on diﬀerent languages. Some of the more widely used frameworks include the Django framework for the Python language, Ruby on Rails, which supports the Rails framework on the Ruby program- ming language, Apache Struts, Swing, Tapestry, and WebObjects, all based on Java/JSP. Many of these frameworks also make it easy to create simple <span class="s64">CRUD </span>web interfaces; that is, interfaces that support create, read, update and delete of objects/tuples by generat- ing code from an object model or a database. Such tools are particularly useful to get simple applications running quickly, and the generated code can be edited to build more sophisticated web interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.4.3 The Django Framework</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The Django framework for Python is a widely used web application framework. We illustrate a few features of the framework through examples.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Views in Django are functions that are equivalent to servlets in Java. Django re- quires a mapping, typically speciﬁed in a ﬁle <span class="s49">urls.py</span>, which maps <span class="s44">URL</span>s to Django views. When the Django application server receives an <span class="s44">HTTP </span>request, it uses the <span class="s44">URL </span>mapping to decide which view function to invoke.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2222.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2223.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2224.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2225.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 9.10 shows sample code implementing the person query task that we earlier implemented using Java servlets. The code shows a view called <span class="s49">person query view</span>. We assume that the <span class="s49">PersonQuery </span><span class="s42">URL </span><span class="s43">is mapped to the view </span><span class="s49">person query view</span>, and is invoked from the <span class="s44">HTML </span>form shown earlier in Figure 9.3.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2226.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2227.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We also assume that the root of the application is mapped to a <span class="s49">login view</span>. We have not shown the code for <span class="s49">login view</span>, but we assume it displays a login form, and on submit it invokes the <span class="s49">authenticate </span>view. We have not shown the <span class="s49">authenticate </span>view,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2228.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2229.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2230.png"/></span></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">either, but we assume that it checks the login name and password. If the password is validated, the <span class="s49">authenticate </span>view redirects to a <span class="s49">person query form</span>, which displays the <span class="s44">HTML </span>code that we saw earlier in Figure 9.3; if password validation fails, it redirects to the <span class="s49">login view</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2231.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2232.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Returning to Figure 9.10, the view <span class="s49">person query view() </span>ﬁrst checks if the user is logged in by checking the session variable <span class="s49">username</span>. If the session variable is not set, the browser is redirected to the login screen. Otherwise, the requested user informa-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2233.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">from django.http import HttpResponse from django.db import connection</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2234.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2235.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2236.png"/></span></p><p class="s49" style="padding-left: 109pt;text-indent: -21pt;text-align: left;">def result set to html(headers, cursor): html = &quot;&lt;table border=1&gt;&quot;</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">html += &quot;&lt;tr&gt;&quot;</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">for header in headers:</p><p class="s49" style="padding-left: 109pt;text-indent: 21pt;text-align: left;">html += &quot;&lt;th&gt;&quot; + header + &quot;&lt;/th&gt;&quot; html += &quot;&lt;/tr&gt;&quot;</p><p class="s49" style="padding-left: 130pt;text-indent: -21pt;text-align: left;">for row in cursor.fetchall(): html += &quot;&lt;tr&gt;&quot;</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;line-height: 12pt;text-align: left;">for col in row:</p><p class="s49" style="padding-left: 130pt;text-indent: 21pt;text-align: left;">html += &quot;&lt;td&gt;&quot; + col + &quot;&lt;/td&gt;&quot; html += &quot;&lt;/tr&gt;&quot;</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">html += &quot;&lt;/table&gt;&quot; return html</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2237.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2238.png"/></span></p><p class="s49" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">def person query view(request):</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2239.png"/></span></p><p class="s49" style="padding-left: 130pt;text-indent: -21pt;text-align: left;">if &quot;username&quot; not in request.session: return login view(request)</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">persontype = request.GET.get(&quot;persontype&quot;) personname = request.GET.get(&quot;personname&quot;) if persontype == &quot;student&quot;:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2240.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2241.png"/></span></p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;line-height: 12pt;text-align: left;">query tmpl = &quot;select id, name, dept name from student where name=%s&quot;</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">else:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2242.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2243.png"/></span></p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">query tmpl = &quot;select id, name, dept name from instructor where name=%s&quot;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2244.png"/></span></p><p class="s49" style="padding-left: 130pt;text-indent: -21pt;text-align: left;">with connection.cursor() as cursor: cursor.execute(query tmpl, [personname]) headers = [&quot;ID&quot;, &quot;Name&quot;, &quot;Department Name&quot;]</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2245.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2246.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2247.png"/></span></p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">return HttpResponse(result set to html(headers, cursor))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2248.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.10 <span class="s74">The person query application in Django.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2249.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2250.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2251.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark189">tion is fetched by connecting to the database; connection details for the database are speciﬁed in a Django conﬁguration ﬁle </a><span class="s49">settings.py </span>and are omitted in our description. A cursor (similar to a <span class="s44">JDBC </span>statement) is opened on the connection, and the query is executed using the cursor. Note that the ﬁrst argument of <span class="s49">cursor.execute </span>is the query, with parameters marked by “%s”, and the second argument is a list of values for the parameters. The result of the database query is then displayed by calling a function <span class="s49">result set to html()</span>, which iterates over the result set fetched from the database and outputs the results in <span class="s44">HTML </span>format to a string; the string is then returned as an <span class="s49">HttpRe- sponse</span>.<a name="bookmark209">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Django provides support for a number of other features, such as creating <span class="s44">HTML </span>forms and validating data entered in the forms, annotations to simplify checking of authentication, and templates for creating <span class="s44">HTML </span>pages, which are somewhat similar to <span class="s44">JSP </span>pages. Django also supports an object-relation mapping system, which we describe in Section 9.6.2.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part185.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part187.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
