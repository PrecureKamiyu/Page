<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>8.3 System Call Error Handling</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000683E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000045039" data-uri="chapter08.xhtml#P7000497027000000000000000045039" epub:type="title"><span class="pcalibre label pcalibre1">8.3 </span>System Call Error Handling</h1></header>
<p id="P700049702700000000000000004503A" data-uri="chapter08.xhtml#P700049702700000000000000004503A" class="pcalibre1 pcalibre calibre2">When Unix system-level functions encounter an error, they typically return -1 and set the global integer variable <code id="P700049702700000000000000004503B" data-uri="chapter08.xhtml#P700049702700000000000000004503B" class="pcalibre1 calibre8 pcalibre">errno</code> to indicate what went wrong. Programmers should <i class="calibre5 pcalibre pcalibre1">always</i> check for errors, but unfortunately, many skip error checking because it bloats the code and makes it harder to read. For example, here is how we might check for errors when we call the Linux <code id="P700049702700000000000000004503C" data-uri="chapter08.xhtml#P700049702700000000000000004503C" class="pcalibre1 calibre8 pcalibre">fork</code> function:</p>
<pre id="P700049702700000000000000004503D" data-uri="chapter08.xhtml#P700049702700000000000000004503D" class="calibre9 pcalibre pcalibre1">
<code id="P700049702700000000000000004503E" data-uri="chapter08.xhtml#P700049702700000000000000004503E" class="calibre10 pcalibre pcalibre1">
1	if ((pid = fork())&lt; 0) {
2		fprintf(stderr, "fork error: %s\n", strerror(errno));
3		exit(0);
4	}
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004503F" data-uri="chapter08.xhtml#P700049702700000000000000004503F">The <code id="P7000497027000000000000000045040" data-uri="chapter08.xhtml#P7000497027000000000000000045040" class="pcalibre1 calibre8 pcalibre">strerror</code> function returns a text string that describes the error associated with a particular value of <code id="P7000497027000000000000000045041" data-uri="chapter08.xhtml#P7000497027000000000000000045041" class="pcalibre1 calibre8 pcalibre">errno.</code> We can simplify this code somewhat by defining the following <i class="calibre5 pcalibre pcalibre1">error-reporting function:</i></p>
<pre id="P7000497027000000000000000045042" data-uri="chapter08.xhtml#P7000497027000000000000000045042" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045043" data-uri="chapter08.xhtml#P7000497027000000000000000045043" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000684A" title="738" data-uri="chapter08.xhtml#P700049702700000000000000000684A" epub:type="pagebreak"></span>1	void unix_error(char *msg) /* Unix-style error */
2	{
3		fprintf(stderr, "%s: %s\n", msg, strerror(errno));
4		exit(0);
5	}
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045044" data-uri="chapter08.xhtml#P7000497027000000000000000045044">Given this function, our call to <code id="P7000497027000000000000000045045" data-uri="chapter08.xhtml#P7000497027000000000000000045045" class="pcalibre1 calibre8 pcalibre">fork</code> reduces from four lines to two lines:</p>
<pre id="P7000497027000000000000000045046" data-uri="chapter08.xhtml#P7000497027000000000000000045046" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045047" data-uri="chapter08.xhtml#P7000497027000000000000000045047" class="calibre10 pcalibre pcalibre1">
1		if ((pid = fork())&lt; 0)
2			unix_error("fork error");
</code>
</pre>
<p id="P7000497027000000000000000045048" data-uri="chapter08.xhtml#P7000497027000000000000000045048" class="pcalibre1 pcalibre calibre2">We can simplify our code even further by using <i class="calibre5 pcalibre pcalibre1">error-handling wrappers</i>, as pioneered by Stevens in [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B480">110</a>]. For a given base function <code id="P7000497027000000000000000045049" data-uri="chapter08.xhtml#P7000497027000000000000000045049" class="pcalibre1 calibre8 pcalibre">foo</code>, we define a wrapper function <code id="P700049702700000000000000004504A" data-uri="chapter08.xhtml#P700049702700000000000000004504A" class="pcalibre1 calibre8 pcalibre">Foo</code> with identical arguments but with the first letter of the name capitalized. The wrapper calls the base function, checks for errors, and terminates if there are any problems. For example, here is the error-handling wrapper for the <code id="P700049702700000000000000004504B" data-uri="chapter08.xhtml#P700049702700000000000000004504B" class="pcalibre1 calibre8 pcalibre">fork</code> function:</p>
<pre id="P700049702700000000000000004504C" data-uri="chapter08.xhtml#P700049702700000000000000004504C" class="calibre9 pcalibre pcalibre1">
<code id="P700049702700000000000000004504D" data-uri="chapter08.xhtml#P700049702700000000000000004504D" class="calibre10 pcalibre pcalibre1">
1	pid_t Fork(void)
2	{
3		pid_t pid;
4
5		if ((pid = fork())&lt; 0)
6			unix_error("Fork error");
7		return pid;
8	}
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004504E" data-uri="chapter08.xhtml#P700049702700000000000000004504E">Given this wrapper, our call to <code id="P700049702700000000000000004504F" data-uri="chapter08.xhtml#P700049702700000000000000004504F" class="pcalibre1 calibre8 pcalibre">fork</code> shrinks to a single compact line:</p>
<pre id="P7000497027000000000000000045050" data-uri="chapter08.xhtml#P7000497027000000000000000045050" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045051" data-uri="chapter08.xhtml#P7000497027000000000000000045051" class="calibre10 pcalibre pcalibre1">1 pid = Fork();</code></pre>
<p id="P7000497027000000000000000045052" data-uri="chapter08.xhtml#P7000497027000000000000000045052" class="pcalibre1 pcalibre calibre2">We will use error-handling wrappers throughout the remainder of this book. They allow us to keep our code examples concise without giving you the mistaken impression that it is permissible to ignore error checking. Note that when we discuss system-level functions in the text, we will always refer to them by their lowercase base names, rather than by their uppercase wrapper names.</p>
<p id="P7000497027000000000000000045053" data-uri="chapter08.xhtml#P7000497027000000000000000045053" class="pcalibre1 pcalibre calibre2">See Appendix A for a discussion of Unix error handling and the error-handling wrappers used throughout this book. The wrappers are defined in a file called <code id="P7000497027000000000000000045054" data-uri="chapter08.xhtml#P7000497027000000000000000045054" class="pcalibre1 calibre8 pcalibre">csapp.c</code>, and their prototypes are defined in a header file called <code id="P7000497027000000000000000045055" data-uri="chapter08.xhtml#P7000497027000000000000000045055" class="pcalibre1 calibre8 pcalibre">csapp.h.</code> These are available online from the CS:APP Web site.</p>
</section></body></html>
