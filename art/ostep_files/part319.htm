<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>31.1 Semaphores: A Definition</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part318.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part320.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">31.1 Semaphores: A Definition</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_398.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_399.png"/></span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 11pt;text-align: left;">A semaphore is as an object with an integer value that we can ma- nipulate with two routines; in the POSIX standard, these routines are <span class="s41">sem wait() </span>and <span class="s41">sem post()</span><span class="s35">1</span>. Because the initial value of the semaphore</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">determines its behavior, before calling any other routine to interact with the semaphore, we must first initialize it to some value, as the code in Figure <span style=" color: #00AEEF;">31.1 </span>does.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_400.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_401.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_402.png"/></span></p><p class="s12" style="padding-top: 2pt;padding-left: 41pt;text-indent: 13pt;line-height: 90%;text-align: justify;"><span class="s11">1</span>Historically, <span class="s38">sem wait() </span>was first called P() by Dijkstra (for the Dutch word “to probe”) and <span class="s38">sem post() </span>was called V() (for the Dutch word “to test”). Sometimes, people call them down and up, too. Use the Dutch versions to impress your friends.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">341</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;semaphore.h&gt;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">2  <span class="s38">sem_t s;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3  <span class="s38">sem_init(&amp;s, 0, 1);</span></p><p style="padding-top: 5pt;padding-left: 136pt;text-indent: 0pt;text-align: left;">Figure 31.1: <b>Initializing A Semaphore</b></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_403.png"/></span></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: left;">In the figure, we declare a semaphore s and initialize it to the value 1 by passing 1 in as the third argument. The second argument to <span class="s41">sem init() </span>will be set to 0 in all of the examples we’ll see; this indicates that the semaphore is shared between threads in the same process. See the man page for details on other usages of semaphores (namely, how they can be used to synchronize access across <i>different </i>processes), which require a different value for that second argument.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_404.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_405.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">After a semaphore is initialized, we can call one of two functions to interact with it, <span class="s41">sem wait() </span>or <span class="s41">sem post()</span>. The behavior of these two functions is seen in Figure <span style=" color: #00AEEF;">31.2</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_406.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_407.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">For now, we are not concerned with the implementation of these rou- tines, which clearly requires some care; with multiple threads calling into <span class="s41">sem wait() </span>and <span class="s41">sem post()</span>, there is the obvious need for managing these critical sections. We will now focus on how to <i>use </i>these primitives; later we may discuss how they are built.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_408.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_409.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_410.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">We should discuss a few salient aspects of the interfaces here. First, we can see that <span class="s41">sem wait() </span>will either return right away (because the value of the semaphore was one or higher when we called <span class="s41">sem wait()</span>), or it will cause the caller to suspend execution waiting for a subsequent post. Of course, multiple calling threads may call into <span class="s41">sem wait()</span>, and thus all be queued waiting to be woken.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_411.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_412.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Second, we can see that <span class="s41">sem post() </span>does not wait for some particular condition to hold like <span class="s41">sem wait() </span>does. Rather, it simply increments the value of the semaphore and then, if there is a thread waiting to be woken, wakes one of them up.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Third, the value of the semaphore, when negative, is equal to the num- ber of waiting threads [D68b]. Though the value generally isn’t seen by users of the semaphores, this invariant is worth knowing and perhaps can help you remember how a semaphore functions.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Don’t worry (yet) about the seeming race conditions possible within the semaphore; assume that the actions they make are performed atomi- cally. We will soon use locks and condition variables to do just this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">1  </span>int sem_wait(sem_t <span class="s39">*</span>s) {</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;">2     <span class="s38">decrement the value of semaphore s by one</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3     <span class="s38">wait if value of semaphore s is negative</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">5</p><p class="s38" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">6  </span>int sem_post(sem_t <span class="s39">*</span>s) {</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;">7     <span class="s38">increment the value of semaphore s by one</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8     <span class="s38">if there are one or more threads waiting, wake one</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9  <span class="s38">}</span></p><p style="padding-top: 5pt;padding-left: 105pt;text-indent: 0pt;text-align: left;">Figure 31.2: <b>Semaphore: Definitions of Wait and Post</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">sem_t m;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">sem_init(&amp;m, 0, X); // initialize semaphore to X; what should X be?</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">3</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">sem_wait(&amp;m);</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">// critical section here</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6  <span class="s38">sem_post(&amp;m);</span></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">Figure 31.3: <b>A Binary Semaphore, a.k.a. a Lock</b></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part318.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part320.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
