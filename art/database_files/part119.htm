<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>5.2   Functions and Procedures</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part118.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part120.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">5.2   <span style=" color: #00AEEF;">Functions and Procedures</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">We have already seen several functions that are built into the <span class="s44">SQL </span>language. In this section, we show how developers can write their own functions and procedures, store them in the database, and then invoke them from <span class="s44">SQL </span>statements. Functions are par- ticularly useful with specialized data types such as images and geometric objects. For instance, a line-segment data type used in a map database may have an associated func- tion that checks whether two line segments overlap, and an image data type may have associated functions to compare two images for similarity.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Procedures and functions allow “business logic” to be stored in the database and ex- ecuted from <span class="s44">SQL </span>statements. For example, universities usually have many rules about how many courses a student can take in a given semester, the minimum number of courses a full-time instructor must teach in a year, the maximum number of majors a student can be enrolled in, and so on. While such business logic can be encoded as programming-language procedures stored entirely outside the database, deﬁning them as stored procedures in the database has several advantages. For example, it allows</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_934.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_935.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_936.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 219pt;text-indent: -21pt;text-align: left;">create function <i>dept count</i><span class="p">(</span><i>dept name </i>varchar(20)<span class="p">) </span>returns integer</p><p class="s46" style="padding-left: 219pt;text-indent: 0pt;text-align: left;">begin</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_937.png"/></span></p><p class="s46" style="padding-left: 219pt;text-indent: 0pt;text-align: left;">declare <i>d count </i>integer<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_938.png"/></span></p><p style="padding-left: 240pt;text-indent: 0pt;text-align: left;"><b>select count</b>(<i>*</i>) <b>into </b><i>d count</i></p><p class="s46" style="padding-left: 240pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_939.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_940.png"/></span></p><p class="s13" style="padding-left: 240pt;text-indent: 0pt;text-align: left;"><b>where </b>instructor<span class="p">.</span>dept name<span class="s15">= </span>dept name</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_941.png"/></span></p><p class="s46" style="padding-left: 219pt;text-indent: 0pt;text-align: left;">return <i>d count</i><span class="p">;</span></p><p class="s46" style="padding-left: 219pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_942.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.6 </span>Function defined in <span class="s157">SQL</span>.</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">multiple applications to access the procedures, and it allows a single point of change in case the business rules change, without changing other parts of the application. Appli- cation code can then call the stored procedures instead of directly updating database relations.</p><p class="s42" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">SQL <span class="s43">allows the deﬁnition of functions, procedures, and methods. These can be deﬁned either by the procedural component of </span>SQL <span class="s43">or by an external programming language such as Java, C, or C++. We look at deﬁnitions in </span>SQL <span class="s43">ﬁrst and then see how to use deﬁnitions in external languages in Section 5.2.3.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Although the syntax we present here is deﬁned by the <span class="s44">SQL </span>standard, most databases implement nonstandard versions of this syntax. For example, the procedural languages supported by Oracle (<span class="s44">PL/SQL</span>), Microsoft <span class="s44">SQL S</span>erver (Transact<span class="s44">SQL</span>), and <span class="s44">P</span>ostgre<span class="s44">SQL </span>(<span class="s44">PL</span>/pg<span class="s44">SQL</span>) all diﬀer from the standard syntax we present here. We illus- trate some of the diﬀerences for the case of Oracle in Note 5.2 on page 204. See the respective system manuals for further details. Although parts of the syntax we present here may not be supported on such systems, the concepts we describe are applicable across implementations, although with a diﬀerent syntax.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">5.2.1 Declaring and Invoking SQL Functions and Procedures</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Suppose that we want a function that, given the name of a department, returns the count of the number of instructors in that department. We can deﬁne the function as shown in Figure 5.6.<span class="s76">4</span> This function can be used in a query that returns names and budgets of all departments with more than 12 instructors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_943.png"/></span></p><p class="s13" style="padding-left: 229pt;text-indent: 0pt;text-align: left;"><b>select </b>dept name<span class="p">, </span>budget</p><p class="s46" style="padding-left: 229pt;text-indent: 0pt;line-height: 11pt;text-align: left;">from <i>department</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_944.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_945.png"/></span></p><p style="padding-left: 229pt;text-indent: 0pt;line-height: 20pt;text-align: left;"><b>where </b><i>dept count</i>(<i>dept name</i>) <span class="s83">&gt; </span>12;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_946.png"/></span></p><p class="s79" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s77">4</span><span class="s78">If you are entering your own functions or procedures, you should write “</span>create or replace<span class="s80">” rather than </span>create <span class="s80">so that it is easy to modify your code (by replacing the function) during debugging.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_947.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_948.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_949.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 168pt;text-indent: -21pt;text-align: left;">create function <i>instructor of </i><span class="p">(</span><i>dept name </i>varchar<span class="p">(20)) </span>returns table <span class="p">(</span></p><p class="s69" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">ID <span class="s46">varchar </span><span class="p">(5),</span></p><p class="s13" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">name <b>varchar </b><span class="p">(20),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_950.png"/></span></p><p class="s13" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">dept name <b>varchar </b><span class="p">(20),</span></p><p class="s13" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">salary <b>numeric </b><span class="p">(8,2))</span></p><p class="s46" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">return table</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_951.png"/></span></p><p style="padding-left: 168pt;text-indent: 0pt;text-align: left;">(<b>select </b><span class="s69">ID</span>, <i>name</i>, <i>dept name</i>, <i>salary</i></p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_952.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_953.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_954.png"/></span></p><p class="s13" style="padding-left: 168pt;text-indent: 0pt;text-align: left;"><b>where </b>instructor<span class="p">.</span>dept name <span class="p">= </span>instructor of.dept name<span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_955.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 199pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.7 </span>Table function in <span class="s157">SQL</span>.</p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Performance problems have been observed on many database systems when in- voking complex user-deﬁned functions within a query, if the functions are invoked on a large number of tuples. Programmers should therefore take performance into consid- eration when deciding whether to use user-deﬁned functions in a query.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_956.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_957.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL </span>standard supports functions that can return tables as results; such func- tions are called <span class="s63">table functions</span>. Consider the function deﬁned in Figure 5.7. The func- tion returns a table containing all the instructors of a particular department. Note that the function’s parameter is referenced by preﬁxing it with the name of the function (<i>instructor of.dept name</i>).</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">The function can be used in a query as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 194pt;text-indent: 0pt;text-align: left;">select <span class="p">*</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_958.png"/></span></p><p style="padding-left: 194pt;text-indent: 0pt;text-align: left;"><b>from table</b>(<i>instructor of </i>(&#39;Finance&#39;));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">This query returns all instructors of the &#39;Finance&#39; department. In this simple case it is straightforward to write this query without using table-valued functions. In general, however, table-valued functions can be thought of as <span class="s63">parameterized views </span>that generalize the regular notion of views by allowing parameters.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_959.png"/></span></p><p class="s42" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">SQL <span class="s43">also supports procedures. The </span><span class="s13">dept count </span><span class="p">function could instead be written as a procedure:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_960.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_961.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_962.png"/></span></p><p class="s46" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">create procedure <i>dept count proc</i><span class="p">(</span>in <i>dept name </i>varchar(20)<span class="p">,</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_963.png"/></span></p><p class="s46" style="padding-left: 341pt;text-indent: 0pt;text-align: left;">out <i>d count </i>integer<span class="p">)</span></p><p class="s46" style="padding-left: 143pt;text-indent: 0pt;text-align: left;">begin</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_964.png"/></span></p><p style="padding-left: 164pt;text-indent: 0pt;text-align: left;"><b>select count</b>(<i>*</i>) <b>into </b><i>d count</i></p><p class="s46" style="padding-left: 164pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_965.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_966.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_967.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_968.png"/></span></p><p class="s13" style="padding-left: 164pt;text-indent: 0pt;text-align: left;"><b>where </b>instructor<span class="p">.</span>dept name<span class="s15">= </span>dept count proc<span class="p">.</span>dept name</p><p class="s46" style="padding-left: 143pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">The keywords <b>in </b>and <b>out </b>indicate, respectively, parameters that are expected to have values assigned to them and parameters whose values are set in the procedure in order to return results.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">Procedures can be invoked either from an <span class="s44">SQL </span>procedure or from embedded <span class="s44">SQL</span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">by the <b>call </b>statement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_969.png"/></span></p><p class="s46" style="padding-left: 220pt;text-indent: 0pt;text-align: left;">declare <i>d count </i>integer<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_970.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_971.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_972.png"/></span></p><p class="s13" style="padding-left: 220pt;text-indent: 0pt;text-align: left;"><b>call </b>dept count proc<span class="p">(&#39;Physics&#39;, </span>d count<span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Procedures and functions can be invoked from dynamic <span class="s44">SQL</span>, as illustrated by the <span class="s44">JDBC</span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">syntax in Section 5.1.1.5.</p><p class="s42" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">SQL <span class="s43">permits more than one procedure of the same name, so long as the number of arguments of the procedures with the same name is diﬀerent. The name, along with the number of arguments, is used to identify the procedure. </span>SQL <span class="s43">also permits more than one function with the same name, so long as the diﬀerent functions with the same name either have diﬀerent numbers of arguments, or for functions with the same number of arguments, they diﬀer in the type of at least one argument.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">5.2.2 Language Constructs for Procedures and Functions</p><p class="s42" style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">SQL <span class="s43">supports constructs that give it almost all the power of a general-purpose program- ming language. The part of the </span>SQL <span class="s43">standard that deals with these constructs is called the </span><span class="s63">Persistent Storage Module (</span><span class="s82">PSM</span><span class="s63">)</span><span class="p">.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Variables are declared using a <b>declare </b>statement and can have any valid <span class="s44">SQL </span>data type. Assignments are performed using a <b>set </b>statement.</p><p class="s46" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="p">A compound statement is of the form </span>begin <span class="s15">… </span>end<span class="p">, and it may contain multiple </span><span class="s44">SQL </span><span class="p">statements between the </span>begin <span class="p">and the </span>end<span class="p">. Local variables can be declared within a compound statement, as we have seen in Section 5.2.1. A compound statement of the form </span>begin atomic <span class="s15">… </span>end <span class="p">ensures that all the statements contained within it are executed as a single transaction.</span></p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">The syntax for <b>while </b>statements and <b>repeat </b>statements is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">while <i>boolean expression </i>do</p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">sequence of statements<span class="p">;</span></p><p class="s46" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">end while</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">repeat</p><p class="s13" style="padding-left: 246pt;text-indent: 21pt;text-align: left;">sequence of statements<span class="p">; </span><b>until </b>boolean expression <b>end repeat</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">There is also a <b>for </b>loop that permits iteration over all the results of a query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 188pt;text-indent: 0pt;text-align: left;">declare <i>n </i>integer default <span class="p">0;</span></p><p class="s46" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">for <i>r </i>as</p><p class="s46" style="padding-left: 231pt;text-indent: 0pt;text-align: left;">select <i>budget </i>from <i>department</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_973.png"/></span></p><p class="s46" style="padding-left: 231pt;text-indent: 0pt;text-align: left;">where <i>dept name </i><span class="s15">= </span><span class="p">‘Music‘</span></p><p class="s46" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">do</p><p class="s13" style="padding-left: 209pt;text-indent: 0pt;text-align: left;"><b>set </b>n <span class="s15">= </span>n<span class="s15">− </span>r.budget</p><p class="s46" style="padding-left: 7pt;text-indent: 0pt;text-align: center;">end for</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: right;">The program fetches the query results one row at a time into the <b>for </b>loop variable (<i>r</i>, in the above example). The statement <b>leave </b>can be used to exit the loop, while <b>iterate </b>starts on the next tuple, from the beginning of the loop, skipping the remaining statements.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: left;">The conditional statements supported by <span class="s44">SQL </span>include <b>if-then-else </b>statements by using this syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">if <i>boolean expression</i></p><p class="s46" style="padding-left: 203pt;text-indent: 0pt;text-align: left;">then <i>statement or compound statement</i></p><p class="s46" style="padding-left: 182pt;text-indent: 0pt;text-align: left;">elseif <i>boolean expression</i></p><p class="s46" style="padding-left: 203pt;text-indent: 0pt;text-align: left;">then <i>statement or compound statement</i></p><p class="s46" style="padding-left: 182pt;text-indent: 0pt;text-align: left;">else <i>statement or compound statement</i></p><p class="s46" style="padding-left: 182pt;text-indent: 0pt;text-align: left;">end if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">SQL <span class="s43">also supports a case statement similar to the C/C++ language case statement (in addition to case expressions, which we saw in Chapter 3).</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 5.8 provides a larger example of the use of procedural constructs in <span class="s44">SQL</span>. The function <i>registerStudent </i>deﬁned in the ﬁgure registers a student in a course section after verifying that the number of students in the section does not exceed the capacity of the room allocated to the section. The function returns an error code— a value greater than or equal to 0 signiﬁes success, and a negative value signiﬁes an error condition— and a message indicating the reason for the failure is returned as an <b>out </b>parameter.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">The <span class="s44">SQL </span>procedural language also supports the signaling of <span class="s63">exception conditions</span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">and declaring of <span class="s63">handlers </span>that can handle the exception, as in this code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_974.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_975.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_976.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_977.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_978.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_979.png"/></span></p><p class="s46" style="padding-left: 179pt;text-indent: 0pt;text-align: left;">declare <i>out of classroom seats </i>condition declare exit handler for <i>out of classroom seats </i>begin</p><p class="s13" style="padding-left: 179pt;text-indent: 0pt;text-align: left;">sequence of statements</p><p class="s46" style="padding-left: 179pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_980.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_981.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_982.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The statements between the <b>begin </b>and the <b>end </b>can raise an exception by executing <b>sig- nal </b><i>out of classroom seats</i>. The handler says that if the condition arises, the action to be taken is to exit the enclosing <b>begin end </b>statement. Alternative actions would be <b>con- tinue</b>, which continues execution from the next statement following the one that raised the exception. In addition to explicitly deﬁned conditions, there are also predeﬁned conditions such as <b>sqlexception</b>, <b>sqlwarning</b>, and <b>not found</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_983.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 147pt;text-indent: 0pt;text-align: left;">– – Registers a student after ensuring classroom capacity is not exceeded</p><p style="padding-left: 147pt;text-indent: 0pt;text-align: left;">–– Returns0 on success, and -1 if capacity is exceeded.</p><p class="s46" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">create function <i>registerStudent</i><span class="p">(</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_984.png"/></span></p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">in <i>s id </i>varchar<span class="p">(5),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_985.png"/></span></p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">in <i>s courseid </i>varchar <span class="p">(8),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_986.png"/></span></p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">in <i>s secid </i>varchar <span class="p">(8),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_987.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_988.png"/></span></p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">in <i>s semester </i>varchar <span class="p">(6), </span>in <i>s year </i>numeric <span class="p">(4,0), </span>out <i>errorMsg </i>varchar<span class="p">(100)</span></p><p class="s46" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">returns integer begin</p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">declare <i>currEnrol </i>int<span class="p">;</span></p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">select count<span class="p">(*) </span>into <i>currEnrol</i></p><p class="s46" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">from <i>takes</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_989.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_990.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_991.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_992.png"/></span></p><p class="s13" style="padding-left: 190pt;text-indent: 0pt;text-align: left;"><b>where </b>course id <span class="p">= </span>s courseid <b>and </b>sec id <span class="p">= </span>s secid</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_993.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_994.png"/></span></p><p class="s13" style="padding-left: 211pt;text-indent: 0pt;text-align: left;"><b>and </b>semester <span class="p">= </span>s semester <b>and </b>year <span class="p">= </span>s year<span class="p">;</span></p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">declare <i>limit </i>int<span class="p">;</span></p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">select <i>capacity </i>into <i>limit</i></p><p class="s46" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">from <i>classroom </i>natural join <i>section</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_995.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_996.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_997.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_998.png"/></span></p><p class="s13" style="padding-left: 190pt;text-indent: 0pt;text-align: left;"><b>where </b>course id <span class="p">= </span>s courseid <b>and </b>sec id <span class="p">= </span>s secid</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_999.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1000.png"/></span></p><p class="s13" style="padding-left: 211pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><b>and </b>semester <span class="p">= </span>s semester <b>and </b>year <span class="p">= </span>s year<span class="p">;</span></p><p class="s13" style="padding-left: 168pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><b>if </b><span class="p">(</span>currEnrol <span class="s83">&lt; </span>limit<span class="p">)</span></p><p class="s46" style="padding-left: 190pt;text-indent: 0pt;line-height: 10pt;text-align: left;">begin</p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">insert into <i>takes </i>values</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1002.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1005.png"/></span></p><p style="padding-left: 232pt;text-indent: 0pt;text-align: left;">(<i>s id</i>, <i>s courseid</i>, <i>s secid</i>, <i>s semester</i>, <i>s year</i>, null);</p><p class="s46" style="padding-left: 211pt;text-indent: 0pt;text-align: left;">return<span class="p">(0);</span></p><p class="s46" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">end</p><p class="s15" style="text-indent: 0pt;text-align: left;">||</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 168pt;text-indent: 0pt;text-align: left;">– – Otherwise, section capacity limit already reached</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1006.png"/></span></p><p class="s15" style="text-indent: 0pt;text-align: left;">||    ||</p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="padding-left: 168pt;text-indent: 0pt;text-align: left;"><b>set </b>errorMsg <span class="p">= ’Enrollment limit reached for course ’  </span>s courseid</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1007.png"/></span></p><p style="padding-left: 199pt;text-indent: 0pt;text-align: left;">’ section ’  <i>s secid</i>;</p><p class="s46" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">return<span class="p">(-1);</span></p><p class="s46" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1008.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 166pt;text-indent: 0pt;text-align: left;">Figure 5.8 <span class="s74">Procedure to register a student for a course section.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">5.2.3 External Language Routines</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Although the procedural extensions to <span class="s44">SQL </span>can be very useful, they are unfortunately not supported in a standard way across databases. Even the most basic features have diﬀerent syntax or semantics in diﬀerent database products. As a result, programmers have to learn a new language for each database product. An alternative that is gaining</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="493" height="592" alt="image" src="Image_1009.png"/></span></p><p class="s73" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">Note 5.2 <span class="s146">NONSTANDARD SYNTAX FOR PROCEDURES AND FUNCTIONS</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: justify;">Although the <span class="s44">SQL </span>standard deﬁnes the syntax for procedures and functions, most databases do not follow the standard strictly, and there is considerable variation in the syntax supported. One of the reasons for this situation is that these databases typically introduced support for procedures and functions before the syntax was standardized, and they continue to support their original syntax. It is not possi- ble to list the syntax supported by each database here, but we illustrate a few of the diﬀerences in the case of Oracle’s <span class="s44">PL</span>/<span class="s44">SQL </span>by showing below a version of the function from Figure 5.6 as it would be deﬁned in <span class="s44">PL</span>/<span class="s44">SQL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">create function <i>dept count </i><span class="p">(</span><i>dname </i>in <i>instructor.dept name</i>%type<span class="p">) </span>return integer as</p><p class="s46" style="padding-left: 108pt;text-indent: 0pt;text-align: left;"><i>d count </i>integer<span class="p">; </span>begin</p><p class="s46" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">select count<span class="p">(*) </span>into <i>d count</i></p><p class="s46" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p class="s13" style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><b>where </b>instructor.dept name <span class="p">= </span>dname<span class="p">;</span></p><p class="s46" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">return <i>d count</i><span class="p">;</span></p><p class="s46" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: justify;">While the two versions are similar in concept, there are a number of minor syn- tactic diﬀerences, some of which are evident when comparing the two versions of the function. Although not shown here, the syntax for control ﬂow in <span class="s44">PL</span>/<span class="s44">SQL </span>also has several diﬀerences from the syntax presented here.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">Observe that <span class="s44">PL</span>/<span class="s44">SQL </span>allows a type to be speciﬁed as the type of an attribute of a relation, by adding the suﬃx <i>%type</i>. On the other hand, <span class="s44">PL</span>/<span class="s44">SQL </span>does not directly support the ability to return a table, although there is an indirect way of implement- ing this functionality by creating a table type. The procedural languages supported by other databases also have a number of syntactic and semantic diﬀerences. See the respective language references for more information. The use of nonstandard syntax for stored procedures and functions is an impediment to porting an appli- cation to a diﬀerent database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">support is to deﬁne procedures in an imperative programming language, but allow them to be invoked from <span class="s44">SQL </span>queries and trigger deﬁnitions.</p><p class="s42" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">SQL <span class="s43">allows us to deﬁne functions in a programming language such as Java, C#, C, or C++. Functions deﬁned in this fashion can be more eﬃcient than functions deﬁned in </span>SQL<span class="s43">, and computations that cannot be carried out in </span>SQL <span class="s43">can be executed by these functions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: left;">External procedures and functions can be speciﬁed in this way (note that the exact syntax depends on the speciﬁc database system you use):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1010.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1011.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1012.png"/></span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">create procedure <span class="p">dept count proc( </span>in <i>dept name </i>varchar<span class="p">(20),</span></p><p class="s46" style="padding-left: 326pt;text-indent: 0pt;text-align: left;">out <span class="p">count </span>integer<span class="p">)</span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">language <span class="p">C</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1013.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1014.png"/></span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">external name <span class="p">&#39;/usr/avi/bin/dept count proc&#39;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1015.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1016.png"/></span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">create function <span class="p">dept count (</span><i>dept name </i>varchar<span class="p">(20)) </span>returns <span class="p">integer</span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">language <span class="p">C</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1017.png"/></span></p><p class="s46" style="padding-left: 177pt;text-indent: 0pt;text-align: left;">external name <span class="p">&#39;/usr/avi/bin/dept count&#39;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">In general, the external language procedures need to deal with null values in parameters (both <b>in </b>and <b>out</b>) and return values. They also need to communicate failure/success status and to deal with exceptions. This information can be communicated by extra parameters: an <b>sqlstate </b>value to indicate failure/success status, a parameter to store the return value of the function, and indicator variables for each parameter/function result to indicate if the value is null. Other mechanisms are possible to handle null values, for example, by passing pointers instead of values. The exact mechanisms depend on the database. However, if a function does not deal with these situations, an extra line <b>parameter style general </b>can be added to the declaration to indicate that the external procedures/functions take only the arguments shown and do not handle null values or exceptions.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Functions deﬁned in a programming language and compiled outside the database system may be loaded and executed with the database-system code. However, doing so carries the risk that a bug in the program can corrupt the internal structures of the database and can bypass the access-control functionality of the database system. Database systems that are concerned more about eﬃcient performance than about se- curity may execute procedures in such a fashion. Database systems that are concerned about security may execute such code as part of a separate process, communicate the parameter values to it, and fetch results back via interprocess communication. How- ever, the time overhead of interprocess communication is quite high; on typical <span class="s44">CPU </span>architectures, tens to hundreds of thousands of instructions can execute in the time taken for one interprocess communication.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If the code is written in a “safe” language such as Java or C#, there is another possibility: executing the code in a <span class="s63">sandbox </span>within the database query execution process itself. The sandbox allows the Java or C# code to access its own memory area, but it prevents the code from reading or updating the memory of the query execution process, or accessing ﬁles in the ﬁle system. (Creating a sandbox is not possible for a language such as C, which allows unrestricted access to memory through pointers.) Avoiding interprocess communication reduces function call overhead greatly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;"><a name="bookmark71">Several database systems today support external language routines running in a sandbox within the query execution process. For example, Oracle and </a><span class="s44">IBM DB2 </span>allow Java functions to run as part of the database process. Microsoft <span class="s44">SQL S</span>erver allows procedures compiled into the Common Language Runtime (CLR) to execute within the database process; such procedures could have been written, for example, in C# or Visual Basic. <span class="s44">P</span>ostgre<span class="s44">SQL </span>allows functions deﬁned in several languages, such as Perl, Python, and Tcl.<a name="bookmark111">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part118.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part120.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
