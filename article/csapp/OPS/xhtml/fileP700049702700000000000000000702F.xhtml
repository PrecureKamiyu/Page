<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>9.1 Physical and Virtual Addressing</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000702F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000457EF" data-uri="chapter09.xhtml#P70004970270000000000000000457EF" epub:type="title"><span class="pcalibre label pcalibre1">9.1 </span>Physical and Virtual Addressing</h1></header>
<p id="P70004970270000000000000000457F0" data-uri="chapter09.xhtml#P70004970270000000000000000457F0" class="pcalibre1 pcalibre calibre2">The main memory of a computer system is organized as an array of <var class="calibre5 pcalibre pcalibre1">M</var> contiguous byte-size cells. Each byte has a unique <i class="calibre5 pcalibre pcalibre1">physical address (PA).</i> The first byte has an address of 0, the next byte an address of 1, the next byte an address of 2, and so on. Given this simple organization, the most natural way for a CPU to access memory would be to use physical addresses. We call this approach <i class="calibre5 pcalibre pcalibre1">physical addressing.</i> <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007033"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.1</span></a> shows an example of physical addressing in the context of a load instruction that reads the 4-byte word starting at physical address 4. When the CPU executes the load instruction, it generates an effective physical address and passes it to main memory over the memory bus. The main memory fetches the 4-byte word starting at physical address 4 and returns it to the CPU, which stores it in a register.</p>
<p id="P70004970270000000000000000457F1" data-uri="chapter09.xhtml#P70004970270000000000000000457F1" class="pcalibre1 pcalibre calibre2">Early PCs used physical addressing, and systems such as digital signal processors, embedded microcontrollers, and Cray supercomputers continue to do so. However, modern processors use a form of addressing known as <i class="calibre5 pcalibre pcalibre1">virtual addressing</i>, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007037"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.2</span></a>.</p>

<figure id="P7000497027000000000000000007033" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007033">
<img alt="A diagram shows a cycle: from CPU, physical address (PA) 4 is sent to main memory, where registers 4 through 7 are highlighted, from which data word is sent back to CPU." id="P70004970270000000000000000457F2" data-uri="P700049702700000000000000000B779" src="../images/p803-1.png" class="pcalibre1 pcalibre calibre259"/>
<figcaption id="P70004970270000000000000000457F3" data-uri="chapter09.xhtml#P70004970270000000000000000457F3" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000457F4" data-uri="chapter09.xhtml#P70004970270000000000000000457F4" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.1 </span>A system that uses physical addressing.</h1></header>
</figcaption>
</figure>
<figure id="P7000497027000000000000000007037" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007037">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007038" title="804" data-uri="chapter09.xhtml#P7000497027000000000000000007038" epub:type="pagebreak"></span>
<img alt="A diagram shows a cycle between CPU chip and main memory." id="P70004970270000000000000000457F5" data-uri="P700049702700000000000000000B77A" src="../images/p804-1.png" class="calibre260 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000457F6" data-uri="chapter09.xhtml#P70004970270000000000000000457F6" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000457F7" data-uri="chapter09.xhtml#P70004970270000000000000000457F7" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.2 </span>A system that uses virtual addressing.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025B2A" data-uri="chapter09.xhtml#P7000497027000000000000000025B2A">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000457F8" data-uri="chapter09.xhtml#P70004970270000000000000000457F8" class="pcalibre calibre3 pcalibre1">A diagram shows a cycle: within CPU chip, virtual address (VA) 4100 flows from CPU to MMU (address translation); physical address (PA) 4 flows from CPU chip to main memory, where registers 4 through 7 are highlighted, from which data word is sent back to CPU.</p>
</details>
</figcaption>
</figure>
<p id="P70004970270000000000000000457F9" data-uri="chapter09.xhtml#P70004970270000000000000000457F9" class="pcalibre1 pcalibre calibre2">With virtual addressing, the CPU accesses main memory by generating a <i class="calibre5 pcalibre pcalibre1">virtual address (VA)</i>, which is converted to the appropriate physical address before being sent to main memory. The task of converting a virtual address to a physical one is known as <i class="calibre5 pcalibre pcalibre1">address translation.</i> Like exception handling, address translation requires close cooperation between the CPU hardware and the operating system. Dedicated hardware on the CPU chip called the <i class="calibre5 pcalibre pcalibre1">memory management unit (MMU)</i> translates virtual addresses on the fly, using a lookup table stored in main memory whose contents are managed by the operating system.</p>
</section></body></html>
