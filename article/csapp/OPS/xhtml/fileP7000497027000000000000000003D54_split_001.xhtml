<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>4.3 Sequential Y86-64 Implementations</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000003D54" class="pcalibre halftitlepage pcalibre1">
<section id="P7000497027000000000000000004004" data-uri="chapter04.xhtml#P7000497027000000000000000004004" class="pcalibre halftitlepage pcalibre1">
<section class="feature pcalibre pcalibre1" id="P7000497027000000000000000042245" data-uri="chapter04.xhtml#P7000497027000000000000000042245"><header class="calibre61 pcalibre pcalibre1"><h1 class="pcalibre1 pcalibre title8" id="P7000497027000000000000000042246" data-uri="chapter04.xhtml#P7000497027000000000000000042246" epub:type="title"><span class="pcalibre label pcalibre1">Principle: </span></h1></header>
<p id="P7000497027000000000000000042247" data-uri="chapter04.xhtml#P7000497027000000000000000042247" class="pcalibre1 pcalibre calibre2">No reading back</p>
<p id="P7000497027000000000000000042248" data-uri="chapter04.xhtml#P7000497027000000000000000042248" class="pcalibre1 pcalibre calibre2">The processor never needs to read back the state updated by an instruction in order to complete the processing of this instruction.</p>
</section>
<p id="P7000497027000000000000000042249" data-uri="chapter04.xhtml#P7000497027000000000000000042249" class="pcalibre1 pcalibre calibre2">This principle is crucial to the success of our implementation. As an illustration, suppose we implemented the <code id="P700049702700000000000000004224A" data-uri="chapter04.xhtml#P700049702700000000000000004224A" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction by first decrementing <code id="P700049702700000000000000004224B" data-uri="chapter04.xhtml#P700049702700000000000000004224B" class="pcalibre1 calibre8 pcalibre">%rsp</code> by 8 and then using the updated value of <code id="P700049702700000000000000004224C" data-uri="chapter04.xhtml#P700049702700000000000000004224C" class="pcalibre1 calibre8 pcalibre">%rsp</code> as the address of a write operation. This approach would violate the principle stated above. It would require reading the updated stack pointer from the register file in order to perform the memory operation. Instead, our implementation (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a>) generates the decremented value of the stack pointer as the signal valE and then uses this signal both as the data for the register write and the address for the memory write. As a result, it can perform the register and memory writes simultaneously as the clock rises to begin the next clock cycle.</p>
<p id="P700049702700000000000000004224D" data-uri="chapter04.xhtml#P700049702700000000000000004224D" class="pcalibre1 pcalibre calibre2">As another illustration of this principle, we can see that some instructions (the integer operations) set the condition codes, and some instructions (the conditional move and jump instructions) read these condition codes, but no instruction must both set and then read the condition codes. Even though the condition codes are not set until the clock rises to begin the next clock cycle, they will be updated before any instruction attempts to read them.</p>
<p id="P700049702700000000000000004224E" data-uri="chapter04.xhtml#P700049702700000000000000004224E" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004031"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.25</span></a> shows how the SEQ hardware would process the instructions at lines 3 and 4 in the following code sequence, shown in assembly code with the instruction addresses listed on the left:</p>
<pre id="P700049702700000000000000004224F" data-uri="chapter04.xhtml#P700049702700000000000000004224F" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042250" data-uri="chapter04.xhtml#P7000497027000000000000000042250" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000401A" title="402" data-uri="chapter04.xhtml#P700049702700000000000000000401A" epub:type="pagebreak"></span>1	0x000:	<code id="P7000497027000000000000000042251" data-uri="chapter04.xhtml#P7000497027000000000000000042251" class="pcalibre1 calibre8 pcalibre">irmovq</code> $0x100, %rbx	# %rbx &lt;-- 0x100
2	0x00a:	<code id="P7000497027000000000000000042252" data-uri="chapter04.xhtml#P7000497027000000000000000042252" class="pcalibre1 calibre8 pcalibre">irmovq</code> $0x200,%rdx	# %rdx &lt;-- 0x200
3	0x014:	addq %rdx, %rbx	# %rbx &lt;-- 0x300 CC &lt;-- 000
4	0x016:	je dest	# Not taken
5	0x0lf:	rmmovq %rbx,0(%rdx)	# M[0x200] &lt;-- 0x300
6	0x029:	dest: halt
</code>
</pre>
<p id="P7000497027000000000000000042253" data-uri="chapter04.xhtml#P7000497027000000000000000042253" class="pcalibre1 pcalibre calibre2">Each of the diagrams labeled 1 through 4 shows the four state elements plus the combinational logic and the connections among the state elements. We show the combinational logic as being wrapped around the condition code register, because some of the combinational logic (such as the ALU) generates the input to the condition code register, while other parts (such as the branch computation and the PC selection logic) have the condition code register as input. We show the register file and the data memory as having separate connections for reading and writing, since the read operations propagate through these units as if they were combinational logic, while the write operations are controlled by the clock.</p>
<p id="P7000497027000000000000000042254" data-uri="chapter04.xhtml#P7000497027000000000000000042254" class="pcalibre1 pcalibre calibre2">The color coding in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004031"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.25</span></a> indicates how the circuit signals relate to the different instructions being executed. We assume the processing starts with the condition codes, listed in the order <code id="P7000497027000000000000000042255" data-uri="chapter04.xhtml#P7000497027000000000000000042255" class="pcalibre1 calibre8 pcalibre">ZF, SF</code>, and <code id="P7000497027000000000000000042256" data-uri="chapter04.xhtml#P7000497027000000000000000042256" class="pcalibre1 calibre8 pcalibre">OF</code>, set to <code id="P7000497027000000000000000042257" data-uri="chapter04.xhtml#P7000497027000000000000000042257" class="pcalibre1 calibre8 pcalibre">100</code>. At the beginning of clock cycle 3 (point 1), the state elements hold the state as updated by the second <code id="P7000497027000000000000000042258" data-uri="chapter04.xhtml#P7000497027000000000000000042258" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction (line 2 of the listing), shown in light gray. The combinational logic is shown in white, indicating that it has not yet had time to react to the changed state. The clock cycle begins with address <code id="P7000497027000000000000000042259" data-uri="chapter04.xhtml#P7000497027000000000000000042259" class="pcalibre1 calibre8 pcalibre">0x014</code> loaded into the program counter. This causes the <code id="P700049702700000000000000004225A" data-uri="chapter04.xhtml#P700049702700000000000000004225A" class="pcalibre1 calibre8 pcalibre">addq</code> instruction (line 3 of the listing), shown in blue, to be fetched and processed. Values flow through the combinational logic, including the reading of the random access memories. By the end of the cycle (point 2), the combinational logic has generated new values (<code id="P700049702700000000000000004225B" data-uri="chapter04.xhtml#P700049702700000000000000004225B" class="pcalibre1 calibre8 pcalibre">000</code>) for the condition codes, an update for program register <code id="P700049702700000000000000004225C" data-uri="chapter04.xhtml#P700049702700000000000000004225C" class="pcalibre1 calibre8 pcalibre">%rbx</code>, and a new value (<code id="P700049702700000000000000004225D" data-uri="chapter04.xhtml#P700049702700000000000000004225D" class="pcalibre1 calibre8 pcalibre">0x016</code>) for the program counter. At this point, the combinational logic has been updated according to the <code id="P700049702700000000000000004225E" data-uri="chapter04.xhtml#P700049702700000000000000004225E" class="pcalibre1 calibre8 pcalibre">addq</code> instruction (shown in blue), but the state still holds the values set by the second <code id="P700049702700000000000000004225F" data-uri="chapter04.xhtml#P700049702700000000000000004225F" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction (shown in light gray).</p>
<p id="P7000497027000000000000000042260" data-uri="chapter04.xhtml#P7000497027000000000000000042260" class="pcalibre1 pcalibre calibre2">As the clock rises to begin cycle 4 (point 3), the updates to the program counter, the register file, and the condition code register occur, and so we show these in blue, but the combinational logic has not yet reacted to these changes, and so we show this in white. In this cycle, the <code id="P7000497027000000000000000042261" data-uri="chapter04.xhtml#P7000497027000000000000000042261" class="pcalibre1 calibre8 pcalibre">je</code> instruction (line 4 in the listing), shown in dark gray, is fetched and executed. Since condition code <code id="P7000497027000000000000000042262" data-uri="chapter04.xhtml#P7000497027000000000000000042262" class="pcalibre1 calibre8 pcalibre">ZF</code> is 0, the branch is not taken. By the end of the cycle (point 4), a new value of <code id="P7000497027000000000000000042263" data-uri="chapter04.xhtml#P7000497027000000000000000042263" class="pcalibre1 calibre8 pcalibre">0x01f</code> has been generated for the program counter. The combinational logic has been updated according to the <code id="P7000497027000000000000000042264" data-uri="chapter04.xhtml#P7000497027000000000000000042264" class="pcalibre1 calibre8 pcalibre">je</code> instruction (shown in dark gray), but the state still holds the values set by the <code id="P7000497027000000000000000042265" data-uri="chapter04.xhtml#P7000497027000000000000000042265" class="pcalibre1 calibre8 pcalibre">addq</code> instruction (shown in blue) until the next cycle begins.</p>
<p id="P7000497027000000000000000042266" data-uri="chapter04.xhtml#P7000497027000000000000000042266" class="pcalibre1 pcalibre calibre2">As this example illustrates, the use of a clock to control the updating of the state elements, combined with the propagation of values through combinational logic, suffices to control the computations performed for each instruction in our implementation of SEQ. Every time the clock transitions from low to high, the processor begins executing a new instruction.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004031" data-uri="chapter04.xhtml#P7000497027000000000000000004031">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004032" title="403" data-uri="chapter04.xhtml#P7000497027000000000000000004032" epub:type="pagebreak"></span><img alt="A diagram illustrates tracing cycles." id="P7000497027000000000000000042267" data-uri="P700049702700000000000000000B6DC" src="../images/p403-1.png" class="calibre122 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042268" data-uri="chapter04.xhtml#P7000497027000000000000000042268" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042269" data-uri="chapter04.xhtml#P7000497027000000000000000042269" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.25 </span>Tracing two cycles of execution by SEQ.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004226A" data-uri="chapter04.xhtml#P700049702700000000000000004226A"><p id="P700049702700000000000000004226B" data-uri="chapter04.xhtml#P700049702700000000000000004226B" class="pcalibre1 pcalibre calibre2"> Each cycle begins with the state elements (program counter, condition code register, register file, and data memory) set according to the previous instruction. Signals propagate through the combinational logic, creating new values for the state elements. These values are loaded into the state elements to start the next cycle.</p><p id="P700049702700000000000000004226C" data-uri="chapter04.xhtml#P700049702700000000000000004226C" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022546" data-uri="chapter04.xhtml#P7000497027000000000000000022546">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000004226D" data-uri="chapter04.xhtml#P700049702700000000000000004226D" class="pcalibre1 pcalibre calibre2">A diagram shows clock rising and falling within four cycles, with the beginning and ending of cycles 4 and 5 further illustrated, as summarized after the table of the cycles reproduced below.</p>
<table id="P700049702700000000000000004226E" data-uri="chapter04.xhtml#P700049702700000000000000004226E" class="pcalibre largetable pcalibre1">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004226F" data-uri="chapter04.xhtml#P700049702700000000000000004226F" class="calibre20 pcalibre pcalibre1">Cycle 1</td>
<td id="P7000497027000000000000000042270" data-uri="chapter04.xhtml#P7000497027000000000000000042270" class="calibre20 pcalibre pcalibre1">0x000:</td>
<td id="P7000497027000000000000000042271" data-uri="chapter04.xhtml#P7000497027000000000000000042271" class="calibre20 pcalibre pcalibre1">Irmovq $0x100, %rbx</td>
<td id="P7000497027000000000000000042272" data-uri="chapter04.xhtml#P7000497027000000000000000042272" class="calibre20 pcalibre pcalibre1"># %rbx ← 0x100</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042273" data-uri="chapter04.xhtml#P7000497027000000000000000042273" class="calibre20 pcalibre pcalibre1">Cycle 2</td>
<td id="P7000497027000000000000000042274" data-uri="chapter04.xhtml#P7000497027000000000000000042274" class="calibre20 pcalibre pcalibre1">0x00a:</td>
<td id="P7000497027000000000000000042275" data-uri="chapter04.xhtml#P7000497027000000000000000042275" class="calibre20 pcalibre pcalibre1">Irmovq $0x200, %rdx</td>
<td id="P7000497027000000000000000042276" data-uri="chapter04.xhtml#P7000497027000000000000000042276" class="calibre20 pcalibre pcalibre1"># %rdx ← 0x200</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042277" data-uri="chapter04.xhtml#P7000497027000000000000000042277" class="calibre20 pcalibre pcalibre1">Cycle 3</td>
<td id="P7000497027000000000000000042278" data-uri="chapter04.xhtml#P7000497027000000000000000042278" class="calibre20 pcalibre pcalibre1">0x014:</td>
<td id="P7000497027000000000000000042279" data-uri="chapter04.xhtml#P7000497027000000000000000042279" class="calibre20 pcalibre pcalibre1"> Addq %rdx, %rbx</td>
<td id="P700049702700000000000000004227A" data-uri="chapter04.xhtml#P700049702700000000000000004227A" class="calibre20 pcalibre pcalibre1"># %rbx ← 0x300 CC ← 000</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004227B" data-uri="chapter04.xhtml#P700049702700000000000000004227B" class="calibre20 pcalibre pcalibre1">Cycle 4</td>
<td id="P700049702700000000000000004227C" data-uri="chapter04.xhtml#P700049702700000000000000004227C" class="calibre20 pcalibre pcalibre1">0x016:</td>
<td id="P700049702700000000000000004227D" data-uri="chapter04.xhtml#P700049702700000000000000004227D" class="calibre20 pcalibre pcalibre1">Je dest</td>
<td id="P700049702700000000000000004227E" data-uri="chapter04.xhtml#P700049702700000000000000004227E" class="calibre20 pcalibre pcalibre1"># Not taken</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004227F" data-uri="chapter04.xhtml#P700049702700000000000000004227F" class="calibre20 pcalibre pcalibre1">Cycle 5</td>
<td id="P7000497027000000000000000042280" data-uri="chapter04.xhtml#P7000497027000000000000000042280" class="calibre20 pcalibre pcalibre1">0x01f:</td>
<td id="P7000497027000000000000000042281" data-uri="chapter04.xhtml#P7000497027000000000000000042281" class="calibre20 pcalibre pcalibre1">Rmmovq %rbx, 0(%rdx)</td>
<td id="P7000497027000000000000000042282" data-uri="chapter04.xhtml#P7000497027000000000000000042282" class="calibre20 pcalibre pcalibre1"># M[0x200] ← 0x300</td>
</tr>
</tbody>
</table>
<ol id="P7000497027000000000000000042283" data-uri="chapter04.xhtml#P7000497027000000000000000042283" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000042284" data-uri="chapter04.xhtml#P7000497027000000000000000042284" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042285" data-uri="chapter04.xhtml#P7000497027000000000000000042285" class="pcalibre calibre3 pcalibre1">Beginning of cycle 3: A cycle from PC 0x014 to CC 100 in combinational logic to Write input to Data memory (receiving input and sending Read output between combinational logic), to Write ports input to Register file %rbx = 0x100 (receiving input and sending Read ports output between combinational logic).</p></li>
<li id="P7000497027000000000000000042286" data-uri="chapter04.xhtml#P7000497027000000000000000042286" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042287" data-uri="chapter04.xhtml#P7000497027000000000000000042287" class="pcalibre calibre3 pcalibre1">End of cycle 3: A cycle with PC 0x014 sending input 000 to CC 100 in combinational logic to Write input to Data memory (receiving input and sending Read output between combinational logic), to Write ports input to Register file %rbx = 0x100 (receiving input and sending Read ports output between combinational logic), to input 0x016 to PC.</p></li>
<li id="P7000497027000000000000000042288" data-uri="chapter04.xhtml#P7000497027000000000000000042288" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042289" data-uri="chapter04.xhtml#P7000497027000000000000000042289" class="pcalibre calibre3 pcalibre1">Beginning of cycle 4: A cycle from PC 0x016 to CC 000 in combinational logic to Write input to Data memory (receiving input and sending Read output between combinational logic), to Write ports input to Register file %rbx = 0x300 (receiving input and sending Read ports output between combinational logic).</p></li>
<li id="P700049702700000000000000004228A" data-uri="chapter04.xhtml#P700049702700000000000000004228A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004228B" data-uri="chapter04.xhtml#P700049702700000000000000004228B" class="pcalibre calibre3 pcalibre1">End of cycle 4: A cycle with PC 0x016 sending input to CC 000 in combinational logic to Write input to Data memory (receiving input and sending Read output between combinational logic), to Write ports input to Register file %rbx = 0x300 (receiving input and sending Read ports output between combinational logic), to input 0x01f to PC.</p></li>
</ol>
</details>
</figcaption>
</figure>

</section>
<section id="P7000497027000000000000000004038" data-uri="chapter04.xhtml#P7000497027000000000000000004038" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004228C" data-uri="chapter04.xhtml#P700049702700000000000000004228C" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000403A" title="404" data-uri="chapter04.xhtml#P700049702700000000000000000403A" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">4.3.4 </span>SEQ Stage Implementations</h1></header>
<p id="P700049702700000000000000004228D" data-uri="chapter04.xhtml#P700049702700000000000000004228D" class="pcalibre1 pcalibre calibre2">In this section, we devise HCL descriptions for the control logic blocks required to implement SEQ. A complete HCL description for SEQ is given in Web Aside <span class="smallcaps pcalibre pcalibre1">arch:hcl </span>on page 472. We show some example blocks here, and others are given as practice problems. We recommend that you work these problems as a way to check your understanding of how the blocks relate to the computational requirements of the different instructions.</p>
<p id="P700049702700000000000000004228E" data-uri="chapter04.xhtml#P700049702700000000000000004228E" class="pcalibre1 pcalibre calibre2">Part of the HCL description of SEQ that we do not include here is a definition of the different integer and Boolean signals that can be used as arguments to the HCL operations. These include the names of the different hardware signals, as well as constant values for the different instruction codes, function codes, register names, ALU operations, and status codes. Only those that must be explicitly</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000403D" data-uri="chapter04.xhtml#P700049702700000000000000000403D">

<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000004228F" data-uri="chapter04.xhtml#P700049702700000000000000004228F">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042290" data-uri="chapter04.xhtml#P7000497027000000000000000042290" class="calibre18 pcalibre pcalibre1">Name	</th><th id="P7000497027000000000000000042291" data-uri="chapter04.xhtml#P7000497027000000000000000042291" class="calibre18 pcalibre pcalibre1">Value (hex)	</th><th id="P7000497027000000000000000042292" data-uri="chapter04.xhtml#P7000497027000000000000000042292" class="calibre18 pcalibre pcalibre1">Meaning</th></tr></thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042293" data-uri="chapter04.xhtml#P7000497027000000000000000042293" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000042294" data-uri="chapter04.xhtml#P7000497027000000000000000042294" class="calibre10 pcalibre pcalibre1">IHALT</code></td>	<td id="P7000497027000000000000000042295" data-uri="chapter04.xhtml#P7000497027000000000000000042295" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000042296" data-uri="chapter04.xhtml#P7000497027000000000000000042296" class="calibre10 pcalibre pcalibre1">0</code></td>	<td id="P7000497027000000000000000042297" data-uri="chapter04.xhtml#P7000497027000000000000000042297" class="calibre20 pcalibre pcalibre1">Code for <code id="P7000497027000000000000000042298" data-uri="chapter04.xhtml#P7000497027000000000000000042298" class="calibre10 pcalibre pcalibre1">halt</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042299" data-uri="chapter04.xhtml#P7000497027000000000000000042299" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004229A" data-uri="chapter04.xhtml#P700049702700000000000000004229A" class="calibre10 pcalibre pcalibre1">INOP</code></td>	<td id="P700049702700000000000000004229B" data-uri="chapter04.xhtml#P700049702700000000000000004229B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004229C" data-uri="chapter04.xhtml#P700049702700000000000000004229C" class="calibre10 pcalibre pcalibre1">1</code></td>	<td id="P700049702700000000000000004229D" data-uri="chapter04.xhtml#P700049702700000000000000004229D" class="calibre20 pcalibre pcalibre1">Code for <code id="P700049702700000000000000004229E" data-uri="chapter04.xhtml#P700049702700000000000000004229E" class="calibre10 pcalibre pcalibre1">nop</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004229F" data-uri="chapter04.xhtml#P700049702700000000000000004229F" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422A0" data-uri="chapter04.xhtml#P70004970270000000000000000422A0" class="calibre10 pcalibre pcalibre1">IRRMOVQ</code></td>	<td id="P70004970270000000000000000422A1" data-uri="chapter04.xhtml#P70004970270000000000000000422A1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422A2" data-uri="chapter04.xhtml#P70004970270000000000000000422A2" class="calibre10 pcalibre pcalibre1">2</code></td>	<td id="P70004970270000000000000000422A3" data-uri="chapter04.xhtml#P70004970270000000000000000422A3" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422A4" data-uri="chapter04.xhtml#P70004970270000000000000000422A4" class="calibre10 pcalibre pcalibre1">rrmovq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422A5" data-uri="chapter04.xhtml#P70004970270000000000000000422A5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422A6" data-uri="chapter04.xhtml#P70004970270000000000000000422A6" class="calibre10 pcalibre pcalibre1">IIRMOVQ</code></td>	<td id="P70004970270000000000000000422A7" data-uri="chapter04.xhtml#P70004970270000000000000000422A7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422A8" data-uri="chapter04.xhtml#P70004970270000000000000000422A8" class="calibre10 pcalibre pcalibre1">3</code></td>	<td id="P70004970270000000000000000422A9" data-uri="chapter04.xhtml#P70004970270000000000000000422A9" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422AA" data-uri="chapter04.xhtml#P70004970270000000000000000422AA" class="calibre10 pcalibre pcalibre1">irmovq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422AB" data-uri="chapter04.xhtml#P70004970270000000000000000422AB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422AC" data-uri="chapter04.xhtml#P70004970270000000000000000422AC" class="calibre10 pcalibre pcalibre1">IRMMOVQ</code></td>	<td id="P70004970270000000000000000422AD" data-uri="chapter04.xhtml#P70004970270000000000000000422AD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422AE" data-uri="chapter04.xhtml#P70004970270000000000000000422AE" class="calibre10 pcalibre pcalibre1">4</code></td>	<td id="P70004970270000000000000000422AF" data-uri="chapter04.xhtml#P70004970270000000000000000422AF" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422B0" data-uri="chapter04.xhtml#P70004970270000000000000000422B0" class="calibre10 pcalibre pcalibre1">rmmovq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422B1" data-uri="chapter04.xhtml#P70004970270000000000000000422B1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422B2" data-uri="chapter04.xhtml#P70004970270000000000000000422B2" class="calibre10 pcalibre pcalibre1">IMRMOVQ</code></td>	<td id="P70004970270000000000000000422B3" data-uri="chapter04.xhtml#P70004970270000000000000000422B3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422B4" data-uri="chapter04.xhtml#P70004970270000000000000000422B4" class="calibre10 pcalibre pcalibre1">5</code></td>	<td id="P70004970270000000000000000422B5" data-uri="chapter04.xhtml#P70004970270000000000000000422B5" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422B6" data-uri="chapter04.xhtml#P70004970270000000000000000422B6" class="calibre10 pcalibre pcalibre1">mrmovq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422B7" data-uri="chapter04.xhtml#P70004970270000000000000000422B7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422B8" data-uri="chapter04.xhtml#P70004970270000000000000000422B8" class="calibre10 pcalibre pcalibre1">IOPL</code></td>	<td id="P70004970270000000000000000422B9" data-uri="chapter04.xhtml#P70004970270000000000000000422B9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422BA" data-uri="chapter04.xhtml#P70004970270000000000000000422BA" class="calibre10 pcalibre pcalibre1">6</code></td>	<td id="P70004970270000000000000000422BB" data-uri="chapter04.xhtml#P70004970270000000000000000422BB" class="calibre20 pcalibre pcalibre1">Code for integer operation instructions</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422BC" data-uri="chapter04.xhtml#P70004970270000000000000000422BC" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422BD" data-uri="chapter04.xhtml#P70004970270000000000000000422BD" class="calibre10 pcalibre pcalibre1">IJXX</code></td>	<td id="P70004970270000000000000000422BE" data-uri="chapter04.xhtml#P70004970270000000000000000422BE" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422BF" data-uri="chapter04.xhtml#P70004970270000000000000000422BF" class="calibre10 pcalibre pcalibre1">7</code></td>	<td id="P70004970270000000000000000422C0" data-uri="chapter04.xhtml#P70004970270000000000000000422C0" class="calibre20 pcalibre pcalibre1">Code for jump instructions</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422C1" data-uri="chapter04.xhtml#P70004970270000000000000000422C1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422C2" data-uri="chapter04.xhtml#P70004970270000000000000000422C2" class="calibre10 pcalibre pcalibre1">ICALL</code></td>	<td id="P70004970270000000000000000422C3" data-uri="chapter04.xhtml#P70004970270000000000000000422C3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422C4" data-uri="chapter04.xhtml#P70004970270000000000000000422C4" class="calibre10 pcalibre pcalibre1">8</code></td>	<td id="P70004970270000000000000000422C5" data-uri="chapter04.xhtml#P70004970270000000000000000422C5" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422C6" data-uri="chapter04.xhtml#P70004970270000000000000000422C6" class="calibre10 pcalibre pcalibre1">call</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422C7" data-uri="chapter04.xhtml#P70004970270000000000000000422C7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422C8" data-uri="chapter04.xhtml#P70004970270000000000000000422C8" class="calibre10 pcalibre pcalibre1">IRET</code></td>	<td id="P70004970270000000000000000422C9" data-uri="chapter04.xhtml#P70004970270000000000000000422C9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422CA" data-uri="chapter04.xhtml#P70004970270000000000000000422CA" class="calibre10 pcalibre pcalibre1">9</code></td>	<td id="P70004970270000000000000000422CB" data-uri="chapter04.xhtml#P70004970270000000000000000422CB" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422CC" data-uri="chapter04.xhtml#P70004970270000000000000000422CC" class="calibre10 pcalibre pcalibre1">ret</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422CD" data-uri="chapter04.xhtml#P70004970270000000000000000422CD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422CE" data-uri="chapter04.xhtml#P70004970270000000000000000422CE" class="calibre10 pcalibre pcalibre1">IPUSHq</code></td>	<td id="P70004970270000000000000000422CF" data-uri="chapter04.xhtml#P70004970270000000000000000422CF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422D0" data-uri="chapter04.xhtml#P70004970270000000000000000422D0" class="calibre10 pcalibre pcalibre1">A</code></td>	<td id="P70004970270000000000000000422D1" data-uri="chapter04.xhtml#P70004970270000000000000000422D1" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422D2" data-uri="chapter04.xhtml#P70004970270000000000000000422D2" class="calibre10 pcalibre pcalibre1">pushq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422D3" data-uri="chapter04.xhtml#P70004970270000000000000000422D3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422D4" data-uri="chapter04.xhtml#P70004970270000000000000000422D4" class="calibre10 pcalibre pcalibre1">ipopq</code></td>	<td id="P70004970270000000000000000422D5" data-uri="chapter04.xhtml#P70004970270000000000000000422D5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422D6" data-uri="chapter04.xhtml#P70004970270000000000000000422D6" class="calibre10 pcalibre pcalibre1">B</code></td>	<td id="P70004970270000000000000000422D7" data-uri="chapter04.xhtml#P70004970270000000000000000422D7" class="calibre20 pcalibre pcalibre1">Code for <code id="P70004970270000000000000000422D8" data-uri="chapter04.xhtml#P70004970270000000000000000422D8" class="calibre10 pcalibre pcalibre1">popq</code> instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422D9" data-uri="chapter04.xhtml#P70004970270000000000000000422D9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422DA" data-uri="chapter04.xhtml#P70004970270000000000000000422DA" class="calibre10 pcalibre pcalibre1">FNONE</code></td>	<td id="P70004970270000000000000000422DB" data-uri="chapter04.xhtml#P70004970270000000000000000422DB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422DC" data-uri="chapter04.xhtml#P70004970270000000000000000422DC" class="calibre10 pcalibre pcalibre1">0</code></td>	<td id="P70004970270000000000000000422DD" data-uri="chapter04.xhtml#P70004970270000000000000000422DD" class="calibre20 pcalibre pcalibre1">Default function code</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422DE" data-uri="chapter04.xhtml#P70004970270000000000000000422DE" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422DF" data-uri="chapter04.xhtml#P70004970270000000000000000422DF" class="calibre10 pcalibre pcalibre1">RESP</code></td>	<td id="P70004970270000000000000000422E0" data-uri="chapter04.xhtml#P70004970270000000000000000422E0" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422E1" data-uri="chapter04.xhtml#P70004970270000000000000000422E1" class="calibre10 pcalibre pcalibre1">4</code></td>	<td id="P70004970270000000000000000422E2" data-uri="chapter04.xhtml#P70004970270000000000000000422E2" class="calibre20 pcalibre pcalibre1">Register ID for <code id="P70004970270000000000000000422E3" data-uri="chapter04.xhtml#P70004970270000000000000000422E3" class="calibre10 pcalibre pcalibre1">%rsp</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422E4" data-uri="chapter04.xhtml#P70004970270000000000000000422E4" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422E5" data-uri="chapter04.xhtml#P70004970270000000000000000422E5" class="calibre10 pcalibre pcalibre1">RNONE</code></td>	<td id="P70004970270000000000000000422E6" data-uri="chapter04.xhtml#P70004970270000000000000000422E6" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422E7" data-uri="chapter04.xhtml#P70004970270000000000000000422E7" class="calibre10 pcalibre pcalibre1">F</code></td>	<td id="P70004970270000000000000000422E8" data-uri="chapter04.xhtml#P70004970270000000000000000422E8" class="calibre20 pcalibre pcalibre1">Indicates no register file access</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422E9" data-uri="chapter04.xhtml#P70004970270000000000000000422E9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422EA" data-uri="chapter04.xhtml#P70004970270000000000000000422EA" class="calibre10 pcalibre pcalibre1">ALUADD</code></td>	<td id="P70004970270000000000000000422EB" data-uri="chapter04.xhtml#P70004970270000000000000000422EB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422EC" data-uri="chapter04.xhtml#P70004970270000000000000000422EC" class="calibre10 pcalibre pcalibre1">0</code></td>	<td id="P70004970270000000000000000422ED" data-uri="chapter04.xhtml#P70004970270000000000000000422ED" class="calibre20 pcalibre pcalibre1">Function for addition operation</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422EE" data-uri="chapter04.xhtml#P70004970270000000000000000422EE" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422EF" data-uri="chapter04.xhtml#P70004970270000000000000000422EF" class="calibre10 pcalibre pcalibre1">SAOK</code></td>	<td id="P70004970270000000000000000422F0" data-uri="chapter04.xhtml#P70004970270000000000000000422F0" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422F1" data-uri="chapter04.xhtml#P70004970270000000000000000422F1" class="calibre10 pcalibre pcalibre1">1</code></td>	<td id="P70004970270000000000000000422F2" data-uri="chapter04.xhtml#P70004970270000000000000000422F2" class="calibre20 pcalibre pcalibre1">Status code for normal operation</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422F3" data-uri="chapter04.xhtml#P70004970270000000000000000422F3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422F4" data-uri="chapter04.xhtml#P70004970270000000000000000422F4" class="calibre10 pcalibre pcalibre1">SADR</code></td>	<td id="P70004970270000000000000000422F5" data-uri="chapter04.xhtml#P70004970270000000000000000422F5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422F6" data-uri="chapter04.xhtml#P70004970270000000000000000422F6" class="calibre10 pcalibre pcalibre1">2</code></td>	<td id="P70004970270000000000000000422F7" data-uri="chapter04.xhtml#P70004970270000000000000000422F7" class="calibre20 pcalibre pcalibre1">Status code for address exception</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422F8" data-uri="chapter04.xhtml#P70004970270000000000000000422F8" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422F9" data-uri="chapter04.xhtml#P70004970270000000000000000422F9" class="calibre10 pcalibre pcalibre1">SINS</code></td>	<td id="P70004970270000000000000000422FA" data-uri="chapter04.xhtml#P70004970270000000000000000422FA" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422FB" data-uri="chapter04.xhtml#P70004970270000000000000000422FB" class="calibre10 pcalibre pcalibre1">3</code></td>	<td id="P70004970270000000000000000422FC" data-uri="chapter04.xhtml#P70004970270000000000000000422FC" class="calibre20 pcalibre pcalibre1">Status code for illegal instruction exception</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000422FD" data-uri="chapter04.xhtml#P70004970270000000000000000422FD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000422FE" data-uri="chapter04.xhtml#P70004970270000000000000000422FE" class="calibre10 pcalibre pcalibre1">SHLT</code></td>	<td id="P70004970270000000000000000422FF" data-uri="chapter04.xhtml#P70004970270000000000000000422FF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000042300" data-uri="chapter04.xhtml#P7000497027000000000000000042300" class="calibre10 pcalibre pcalibre1">4</code></td>	<td id="P7000497027000000000000000042301" data-uri="chapter04.xhtml#P7000497027000000000000000042301" class="calibre20 pcalibre pcalibre1">Status code for <code id="P7000497027000000000000000042302" data-uri="chapter04.xhtml#P7000497027000000000000000042302" class="calibre10 pcalibre pcalibre1">halt</code></td></tr>
</tbody>
</table>


<figcaption id="P7000497027000000000000000042303" data-uri="chapter04.xhtml#P7000497027000000000000000042303" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042304" data-uri="chapter04.xhtml#P7000497027000000000000000042304" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.26 </span>Constant values used in HCL descriptions.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042305" data-uri="chapter04.xhtml#P7000497027000000000000000042305"><p id="P7000497027000000000000000042306" data-uri="chapter04.xhtml#P7000497027000000000000000042306" class="pcalibre1 pcalibre calibre2"> These values represent the encodings of the instructions, function codes, register IDs, ALU operations, and status codes.</p><p id="P7000497027000000000000000042307" data-uri="chapter04.xhtml#P7000497027000000000000000042307" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000040B6" data-uri="chapter04.xhtml#P70004970270000000000000000040B6">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000040B7" title="405" data-uri="chapter04.xhtml#P70004970270000000000000000040B7" epub:type="pagebreak"></span><img alt="A diagram illustrates the fetch stage." id="P7000497027000000000000000042308" data-uri="P700049702700000000000000000B6DD" src="../images/p405-1.png" class="calibre123 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042309" data-uri="chapter04.xhtml#P7000497027000000000000000042309" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004230A" data-uri="chapter04.xhtml#P700049702700000000000000004230A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.27 </span>SEQ fetch stage.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004230B" data-uri="chapter04.xhtml#P700049702700000000000000004230B"><p id="P700049702700000000000000004230C" data-uri="chapter04.xhtml#P700049702700000000000000004230C" class="pcalibre1 pcalibre calibre2"> Six bytes are read from the instruction memory using the PC as the starting address. From these bytes, we generate the different instruction fields. The PC increment block computes signal valP.</p><p id="P700049702700000000000000004230D" data-uri="chapter04.xhtml#P700049702700000000000000004230D" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000225E6" data-uri="chapter04.xhtml#P70004970270000000000000000225E6">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000004230E" data-uri="chapter04.xhtml#P700049702700000000000000004230E" class="pcalibre1 pcalibre calibre2">A diagram shows PC leading to instruction memory and PC increment, with the following inputs and outputs.</p>
<ul id="P700049702700000000000000004230F" data-uri="chapter04.xhtml#P700049702700000000000000004230F" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042310" data-uri="chapter04.xhtml#P7000497027000000000000000042310" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042311" data-uri="chapter04.xhtml#P7000497027000000000000000042311" class="pcalibre calibre3 pcalibre1">Instruction memory outputs:</p>
<ul id="P7000497027000000000000000042312" data-uri="chapter04.xhtml#P7000497027000000000000000042312" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042313" data-uri="chapter04.xhtml#P7000497027000000000000000042313" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042314" data-uri="chapter04.xhtml#P7000497027000000000000000042314" class="pcalibre calibre3 pcalibre1">Imem_error</p></li>
<li id="P7000497027000000000000000042315" data-uri="chapter04.xhtml#P7000497027000000000000000042315" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042316" data-uri="chapter04.xhtml#P7000497027000000000000000042316" class="pcalibre calibre3 pcalibre1">Byte 0 to Split, with icode and ifun outputs; icode has input from imem_error and output to Instr valid, need regids, and need valC</p></li>
<li id="P7000497027000000000000000042317" data-uri="chapter04.xhtml#P7000497027000000000000000042317" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042318" data-uri="chapter04.xhtml#P7000497027000000000000000042318" class="pcalibre calibre3 pcalibre1">Bytes 1–9 to Align, with input from Needs regids and outputs rA, rB, and valC.</p></li>
</ul></li>
<li id="P7000497027000000000000000042319" data-uri="chapter04.xhtml#P7000497027000000000000000042319" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004231A" data-uri="chapter04.xhtml#P700049702700000000000000004231A" class="pcalibre calibre3 pcalibre1">PC increment:</p>
<ul id="P700049702700000000000000004231B" data-uri="chapter04.xhtml#P700049702700000000000000004231B" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000004231C" data-uri="chapter04.xhtml#P700049702700000000000000004231C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004231D" data-uri="chapter04.xhtml#P700049702700000000000000004231D" class="pcalibre calibre3 pcalibre1">Inputs: Need regids and Need valC</p></li>
<li id="P700049702700000000000000004231E" data-uri="chapter04.xhtml#P700049702700000000000000004231E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004231F" data-uri="chapter04.xhtml#P700049702700000000000000004231F" class="pcalibre calibre3 pcalibre1">Output valP</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042320" data-uri="chapter04.xhtml#P7000497027000000000000000042320">referenced in the control logic are shown. The constants we use are documented in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000403D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.26</span></a>. By convention, we use uppercase names for constant values.</p>
<p id="P7000497027000000000000000042321" data-uri="chapter04.xhtml#P7000497027000000000000000042321" class="pcalibre1 pcalibre calibre2">In addition to the instructions shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, we include the processing for the <code id="P7000497027000000000000000042322" data-uri="chapter04.xhtml#P7000497027000000000000000042322" class="pcalibre1 calibre8 pcalibre">nop</code> and <code id="P7000497027000000000000000042323" data-uri="chapter04.xhtml#P7000497027000000000000000042323" class="pcalibre1 calibre8 pcalibre">halt</code> instructions. The <code id="P7000497027000000000000000042324" data-uri="chapter04.xhtml#P7000497027000000000000000042324" class="pcalibre1 calibre8 pcalibre">nop</code> instruction simply flows through stages without much processing, except to increment the PC by 1. The <code id="P7000497027000000000000000042325" data-uri="chapter04.xhtml#P7000497027000000000000000042325" class="pcalibre1 calibre8 pcalibre">halt</code> instruction causes the processor status to be set to <code id="P7000497027000000000000000042326" data-uri="chapter04.xhtml#P7000497027000000000000000042326" class="pcalibre1 calibre8 pcalibre">HLT</code>, causing it to <code id="P7000497027000000000000000042327" data-uri="chapter04.xhtml#P7000497027000000000000000042327" class="pcalibre1 calibre8 pcalibre">halt</code> operation.</p>

<section id="P70004970270000000000000000040C5" data-uri="chapter04.xhtml#P70004970270000000000000000040C5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042328" data-uri="chapter04.xhtml#P7000497027000000000000000042328" epub:type="title">Fetch Stage</h1></header>
<p id="P7000497027000000000000000042329" data-uri="chapter04.xhtml#P7000497027000000000000000042329" class="pcalibre1 pcalibre calibre2">As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040B6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.27</span></a>, the fetch stage includes the instruction memory hardware unit. This unit reads 10 bytes from memory at a time, using the PC as the address of the first byte (byte 0). This byte is interpreted as the instruction byte and is split (by the unit labeled "Split") into two 4-bit quantities. The control logic blocks labeled "icode" and "ifun" then compute the instruction and function codes as equaling either the values read from memory or, in the event that the instruction address is not valid (as indicated by the signal <code id="P700049702700000000000000004232A" data-uri="chapter04.xhtml#P700049702700000000000000004232A" class="pcalibre1 calibre8 pcalibre">imem_error</code>), the values corresponding to a <code id="P700049702700000000000000004232B" data-uri="chapter04.xhtml#P700049702700000000000000004232B" class="pcalibre1 calibre8 pcalibre">nop</code> instruction. Based on the value of icode, we can compute three 1-bit signals (shown as dashed lines):</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000004232C" data-uri="chapter04.xhtml#P700049702700000000000000004232C">
<li id="P700049702700000000000000004232D" data-uri="chapter04.xhtml#P700049702700000000000000004232D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004232E" data-uri="chapter04.xhtml#P700049702700000000000000004232E" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">instr_valid. </span>Does this byte correspond to a legal Y86-64 instruction? This signal is used to detect an illegal instruction.</p></li>
<li id="P700049702700000000000000004232F" data-uri="chapter04.xhtml#P700049702700000000000000004232F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042330" data-uri="chapter04.xhtml#P7000497027000000000000000042330" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">need_regids. </span>Does this instruction include a register specifier byte?</p></li>
<li id="P7000497027000000000000000042331" data-uri="chapter04.xhtml#P7000497027000000000000000042331" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042332" data-uri="chapter04.xhtml#P7000497027000000000000000042332" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">need_valC. </span>Does this instruction include a constant word?</p></li>
</ul>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042333" data-uri="chapter04.xhtml#P7000497027000000000000000042333">The signals instr_valid and imem_error (generated when the instruction address is out of bounds) are used to generate the status code in the memory stage.</p>

<p id="P7000497027000000000000000042334" data-uri="chapter04.xhtml#P7000497027000000000000000042334" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000040D3" title="406" data-uri="chapter04.xhtml#P70004970270000000000000000040D3" epub:type="pagebreak"></span>As an example, the HCL description for need_regids simply determines whether the value of icode is one of the instructions that has a register specifier byte:</p>
<pre id="P7000497027000000000000000042335" data-uri="chapter04.xhtml#P7000497027000000000000000042335" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042336" data-uri="chapter04.xhtml#P7000497027000000000000000042336" class="calibre10 pcalibre pcalibre1">bool need_regids =
	icode in { IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, IIRMOVQ, IRMMOVQ, IMRMOVQ };
</code>
</pre>
<section id="P70004970270000000000000000040D6" data-uri="chapter04.xhtml#P70004970270000000000000000040D6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042337" data-uri="chapter04.xhtml#P7000497027000000000000000042337" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.19 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004798">487</a>)</h1></header>
<p id="P7000497027000000000000000042338" data-uri="chapter04.xhtml#P7000497027000000000000000042338" class="pcalibre1 pcalibre calibre2">Write HCL code for the signal <code id="P7000497027000000000000000042339" data-uri="chapter04.xhtml#P7000497027000000000000000042339" class="pcalibre1 calibre8 pcalibre">need_valC</code> in the SEQ implementation.</p>
</section>
<p id="P700049702700000000000000004233A" data-uri="chapter04.xhtml#P700049702700000000000000004233A" class="pcalibre1 pcalibre calibre2">As <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040B6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.27</span></a> shows, the remaining 9 bytes read from the instruction memory encode some combination of the register specifier byte and the constant word. These bytes are processed by the hardware unit labeled "Align" into the register fields and the constant word. Byte 1 is split into register specifiers rA and rB when the computed signal need_regids is 1. If need_regids is 0, both register specifiers are set to <code id="P700049702700000000000000004233B" data-uri="chapter04.xhtml#P700049702700000000000000004233B" class="pcalibre1 calibre8 pcalibre">0xF (RNONE)</code>, indicating there are no registers specified by this instruction. Recall also (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.2</span></a>) that for any instruction having only one register operand, the other field of the register specifier byte will be <code id="P700049702700000000000000004233C" data-uri="chapter04.xhtml#P700049702700000000000000004233C" class="pcalibre1 calibre8 pcalibre">0xF (RNONE)</code>. Thus, we can assume that the signals rA and rB either encode registers we want to access or indicate that register access is not required. The unit labeled "Align" also generates the constant word valC. This will either be bytes 1-8 or bytes 2-9, depending on the value of signal need_regids.</p>
<p id="P700049702700000000000000004233D" data-uri="chapter04.xhtml#P700049702700000000000000004233D" class="pcalibre1 pcalibre calibre2">The PC incrementer hardware unit generates the signal valP, based on the current value of the PC, and the two signals need_regids and need_valC. For PC value <var class="calibre5 pcalibre pcalibre1">p</var>, need_regids value <var class="calibre5 pcalibre pcalibre1">r</var>, and need_valC value <var class="calibre5 pcalibre pcalibre1">i</var>, the incrementer generates the value <var class="calibre5 pcalibre pcalibre1">p</var> + 1 + <var class="calibre5 pcalibre pcalibre1">r</var> + 8<i class="calibre5 pcalibre pcalibre1">i.</i></p>
</section>
<section id="P70004970270000000000000000040DE" data-uri="chapter04.xhtml#P70004970270000000000000000040DE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004233E" data-uri="chapter04.xhtml#P700049702700000000000000004233E" epub:type="title">Decode and Write-Back Stages</h1></header>
<p id="P700049702700000000000000004233F" data-uri="chapter04.xhtml#P700049702700000000000000004233F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040E4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.28</span></a> provides a detailed view of logic that implements both the decode and write-back stages in SEQ. These two stages are combined because they both access the register file.</p>
<p id="P7000497027000000000000000042340" data-uri="chapter04.xhtml#P7000497027000000000000000042340" class="pcalibre1 pcalibre calibre2">The register file has four ports. It supports up to two simultaneous reads (on ports A and B) and two simultaneous writes (on ports E and M). Each port has both an address connection and a data connection, where the address connection is a register ID, and the data connection is a set of 64 wires serving as either an output word (for a read port) or an input word (for a write port) of the register file. The two read ports have address inputs srcA and srcB, while the two write ports have address inputs dstE and dstM. The special identifier <code id="P7000497027000000000000000042341" data-uri="chapter04.xhtml#P7000497027000000000000000042341" class="pcalibre1 calibre8 pcalibre">0xF (RNONE)</code> on an address port indicates that no register should be accessed.</p>
<p id="P7000497027000000000000000042342" data-uri="chapter04.xhtml#P7000497027000000000000000042342" class="pcalibre1 pcalibre calibre2">The four blocks at the bottom of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040E4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.28</span></a> generate the four different register IDs for the register file, based on the instruction code icode, the register specifiers rA and rB, and possibly the condition signal Cnd computed in the execute stage. Register ID srcA indicates which register should be read to generate valA.</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000040E4" data-uri="chapter04.xhtml#P70004970270000000000000000040E4">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000040E5" title="407" data-uri="chapter04.xhtml#P70004970270000000000000000040E5" epub:type="pagebreak"></span><img alt="A diagram illustrates the decode and write-back stage." id="P7000497027000000000000000042343" data-uri="P700049702700000000000000000B6DE" src="../images/p407-1.png" class="calibre124 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042344" data-uri="chapter04.xhtml#P7000497027000000000000000042344" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042345" data-uri="chapter04.xhtml#P7000497027000000000000000042345" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.28 </span>SEQ decode and write-back stage.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042346" data-uri="chapter04.xhtml#P7000497027000000000000000042346"><p id="P7000497027000000000000000042347" data-uri="chapter04.xhtml#P7000497027000000000000000042347" class="pcalibre1 pcalibre calibre2"> The instruction fields are decoded to generate register identifiers for four addresses (two read and two write) used by the register file. The values read from the register file become the signals valA and valB. The two write-back values valE and valM serve as the data for the writes.</p><p id="P7000497027000000000000000042348" data-uri="chapter04.xhtml#P7000497027000000000000000042348" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022621" data-uri="chapter04.xhtml#P7000497027000000000000000022621">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042349" data-uri="chapter04.xhtml#P7000497027000000000000000042349" class="pcalibre1 pcalibre calibre2">A diagram shows the Register file with the following inputs and outputs:</p>
<ul id="P700049702700000000000000004234A" data-uri="chapter04.xhtml#P700049702700000000000000004234A" class="pcalibre calibre31 pcalibre1">
<li id="P700049702700000000000000004234B" data-uri="chapter04.xhtml#P700049702700000000000000004234B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004234C" data-uri="chapter04.xhtml#P700049702700000000000000004234C" class="pcalibre calibre3 pcalibre1">Inputs dstE, dstM, srcA, srcB, valM, and valE to respective ports</p>
<ul id="P700049702700000000000000004234D" data-uri="chapter04.xhtml#P700049702700000000000000004234D" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000004234E" data-uri="chapter04.xhtml#P700049702700000000000000004234E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004234F" data-uri="chapter04.xhtml#P700049702700000000000000004234F" class="pcalibre calibre3 pcalibre1">All receive input from icode</p></li>
<li id="P7000497027000000000000000042350" data-uri="chapter04.xhtml#P7000497027000000000000000042350" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042351" data-uri="chapter04.xhtml#P7000497027000000000000000042351" class="pcalibre calibre3 pcalibre1">dstM and srcA receive input from rA</p></li>
<li id="P7000497027000000000000000042352" data-uri="chapter04.xhtml#P7000497027000000000000000042352" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042353" data-uri="chapter04.xhtml#P7000497027000000000000000042353" class="pcalibre calibre3 pcalibre1">dstE and srcB receive input from rB</p></li>
<li id="P7000497027000000000000000042354" data-uri="chapter04.xhtml#P7000497027000000000000000042354" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042355" data-uri="chapter04.xhtml#P7000497027000000000000000042355" class="pcalibre calibre3 pcalibre1">dstE receives input from Cnd</p></li>
</ul></li>
<li id="P7000497027000000000000000042356" data-uri="chapter04.xhtml#P7000497027000000000000000042356" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042357" data-uri="chapter04.xhtml#P7000497027000000000000000042357" class="pcalibre calibre3 pcalibre1">Outputs: valA and valB from respective ports</p></li>
</ul>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000042358" data-uri="chapter04.xhtml#P7000497027000000000000000042358" class="pcalibre1 pcalibre calibre2">The desired value depends on the instruction type, as shown in the first row for the decode stage in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>. Combining all of these entries into a single computation gives the following HCL description of srcA (recall that <code id="P7000497027000000000000000042359" data-uri="chapter04.xhtml#P7000497027000000000000000042359" class="pcalibre1 calibre8 pcalibre">RESP</code> is the register ID of <code id="P700049702700000000000000004235A" data-uri="chapter04.xhtml#P700049702700000000000000004235A" class="pcalibre1 calibre8 pcalibre">%rsp</code>):</p>
<pre id="P700049702700000000000000004235B" data-uri="chapter04.xhtml#P700049702700000000000000004235B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004235C" data-uri="chapter04.xhtml#P700049702700000000000000004235C" class="calibre10 pcalibre pcalibre1">word srcA = [
		icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ } : rA;
		icode in { IPOPQ, IRET } : RRSP; 
		1 : RNONE; # Don't need register
];
</code>
</pre>
<section id="P70004970270000000000000000040F0" data-uri="chapter04.xhtml#P70004970270000000000000000040F0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P700049702700000000000000004235D" data-uri="chapter04.xhtml#P700049702700000000000000004235D" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.20 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P700049702700000000000000004235E" data-uri="chapter04.xhtml#P700049702700000000000000004235E" class="pcalibre1 pcalibre calibre2">The register signal srcB indicates which register should be read to generate the signal valB. The desired value is shown as the second step in the decode stage in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>. Write HCL code for srcB.</p>
</section>
<p id="P700049702700000000000000004235F" data-uri="chapter04.xhtml#P700049702700000000000000004235F" class="pcalibre1 pcalibre calibre2">Register ID dstE indicates the destination register for write port E, where the computed value valE is stored. This is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a> as the first step in the write-back stage. If we ignore for the moment the conditional move instructions, then we can combine the destination registers for all of the different instructions to give the following HCL description of dstE:</p>
<pre id="P7000497027000000000000000042360" data-uri="chapter04.xhtml#P7000497027000000000000000042360" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042361" data-uri="chapter04.xhtml#P7000497027000000000000000042361" class="calibre10 pcalibre pcalibre1"># WARNING: Conditional move not implemented correctly here word
dstE = [
	icode in { IRRMOVQ } : rB;
	icode in { IIRMOVQ, IOPQ} : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE; # Don't write any register
];
</code>
</pre>
<p id="P7000497027000000000000000042362" data-uri="chapter04.xhtml#P7000497027000000000000000042362" class="pcalibre1 pcalibre calibre2">We will revisit this signal and how to implement conditional moves when we examine the execute stage.</p>


<section id="P70004970270000000000000000040F7" data-uri="chapter04.xhtml#P70004970270000000000000000040F7" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042363" data-uri="chapter04.xhtml#P7000497027000000000000000042363" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000040F9" title="408" data-uri="chapter04.xhtml#P70004970270000000000000000040F9" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.21 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P7000497027000000000000000042364" data-uri="chapter04.xhtml#P7000497027000000000000000042364" class="pcalibre1 pcalibre calibre2">Register ID dstM indicates the destination register for write port M, where valM, the value read from memory, is stored. This is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a> as the second step in the write-back stage. Write HCL code for dstM.</p>
</section>
<section id="P70004970270000000000000000040FB" data-uri="chapter04.xhtml#P70004970270000000000000000040FB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042365" data-uri="chapter04.xhtml#P7000497027000000000000000042365" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.22 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P7000497027000000000000000042366" data-uri="chapter04.xhtml#P7000497027000000000000000042366" class="pcalibre1 pcalibre calibre2">Only the <code id="P7000497027000000000000000042367" data-uri="chapter04.xhtml#P7000497027000000000000000042367" class="pcalibre1 calibre8 pcalibre">popq</code> instruction uses both register file write ports simultaneously. For the instruction <code id="P7000497027000000000000000042368" data-uri="chapter04.xhtml#P7000497027000000000000000042368" class="pcalibre1 calibre8 pcalibre">popq %rsp</code>, the same address will be used for both the E and M write ports, but with different data. To handle this conflict, we must establish a <i class="calibre5 pcalibre pcalibre1">priority</i> among the two write ports so that when both attempt to write the same register on the same cycle, only the write from the higher-priority port takes place. Which of the two ports should be given priority in order to implement the desired behavior, as determined in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C64"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.8</span></a>?</p>
</section>
</section>
<section id="P7000497027000000000000000004100" data-uri="chapter04.xhtml#P7000497027000000000000000004100" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042369" data-uri="chapter04.xhtml#P7000497027000000000000000042369" epub:type="title">Execute Stage</h1></header>
<p id="P700049702700000000000000004236A" data-uri="chapter04.xhtml#P700049702700000000000000004236A" class="pcalibre1 pcalibre calibre2">The execute stage includes the arithmetic/logic unit (ALU). This unit performs the operation <span class="smallcaps pcalibre pcalibre1">add, subtract, and</span>, or <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>on inputs aluA and aluB based on the setting of the alufun signal. These data and control signals are generated by three control blocks, as diagrammed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004107"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.29</span></a>. The ALU output becomes the signal valE.</p>
<p id="P700049702700000000000000004236B" data-uri="chapter04.xhtml#P700049702700000000000000004236B" class="pcalibre1 pcalibre calibre2">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, the ALU computation for each instruction is shown as the first step in the execute stage. The operands are listed with aluB first, followed by aluA to make sure the <code id="P700049702700000000000000004236C" data-uri="chapter04.xhtml#P700049702700000000000000004236C" class="pcalibre1 calibre8 pcalibre">subq</code> instruction subtracts valA from valB. We can see that the value of aluA can be valA, valC, or either -8 or +8, depending on the instruction type. We can therefore express the behavior of the control block that generates aluA as follows:</p>
<pre id="P700049702700000000000000004236D" data-uri="chapter04.xhtml#P700049702700000000000000004236D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004236E" data-uri="chapter04.xhtml#P700049702700000000000000004236E" class="calibre10 pcalibre pcalibre1">word aluA = [
	icode in { IRRMOVQ, IOPQ } : valA;
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ } : valC;
</code>
</pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004107" data-uri="chapter04.xhtml#P7000497027000000000000000004107">
<img alt="A diagram illustrates the execute stage." id="P700049702700000000000000004236F" data-uri="P700049702700000000000000000B6DF" src="../images/p408-1.png" class="pcalibre1 calibre125 pcalibre"/>
<figcaption id="P7000497027000000000000000042370" data-uri="chapter04.xhtml#P7000497027000000000000000042370" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042371" data-uri="chapter04.xhtml#P7000497027000000000000000042371" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.29 </span>SEQ execute stage.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042372" data-uri="chapter04.xhtml#P7000497027000000000000000042372"><p id="P7000497027000000000000000042373" data-uri="chapter04.xhtml#P7000497027000000000000000042373" class="pcalibre1 pcalibre calibre2"> The ALU either performs the operation for an integer operation instruction or acts as an adder. The condition code registers are set according to the ALU value. The condition code values are tested to determine whether a branch should be taken.</p><p id="P7000497027000000000000000042374" data-uri="chapter04.xhtml#P7000497027000000000000000042374" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002264D" data-uri="chapter04.xhtml#P700049702700000000000000002264D">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042375" data-uri="chapter04.xhtml#P7000497027000000000000000042375" class="pcalibre1 pcalibre calibre2">A diagram shows ALU with the following inputs and outputs:</p>
<ul id="P7000497027000000000000000042376" data-uri="chapter04.xhtml#P7000497027000000000000000042376" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042377" data-uri="chapter04.xhtml#P7000497027000000000000000042377" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042378" data-uri="chapter04.xhtml#P7000497027000000000000000042378" class="pcalibre calibre3 pcalibre1">Inputs:</p>
<ul id="P7000497027000000000000000042379" data-uri="chapter04.xhtml#P7000497027000000000000000042379" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000004237A" data-uri="chapter04.xhtml#P700049702700000000000000004237A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004237B" data-uri="chapter04.xhtml#P700049702700000000000000004237B" class="pcalibre calibre3 pcalibre1">ALU A, with input from icode, valC, and valA</p></li>
<li id="P700049702700000000000000004237C" data-uri="chapter04.xhtml#P700049702700000000000000004237C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004237D" data-uri="chapter04.xhtml#P700049702700000000000000004237D" class="pcalibre calibre3 pcalibre1">ALU B, with input from icode and valB</p></li>
<li id="P700049702700000000000000004237E" data-uri="chapter04.xhtml#P700049702700000000000000004237E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004237F" data-uri="chapter04.xhtml#P700049702700000000000000004237F" class="pcalibre calibre3 pcalibre1">ALU fun., with input from icode and ifun</p></li>
</ul></li>
<li id="P7000497027000000000000000042380" data-uri="chapter04.xhtml#P7000497027000000000000000042380" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042381" data-uri="chapter04.xhtml#P7000497027000000000000000042381" class="pcalibre calibre3 pcalibre1">Outputs: valE and CC; CC receives input from Set CC, from icode, and sends output to cond, also receiving input from ifun and leading to Cnd</p></li>
</ul>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000042382" data-uri="chapter04.xhtml#P7000497027000000000000000042382" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000410E" title="409" data-uri="chapter04.xhtml#P700049702700000000000000000410E" epub:type="pagebreak"></span></p>
<pre id="P7000497027000000000000000042383" data-uri="chapter04.xhtml#P7000497027000000000000000042383" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042384" data-uri="chapter04.xhtml#P7000497027000000000000000042384" class="calibre10 pcalibre pcalibre1">	icode in { ICALL, IPUSHQ } : -8;
	icode in { IRET, IPOPQ } : 8;
	# Other instructions don't need ALU
];
</code>
</pre>
<section id="P7000497027000000000000000004111" data-uri="chapter04.xhtml#P7000497027000000000000000004111" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042385" data-uri="chapter04.xhtml#P7000497027000000000000000042385" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.23 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P7000497027000000000000000042386" data-uri="chapter04.xhtml#P7000497027000000000000000042386" class="pcalibre1 pcalibre calibre2">Based on the first operand of the first step of the execute stage in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, write an HCL description for the signal aluB in SEQ.</p>
</section>
<p id="P7000497027000000000000000042387" data-uri="chapter04.xhtml#P7000497027000000000000000042387" class="pcalibre1 pcalibre calibre2">Looking at the operations performed by the ALU in the execute stage, we can see that it is mostly used as an adder. For the <code id="P7000497027000000000000000042388" data-uri="chapter04.xhtml#P7000497027000000000000000042388" class="pcalibre1 calibre8 pcalibre">OPq</code> instructions, however, we want it to use the operation encoded in the ifun field of the instruction. We can therefore write the HCL description for the ALU control as follows:</p>
<pre id="P7000497027000000000000000042389" data-uri="chapter04.xhtml#P7000497027000000000000000042389" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004238A" data-uri="chapter04.xhtml#P700049702700000000000000004238A" class="calibre10 pcalibre pcalibre1">word alufun = [
	icode == IOPQ : ifun;
	1 : ALUADD;
];
</code>
</pre>
<p id="P700049702700000000000000004238B" data-uri="chapter04.xhtml#P700049702700000000000000004238B" class="pcalibre1 pcalibre calibre2">The execute stage also includes the condition code register. Our ALU generates the three signals on which the condition codes are based—zero, sign, and overflow—every time it operates. However, we only want to set the condition codes when an <code id="P700049702700000000000000004238C" data-uri="chapter04.xhtml#P700049702700000000000000004238C" class="pcalibre1 calibre8 pcalibre">OPq</code> instruction is executed. We therefore generate a signal set_cc that controls whether or not the condition code register should be updated:</p>
<pre id="P700049702700000000000000004238D" data-uri="chapter04.xhtml#P700049702700000000000000004238D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004238E" data-uri="chapter04.xhtml#P700049702700000000000000004238E" class="calibre10 pcalibre pcalibre1">bool set_cc = icode in { IOPQ };</code></pre>
<p id="P700049702700000000000000004238F" data-uri="chapter04.xhtml#P700049702700000000000000004238F" class="pcalibre1 pcalibre calibre2">The hardware unit labeled "cond" uses a combination of the condition codes and the function code to determine whether a conditional branch or data transfer should take place (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B10"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.3</span></a>). It generates the Cnd signal used both for the setting of dstE with conditional moves and in the next PC logic for conditional branches. For other instructions, the Cnd signal may be set to either 1 or 0, depending on the instruction's function code and the setting of the condition codes, but it will be ignored by the control logic. We omit the detailed design of this unit.</p>
<section id="P700049702700000000000000000411D" data-uri="chapter04.xhtml#P700049702700000000000000000411D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042390" data-uri="chapter04.xhtml#P7000497027000000000000000042390" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.24 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P7000497027000000000000000042391" data-uri="chapter04.xhtml#P7000497027000000000000000042391" class="pcalibre1 pcalibre calibre2">The conditional move instructions, abbreviated <code id="P7000497027000000000000000042392" data-uri="chapter04.xhtml#P7000497027000000000000000042392" class="pcalibre1 calibre8 pcalibre">cmovXX</code>, have instruction code <code id="P7000497027000000000000000042393" data-uri="chapter04.xhtml#P7000497027000000000000000042393" class="pcalibre1 calibre8 pcalibre">IRRMOVQ</code>. As <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040E4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.28</span></a> shows, we can implement these instructions by making use of the Cnd signal, generated in the execute stage. Modify the HCL code for dstE to implement these instructions.</p>
</section>
</section>
<section id="P7000497027000000000000000004122" data-uri="chapter04.xhtml#P7000497027000000000000000004122" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042394" data-uri="chapter04.xhtml#P7000497027000000000000000042394" epub:type="title">Memory Stage</h1></header>
<p id="P7000497027000000000000000042395" data-uri="chapter04.xhtml#P7000497027000000000000000042395" class="pcalibre1 pcalibre calibre2">The memory stage has the task of either reading or writing program data. As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004125"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.30</span></a>, two control blocks generate the values for the memory</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004125" data-uri="chapter04.xhtml#P7000497027000000000000000004125">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004126" title="410" data-uri="chapter04.xhtml#P7000497027000000000000000004126" epub:type="pagebreak"></span><img alt="A diagram illustrates memory stage." id="P7000497027000000000000000042396" data-uri="P700049702700000000000000000B6E0" src="../images/p410-1.png" class="pcalibre calibre126 pcalibre1"/>
<figcaption id="P7000497027000000000000000042397" data-uri="chapter04.xhtml#P7000497027000000000000000042397" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042398" data-uri="chapter04.xhtml#P7000497027000000000000000042398" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.30 </span>SEQ memory stage.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042399" data-uri="chapter04.xhtml#P7000497027000000000000000042399"><p id="P700049702700000000000000004239A" data-uri="chapter04.xhtml#P700049702700000000000000004239A" class="pcalibre1 pcalibre calibre2"> The data memory can either write or read memory values. The value read from memory forms the signal valM.</p><p id="P700049702700000000000000004239B" data-uri="chapter04.xhtml#P700049702700000000000000004239B" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022674" data-uri="chapter04.xhtml#P7000497027000000000000000022674">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000004239C" data-uri="chapter04.xhtml#P700049702700000000000000004239C" class="pcalibre1 pcalibre calibre2">A diagram shows Data memory with the following inputs and outputs:</p>
<ul id="P700049702700000000000000004239D" data-uri="chapter04.xhtml#P700049702700000000000000004239D" class="pcalibre calibre31 pcalibre1">
<li id="P700049702700000000000000004239E" data-uri="chapter04.xhtml#P700049702700000000000000004239E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004239F" data-uri="chapter04.xhtml#P700049702700000000000000004239F" class="pcalibre calibre3 pcalibre1">Inputs</p>
<ul id="P70004970270000000000000000423A0" data-uri="chapter04.xhtml#P70004970270000000000000000423A0" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000423A1" data-uri="chapter04.xhtml#P70004970270000000000000000423A1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423A2" data-uri="chapter04.xhtml#P70004970270000000000000000423A2" class="pcalibre calibre3 pcalibre1">Mem addrs., with input from icode, valE, and valA</p></li>
<li id="P70004970270000000000000000423A3" data-uri="chapter04.xhtml#P70004970270000000000000000423A3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423A4" data-uri="chapter04.xhtml#P70004970270000000000000000423A4" class="pcalibre calibre3 pcalibre1">Mem. Data, with input from valA and valP and data in to Data memory</p></li>
<li id="P70004970270000000000000000423A5" data-uri="chapter04.xhtml#P70004970270000000000000000423A5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423A6" data-uri="chapter04.xhtml#P70004970270000000000000000423A6" class="pcalibre calibre3 pcalibre1">Read from Mem. Read from icode</p></li>
<li id="P70004970270000000000000000423A7" data-uri="chapter04.xhtml#P70004970270000000000000000423A7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423A8" data-uri="chapter04.xhtml#P70004970270000000000000000423A8" class="pcalibre calibre3 pcalibre1">Write from Mem. Write from icode</p></li>
</ul></li>
<li id="P70004970270000000000000000423A9" data-uri="chapter04.xhtml#P70004970270000000000000000423A9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423AA" data-uri="chapter04.xhtml#P70004970270000000000000000423AA" class="pcalibre calibre3 pcalibre1">Outputs</p>
<ul id="P70004970270000000000000000423AB" data-uri="chapter04.xhtml#P70004970270000000000000000423AB" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000423AC" data-uri="chapter04.xhtml#P70004970270000000000000000423AC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423AD" data-uri="chapter04.xhtml#P70004970270000000000000000423AD" class="pcalibre calibre3 pcalibre1">Data out to valM</p></li>
<li id="P70004970270000000000000000423AE" data-uri="chapter04.xhtml#P70004970270000000000000000423AE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000423AF" data-uri="chapter04.xhtml#P70004970270000000000000000423AF" class="pcalibre calibre3 pcalibre1">Dmem_error to Stat, which has output Stat and receives input from icode, imem_error, and instr_valid</p></li>
</ul></li>
</ul>
</details>

</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000423B0" data-uri="chapter04.xhtml#P70004970270000000000000000423B0">address and the memory input data (for write operations). Two other blocks generate the control signals indicating whether to perform a read or a write operation. When a read operation is performed, the data memory generates the value valM.</p>
<p id="P70004970270000000000000000423B1" data-uri="chapter04.xhtml#P70004970270000000000000000423B1" class="pcalibre1 pcalibre calibre2">The desired memory operation for each instruction type is shown in the memory stage of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>. Observe that the address for memory reads and writes is always valE or valA. We can describe this block in HCL as follows:</p>
<pre id="P70004970270000000000000000423B2" data-uri="chapter04.xhtml#P70004970270000000000000000423B2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000423B3" data-uri="chapter04.xhtml#P70004970270000000000000000423B3" class="calibre10 pcalibre pcalibre1">word mem_addr = [
	icode in { IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ } : valE;
	icode in { IPOPQ, IRET } : valA;
	# Other instructions don't need address
];
</code>
</pre>
<section id="P7000497027000000000000000004130" data-uri="chapter04.xhtml#P7000497027000000000000000004130" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P70004970270000000000000000423B4" data-uri="chapter04.xhtml#P70004970270000000000000000423B4" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.25 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047DA">488</a>)</h1></header>
<p id="P70004970270000000000000000423B5" data-uri="chapter04.xhtml#P70004970270000000000000000423B5" class="pcalibre1 pcalibre calibre2">Looking at the memory operations for the different instructions shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, we can see that the data for memory writes are always either valA or valP. Write HCL code for the signal mem_data in SEQ.</p>
</section>
<p id="P70004970270000000000000000423B6" data-uri="chapter04.xhtml#P70004970270000000000000000423B6" class="pcalibre1 pcalibre calibre2">We want to set the control signal mem_read only for instructions that read data from memory, as expressed by the following HCL code:</p>
<p id="P70004970270000000000000000423B7" data-uri="chapter04.xhtml#P70004970270000000000000000423B7" class="pcalibre1 pcalibre calibre2"><code id="P70004970270000000000000000423B8" data-uri="chapter04.xhtml#P70004970270000000000000000423B8" class="pcalibre1 calibre8 pcalibre">bool mem_read = icode in { IMRMOVQ, IPOPQ, IRET };</code></p>

<section id="P7000497027000000000000000004136" data-uri="chapter04.xhtml#P7000497027000000000000000004136" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P70004970270000000000000000423B9" data-uri="chapter04.xhtml#P70004970270000000000000000423B9" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.26 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047F7">489</a>)</h1></header>
<p id="P70004970270000000000000000423BA" data-uri="chapter04.xhtml#P70004970270000000000000000423BA" class="pcalibre1 pcalibre calibre2">We want to set the control signal mem_write only for instructions that write data to memory. Write HCL code for the signal mem_write in SEQ.</p>
</section>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004139" data-uri="chapter04.xhtml#P7000497027000000000000000004139">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000413A" title="411" data-uri="chapter04.xhtml#P700049702700000000000000000413A" epub:type="pagebreak"></span><img alt="A diagram of the PC update stage shows New PC with inputs icode, Cnd, valC, valM, and valP and output PC." id="P70004970270000000000000000423BB" data-uri="P700049702700000000000000000B6E1" src="../images/p411-1.png" class="pcalibre1 pcalibre calibre127"/>
<figcaption id="P70004970270000000000000000423BC" data-uri="chapter04.xhtml#P70004970270000000000000000423BC" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000423BD" data-uri="chapter04.xhtml#P70004970270000000000000000423BD" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.31 </span>SEQ PC update stage.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000423BE" data-uri="chapter04.xhtml#P70004970270000000000000000423BE"><p id="P70004970270000000000000000423BF" data-uri="chapter04.xhtml#P70004970270000000000000000423BF" class="pcalibre1 pcalibre calibre2"> The next value of the PC is selected from among the signals valC, valM, and valP, depending on the instruction code and the branch flag.</p><p id="P70004970270000000000000000423C0" data-uri="chapter04.xhtml#P70004970270000000000000000423C0" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>
<p id="P70004970270000000000000000423C1" data-uri="chapter04.xhtml#P70004970270000000000000000423C1" class="pcalibre1 pcalibre calibre2">A final function for the memory stage is to compute the status code Stat resulting from the instruction execution according to the values of icode, imem_error, and instr_valid generated in the fetch stage and the signal dmem_error generated by the data memory.</p>

<section id="P7000497027000000000000000004141" data-uri="chapter04.xhtml#P7000497027000000000000000004141" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P70004970270000000000000000423C2" data-uri="chapter04.xhtml#P70004970270000000000000000423C2" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.27 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000047F7">489</a>)</h1></header>
<p id="P70004970270000000000000000423C3" data-uri="chapter04.xhtml#P70004970270000000000000000423C3" class="pcalibre1 pcalibre calibre2">Write HCL code for Stat, generating the four status codes <code id="P70004970270000000000000000423C4" data-uri="chapter04.xhtml#P70004970270000000000000000423C4" class="pcalibre1 calibre8 pcalibre">SAOK, SADR, SINS</code>, and <code id="P70004970270000000000000000423C5" data-uri="chapter04.xhtml#P70004970270000000000000000423C5" class="pcalibre1 calibre8 pcalibre">SHLT</code> (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000403D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.26</span></a>).</p>
</section>
</section>
<section id="P7000497027000000000000000004146" data-uri="chapter04.xhtml#P7000497027000000000000000004146" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000423C6" data-uri="chapter04.xhtml#P70004970270000000000000000423C6" epub:type="title">PC Update Stage</h1></header>
<p id="P70004970270000000000000000423C7" data-uri="chapter04.xhtml#P70004970270000000000000000423C7" class="pcalibre1 pcalibre calibre2">The final stage in SEQ generates the new value of the program counter (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004139"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.31</span></a>). As the final steps in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a> show, the new PC will be valC, valM, or valP, depending on the instruction type and whether or not a branch should be taken. This selection can be described in HCL as follows:</p>
<pre id="P70004970270000000000000000423C8" data-uri="chapter04.xhtml#P70004970270000000000000000423C8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000423C9" data-uri="chapter04.xhtml#P70004970270000000000000000423C9" class="calibre10 pcalibre pcalibre1">word new_pc = [
	# Call. Use instruction constant 
	icode == ICALL : valC;
	# Taken branch. Use instruction constant 
	icode == IJXX &amp;&amp; Cnd : valC;
	# Completion of RET instruction. Use value from stack 
	icode == IRET : valM;
	# Default: Use incremented PC 
	1 : valP;
];
</code>
</pre>
</section>
<section id="P700049702700000000000000000414B" data-uri="chapter04.xhtml#P700049702700000000000000000414B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000423CA" data-uri="chapter04.xhtml#P70004970270000000000000000423CA" epub:type="title">Surveying SEQ</h1></header>
<p id="P70004970270000000000000000423CB" data-uri="chapter04.xhtml#P70004970270000000000000000423CB" class="pcalibre1 pcalibre calibre2">We have now stepped through a complete design for a Y86-64 processor. We have seen that by organizing the steps required to execute each of the different instructions into a uniform flow, we can implement the entire processor with a small number of different hardware units and with a single clock to control the sequencing of computations. The control logic must then route the signals between these units and generate the proper control signals based on the instruction types and the branch conditions.</p>

<p id="P70004970270000000000000000423CC" data-uri="chapter04.xhtml#P70004970270000000000000000423CC" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000414F" title="412" data-uri="chapter04.xhtml#P700049702700000000000000000414F" epub:type="pagebreak"></span>The only problem with SEQ is that it is too slow. The clock must run slowly enough so that signals can propagate through all of the stages within a single cycle. As an example, consider the processing of a <code id="P70004970270000000000000000423CD" data-uri="chapter04.xhtml#P70004970270000000000000000423CD" class="pcalibre1 calibre8 pcalibre">ret</code> instruction. Starting with an updated program counter at the beginning of the clock cycle, the instruction must be read from the instruction memory, the stack pointer must be read from the register file, the ALU must increment the stack pointer by 8, and the return address must be read from the memory in order to determine the next value for the program counter. All of these must be completed by the end of the clock cycle.</p>
<p id="P70004970270000000000000000423CE" data-uri="chapter04.xhtml#P70004970270000000000000000423CE" class="pcalibre1 pcalibre calibre2">This style of implementation does not make very good use of our hardware units, since each unit is only active for a fraction of the total clock cycle. We will see that we can achieve much better performance by introducing pipelining.</p>
</section>
</section>
</section></body></html>
