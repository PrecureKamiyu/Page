<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>23.1  Distributed Transactions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part417.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part419.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">23.1  <span style=" color: #00AEEF;">Distributed Transactions</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Access to the various data items in a distributed system is usually accomplished through transactions, which must preserve the <span class="s44">ACID </span>properties (Section 17.1). There are two types of transaction that we need to consider. The <span class="s63">local transactions </span>are those that access and update data in only one local database; the <span class="s63">global transactions </span>are those that access and update data in several local databases. Ensuring the <span class="s44">ACID </span>properties of the local transactions can be done as described in Chapter 17, Chapter 18, and Chapter</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">19. However, for global transactions, this task is much more complicated, since several nodes may be participating in the execution of the transaction. The failure of one of these nodes, or the failure of a communication link connecting these nodes, may result in erroneous computations.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In this section, we study the system structure of a distributed database and its possible failure modes. In later sections, we discuss how to ensure <span class="s44">ACID </span>properties are satisﬁed in a distributed database, despite failures. We reemphasize that these failure modes occur with parallel databases as well, and the techniques we describe are equally applicable to parallel databases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">23.1.1 System Structure</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">We now consider a system structure with multiple nodes, each of which can fail inde- pendently of the others. We note that the nodes may be within a single data center, corresponding to a parallel database system, or geographically distributed, in a dis- tributed database system. The system structure is similar in either case; the problems with respect to transaction isolation and atomicity are the same in both cases, as are the solutions.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We note that the system structure we consider here is not applicable to a shared- memory parallel database system whose components do not have independent modes of failures. In such systems either the whole system is up, or the whole system is down. Further, there is usually only one transaction log used for recovery. Concurrency con- trol and recovery techniques that are designed for centralized database systems can be used in such systems, and are preferable to techniques described in this chapter.</p><p style="padding-left: 87pt;text-indent: 0pt;text-align: right;">Each node has its own <i>local </i>transaction manager, whose function is to ensure the</p><p class="s42" style="padding-left: 87pt;text-indent: 0pt;text-align: right;">ACID <span class="s43">properties of those transactions that execute at that node. The various trans-</span></p><p class="s66" style="padding-top: 3pt;padding-left: 337pt;text-indent: 0pt;text-align: left;">23.1 <span style=" color: #00AEEF;">Distributed Transactions  </span><span class="s164">1099</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="363" height="216" alt="image" src="Image_3260.png"/></span></p><p class="s200" style="text-indent: 0pt;line-height: 93%;text-align: left;">TC<span class="s93">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s200" style="text-indent: 0pt;line-height: 93%;text-align: left;">TC<span class="s505">n</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s200" style="text-indent: 0pt;line-height: 93%;text-align: left;">TM<span class="s93">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s200" style="text-indent: 0pt;line-height: 93%;text-align: left;">TM<span class="s505">n</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s42" style="padding-top: 4pt;padding-left: 422pt;text-indent: 0pt;text-align: left;">transaction coordinator</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-top: 7pt;padding-left: 422pt;text-indent: 0pt;text-align: left;">transaction manager</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-top: 4pt;padding-left: 143pt;text-indent: 0pt;text-align: left;">computer 1                      computer <i>n</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 233pt;text-indent: 0pt;text-align: left;">Figure 23.1 <span class="s74">System architecture.</span></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">action managers cooperate to execute global transactions. To understand how such a manager can be implemented, consider an abstract model of a transaction system, in which each node contains two subsystems:</p><p class="s39" style="padding-top: 10pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The </span><span class="s63">transaction manager </span><span class="p">manages the execution of those transactions (or subtrans- actions) that access data stored in the node. Note that each such transaction may be either a local transaction (i.e., a transaction that executes at only that node) or part of a global transaction (i.e., a transaction that executes at several nodes).</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The </span><span class="s63">transaction coordinator </span><span class="p">coordinates the execution of the various transactions (both local and global) initiated at that node.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The overall system architecture appears in Figure 23.1.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The structure of a transaction manager is similar in many respects to the structure of a centralized system. Each transaction manager is responsible for:</p><p class="s39" style="padding-top: 10pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Maintaining a log for recovery purposes.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Participating in an appropriate concurrency-control scheme to coordinate the con- current execution of the transactions executing at that node.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">As we shall see, we need to modify both the recovery and concurrency schemes to accommodate the distributed execution of transactions.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The transaction coordinator subsystem is not needed in the centralized environ- ment, since a transaction accesses data at only a single node. A transaction coordinator, as its name implies, is responsible for coordinating the execution of all the transactions initiated at that node. For each such transaction, the coordinator is responsible for:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark486">• </a><span class="s40">Starting the execution of the transaction.</span><a name="bookmark531">&zwnj;</a></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: left;">• <span class="s40">Breaking the transaction into a number of subtransactions and distributing these subtransactions to the appropriate nodes for execution.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: left;">• <span class="s40">Coordinating the termination of the transaction, which may result in the transac- tion being committed at all nodes or aborted at all nodes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">23.1.2 System Failure Modes</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A distributed system may suﬀer from the same types of failure that a centralized sys- tem does (e.g., software errors, hardware errors, or disk crashes). There are, however, additional types of failure with which we need to deal in a distributed environment. The basic failure types are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Failure of a node.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Loss of messages.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Failure of a communication link.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Network partition.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">The loss or corruption of messages is always a possibility in a distributed system. The system uses transmission-control protocols, such as <span class="s44">TCP/IP</span>, to handle such errors. Information about such protocols may be found in standard textbooks on networking. However, if two nodes <i>A </i>and <i>B </i>are not directly connected, messages from one to the other must be <i>routed </i>through a sequence of communication links. If a communication link fails, messages that would have been transmitted across the link must be rerouted. In some cases, it is possible to ﬁnd another route through the network, so that the messages are able to reach their destination. In other nodes, a failure may result in there being no connection between some pairs of nodes. A system is <span class="s63">partitioned </span>if it has been split into two (or more) subsystems, called <span class="s63">partitions</span>, that lack any connection between them. Note that, under this deﬁnition, a partition may consist of a single node.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part417.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part419.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
