<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Introduction to Operating Systems</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part19.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part21.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">Introduction to Operating Systems</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">If you are taking an undergraduate operating systems course, you should already have some idea of what a computer program does when it runs. If not, this book (and the corresponding course) is going to be difficult</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: left;">– so you should probably stop reading this book, or run to the nearest bookstore and quickly consume the necessary background material be- fore continuing (both Patt/Patel [PP03] and particularly Bryant/O’Hallaron [BOH10] are pretty great books).</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">So what happens when a program runs?</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Well, a running program does one very simple thing: it executes in- structions. Many millions (and these days, even billions) of times ev- ery second, the processor <b>fetches </b>an instruction from memory, <b>decodes </b>it (i.e., figures out which instruction this is), and <b>executes </b>it (i.e., it does the thing that it is supposed to do, like add two numbers together, access memory, check a condition, jump to a function, and so forth). After it is done with this instruction, the processor moves on to the next instruction,</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">and so on, and so on, until the program finally completes<span class="s35">1</span>.</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Thus, we have just described the basics of the <b>Von Neumann </b>model of</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">computing<span class="s35">2</span>. Sounds simple, right? But in this class, we will be learning that while a program runs, a lot of other wild things are going on with the primary goal of making the system <b>easy to use</b>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">There is a body of software, in fact, that is responsible for making it easy to run programs (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that. That body of software</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_009.png"/></span></p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 13pt;line-height: 92%;text-align: justify;">1<span class="s12">Of course, modern processors do many bizarre and frightening things underneath the hood to make programs run faster, e.g., executing multiple instructions at once, and even issu- ing and completing them out of order! But that is not our concern here; we are just concerned with the simple model most programs assume: that instructions seemingly execute one at a time, in an orderly and sequential fashion.</span></p><p class="s11" style="padding-left: 41pt;text-indent: 13pt;line-height: 92%;text-align: justify;">2<span class="s12">Von Neumann was one of the early pioneers of computing systems. He also did pioneer- ing work on game theory and atomic bombs, and played in the NBA for six years. OK, one of those things isn’t true.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 84pt;text-indent: 9pt;line-height: 89%;text-align: left;">T<span class="s7">HE </span>C<span class="s7">RUX OF THE </span>P<span class="s7">ROBLEM</span>: H<span class="s7">OW </span>T<span class="s7">O </span>V<span class="s7">IRTUALIZE </span>R<span class="s7">ESOURCES</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">One central question we will answer in this book is quite simple: how does the operating system virtualize resources? This is the crux of our problem. <i>Why </i>the OS does this is not the main question, as the answer should be obvious: it makes the system easier to use. Thus, we focus on the <i>how</i>: what mechanisms and policies are implemented by the OS to attain virtualization? How does the OS do so efficiently? What hardware support is needed?</p><p style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">We will use the “crux of the problem”, in shaded boxes such as this one, as a way to call out specific problems we are trying to solve in building an operating system. Thus, within a note on a particular topic, you may find one or more <i>cruces </i>(yes, this is the proper plural) which highlight the problem. The details within the chapter, of course, present the solution, or at least the basic parameters of a solution.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">is called the <b>operating system </b>(<b>OS</b>)<span class="s35">3</span>, as it is in charge of making sure the system operates correctly and efficiently in an easy-to-use manner.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The primary way the OS does this is through a general technique that we call <b>virtualization</b>. That is, the OS takes a <b>physical </b>resource (such as the processor, or memory, or a disk) and transforms it into a more gen- eral, powerful, and easy-to-use <b>virtual </b>form of itself. Thus, we sometimes refer to the operating system as a <b>virtual machine</b>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Of course, in order to allow users to tell the OS what to do and thus make use of the features of the virtual machine (such as running a pro- gram, or allocating memory, or accessing a file), the OS also provides some interfaces (APIs) that you can call. A typical OS, in fact, exports a few hundred <b>system calls </b>that are available to applications. Because the OS provides these calls to run programs, access memory and devices, and other related actions, we also sometimes say that the OS provides a <b>standard library </b>to applications.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Finally, because virtualization allows many programs to run (thus shar- ing the CPU), and many programs to concurrently access their own in- structions and data (thus sharing memory), and many programs to access devices (thus sharing disks and so forth), the OS is sometimes known as a <b>resource manager</b>. Each of the CPU, memory, and disk is a <b>resource </b>of the system; it is thus the operating system’s role to <b>manage </b>those re- sources, doing so efficiently or fairly or indeed with many other possible goals in mind. To understand the role of the OS a little bit better, let’s take a look at some examples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_010.png"/></span></p><p class="s12" style="padding-top: 2pt;padding-left: 68pt;text-indent: 13pt;line-height: 92%;text-align: justify;"><span class="s11">3</span>Another early name for the OS was the <b>supervisor </b>or even the <b>master control program</b>. Apparently, the latter sounded a little overzealous (see the movie Tron for details) and thus, thankfully, “operating system” caught on instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;stdlib.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &lt;sys/time.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">#include &lt;assert.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">#include &quot;common.h&quot;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">6</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7  <span class="s38">int</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">8  </span>main(int argc, char <span class="s39">*</span>argv[])</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;">9  <span class="s38">{</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10    <span class="s38">if (argc != 2) {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11       <span class="s38">fprintf(stderr, &quot;usage: cpu &lt;string&gt;\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12       <span class="s38">exit(1);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13    <span class="s38">}</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">14    </span>char <span class="s39">*</span>str = argv[1];</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">15    <span class="s38">while (1) {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">16       <span class="s38">Spin(1);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">17       <span class="s38">printf(&quot;%s\n&quot;, str);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">18    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20  <span class="s38">}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">Figure 2.1: <b>Simple Example: Code That Loops and Prints</b></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part21.htm">2.1 Virtualizing the CPU</a><a class="toc0" href="part22.htm">2.2 Virtualizing Memory</a><a class="toc0" href="part23.htm">2.3 Concurrency</a><a class="toc0" href="part24.htm">2.4 Persistence</a><a class="toc0" href="part25.htm">2.5 Design Goals</a><a class="toc0" href="part26.htm">2.6 Some History</a><a class="toc1" href="part27.htm">Early Operating Systems: Just Libraries</a><a class="toc1" href="part28.htm">Beyond Libraries: Protection</a><a class="toc1" href="part29.htm">The Era of Multiprogramming</a><a class="toc1" href="part30.htm">The Modern Era</a><a class="toc0" href="part31.htm">2.7 Summary</a><a class="toc0" href="part32.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part19.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part21.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
