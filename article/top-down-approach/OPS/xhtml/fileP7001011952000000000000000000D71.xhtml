<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>2.5 Peer-to-Peer File Distribution</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000000D71" class="level1"><header><h1 class="title" id="P7001011952000000000000000009DDD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDD" epub:type="title"><span class="number">2.5</span> Peer-to-Peer File Distribution</h1></header>
<p id="P7001011952000000000000000009DDE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDE">The applications described in this chapter thus far—including the Web, e-mail, and DNS—all employ client-server architectures with significant reliance on always-on infrastructure servers. Recall from <a class="xref" href="fileP7001011952000000000000000000974.xhtml#P700101195200000000000000000098C" data-foobar="7"><span class="label">Section</span> <span class="number">2.1.1</span></a> that with a P2P architecture, there is minimal (or no) reliance on always-on infrastructure servers. Instead, pairs of intermittently connected hosts, called peers, communicate directly with each other. The peers are not owned by a service provider, but are instead desktops and laptops controlled by users.</p>
<p id="P7001011952000000000000000009DDF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDF">In this section we consider a very natural P2P application, namely, distributing a large file from a single server to a large number of hosts (called peers). The file might be a new version of the Linux operating system, a software patch for an existing operating system or application, an MP3 music file, or an MPEG video file. In client-server file distribution, the server must send a copy of the file to each of the peers—placing an enormous burden on the server and consuming a large amount of server bandwidth. In P2P file distribution, each peer can redistribute any portion of the <span class="pagebreak" title="141" id="P7001011952000000000000000000D75" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D75" epub:type="pagebreak" role="doc-pagebreak"></span>file it has received to any other peers, thereby assisting the server in the distribution process. As of 2016, the most popular P2P file distribution protocol is BitTorrent. Originally developed by Bram Cohen, there are now many different independent BitTorrent clients conforming to the BitTorrent protocol, just as there are a number of Web browser clients that conform to the HTTP protocol. In this subsection, we first examine the self-scalability of P2P architectures in the context of file distribution. We then describe BitTorrent in some detail, highlighting its most important characteristics and features.</p>
<section id="P7001011952000000000000000000D76" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D76" class="level2">
<section id="P7001011952000000000000000000D77" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D77" class="level3"><header><h1 class="title" id="P7001011952000000000000000009DE0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE0" epub:type="title">Scalability of P2P Architectures</h1></header>
<p id="P7001011952000000000000000009DE1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE1">To compare client-server architectures with peer-to-peer architectures, and illustrate the inherent self-scalability of P2P, we now consider a simple quantitative model for distributing a file to a fixed set of peers for both architecture types. As shown in <a class="xref" href="#P7001011952000000000000000000D7B" data-foobar="1"><span class="label">Figure</span> <span class="number">2.22</span></a>, the server and the peers are connected to the Internet with access links. Denote the upload rate of the server’s access link by <i>u<sub>s</sub></i>, the upload rate of the <i>i</i>th peer’s access link by <i>u<sub>i</sub></i>, and the download rate of the <i>i</i>th peer’s access link by <i>d<sub>i</sub></i>. Also denote the size of the file to be distributed (in bits) by <i>F</i> and the number of peers that want to obtain a copy of the file by <i>N</i>. The <span class="keyword" id="P7001011952000000000000000000D7A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D7A"><b>distribution time</b></span> is the time it takes to get</p>
<figure id="P7001011952000000000000000000D7B" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D7B">
<img alt="An illustration of peer-to-peer architecture for file distribution." height="473" width="533" aria-describedby="P7001011952000000000000000000D7F" id="P7001011952000000000000000009DE2" data-uri="P7001011952000000000000000005534" src="../images/4055102022.png"></img>
<figcaption id="P7001011952000000000000000009DE3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE3"><header><h1 class="title" id="P7001011952000000000000000009DE4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE4" epub:type="title"><span class="label">Figure </span><span class="number">2.22</span> An illustrative file distribution problem</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000D7F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D7F" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102022.xhtml#la_4055102022"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009DE6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE6"><span class="pagebreak" title="142" id="P7001011952000000000000000000D82" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D82" epub:type="pagebreak" role="doc-pagebreak"></span>a copy of the file to all <i>N</i> peers. In our analysis of the distribution time below, for both client-server and P2P architectures, we make the simplifying (and generally accurate <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000037FD" data-foobar="7">[Akella 2003]</a>) assumption that the Internet core has abundant bandwidth, implying that all of the bottlenecks are in access networks. We also suppose that the server and clients are not participating in any other network applications, so that all of their upload and download access bandwidth can be fully devoted to distributing this file.</p>
<p id="P7001011952000000000000000009DE7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE7">Let’s first determine the distribution time for the client-server architecture, which we denote by <i>D<sub>cs</sub></i>. In the client-server architecture, none of the peers aids in distributing the file. We make the following observations:</p>
<ul id="P7001011952000000000000000009DE8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE8">
<li id="P7001011952000000000000000009DE9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DE9"><p id="P7001011952000000000000000009DEA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DEA">The server must transmit one copy of the file to each of the <i>N</i> peers. Thus the server must transmit <i>NF</i> bits. Since the server’s upload rate is <i>u<sub>s</sub></i>, the time to distribute the file must be at least <i>NF/u<sub>s</sub></i>.</p></li>
<li id="P7001011952000000000000000009DEB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DEB"><p id="P7001011952000000000000000009DEC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DEC">Let <i>d</i><sub>min</sub> denote the download rate of the peer with the lowest download rate, that is, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="232" altimg-height="22" altimg="../images/ch02math04.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>min</m:mi><m:mrow><m:mo>{</m:mo><m:mrow><m:msub><m:mi>d</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:msub><m:mi>d</m:mi><m:mi>p</m:mi></m:msub><m:mo>,</m:mo><m:mo>.</m:mo><m:mtext> </m:mtext><m:mo>.</m:mo><m:mtext> </m:mtext><m:mo>.</m:mo><m:mo>,</m:mo><m:msub><m:mi>d</m:mi><m:mi>N</m:mi></m:msub></m:mrow><m:mo>}</m:mo></m:mrow><m:mo>.</m:mo></m:mrow></m:math></span> The peer with the lowest download rate cannot obtain all <i>F</i> bits of the file in less than <i>F</i>/<i>d</i><sub>min</sub> seconds. Thus the minimum distribution time is at least <i>F</i>/<i>d</i><sub>min</sub>.</p></li>
</ul>
<p class="continued" id="P7001011952000000000000000009DED" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DED">Putting these two observations together, we obtain</p>
<div class="informalequation" id="P7001011952000000000000000000D8A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D8A"><m:math display="block" alttext="" data-uri="" altimg-width="191" altimg-height="51" altimg="../images/ch02math05.png"><m:mrow><m:msub><m:mi>D</m:mi><m:mrow><m:mi>c</m:mi><m:mi>s</m:mi></m:mrow></m:msub><m:mo>≥</m:mo><m:mi>max</m:mi><m:mrow><m:mo>{</m:mo><m:mrow><m:mfrac><m:mrow><m:mi>N</m:mi><m:mi>F</m:mi></m:mrow><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mrow><m:mo>}</m:mo></m:mrow><m:mo>.</m:mo></m:mrow></m:math></div>
<p class="continued" id="P7001011952000000000000000009DEE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DEE">This provides a lower bound on the minimum distribution time for the client-server architecture. In the homework problems you will be asked to show that the server can schedule its transmissions so that the lower bound is actually achieved. So let’s take this lower bound provided above as the actual distribution time, that is,</p>
<div class="equation" id="P7001011952000000000000000000D8C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D8C"><m:math display="block" alttext="" data-uri="" altimg-width="183" altimg-height="51" altimg="../images/ch02math06.png"><m:mrow><m:msub><m:mi>D</m:mi><m:mrow><m:mi>c</m:mi><m:mi>s</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>max</m:mi><m:mrow><m:mo>{</m:mo><m:mrow><m:mfrac><m:mrow><m:mi>N</m:mi><m:mi>F</m:mi></m:mrow><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mrow><m:mo>}</m:mo></m:mrow></m:mrow></m:math><span class="number">(2.1)</span></div>
<p class="continued" id="P7001011952000000000000000009DEF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DEF">We see from <a class="xref" href="#P7001011952000000000000000000D8C" data-foobar="1"><span class="label">Equation</span> <span class="number">2.1</span></a> that for <i>N</i> large enough, the client-server distribution time is given by <i>NF</i>/<i>u<sub>s</sub></i>. Thus, the distribution time increases linearly with the number of peers <i>N</i>. So, for example, if the number of peers from one week to the next increases a thousand-fold from a thousand to a million, the time required to distribute the file to all peers increases by 1,000.</p>
<p id="P7001011952000000000000000009DF0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF0">Let’s now go through a similar analysis for the P2P architecture, where each peer can assist the server in distributing the file. In particular, when a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers. Calculating the distribution time for the P2P architecture is somewhat more complicated than for the client-server architecture, since the distribution time depends on how each peer distributes portions of the file to the other peers. Nevertheless, a simple <span class="pagebreak" title="143" id="P7001011952000000000000000000D8F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D8F" epub:type="pagebreak" role="doc-pagebreak"></span>expression for the minimal distribution time can be obtained <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A05" data-foobar="7">[Kumar 2006]</a>. To this end, we first make the following observations:</p>
<ul id="P7001011952000000000000000009DF1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF1">
<li id="P7001011952000000000000000009DF2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF2"><p id="P7001011952000000000000000009DF3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF3">At the beginning of the distribution, only the server has the file. To get this file into the community of peers, the server must send each bit of the file at least once into its access link. Thus, the minimum distribution time is at least <i>F</i>/<i>u<sub>s</sub></i>. (Unlike the client-server scheme, a bit sent once by the server may not have to be sent by the server again, as the peers may redistribute the bit among themselves.)</p></li>
<li id="P7001011952000000000000000009DF4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF4"><p id="P7001011952000000000000000009DF5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF5">As with the client-server architecture, the peer with the lowest download rate cannot obtain all <i>F</i> bits of the file in less than <i>F</i>/<i>d</i><sub>min</sub> seconds. Thus the minimum distribution time is at least <i>F</i>/<i>d</i><sub>min</sub>.</p></li>
<li id="P7001011952000000000000000009DF6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF6"><p id="P7001011952000000000000000009DF7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF7">Finally, observe that the total upload capacity of the system as a whole is equal to the upload rate of the server plus the upload rates of each of the individual peers, that is, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="230" altimg-height="17" altimg="../images/ch02math07.png"><m:mrow><m:msub><m:mi>u</m:mi><m:mrow><m:mtext>total</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>+</m:mo><m:msub><m:mi>u</m:mi><m:mn>1</m:mn></m:msub><m:mo>+</m:mo><m:mo>⋯</m:mo><m:mo>+</m:mo><m:msub><m:mi>u</m:mi><m:mi>N</m:mi></m:msub><m:mo>.</m:mo></m:mrow></m:math></span> The system must deliver (upload) <i>F</i> bits to each of the <i>N</i> peers, thus delivering a total of <i>NF</i> bits. This cannot be done at a rate faster than <i>u</i><sub>total</sub>. Thus, the minimum distribution time is also at least <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="210" altimg-height="18" altimg="../images/ch02math08.png"><m:mrow><m:mi>N</m:mi><m:mi>F</m:mi><m:mo>/</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>+</m:mo><m:msub><m:mi>u</m:mi><m:mn>1</m:mn></m:msub><m:mo>+</m:mo><m:mo>⋯</m:mo><m:mo>+</m:mo><m:msub><m:mi>u</m:mi><m:mi>N</m:mi></m:msub></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>.</m:mo></m:mrow></m:math></span></p></li>
</ul>
<p id="P7001011952000000000000000009DF8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF8">Putting these three observations together, we obtain the minimum distribution time for P2P, denoted by <i>D</i><sub>P2P</sub>.</p>
<div class="equation" id="P7001011952000000000000000000D98" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D98"><m:math display="block" alttext="" data-uri="" altimg-width="288" altimg-height="78" altimg="../images/ch02math09.png"><m:mrow><m:msub><m:mi>D</m:mi><m:mrow><m:mtext>P</m:mtext><m:mn>2</m:mn><m:mtext>P</m:mtext></m:mrow></m:msub><m:mo>≥</m:mo><m:mi>max</m:mi><m:mrow><m:mo>{</m:mo><m:mrow><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mrow><m:mi>N</m:mi><m:mi>F</m:mi></m:mrow><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>+</m:mo><m:mstyle displaystyle="true"><m:munderover><m:mo>∑</m:mo><m:mrow><m:mi>i</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow><m:mi>N</m:mi></m:munderover><m:mrow><m:msub><m:mi>u</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:mstyle></m:mrow></m:mfrac></m:mrow><m:mo>}</m:mo></m:mrow></m:mrow></m:math><span class="number">(2.2)</span></div>
<p class="continued" id="P7001011952000000000000000009DF9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DF9"><a class="xref" href="#P7001011952000000000000000000D98" data-foobar="1"><span class="label">Equation</span> <span class="number">2.2</span></a> provides a lower bound for the minimum distribution time for the P2P architecture. It turns out that if we imagine that each peer can redistribute a bit as soon as it receives the bit, then there is a redistribution scheme that actually achieves this lower bound <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A05" data-foobar="7">[Kumar 2006]</a>. (We will prove a special case of this result in the homework.) In reality, where chunks of the file are redistributed rather than individual bits, <a class="xref" href="#P7001011952000000000000000000D98" data-foobar="1"><span class="label">Equation</span> <span class="number">2.2</span></a> serves as a good approximation of the actual minimum distribution time. Thus, let’s take the lower bound provided by <a class="xref" href="#P7001011952000000000000000000D98" data-foobar="1"><span class="label">Equation</span> <span class="number">2.2</span></a> as the actual minimum distribution time, that is,</p>
<div class="equation" id="P7001011952000000000000000000D9A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D9A"><m:math display="block" alttext="" data-uri="" altimg-width="288" altimg-height="77" altimg="../images/ch02math10.png"><m:mrow><m:msub><m:mi>D</m:mi><m:mrow><m:mtext>P</m:mtext><m:mn>2</m:mn><m:mtext>P</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:mi>max</m:mi><m:mrow><m:mo>{</m:mo><m:mrow><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mi>F</m:mi><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mrow><m:mi>N</m:mi><m:mi>F</m:mi></m:mrow><m:mrow><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>+</m:mo><m:mstyle displaystyle="true"><m:munderover><m:mo>∑</m:mo><m:mrow><m:mi>i</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow><m:mi>N</m:mi></m:munderover><m:mrow><m:msub><m:mi>u</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:mstyle></m:mrow></m:mfrac></m:mrow><m:mo>}</m:mo></m:mrow></m:mrow></m:math><span class="number">(2.3)</span></div>
<p id="P7001011952000000000000000009DFA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DFA"><a class="xref" href="#P7001011952000000000000000000D9D" data-foobar="1"><span class="label">Figure</span> <span class="number">2.23</span></a> compares the minimum distribution time for the client-server and P2P architectures assuming that all peers have the same upload rate <i>u</i>. In <a class="xref" href="#P7001011952000000000000000000D9D" data-foobar="1"><span class="label">Figure</span> <span class="number">2.23</span></a>, we have set <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="193" altimg-height="17" altimg="../images/ch02math11.png"><m:mrow><m:mi>F</m:mi><m:mo>/</m:mo><m:mi>u</m:mi><m:mo>=</m:mo><m:mn>1</m:mn><m:mtext> </m:mtext><m:mtext>hour</m:mtext><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>=</m:mo><m:mn>10</m:mn><m:mi>u</m:mi><m:mo>,</m:mo></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="80" altimg-height="17" altimg="../images/ch02math12.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>min</m:mi></m:mrow></m:msub><m:mo>≥</m:mo><m:msub><m:mi>u</m:mi><m:mi>s</m:mi></m:msub><m:mo>.</m:mo></m:mrow></m:math></span> Thus, a peer can transmit the entire file in one hour, the server transmission rate is 10 times the peer upload rate,<span class="pagebreak" title="144" id="P7001011952000000000000000000D9C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D9C" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000D9D" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D9D">
<img alt="A graph comparing minimum distribution times for client-server architectures and peer-to-peer architectures." height="367" width="551" aria-describedby="P7001011952000000000000000000DA1" id="P7001011952000000000000000009DFB" data-uri="P7001011952000000000000000005535" src="../images/4055102023.png"></img>
<figcaption id="P7001011952000000000000000009DFC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DFC"><header><h1 class="title" id="P7001011952000000000000000009DFD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DFD" epub:type="title"><span class="label">Figure </span><span class="number">2.23</span> Distribution time for P2P and client-server architectures</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000DA1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DA1" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102023.xhtml#la_4055102023"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009E01" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E01">and (for simplicity) the peer download rates are set large enough so as not to have an effect. We see from <a class="xref" href="#P7001011952000000000000000000D9D" data-foobar="1"><span class="label">Figure</span> <span class="number">2.23</span></a> that for the client-server architecture, the distribution time increases linearly and without bound as the number of peers increases. However, for the P2P architecture, the minimal distribution time is not only always less than the distribution time of the client-server architecture; it is also less than one hour for <i>any</i> number of peers <i>N</i>. Thus, applications with the P2P architecture can be self-scaling. This scalability is a direct consequence of peers being redistributors as well as consumers of bits.</p>
</section>
<section id="P7001011952000000000000000000DA6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DA6" class="level3"><header><h1 class="title" id="P7001011952000000000000000009E02" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E02" epub:type="title">BitTorrent</h1></header>
<p id="P7001011952000000000000000009E03" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E03">BitTorrent is a popular P2P protocol for file distribution <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003877" data-foobar="7">[Chao 2011]</a>. In BitTorrent lingo, the collection of all peers participating in the distribution of a particular file is called a <i>torrent</i>. Peers in a torrent download equal-size <i>chunks</i> of the file from one another, with a typical chunk size of 256 KBytes. When a peer first joins a torrent, it has no chunks. Over time it accumulates more and more chunks. While it downloads chunks it also uploads chunks to other peers. Once a peer has acquired the entire file, it may (selfishly) leave the torrent, or (altruistically) remain in the torrent and continue to upload chunks to other peers. Also, any peer may leave the torrent at any time with only a subset of chunks, and later rejoin the torrent.</p>
<p id="P7001011952000000000000000009E04" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E04">Let’s now take a closer look at how BitTorrent operates. Since BitTorrent is a rather complicated protocol and system, we’ll only describe its most important mechanisms, sweeping some of the details under the rug; this will allow us to see the forest through the trees. Each torrent has an infrastructure node called a <i>tracker</i>.<span class="pagebreak" title="145" id="P7001011952000000000000000000DAA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DAA" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000DAB" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DAB">
<img alt="An illustration of file distribution using BitTorrent." height="512" width="668" aria-describedby="P7001011952000000000000000000DAF" id="P7001011952000000000000000009E05" data-uri="P7001011952000000000000000005536" src="../images/4055102024.png"></img>
<figcaption id="P7001011952000000000000000009E06" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E06"><header><h1 class="title" id="P7001011952000000000000000009E07" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E07" epub:type="title"><span class="label">Figure </span><span class="number">2.24</span> File distribution with BitTorrent</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000DAF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DAF" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102024.xhtml#la_4055102024"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009E09" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E09">When a peer joins a torrent, it registers itself with the tracker and periodically informs the tracker that it is still in the torrent. In this manner, the tracker keeps track of the peers that are participating in the torrent. A given torrent may have fewer than ten or more than a thousand peers participating at any instant of time.</p>
<p id="P7001011952000000000000000009E0A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0A">As shown in <a class="xref" href="#P7001011952000000000000000000DAB" data-foobar="1"><span class="label">Figure</span> <span class="number">2.24</span></a>, when a new peer, Alice, joins the torrent, the tracker randomly selects a subset of peers (for concreteness, say 50) from the set of participating peers, and sends the IP addresses of these 50 peers to Alice. Possessing this list of peers, Alice attempts to establish concurrent TCP connections with all the peers on this list. Let’s call all the peers with which Alice succeeds in establishing a TCP connection “neighboring peers.” (In <a class="xref" href="#P7001011952000000000000000000DAB" data-foobar="1"><span class="label">Figure</span> <span class="number">2.24</span></a>, Alice is shown to have only three neighboring peers. Normally, she would have many more.) As time evolves, some of these peers may leave and other peers (outside the initial 50) may attempt to establish TCP connections with Alice. So a peer’s neighboring peers will fluctuate over time.</p>
<p id="P7001011952000000000000000009E0B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0B">At any given time, each peer will have a subset of chunks from the file, with different peers having different subsets. Periodically, Alice will ask each of her neighboring peers (over the TCP connections) for the list of the chunks they have. If Alice has <i>L</i> different neighbors, she will obtain <i>L</i> lists of chunks. With this knowledge, <span class="pagebreak" title="146" id="P7001011952000000000000000000DB4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DB4" epub:type="pagebreak" role="doc-pagebreak"></span>Alice will issue requests (again over the TCP connections) for chunks she currently does not have.</p>
<p id="P7001011952000000000000000009E0C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0C">So at any given instant of time, Alice will have a subset of chunks and will know which chunks her neighbors have. With this information, Alice will have two important decisions to make. First, which chunks should she request first from her neighbors? And second, to which of her neighbors should she send requested chunks? In deciding which chunks to request, Alice uses a technique called <span class="keyword" id="P7001011952000000000000000000DB6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DB6"><b>rarest first</b></span>. The idea is to determine, from among the chunks she does not have, the chunks that are the rarest among her neighbors (that is, the chunks that have the fewest repeated copies among her neighbors) and then request those rarest chunks first. In this manner, the rarest chunks get more quickly redistributed, aiming to (roughly) equalize the numbers of copies of each chunk in the torrent.</p>
<p id="P7001011952000000000000000009E0D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0D">To determine which requests she responds to, BitTorrent uses a clever trading algorithm. The basic idea is that Alice gives priority to the neighbors that are currently supplying her data <i>at the highest rate</i>. Specifically, for each of her neighbors, Alice continually measures the rate at which she receives bits and determines the four peers that are feeding her bits at the highest rate. She then reciprocates by sending chunks to these same four peers. Every 10 seconds, she recalculates the rates and possibly modifies the set of four peers. In BitTorrent lingo, these four peers are said to be <span class="keyword" id="P7001011952000000000000000000DB8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DB8"><b>unchoked</b></span>. Importantly, every 30 seconds, she also picks one additional neighbor at random and sends it chunks. Let’s call the randomly chosen peer Bob. In BitTorrent lingo, Bob is said to be <span class="keyword" id="P7001011952000000000000000000DB9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DB9"><b>optimistically unchoked</b></span>. Because Alice is sending data to Bob, she may become one of Bob’s top four uploaders, in which case Bob would start to send data to Alice. If the rate at which Bob sends data to Alice is high enough, Bob could then, in turn, become one of Alice’s top four uploaders. In other words, every 30 seconds, Alice will randomly choose a new trading partner and initiate trading with that partner. If the two peers are satisfied with the trading, they will put each other in their top four lists and continue trading with each other until one of the peers finds a better partner. The effect is that peers capable of uploading at compatible rates tend to find each other. The random neighbor selection also allows new peers to get chunks, so that they can have something to trade. All other neighboring peers besides these five peers (four “top” peers and one probing peer) are “choked,” that is, they do not receive any chunks from Alice. BitTorrent has a number of interesting mechanisms that are not discussed here, including pieces (mini-chunks), pipelining, random first selection, endgame mode, and anti-snubbing [Cohen 2003].</p>
<p id="P7001011952000000000000000009E0E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0E">The incentive mechanism for trading just described is often referred to as tit-for-tat [Cohen 2003]. It has been shown that this incentive scheme can be circumvented <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A35" data-foobar="7">[Liogkas 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A39" data-foobar="7">Locher 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AAF" data-foobar="7">Piatek 2007]</a>. Nevertheless, the BitTorrent ecosystem is wildly successful, with millions of simultaneous peers actively sharing files in hundreds of thousands of torrents. If BitTorrent had been designed without tit-for-tat (or a variant), but otherwise exactly the same, BitTorrent would likely not even exist now, as the majority of the users would have been freeriders <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BE8" data-foobar="7">[Saroiu 2002]</a>.</p>
<p id="P7001011952000000000000000009E0F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E0F"><span class="pagebreak" title="147" id="P7001011952000000000000000000DBC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DBC" epub:type="pagebreak" role="doc-pagebreak"></span>We close our discussion on P2P by briefly mentioning another application of P2P, namely, Distributed Hast Table (DHT). A distributed hash table is a simple database, with the database records being distributed over the peers in a P2P system. DHTs have been widely implemented (e.g., in BitTorrent) and have been the subject of extensive research. An overview is provided in a Video Note in the companion website.</p>
<aside class="marginalia" id="P7001011952000000000000000000DBD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000DBD">
<p id="P7001011952000000000000000009E10" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E10"><img alt="" height="55" width="58" id="P7001011952000000000000000009E11" data-uri="P7001011952000000000000000005893" src="../images/VideoNote.png"></img></p>
<p id="P7001011952000000000000000009E12" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009E12">Walking though distributed hash tables</p>
</aside>
</section>
</section>
</section></body></html>