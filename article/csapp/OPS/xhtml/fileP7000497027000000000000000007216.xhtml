<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>9.7 Case Study: The Intel Core i7/Linux Memory System</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007216" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000045C21" data-uri="chapter09.xhtml#P7000497027000000000000000045C21" epub:type="title"><span class="pcalibre label pcalibre1">9.7 </span>Case Study: The Intel Core i7/Linux Memory System</h1></header>
<p id="P7000497027000000000000000045C22" data-uri="chapter09.xhtml#P7000497027000000000000000045C22" class="pcalibre1 pcalibre calibre2">We conclude our discussion of virtual memory mechanisms with a case study of a real system: an Intel Core i7 running Linux. Although the underlying Haswell microarchitecture allows for full 64-bit virtual and physical address spaces, the current Core i7 implementations (and those for the foreseeable future) support a 48-bit (256 TB) virtual address space and a 52-bit (4 PB) physical address space, along with a compatibility mode that supports 32-bit (4 GB) virtual and physical address spaces.</p>
<p id="P7000497027000000000000000045C23" data-uri="chapter09.xhtml#P7000497027000000000000000045C23" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000721A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.21</span></a> gives the highlights of the Core i7 memory system. The <i class="calibre5 pcalibre pcalibre1">processor package</i> (chip) includes four cores, a large L3 cache shared by all of the cores, and</p>
<figure id="P700049702700000000000000000721A" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P700049702700000000000000000721A">
<img alt="A diagram illustrates the Core I7 memory system." id="P7000497027000000000000000045C24" data-uri="P700049702700000000000000000B790" src="../images/p825-1.png" class="pcalibre1 calibre280 pcalibre"/>
<figcaption id="P7000497027000000000000000045C25" data-uri="chapter09.xhtml#P7000497027000000000000000045C25" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045C26" data-uri="chapter09.xhtml#P7000497027000000000000000045C26" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.21 </span>The Core i7 memory system.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025F6C" data-uri="chapter09.xhtml#P7000497027000000000000000025F6C">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045C27" data-uri="chapter09.xhtml#P7000497027000000000000000045C27" class="pcalibre1 pcalibre calibre2">A diagram shows a processor package interacting with main memory, as well other cores and I/O bridge. The components of the package are summarized below.</p>
<ul id="P7000497027000000000000000045C28" data-uri="chapter09.xhtml#P7000497027000000000000000045C28" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000045C29" data-uri="chapter09.xhtml#P7000497027000000000000000045C29" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C2A" data-uri="chapter09.xhtml#P7000497027000000000000000045C2A" class="pcalibre calibre3 pcalibre1">Core x4</p>
<ul id="P7000497027000000000000000045C2B" data-uri="chapter09.xhtml#P7000497027000000000000000045C2B" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045C2C" data-uri="chapter09.xhtml#P7000497027000000000000000045C2C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C2D" data-uri="chapter09.xhtml#P7000497027000000000000000045C2D" class="pcalibre calibre3 pcalibre1">Registers and Instruction fetch interact with L1 d-cache (32 KB, 8-way) and L1 i-cache (32 KB, 8-way), respectively, which interact with L2 unified cache (256 KB, 8-way)</p></li>
<li id="P7000497027000000000000000045C2E" data-uri="chapter09.xhtml#P7000497027000000000000000045C2E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C2F" data-uri="chapter09.xhtml#P7000497027000000000000000045C2F" class="pcalibre calibre3 pcalibre1">MMU (addr translation) interacts with L1 d-TLB (64 entries, 4-way) and L1 i-TLB (128 entries, 4-way), which interact with L2 unified TLB (512 entries, 4-way)</p></li>
<li id="P7000497027000000000000000045C30" data-uri="chapter09.xhtml#P7000497027000000000000000045C30" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C31" data-uri="chapter09.xhtml#P7000497027000000000000000045C31" class="pcalibre calibre3 pcalibre1">QuickPath interconnect interacts with other cores, I/O bridge, and DDR3 memory controller</p></li>
</ul></li>
<li id="P7000497027000000000000000045C32" data-uri="chapter09.xhtml#P7000497027000000000000000045C32" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C33" data-uri="chapter09.xhtml#P7000497027000000000000000045C33" class="pcalibre calibre3 pcalibre1">L3 unified cache 8 MB, 16-way (shared by all cores), interacts with L2 unified cache and DDR3 memory controller</p></li>
<li id="P7000497027000000000000000045C34" data-uri="chapter09.xhtml#P7000497027000000000000000045C34" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C35" data-uri="chapter09.xhtml#P7000497027000000000000000045C35" class="pcalibre calibre3 pcalibre1">DDR3 memory controller (shared by all cores), interacts with main memory, L3 unified cache, L3 unified TLB, and QuickPath.</p></li>
</ul>
</details>
</figcaption>
</figure>
<figure id="P700049702700000000000000000721E" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P700049702700000000000000000721E">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000721F" title="826" data-uri="chapter09.xhtml#P700049702700000000000000000721F" epub:type="pagebreak"></span>
<img alt="A diagram summarizes Core I7 address translation." id="P7000497027000000000000000045C36" data-uri="P700049702700000000000000000B791" src="../images/p826-1.png" class="calibre281 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045C37" data-uri="chapter09.xhtml#P7000497027000000000000000045C37" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045C38" data-uri="chapter09.xhtml#P7000497027000000000000000045C38" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.22 </span>Summary of Core i7 address translation.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000045C39" data-uri="chapter09.xhtml#P7000497027000000000000000045C39"><p id="P7000497027000000000000000045C3A" data-uri="chapter09.xhtml#P7000497027000000000000000045C3A" class="pcalibre calibre3 pcalibre1">For simplicity, the i-caches, i-TLB, and L2 unified TLB are not shown.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025F81" data-uri="chapter09.xhtml#P7000497027000000000000000025F81">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045C3B" data-uri="chapter09.xhtml#P7000497027000000000000000045C3B" class="pcalibre1 pcalibre calibre2">A diagram shows a flow through elements, as summarized below.</p>
<ul id="P7000497027000000000000000045C3C" data-uri="chapter09.xhtml#P7000497027000000000000000045C3C" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000045C3D" data-uri="chapter09.xhtml#P7000497027000000000000000045C3D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C3E" data-uri="chapter09.xhtml#P7000497027000000000000000045C3E" class="pcalibre calibre3 pcalibre1">CPU</p></li>
<li id="P7000497027000000000000000045C3F" data-uri="chapter09.xhtml#P7000497027000000000000000045C3F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C40" data-uri="chapter09.xhtml#P7000497027000000000000000045C40" class="pcalibre calibre3 pcalibre1">Virtual address (VA) including 36-bit VPN and 12-bit VPO</p></li>
<li id="P7000497027000000000000000045C41" data-uri="chapter09.xhtml#P7000497027000000000000000045C41" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C42" data-uri="chapter09.xhtml#P7000497027000000000000000045C42" class="pcalibre calibre3 pcalibre1">Page tables, with PTEs in second register from VPN1 through VPN 4 (each 9 bits); PTE from one table to first register of next, with CR3 at first</p></li>
<li id="P7000497027000000000000000045C43" data-uri="chapter09.xhtml#P7000497027000000000000000045C43" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C44" data-uri="chapter09.xhtml#P7000497027000000000000000045C44" class="pcalibre calibre3 pcalibre1">L1 TLB (16 sets, 4 entries/set), with columns from TLBT (32 bits) from VPN and rows from TLBI (4 bits) from VPN</p></li>
<li id="P7000497027000000000000000045C45" data-uri="chapter09.xhtml#P7000497027000000000000000045C45" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C46" data-uri="chapter09.xhtml#P7000497027000000000000000045C46" class="pcalibre calibre3 pcalibre1">Physical address (PA) including PPN (40-bits, from TLB hit and PTE in last page table) and PPO (12 bits, from VPO)</p></li>
<li id="P7000497027000000000000000045C47" data-uri="chapter09.xhtml#P7000497027000000000000000045C47" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C48" data-uri="chapter09.xhtml#P7000497027000000000000000045C48" class="pcalibre calibre3 pcalibre1">Physial address translated to CT (40 bits), CI (6 bits) and CO (6 bits)</p></li>
<li id="P7000497027000000000000000045C49" data-uri="chapter09.xhtml#P7000497027000000000000000045C49" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C4A" data-uri="chapter09.xhtml#P7000497027000000000000000045C4A" class="pcalibre calibre3 pcalibre1">L1 d-cache (64 sets, 8 lines/set), with columns from CT and CO and rows from CI</p></li>
<li id="P7000497027000000000000000045C4B" data-uri="chapter09.xhtml#P7000497027000000000000000045C4B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C4C" data-uri="chapter09.xhtml#P7000497027000000000000000045C4C" class="pcalibre calibre3 pcalibre1">L2, l3, and main memory, with L1 miss from physical address translation</p></li>
<li id="P7000497027000000000000000045C4D" data-uri="chapter09.xhtml#P7000497027000000000000000045C4D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C4E" data-uri="chapter09.xhtml#P7000497027000000000000000045C4E" class="pcalibre calibre3 pcalibre1">Result (32/64) from L1 hit form L1 d-cache and from L2, L3, and main memory.</p></li>
</ul>
</details>

</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045C4F" data-uri="chapter09.xhtml#P7000497027000000000000000045C4F">a DDR3 memory controller. Each core contains a hierarchy of TLBs, a hierarchy of data and instruction caches, and a set of fast point-to-point links, based on the QuickPath technology, for communicating directly with the other cores and the external I/O bridge. The TLBs are virtually addressed, and 4-way set associative. The L1, L2, and L3 caches are physically addressed, with a block size of 64 bytes. L1 and L2 are 8-way set associative, and L3 is 16-way set associative. The page size can be configured at start-up time as either 4 KB or 4 MB. Linux uses 4 KB pages.</p>
<section id="P7000497027000000000000000007226" data-uri="chapter09.xhtml#P7000497027000000000000000007226" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000045C50" data-uri="chapter09.xhtml#P7000497027000000000000000045C50" epub:type="title"><span class="pcalibre label pcalibre1">9.7.1 </span>Core i7 Address Translation</h1></header>
<p id="P7000497027000000000000000045C51" data-uri="chapter09.xhtml#P7000497027000000000000000045C51" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000721E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.22</span></a> summarizes the entire Core i7 address translation process, from the time the CPU generates a virtual address until a data word arrives from memory. The Core i7 uses a four-level page table hierarchy. Each process has its own private page table hierarchy. When a Linux process is running, the page tables associated with allocated pages are all memory-resident, although the Core i7 architecture allows these page tables to be swapped in and out. The <i class="calibre5 pcalibre pcalibre1">CR3</i> control register contains the physical address of the beginning of the level 1 (L1) page table. The value of CR3 is part of each process context, and is restored during each context switch.</p>
<figure id="P7000497027000000000000000007229" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007229">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000722A" title="827" data-uri="chapter09.xhtml#P700049702700000000000000000722A" epub:type="pagebreak"></span>
<img alt="A diagram and table summarize format of level 2, level 2, and level 3 page table entries." id="P7000497027000000000000000045C52" data-uri="P700049702700000000000000000B792" src="../images/p827-1.png" class="pcalibre1 pcalibre calibre282"/>
<table id="P7000497027000000000000000045C53" data-uri="chapter09.xhtml#P7000497027000000000000000045C53" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000045C54" data-uri="chapter09.xhtml#P7000497027000000000000000045C54" class="calibre18 pcalibre pcalibre1">Field</th>
<th id="P7000497027000000000000000045C55" data-uri="chapter09.xhtml#P7000497027000000000000000045C55" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C56" data-uri="chapter09.xhtml#P7000497027000000000000000045C56" class="calibre20 pcalibre pcalibre1">P</td>
<td id="P7000497027000000000000000045C57" data-uri="chapter09.xhtml#P7000497027000000000000000045C57" class="calibre20 pcalibre pcalibre1">Child page table present in physical memory (1) or not (0).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C58" data-uri="chapter09.xhtml#P7000497027000000000000000045C58" class="calibre20 pcalibre pcalibre1">R/W</td>
<td id="P7000497027000000000000000045C59" data-uri="chapter09.xhtml#P7000497027000000000000000045C59" class="calibre20 pcalibre pcalibre1">Read-only or read-write access permission for all reachable pages.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C5A" data-uri="chapter09.xhtml#P7000497027000000000000000045C5A" class="calibre20 pcalibre pcalibre1">U/S</td>
<td id="P7000497027000000000000000045C5B" data-uri="chapter09.xhtml#P7000497027000000000000000045C5B" class="calibre20 pcalibre pcalibre1">User or supervisor (kernel) mode access permission for all reachable pages.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C5C" data-uri="chapter09.xhtml#P7000497027000000000000000045C5C" class="calibre20 pcalibre pcalibre1">WT</td>
<td id="P7000497027000000000000000045C5D" data-uri="chapter09.xhtml#P7000497027000000000000000045C5D" class="calibre20 pcalibre pcalibre1">Write-through or write-back cache policy for the child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C5E" data-uri="chapter09.xhtml#P7000497027000000000000000045C5E" class="calibre20 pcalibre pcalibre1">CD</td>
<td id="P7000497027000000000000000045C5F" data-uri="chapter09.xhtml#P7000497027000000000000000045C5F" class="calibre20 pcalibre pcalibre1">Caching disabled or enabled for the child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C60" data-uri="chapter09.xhtml#P7000497027000000000000000045C60" class="calibre20 pcalibre pcalibre1">A</td>
<td id="P7000497027000000000000000045C61" data-uri="chapter09.xhtml#P7000497027000000000000000045C61" class="calibre20 pcalibre pcalibre1">Reference bit (set by MMU on reads and writes, cleared by software).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C62" data-uri="chapter09.xhtml#P7000497027000000000000000045C62" class="calibre20 pcalibre pcalibre1">PS</td>
<td id="P7000497027000000000000000045C63" data-uri="chapter09.xhtml#P7000497027000000000000000045C63" class="calibre20 pcalibre pcalibre1">Page size either 4 KB or 4 MB (defined for level 1 PTEs only).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C64" data-uri="chapter09.xhtml#P7000497027000000000000000045C64" class="calibre20 pcalibre pcalibre1">Base addr</td>
<td id="P7000497027000000000000000045C65" data-uri="chapter09.xhtml#P7000497027000000000000000045C65" class="calibre20 pcalibre pcalibre1">40 most significant bits of physical base address of child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C66" data-uri="chapter09.xhtml#P7000497027000000000000000045C66" class="calibre20 pcalibre pcalibre1">XD</td>
<td id="P7000497027000000000000000045C67" data-uri="chapter09.xhtml#P7000497027000000000000000045C67" class="calibre20 pcalibre pcalibre1">Disable or enable instruction fetches from all pages reachable from this PTE.</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000045C68" data-uri="chapter09.xhtml#P7000497027000000000000000045C68" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045C69" data-uri="chapter09.xhtml#P7000497027000000000000000045C69" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.23 </span>Format of level 1, level 2, and level 3 page table entries.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000045C6A" data-uri="chapter09.xhtml#P7000497027000000000000000045C6A"><p id="P7000497027000000000000000045C6B" data-uri="chapter09.xhtml#P7000497027000000000000000045C6B" class="pcalibre calibre3 pcalibre1">Each entry references a 4 KB child page table.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025FB3" data-uri="chapter09.xhtml#P7000497027000000000000000025FB3">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045C6C" data-uri="chapter09.xhtml#P7000497027000000000000000045C6C" class="pcalibre1 pcalibre calibre2">A diagram shows bits 63 through 0, with 63 to 1 available for OS (page table location on disk) and bit 0 as P=0. Elements within the bits are summarized below.</p>
<ul id="P7000497027000000000000000045C6D" data-uri="chapter09.xhtml#P7000497027000000000000000045C6D" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000045C6E" data-uri="chapter09.xhtml#P7000497027000000000000000045C6E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C6F" data-uri="chapter09.xhtml#P7000497027000000000000000045C6F" class="pcalibre calibre3 pcalibre1">63: XD</p></li>
<li id="P7000497027000000000000000045C70" data-uri="chapter09.xhtml#P7000497027000000000000000045C70" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C71" data-uri="chapter09.xhtml#P7000497027000000000000000045C71" class="pcalibre calibre3 pcalibre1">62 to 52: Unused</p></li>
<li id="P7000497027000000000000000045C72" data-uri="chapter09.xhtml#P7000497027000000000000000045C72" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C73" data-uri="chapter09.xhtml#P7000497027000000000000000045C73" class="pcalibre calibre3 pcalibre1">51 to 12: Page table physical base addr</p></li>
<li id="P7000497027000000000000000045C74" data-uri="chapter09.xhtml#P7000497027000000000000000045C74" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C75" data-uri="chapter09.xhtml#P7000497027000000000000000045C75" class="pcalibre calibre3 pcalibre1">11 to 9: Unused</p></li>
<li id="P7000497027000000000000000045C76" data-uri="chapter09.xhtml#P7000497027000000000000000045C76" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C77" data-uri="chapter09.xhtml#P7000497027000000000000000045C77" class="pcalibre calibre3 pcalibre1">8: G</p></li>
<li id="P7000497027000000000000000045C78" data-uri="chapter09.xhtml#P7000497027000000000000000045C78" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C79" data-uri="chapter09.xhtml#P7000497027000000000000000045C79" class="pcalibre calibre3 pcalibre1">7: PS</p></li>
<li id="P7000497027000000000000000045C7A" data-uri="chapter09.xhtml#P7000497027000000000000000045C7A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C7B" data-uri="chapter09.xhtml#P7000497027000000000000000045C7B" class="pcalibre calibre3 pcalibre1">6 (blank)</p></li>
<li id="P7000497027000000000000000045C7C" data-uri="chapter09.xhtml#P7000497027000000000000000045C7C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C7D" data-uri="chapter09.xhtml#P7000497027000000000000000045C7D" class="pcalibre calibre3 pcalibre1">5: A</p></li>
<li id="P7000497027000000000000000045C7E" data-uri="chapter09.xhtml#P7000497027000000000000000045C7E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C7F" data-uri="chapter09.xhtml#P7000497027000000000000000045C7F" class="pcalibre calibre3 pcalibre1">4: CD</p></li>
<li id="P7000497027000000000000000045C80" data-uri="chapter09.xhtml#P7000497027000000000000000045C80" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C81" data-uri="chapter09.xhtml#P7000497027000000000000000045C81" class="pcalibre calibre3 pcalibre1">3: WT</p></li>
<li id="P7000497027000000000000000045C82" data-uri="chapter09.xhtml#P7000497027000000000000000045C82" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C83" data-uri="chapter09.xhtml#P7000497027000000000000000045C83" class="pcalibre calibre3 pcalibre1">2: U/S</p></li>
<li id="P7000497027000000000000000045C84" data-uri="chapter09.xhtml#P7000497027000000000000000045C84" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C85" data-uri="chapter09.xhtml#P7000497027000000000000000045C85" class="pcalibre calibre3 pcalibre1">1: R/W</p></li>
<li id="P7000497027000000000000000045C86" data-uri="chapter09.xhtml#P7000497027000000000000000045C86" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045C87" data-uri="chapter09.xhtml#P7000497027000000000000000045C87" class="pcalibre calibre3 pcalibre1">0: P=1</p></li>
</ul>
<p id="P7000497027000000000000000045C88" data-uri="chapter09.xhtml#P7000497027000000000000000045C88" class="pcalibre1 pcalibre calibre2">These fields are described in the table, as reproduced below.</p>
<table id="P7000497027000000000000000045C89" data-uri="chapter09.xhtml#P7000497027000000000000000045C89" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000045C8A" data-uri="chapter09.xhtml#P7000497027000000000000000045C8A" class="calibre18 pcalibre pcalibre1">Field</th>
<th id="P7000497027000000000000000045C8B" data-uri="chapter09.xhtml#P7000497027000000000000000045C8B" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C8C" data-uri="chapter09.xhtml#P7000497027000000000000000045C8C" class="calibre20 pcalibre pcalibre1">P</td>
<td id="P7000497027000000000000000045C8D" data-uri="chapter09.xhtml#P7000497027000000000000000045C8D" class="calibre20 pcalibre pcalibre1">Child page table present in physical memory (1) or not (0).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C8E" data-uri="chapter09.xhtml#P7000497027000000000000000045C8E" class="calibre20 pcalibre pcalibre1">R/W</td>
<td id="P7000497027000000000000000045C8F" data-uri="chapter09.xhtml#P7000497027000000000000000045C8F" class="calibre20 pcalibre pcalibre1">Read-only or read-write access permission for all reachable pages.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C90" data-uri="chapter09.xhtml#P7000497027000000000000000045C90" class="calibre20 pcalibre pcalibre1">U/S</td>
<td id="P7000497027000000000000000045C91" data-uri="chapter09.xhtml#P7000497027000000000000000045C91" class="calibre20 pcalibre pcalibre1">User or supervisor (kernel) mode access permission for all reachable pages.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C92" data-uri="chapter09.xhtml#P7000497027000000000000000045C92" class="calibre20 pcalibre pcalibre1">WT</td>
<td id="P7000497027000000000000000045C93" data-uri="chapter09.xhtml#P7000497027000000000000000045C93" class="calibre20 pcalibre pcalibre1">Write-through or write-back cache policy for the child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C94" data-uri="chapter09.xhtml#P7000497027000000000000000045C94" class="calibre20 pcalibre pcalibre1">CD</td>
<td id="P7000497027000000000000000045C95" data-uri="chapter09.xhtml#P7000497027000000000000000045C95" class="calibre20 pcalibre pcalibre1">Caching disabled or enabled for the child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C96" data-uri="chapter09.xhtml#P7000497027000000000000000045C96" class="calibre20 pcalibre pcalibre1">A</td>
<td id="P7000497027000000000000000045C97" data-uri="chapter09.xhtml#P7000497027000000000000000045C97" class="calibre20 pcalibre pcalibre1">Reference bit (set by MMU on reads and writes, cleared by software).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C98" data-uri="chapter09.xhtml#P7000497027000000000000000045C98" class="calibre20 pcalibre pcalibre1">PS</td>
<td id="P7000497027000000000000000045C99" data-uri="chapter09.xhtml#P7000497027000000000000000045C99" class="calibre20 pcalibre pcalibre1">Page size either 4 KB or 4 MB (defined for level 1 PTEs only).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C9A" data-uri="chapter09.xhtml#P7000497027000000000000000045C9A" class="calibre20 pcalibre pcalibre1">Base addr</td>
<td id="P7000497027000000000000000045C9B" data-uri="chapter09.xhtml#P7000497027000000000000000045C9B" class="calibre20 pcalibre pcalibre1">40 most significant bits of physical base address of child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045C9C" data-uri="chapter09.xhtml#P7000497027000000000000000045C9C" class="calibre20 pcalibre pcalibre1">XD</td>
<td id="P7000497027000000000000000045C9D" data-uri="chapter09.xhtml#P7000497027000000000000000045C9D" class="calibre20 pcalibre pcalibre1">Disable or enable instruction fetches from all pages reachable from this PTE.</td>
</tr>
</tbody>
</table>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000045C9E" data-uri="chapter09.xhtml#P7000497027000000000000000045C9E" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007229"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.23</span></a> shows the format of an entry in a level 1, level 2, or level 3 page table. When <var class="calibre5 pcalibre pcalibre1">P</var> = 1 (which is always the case with Linux), the address field contains a 40-bit physical page number (PPN) that points to the beginning of the appropriate page table. Notice that this imposes a 4 KB alignment requirement on page tables.</p>
<p id="P7000497027000000000000000045C9F" data-uri="chapter09.xhtml#P7000497027000000000000000045C9F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007249"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.24</span></a> shows the format of an entry in a level 4 page table. When <var class="calibre5 pcalibre pcalibre1">P</var> = 1, the address field contains a 40-bit PPN that points to the base of some page in physical memory. Again, this imposes a 4 KB alignment requirement on physical pages.</p>
<p id="P7000497027000000000000000045CA0" data-uri="chapter09.xhtml#P7000497027000000000000000045CA0" class="pcalibre1 pcalibre calibre2">The PTE has three permission bits that control access to the page. The <i class="calibre5 pcalibre pcalibre1">R/W</i> bit determines whether the contents of a page are read/write or read-only. The <i class="calibre5 pcalibre pcalibre1">U/S</i> bit, which determines whether the page can be accessed in user mode, protects code and data in the operating system kernel from user programs. The <i class="calibre5 pcalibre pcalibre1">XD</i> (execute disable) bit, which was introduced in 64-bit systems, can be used to disable instruction fetches from individual memory pages. This is an important new feature that allows the operating system kernel to reduce the risk of buffer overflow attacks by restricting execution to the read-only code segment.</p>
<p id="P7000497027000000000000000045CA1" data-uri="chapter09.xhtml#P7000497027000000000000000045CA1" class="pcalibre1 pcalibre calibre2">As the MMU translates each virtual address, it also updates two other bits that can be used by the kernel's page fault handler. The MMU sets the <var class="calibre5 pcalibre pcalibre1">A</var> bit, which is known as a <i class="calibre5 pcalibre pcalibre1">reference bit</i>, each time a page is accessed. The kernel can use the reference bit to implement its page replacement algorithm. The MMU sets the <var class="calibre5 pcalibre pcalibre1">D</var> bit, or <i class="calibre5 pcalibre pcalibre1">dirty bit</i>, each time the page is written to. A page that has been modified is sometimes called a <i class="calibre5 pcalibre pcalibre1">dirty page.</i> The dirty bit tells the kernel whether or not it must</p>
<figure id="P7000497027000000000000000007249" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007249">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000724A" title="828" data-uri="chapter09.xhtml#P700049702700000000000000000724A" epub:type="pagebreak"></span>
<img alt="A diagram and table summarize format of level 4 page table entries." id="P7000497027000000000000000045CA2" data-uri="P700049702700000000000000000B793" src="../images/p828-1.png" class="pcalibre calibre283 pcalibre1"/>
<table id="P7000497027000000000000000045CA3" data-uri="chapter09.xhtml#P7000497027000000000000000045CA3" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000045CA4" data-uri="chapter09.xhtml#P7000497027000000000000000045CA4" class="calibre18 pcalibre pcalibre1">Field</th>
<th id="P7000497027000000000000000045CA5" data-uri="chapter09.xhtml#P7000497027000000000000000045CA5" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CA6" data-uri="chapter09.xhtml#P7000497027000000000000000045CA6" class="calibre20 pcalibre pcalibre1">P</td>
<td id="P7000497027000000000000000045CA7" data-uri="chapter09.xhtml#P7000497027000000000000000045CA7" class="calibre20 pcalibre pcalibre1">Child page present in physical memory (1) or not (0).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CA8" data-uri="chapter09.xhtml#P7000497027000000000000000045CA8" class="calibre20 pcalibre pcalibre1">R/W</td>
<td id="P7000497027000000000000000045CA9" data-uri="chapter09.xhtml#P7000497027000000000000000045CA9" class="calibre20 pcalibre pcalibre1">Read-only or read/write access permission for child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CAA" data-uri="chapter09.xhtml#P7000497027000000000000000045CAA" class="calibre20 pcalibre pcalibre1">U/S</td>
<td id="P7000497027000000000000000045CAB" data-uri="chapter09.xhtml#P7000497027000000000000000045CAB" class="calibre20 pcalibre pcalibre1">User or supervisor mode (kernel mode) access permission for child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CAC" data-uri="chapter09.xhtml#P7000497027000000000000000045CAC" class="calibre20 pcalibre pcalibre1">WT</td>
<td id="P7000497027000000000000000045CAD" data-uri="chapter09.xhtml#P7000497027000000000000000045CAD" class="calibre20 pcalibre pcalibre1">Write-through or write-back cache policy for the child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CAE" data-uri="chapter09.xhtml#P7000497027000000000000000045CAE" class="calibre20 pcalibre pcalibre1">CD</td>
<td id="P7000497027000000000000000045CAF" data-uri="chapter09.xhtml#P7000497027000000000000000045CAF" class="calibre20 pcalibre pcalibre1">Cache disabled or enabled.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CB0" data-uri="chapter09.xhtml#P7000497027000000000000000045CB0" class="calibre20 pcalibre pcalibre1">A</td>
<td id="P7000497027000000000000000045CB1" data-uri="chapter09.xhtml#P7000497027000000000000000045CB1" class="calibre20 pcalibre pcalibre1">Reference bit (set by MMU on reads and writes, cleared by software).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CB2" data-uri="chapter09.xhtml#P7000497027000000000000000045CB2" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000045CB3" data-uri="chapter09.xhtml#P7000497027000000000000000045CB3" class="calibre20 pcalibre pcalibre1">Dirty bit (set by MMU on writes, cleared by software).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CB4" data-uri="chapter09.xhtml#P7000497027000000000000000045CB4" class="calibre20 pcalibre pcalibre1">G</td>
<td id="P7000497027000000000000000045CB5" data-uri="chapter09.xhtml#P7000497027000000000000000045CB5" class="calibre20 pcalibre pcalibre1">Global page (don't evict from TLB on task switch).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CB6" data-uri="chapter09.xhtml#P7000497027000000000000000045CB6" class="calibre20 pcalibre pcalibre1">Base addr</td>
<td id="P7000497027000000000000000045CB7" data-uri="chapter09.xhtml#P7000497027000000000000000045CB7" class="calibre20 pcalibre pcalibre1">40 most significant bits of physical base address of child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CB8" data-uri="chapter09.xhtml#P7000497027000000000000000045CB8" class="calibre20 pcalibre pcalibre1">XD</td>
<td id="P7000497027000000000000000045CB9" data-uri="chapter09.xhtml#P7000497027000000000000000045CB9" class="calibre20 pcalibre pcalibre1">Disable or enable instruction fetches from the child page.</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000045CBA" data-uri="chapter09.xhtml#P7000497027000000000000000045CBA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045CBB" data-uri="chapter09.xhtml#P7000497027000000000000000045CBB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.24 </span>Format of level 4 page table entries.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000045CBC" data-uri="chapter09.xhtml#P7000497027000000000000000045CBC"><p id="P7000497027000000000000000045CBD" data-uri="chapter09.xhtml#P7000497027000000000000000045CBD" class="pcalibre calibre3 pcalibre1">Each entry references a 4 KB child page.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000026006" data-uri="chapter09.xhtml#P7000497027000000000000000026006">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045CBE" data-uri="chapter09.xhtml#P7000497027000000000000000045CBE" class="pcalibre1 pcalibre calibre2">A diagram shows bits 63 through 0, with 63 to 1 available for OS (page table location on disk) and bit 0 as P=0. Elements within the bits are summarized below.</p>
<ul id="P7000497027000000000000000045CBF" data-uri="chapter09.xhtml#P7000497027000000000000000045CBF" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000045CC0" data-uri="chapter09.xhtml#P7000497027000000000000000045CC0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CC1" data-uri="chapter09.xhtml#P7000497027000000000000000045CC1" class="pcalibre calibre3 pcalibre1">63: XD</p></li>
<li id="P7000497027000000000000000045CC2" data-uri="chapter09.xhtml#P7000497027000000000000000045CC2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CC3" data-uri="chapter09.xhtml#P7000497027000000000000000045CC3" class="pcalibre calibre3 pcalibre1">62 to 52: Unused</p></li>
<li id="P7000497027000000000000000045CC4" data-uri="chapter09.xhtml#P7000497027000000000000000045CC4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CC5" data-uri="chapter09.xhtml#P7000497027000000000000000045CC5" class="pcalibre calibre3 pcalibre1">51 to 12: Page physical base addr</p></li>
<li id="P7000497027000000000000000045CC6" data-uri="chapter09.xhtml#P7000497027000000000000000045CC6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CC7" data-uri="chapter09.xhtml#P7000497027000000000000000045CC7" class="pcalibre calibre3 pcalibre1">11 to 9: Unused</p></li>
<li id="P7000497027000000000000000045CC8" data-uri="chapter09.xhtml#P7000497027000000000000000045CC8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CC9" data-uri="chapter09.xhtml#P7000497027000000000000000045CC9" class="pcalibre calibre3 pcalibre1">8: G</p></li>
<li id="P7000497027000000000000000045CCA" data-uri="chapter09.xhtml#P7000497027000000000000000045CCA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CCB" data-uri="chapter09.xhtml#P7000497027000000000000000045CCB" class="pcalibre calibre3 pcalibre1">7: 0</p></li>
<li id="P7000497027000000000000000045CCC" data-uri="chapter09.xhtml#P7000497027000000000000000045CCC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CCD" data-uri="chapter09.xhtml#P7000497027000000000000000045CCD" class="pcalibre calibre3 pcalibre1">6: D</p></li>
<li id="P7000497027000000000000000045CCE" data-uri="chapter09.xhtml#P7000497027000000000000000045CCE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CCF" data-uri="chapter09.xhtml#P7000497027000000000000000045CCF" class="pcalibre calibre3 pcalibre1">5: A</p></li>
<li id="P7000497027000000000000000045CD0" data-uri="chapter09.xhtml#P7000497027000000000000000045CD0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CD1" data-uri="chapter09.xhtml#P7000497027000000000000000045CD1" class="pcalibre calibre3 pcalibre1">4: CD</p></li>
<li id="P7000497027000000000000000045CD2" data-uri="chapter09.xhtml#P7000497027000000000000000045CD2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CD3" data-uri="chapter09.xhtml#P7000497027000000000000000045CD3" class="pcalibre calibre3 pcalibre1">3: WT</p></li>
<li id="P7000497027000000000000000045CD4" data-uri="chapter09.xhtml#P7000497027000000000000000045CD4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CD5" data-uri="chapter09.xhtml#P7000497027000000000000000045CD5" class="pcalibre calibre3 pcalibre1">2: U/S</p></li>
<li id="P7000497027000000000000000045CD6" data-uri="chapter09.xhtml#P7000497027000000000000000045CD6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CD7" data-uri="chapter09.xhtml#P7000497027000000000000000045CD7" class="pcalibre calibre3 pcalibre1">1: R/W</p></li>
<li id="P7000497027000000000000000045CD8" data-uri="chapter09.xhtml#P7000497027000000000000000045CD8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045CD9" data-uri="chapter09.xhtml#P7000497027000000000000000045CD9" class="pcalibre calibre3 pcalibre1">0: P=1</p></li>
</ul>
<p id="P7000497027000000000000000045CDA" data-uri="chapter09.xhtml#P7000497027000000000000000045CDA" class="pcalibre1 pcalibre calibre2">These fields are described in the table, as reproduced below.</p>
<table id="P7000497027000000000000000045CDB" data-uri="chapter09.xhtml#P7000497027000000000000000045CDB" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000045CDC" data-uri="chapter09.xhtml#P7000497027000000000000000045CDC" class="calibre18 pcalibre pcalibre1">Field</th>
<th id="P7000497027000000000000000045CDD" data-uri="chapter09.xhtml#P7000497027000000000000000045CDD" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CDE" data-uri="chapter09.xhtml#P7000497027000000000000000045CDE" class="calibre20 pcalibre pcalibre1">P</td>
<td id="P7000497027000000000000000045CDF" data-uri="chapter09.xhtml#P7000497027000000000000000045CDF" class="calibre20 pcalibre pcalibre1">Child page table present in physical memory (1) or not (0).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CE0" data-uri="chapter09.xhtml#P7000497027000000000000000045CE0" class="calibre20 pcalibre pcalibre1">R/W</td>
<td id="P7000497027000000000000000045CE1" data-uri="chapter09.xhtml#P7000497027000000000000000045CE1" class="calibre20 pcalibre pcalibre1">Read-only or read-write access permission for all child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CE2" data-uri="chapter09.xhtml#P7000497027000000000000000045CE2" class="calibre20 pcalibre pcalibre1">U/S</td>
<td id="P7000497027000000000000000045CE3" data-uri="chapter09.xhtml#P7000497027000000000000000045CE3" class="calibre20 pcalibre pcalibre1">User or supervisor mode (kernel mode) access permission for child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CE4" data-uri="chapter09.xhtml#P7000497027000000000000000045CE4" class="calibre20 pcalibre pcalibre1">WT</td>
<td id="P7000497027000000000000000045CE5" data-uri="chapter09.xhtml#P7000497027000000000000000045CE5" class="calibre20 pcalibre pcalibre1">Write-through or write-back cache policy for the child page.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CE6" data-uri="chapter09.xhtml#P7000497027000000000000000045CE6" class="calibre20 pcalibre pcalibre1">CD</td>
<td id="P7000497027000000000000000045CE7" data-uri="chapter09.xhtml#P7000497027000000000000000045CE7" class="calibre20 pcalibre pcalibre1">Caching disabled or enabled.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CE8" data-uri="chapter09.xhtml#P7000497027000000000000000045CE8" class="calibre20 pcalibre pcalibre1">A</td>
<td id="P7000497027000000000000000045CE9" data-uri="chapter09.xhtml#P7000497027000000000000000045CE9" class="calibre20 pcalibre pcalibre1">Reference bit (set by MMU on reads and writes, cleared by software).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CEA" data-uri="chapter09.xhtml#P7000497027000000000000000045CEA" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000045CEB" data-uri="chapter09.xhtml#P7000497027000000000000000045CEB" class="calibre20 pcalibre pcalibre1">Dirty bit (set by MMU on writes, cleared by softwaref).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CEC" data-uri="chapter09.xhtml#P7000497027000000000000000045CEC" class="calibre20 pcalibre pcalibre1">G</td>
<td id="P7000497027000000000000000045CED" data-uri="chapter09.xhtml#P7000497027000000000000000045CED" class="calibre20 pcalibre pcalibre1">Global page (don't evict from TLB on task switch).</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CEE" data-uri="chapter09.xhtml#P7000497027000000000000000045CEE" class="calibre20 pcalibre pcalibre1">Base addr</td>
<td id="P7000497027000000000000000045CEF" data-uri="chapter09.xhtml#P7000497027000000000000000045CEF" class="calibre20 pcalibre pcalibre1">40 most significant bits of physical base address of child page table.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000045CF0" data-uri="chapter09.xhtml#P7000497027000000000000000045CF0" class="calibre20 pcalibre pcalibre1">XD</td>
<td id="P7000497027000000000000000045CF1" data-uri="chapter09.xhtml#P7000497027000000000000000045CF1" class="calibre20 pcalibre pcalibre1">Disable or enable instruction fetches from the child page.</td>
</tr>
</tbody>
</table>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045CF2" data-uri="chapter09.xhtml#P7000497027000000000000000045CF2">write back a victim page before it copies in a replacement page. The kernel can call a special kernel-mode instruction to clear the reference or dirty bits.</p>
<p id="P7000497027000000000000000045CF3" data-uri="chapter09.xhtml#P7000497027000000000000000045CF3" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000726E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.25</span></a> shows how the Core i7 MMU uses the four levels of page tables to translate a virtual address to a physical address. The 36-bit VPN is partitioned into four 9-bit chunks, each of which is used as an offset into a page table. The CR3 register contains the physical address of the L1 page table. VPN 1 provides an offset to an L1 PTE, which contains the base address of the L2 page table. VPN 2 provides an offset to an L2 PTE, and so on.</p>
</section>
<section id="P7000497027000000000000000007269" data-uri="chapter09.xhtml#P7000497027000000000000000007269" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000045CF4" data-uri="chapter09.xhtml#P7000497027000000000000000045CF4" epub:type="title"><span class="pcalibre label pcalibre1">9.7.2 </span>Linux Virtual Memory System</h1></header>
<p id="P7000497027000000000000000045CF5" data-uri="chapter09.xhtml#P7000497027000000000000000045CF5" class="pcalibre1 pcalibre calibre2">A virtual memory system requires close cooperation between the hardware and the kernel. Details vary from version to version, and a complete description is beyond our scope. Nonetheless, our aim in this section is to describe enough of the Linux virtual memory system to give you a sense of how a real operating system organizes virtual memory and how it handles page faults.</p>
<p id="P7000497027000000000000000045CF6" data-uri="chapter09.xhtml#P7000497027000000000000000045CF6" class="pcalibre1 pcalibre calibre2">Linux maintains a separate virtual address space for each process of the form shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007275"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.26</span></a>. We have seen this picture a number of times already, with its familiar code, data, heap, shared library, and stack segments. Now that we understand address translation, we can fill in some more details about the kernel virtual memory that lies above the user stack.</p>
<p id="P7000497027000000000000000045CF7" data-uri="chapter09.xhtml#P7000497027000000000000000045CF7" class="pcalibre1 pcalibre calibre2">The kernel virtual memory contains the code and data structures in the kernel. Some regions of the kernel virtual memory are mapped to physical pages that</p>
<figure id="P700049702700000000000000000726E" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P700049702700000000000000000726E">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000726F" title="829" data-uri="chapter09.xhtml#P700049702700000000000000000726F" epub:type="pagebreak"></span>
<img alt="A diagram illustrates Core I7 page table translation." id="P7000497027000000000000000045CF8" data-uri="P700049702700000000000000000B794" src="../images/p829-1.png" class="calibre284 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045CF9" data-uri="chapter09.xhtml#P7000497027000000000000000045CF9" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045CFA" data-uri="chapter09.xhtml#P7000497027000000000000000045CFA" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.25 </span>Core i7 page table translation.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000045CFB" data-uri="chapter09.xhtml#P7000497027000000000000000045CFB"><p id="P7000497027000000000000000045CFC" data-uri="chapter09.xhtml#P7000497027000000000000000045CFC" class="pcalibre calibre3 pcalibre1">PT: page table; PTE: page table entry; VPN: virtual page number; VPO: virtual page offset; PPN: physical page number; PPO: physical page offset. The Linux names for the four levels of page tables are also shown.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000026046" data-uri="chapter09.xhtml#P7000497027000000000000000026046">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045CFD" data-uri="chapter09.xhtml#P7000497027000000000000000045CFD" class="pcalibre1 pcalibre calibre2">A diagram shows a virtual address with 9 bits each for VPN 1 through VPN 4, and 12 bits for VPO. A physical address has 40 bits for PPN and 12 for PPO. Translations from VPN 1 through VPN 4 are through tables, as summarized below.</p>
<ul id="P7000497027000000000000000045CFE" data-uri="chapter09.xhtml#P7000497027000000000000000045CFE" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000045CFF" data-uri="chapter09.xhtml#P7000497027000000000000000045CFF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D00" data-uri="chapter09.xhtml#P7000497027000000000000000045D00" class="pcalibre calibre3 pcalibre1">VPN 1 to L1` PTE in L1 PT page global directory (512 GB region per entry); CR3 sends 40 bits physical address of L1 PT</p></li>
<li id="P7000497027000000000000000045D01" data-uri="chapter09.xhtml#P7000497027000000000000000045D01" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D02" data-uri="chapter09.xhtml#P7000497027000000000000000045D02" class="pcalibre calibre3 pcalibre1">VPN 2 to L2` PTE in L2 PT page upper directory (1 GB region per entry); L1 PTE sends 40 bits</p></li>
<li id="P7000497027000000000000000045D03" data-uri="chapter09.xhtml#P7000497027000000000000000045D03" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D04" data-uri="chapter09.xhtml#P7000497027000000000000000045D04" class="pcalibre calibre3 pcalibre1">VPN 3 to L3` PTE in L2 PT page middle directory (2 MB region per entry); L2 PTE sends 40 bits</p></li>
<li id="P7000497027000000000000000045D05" data-uri="chapter09.xhtml#P7000497027000000000000000045D05" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D06" data-uri="chapter09.xhtml#P7000497027000000000000000045D06" class="pcalibre calibre3 pcalibre1">VPN 4 to L4` PTE in L4 PT page table (4 KB region per entry); L3 PTE sends 40 bits</p></li>
</ul>
<p id="P7000497027000000000000000045D07" data-uri="chapter09.xhtml#P7000497027000000000000000045D07" class="pcalibre calibre3 pcalibre1">The physical address of page (40 bits) is translated to PPN, which VPO (12 bits) translated as offset into physical and virtual page to PPO.</p>
</details>
</figcaption>
</figure>
<figure id="P7000497027000000000000000007275" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007275">
<img alt="A diagram illustrates the virtual memory of a Linux process" id="P7000497027000000000000000045D08" data-uri="P700049702700000000000000000B795" src="../images/p829-2.png" class="calibre285 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045D09" data-uri="chapter09.xhtml#P7000497027000000000000000045D09" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045D0A" data-uri="chapter09.xhtml#P7000497027000000000000000045D0A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.26 </span>The virtual memory of a Linux process.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000026055" data-uri="chapter09.xhtml#P7000497027000000000000000026055">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045D0B" data-uri="chapter09.xhtml#P7000497027000000000000000045D0B" class="pcalibre1 pcalibre calibre2">A diagram illustrates a stack, with registered summarized from bottom to top below.</p>
<ul id="P7000497027000000000000000045D0C" data-uri="chapter09.xhtml#P7000497027000000000000000045D0C" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000045D0D" data-uri="chapter09.xhtml#P7000497027000000000000000045D0D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D0E" data-uri="chapter09.xhtml#P7000497027000000000000000045D0E" class="pcalibre calibre3 pcalibre1">Process virtual memory:</p>
<ul id="P7000497027000000000000000045D0F" data-uri="chapter09.xhtml#P7000497027000000000000000045D0F" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045D10" data-uri="chapter09.xhtml#P7000497027000000000000000045D10" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D11" data-uri="chapter09.xhtml#P7000497027000000000000000045D11" class="pcalibre calibre3 pcalibre1">Gap from 0 to 0x400000</p></li>
<li id="P7000497027000000000000000045D12" data-uri="chapter09.xhtml#P7000497027000000000000000045D12" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D13" data-uri="chapter09.xhtml#P7000497027000000000000000045D13" class="pcalibre calibre3 pcalibre1">Code (.text)</p></li>
<li id="P7000497027000000000000000045D14" data-uri="chapter09.xhtml#P7000497027000000000000000045D14" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D15" data-uri="chapter09.xhtml#P7000497027000000000000000045D15" class="pcalibre calibre3 pcalibre1">Initialized data (.data)</p></li>
<li id="P7000497027000000000000000045D16" data-uri="chapter09.xhtml#P7000497027000000000000000045D16" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D17" data-uri="chapter09.xhtml#P7000497027000000000000000045D17" class="pcalibre calibre3 pcalibre1">Uninitialized data (.bss)</p></li>
<li id="P7000497027000000000000000045D18" data-uri="chapter09.xhtml#P7000497027000000000000000045D18" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D19" data-uri="chapter09.xhtml#P7000497027000000000000000045D19" class="pcalibre calibre3 pcalibre1">Run-time heap (via malloc), to brk</p></li>
<li id="P7000497027000000000000000045D1A" data-uri="chapter09.xhtml#P7000497027000000000000000045D1A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D1B" data-uri="chapter09.xhtml#P7000497027000000000000000045D1B" class="pcalibre calibre3 pcalibre1">Gap</p></li>
<li id="P7000497027000000000000000045D1C" data-uri="chapter09.xhtml#P7000497027000000000000000045D1C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D1D" data-uri="chapter09.xhtml#P7000497027000000000000000045D1D" class="pcalibre calibre3 pcalibre1">Memory-mapped region for shared libraries</p></li>
<li id="P7000497027000000000000000045D1E" data-uri="chapter09.xhtml#P7000497027000000000000000045D1E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D1F" data-uri="chapter09.xhtml#P7000497027000000000000000045D1F" class="pcalibre calibre3 pcalibre1">Gap to %rsp</p></li>
<li id="P7000497027000000000000000045D20" data-uri="chapter09.xhtml#P7000497027000000000000000045D20" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D21" data-uri="chapter09.xhtml#P7000497027000000000000000045D21" class="pcalibre calibre3 pcalibre1">User stack</p></li>
</ul></li>
<li id="P7000497027000000000000000045D22" data-uri="chapter09.xhtml#P7000497027000000000000000045D22" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D23" data-uri="chapter09.xhtml#P7000497027000000000000000045D23" class="pcalibre calibre3 pcalibre1">Kernel virtual memory:</p>
<ul id="P7000497027000000000000000045D24" data-uri="chapter09.xhtml#P7000497027000000000000000045D24" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045D25" data-uri="chapter09.xhtml#P7000497027000000000000000045D25" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D26" data-uri="chapter09.xhtml#P7000497027000000000000000045D26" class="pcalibre calibre3 pcalibre1">Kernel code and data, Physical memory (identical for each process)</p></li>
<li id="P7000497027000000000000000045D27" data-uri="chapter09.xhtml#P7000497027000000000000000045D27" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D28" data-uri="chapter09.xhtml#P7000497027000000000000000045D28" class="pcalibre calibre3 pcalibre1">Process-specific data structures (e.g., page tables, task and mm structs, kernel stack) (different for each process)</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007279" data-uri="chapter09.xhtml#P7000497027000000000000000007279"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000045D29" data-uri="chapter09.xhtml#P7000497027000000000000000045D29" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000727B" title="830" data-uri="chapter09.xhtml#P700049702700000000000000000727B" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Optimizing address translation</h1></header>
<p id="P7000497027000000000000000045D2A" data-uri="chapter09.xhtml#P7000497027000000000000000045D2A" class="pcalibre calibre3 pcalibre1">In our discussion of address translation, we have described a sequential two-step process where the MMU (1) translates the virtual address to a physical address and then (2) passes the physical address to the L1 cache. However, real hardware implementations use a neat trick that allows these steps to be partially overlapped, thus speeding up accesses to the L1 cache. For example, a virtual address on a Core i7 with 4 KB pages has 12 bits of VPO, and these bits are identical to the 12 bits of PPO in the corresponding physical address. Since the 8-way set associative physically addressed L1 caches have 64 sets and 64-byte cache blocks, each physical address has 6 (log<sub class="pcalibre1 calibre47 pcalibre">2</sub> 64) cache offset bits and 6 (log<sub class="pcalibre1 calibre47 pcalibre">2</sub> 64) index bits. These 12 bits fit exactly in the 12-bit VPO of a virtual address, which is no accident! When the CPU needs a virtual address translated, it sends the VPN to the MMU and the VPO to the L1 cache. While the MMU is requesting a page table entry from the TLB, the L1 cache is busy using the VPO bits to find the appropriate set and read out the eight tags and corresponding data words in that set. When the MMU gets the PPN back from the TLB, the cache is ready to try to match the PPN to one of these eight tags.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045D2B" data-uri="chapter09.xhtml#P7000497027000000000000000045D2B">are shared by all processes. For example, each process shares the kernel's code and global data structures. Interestingly, Linux also maps a set of contiguous virtual pages (equal in size to the total amount of DRAM in the system) to the corresponding set of contiguous physical pages. This provides the kernel with a convenient way to access any specific location in physical memory—for example, when it needs to access page tables or to perform memory-mapped I/O operations on devices that are mapped to particular physical memory locations.</p>
<p id="P7000497027000000000000000045D2C" data-uri="chapter09.xhtml#P7000497027000000000000000045D2C" class="pcalibre1 pcalibre calibre2">Other regions of kernel virtual memory contain data that differ for each process. Examples include page tables, the stack that the kernel uses when it is executing code in the context of the process, and various data structures that keep track of the current organization of the virtual address space.</p>
<section id="P700049702700000000000000000727F" data-uri="chapter09.xhtml#P700049702700000000000000000727F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045D2D" data-uri="chapter09.xhtml#P7000497027000000000000000045D2D" epub:type="title">Linux Virtual Memory Areas</h1></header>
<p id="P7000497027000000000000000045D2E" data-uri="chapter09.xhtml#P7000497027000000000000000045D2E" class="pcalibre1 pcalibre calibre2">Linux organizes the virtual memory as a collection of <i class="calibre5 pcalibre pcalibre1">areas</i> (also called <i class="calibre5 pcalibre pcalibre1">segments).</i> An area is a contiguous chunk of existing (allocated) virtual memory whose pages are related in some way. For example, the code segment, data segment, heap, shared library segment, and user stack are all distinct areas. Each existing virtual page is contained in some area, and any virtual page that is not part of some area does not exist and cannot be referenced by the process. The notion of an area is important because it allows the virtual address space to have gaps. The kernel does not keep track of virtual pages that do not exist, and such pages do not consume any additional resources in memory, on disk, or in the kernel itself.</p>
<p id="P7000497027000000000000000045D2F" data-uri="chapter09.xhtml#P7000497027000000000000000045D2F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007284"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.27</span></a> highlights the kernel data structures that keep track of the virtual memory areas in a process. The kernel maintains a distinct task structure (<code id="P7000497027000000000000000045D30" data-uri="chapter09.xhtml#P7000497027000000000000000045D30" class="pcalibre1 calibre8 pcalibre">task_struct</code> in the source code) for each process in the system. The elements of the task structure either contain or point to all of the information that the kernel needs to</p>
<figure id="P7000497027000000000000000007284" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P7000497027000000000000000007284">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007285" title="831" data-uri="chapter09.xhtml#P7000497027000000000000000007285" epub:type="pagebreak"></span>
<img alt="A diagram illustrates how Linux organizes virtual memory." id="P7000497027000000000000000045D31" data-uri="P700049702700000000000000000B796" src="../images/p831-1.png" class="calibre286 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045D32" data-uri="chapter09.xhtml#P7000497027000000000000000045D32" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045D33" data-uri="chapter09.xhtml#P7000497027000000000000000045D33" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.27 </span>How Linux organizes virtual memory.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002607F" data-uri="chapter09.xhtml#P700049702700000000000000002607F">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045D34" data-uri="chapter09.xhtml#P7000497027000000000000000045D34" class="pcalibre1 pcalibre calibre2">A diagram shows stacks of elements, with arrows pointing through them, as summarized in order below.</p>
<ul id="P7000497027000000000000000045D35" data-uri="chapter09.xhtml#P7000497027000000000000000045D35" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000045D36" data-uri="chapter09.xhtml#P7000497027000000000000000045D36" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D37" data-uri="chapter09.xhtml#P7000497027000000000000000045D37" class="pcalibre calibre3 pcalibre1">Task_struct contains mm, with arrow to pgd below</p></li>
<li id="P7000497027000000000000000045D38" data-uri="chapter09.xhtml#P7000497027000000000000000045D38" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D39" data-uri="chapter09.xhtml#P7000497027000000000000000045D39" class="pcalibre calibre3 pcalibre1">Mm_struct contains pgd and map, with arrow from map to first va_end below</p></li>
<li id="P7000497027000000000000000045D3A" data-uri="chapter09.xhtml#P7000497027000000000000000045D3A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D3B" data-uri="chapter09.xhtml#P7000497027000000000000000045D3B" class="pcalibre calibre3 pcalibre1">Vm_area_struct: three tables, each with entries va_end, vm_start, vm_prot, vm_flags, and va_next; the first two have gaps before va_next; arrows flow from va_next to va_end in table below it.</p></li>
<li id="P7000497027000000000000000045D3C" data-uri="chapter09.xhtml#P7000497027000000000000000045D3C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D3D" data-uri="chapter09.xhtml#P7000497027000000000000000045D3D" class="pcalibre calibre3 pcalibre1">Process virtual memory, with the following entries:</p>
<ul id="P7000497027000000000000000045D3E" data-uri="chapter09.xhtml#P7000497027000000000000000045D3E" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045D3F" data-uri="chapter09.xhtml#P7000497027000000000000000045D3F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D40" data-uri="chapter09.xhtml#P7000497027000000000000000045D40" class="pcalibre calibre3 pcalibre1">Shared libraries, from first va_end and vm_start</p></li>
<li id="P7000497027000000000000000045D41" data-uri="chapter09.xhtml#P7000497027000000000000000045D41" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D42" data-uri="chapter09.xhtml#P7000497027000000000000000045D42" class="pcalibre calibre3 pcalibre1">Data, from second va_end and vm_start</p></li>
<li id="P7000497027000000000000000045D43" data-uri="chapter09.xhtml#P7000497027000000000000000045D43" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D44" data-uri="chapter09.xhtml#P7000497027000000000000000045D44" class="pcalibre calibre3 pcalibre1">Test, from third va_end and vm_start.</p></li>
</ul>
</li></ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045D45" data-uri="chapter09.xhtml#P7000497027000000000000000045D45">run the process (e.g., the PID, pointer to the user stack, name of the executable object file, and program counter).</p>
<p id="P7000497027000000000000000045D46" data-uri="chapter09.xhtml#P7000497027000000000000000045D46" class="pcalibre1 pcalibre calibre2">One of the entries in the task structure points to an <code id="P7000497027000000000000000045D47" data-uri="chapter09.xhtml#P7000497027000000000000000045D47" class="pcalibre1 calibre8 pcalibre">mm_struct</code> that characterizes the current state of the virtual memory. The two fields of interest to us are <code id="P7000497027000000000000000045D48" data-uri="chapter09.xhtml#P7000497027000000000000000045D48" class="pcalibre1 calibre8 pcalibre">pgd</code>, which points to the base of the level 1 table (the page global directory), and <code id="P7000497027000000000000000045D49" data-uri="chapter09.xhtml#P7000497027000000000000000045D49" class="pcalibre1 calibre8 pcalibre">mmap</code>, which points to a list of <code id="P7000497027000000000000000045D4A" data-uri="chapter09.xhtml#P7000497027000000000000000045D4A" class="pcalibre1 calibre8 pcalibre">vm_area_structs</code> (area structs), each of which characterizes an area of the current virtual address space. When the kernel runs this process, it stores <code id="P7000497027000000000000000045D4B" data-uri="chapter09.xhtml#P7000497027000000000000000045D4B" class="pcalibre1 calibre8 pcalibre">pgd</code> in the CR3 control register.</p>
<p id="P7000497027000000000000000045D4C" data-uri="chapter09.xhtml#P7000497027000000000000000045D4C" class="pcalibre1 pcalibre calibre2">For our purposes, the area struct for a particular area contains the following fields:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000045D4D" data-uri="chapter09.xhtml#P7000497027000000000000000045D4D">
<li id="P7000497027000000000000000045D4E" data-uri="chapter09.xhtml#P7000497027000000000000000045D4E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D4F" data-uri="chapter09.xhtml#P7000497027000000000000000045D4F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><code id="P7000497027000000000000000045D50" data-uri="chapter09.xhtml#P7000497027000000000000000045D50" class="pcalibre1 calibre8 pcalibre">fvm_start</code>. </span>Points to the beginning of the area.</p></li>
<li id="P7000497027000000000000000045D51" data-uri="chapter09.xhtml#P7000497027000000000000000045D51" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D52" data-uri="chapter09.xhtml#P7000497027000000000000000045D52" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><code id="P7000497027000000000000000045D53" data-uri="chapter09.xhtml#P7000497027000000000000000045D53" class="pcalibre1 calibre8 pcalibre">vm_end</code>. </span>Points to the end of the area.</p></li>
<li id="P7000497027000000000000000045D54" data-uri="chapter09.xhtml#P7000497027000000000000000045D54" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D55" data-uri="chapter09.xhtml#P7000497027000000000000000045D55" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><code id="P7000497027000000000000000045D56" data-uri="chapter09.xhtml#P7000497027000000000000000045D56" class="pcalibre1 calibre8 pcalibre">vm_prot</code>. </span>Describes the read/write permissions for all of the pages contained in the area.</p></li>
<li id="P7000497027000000000000000045D57" data-uri="chapter09.xhtml#P7000497027000000000000000045D57" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D58" data-uri="chapter09.xhtml#P7000497027000000000000000045D58" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><code id="P7000497027000000000000000045D59" data-uri="chapter09.xhtml#P7000497027000000000000000045D59" class="pcalibre1 calibre8 pcalibre">vm_flags</code>. </span>Describes (among other things) whether the pages in the area are shared with other processes or private to this process.</p></li>
<li id="P7000497027000000000000000045D5A" data-uri="chapter09.xhtml#P7000497027000000000000000045D5A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D5B" data-uri="chapter09.xhtml#P7000497027000000000000000045D5B" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><code id="P7000497027000000000000000045D5C" data-uri="chapter09.xhtml#P7000497027000000000000000045D5C" class="pcalibre1 calibre8 pcalibre">vm_next</code>. </span>Points to the next area struct in the list.</p></li>
</ul>
<figure id="P70004970270000000000000000072A1" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P70004970270000000000000000072A1">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000072A2" title="832" data-uri="chapter09.xhtml#P70004970270000000000000000072A2" epub:type="pagebreak"></span>
<img alt="A diagram illustrates Linux page fault handling." id="P7000497027000000000000000045D5D" data-uri="P700049702700000000000000000B797" src="../images/p832-1.png" class="calibre287 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045D5E" data-uri="chapter09.xhtml#P7000497027000000000000000045D5E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045D5F" data-uri="chapter09.xhtml#P7000497027000000000000000045D5F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.28 </span>Linux page fault handling.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000260AC" data-uri="chapter09.xhtml#P70004970270000000000000000260AC">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045D60" data-uri="chapter09.xhtml#P7000497027000000000000000045D60" class="pcalibre1 pcalibre calibre2">A diagram shows stacks for vm_area_struct and process virtual memory. The three tables in vm_area_struct have five registers: vm_end, vm_start, r/o (for first and third) or r/w (second), gap, and vm_next. Steps with the process virtual memory are listed below.</p>
<ol id="P7000497027000000000000000045D61" data-uri="chapter09.xhtml#P7000497027000000000000000045D61" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000045D62" data-uri="chapter09.xhtml#P7000497027000000000000000045D62" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D63" data-uri="chapter09.xhtml#P7000497027000000000000000045D63" class="pcalibre calibre3 pcalibre1">Segmentation fault: accessing a nonexistent page (gap between shared libraries and data registers)</p></li>
<li id="P7000497027000000000000000045D64" data-uri="chapter09.xhtml#P7000497027000000000000000045D64" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D65" data-uri="chapter09.xhtml#P7000497027000000000000000045D65" class="pcalibre calibre3 pcalibre1">Protection exception (e.g., violating permission by writing to a read-only page) (Code register)</p></li>
<li id="P7000497027000000000000000045D66" data-uri="chapter09.xhtml#P7000497027000000000000000045D66" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D67" data-uri="chapter09.xhtml#P7000497027000000000000000045D67" class="pcalibre calibre3 pcalibre1">Normal page fault (Data register)</p></li>
</ol>
</details>
</figcaption>
</figure>
</section>
<section id="P70004970270000000000000000072A6" data-uri="chapter09.xhtml#P70004970270000000000000000072A6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045D68" data-uri="chapter09.xhtml#P7000497027000000000000000045D68" epub:type="title">Linux Page Fault Exception Handling</h1></header>
<p id="P7000497027000000000000000045D69" data-uri="chapter09.xhtml#P7000497027000000000000000045D69" class="pcalibre1 pcalibre calibre2">Suppose the MMU triggers a page fault while trying to translate some virtual address <i class="calibre5 pcalibre pcalibre1">A.</i> The exception results in a transfer of control to the kernel's page fault handler, which then performs the following steps:</p>
<ol id="P7000497027000000000000000045D6A" data-uri="chapter09.xhtml#P7000497027000000000000000045D6A" class="calibre72 pcalibre pcalibre1">
<li id="P7000497027000000000000000045D6B" data-uri="chapter09.xhtml#P7000497027000000000000000045D6B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D6C" data-uri="chapter09.xhtml#P7000497027000000000000000045D6C" class="pcalibre calibre3 pcalibre1">Is virtual address <var class="calibre5 pcalibre pcalibre1">A</var> legal? In other words, does <var class="calibre5 pcalibre pcalibre1">A</var> lie within an area defined by some area struct? To answer this question, the fault handler searches the list of area structs, comparing <var class="calibre5 pcalibre pcalibre1">A</var> with the <code id="P7000497027000000000000000045D6D" data-uri="chapter09.xhtml#P7000497027000000000000000045D6D" class="pcalibre1 calibre8 pcalibre">vm_start</code> and <code id="P7000497027000000000000000045D6E" data-uri="chapter09.xhtml#P7000497027000000000000000045D6E" class="pcalibre1 calibre8 pcalibre">vm_end</code> in each area struct. If the instruction is not legal, then the fault handler triggers a segmentation fault, which terminates the process. This situation is labeled "1" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000072A1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.28</span></a>.</p>
<p id="P7000497027000000000000000045D6F" data-uri="chapter09.xhtml#P7000497027000000000000000045D6F" class="pcalibre calibre3 pcalibre1">Because a process can create an arbitrary number of new virtual memory areas (using the <code id="P7000497027000000000000000045D70" data-uri="chapter09.xhtml#P7000497027000000000000000045D70" class="pcalibre1 calibre8 pcalibre">mmap</code> function described in the next section), a sequential search of the list of area structs might be very costly. So in practice, Linux superimposes a tree on the list, using some fields that we have not shown, and performs the search on this tree.</p></li>
<li id="P7000497027000000000000000045D71" data-uri="chapter09.xhtml#P7000497027000000000000000045D71" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D72" data-uri="chapter09.xhtml#P7000497027000000000000000045D72" class="pcalibre calibre3 pcalibre1">Is the attempted memory access legal? In other words, does the process have permission to read, write, or execute the pages in this area? For example, was the page fault the result of a store instruction trying to write to a read-only page in the code segment? Is the page fault the result of a process running in user mode that is attempting to read a word from kernel virtual memory? If the attempted access is not legal, then the fault handler triggers a protection exception, which terminates the process. This situation is labeled "2" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000072A1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.28</span></a>.</p></li>
<li id="P7000497027000000000000000045D73" data-uri="chapter09.xhtml#P7000497027000000000000000045D73" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045D74" data-uri="chapter09.xhtml#P7000497027000000000000000045D74" class="pcalibre calibre3 pcalibre1">At this point, the kernel knows that the page fault resulted from a legal operation on a legal virtual address. It handles the fault by selecting a victim page, swapping out the victim page if it is dirty, swapping in the new page, <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000072B4" title="833" data-uri="chapter09.xhtml#P70004970270000000000000000072B4" epub:type="pagebreak"></span>and updating the page table. When the page fault handler returns, the CPU restarts the faulting instruction, which sends <var class="calibre5 pcalibre pcalibre1">A</var> to the MMU again. This time, the MMU translates <var class="calibre5 pcalibre pcalibre1">A</var> normally, without generating a page fault.</p></li>
</ol>
</section>
</section>
</section></body></html>
