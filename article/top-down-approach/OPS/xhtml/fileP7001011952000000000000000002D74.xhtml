<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>8.2 Principles of Cryptography</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000002D74" class="level1"><header><h1 class="title" id="P700101195200000000000000000B603" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B603" epub:type="title"><span class="number">8.2</span> Principles of Cryptography</h1></header>
<p id="P700101195200000000000000000B604" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B604">Although cryptography has a long history dating back at least as far as Julius Caesar, modern cryptographic techniques, including many of those used in the Internet, are based on advances made in the past 30 years. Kahn’s book, <i>The Codebreakers</i> <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039CD" data-foobar="7">[Kahn 1967]</a>, and Singh’s book, <i>The Code Book: The Science of Secrecy from Ancient Egypt to Quantum Cryptography</i> <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C0D" data-foobar="7">[Singh 1999]</a>, provide a fascinating look at the<span class="pagebreak" title="597" id="P7001011952000000000000000002D77" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D77" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002D78" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D78">
<img alt="Cryptographic components." height="316" width="666" aria-describedby="P7001011952000000000000000002D7C" id="P700101195200000000000000000B605" data-uri="P700101195200000000000000000560D" src="../images/4055108002.png"></img>
<figcaption id="P700101195200000000000000000B606" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B606"><header><h1 class="title" id="P700101195200000000000000000B607" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B607" epub:type="title"><span class="label">Figure </span> <span class="number">8.2</span> Cryptographic components</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002D7C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D7C" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108002.xhtml#la_4055108002"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B609" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B609">long history of cryptography. A complete discussion of cryptography itself requires a complete book <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039DA" data-foobar="7">[Kaufman 1995</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BF3" data-foobar="7">Schneier 1995]</a> and so we only touch on the essential aspects of cryptography, particularly as they are practiced on the Internet. We also note that while our focus in this section will be on the use of cryptography for confidentiality, we’ll see shortly that cryptographic techniques are inextricably woven into authentication, message integrity, nonrepudiation, and more.</p>
<p id="P700101195200000000000000000B60A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60A">Cryptographic techniques allow a sender to disguise data so that an intruder can gain no information from the intercepted data. The receiver, of course, must be able to recover the original data from the disguised data. <a class="xref" href="#P7001011952000000000000000002D78" data-foobar="1"><span class="label">Figure</span> <span class="number">8.2</span></a> illustrates some of the important terminology.</p>
<p id="P700101195200000000000000000B60B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60B">Suppose now that Alice wants to send a message to Bob. Alice’s message in its original form (for example, “<code id="P700101195200000000000000000B60C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60C">Bob, I love you. Alice</code>”) is known as ­<span class="keyword" id="P7001011952000000000000000002D82" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D82"><b>plaintext</b></span>, or <span class="keyword" id="P7001011952000000000000000002D83" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D83"><b>cleartext</b></span>. Alice encrypts her plaintext message using an <span class="keyword" id="P7001011952000000000000000002D84" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D84"><b>encryption algorithm</b></span> so that the encrypted message, known as <span class="keyword" id="P7001011952000000000000000002D85" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D85"><b>ciphertext</b></span>, looks unintelligible to any intruder. Interestingly, in many modern cryptographic systems, including those used in the Internet, the encryption technique itself is <i>known</i>—published, standardized, and available to everyone (for example, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B03" data-foobar="7">[RFC 1321</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B7B" data-foobar="7">RFC 3447</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B35" data-foobar="7">RFC 2420</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A79" data-foobar="7">NIST 2001]</a>), even a potential intruder! Clearly, if everyone knows the method for encoding data, then there must be some secret information that prevents an intruder from decrypting the transmitted data. This is where keys come in.</p>
<p id="P700101195200000000000000000B60D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60D">In <a class="xref" href="#P7001011952000000000000000002D78" data-foobar="1"><span class="label">Figure</span> <span class="number">8.2</span></a>, Alice provides a <span class="keyword" id="P7001011952000000000000000002D87" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D87"><b>key</b></span>, <i>K<sub>A</sub></i>, a string of numbers or characters, as input to the encryption algorithm. The encryption algorithm takes the key and the plaintext message, <i>m</i>, as input and produces ciphertext as output. The notation <i>K<sub>A</sub></i>(<i>m</i>) refers to the ciphertext form (encrypted using the key <i>K<sub>A</sub></i>) of the plaintext message, <i>m</i>. The actual encryption algorithm that uses key <i>K<sub>A</sub></i> will be evident from the context. Similarly, Bob will provide a key, <i>K<sub>B</sub></i>, to the <span class="keyword" id="P7001011952000000000000000002D88" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D88"><b>decryption algorithm</b></span> <span class="pagebreak" title="598" id="P7001011952000000000000000002D89" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D89" epub:type="pagebreak" role="doc-pagebreak"></span>that takes the ciphertext and Bob’s key as input and produces the original plaintext as output. That is, if Bob receives an encrypted message <i>K<sub>A</sub></i>(<i>m</i>), he decrypts it by computing <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="127" altimg-height="17" altimg="../images/ch08math01.png"><m:mrow><m:msub><m:mi>K</m:mi><m:mi>B</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:msub><m:mi>K</m:mi><m:mi>A</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>m</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> In <span class="keyword" id="P7001011952000000000000000002D8A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D8A"><b>symmetric key systems</b></span>, Alice’s and Bob’s keys are identical and are secret. In <span class="keyword" id="P7001011952000000000000000002D8B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D8B"><b>public key systems</b></span>, a pair of keys is used. One of the keys is known to both Bob and Alice (indeed, it is known to the whole world). The other key is known only by either Bob or Alice (but not both). In the following two subsections, we consider symmetric key and public key systems in more detail.</p>
<section id="P7001011952000000000000000002D8C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D8C" class="level2"><header><h1 class="title" id="P700101195200000000000000000B60E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60E" epub:type="title"><span class="number">8.2.1</span> Symmetric Key Cryptography</h1></header>
<p id="P700101195200000000000000000B60F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B60F">All cryptographic algorithms involve substituting one thing for another, for example, taking a piece of plaintext and then computing and substituting the appropriate ciphertext to create the encrypted message. Before studying a modern key-based cryptographic system, let us first get our feet wet by studying a very old, very simple symmetric key algorithm attributed to Julius Caesar, known as the <span class="keyword" id="P7001011952000000000000000002D8F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D8F"><b>Caesar cipher</b></span> (a cipher is a method for encrypting data).</p>
<p id="P700101195200000000000000000B610" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B610">For English text, the Caesar cipher would work by taking each letter in the plaintext message and substituting the letter that is <i>k</i> letters later (allowing wraparound; that is, having the letter <i>z</i> followed by the letter <i>a</i>) in the alphabet. For example if <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="49" altimg-height="13" altimg="../images/ch08math02.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>3</m:mn></m:mrow></m:math></span>, then the letter <i>a</i> in plaintext becomes <i>d</i> in ciphertext; <i>b</i> in plaintext becomes <i>e</i> in ciphertext, and so on. Here, the value of <i>k</i> serves as the key. As an example, the plaintext message “<code id="P700101195200000000000000000B611" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B611">bob, i love you. Alice</code>” becomes “<code id="P700101195200000000000000000B612" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B612">ere, l oryh brx. dolfh</code>” in ciphertext. While the ciphertext does indeed look like gibberish, it wouldn’t take long to break the code if you knew that the Caesar cipher was being used, as there are only 25 possible key values.</p>
<p id="P700101195200000000000000000B613" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B613">An improvement on the Caesar cipher is the <span class="keyword" id="P7001011952000000000000000002D94" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D94"><b>monoalphabetic cipher</b></span>, which also substitutes one letter of the alphabet with another letter of the alphabet. ­However, rather than substituting according to a regular pattern (for example, substitution with an offset of <i>k</i> for all letters), any letter can be substituted for any other letter, as long as each letter has a unique substitute letter, and vice versa. The substitution rule in <a class="xref" href="#P7001011952000000000000000002D98" data-foobar="1"><span class="label">Figure</span> <span class="number">8.3</span></a> shows one possible rule for encoding plaintext.</p>
<p id="P700101195200000000000000000B614" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B614">The plaintext message “<code id="P700101195200000000000000000B615" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B615">bob, i love you. Alice</code>” becomes <code id="P700101195200000000000000000B616" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B616">“nkn, s gktc wky. Mgsbc.”</code> Thus, as in the case of the Caesar cipher, this looks like gibberish. A monoalphabetic cipher would also appear to be better than the Caesar cipher in that there are 26! (on the order of 10<sup>26</sup>) possible pairings of letters rather than 25 possible pairings. A brute-force approach of trying all 10<sup>26</sup> possible pairings</p>
<figure id="P7001011952000000000000000002D98" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D98">
<img alt="A monoalphabetic cipher." height="70" width="671" aria-describedby="P7001011952000000000000000002D9C" id="P700101195200000000000000000B617" data-uri="P700101195200000000000000000560E" src="../images/4055108003.png"></img>
<figcaption id="P700101195200000000000000000B618" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B618"><header><h1 class="title" id="P700101195200000000000000000B619" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B619" epub:type="title"><span class="label">Figure </span> <span class="number">8.3</span> A monoalphabetic cipher</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002D9C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002D9C" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108003.xhtml#la_4055108003"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B61D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B61D"><span class="pagebreak" title="599" id="P7001011952000000000000000002DA1" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DA1" epub:type="pagebreak" role="doc-pagebreak"></span>would require far too much work to be a feasible way of breaking the encryption algorithm and decoding the message. However, by statistical analysis of the plaintext language, for example, knowing that the letters <i>e</i> and <i>t</i> are the most frequently occurring letters in typical English text (accounting for 13 percent and 9 percent of letter occurrences), and knowing that particular two-and three-letter occurrences of letters appear quite often together (for example, “in,” “it,” “the,” “ion,” “ing,” and so forth) make it relatively easy to break this code. If the intruder has some knowledge about the possible contents of the message, then it is even easier to break the code. For example, if Trudy the intruder is Bob’s wife and suspects Bob of having an affair with Alice, then she might suspect that the names “bob” and “alice” appear in the text. If Trudy knew for certain that those two names appeared in the ciphertext and had a copy of the example ciphertext message above, then she could immediately determine seven of the 26 letter pairings, requiring 10<sup>9</sup> fewer possibilities to be checked by a brute-force method. Indeed, if Trudy suspected Bob of having an affair, she might well expect to find some other choice words in the message as well.</p>
<p id="P700101195200000000000000000B61E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B61E">When considering how easy it might be for Trudy to break Bob and Alice’s encryption scheme, one can distinguish three different scenarios, depending on what information the intruder has.</p>
<ul id="P700101195200000000000000000B61F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B61F">
<li id="P700101195200000000000000000B620" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B620"><p id="P700101195200000000000000000B621" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B621"><span class="leadin">Ciphertext-only attack.</span> In some cases, the intruder may have access only to the intercepted ciphertext, with no certain information about the contents of the plaintext message. We have seen how statistical analysis can help in a <span class="keyword" id="P7001011952000000000000000002DA6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DA6"><b>ciphertext-only attack</b></span> on an encryption scheme.</p></li>
<li id="P700101195200000000000000000B622" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B622"><p id="P700101195200000000000000000B623" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B623"><span class="leadin">Known-plaintext attack.</span> We saw above that if Trudy somehow knew for sure that “bob” and “alice” appeared in the ciphertext message, then she could have determined the (plaintext, ciphertext) pairings for the letters <i>a, l, i, c, e, b</i>, and <i>o</i>. Trudy might also have been fortunate enough to have recorded all of the ciphertext transmissions and then found Bob’s own decrypted version of one of the transmissions scribbled on a piece of paper. When an intruder knows some of the (plaintext, ciphertext) pairings, we refer to this as a <span class="keyword" id="P7001011952000000000000000002DA9" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DA9"><b>known-plaintext attack</b></span> on the encryption scheme.</p></li>
<li id="P700101195200000000000000000B624" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B624"><p id="P700101195200000000000000000B625" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B625"><span class="leadin">Chosen-plaintext attack.</span> In a <span class="keyword" id="P7001011952000000000000000002DAC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DAC"><b>chosen-plaintext attack</b></span>, the intruder is able to choose the plaintext message and obtain its corresponding ciphertext form. For the simple encryption algorithms we’ve seen so far, if Trudy could get Alice to send the message, “<code id="P700101195200000000000000000B626" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B626">The quick brown fox jumps over the lazy dog,</code>” she could completely break the encryption scheme. We’ll see shortly that for more sophisticated encryption techniques, a chosen-plaintext attack does not necessarily mean that the encryption technique can be broken.</p></li>
</ul>
<p id="P700101195200000000000000000B627" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B627">Five hundred years ago, techniques improving on monoalphabetic encryption, known as <span class="keyword" id="P7001011952000000000000000002DAF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DAF"><b>polyalphabetic encryption</b></span>, were invented. The idea behind polyalphabetic encryption is to use multiple monoalphabetic ciphers, with a specific<span class="pagebreak" title="600" id="P7001011952000000000000000002DB0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DB0" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002DB1" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DB1">
<img alt="A polyalphabetic cipher using two Caesar ciphers." height="95" width="671" aria-describedby="P7001011952000000000000000002DB5" id="P700101195200000000000000000B628" data-uri="P700101195200000000000000000560F" src="../images/4055108004.png"></img>
<figcaption id="P700101195200000000000000000B629" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B629"><header><h1 class="title" id="P700101195200000000000000000B62A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B62A" epub:type="title"><span class="label">Figure </span> <span class="number">8.4</span> A polyalphabetic cipher using two Caesar ciphers</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002DB5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DB5" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108004.xhtml#la_4055108004"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B62E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B62E">monoalphabetic cipher to encode a letter in a specific position in the plaintext message. Thus, the same letter, appearing in different positions in the plaintext message, might be encoded differently. An example of a polyalphabetic encryption scheme is shown in <a class="xref" href="#P7001011952000000000000000002DB1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.4</span></a>. It has two Caesar ciphers (with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="48" altimg-height="13" altimg="../images/ch08math03.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>5</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math04.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>19</m:mn></m:mrow></m:math></span>), shown as rows. We might choose to use these two Caesar ciphers, C<sub>1</sub> and C<sub>2</sub>, in the repeating pattern C<sub>1</sub>, C<sub>2</sub>, C<sub>2</sub>, C<sub>1</sub>, C<sub>2</sub>. That is, the first letter of plaintext is to be encoded using C<sub>1</sub>, the second and third using C<sub>2</sub>, the fourth using C<sub>1</sub>, and the fifth using C<sub>2</sub>. The pattern then repeats, with the sixth letter being encoded using C<sub>1</sub>, the seventh with C<sub>2</sub>, and so on. The plaintext message “<code id="P700101195200000000000000000B62F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B62F">bob, i love you.</code>” is thus encrypted “<code id="P700101195200000000000000000B630" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B630">ghu, n etox dhz.</code>” Note that the first <i>b</i> in the plaintext message is encrypted using C<sub>1</sub>, while the second <i>b</i> is encrypted using C<sub>2</sub>. In this example, the encryption and decryption “key” is the knowledge of the two Caesar keys <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="128" altimg-height="17" altimg="../images/ch08math05.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>5</m:mn><m:mo>,</m:mo><m:mtext> </m:mtext><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>19</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span> and the pattern C<sub>1</sub>, C<sub>2</sub>, C<sub>2</sub>, C<sub>1</sub>, C<sub>2</sub>.</p>
<section id="P7001011952000000000000000002DBC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DBC" class="level3"><header><h1 class="title" id="P700101195200000000000000000B631" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B631" epub:type="title">Block Ciphers</h1></header>
<p id="P700101195200000000000000000B632" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B632">Let us now move forward to modern times and examine how symmetric key encryption is done today. There are two broad classes of symmetric encryption techniques: <span class="keyword" id="P7001011952000000000000000002DBF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DBF"><b>stream ciphers</b></span> and <span class="keyword" id="P7001011952000000000000000002DC0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DC0"><b>block ciphers</b></span>. We’ll briefly examine stream ciphers in ­<a class="xref" href="fileP700101195200000000000000000305F.xhtml#P700101195200000000000000000305F" data-foobar="7"><span class="label">Section</span> <span class="number">8.7</span></a> when we investigate security for wireless LANs. In this section, we focus on block ciphers, which are used in many secure Internet protocols, including PGP (for secure e-mail), SSL (for securing TCP connections), and IPsec (for securing the network-layer transport).</p>
<p id="P700101195200000000000000000B633" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B633">In a block cipher, the message to be encrypted is processed in blocks of <i>k</i> bits. For example, if <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math06.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>64</m:mn></m:mrow></m:math></span>, then the message is broken into 64-bit blocks, and each block is encrypted independently. To encode a block, the cipher uses a one-to-one mapping to map the <i>k</i>-bit block of cleartext to a <i>k</i>-bit block of ciphertext. Let’s look at an example. Suppose that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="48" altimg-height="13" altimg="../images/ch08math07.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>3</m:mn></m:mrow></m:math></span>, so that the block cipher maps 3-bit inputs ­(cleartext) to 3-bit outputs (ciphertext). One possible mapping is given in <a class="xref" href="#P7001011952000000000000000002DC4" data-foobar="1"><span class="label">Table</span> <span class="number">8.1</span></a>. Notice that this is a one-to-one mapping; that is, there is a different output for each input. This block cipher breaks the message up into 3-bit blocks and encrypts each block according to the above mapping. You should verify that the message 010110001111 gets encrypted into 101000111001.</p>
<p id="P700101195200000000000000000B634" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B634">Continuing with this 3-bit block example, note that the mapping in <a class="xref" href="#P7001011952000000000000000002DC4" data-foobar="1"><span class="label">Table</span> <span class="number">8.1</span></a> is just one mapping of many possible mappings. How many possible mappings are<span class="pagebreak" title="601" id="P7001011952000000000000000002DC3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DC3" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002DC4" class="table" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DC4">
<figcaption id="P700101195200000000000000000B635" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B635"><header><h1 class="title" id="P700101195200000000000000000B636" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B636" epub:type="title"><span class="label">Table </span> <span class="number">8.1</span> A specific 3-bit block cipher</h1></header></figcaption>
<table id="P700101195200000000000000000B637" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B637">
<thead>
<tr>
<th id="P700101195200000000000000000B638" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B638">input</th>
<th id="P700101195200000000000000000B639" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B639">output</th>
<th id="P700101195200000000000000000B63A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63A">input</th>
<th id="P700101195200000000000000000B63B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63B">output</th>
</tr>
</thead>
<tbody>
<tr>
<td id="P700101195200000000000000000B63C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63C">000</td>
<td id="P700101195200000000000000000B63D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63D">110</td>
<td id="P700101195200000000000000000B63E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63E">100</td>
<td id="P700101195200000000000000000B63F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B63F">011</td>
</tr>
<tr>
<td id="P700101195200000000000000000B640" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B640">001</td>
<td id="P700101195200000000000000000B641" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B641">111</td>
<td id="P700101195200000000000000000B642" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B642">101</td>
<td id="P700101195200000000000000000B643" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B643">010</td>
</tr>
<tr>
<td id="P700101195200000000000000000B644" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B644">010</td>
<td id="P700101195200000000000000000B645" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B645">101</td>
<td id="P700101195200000000000000000B646" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B646">110</td>
<td id="P700101195200000000000000000B647" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B647">000</td>
</tr>
<tr>
<td id="P700101195200000000000000000B648" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B648">011</td>
<td id="P700101195200000000000000000B649" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B649">100</td>
<td id="P700101195200000000000000000B64A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64A">111</td>
<td id="P700101195200000000000000000B64B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64B">001</td>
</tr>
</tbody>
</table>
</figure>
<p class="continued" id="P700101195200000000000000000B64C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64C">there? To answer this question, observe that a mapping is nothing more than a permutation of all the possible inputs. There are <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="65" altimg-height="21" altimg="../images/ch08math08.png"><m:mrow><m:msup><m:mn>2</m:mn><m:mn>3</m:mn></m:msup><m:mrow><m:mo>(</m:mo><m:mrow><m:mo>=</m:mo><m:mn>8</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span> possible inputs (listed under the input columns). These eight inputs can be permuted in <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="99" altimg-height="16" altimg="../images/ch08math09.png"><m:mrow><m:mn>8</m:mn><m:mo>!</m:mo><m:mo>=</m:mo><m:mn>40</m:mn><m:mo>,</m:mo><m:mn>320</m:mn></m:mrow></m:math></span> different ways. Since each of these permutations specifies a mapping, there are 40,320 possible mappings. We can view each of these mappings as a key—if Alice and Bob both know the mapping (the key), they can encrypt and decrypt the messages sent between them.</p>
<p id="P700101195200000000000000000B64D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64D">The brute-force attack for this cipher is to try to decrypt ciphtertext by using all mappings. With only 40,320 mappings (when <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="49" altimg-height="13" altimg="../images/ch08math10.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>3</m:mn></m:mrow></m:math></span>), this can quickly be accomplished on a desktop PC. To thwart brute-force attacks, block ciphers typically use much larger blocks, consisting of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math11.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>64</m:mn></m:mrow></m:math></span> bits or even larger. Note that the number of possible mappings for a general <i>k</i>-block cipher is 2<sup><i>k</i></sup>!, which is astronomical for even moderate values of <i>k</i> (such as <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math12.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>64</m:mn></m:mrow></m:math></span>).</p>
<p id="P700101195200000000000000000B64E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64E">Although full-table block ciphers, as just described, with moderate values of <i>k</i> can produce robust symmetric key encryption schemes, they are unfortunately difficult to implement. For <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math13.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>64</m:mn></m:mrow></m:math></span> and for a given mapping, Alice and Bob would need to maintain a table with 2<sup>64</sup> input values, which is an infeasible task. Moreover, if Alice and Bob were to change keys, they would have to each regenerate the table. Thus, a full-table block cipher, providing predetermined mappings between all inputs and outputs (as in the example above), is simply out of the question.</p>
<p id="P700101195200000000000000000B64F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B64F">Instead, block ciphers typically use functions that simulate randomly permuted tables. An example (adapted from <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039DA" data-foobar="7">[Kaufman 1995]</a>) of such a function for <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="14" altimg="../images/ch08math14.png"><m:mrow><m:mi>k</m:mi><m:mo>=</m:mo><m:mn>64</m:mn></m:mrow></m:math></span> bits is shown in <a class="xref" href="#P7001011952000000000000000002DE1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.5</span></a>. The function first breaks a 64-bit block into 8 chunks, with each chunk consisting of 8 bits. Each 8-bit chunk is processed by an 8-bit to 8-bit table, which is of manageable size. For example, the first chunk is processed by the table denoted by T<sub>1</sub>. Next, the 8 output chunks are reassembled into a 64-bit block. The positions of the 64 bits in the block are then scrambled (permuted) to produce a 64-bit output. This output is fed back to the 64-bit input, where another cycle begins. After <i>n</i> such cycles, the function provides a 64-bit block of ciphertext. The purpose of the rounds is to make each input bit affect most (if not all) of the final output bits. (If only one round were used, a given input bit would affect only 8 of the 64 output bits.) The key for this block cipher algorithm would be the eight permutation tables (assuming the scramble function is publicly known).<span class="pagebreak" title="602" id="P7001011952000000000000000002DE0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DE0" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002DE1" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DE1">
<img alt="Example of a block cipher." height="376" width="670" aria-describedby="P7001011952000000000000000002DE5" id="P700101195200000000000000000B650" data-uri="P7001011952000000000000000005610" src="../images/4055108005.png"></img>
<figcaption id="P700101195200000000000000000B651" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B651"><header><h1 class="title" id="P700101195200000000000000000B652" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B652" epub:type="title"><span class="label">Figure </span> <span class="number">8.5</span> An example of a block cipher</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002DE5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DE5" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108005.xhtml#la_4055108005"><span class="label">Description</span></a></div>
<p id="P700101195200000000000000000B654" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B654">Today there are a number of popular block ciphers, including DES (standing for Data Encryption Standard), 3DES, and AES (standing for Advanced Encryption Standard). Each of these standards uses functions, rather than predetermined tables, along the lines of <a class="xref" href="#P7001011952000000000000000002DE1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.5</span></a> (albeit more complicated and specific to each cipher). Each of these algorithms also uses a string of bits for a key. For example, DES uses 64-bit blocks with a 56-bit key. AES uses 128-bit blocks and can operate with keys that are 128, 192, and 256 bits long. An algorithm’s key determines the specific “mini-table” mappings and permutations within the algorithm’s internals. The brute-force attack for each of these ciphers is to cycle through all the keys, applying the decryption algorithm with each key. Observe that with a key length of <i>n</i>, there are 2<sup><i>n</i></sup> possible keys. NIST <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A79" data-foobar="7">[NIST 2001]</a> estimates that a machine that could crack 56-bit DES in one second (that is, try all 2<sup>56</sup> keys in one second) would take approximately 149 trillion years to crack a 128-bit AES key.</p>
</section>
<section id="P7001011952000000000000000002DE8" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DE8" class="level3"><header><h1 class="title" id="P700101195200000000000000000B655" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B655" epub:type="title">Cipher-Block Chaining</h1></header>
<p id="P700101195200000000000000000B656" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B656">In computer networking applications, we typically need to encrypt long messages (or long streams of data). If we apply a block cipher as described by simply chopping up the message into <i>k</i>-bit blocks and independently encrypting each block, a subtle but important problem occurs. To see this, observe that two or more of the cleartext blocks can be identical. For example, the cleartext in two or more blocks could be “HTTP/1.1”. For these identical blocks, a block cipher would, of course, produce the same ciphertext. An attacker could potentially guess the cleartext when it sees identical ciphertext blocks and may even be able to decrypt the entire message by <span class="pagebreak" title="603" id="P7001011952000000000000000002DEB" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DEB" epub:type="pagebreak" role="doc-pagebreak"></span>identifying identical ciphtertext blocks and using knowledge about the underlying protocol structure <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039DA" data-foobar="7">[Kaufman 1995]</a>.</p>
<p id="P700101195200000000000000000B657" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B657">To address this problem, we can mix some randomness into the ciphertext so that identical plaintext blocks produce different ciphertext blocks. To explain this idea, let <i>m</i>(<i>i</i>) denote the <i>i</i>th plaintext block, <i>c</i>(<i>i</i>) denote the <i>i</i>th ciphertext block, and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="44" altimg-height="16" altimg="../images/ch08math15.png"><m:mrow><m:mi>a</m:mi><m:mo>⊕</m:mo><m:mi>b</m:mi></m:mrow></m:math></span> denote the exclusive-or (XOR) of two bit strings, <i>a</i> and <i>b</i>. (Recall that the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="156" altimg-height="14" altimg="../images/ch08math16.png"><m:mrow><m:mn>0</m:mn><m:mo>⊕</m:mo><m:mn>0</m:mn><m:mo>=</m:mo><m:mn>1</m:mn><m:mo>⊕</m:mo><m:mn>1</m:mn><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="156" altimg-height="14" altimg="../images/ch08math17.png"><m:mrow><m:mn>0</m:mn><m:mo>⊕</m:mo><m:mn>1</m:mn><m:mo>=</m:mo><m:mn>1</m:mn><m:mo>⊕</m:mo><m:mn>0</m:mn><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow></m:math></span>, and the XOR of two bit strings is done on a bit-by-bit basis. So, for example, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="283" altimg-height="14" altimg="../images/ch08math18.png"><m:mrow><m:mn>10101010</m:mn><m:mo>⊕</m:mo><m:mn>11110000</m:mn><m:mo>=</m:mo><m:mn>01011010</m:mn></m:mrow></m:math></span>.) Also, denote the block-cipher encryption algorithm with key <i>S</i> as <i>K<sub>S</sub></i>. The basic idea is as follows. The sender creates a random <i>k</i>-bit number <i>r</i>(<i>i</i>) for the <i>i</i>th block and calculates <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="174" altimg-height="17" altimg="../images/ch08math19.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>r</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. Note that a new <i>k</i>-bit random number is chosen for each block. The sender then sends <i>c</i>(1), <i>r</i>(1), <i>c</i>(2), <i>r</i>(2), <i>c</i>(3), <i>r</i>(3), and so on. Since the receiver receives <i>c(i)</i> and <i>r(i)</i>, it can recover each block of the plaintext by computing <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="173" altimg-height="17" altimg="../images/ch08math20.png"><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>r</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. It is important to note that, although <i>r</i>(<i>i</i>) is sent in the clear and thus can be sniffed by Trudy, she cannot obtain the plaintext <i>m</i>(<i>i</i>), since she does not know the key <i>K<sub>S</sub></i>. Also note that if two plaintext blocks <i>m</i>(<i>i</i>) and <i>m</i>(<i>j</i>) are the same, the corresponding ciphertext blocks <i>c</i>(<i>i</i>) and <i>c</i>(<i>j</i>) will be different (as long as the random numbers <i>r</i>(<i>i</i>) and <i>r</i>(<i>j</i>) are different, which occurs with very high probability).</p>
<p id="P700101195200000000000000000B658" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B658">As an example, consider the 3-bit block cipher in <a class="xref" href="#P7001011952000000000000000002DC4" data-foobar="1"><span class="label">Table</span> <span class="number">8.1</span></a>. Suppose the plaintext is 010010010. If Alice encrypts this directly, without including the randomness, the resulting ciphertext becomes 101101101. If Trudy sniffs this ciphertext, because each of the three cipher blocks is the same, she can correctly surmise that each of the three plaintext blocks are the same. Now suppose instead Alice generates the random blocks <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="187" altimg-height="17" altimg="../images/ch08math21.png"><m:mrow><m:mi>r</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>001</m:mn><m:mo>,</m:mo><m:mtext> </m:mtext><m:mi>r</m:mi><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>111</m:mn></m:mrow></m:math></span>, and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="89" altimg-height="17" altimg="../images/ch08math22.png"><m:mrow><m:mi>r</m:mi><m:mrow><m:mo>(</m:mo><m:mn>3</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>100</m:mn></m:mrow></m:math></span> and uses the above technique to generate the ciphertext <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="195" altimg-height="17" altimg="../images/ch08math23.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>100</m:mn><m:mo>,</m:mo><m:mtext> </m:mtext><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>010</m:mn><m:mo>,</m:mo></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="90" altimg-height="17" altimg="../images/ch08math24.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>3</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>000</m:mn></m:mrow></m:math></span>. Note that the three ciphertext blocks are different even though the plaintext blocks are the same. Alice then sends <i>c</i>(1), <i>r</i>(1), <i>c</i>(2), and <i>r</i>(2). You should verify that Bob can obtain the original plaintext using the shared key <i>K<sub>S</sub></i>.</p>
<p id="P700101195200000000000000000B659" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B659">The astute reader will note that introducing randomness solves one problem but creates another: namely, Alice must transmit twice as many bits as before. Indeed, for each cipher bit, she must now also send a random bit, doubling the required bandwidth. In order to have our cake and eat it too, block ciphers typically use a technique called <span class="keyword" id="P7001011952000000000000000002DEF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DEF"><b>Cipher Block Chaining (CBC)</b></span>. The basic idea is to send only <i>one random value along with the very first message, and then have the sender and receiver use the computed coded blocks in place of the subsequent random number.</i> Specifically, CBC operates as follows:</p>
<ol id="P700101195200000000000000000B65A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65A">
<li id="P700101195200000000000000000B65B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65B"><p id="P700101195200000000000000000B65C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65C">Before encrypting the message (or the stream of data), the sender generates a random <i>k</i>-bit string, called the <span class="keyword" id="P7001011952000000000000000002DF3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DF3"><b>Initialization Vector (IV)</b></span>. Denote this initialization vector by <i>c</i>(0). The sender sends the IV to the receiver <i>in cleartext</i>.</p></li>
<li id="P700101195200000000000000000B65D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65D"><p id="P700101195200000000000000000B65E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65E">For the first block, the sender calculates <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="101" altimg-height="18" altimg="../images/ch08math25.png"><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:mrow><m:mo>,</m:mo></m:mrow></m:math></span> that is, calculates the exclusive-or of the first block of cleartext with the IV. It then runs the result <span class="pagebreak" title="604" id="P7001011952000000000000000002DF6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DF6" epub:type="pagebreak" role="doc-pagebreak"></span>through the block-cipher algorithm to get the corresponding ciphertext block; that is, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="184" altimg-height="17" altimg="../images/ch08math26.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. The sender sends the encrypted block <i>c</i>(1) to the receiver.</p></li>
<li id="P700101195200000000000000000B65F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B65F"><p id="P700101195200000000000000000B660" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B660">For the <i>i</i>th block, the sender generates the <i>i</i>th ciphertext block from <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="17" altimg="../images/ch08math27.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo></m:mrow></m:math></span> <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="153" altimg-height="17" altimg="../images/ch08math28.png"><m:mrow><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>.</p></li>
</ol>
<p id="P700101195200000000000000000B661" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B661">Let’s now examine some of the consequences of this approach. First, the receiver will still be able to recover the original message. Indeed, when the receiver receives <i>c</i>(<i>i</i>), it decrypts it with <i>K<sub>S</sub></i> to obtain <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="179" altimg-height="17" altimg="../images/ch08math29.png"><m:mrow><m:mi>s</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>; since the receiver also knows <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="65" altimg-height="17" altimg="../images/ch08math30.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>, it then obtains the cleartext block from <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="178" altimg-height="17" altimg="../images/ch08math31.png"><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>s</m:mi><m:mrow><m:mo>(</m:mo><m:mi>i</m:mi><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. Second, even if two cleartext blocks are identical, the corresponding ciphtertexts (almost always) will be different. Third, although the sender sends the IV in the clear, an intruder will still not be able to decrypt the ciphertext blocks, since the intruder does not know the secret key, <i>S</i>. Finally, the sender only sends one overhead block (the IV), thereby negligibly increasing the bandwidth usage for long messages (consisting of hundreds of blocks).</p>
<p id="P700101195200000000000000000B662" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B662">As an example, let’s now determine the ciphertext for the 3-bit block cipher in <a class="xref" href="#P7001011952000000000000000002DC4" data-foobar="1"><span class="label">Table</span> <span class="number">8.1</span></a> with plaintext 010010010 and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="134" altimg-height="17" altimg="../images/ch08math32.png"><m:mrow><m:mtext>IV</m:mtext><m:mo>=</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>001</m:mn></m:mrow></m:math></span>. The sender first uses the IV to calculate <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="242" altimg-height="17" altimg="../images/ch08math33.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>100</m:mn></m:mrow></m:math></span>. The sender then calculates <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="53" altimg-height="17" altimg="../images/ch08math34.png"><m:mrow><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo></m:mrow></m:math></span> <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="315" altimg-height="18" altimg="../images/ch08math35.png"><m:mrow><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>010</m:mn><m:mo>⊕</m:mo><m:mn>100</m:mn></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>000</m:mn></m:mrow></m:math></span>, and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="278" altimg-height="18" altimg="../images/ch08math36.png"><m:mrow><m:mi>C</m:mi><m:mrow><m:mo>(</m:mo><m:mn>3</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>m</m:mi><m:mrow><m:mo>(</m:mo><m:mn>3</m:mn><m:mo>)</m:mo></m:mrow><m:mo>⊕</m:mo><m:mi>c</m:mi><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>K</m:mi><m:mi>S</m:mi></m:msub><m:mo>(</m:mo><m:mn>010</m:mn><m:mo>⊕</m:mo></m:mrow></m:math></span> <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="99" altimg-height="17" altimg="../images/ch08math37.png"><m:mrow><m:mn>000</m:mn><m:mo>)</m:mo><m:mo>=</m:mo><m:mn>101.</m:mn></m:mrow></m:math></span> The reader should verify that the receiver, knowing the IV and <i>K<sub>S</sub></i> can recover the original plaintext.</p>
<p id="P700101195200000000000000000B663" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B663">CBC has an important consequence when designing secure network protocols: we’ll need to provide a mechanism within the protocol to distribute the IV from sender to receiver. We’ll see how this is done for several protocols later in this chapter.</p>
</section>
</section>
<section id="P7001011952000000000000000002DFC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DFC" class="level2"><header><h1 class="title" id="P700101195200000000000000000B664" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B664" epub:type="title"><span class="number">8.2.2</span> Public Key Encryption</h1></header>
<p id="P700101195200000000000000000B665" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B665">For more than 2,000 years (since the time of the Caesar cipher and up to the 1970s), encrypted communication required that the two communicating parties share a common secret—the symmetric key used for encryption and decryption. One difficulty with this approach is that the two parties must somehow agree on the shared key; but to do so requires (presumably <i>secure</i>) communication! Perhaps the parties could first meet and agree on the key in person (for example, two of Caesar’s centurions might meet at the Roman baths) and thereafter communicate with encryption. In a networked world, however, communicating parties may never meet and may never converse except over the network. Is it possible for two parties to communicate with encryption without having a shared secret key that is known in advance? In 1976, Diffie and Hellman <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038C6" data-foobar="7">[Diffie 1976]</a> demonstrated an algorithm (known now as Diffie-Hellman Key Exchange) to do just that—a radically different and marvelously elegant approach toward secure communication that has led to the development of today’s public key cryptography systems. We’ll see shortly that public key cryptography systems also have several wonderful properties that make them useful not only<span class="pagebreak" title="605" id="P7001011952000000000000000002DFF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002DFF" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002E00" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E00">
<img alt="Illustration of public key cryptography." height="309" width="670" aria-describedby="P7001011952000000000000000002E04" id="P700101195200000000000000000B666" data-uri="P7001011952000000000000000005611" src="../images/4055108006.png"></img>
<figcaption id="P700101195200000000000000000B667" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B667"><header><h1 class="title" id="P700101195200000000000000000B668" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B668" epub:type="title"><span class="label">Figure </span> <span class="number">8.6</span> Public key cryptography</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002E04" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E04" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108006.xhtml#la_4055108006"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B66A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66A">for encryption, but for authentication and digital signatures as well. Interestingly, it has recently come to light that ideas similar to those in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038C6" data-foobar="7">[Diffie 1976]</a> and <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BD8" data-foobar="7">[RSA 1978]</a> had been independently developed in the early 1970s in a series of secret reports by researchers at the Communications-Electronics Security Group in the United ­Kingdom <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038E3" data-foobar="7">[Ellis 1987]</a>. As is often the case, great ideas can spring up independently in many places; fortunately, public key advances took place not only in private, but also in the public view, as well.</p>
<p id="P700101195200000000000000000B66B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66B">The use of public key cryptography is conceptually quite simple. Suppose Alice wants to communicate with Bob. As shown in <a class="xref" href="#P7001011952000000000000000002E00" data-foobar="1"><span class="label">Figure</span> <span class="number">8.6</span></a>, rather than Bob and Alice sharing a single secret key (as in the case of symmetric key systems), Bob (the recipient of Alice’s messages) instead has two keys—a <span class="keyword" id="P7001011952000000000000000002E08" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E08"><b>public key</b></span> that is available to <i>everyone</i> in the world (including Trudy the intruder) and a <span class="keyword" id="P7001011952000000000000000002E09" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E09"><b>private key</b></span> that is known only to Bob. We will use the notation <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="21" altimg="../images/ch08math38.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="17" altimg="../images/ch08math39.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup></m:mrow></m:math></span> to refer to Bob’s public and private keys, respectively. In order to communicate with Bob, Alice first fetches Bob’s public key. Alice then encrypts her message, <i>m</i>, to Bob using Bob’s public key and a known (for example, standardized) encryption algorithm; that is, Alice computes <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="20" altimg="../images/ch08math40.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. Bob receives Alice’s encrypted message and uses his private key and a known (for example, standardized) decryption algorithm to decrypt Alice’s encrypted message. That is, Bob computes <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="86" altimg-height="20" altimg="../images/ch08math41.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>. We will see below that there are encryption/decryption algorithms and techniques for choosing public and private keys such that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="130" altimg-height="21" altimg="../images/ch08math42.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>m</m:mi></m:mrow></m:math></span>; that is, applying Bob’s public key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="21" altimg="../images/ch08math43.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup></m:mrow></m:math></span>, to a message, <i>m</i> (to get <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="21" altimg="../images/ch08math44.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>), and then applying Bob’s private key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="17" altimg="../images/ch08math45.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup></m:mrow></m:math></span>, to the encrypted version of <i>m</i> (that is, computing <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="91" altimg-height="21" altimg="../images/ch08math46.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>) gives back <i>m.</i> This is a remarkable result! In this manner, Alice can use Bob’s publicly available key to send a secret message to Bob without either of them having to distribute any secret keys! We will see shortly that we can interchange the public key and private key encryption and get the same remarkable result––that is, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="255" altimg-height="21" altimg="../images/ch08math47.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:msup><m:mrow><m:msub><m:mrow></m:mrow><m:mi>B</m:mi></m:msub></m:mrow><m:mo>+</m:mo></m:msup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>m</m:mi></m:mrow></m:math></span>.</p>
<p id="P700101195200000000000000000B66C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66C"><span class="pagebreak" title="606" id="P7001011952000000000000000002E0B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E0B" epub:type="pagebreak" role="doc-pagebreak"></span>The use of public key cryptography is thus conceptually simple. But two immediate worries may spring to mind. A first concern is that although an intruder intercepting Alice’s encrypted message will see only gibberish, the intruder knows both the key (Bob’s public key, which is available for all the world to see) and the algorithm that Alice used for encryption. Trudy can thus mount a chosen-plaintext attack, using the known standardized encryption algorithm and Bob’s publicly available encryption key to encode any message she chooses! Trudy might well try, for example, to encode messages, or parts of messages, that she suspects that Alice might send. Clearly, if public key cryptography is to work, key selection and encryption/decryption must be done in such a way that it is impossible (or at least so hard as to be nearly impossible) for an intruder to either determine Bob’s private key or somehow otherwise decrypt or guess Alice’s message to Bob. A second concern is that since Bob’s encryption key is public, anyone can send an encrypted message to Bob, including Alice or someone <i>claiming</i> to be Alice. In the case of a single shared secret key, the fact that the sender knows the secret key implicitly identifies the sender to the receiver. In the case of public key cryptography, however, this is no longer the case since anyone can send an encrypted message to Bob using Bob’s publicly available key. A digital signature, a topic we will study in <a class="xref" href="fileP7001011952000000000000000002E7A.xhtml#P7001011952000000000000000002E7A" data-foobar="7"><span class="label">Section</span> <span class="number">8.3</span></a>, is needed to bind a sender to a message.</p>
<section id="P7001011952000000000000000002E0C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E0C" class="level3"><header><h1 class="title" id="P700101195200000000000000000B66D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66D" epub:type="title">RSA</h1></header>
<p id="P700101195200000000000000000B66E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66E">While there may be many algorithms that address these concerns, the <span class="keyword" id="P7001011952000000000000000002E0F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E0F"><b>RSA ­algorithm</b></span> (named after its founders, Ron Rivest, Adi Shamir, and Leonard Adleman) has become almost synonymous with public key cryptography. Let’s first see how RSA works and then examine why it works.</p>
<p id="P700101195200000000000000000B66F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B66F">RSA makes extensive use of arithmetic operations using modulo-<i>n</i> arithmetic. So let’s briefly review modular arithmetic. Recall that <i>x</i> mod <i>n</i> simply means the remainder of <i>x</i> when divided by <i>n</i>; so, for example, 19 mod <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="13" altimg="../images/ch08math48.png"><m:mrow><m:mn>5</m:mn><m:mo>=</m:mo><m:mn>4</m:mn></m:mrow></m:math></span>. In modular arithmetic, one performs the usual operations of addition, multiplication, and exponentiation. However, the result of each operation is replaced by the integer remainder that is left when the result is divided by <i>n</i>. Adding and multiplying with modular arithmetic is facilitated with the following handy facts:</p>
<div class="informalequation" id="P7001011952000000000000000002E11" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E11"><m:math display="block" alttext="" data-uri="" altimg-width="384" altimg-height="86" altimg="../images/ch08math49.png"><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mrow><m:mo>[</m:mo> <m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>+</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>b</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>]</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mo>+</m:mo><m:mi>b</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:mrow><m:mrow><m:mo>[</m:mo> <m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>−</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>b</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>]</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mo>−</m:mo><m:mi>b</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:mrow><m:mrow><m:mo>[</m:mo> <m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>⋅</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>b</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>]</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>a</m:mi><m:mo>⋅</m:mo><m:mi>b</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000B670" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B670">It follows from the third fact that (<i>a</i> mod <i>n</i>)<sup>d</sup> <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="57" altimg-height="17" altimg="../images/ch08math50.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>a</m:mi><m:mi>d</m:mi></m:msup></m:mrow></m:math></span> mod <i>n</i>, which is an identity that we will soon find very useful.</p>
<p id="P700101195200000000000000000B671" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B671">Now suppose that Alice wants to send to Bob an RSA-encrypted message, as shown in <a class="xref" href="#P7001011952000000000000000002E00" data-foobar="1"><span class="label">Figure</span> <span class="number">8.6</span></a>. In our discussion of RSA, let’s always keep in mind that a message is nothing but a bit pattern, and every bit pattern can be uniquely represented by <span class="pagebreak" title="607" id="P7001011952000000000000000002E14" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E14" epub:type="pagebreak" role="doc-pagebreak"></span>an integer number (along with the length of the bit pattern). For example, suppose a message is the bit pattern 1001; this message can be represented by the decimal integer 9. Thus, when encrypting a message with RSA, it is equivalent to encrypting the unique integer number that represents the message.</p>
<p id="P700101195200000000000000000B672" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B672">There are two interrelated components of RSA:</p>
<ul id="P700101195200000000000000000B673" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B673">
<li id="P700101195200000000000000000B674" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B674"><p id="P700101195200000000000000000B675" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B675">The choice of the public key and the private key</p></li>
<li id="P700101195200000000000000000B676" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B676"><p id="P700101195200000000000000000B677" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B677">The encryption and decryption algorithm</p></li>
</ul>
<p class="continued" id="P700101195200000000000000000B678" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B678">To generate the public and private RSA keys, Bob performs the following steps:</p>
<ol id="P700101195200000000000000000B679" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B679">
<li id="P700101195200000000000000000B67A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67A"><p id="P700101195200000000000000000B67B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67B">Choose two large prime numbers, <i>p</i> and <i>q</i>. How large should <i>p</i> and <i>q</i> be? The larger the values, the more difficult it is to break RSA, but the longer it takes to perform the encoding and decoding. RSA Laboratories recommends that the product of <i>p</i> and <i>q</i> be on the order of 1,024 bits. For a discussion of how to find large prime numbers, see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000385C" data-foobar="7">[Caldwell 2012]</a>.</p></li>
<li id="P700101195200000000000000000B67C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67C"><p id="P700101195200000000000000000B67D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67D">Compute <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="13" altimg="../images/ch08math51.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mi>p</m:mi><m:mi>q</m:mi></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="149" altimg-height="17" altimg="../images/ch08math52.png"><m:mrow><m:mi>z</m:mi><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>p</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>q</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>.</p></li>
<li id="P700101195200000000000000000B67E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67E"><p id="P700101195200000000000000000B67F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B67F">Choose a number, <i>e</i>, less than <i>n</i>, that has no common factors (other than 1) with <i>z.</i> (In this case, <i>e</i> and <i>z</i> are said to be relatively prime.) The letter <i>e</i> is used since this value will be used in encryption.</p></li>
<li id="P700101195200000000000000000B680" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B680"><p id="P700101195200000000000000000B681" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B681">Find a number, <i>d</i>, such that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="13" altimg="../images/ch08math53.png"><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> is exactly divisible (that is, with no ­remainder) by <i>z</i>. The letter <i>d</i> is used because this value will be used in decryption. Put another way, given <i>e</i>, we choose <i>d</i> such that</p>
<div class="informalequation" id="P7001011952000000000000000002E25" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E25"><m:math display="block" alttext="" data-uri="" altimg-width="106" altimg-height="15" altimg="../images/ch08math54.png"><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi><m:mtext> </m:mtext><m:mi>mod</m:mi><m:mi>z</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow></m:math></div></li>
<li id="P700101195200000000000000000B682" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B682"><p id="P700101195200000000000000000B683" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B683">The public key that Bob makes available to the world, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="21" altimg="../images/ch08math55.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>+</m:mo></m:msubsup></m:mrow></m:math></span>, is the pair of numbers (<i>n</i>, <i>e</i>); his private key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="17" altimg="../images/ch08math56.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup></m:mrow></m:math></span>, is the pair of numbers (<i>n</i>, <i>d</i>).</p></li>
</ol>
<p class="continued" id="P700101195200000000000000000B684" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B684">The encryption by Alice and the decryption by Bob are done as follows:</p>
<ul id="P700101195200000000000000000B685" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B685">
<li id="P700101195200000000000000000B686" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B686"><p id="P700101195200000000000000000B687" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B687">Suppose Alice wants to send Bob a bit pattern represented by the integer number <i>m</i> (with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="55" altimg-height="17" altimg="../images/ch08math57.png"><m:mrow><m:mi>m</m:mi><m:mo>&lt;</m:mo><m:mi>n</m:mi></m:mrow></m:math></span>). To encode, Alice performs the exponentiation <i>m<sup>e</sup></i>, and then computes the integer remainder when <i>m<sup>e</sup></i> is divided by <i>n</i>. In other words, the encrypted value, <i>c</i>, of Alice’s plaintext message, <i>m</i>, is</p>
<div class="informalequation" id="P7001011952000000000000000002E2C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E2C"><m:math display="block" alttext="" data-uri="" altimg-width="112" altimg-height="14" altimg="../images/ch08math58.png"><m:mrow><m:mi>c</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000B688" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B688">The bit pattern corresponding to this ciphertext <i>c</i> is sent to Bob.</p></li>
<li id="P700101195200000000000000000B689" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B689"><p id="P700101195200000000000000000B68A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68A">To decrypt the received ciphertext message, <i>c</i>, Bob computes</p>
<div class="informalequation" id="P7001011952000000000000000002E30" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E30"><m:math display="block" alttext="" data-uri="" altimg-width="113" altimg-height="16" altimg="../images/ch08math59.png"><m:mrow><m:mi>m</m:mi><m:mo>=</m:mo><m:msup><m:mi>c</m:mi><m:mi>d</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi></m:mrow></m:math></div></li>
</ul>
<p class="continued" id="P700101195200000000000000000B68B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68B">which requires the use of his private key (<i>n</i>, <i>d</i>).<span class="pagebreak" title="608" id="P7001011952000000000000000002E32" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E32" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002E33" class="table" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E33">
<figcaption id="P700101195200000000000000000B68C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68C"><header><h1 class="title" id="P700101195200000000000000000B68D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68D" epub:type="title"><span class="label">Table </span> <span class="number">8.2</span> Alice’s RSA encryption, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="16" altimg="../images/ch08math60.png"><m:mrow><m:mi>e</m:mi><m:mo>=</m:mo><m:mn>5</m:mn></m:mrow></m:math></span>, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="62" altimg-height="16" altimg="../images/ch08math61.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mn>35</m:mn></m:mrow></m:math></span></h1></header></figcaption>
<table id="P700101195200000000000000000B68E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68E">
<thead>
<tr>
<th id="P700101195200000000000000000B68F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B68F">Plaintext Letter</th>
<th id="P700101195200000000000000000B690" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B690"><i>m</i>: numeric representation</th>
<th id="P700101195200000000000000000B691" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B691"><i>m</i><sup>e</sup></th>
<th id="P700101195200000000000000000B692" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B692">Ciphertext <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="48" altimg-height="14" altimg="../images/ch08math62.png"><m:mrow><m:mi>c</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup></m:mrow></m:math></span> mod <i>n</i></th>
</tr>
</thead>
<tbody>
<tr>
<td id="P700101195200000000000000000B693" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B693">l</td>
<td id="P700101195200000000000000000B694" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B694">12</td>
<td id="P700101195200000000000000000B695" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B695">248832</td>
<td id="P700101195200000000000000000B696" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B696">17</td>
</tr>
<tr>
<td id="P700101195200000000000000000B697" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B697">o</td>
<td id="P700101195200000000000000000B698" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B698">15</td>
<td id="P700101195200000000000000000B699" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B699">759375</td>
<td id="P700101195200000000000000000B69A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69A">15</td>
</tr>
<tr>
<td id="P700101195200000000000000000B69B" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69B">v</td>
<td id="P700101195200000000000000000B69C" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69C">22</td>
<td id="P700101195200000000000000000B69D" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69D">5153632</td>
<td id="P700101195200000000000000000B69E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69E">22</td>
</tr>
<tr>
<td id="P700101195200000000000000000B69F" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B69F">e</td>
<td id="P700101195200000000000000000B6A0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A0">5</td>
<td id="P700101195200000000000000000B6A1" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A1">3125</td>
<td id="P700101195200000000000000000B6A2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A2">10</td>
</tr>
</tbody>
</table>
</figure>
<p id="P700101195200000000000000000B6A3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A3">As a simple example of RSA, suppose Bob chooses <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="45" altimg-height="17" altimg="../images/ch08math63.png"><m:mrow><m:mi>p</m:mi><m:mo>=</m:mo><m:mn>5</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="45" altimg-height="17" altimg="../images/ch08math64.png"><m:mrow><m:mi>q</m:mi><m:mo>=</m:mo><m:mn>7</m:mn></m:mrow></m:math></span>. ­(Admittedly, these values are far too small to be secure.) Then <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="57" altimg-height="13" altimg="../images/ch08math65.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mn>35</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="56" altimg-height="15" altimg="../images/ch08math66.png"><m:mrow><m:mi>z</m:mi><m:mo>=</m:mo><m:mn>24</m:mn></m:mrow></m:math></span>. Bob chooses <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="16" altimg="../images/ch08math67.png"><m:mrow><m:mi>e</m:mi><m:mo>=</m:mo><m:mn>5</m:mn></m:mrow></m:math></span>, since 5 and 24 have no common factors. Finally, Bob chooses <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="16" altimg="../images/ch08math68.png"><m:mrow><m:mi>d</m:mi><m:mo>=</m:mo><m:mn>29</m:mn></m:mrow></m:math></span>, since <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="79" altimg-height="14" altimg="../images/ch08math69.png"><m:mrow><m:mn>5</m:mn><m:mo>⋅</m:mo><m:mn>29</m:mn><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> (that is, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="49" altimg-height="13" altimg="../images/ch08math70.png"><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span>) is exactly divisible by 24. Bob makes the two values, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="13" altimg="../images/ch08math71.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mn>35</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="49" altimg-height="13" altimg="../images/ch08math72.png"><m:mrow><m:mi>e</m:mi><m:mo>=</m:mo><m:mn>5</m:mn></m:mrow></m:math></span>, public and keeps the value <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="16" altimg="../images/ch08math73.png"><m:mrow><m:mi>d</m:mi><m:mo>=</m:mo><m:mn>29</m:mn></m:mrow></m:math></span> secret. Observing these two public values, suppose Alice now wants to send the letters <i>l</i>, <i>o</i>, <i>v</i>, and <i>e</i> to Bob. Interpreting each letter as a number between 1 and 26 (with <i>a</i> being 1, and <i>z</i> being 26), Alice and Bob perform the encryption and decryption shown in <a class="xref" href="#P7001011952000000000000000002E33" data-foobar="1"><span class="label">Tables</span> <span class="number">8.2</span></a> and <a class="xref" href="#P7001011952000000000000000002E4D" data-foobar="1"><span class="number">8.3</span></a>, respectively. Note that in this example, we consider each of the four letters as a distinct message. A more realistic example would be to convert the four letters into their 8-bit ASCII representations and then encrypt the integer corresponding to the resulting 32-bit bit pattern. (Such a realistic example generates numbers that are much too long to print in a textbook!)</p>
<p id="P700101195200000000000000000B6A4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A4">Given that the “toy” example in <a class="xref" href="#P7001011952000000000000000002E33" data-foobar="1"><span class="label">Tables</span> <span class="number">8.2</span></a> and <a class="xref" href="#P7001011952000000000000000002E4D" data-foobar="1"><span class="number">8.3</span></a> has already produced some extremely large numbers, and given that we saw earlier that <i>p</i> and <i>q</i> should each be several hundred bits long, several practical issues regarding RSA come to mind. How does one choose large prime numbers? How does one then choose <i>e</i> and <i>d</i>? How does one perform exponentiation with large numbers? A discussion of these important issues is beyond the scope of this book; see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039DA" data-foobar="7">[Kaufman 1995]</a> and the references therein for details.</p>
<figure id="P7001011952000000000000000002E4D" class="table" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E4D">
<figcaption id="P700101195200000000000000000B6A5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A5"><header><h1 class="title" id="P700101195200000000000000000B6A6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A6" epub:type="title"><span class="label">Table </span> <span class="number">8.3</span> Bob’s RSA decryption, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="16" altimg="../images/ch08math74.png"><m:mrow><m:mi>d</m:mi><m:mo>=</m:mo><m:mn>29</m:mn></m:mrow></m:math></span>, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="13" altimg="../images/ch08math75.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mn>35</m:mn></m:mrow></m:math></span></h1></header></figcaption>
<table id="P700101195200000000000000000B6A7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A7">
<thead>
<tr>
<th id="P700101195200000000000000000B6A8" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A8">Ciphertext <i>c</i></th>
<th id="P700101195200000000000000000B6A9" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6A9"><i>c<sup>d</sup></i></th>
<th id="P700101195200000000000000000B6AA" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AA"><i>m</i> = <i>c<sup>d</sup></i> mod <i>n</i></th>
<th id="P700101195200000000000000000B6AB" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AB">Plaintext Letter</th>
</tr>
</thead>
<tbody>
<tr>
<td id="P700101195200000000000000000B6AC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AC">17</td>
<td id="P700101195200000000000000000B6AD" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AD">4819685721067509150915091411825223071697</td>
<td id="P700101195200000000000000000B6AE" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AE">12</td>
<td id="P700101195200000000000000000B6AF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6AF">l</td>
</tr>
<tr>
<td id="P700101195200000000000000000B6B0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B0">15</td>
<td id="P700101195200000000000000000B6B1" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B1">127834039403948858939111232757568359375</td>
<td id="P700101195200000000000000000B6B2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B2">15</td>
<td id="P700101195200000000000000000B6B3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B3">o</td>
</tr>
<tr>
<td id="P700101195200000000000000000B6B4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B4">22</td>
<td id="P700101195200000000000000000B6B5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B5">851643319086537701956194499721106030592</td>
<td id="P700101195200000000000000000B6B6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B6">22</td>
<td id="P700101195200000000000000000B6B7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B7">v</td>
</tr>
<tr>
<td id="P700101195200000000000000000B6B8" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B8">10</td>
<td id="P700101195200000000000000000B6B9" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6B9">1000000000000000000000000000000</td>
<td id="P700101195200000000000000000B6BA" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BA">5</td>
<td id="P700101195200000000000000000B6BB" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BB">e</td>
</tr>
</tbody>
</table>
</figure>
</section>
<section id="P7001011952000000000000000002E65" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E65" class="level3"><header><h1 class="title" id="P700101195200000000000000000B6BC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BC" epub:type="title"><span class="pagebreak" title="609" id="P7001011952000000000000000002E67" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E67" epub:type="pagebreak" role="doc-pagebreak"></span>Session Keys</h1></header>
<p id="P700101195200000000000000000B6BD" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BD">We note here that the exponentiation required by RSA is a rather time-consuming process. By contrast, DES is at least 100 times faster in software and between 1,000 and 10,000 times faster in hardware <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BDA" data-foobar="7">[RSA Fast 2012]</a>. As a result, RSA is often used in practice in combination with symmetric key cryptography. For example, if Alice wants to send Bob a large amount of encrypted data, she could do the following. First Alice chooses a key that will be used to encode the data itself; this key is referred to as a <span class="keyword" id="P7001011952000000000000000002E69" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E69"><b>session key</b></span>, and is denoted by <i>K<sub>S</sub></i>. Alice must inform Bob of the session key, since this is the shared ­symmetric key they will use with a symmetric key cipher (e.g., with DES or AES). Alice encrypts the session key using Bob’s public key, that is, computes <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="77" altimg-height="17" altimg="../images/ch08math76.png"><m:mrow><m:mi>c</m:mi><m:mo>=</m:mo><m:msup><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>K</m:mi><m:mi>S</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mi>e</m:mi></m:msup></m:mrow></m:math></span> mod <i>n</i>. Bob receives the RSA-encrypted session key, <i>c</i>, and decrypts it to obtain the session key, <i>K<sub>S</sub></i>. Bob now knows the session key that Alice will use for her encrypted data transfer.</p>
</section>
<section id="P7001011952000000000000000002E6A" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E6A" class="level3"><header><h1 class="title" id="P700101195200000000000000000B6BE" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BE" epub:type="title">Why Does RSA Work?</h1></header>
<p id="P700101195200000000000000000B6BF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6BF">RSA encryption/decryption appears rather magical. Why should it be that by applying the encryption algorithm and then the decryption algorithm, one recovers the original message? In order to understand why RSA works, again denote <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="61" altimg-height="13" altimg="../images/ch08math77.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mi>p</m:mi><m:mi>q</m:mi></m:mrow></m:math></span>, where <i>p</i> and <i>q</i> are the large prime numbers used in the RSA algorithm.</p>
<p id="P700101195200000000000000000B6C0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C0">Recall that, under RSA encryption, a message (uniquely represented by an ­integer), <i>m</i>, is exponentiated to the power <i>e</i> using modulo-<i>n</i> arithmetic, that is,</p>
<div class="informalequation" id="P7001011952000000000000000002E6E" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E6E"><m:math display="block" alttext="" data-uri="" altimg-width="111" altimg-height="13" altimg="../images/ch08math78.png"><m:mrow><m:mi>c</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000B6C1" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C1">Decryption is performed by raising this value to the power <i>d</i>, again using modulo-<i>n</i> arithmetic. The result of an encryption step followed by a decryption step is thus (<i>m<sup>e</sup></i> mod <i>n</i>)<sup><i>d</i></sup> mod <i>n</i>. Let’s now see what we can say about this quantity. As mentioned earlier, one important property of modulo arithmetic is (<i>a</i> mod <i>n</i>)<sup><i>d</i></sup> mod <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="54" altimg-height="17" altimg="../images/ch08math79.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>a</m:mi><m:mi>d</m:mi></m:msup></m:mrow></m:math></span> mod <i>n</i> for any values <i>a</i>, <i>n</i>, and <i>d</i>. Thus, using <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="12" altimg="../images/ch08math80.png"><m:mrow><m:mi>a</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup></m:mrow></m:math></span> in this property, we have</p>
<div class="informalequation" id="P7001011952000000000000000002E70" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E70"><m:math display="block" alttext="" data-uri="" altimg-width="255" altimg-height="21" altimg="../images/ch08math81.png"><m:mrow><m:msup><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mi>d</m:mi></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:math></div>
<p id="P700101195200000000000000000B6C2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C2">It therefore remains to show that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="132" altimg-height="17" altimg="../images/ch08math82.png"><m:mrow><m:msup><m:mi>m</m:mi><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:mi>m</m:mi></m:mrow></m:math></span>. Although we’re trying to remove some of the magic about why RSA works, to establish this, we’ll need to use a rather magical result from number theory here. Specifically, we’ll need the result that says if <i>p</i> and <i>q</i> are prime, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="55" altimg-height="13" altimg="../images/ch08math83.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mi>p</m:mi><m:mi>q</m:mi></m:mrow></m:math></span>, and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="142" altimg-height="17" altimg="../images/ch08math84.png"><m:mrow><m:mi>z</m:mi><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>p</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>q</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>, then <i>x<sup>y</sup></i> mod <i>n</i> is the same as <i>x</i><sup>(</sup><i><sup>y</sup></i> <sup>mod</sup> <i><sup>z</sup></i><sup>)</sup> mod <i>n</i> <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039DA" data-foobar="7">[Kaufman 1995]</a>. Applying this result with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="9" altimg="../images/ch08math85.png"><m:mrow><m:mi>x</m:mi><m:mo>=</m:mo><m:mi>m</m:mi></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="57" altimg-height="17" altimg="../images/ch08math86.png"><m:mrow><m:mi>y</m:mi><m:mo>=</m:mo><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:math></span> we have</p>
<div class="informalequation" id="P7001011952000000000000000002E72" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E72"><m:math display="block" alttext="" data-uri="" altimg-width="235" altimg-height="16" altimg="../images/ch08math87.png"><m:mrow><m:msup><m:mi>m</m:mi><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>z</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:msup><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>n</m:mi></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000B6C3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C3">But remember that we have chosen <i>e</i> and <i>d</i> such that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="109" altimg-height="13" altimg="../images/ch08math88.png"><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi><m:mi>mod</m:mi><m:mtext> </m:mtext><m:mi>z</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow></m:math></span>. This gives us</p>
<div class="informalequation" id="P7001011952000000000000000002E74" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E74"><m:math display="block" alttext="" data-uri="" altimg-width="227" altimg-height="17" altimg="../images/ch08math89.png"><m:mrow><m:msup><m:mi>m</m:mi><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mn>1</m:mn></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi><m:mo>=</m:mo><m:mi>m</m:mi></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000B6C4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C4"><span class="pagebreak" title="610" id="P7001011952000000000000000002E76" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E76" epub:type="pagebreak" role="doc-pagebreak"></span>which is exactly the result we are looking for! By first exponentiating to the power of <i>e</i> (that is, encrypting) and then exponentiating to the power of <i>d</i> (that is, ­decrypting), we obtain the original value, <i>m.</i> Even <i>more</i> wonderful is the fact that if we first exponentiate to the power of <i>d</i> and then exponentiate to the power of <i>e</i>—that is, we reverse the order of encryption and decryption, performing the decryption operation first and then applying the encryption operation—we also obtain the original value, <i>m</i>. This wonderful result follows immediately from the modular arithmetic:</p>
<div class="informalequation" id="P7001011952000000000000000002E77" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002E77"><m:math display="block" alttext="" data-uri="" altimg-width="539" altimg-height="21" altimg="../images/ch08math90.png"><m:mrow><m:msup><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:msup><m:mi>m</m:mi><m:mi>d</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mi>e</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mrow><m:mi>d</m:mi><m:mi>e</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mi>m</m:mi><m:mrow><m:mi>e</m:mi><m:mi>d</m:mi></m:mrow></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi><m:mo>=</m:mo><m:msup><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:msup><m:mi>m</m:mi><m:mi>e</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow><m:mi>d</m:mi></m:msup><m:mi>mod</m:mi><m:mo> </m:mo><m:mi>n</m:mi></m:mrow></m:math></div>
<p id="P700101195200000000000000000B6C5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C5">The security of RSA relies on the fact that there are no known algorithms for quickly factoring a number, in this case the public value <i>n</i>, into the primes <i>p</i> and <i>q</i>. If one knew <i>p</i> and <i>q</i>, then given the public value <i>e</i>, one could easily compute the secret key, <i>d</i>. On the other hand, it is not known whether or not there <i>exist</i> fast algorithms for factoring a number, and in this sense, the security of RSA is not guaranteed.</p>
<p id="P700101195200000000000000000B6C6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B6C6">Another popular public-key encryption algorithm is the Diffie-Hellman algorithm, which we will briefly explore in the homework problems. Diffie-Hellman is not as versatile as RSA in that it cannot be used to encrypt messages of arbitrary length; it can be used, however, to establish a symmetric session key, which is in turn used to encrypt messages.</p>
</section>
</section>
</section></body></html>