<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Condition Variables</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part307.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part309.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 205pt;text-indent: 0pt;text-align: left;">Condition Variables</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Thus far we have developed the notion of a lock and seen how one can be properly built with the right combination of hardware and OS support. Unfortunately, locks are not the only primitives that are needed to build concurrent programs.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In particular, there are many cases where a thread wishes to check whether a <b>condition </b>is true before continuing its execution. For example, a parent thread might wish to check whether a child thread has completed before continuing (this is often called a <span class="s41">join()</span>); how should such a wait be implemented? Let’s look at Figure <span style=" color: #00AEEF;">30.1</span>.</p><p class="s38" style="padding-top: 7pt;padding-left: 26pt;text-indent: 0pt;text-align: left;"><span class="s37">1  </span>void <span class="s39">*</span>child(void <span class="s39">*</span>arg) {</p><table style="border-collapse:collapse;margin-left:21.6599pt" cellspacing="0"><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">printf(&quot;child\n&quot;);</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">// XXX how to indicate we are done?</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">return NULL;</p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">5</p></td><td style="width:18pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p></td><td style="width:234pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:7pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;line-height: 6pt;text-align: left;">6</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">7</p></td><td style="width:18pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">int</p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 8pt;text-align: left;">main(int argc, char <span class="s136">*</span>argv[]) {</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;line-height: 6pt;text-align: left;">8</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 6pt;text-align: left;">printf(&quot;parent: begin\n&quot;);</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">9</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">pthread_t c;</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_create(&amp;c, NULL, child, NULL); // create child</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">// XXX how to wait for child?</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">12</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">printf(&quot;parent: end\n&quot;);</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 7pt;text-align: left;">return 0;</p></td></tr><tr style="height:12pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:18pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p></td><td style="width:234pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:17pt"><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s20" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">Figure 30.1: <b>A Parent Waiting For Its Child</b></p></td></tr><tr style="height:13pt"><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:18pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:234pt"><p class="s20" style="text-indent: 0pt;line-height: 11pt;text-align: left;">What we would like to see here is the following output:</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">parent: begin child parent: end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We could try using a shared variable, as you see in Figure <span style=" color: #00AEEF;">30.2</span>. This solution will generally work, but it is hugely inefficient as the parent spins and wastes CPU time. What we would like here instead is some way to put the parent to sleep until the condition we are waiting for (e.g., the child is done executing) comes true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: center;">325</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">volatile int done = 0;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">2</p><p class="s38" style="padding-left: 54pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">3  </span>void <span class="s39">*</span>child(void <span class="s39">*</span>arg) {</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;">4    <span class="s38">printf(&quot;child\n&quot;);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">5    <span class="s38">done = 1;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">6    <span class="s38">return NULL;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">7  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">8</p><p class="s38" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">9  </span>int main(int argc, char <span class="s39">*</span>argv[]) {</p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;line-height: 7pt;text-align: left;">10    <span class="s38">printf(&quot;parent: begin\n&quot;);</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">11    <span class="s38">pthread_t c;</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">12     <span class="s38">Pthread_create(&amp;c, NULL, child, NULL); // create child</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">13    <span class="s38">while (done == 0)</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">14       <span class="s38">; // spin</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">15    <span class="s38">printf(&quot;parent: end\n&quot;);</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">16    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">17  <span class="s38">}</span></p><p style="padding-top: 2pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">Figure 30.2: <b>Parent Waiting For Child: Spin-based Approach</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">HE </span>C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>W<span class="s7">AIT </span>F<span class="s7">OR </span>A C<span class="s7">ONDITION</span></p><p style="padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In multi-threaded programs, it is often useful for a thread to wait for some condition to become true before proceeding. The simple approach, of just spinning until the condition becomes true, is grossly inefficient and wastes CPU cycles, and in some cases, can be incorrect. Thus, how should a thread wait for a condition?</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part309.htm">30.1 Definition and Routines</a><a class="toc0" href="part310.htm">30.2 The Producer/Consumer (Bound Buffer) Problem</a><a class="toc1" href="part311.htm">A Broken Solution</a><a class="toc1" href="part312.htm">Better, But Still Broken: While, Not If</a><a class="toc1" href="part313.htm">The Single Buffer Producer/Consumer Solution</a><a class="toc1" href="part314.htm">The Final Producer/Consumer Solution</a><a class="toc0" href="part315.htm">30.3 Covering Conditions</a><a class="toc0" href="part316.htm">30.4 Summary</a><a class="toc0" href="part317.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part307.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part309.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
