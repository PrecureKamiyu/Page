<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>2.1 Information Storage</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000002AD" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000003E694" data-uri="chapter02.xhtml#P700049702700000000000000003E694" epub:type="title"><span class="pcalibre label pcalibre1">2.1 </span>Information Storage</h1></header>
<p id="P700049702700000000000000003E695" data-uri="chapter02.xhtml#P700049702700000000000000003E695" class="pcalibre1 pcalibre calibre2">Rather than accessing individual bits in memory, most computers use blocks of 8 bits, or <i class="calibre5 pcalibre pcalibre1">bytes</i>, as the smallest addressable unit of memory. A machine-level program views memory as a very large array of bytes, referred to as <i class="calibre5 pcalibre pcalibre1">virtual memory</i>. Every byte of memory is identified by a unique number, known as its <i class="calibre5 pcalibre pcalibre1">address</i>, and the set of all possible addresses is known as the <i class="calibre5 pcalibre pcalibre1">virtual address space</i>. As indicated by its name, this virtual address space is just a conceptual image presented to the machine-level program. The actual implementation (presented in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">9</span></a>) uses a combination of dynamic random access memory (DRAM), flash memory, disk storage, special hardware, and operating system software to provide the program with what appears to be a monolithic byte array.</p>
<p id="P700049702700000000000000003E696" data-uri="chapter02.xhtml#P700049702700000000000000003E696" class="pcalibre1 pcalibre calibre2">In subsequent chapters, we will cover how the compiler and run-time system partitions this memory space into more manageable units to store the different <i class="calibre5 pcalibre pcalibre1">program objects</i>, that is, program data, instructions, and control information. Various mechanisms are used to allocate and manage the storage for different parts of the program. This management is all performed within the virtual address space. For example, the value of a pointer in C—whether it points to an integer, a structure, or some other program object—is the virtual address of the first byte of some block of storage. The C compiler also associates <i class="calibre5 pcalibre pcalibre1">type</i> information with each pointer, so that it can generate different machine-level code to access the value stored at the location designated by the pointer depending on the type of that value. Although the C compiler maintains this type information, the actual machine-level program it generates has no information about data types. It simply treats each program object as a block of bytes and the program itself as a sequence of bytes.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000002B1" data-uri="chapter02.xhtml#P70004970270000000000000000002B1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E697" data-uri="chapter02.xhtml#P700049702700000000000000003E697" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000002B3" title="35" data-uri="chapter02.xhtml#P70004970270000000000000000002B3" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>The evolution of the C programming language</h1></header>
<p id="P700049702700000000000000003E698" data-uri="chapter02.xhtml#P700049702700000000000000003E698" class="calibre13 pcalibre pcalibre1">As was described in an aside on page 4, the C programming language was first developed by Dennis Ritchie of Bell Laboratories for use with the Unix operating system (also developed at Bell Labs). At the time, most system programs, such as operating systems, had to be written largely in assembly code in order to have access to the low-level representations of different data types. For example, it was not feasible to write a memory allocator, such as is provided by the <code id="P700049702700000000000000003E699" data-uri="chapter02.xhtml#P700049702700000000000000003E699" class="pcalibre1 calibre8 pcalibre">malloc</code> library function, in other high-level languages of that era.</p>
<p id="P700049702700000000000000003E69A" data-uri="chapter02.xhtml#P700049702700000000000000003E69A" class="calibre13 pcalibre pcalibre1">The original Bell Labs version of C was documented in the first edition of the book by Brian Kernighan and Dennis Ritchie [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B41A">60</a>]. Over time, C has evolved through the efforts of several standardization groups. The first major revision of the original Bell Labs C led to the ANSI C standard in 1989, by a group working under the auspices of the American National Standards Institute. ANSI C was a major departure from Bell Labs C, especially in the way functions are declared. ANSI C is described in the second edition of Kernighan and Ritchie's book [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B41C">61</a>], which is still considered one of the best references on C.</p>
<p id="P700049702700000000000000003E69B" data-uri="chapter02.xhtml#P700049702700000000000000003E69B" class="calibre13 pcalibre pcalibre1">The International Standards Organization took over responsibility for standardizing the C language, adopting a version that was substantially the same as ANSI C in 1990 and hence is referred to as “ISO C90.”</p>
<p id="P700049702700000000000000003E69C" data-uri="chapter02.xhtml#P700049702700000000000000003E69C" class="calibre13 pcalibre pcalibre1">This same organization sponsored an updating of the language in 1999, yielding “ISO C99.” Among other things, this version introduced some new data types and provided support for text strings requiring characters not found in the English language. A more recent standard was approved in 2011, and hence is named “ISO C11,” again adding more data types and features. Most of these recent additions have been <i class="calibre5 pcalibre pcalibre1">backward compatible</i>, meaning that programs written according to the earlier standard (at least as far back as ISO C90) will have the same behavior when compiled according to the newer standards.</p>
<p id="P700049702700000000000000003E69D" data-uri="chapter02.xhtml#P700049702700000000000000003E69D" class="calibre13 pcalibre pcalibre1">The GNU Compiler Collection (<code id="P700049702700000000000000003E69E" data-uri="chapter02.xhtml#P700049702700000000000000003E69E" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">gcc</span></code>) can compile programs according to the conventions of several different versions of the C language, based on different command-line options, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000002C4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.1</span></a>. For example, to compile program <code id="P700049702700000000000000003E69F" data-uri="chapter02.xhtml#P700049702700000000000000003E69F" class="pcalibre1 calibre8 pcalibre">prog.c</code> according to ISO C11, we could give the command line</p>
<pre id="P700049702700000000000000003E6A0" data-uri="chapter02.xhtml#P700049702700000000000000003E6A0" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E6A1" data-uri="chapter02.xhtml#P700049702700000000000000003E6A1" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc</i> -<i class="calibre5 pcalibre pcalibre1">std=c11 prog.c</i>
</code></pre>
<p id="P700049702700000000000000003E6A2" data-uri="chapter02.xhtml#P700049702700000000000000003E6A2" class="calibre13 pcalibre pcalibre1">The options <code id="P700049702700000000000000003E6A3" data-uri="chapter02.xhtml#P700049702700000000000000003E6A3" class="pcalibre1 calibre8 pcalibre">-ansi</code> and <code id="P700049702700000000000000003E6A4" data-uri="chapter02.xhtml#P700049702700000000000000003E6A4" class="pcalibre1 calibre8 pcalibre">-std=c89</code> have identical effect—the code is compiled according to the ANSI or ISO C90 standard. (C90 is sometimes referred to as “C89,” since its standardization effort began in 1989.) The option <code id="P700049702700000000000000003E6A5" data-uri="chapter02.xhtml#P700049702700000000000000003E6A5" class="pcalibre1 calibre8 pcalibre">-std=c99</code> causes the compiler to follow the ISO C99 convention.</p>
<p id="P700049702700000000000000003E6A6" data-uri="chapter02.xhtml#P700049702700000000000000003E6A6" class="pcalibre calibre3 pcalibre1">As of the writing of this book, when no option is specified, the program will be compiled according to a version of C based on ISO C90, but including some features of C99, some of C11, some of C++, and others specific to <span class="smallcaps pcalibre pcalibre1">gcc</span>. The GNU project is developing a version that combines ISO C11, plus other features, that can be specified with command-line option <code id="P700049702700000000000000003E6A7" data-uri="chapter02.xhtml#P700049702700000000000000003E6A7" class="pcalibre1 calibre8 pcalibre">-std=gnu11</code>. (Currently, this implementation is incomplete.) This will become the default version.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000002C4" data-uri="chapter02.xhtml#P70004970270000000000000000002C4">
<table id="P700049702700000000000000003E6A8" data-uri="chapter02.xhtml#P700049702700000000000000003E6A8" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E6A9" data-uri="chapter02.xhtml#P700049702700000000000000003E6A9" class="calibre18 pcalibre pcalibre1">C version</th>
<th id="P700049702700000000000000003E6AA" data-uri="chapter02.xhtml#P700049702700000000000000003E6AA" class="calibre18 pcalibre pcalibre1"><code id="P700049702700000000000000003E6AB" data-uri="chapter02.xhtml#P700049702700000000000000003E6AB" class="calibre10 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">gcc</span></code> command-line option</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6AC" data-uri="chapter02.xhtml#P700049702700000000000000003E6AC" class="calibre20 pcalibre pcalibre1">GNU 89</td>
<td id="P700049702700000000000000003E6AD" data-uri="chapter02.xhtml#P700049702700000000000000003E6AD" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">none</i>, <code id="P700049702700000000000000003E6AE" data-uri="chapter02.xhtml#P700049702700000000000000003E6AE" class="calibre10 pcalibre pcalibre1">-std=gnu89</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6AF" data-uri="chapter02.xhtml#P700049702700000000000000003E6AF" class="calibre20 pcalibre pcalibre1">ANSI, ISO C90</td>
<td id="P700049702700000000000000003E6B0" data-uri="chapter02.xhtml#P700049702700000000000000003E6B0" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E6B1" data-uri="chapter02.xhtml#P700049702700000000000000003E6B1" class="calibre10 pcalibre pcalibre1">-ansi, -std=c89</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6B2" data-uri="chapter02.xhtml#P700049702700000000000000003E6B2" class="calibre20 pcalibre pcalibre1">ISO C99</td>
<td id="P700049702700000000000000003E6B3" data-uri="chapter02.xhtml#P700049702700000000000000003E6B3" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E6B4" data-uri="chapter02.xhtml#P700049702700000000000000003E6B4" class="calibre10 pcalibre pcalibre1">-std=c99</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6B5" data-uri="chapter02.xhtml#P700049702700000000000000003E6B5" class="calibre20 pcalibre pcalibre1">ISO C11</td>
<td id="P700049702700000000000000003E6B6" data-uri="chapter02.xhtml#P700049702700000000000000003E6B6" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E6B7" data-uri="chapter02.xhtml#P700049702700000000000000003E6B7" class="calibre10 pcalibre pcalibre1">-std=c11</code></td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000003E6B8" data-uri="chapter02.xhtml#P700049702700000000000000003E6B8" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E6B9" data-uri="chapter02.xhtml#P700049702700000000000000003E6B9" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">2.1 </span>Specifying different versions of C to <code id="P700049702700000000000000003E6BA" data-uri="chapter02.xhtml#P700049702700000000000000003E6BA" class="pcalibre1 calibre8 pcalibre">GCC</code>.</h1></header></figcaption>
</figure>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000002D8" data-uri="chapter02.xhtml#P70004970270000000000000000002D8"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E6BB" data-uri="chapter02.xhtml#P700049702700000000000000003E6BB" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000002DA" title="36" data-uri="chapter02.xhtml#P70004970270000000000000000002DA" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">New to C? </span>The role of pointers in C</h1></header>
<p id="P700049702700000000000000003E6BC" data-uri="chapter02.xhtml#P700049702700000000000000003E6BC" class="calibre13 pcalibre pcalibre1">Pointers are a central feature of C. They provide the mechanism for referencing elements of data structures, including arrays. Just like a variable, a pointer has two aspects: its <i class="calibre5 pcalibre pcalibre1">value</i> and its <i class="calibre5 pcalibre pcalibre1">type</i>. The value indicates the location of some object, while its type indicates what kind of object (e.g., integer or floating-point number) is stored at that location.</p>
<p id="P700049702700000000000000003E6BD" data-uri="chapter02.xhtml#P700049702700000000000000003E6BD" class="pcalibre calibre3 pcalibre1">Truly understanding pointers requires examining their representation and implementation at the machine level. This will be a major focus in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>, culminating in an in-depth presentation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002E71"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.10.1</span></a>.</p>
</aside>
<section id="P70004970270000000000000000002DD" data-uri="chapter02.xhtml#P70004970270000000000000000002DD" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E6BE" data-uri="chapter02.xhtml#P700049702700000000000000003E6BE" epub:type="title"><span class="pcalibre label pcalibre1">2.1.1 </span>Hexadecimal Notation</h1></header>
<p id="P700049702700000000000000003E6BF" data-uri="chapter02.xhtml#P700049702700000000000000003E6BF" class="pcalibre1 pcalibre calibre2">A single byte consists of 8 bits. In binary notation, its value ranges from 00000000<sub class="pcalibre1 calibre47 pcalibre">2</sub> to 11111111<sub class="pcalibre1 calibre47 pcalibre">2</sub>. When viewed as a decimal integer, its value ranges from 0<sub class="pcalibre1 calibre47 pcalibre">10</sub> to 255<sub class="pcalibre1 calibre47 pcalibre">10</sub>. Neither notation is very convenient for describing bit patterns. Binary notation is too verbose, while with decimal notation it is tedious to convert to and from bit patterns. Instead, we write bit patterns as base-16, or <i class="calibre5 pcalibre pcalibre1">hexadecimal</i> numbers. Hexadecimal (or simply “hex”) uses digits ‘0’ through ‘9’ along with characters ‘A’ through ‘F’ to represent 16 possible values. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000002E9"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.2</span></a> shows the decimal and binary values associated with the 16 hexadecimal digits. Written in hexadecimal, the value of a single byte can range from 00<sub class="pcalibre1 calibre47 pcalibre">16</sub> to FF<sub class="pcalibre1 calibre47 pcalibre">16</sub>.</p>
<p id="P700049702700000000000000003E6C0" data-uri="chapter02.xhtml#P700049702700000000000000003E6C0" class="pcalibre1 pcalibre calibre2">In C, numeric constants starting with <code id="P700049702700000000000000003E6C1" data-uri="chapter02.xhtml#P700049702700000000000000003E6C1" class="pcalibre1 calibre8 pcalibre">0x</code> or <code id="P700049702700000000000000003E6C2" data-uri="chapter02.xhtml#P700049702700000000000000003E6C2" class="pcalibre1 calibre8 pcalibre">0X</code> are interpreted as being in hexadecimal. The characters ‘A’ through ‘F’ may be written in either upper- or lowercase. For example, we could write the number FA1D37B<sub class="pcalibre1 calibre47 pcalibre">16</sub> as <code id="P700049702700000000000000003E6C3" data-uri="chapter02.xhtml#P700049702700000000000000003E6C3" class="pcalibre1 calibre8 pcalibre">0xFA1D37B</code>, as <code id="P700049702700000000000000003E6C4" data-uri="chapter02.xhtml#P700049702700000000000000003E6C4" class="pcalibre1 calibre8 pcalibre">0xfa1d37b</code>, or even mixing upper- and lower case (e.g., <code id="P700049702700000000000000003E6C5" data-uri="chapter02.xhtml#P700049702700000000000000003E6C5" class="pcalibre1 calibre8 pcalibre">0xFa1D37b</code>). We will use the C notation for representing hexadecimal values in this book.</p>
<p id="P700049702700000000000000003E6C6" data-uri="chapter02.xhtml#P700049702700000000000000003E6C6" class="pcalibre1 pcalibre calibre2">A common task in working with machine-level programs is to manually convert between decimal, binary, and hexadecimal representations of bit patterns. Converting between binary and hexadecimal is straightforward, since it can be performed one hexadecimal digit at a time. Digits can be converted by referring to a chart such as that shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000002E9"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.2</span></a>. One simple trick for doing the conversion in your head is to memorize the decimal equivalents of hex digits <code id="P700049702700000000000000003E6C7" data-uri="chapter02.xhtml#P700049702700000000000000003E6C7" class="pcalibre1 calibre8 pcalibre">A, C</code>, and <code id="P700049702700000000000000003E6C8" data-uri="chapter02.xhtml#P700049702700000000000000003E6C8" class="pcalibre1 calibre8 pcalibre">F</code>.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000002E9" data-uri="chapter02.xhtml#P70004970270000000000000000002E9">
<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000003E6C9" data-uri="chapter02.xhtml#P700049702700000000000000003E6C9">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6CA" data-uri="chapter02.xhtml#P700049702700000000000000003E6CA" class="calibre20 pcalibre pcalibre1">Hex digit</td>
<td id="P700049702700000000000000003E6CB" data-uri="chapter02.xhtml#P700049702700000000000000003E6CB" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E6CC" data-uri="chapter02.xhtml#P700049702700000000000000003E6CC" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E6CD" data-uri="chapter02.xhtml#P700049702700000000000000003E6CD" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P700049702700000000000000003E6CE" data-uri="chapter02.xhtml#P700049702700000000000000003E6CE" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P700049702700000000000000003E6CF" data-uri="chapter02.xhtml#P700049702700000000000000003E6CF" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E6D0" data-uri="chapter02.xhtml#P700049702700000000000000003E6D0" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P700049702700000000000000003E6D1" data-uri="chapter02.xhtml#P700049702700000000000000003E6D1" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P700049702700000000000000003E6D2" data-uri="chapter02.xhtml#P700049702700000000000000003E6D2" class="calibre20 pcalibre pcalibre1">7</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6D3" data-uri="chapter02.xhtml#P700049702700000000000000003E6D3" class="calibre20 pcalibre pcalibre1">Decimal value</td>
<td id="P700049702700000000000000003E6D4" data-uri="chapter02.xhtml#P700049702700000000000000003E6D4" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E6D5" data-uri="chapter02.xhtml#P700049702700000000000000003E6D5" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E6D6" data-uri="chapter02.xhtml#P700049702700000000000000003E6D6" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P700049702700000000000000003E6D7" data-uri="chapter02.xhtml#P700049702700000000000000003E6D7" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P700049702700000000000000003E6D8" data-uri="chapter02.xhtml#P700049702700000000000000003E6D8" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E6D9" data-uri="chapter02.xhtml#P700049702700000000000000003E6D9" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P700049702700000000000000003E6DA" data-uri="chapter02.xhtml#P700049702700000000000000003E6DA" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P700049702700000000000000003E6DB" data-uri="chapter02.xhtml#P700049702700000000000000003E6DB" class="calibre20 pcalibre pcalibre1">7</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6DC" data-uri="chapter02.xhtml#P700049702700000000000000003E6DC" class="calibre20 pcalibre pcalibre1">Binary value</td>
<td id="P700049702700000000000000003E6DD" data-uri="chapter02.xhtml#P700049702700000000000000003E6DD" class="calibre20 pcalibre pcalibre1">0000</td>
<td id="P700049702700000000000000003E6DE" data-uri="chapter02.xhtml#P700049702700000000000000003E6DE" class="calibre20 pcalibre pcalibre1">0001</td>
<td id="P700049702700000000000000003E6DF" data-uri="chapter02.xhtml#P700049702700000000000000003E6DF" class="calibre20 pcalibre pcalibre1">0010</td>
<td id="P700049702700000000000000003E6E0" data-uri="chapter02.xhtml#P700049702700000000000000003E6E0" class="calibre20 pcalibre pcalibre1">0011</td>
<td id="P700049702700000000000000003E6E1" data-uri="chapter02.xhtml#P700049702700000000000000003E6E1" class="calibre20 pcalibre pcalibre1">0100</td>
<td id="P700049702700000000000000003E6E2" data-uri="chapter02.xhtml#P700049702700000000000000003E6E2" class="calibre20 pcalibre pcalibre1">0101</td>
<td id="P700049702700000000000000003E6E3" data-uri="chapter02.xhtml#P700049702700000000000000003E6E3" class="calibre20 pcalibre pcalibre1">0110</td>
<td id="P700049702700000000000000003E6E4" data-uri="chapter02.xhtml#P700049702700000000000000003E6E4" class="calibre20 pcalibre pcalibre1">0111</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6E5" data-uri="chapter02.xhtml#P700049702700000000000000003E6E5" class="calibre20 pcalibre pcalibre1">Hex digit</td>
<td id="P700049702700000000000000003E6E6" data-uri="chapter02.xhtml#P700049702700000000000000003E6E6" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P700049702700000000000000003E6E7" data-uri="chapter02.xhtml#P700049702700000000000000003E6E7" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P700049702700000000000000003E6E8" data-uri="chapter02.xhtml#P700049702700000000000000003E6E8" class="calibre20 pcalibre pcalibre1">A</td>
<td id="P700049702700000000000000003E6E9" data-uri="chapter02.xhtml#P700049702700000000000000003E6E9" class="calibre20 pcalibre pcalibre1">B</td>
<td id="P700049702700000000000000003E6EA" data-uri="chapter02.xhtml#P700049702700000000000000003E6EA" class="calibre20 pcalibre pcalibre1">C</td>
<td id="P700049702700000000000000003E6EB" data-uri="chapter02.xhtml#P700049702700000000000000003E6EB" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000003E6EC" data-uri="chapter02.xhtml#P700049702700000000000000003E6EC" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000003E6ED" data-uri="chapter02.xhtml#P700049702700000000000000003E6ED" class="calibre20 pcalibre pcalibre1">F</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6EE" data-uri="chapter02.xhtml#P700049702700000000000000003E6EE" class="calibre20 pcalibre pcalibre1">Decimal value</td>
<td id="P700049702700000000000000003E6EF" data-uri="chapter02.xhtml#P700049702700000000000000003E6EF" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P700049702700000000000000003E6F0" data-uri="chapter02.xhtml#P700049702700000000000000003E6F0" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P700049702700000000000000003E6F1" data-uri="chapter02.xhtml#P700049702700000000000000003E6F1" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P700049702700000000000000003E6F2" data-uri="chapter02.xhtml#P700049702700000000000000003E6F2" class="calibre20 pcalibre pcalibre1">11</td>
<td id="P700049702700000000000000003E6F3" data-uri="chapter02.xhtml#P700049702700000000000000003E6F3" class="calibre20 pcalibre pcalibre1">12</td>
<td id="P700049702700000000000000003E6F4" data-uri="chapter02.xhtml#P700049702700000000000000003E6F4" class="calibre20 pcalibre pcalibre1">13</td>
<td id="P700049702700000000000000003E6F5" data-uri="chapter02.xhtml#P700049702700000000000000003E6F5" class="calibre20 pcalibre pcalibre1">14</td>
<td id="P700049702700000000000000003E6F6" data-uri="chapter02.xhtml#P700049702700000000000000003E6F6" class="calibre20 pcalibre pcalibre1">15</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E6F7" data-uri="chapter02.xhtml#P700049702700000000000000003E6F7" class="calibre20 pcalibre pcalibre1">Binary value</td>
<td id="P700049702700000000000000003E6F8" data-uri="chapter02.xhtml#P700049702700000000000000003E6F8" class="calibre20 pcalibre pcalibre1">1000</td>
<td id="P700049702700000000000000003E6F9" data-uri="chapter02.xhtml#P700049702700000000000000003E6F9" class="calibre20 pcalibre pcalibre1">1001</td>
<td id="P700049702700000000000000003E6FA" data-uri="chapter02.xhtml#P700049702700000000000000003E6FA" class="calibre20 pcalibre pcalibre1">1010</td>
<td id="P700049702700000000000000003E6FB" data-uri="chapter02.xhtml#P700049702700000000000000003E6FB" class="calibre20 pcalibre pcalibre1">1011</td>
<td id="P700049702700000000000000003E6FC" data-uri="chapter02.xhtml#P700049702700000000000000003E6FC" class="calibre20 pcalibre pcalibre1">1100</td>
<td id="P700049702700000000000000003E6FD" data-uri="chapter02.xhtml#P700049702700000000000000003E6FD" class="calibre20 pcalibre pcalibre1">1101</td>
<td id="P700049702700000000000000003E6FE" data-uri="chapter02.xhtml#P700049702700000000000000003E6FE" class="calibre20 pcalibre pcalibre1">1110</td>
<td id="P700049702700000000000000003E6FF" data-uri="chapter02.xhtml#P700049702700000000000000003E6FF" class="calibre20 pcalibre pcalibre1">1111</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000003E700" data-uri="chapter02.xhtml#P700049702700000000000000003E700" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E701" data-uri="chapter02.xhtml#P700049702700000000000000003E701" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.2 </span>Hexadecimal notation.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E702" data-uri="chapter02.xhtml#P700049702700000000000000003E702"><p id="P700049702700000000000000003E703" data-uri="chapter02.xhtml#P700049702700000000000000003E703" class="pcalibre calibre3 pcalibre1">Each hex digit encodes one of 16 values.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E704" data-uri="chapter02.xhtml#P700049702700000000000000003E704"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000326" title="37" data-uri="chapter02.xhtml#P7000497027000000000000000000326" epub:type="pagebreak"></span>The hex values <code id="P700049702700000000000000003E705" data-uri="chapter02.xhtml#P700049702700000000000000003E705" class="pcalibre1 calibre8 pcalibre">B, D</code>, and <code id="P700049702700000000000000003E706" data-uri="chapter02.xhtml#P700049702700000000000000003E706" class="pcalibre1 calibre8 pcalibre">E</code> can be translated to decimal by computing their values relative to the first three.</p>
<p id="P700049702700000000000000003E707" data-uri="chapter02.xhtml#P700049702700000000000000003E707" class="pcalibre1 pcalibre calibre2">For example, suppose you are given the number <code id="P700049702700000000000000003E708" data-uri="chapter02.xhtml#P700049702700000000000000003E708" class="pcalibre1 calibre8 pcalibre">0x173A4C</code>. You can convert this to binary format by expanding each hexadecimal digit, as follows:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E709" data-uri="chapter02.xhtml#P700049702700000000000000003E709">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E70A" data-uri="chapter02.xhtml#P700049702700000000000000003E70A" class="calibre20 pcalibre pcalibre1">Hexadecimal</td>
<td id="P700049702700000000000000003E70B" data-uri="chapter02.xhtml#P700049702700000000000000003E70B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E70C" data-uri="chapter02.xhtml#P700049702700000000000000003E70C" class="calibre10 pcalibre pcalibre1">1</code></td>
<td id="P700049702700000000000000003E70D" data-uri="chapter02.xhtml#P700049702700000000000000003E70D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E70E" data-uri="chapter02.xhtml#P700049702700000000000000003E70E" class="calibre10 pcalibre pcalibre1">7</code></td>
<td id="P700049702700000000000000003E70F" data-uri="chapter02.xhtml#P700049702700000000000000003E70F" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E710" data-uri="chapter02.xhtml#P700049702700000000000000003E710" class="calibre10 pcalibre pcalibre1">3</code></td>
<td id="P700049702700000000000000003E711" data-uri="chapter02.xhtml#P700049702700000000000000003E711" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E712" data-uri="chapter02.xhtml#P700049702700000000000000003E712" class="calibre10 pcalibre pcalibre1">A</code></td>
<td id="P700049702700000000000000003E713" data-uri="chapter02.xhtml#P700049702700000000000000003E713" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E714" data-uri="chapter02.xhtml#P700049702700000000000000003E714" class="calibre10 pcalibre pcalibre1">4</code></td>
<td id="P700049702700000000000000003E715" data-uri="chapter02.xhtml#P700049702700000000000000003E715" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E716" data-uri="chapter02.xhtml#P700049702700000000000000003E716" class="calibre10 pcalibre pcalibre1">C</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E717" data-uri="chapter02.xhtml#P700049702700000000000000003E717" class="calibre20 pcalibre pcalibre1">Binary</td>
<td id="P700049702700000000000000003E718" data-uri="chapter02.xhtml#P700049702700000000000000003E718" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E719" data-uri="chapter02.xhtml#P700049702700000000000000003E719" class="calibre10 pcalibre pcalibre1">0001</code></td>
<td id="P700049702700000000000000003E71A" data-uri="chapter02.xhtml#P700049702700000000000000003E71A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E71B" data-uri="chapter02.xhtml#P700049702700000000000000003E71B" class="calibre10 pcalibre pcalibre1">0111</code></td>
<td id="P700049702700000000000000003E71C" data-uri="chapter02.xhtml#P700049702700000000000000003E71C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E71D" data-uri="chapter02.xhtml#P700049702700000000000000003E71D" class="calibre10 pcalibre pcalibre1">0011</code></td>
<td id="P700049702700000000000000003E71E" data-uri="chapter02.xhtml#P700049702700000000000000003E71E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E71F" data-uri="chapter02.xhtml#P700049702700000000000000003E71F" class="calibre10 pcalibre pcalibre1">1010</code></td>
<td id="P700049702700000000000000003E720" data-uri="chapter02.xhtml#P700049702700000000000000003E720" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E721" data-uri="chapter02.xhtml#P700049702700000000000000003E721" class="calibre10 pcalibre pcalibre1">0100</code></td>
<td id="P700049702700000000000000003E722" data-uri="chapter02.xhtml#P700049702700000000000000003E722" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E723" data-uri="chapter02.xhtml#P700049702700000000000000003E723" class="calibre10 pcalibre pcalibre1">1100</code></td>
</tr>
</tbody>
</table>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E724" data-uri="chapter02.xhtml#P700049702700000000000000003E724">This gives the binary representation 000101110011101001001100.</p>
<p id="P700049702700000000000000003E725" data-uri="chapter02.xhtml#P700049702700000000000000003E725" class="pcalibre1 pcalibre calibre2">Conversely, given a binary number 1111001010110110110011, you convert it to hexadecimal by first splitting it into groups of 4 bits each. Note, however, that if the total number of bits is not a multiple of 4, you should make the <i class="calibre5 pcalibre pcalibre1">leftmost</i> group be the one with fewer than 4 bits, effectively padding the number with leading zeros. Then you translate each group of bits into the corresponding hexadecimal digit:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E726" data-uri="chapter02.xhtml#P700049702700000000000000003E726">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E727" data-uri="chapter02.xhtml#P700049702700000000000000003E727" class="calibre20 pcalibre pcalibre1">Binary</td>
<td id="P700049702700000000000000003E728" data-uri="chapter02.xhtml#P700049702700000000000000003E728" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E729" data-uri="chapter02.xhtml#P700049702700000000000000003E729" class="calibre10 pcalibre pcalibre1">11</code></td>
<td id="P700049702700000000000000003E72A" data-uri="chapter02.xhtml#P700049702700000000000000003E72A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E72B" data-uri="chapter02.xhtml#P700049702700000000000000003E72B" class="calibre10 pcalibre pcalibre1">1100</code></td>
<td id="P700049702700000000000000003E72C" data-uri="chapter02.xhtml#P700049702700000000000000003E72C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E72D" data-uri="chapter02.xhtml#P700049702700000000000000003E72D" class="calibre10 pcalibre pcalibre1">1010</code></td>
<td id="P700049702700000000000000003E72E" data-uri="chapter02.xhtml#P700049702700000000000000003E72E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E72F" data-uri="chapter02.xhtml#P700049702700000000000000003E72F" class="calibre10 pcalibre pcalibre1">1101</code></td>
<td id="P700049702700000000000000003E730" data-uri="chapter02.xhtml#P700049702700000000000000003E730" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E731" data-uri="chapter02.xhtml#P700049702700000000000000003E731" class="calibre10 pcalibre pcalibre1">1011</code></td>
<td id="P700049702700000000000000003E732" data-uri="chapter02.xhtml#P700049702700000000000000003E732" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E733" data-uri="chapter02.xhtml#P700049702700000000000000003E733" class="calibre10 pcalibre pcalibre1">0011</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E734" data-uri="chapter02.xhtml#P700049702700000000000000003E734" class="calibre20 pcalibre pcalibre1">Hexadecimal</td>
<td id="P700049702700000000000000003E735" data-uri="chapter02.xhtml#P700049702700000000000000003E735" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E736" data-uri="chapter02.xhtml#P700049702700000000000000003E736" class="calibre10 pcalibre pcalibre1">3</code></td>
<td id="P700049702700000000000000003E737" data-uri="chapter02.xhtml#P700049702700000000000000003E737" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E738" data-uri="chapter02.xhtml#P700049702700000000000000003E738" class="calibre10 pcalibre pcalibre1">C</code></td>
<td id="P700049702700000000000000003E739" data-uri="chapter02.xhtml#P700049702700000000000000003E739" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E73A" data-uri="chapter02.xhtml#P700049702700000000000000003E73A" class="calibre10 pcalibre pcalibre1">A</code></td>
<td id="P700049702700000000000000003E73B" data-uri="chapter02.xhtml#P700049702700000000000000003E73B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E73C" data-uri="chapter02.xhtml#P700049702700000000000000003E73C" class="calibre10 pcalibre pcalibre1">D</code></td>
<td id="P700049702700000000000000003E73D" data-uri="chapter02.xhtml#P700049702700000000000000003E73D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E73E" data-uri="chapter02.xhtml#P700049702700000000000000003E73E" class="calibre10 pcalibre pcalibre1">B</code></td>
<td id="P700049702700000000000000003E73F" data-uri="chapter02.xhtml#P700049702700000000000000003E73F" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E740" data-uri="chapter02.xhtml#P700049702700000000000000003E740" class="calibre10 pcalibre pcalibre1">3</code></td>
</tr>
</tbody>
</table>
<section id="P7000497027000000000000000000363" data-uri="chapter02.xhtml#P7000497027000000000000000000363" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E741" data-uri="chapter02.xhtml#P700049702700000000000000003E741" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.1</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001498.xhtml#P700049702700000000000000000179C">143</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E742" data-uri="chapter02.xhtml#P700049702700000000000000003E742">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E743" data-uri="chapter02.xhtml#P700049702700000000000000003E743">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E744" data-uri="chapter02.xhtml#P700049702700000000000000003E744"><p id="P700049702700000000000000003E745" data-uri="chapter02.xhtml#P700049702700000000000000003E745" class="pcalibre calibre3 pcalibre1">Perform the following number conversions:</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E746" data-uri="chapter02.xhtml#P700049702700000000000000003E746">
<li id="P700049702700000000000000000036A" data-uri="chapter02.xhtml#P700049702700000000000000000036A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E747" data-uri="chapter02.xhtml#P700049702700000000000000003E747" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E748" data-uri="chapter02.xhtml#P700049702700000000000000003E748" class="pcalibre1 calibre8 pcalibre">0x39A7F8</code> to binary</p></li>
<li id="P700049702700000000000000000036D" data-uri="chapter02.xhtml#P700049702700000000000000000036D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E749" data-uri="chapter02.xhtml#P700049702700000000000000003E749" class="pcalibre calibre3 pcalibre1">binary 1100100101111011 to hexadecimal</p></li>
<li id="P700049702700000000000000000036F" data-uri="chapter02.xhtml#P700049702700000000000000000036F" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E74A" data-uri="chapter02.xhtml#P700049702700000000000000003E74A" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E74B" data-uri="chapter02.xhtml#P700049702700000000000000003E74B" class="pcalibre1 calibre8 pcalibre">0xD5E4C</code> to binary</p></li>
<li id="P7000497027000000000000000000372" data-uri="chapter02.xhtml#P7000497027000000000000000000372" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E74C" data-uri="chapter02.xhtml#P700049702700000000000000003E74C" class="pcalibre calibre3 pcalibre1">binary 1001101110011110110101 to hexadecimal</p></li></ol></div></li></ol>
</section>
<p id="P700049702700000000000000003E74D" data-uri="chapter02.xhtml#P700049702700000000000000003E74D" class="pcalibre1 pcalibre calibre2">When a value <var class="calibre5 pcalibre pcalibre1">x</var> is a power of 2, that is, <var class="calibre5 pcalibre pcalibre1">x</var> = 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">n</var></sup> for some nonnegative integer <var class="calibre5 pcalibre pcalibre1">n</var>, we can readily write <var class="calibre5 pcalibre pcalibre1">x</var> in hexadecimal form by remembering that the binary representation of <var class="calibre5 pcalibre pcalibre1">x</var> is simply 1 followed by <var class="calibre5 pcalibre pcalibre1">n</var> zeros. The hexadecimal digit 0 represents 4 binary zeros. So, for <var class="calibre5 pcalibre pcalibre1">n</var> written in the form <var class="calibre5 pcalibre pcalibre1">i</var> + 4<var class="calibre5 pcalibre pcalibre1">j</var>, where 0 ≤ <var class="calibre5 pcalibre pcalibre1">i</var> ≤ 3, we can write <var class="calibre5 pcalibre pcalibre1">x</var> with a leading hex digit of 1 (<var class="calibre5 pcalibre pcalibre1">i</var> = 0), 2 (<var class="calibre5 pcalibre pcalibre1">i</var> = 1), 4 (<var class="calibre5 pcalibre pcalibre1">i</var> = 2), or 8 (<var class="calibre5 pcalibre pcalibre1">i</var> = 3), followed by <var class="calibre5 pcalibre pcalibre1">j</var> hexadecimal <code id="P700049702700000000000000003E74E" data-uri="chapter02.xhtml#P700049702700000000000000003E74E" class="pcalibre1 calibre8 pcalibre">0s</code>. As an example, for <var class="calibre5 pcalibre pcalibre1">x</var> = 2,048 = 211, we have <var class="calibre5 pcalibre pcalibre1">n</var> = 11 = 3 + 4·2, giving hexadecimal representation <code id="P700049702700000000000000003E74F" data-uri="chapter02.xhtml#P700049702700000000000000003E74F" class="pcalibre1 calibre8 pcalibre">0x800</code>.</p>
<section id="P7000497027000000000000000000377" data-uri="chapter02.xhtml#P7000497027000000000000000000377" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E750" data-uri="chapter02.xhtml#P700049702700000000000000003E750" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.2</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001498.xhtml#P700049702700000000000000000179C">143</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E751" data-uri="chapter02.xhtml#P700049702700000000000000003E751">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E752" data-uri="chapter02.xhtml#P700049702700000000000000003E752">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E753" data-uri="chapter02.xhtml#P700049702700000000000000003E753">
<p id="P700049702700000000000000003E754" data-uri="chapter02.xhtml#P700049702700000000000000003E754" class="pcalibre calibre3 pcalibre1">Fill in the blank entries in the following table, giving the decimal and hexadecimal representations of different powers of 2:<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000037D" title="38" data-uri="chapter02.xhtml#P700049702700000000000000000037D" epub:type="pagebreak"></span></p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E755" data-uri="chapter02.xhtml#P700049702700000000000000003E755">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E756" data-uri="chapter02.xhtml#P700049702700000000000000003E756" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">n</var></th>
<th id="P700049702700000000000000003E757" data-uri="chapter02.xhtml#P700049702700000000000000003E757" class="calibre18 pcalibre pcalibre1">2<sup class="pcalibre1 calibre21 pcalibre"><var class="calibre5 pcalibre pcalibre1">n</var></sup> (decimal)</th>
<th id="P700049702700000000000000003E758" data-uri="chapter02.xhtml#P700049702700000000000000003E758" class="calibre18 pcalibre pcalibre1">2<sup class="pcalibre1 calibre21 pcalibre"><var class="calibre5 pcalibre pcalibre1">n</var></sup> (hexadecimal)</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E759" data-uri="chapter02.xhtml#P700049702700000000000000003E759" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P700049702700000000000000003E75A" data-uri="chapter02.xhtml#P700049702700000000000000003E75A" class="calibre20 pcalibre pcalibre1">512</td>
<td id="P700049702700000000000000003E75B" data-uri="chapter02.xhtml#P700049702700000000000000003E75B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E75C" data-uri="chapter02.xhtml#P700049702700000000000000003E75C" class="calibre10 pcalibre pcalibre1">0x200</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E75D" data-uri="chapter02.xhtml#P700049702700000000000000003E75D" class="calibre20 pcalibre pcalibre1">19</td>
<td id="P700049702700000000000000003E75E" data-uri="chapter02.xhtml#P700049702700000000000000003E75E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E75F" data-uri="chapter02.xhtml#P700049702700000000000000003E75F" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000003E760" data-uri="chapter02.xhtml#P700049702700000000000000003E760" class="calibre20 pcalibre pcalibre1">16,384</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E761" data-uri="chapter02.xhtml#P700049702700000000000000003E761" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E762" data-uri="chapter02.xhtml#P700049702700000000000000003E762" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E763" data-uri="chapter02.xhtml#P700049702700000000000000003E763" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E764" data-uri="chapter02.xhtml#P700049702700000000000000003E764" class="calibre10 pcalibre pcalibre1">0x10000</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E765" data-uri="chapter02.xhtml#P700049702700000000000000003E765" class="calibre20 pcalibre pcalibre1">17</td>
<td id="P700049702700000000000000003E766" data-uri="chapter02.xhtml#P700049702700000000000000003E766" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E767" data-uri="chapter02.xhtml#P700049702700000000000000003E767" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E768" data-uri="chapter02.xhtml#P700049702700000000000000003E768" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E769" data-uri="chapter02.xhtml#P700049702700000000000000003E769" class="calibre20 pcalibre pcalibre1">32</td>
<td id="P700049702700000000000000003E76A" data-uri="chapter02.xhtml#P700049702700000000000000003E76A" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E76B" data-uri="chapter02.xhtml#P700049702700000000000000003E76B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E76C" data-uri="chapter02.xhtml#P700049702700000000000000003E76C" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E76D" data-uri="chapter02.xhtml#P700049702700000000000000003E76D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E76E" data-uri="chapter02.xhtml#P700049702700000000000000003E76E" class="calibre10 pcalibre pcalibre1">0x80</code></td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<p id="P700049702700000000000000003E76F" data-uri="chapter02.xhtml#P700049702700000000000000003E76F" class="pcalibre1 pcalibre calibre2">Converting between decimal and hexadecimal representations requires using multiplication or division to handle the general case. To convert a decimal number <var class="calibre5 pcalibre pcalibre1">x</var> to hexadecimal, we can repeatedly divide <var class="calibre5 pcalibre pcalibre1">x</var> by 16, giving a quotient <var class="calibre5 pcalibre pcalibre1">q</var> and a remainder<var class="calibre5 pcalibre pcalibre1">r</var>, such that <var class="calibre5 pcalibre pcalibre1">x</var> = <var class="calibre5 pcalibre pcalibre1">q</var> · 16 + <var class="calibre5 pcalibre pcalibre1">r</var>.We then use the hexadecimal digit representing <var class="calibre5 pcalibre pcalibre1">r</var> as the least significant digit and generate the remaining digits by repeating the process on <var class="calibre5 pcalibre pcalibre1">q</var>. As an example, consider the conversion of decimal 314,156:314,156</p>
<div class="informalequation pcalibre pcalibre1" id="P700049702700000000000000003E770" data-uri="chapter02.xhtml#P700049702700000000000000003E770"><m:math display="block" alttext="" data-uri="" altimg-width="266" altimg-height="159" altimg="../images/ch02-eq1.png"><m:mrow><m:mtable columnalign="right"><m:mtr columnalign="right"><m:mtd columnalign="right"><m:mrow><m:mn>314,156:314,156</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>19,634</m:mn><m:mo>⋅</m:mo><m:mn>16</m:mn><m:mo>+</m:mo><m:mn>12</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mrow><m:mrow><m:mo>(</m:mo><m:mtext>C</m:mtext><m:mo>)</m:mo></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr columnalign="right"><m:mtd columnalign="right"><m:mrow><m:mn>19,634</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>1,227</m:mn><m:mo>⋅</m:mo><m:mn>16</m:mn><m:mo>+</m:mo><m:mn>2</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mrow><m:mrow><m:mo>(</m:mo><m:mn>2</m:mn><m:mo>)</m:mo></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr columnalign="right"><m:mtd columnalign="right"><m:mrow><m:mn>1,227</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>76</m:mn><m:mo>⋅</m:mo><m:mn>16</m:mn><m:mo>+</m:mo><m:mn>11</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mrow><m:mrow><m:mo>(</m:mo><m:mtext>B</m:mtext><m:mo>)</m:mo></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr columnalign="right"><m:mtd columnalign="right"><m:mrow><m:mn>76</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>4</m:mn><m:mo>⋅</m:mo><m:mn>16</m:mn><m:mo>+</m:mo><m:mn>12</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mrow><m:mrow><m:mo>(</m:mo><m:mtext>C</m:mtext><m:mo>)</m:mo></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr columnalign="right"><m:mtd columnalign="right"><m:mn>4</m:mn></m:mtd><m:mtd columnalign="right"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>0</m:mn><m:mo>⋅</m:mo><m:mn>16</m:mn><m:mo>+</m:mo><m:mn>4</m:mn></m:mrow></m:mtd><m:mtd columnalign="right"><m:mrow><m:mrow><m:mo>(</m:mo><m:mn>4</m:mn><m:mo>)</m:mo></m:mrow></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math></div>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E771" data-uri="chapter02.xhtml#P700049702700000000000000003E771">From this we can read off the hexadecimal representation as <code id="P700049702700000000000000003E772" data-uri="chapter02.xhtml#P700049702700000000000000003E772" class="pcalibre1 calibre8 pcalibre">0x4CB2C</code>.</p>
<p id="P700049702700000000000000003E773" data-uri="chapter02.xhtml#P700049702700000000000000003E773" class="pcalibre1 pcalibre calibre2">Conversely, to convert a hexadecimal number to decimal, we can multiply each of the hexadecimal digits by the appropriate power of 16. For example, given the number <code id="P700049702700000000000000003E774" data-uri="chapter02.xhtml#P700049702700000000000000003E774" class="pcalibre1 calibre8 pcalibre">0x7AF</code>, we compute its decimal equivalent as 7 · 16<sup class="calibre51 pcalibre pcalibre1">2</sup> + 10 · 16 + 15 = 7 · 256 + 10 · 16 + 15 = 1,792 + 160 + 15 = 1,967.</p>
<section id="P700049702700000000000000000039E" data-uri="chapter02.xhtml#P700049702700000000000000000039E" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E775" data-uri="chapter02.xhtml#P700049702700000000000000003E775" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.3</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001823">144</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E776" data-uri="chapter02.xhtml#P700049702700000000000000003E776">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E777" data-uri="chapter02.xhtml#P700049702700000000000000003E777">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E778" data-uri="chapter02.xhtml#P700049702700000000000000003E778">
<p id="P700049702700000000000000003E779" data-uri="chapter02.xhtml#P700049702700000000000000003E779" class="pcalibre calibre3 pcalibre1">A single byte can be represented by 2 hexadecimal digits. Fill in the missing entries in the following table, giving the decimal, binary, and hexadecimal values of different byte patterns:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E77A" data-uri="chapter02.xhtml#P700049702700000000000000003E77A">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E77B" data-uri="chapter02.xhtml#P700049702700000000000000003E77B" class="calibre18 pcalibre pcalibre1">Decimal</th>
<th id="P700049702700000000000000003E77C" data-uri="chapter02.xhtml#P700049702700000000000000003E77C" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003E77D" data-uri="chapter02.xhtml#P700049702700000000000000003E77D" class="calibre18 pcalibre pcalibre1">Hexadecimal</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E77E" data-uri="chapter02.xhtml#P700049702700000000000000003E77E" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E77F" data-uri="chapter02.xhtml#P700049702700000000000000003E77F" class="calibre20 pcalibre pcalibre1">0000 0000</td>
<td id="P700049702700000000000000003E780" data-uri="chapter02.xhtml#P700049702700000000000000003E780" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E781" data-uri="chapter02.xhtml#P700049702700000000000000003E781" class="calibre10 pcalibre pcalibre1">0x00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E782" data-uri="chapter02.xhtml#P700049702700000000000000003E782" class="calibre20 pcalibre pcalibre1">167</td>
<td id="P700049702700000000000000003E783" data-uri="chapter02.xhtml#P700049702700000000000000003E783" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E784" data-uri="chapter02.xhtml#P700049702700000000000000003E784" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E785" data-uri="chapter02.xhtml#P700049702700000000000000003E785" class="calibre20 pcalibre pcalibre1">62</td>
<td id="P700049702700000000000000003E786" data-uri="chapter02.xhtml#P700049702700000000000000003E786" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E787" data-uri="chapter02.xhtml#P700049702700000000000000003E787" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E788" data-uri="chapter02.xhtml#P700049702700000000000000003E788" class="calibre20 pcalibre pcalibre1">188</td>
<td id="P700049702700000000000000003E789" data-uri="chapter02.xhtml#P700049702700000000000000003E789" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E78A" data-uri="chapter02.xhtml#P700049702700000000000000003E78A" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E78B" data-uri="chapter02.xhtml#P700049702700000000000000003E78B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E78C" data-uri="chapter02.xhtml#P700049702700000000000000003E78C" class="calibre20 pcalibre pcalibre1">0011 0111</td>
<td id="P700049702700000000000000003E78D" data-uri="chapter02.xhtml#P700049702700000000000000003E78D" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E78E" data-uri="chapter02.xhtml#P700049702700000000000000003E78E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E78F" data-uri="chapter02.xhtml#P700049702700000000000000003E78F" class="calibre20 pcalibre pcalibre1">1000 1000</td>
<td id="P700049702700000000000000003E790" data-uri="chapter02.xhtml#P700049702700000000000000003E790" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E791" data-uri="chapter02.xhtml#P700049702700000000000000003E791" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E792" data-uri="chapter02.xhtml#P700049702700000000000000003E792" class="calibre20 pcalibre pcalibre1">1111 0011</td>
<td id="P700049702700000000000000003E793" data-uri="chapter02.xhtml#P700049702700000000000000003E793" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000003BE" data-uri="chapter02.xhtml#P70004970270000000000000000003BE"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E794" data-uri="chapter02.xhtml#P700049702700000000000000003E794" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000003C0" title="39" data-uri="chapter02.xhtml#P70004970270000000000000000003C0" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Converting between decimal and hexadecimal</h1></header>
<p id="P700049702700000000000000003E795" data-uri="chapter02.xhtml#P700049702700000000000000003E795" class="pcalibre calibre3 pcalibre1">For converting larger values between decimal and hexadecimal, it is best to let a computer or calculator do the work. There are numerous tools that can do this. One simple way is to use any of the standard search engines, with queries such as</p>
<blockquote id="P700049702700000000000000003E796" data-uri="chapter02.xhtml#P700049702700000000000000003E796" class="pcalibre7 pcalibre8 calibre52">
<p id="P700049702700000000000000003E797" data-uri="chapter02.xhtml#P700049702700000000000000003E797" class="pcalibre calibre3 pcalibre1">Convert <code id="P700049702700000000000000003E798" data-uri="chapter02.xhtml#P700049702700000000000000003E798" class="calibre10 pcalibre pcalibre1">0xabcd</code> to decimal</p>
</blockquote>
or
<blockquote id="P700049702700000000000000003E799" data-uri="chapter02.xhtml#P700049702700000000000000003E799" class="pcalibre7 pcalibre8 calibre52">
<p id="P700049702700000000000000003E79A" data-uri="chapter02.xhtml#P700049702700000000000000003E79A" class="pcalibre calibre3 pcalibre1">123 in hex</p>
</blockquote>
</aside>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E79B" data-uri="chapter02.xhtml#P700049702700000000000000003E79B">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E79C" data-uri="chapter02.xhtml#P700049702700000000000000003E79C" class="calibre18 pcalibre pcalibre1">Decimal</th>
<th id="P700049702700000000000000003E79D" data-uri="chapter02.xhtml#P700049702700000000000000003E79D" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003E79E" data-uri="chapter02.xhtml#P700049702700000000000000003E79E" class="calibre18 pcalibre pcalibre1">Hexadecimal</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E79F" data-uri="chapter02.xhtml#P700049702700000000000000003E79F" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A0" data-uri="chapter02.xhtml#P700049702700000000000000003E7A0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A1" data-uri="chapter02.xhtml#P700049702700000000000000003E7A1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7A2" data-uri="chapter02.xhtml#P700049702700000000000000003E7A2" class="calibre10 pcalibre pcalibre1">0x52</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7A3" data-uri="chapter02.xhtml#P700049702700000000000000003E7A3" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A4" data-uri="chapter02.xhtml#P700049702700000000000000003E7A4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A5" data-uri="chapter02.xhtml#P700049702700000000000000003E7A5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7A6" data-uri="chapter02.xhtml#P700049702700000000000000003E7A6" class="calibre10 pcalibre pcalibre1">0xAC</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7A7" data-uri="chapter02.xhtml#P700049702700000000000000003E7A7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A8" data-uri="chapter02.xhtml#P700049702700000000000000003E7A8" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E7A9" data-uri="chapter02.xhtml#P700049702700000000000000003E7A9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7AA" data-uri="chapter02.xhtml#P700049702700000000000000003E7AA" class="calibre10 pcalibre pcalibre1">0xE7</code></td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<section id="P70004970270000000000000000003D7" data-uri="chapter02.xhtml#P70004970270000000000000000003D7" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E7AB" data-uri="chapter02.xhtml#P700049702700000000000000003E7AB" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.4</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001823">144</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E7AC" data-uri="chapter02.xhtml#P700049702700000000000000003E7AC">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E7AD" data-uri="chapter02.xhtml#P700049702700000000000000003E7AD">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E7AE" data-uri="chapter02.xhtml#P700049702700000000000000003E7AE"><p id="P700049702700000000000000003E7AF" data-uri="chapter02.xhtml#P700049702700000000000000003E7AF" class="pcalibre calibre3 pcalibre1">
Without converting the numbers to decimal or binary, try to solve the following arithmetic problems, giving the answers in hexadecimal. <i class="calibre5 pcalibre pcalibre1">Hint:</i> Just modify the methods you use for performing decimal addition and subtraction to use base 16.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E7B0" data-uri="chapter02.xhtml#P700049702700000000000000003E7B0">
<li id="P70004970270000000000000000003DE" data-uri="chapter02.xhtml#P70004970270000000000000000003DE" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E7B1" data-uri="chapter02.xhtml#P700049702700000000000000003E7B1" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E7B2" data-uri="chapter02.xhtml#P700049702700000000000000003E7B2" class="pcalibre1 calibre8 pcalibre">0x503c + 0x8 =</code> __________</p></li>
<li id="P70004970270000000000000000003E1" data-uri="chapter02.xhtml#P70004970270000000000000000003E1" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E7B3" data-uri="chapter02.xhtml#P700049702700000000000000003E7B3" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E7B4" data-uri="chapter02.xhtml#P700049702700000000000000003E7B4" class="pcalibre1 calibre8 pcalibre">0x503c – 0x40 =</code> __________</p></li>
<li id="P70004970270000000000000000003E4" data-uri="chapter02.xhtml#P70004970270000000000000000003E4" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E7B5" data-uri="chapter02.xhtml#P700049702700000000000000003E7B5" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E7B6" data-uri="chapter02.xhtml#P700049702700000000000000003E7B6" class="pcalibre1 calibre8 pcalibre">0x503c + 64 =</code> __________</p></li>
<li id="P70004970270000000000000000003E7" data-uri="chapter02.xhtml#P70004970270000000000000000003E7" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E7B7" data-uri="chapter02.xhtml#P700049702700000000000000003E7B7" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003E7B8" data-uri="chapter02.xhtml#P700049702700000000000000003E7B8" class="pcalibre1 calibre8 pcalibre">0x50ea – 0x503c =</code> __________</p></li>
</ol></div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000003EA" data-uri="chapter02.xhtml#P70004970270000000000000000003EA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E7B9" data-uri="chapter02.xhtml#P700049702700000000000000003E7B9" epub:type="title"><span class="pcalibre label pcalibre1">2.1.2 </span>Data Sizes</h1></header>
<p id="P700049702700000000000000003E7BA" data-uri="chapter02.xhtml#P700049702700000000000000003E7BA" class="pcalibre1 pcalibre calibre2">Every computer has a <i class="calibre5 pcalibre pcalibre1">word size</i>, indicating the nominal size of pointer data. Since a virtual address is encoded by such a word, the most important system parameter determined by the word size is the maximum size of the virtual address space. That is, for a machine with a <var class="calibre5 pcalibre pcalibre1">w</var>-bit word size, the virtual addresses can range from 0 to 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">w</var></sup> — 1, giving the program access to at most 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">w</var></sup> bytes.</p>
<p id="P700049702700000000000000003E7BB" data-uri="chapter02.xhtml#P700049702700000000000000003E7BB" class="pcalibre1 pcalibre calibre2">In recent years, there has been a widespread shift from machines with 32-bit word sizes to those with word sizes of 64 bits. This occurred first for high-end machines designed for large-scale scientific and database applications, followed by desktop and laptop machines, and most recently for the processors found in smartphones. A 32-bit word size limits the virtual address space to 4 gigabytes (written 4 GB), that is, just over 4 × 10<sup class="calibre51 pcalibre pcalibre1">9</sup> bytes. Scaling up to a 64-bit word size leads to a virtual address space of 16 <i class="calibre5 pcalibre pcalibre1">exabytes</i>, or around 1.84 × 10<sup class="calibre51 pcalibre pcalibre1">19</sup> bytes.</p>
<p id="P700049702700000000000000003E7BC" data-uri="chapter02.xhtml#P700049702700000000000000003E7BC" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000003EF" title="40" data-uri="chapter02.xhtml#P70004970270000000000000000003EF" epub:type="pagebreak"></span>Most 64-bit machines can also run programs compiled for use on 32-bit machines, a form of backward compatibility. So, for example, when a program <code id="P700049702700000000000000003E7BD" data-uri="chapter02.xhtml#P700049702700000000000000003E7BD" class="pcalibre1 calibre8 pcalibre">prog.c</code> is compiled with the directive</p>
<pre id="P700049702700000000000000003E7BE" data-uri="chapter02.xhtml#P700049702700000000000000003E7BE" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E7BF" data-uri="chapter02.xhtml#P700049702700000000000000003E7BF" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc –m32 prog.c</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E7C0" data-uri="chapter02.xhtml#P700049702700000000000000003E7C0">then this program will run correctly on either a 32-bit or a 64-bit machine. On the other hand, a program compiled with the directive</p>
<pre id="P700049702700000000000000003E7C1" data-uri="chapter02.xhtml#P700049702700000000000000003E7C1" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E7C2" data-uri="chapter02.xhtml#P700049702700000000000000003E7C2" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc –m64 prog.c</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E7C3" data-uri="chapter02.xhtml#P700049702700000000000000003E7C3">will only run on a 64-bit machine. We will therefore refer to programs as being either “32-bit programs” or “64-bit programs,” since the distinction lies in how a program is compiled, rather than the type of machine on which it runs.</p>
<p id="P700049702700000000000000003E7C4" data-uri="chapter02.xhtml#P700049702700000000000000003E7C4" class="pcalibre1 pcalibre calibre2">Computers and compilers support multiple data formats using different ways to encode data, such as integers and floating point, as well as different lengths. For example, many machines have instructions for manipulating single bytes, as well as integers represented as 2-, 4-, and 8-byte quantities. They also support floating-point numbers represented as 4- and 8-byte quantities.</p>
<p id="P700049702700000000000000003E7C5" data-uri="chapter02.xhtml#P700049702700000000000000003E7C5" class="pcalibre1 pcalibre calibre2">The C language supports multiple data formats for both integer and floating-point data. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.3</span></a> shows the number of bytes typically allocated for different C data types. (We discuss the relation between what is guaranteed by the C standard versus. what is typical in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000077D_split_000.xhtml#P700049702700000000000000000077D"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">2.2</span></a>.) The exact numbers of bytes for some data types depends on how the program is compiled. We show sizes for typical 32-bit and 64-bit programs. Integer data can be either <i class="calibre5 pcalibre pcalibre1">signed</i>, able to represent negative, zero, and positive values, or <i class="calibre5 pcalibre pcalibre1">unsigned</i>, only allowing nonnegative values. Data type char represents a single byte. Although the name char derives from the fact that it is used to store a single character in a text string, it can also be used to store integer values. Data types <code id="P700049702700000000000000003E7C6" data-uri="chapter02.xhtml#P700049702700000000000000003E7C6" class="pcalibre1 calibre8 pcalibre">short, int</code>, and <code id="P700049702700000000000000003E7C7" data-uri="chapter02.xhtml#P700049702700000000000000003E7C7" class="pcalibre1 calibre8 pcalibre">long</code> are intended to provide a range of</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000003FB" data-uri="chapter02.xhtml#P70004970270000000000000000003FB">
<table id="P700049702700000000000000003E7C8" data-uri="chapter02.xhtml#P700049702700000000000000003E7C8" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P700049702700000000000000003E7C9" data-uri="chapter02.xhtml#P700049702700000000000000003E7C9" class="calibre18 pcalibre pcalibre1">C declaration</th>
<th colspan="2" id="P700049702700000000000000003E7CA" data-uri="chapter02.xhtml#P700049702700000000000000003E7CA" class="calibre18 pcalibre pcalibre1">Bytes</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E7CB" data-uri="chapter02.xhtml#P700049702700000000000000003E7CB" class="calibre18 pcalibre pcalibre1">Signed</th>
<th id="P700049702700000000000000003E7CC" data-uri="chapter02.xhtml#P700049702700000000000000003E7CC" class="calibre18 pcalibre pcalibre1">Unsigned</th>
<th id="P700049702700000000000000003E7CD" data-uri="chapter02.xhtml#P700049702700000000000000003E7CD" class="calibre18 pcalibre pcalibre1">32-bit</th>
<th id="P700049702700000000000000003E7CE" data-uri="chapter02.xhtml#P700049702700000000000000003E7CE" class="calibre18 pcalibre pcalibre1">64-bit</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7CF" data-uri="chapter02.xhtml#P700049702700000000000000003E7CF" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7D0" data-uri="chapter02.xhtml#P700049702700000000000000003E7D0" class="calibre10 pcalibre pcalibre1">[signed] char</code></td>
<td id="P700049702700000000000000003E7D1" data-uri="chapter02.xhtml#P700049702700000000000000003E7D1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7D2" data-uri="chapter02.xhtml#P700049702700000000000000003E7D2" class="calibre10 pcalibre pcalibre1">unsigned char</code></td>
<td id="P700049702700000000000000003E7D3" data-uri="chapter02.xhtml#P700049702700000000000000003E7D3" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E7D4" data-uri="chapter02.xhtml#P700049702700000000000000003E7D4" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7D5" data-uri="chapter02.xhtml#P700049702700000000000000003E7D5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7D6" data-uri="chapter02.xhtml#P700049702700000000000000003E7D6" class="calibre10 pcalibre pcalibre1">short</code></td>
<td id="P700049702700000000000000003E7D7" data-uri="chapter02.xhtml#P700049702700000000000000003E7D7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7D8" data-uri="chapter02.xhtml#P700049702700000000000000003E7D8" class="calibre10 pcalibre pcalibre1">unsigned short</code></td>
<td id="P700049702700000000000000003E7D9" data-uri="chapter02.xhtml#P700049702700000000000000003E7D9" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P700049702700000000000000003E7DA" data-uri="chapter02.xhtml#P700049702700000000000000003E7DA" class="calibre20 pcalibre pcalibre1">2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7DB" data-uri="chapter02.xhtml#P700049702700000000000000003E7DB" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7DC" data-uri="chapter02.xhtml#P700049702700000000000000003E7DC" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000003E7DD" data-uri="chapter02.xhtml#P700049702700000000000000003E7DD" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7DE" data-uri="chapter02.xhtml#P700049702700000000000000003E7DE" class="calibre10 pcalibre pcalibre1">unsigned</code></td>
<td id="P700049702700000000000000003E7DF" data-uri="chapter02.xhtml#P700049702700000000000000003E7DF" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E7E0" data-uri="chapter02.xhtml#P700049702700000000000000003E7E0" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7E1" data-uri="chapter02.xhtml#P700049702700000000000000003E7E1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7E2" data-uri="chapter02.xhtml#P700049702700000000000000003E7E2" class="calibre10 pcalibre pcalibre1">long</code></td>
<td id="P700049702700000000000000003E7E3" data-uri="chapter02.xhtml#P700049702700000000000000003E7E3" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7E4" data-uri="chapter02.xhtml#P700049702700000000000000003E7E4" class="calibre10 pcalibre pcalibre1">unsigned long</code></td>
<td id="P700049702700000000000000003E7E5" data-uri="chapter02.xhtml#P700049702700000000000000003E7E5" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E7E6" data-uri="chapter02.xhtml#P700049702700000000000000003E7E6" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7E7" data-uri="chapter02.xhtml#P700049702700000000000000003E7E7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7E8" data-uri="chapter02.xhtml#P700049702700000000000000003E7E8" class="calibre10 pcalibre pcalibre1">int32_t</code></td>
<td id="P700049702700000000000000003E7E9" data-uri="chapter02.xhtml#P700049702700000000000000003E7E9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7EA" data-uri="chapter02.xhtml#P700049702700000000000000003E7EA" class="calibre10 pcalibre pcalibre1">uint32_t</code></td>
<td id="P700049702700000000000000003E7EB" data-uri="chapter02.xhtml#P700049702700000000000000003E7EB" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E7EC" data-uri="chapter02.xhtml#P700049702700000000000000003E7EC" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7ED" data-uri="chapter02.xhtml#P700049702700000000000000003E7ED" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7EE" data-uri="chapter02.xhtml#P700049702700000000000000003E7EE" class="calibre10 pcalibre pcalibre1">int64_t</code></td>
<td id="P700049702700000000000000003E7EF" data-uri="chapter02.xhtml#P700049702700000000000000003E7EF" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7F0" data-uri="chapter02.xhtml#P700049702700000000000000003E7F0" class="calibre10 pcalibre pcalibre1">uint64_t</code></td>
<td id="P700049702700000000000000003E7F1" data-uri="chapter02.xhtml#P700049702700000000000000003E7F1" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P700049702700000000000000003E7F2" data-uri="chapter02.xhtml#P700049702700000000000000003E7F2" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7F3" data-uri="chapter02.xhtml#P700049702700000000000000003E7F3" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7F4" data-uri="chapter02.xhtml#P700049702700000000000000003E7F4" class="calibre10 pcalibre pcalibre1">char *</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000003E7F5" data-uri="chapter02.xhtml#P700049702700000000000000003E7F5" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E7F6" data-uri="chapter02.xhtml#P700049702700000000000000003E7F6" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7F7" data-uri="chapter02.xhtml#P700049702700000000000000003E7F7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7F8" data-uri="chapter02.xhtml#P700049702700000000000000003E7F8" class="calibre10 pcalibre pcalibre1">float</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000003E7F9" data-uri="chapter02.xhtml#P700049702700000000000000003E7F9" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P700049702700000000000000003E7FA" data-uri="chapter02.xhtml#P700049702700000000000000003E7FA" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E7FB" data-uri="chapter02.xhtml#P700049702700000000000000003E7FB" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E7FC" data-uri="chapter02.xhtml#P700049702700000000000000003E7FC" class="calibre10 pcalibre pcalibre1">double</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000003E7FD" data-uri="chapter02.xhtml#P700049702700000000000000003E7FD" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P700049702700000000000000003E7FE" data-uri="chapter02.xhtml#P700049702700000000000000003E7FE" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000003E7FF" data-uri="chapter02.xhtml#P700049702700000000000000003E7FF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E800" data-uri="chapter02.xhtml#P700049702700000000000000003E800" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.3 </span>Typical sizes (in bytes) of basic C data types.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E801" data-uri="chapter02.xhtml#P700049702700000000000000003E801"><p id="P700049702700000000000000003E802" data-uri="chapter02.xhtml#P700049702700000000000000003E802" class="pcalibre calibre3 pcalibre1">The number of bytes allocated varies with how the program is compiled. This chart shows the values typical of 32-bit and 64-bit programs.</p></div></figcaption>
</figure>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000437" data-uri="chapter02.xhtml#P7000497027000000000000000000437"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E803" data-uri="chapter02.xhtml#P700049702700000000000000003E803" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000439" title="41" data-uri="chapter02.xhtml#P7000497027000000000000000000439" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">New to C? </span>Declaring pointers</h1></header>
<p id="P700049702700000000000000003E804" data-uri="chapter02.xhtml#P700049702700000000000000003E804" class="calibre13 pcalibre pcalibre1">For any data type <var class="calibre5 pcalibre pcalibre1">T</var>, the declaration</p>
<pre id="P700049702700000000000000003E805" data-uri="chapter02.xhtml#P700049702700000000000000003E805" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E806" data-uri="chapter02.xhtml#P700049702700000000000000003E806" class="calibre10 pcalibre pcalibre1">
<var class="calibre5 pcalibre pcalibre1">T</var> *p;
</code></pre>
<p class="calibre13 pcalibre pcalibre1" id="P700049702700000000000000003E807" data-uri="chapter02.xhtml#P700049702700000000000000003E807">indicates that p is a pointer variable, pointing to an object of type <var class="calibre5 pcalibre pcalibre1">T</var>. For example,</p>
<pre id="P700049702700000000000000003E808" data-uri="chapter02.xhtml#P700049702700000000000000003E808" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E809" data-uri="chapter02.xhtml#P700049702700000000000000003E809" class="calibre10 pcalibre pcalibre1">
char *p;
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003E80A" data-uri="chapter02.xhtml#P700049702700000000000000003E80A">is the declaration of a pointer to an object of type <code id="P700049702700000000000000003E80B" data-uri="chapter02.xhtml#P700049702700000000000000003E80B" class="pcalibre1 calibre8 pcalibre">char</code>.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E80C" data-uri="chapter02.xhtml#P700049702700000000000000003E80C">sizes. Even when compiled for 64-bit systems, data type <code id="P700049702700000000000000003E80D" data-uri="chapter02.xhtml#P700049702700000000000000003E80D" class="pcalibre1 calibre8 pcalibre">int</code> is usually just 4 bytes. Data type <code id="P700049702700000000000000003E80E" data-uri="chapter02.xhtml#P700049702700000000000000003E80E" class="pcalibre1 calibre8 pcalibre">long</code> commonly has 4 bytes in 32-bit programs and 8 bytes in 64-bit programs.</p>
<p id="P700049702700000000000000003E80F" data-uri="chapter02.xhtml#P700049702700000000000000003E80F" class="pcalibre1 pcalibre calibre2">To avoid the vagaries of relying on “typical” sizes and different compiler settings, ISO C99 introduced a class of data types where the data sizes are fixed regardless of compiler and machine settings. Among these are data types <code id="P700049702700000000000000003E810" data-uri="chapter02.xhtml#P700049702700000000000000003E810" class="pcalibre1 calibre8 pcalibre">int32_t</code> and <code id="P700049702700000000000000003E811" data-uri="chapter02.xhtml#P700049702700000000000000003E811" class="pcalibre1 calibre8 pcalibre">int64_t</code>, having exactly 4 and 8 bytes, respectively. Using fixed-size integer types is the best way for programmers to have close control over data representations.</p>
<p id="P700049702700000000000000003E812" data-uri="chapter02.xhtml#P700049702700000000000000003E812" class="pcalibre1 pcalibre calibre2">Most of the data types encode signed values, unless prefixed by the keyword unsigned or using the specific unsigned declaration for fixed-size data types. The exception to this is data type <code id="P700049702700000000000000003E813" data-uri="chapter02.xhtml#P700049702700000000000000003E813" class="pcalibre1 calibre8 pcalibre">char</code>. Although most compilers and machines treat these as signed data, the C standard does not guarantee this. Instead, as indicated by the square brackets, the programmer should use the declaration <code id="P700049702700000000000000003E814" data-uri="chapter02.xhtml#P700049702700000000000000003E814" class="pcalibre1 calibre8 pcalibre">signed char</code> to guarantee a 1-byte signed value. In many contexts, however, the program's behavior is insensitive to whether data type <code id="P700049702700000000000000003E815" data-uri="chapter02.xhtml#P700049702700000000000000003E815" class="pcalibre1 calibre8 pcalibre">char</code> is signed or unsigned.</p>
<p id="P700049702700000000000000003E816" data-uri="chapter02.xhtml#P700049702700000000000000003E816" class="pcalibre1 pcalibre calibre2">The C language allows a variety of ways to order the keywords and to include or omit optional keywords. As examples, all of the following declarations have identical meaning:</p>
<pre id="P700049702700000000000000003E817" data-uri="chapter02.xhtml#P700049702700000000000000003E817" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E818" data-uri="chapter02.xhtml#P700049702700000000000000003E818" class="calibre10 pcalibre pcalibre1">
  unsigned long
  unsigned long int
  long unsigned
  long unsigned int
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E819" data-uri="chapter02.xhtml#P700049702700000000000000003E819">We will consistently use the forms found in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.3</span></a>.</p>
<p id="P700049702700000000000000003E81A" data-uri="chapter02.xhtml#P700049702700000000000000003E81A" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.3</span></a> also shows that a pointer (e.g., a variable declared as being of type <code id="P700049702700000000000000003E81B" data-uri="chapter02.xhtml#P700049702700000000000000003E81B" class="pcalibre1 calibre8 pcalibre">char *</code>) uses the full word size of the program. Most machines also support two different floating-point formats: single precision, declared in C as <code id="P700049702700000000000000003E81C" data-uri="chapter02.xhtml#P700049702700000000000000003E81C" class="pcalibre1 calibre8 pcalibre">float</code>, and double precision, declared in C as <code id="P700049702700000000000000003E81D" data-uri="chapter02.xhtml#P700049702700000000000000003E81D" class="pcalibre1 calibre8 pcalibre">double</code>. These formats use 4 and 8 bytes, respectively.</p>
<p id="P700049702700000000000000003E81E" data-uri="chapter02.xhtml#P700049702700000000000000003E81E" class="pcalibre1 pcalibre calibre2">Programmers should strive to make their programs portable across different machines and compilers. One aspect of portability is to make the program insensitive to the exact sizes of the different data types. The C standards set lower bounds <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000455" title="42" data-uri="chapter02.xhtml#P7000497027000000000000000000455" epub:type="pagebreak"></span>on the numeric ranges of the different data types, as will be covered later, but there are no upper bounds (except with the fixed-size types). With 32-bit machines and 32-bit programs being the dominant combination from around 1980 until around 2010, many programs have been written assuming the allocations listed for 32-bit programs in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.3</span></a>. With the transition to 64-bit machines, many hidden word size dependencies have arisen as bugs in migrating these programs to new machines. For example, many programmers historically assumed that an object declared as type <code id="P700049702700000000000000003E81F" data-uri="chapter02.xhtml#P700049702700000000000000003E81F" class="pcalibre1 calibre8 pcalibre">int</code> could be used to store a pointer. This works fine for most 32-bit programs, but it leads to problems for 64-bit programs.</p>
</section>
<section id="P7000497027000000000000000000457" data-uri="chapter02.xhtml#P7000497027000000000000000000457" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E820" data-uri="chapter02.xhtml#P700049702700000000000000003E820" epub:type="title"><span class="pcalibre label pcalibre1">2.1.3 </span>Addressing and Byte Ordering</h1></header>
<p id="P700049702700000000000000003E821" data-uri="chapter02.xhtml#P700049702700000000000000003E821" class="pcalibre1 pcalibre calibre2">For program objects that span multiple bytes, we must establish two conventions: what the address of the object will be, and how we will order the bytes in memory. In virtually all machines, a multi-byte object is stored as a contiguous sequence of bytes, with the address of the object given by the smallest address of the bytes used. For example, suppose a variable <code id="P700049702700000000000000003E822" data-uri="chapter02.xhtml#P700049702700000000000000003E822" class="pcalibre1 calibre8 pcalibre">x</code> of type <code id="P700049702700000000000000003E823" data-uri="chapter02.xhtml#P700049702700000000000000003E823" class="pcalibre1 calibre8 pcalibre">int</code> has address <code id="P700049702700000000000000003E824" data-uri="chapter02.xhtml#P700049702700000000000000003E824" class="pcalibre1 calibre8 pcalibre">0x100</code>; that is, the value of the address expression <code id="P700049702700000000000000003E825" data-uri="chapter02.xhtml#P700049702700000000000000003E825" class="pcalibre1 calibre8 pcalibre">&amp;x</code> is <code id="P700049702700000000000000003E826" data-uri="chapter02.xhtml#P700049702700000000000000003E826" class="pcalibre1 calibre8 pcalibre">0x100</code>. Then (assuming data type <code id="P700049702700000000000000003E827" data-uri="chapter02.xhtml#P700049702700000000000000003E827" class="pcalibre1 calibre8 pcalibre">int</code> has a 32-bit representation) the 4 bytes of <code id="P700049702700000000000000003E828" data-uri="chapter02.xhtml#P700049702700000000000000003E828" class="pcalibre1 calibre8 pcalibre">x</code> would be stored in memory locations <code id="P700049702700000000000000003E829" data-uri="chapter02.xhtml#P700049702700000000000000003E829" class="pcalibre1 calibre8 pcalibre">0x100, 0x101, 0x102</code>, and <code id="P700049702700000000000000003E82A" data-uri="chapter02.xhtml#P700049702700000000000000003E82A" class="pcalibre1 calibre8 pcalibre">0x103.</code></p>
<p id="P700049702700000000000000003E82B" data-uri="chapter02.xhtml#P700049702700000000000000003E82B" class="pcalibre1 pcalibre calibre2">For ordering the bytes representing an object, there are two common conventions. Consider a <var class="calibre5 pcalibre pcalibre1">w</var>-bit integer having a bit representation <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="207" altimg-height="21" altimg="../images/ch02-new01.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>⋯</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, where <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><var class="calibre5 pcalibre pcalibre1">w</var>–1</sub> is the most significant bit and <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub> is the least. Assuming <var class="calibre5 pcalibre pcalibre1">w</var> is a multiple of 8, these bits can be grouped as bytes, with the most significant byte having bits <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="204" altimg-height="21" altimg="../images/ch02-new02.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>⋯</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>8</m:mn></m:mrow></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, the least significant byte having bits <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="132" altimg-height="21" altimg="../images/ch02-new03.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mn>7</m:mn></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>6</m:mn></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, and the other bytes having bits from the middle. Some machines choose to store the object in memory ordered from least significant byte to most, while other machines store them from most to least. The former convention—where the least significant byte comes first—is referred to as <i class="calibre5 pcalibre pcalibre1">little endian</i>. The latter convention—where the most significant byte comes first—is referred to as <i class="calibre5 pcalibre pcalibre1">big endian</i>.</p>
<p id="P700049702700000000000000003E82C" data-uri="chapter02.xhtml#P700049702700000000000000003E82C" class="pcalibre1 pcalibre calibre2">Suppose the variable <code id="P700049702700000000000000003E82D" data-uri="chapter02.xhtml#P700049702700000000000000003E82D" class="pcalibre1 calibre8 pcalibre">x</code> of type <code id="P700049702700000000000000003E82E" data-uri="chapter02.xhtml#P700049702700000000000000003E82E" class="pcalibre1 calibre8 pcalibre">int</code> and at address <code id="P700049702700000000000000003E82F" data-uri="chapter02.xhtml#P700049702700000000000000003E82F" class="pcalibre1 calibre8 pcalibre">0x100</code> has a hexadecimal value of <code id="P700049702700000000000000003E830" data-uri="chapter02.xhtml#P700049702700000000000000003E830" class="pcalibre1 calibre8 pcalibre">0x01234567</code>. The ordering of the bytes within the address range <code id="P700049702700000000000000003E831" data-uri="chapter02.xhtml#P700049702700000000000000003E831" class="pcalibre1 calibre8 pcalibre">0x100</code> through <code id="P700049702700000000000000003E832" data-uri="chapter02.xhtml#P700049702700000000000000003E832" class="pcalibre1 calibre8 pcalibre">0x103</code> depends on the type of machine:</p>
<figure id="P700049702700000000000000000046B" class="pcalibre5 figure pcalibre" data-uri="chapter02.xhtml#P700049702700000000000000000046B">
<img alt="Diagrams list the ordering of bytes within big endian and little endian machines." id="P700049702700000000000000003E833" data-uri="P700049702700000000000000000B6EA" src="../images/p42-1.png" class="pcalibre calibre53 pcalibre1"/>
<figcaption id="P700049702700000000000000003E834" data-uri="chapter02.xhtml#P700049702700000000000000003E834" class="calibre11 pcalibre pcalibre1">
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001EB08" data-uri="chapter02.xhtml#P700049702700000000000000001EB08">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E835" data-uri="chapter02.xhtml#P700049702700000000000000003E835" class="pcalibre1 pcalibre calibre2">The bytes within 0x100 to 0x103 for big endian and little endian are summarized in the following table.</p>
<table id="P700049702700000000000000003E836" data-uri="chapter02.xhtml#P700049702700000000000000003E836" class="pcalibre largetable pcalibre1">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000003E837" data-uri="chapter02.xhtml#P700049702700000000000000003E837" class="calibre20 pcalibre pcalibre1">0x100</td>
<td id="P700049702700000000000000003E838" data-uri="chapter02.xhtml#P700049702700000000000000003E838" class="calibre20 pcalibre pcalibre1">0x101</td>
<td id="P700049702700000000000000003E839" data-uri="chapter02.xhtml#P700049702700000000000000003E839" class="calibre20 pcalibre pcalibre1">0x102</td>
<td id="P700049702700000000000000003E83A" data-uri="chapter02.xhtml#P700049702700000000000000003E83A" class="calibre20 pcalibre pcalibre1">0x103</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E83B" data-uri="chapter02.xhtml#P700049702700000000000000003E83B" class="calibre20 pcalibre pcalibre1">Big endian</td>
<td id="P700049702700000000000000003E83C" data-uri="chapter02.xhtml#P700049702700000000000000003E83C" class="calibre20 pcalibre pcalibre1">01</td>
<td id="P700049702700000000000000003E83D" data-uri="chapter02.xhtml#P700049702700000000000000003E83D" class="calibre20 pcalibre pcalibre1">23</td>
<td id="P700049702700000000000000003E83E" data-uri="chapter02.xhtml#P700049702700000000000000003E83E" class="calibre20 pcalibre pcalibre1">45</td>
<td id="P700049702700000000000000003E83F" data-uri="chapter02.xhtml#P700049702700000000000000003E83F" class="calibre20 pcalibre pcalibre1">67</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E840" data-uri="chapter02.xhtml#P700049702700000000000000003E840" class="calibre20 pcalibre pcalibre1">Little endian</td>
<td id="P700049702700000000000000003E841" data-uri="chapter02.xhtml#P700049702700000000000000003E841" class="calibre20 pcalibre pcalibre1">67</td>
<td id="P700049702700000000000000003E842" data-uri="chapter02.xhtml#P700049702700000000000000003E842" class="calibre20 pcalibre pcalibre1">45</td>
<td id="P700049702700000000000000003E843" data-uri="chapter02.xhtml#P700049702700000000000000003E843" class="calibre20 pcalibre pcalibre1">23</td>
<td id="P700049702700000000000000003E844" data-uri="chapter02.xhtml#P700049702700000000000000003E844" class="calibre20 pcalibre pcalibre1">01</td>
</tr>
</tbody>
</table>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E845" data-uri="chapter02.xhtml#P700049702700000000000000003E845">Note that in the word <code id="P700049702700000000000000003E846" data-uri="chapter02.xhtml#P700049702700000000000000003E846" class="pcalibre1 calibre8 pcalibre">0x01234567</code> the high-order byte has hexadecimal value <code id="P700049702700000000000000003E847" data-uri="chapter02.xhtml#P700049702700000000000000003E847" class="pcalibre1 calibre8 pcalibre">0x01</code>, while the low-order byte has value <code id="P700049702700000000000000003E848" data-uri="chapter02.xhtml#P700049702700000000000000003E848" class="pcalibre1 calibre8 pcalibre">0x67.</code></p>
<p id="P700049702700000000000000003E849" data-uri="chapter02.xhtml#P700049702700000000000000003E849" class="pcalibre1 pcalibre calibre2">Most Intel-compatible machines operate exclusively in little-endian mode. On the other hand, most machines from IBM and Oracle (arising from their acquisition</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000472" data-uri="chapter02.xhtml#P7000497027000000000000000000472"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E84A" data-uri="chapter02.xhtml#P700049702700000000000000003E84A" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000474" title="43" data-uri="chapter02.xhtml#P7000497027000000000000000000474" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Origin of “endian”</h1></header>
<p id="P700049702700000000000000003E84B" data-uri="chapter02.xhtml#P700049702700000000000000003E84B" class="calibre13 pcalibre pcalibre1">Here is how Jonathan Swift, writing in 1726, described the history of the controversy between big and little endians:</p>
<div class="blockquotegroup pcalibre pcalibre1" id="P700049702700000000000000003E84C" data-uri="chapter02.xhtml#P700049702700000000000000003E84C">
<blockquote class="pcalibre7 extract pcalibre8" id="P700049702700000000000000003E84D" data-uri="chapter02.xhtml#P700049702700000000000000003E84D">
<p id="P700049702700000000000000003E84E" data-uri="chapter02.xhtml#P700049702700000000000000003E84E" class="calibre13 pcalibre pcalibre1">. . . Lilliput and Blefuscu . . . have, as I was going to tell you, been engaged in a most obstinate war for six-and-thirty moons past. It began upon the following occasion. It is allowed on all hands, that the primitive way of breaking eggs, before we eat them, was upon the larger end; but his present majesty's grandfather, while he was a boy, going to eat an egg, and breaking it according to the ancient practice, happened to cut one of his fingers. Whereupon the emperor his father published an edict, commanding all his subjects, upon great penalties, to break the smaller end of their eggs. The people so highly resented this law, that our histories tell us, there have been six rebellions raised on that account; wherein one emperor lost his life, and another his crown. These civil commotions were constantly fomented by the monarchs of Blefuscu; and when they were quelled, the exiles always fled for refuge to that empire. It is computed that eleven thousand persons have at several times suffered death, rather than submit to break their eggs at the smaller end. Many hundred large volumes have been published upon this controversy: but the books of the Big-endians have been long forbidden, and the whole party rendered incapable by law of holding employments.</p></blockquote>
<div class="source1 pcalibre pcalibre1" id="P700049702700000000000000003E84F" data-uri="chapter02.xhtml#P700049702700000000000000003E84F"><p id="P700049702700000000000000003E850" data-uri="chapter02.xhtml#P700049702700000000000000003E850" class="calibre54 pcalibre pcalibre1">(Jonathan Swift. Gulliver's Travels, Benjamin Motte, 1726.)</p></div>
</div>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003E851" data-uri="chapter02.xhtml#P700049702700000000000000003E851">In his day, Swift was satirizing the continued conflicts between England (Lilliput) and France (Blefuscu). Danny Cohen, an early pioneer in networking protocols, first applied these terms to refer to byte ordering [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3D1">24</a>], and the terminology has been widely adopted.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E852" data-uri="chapter02.xhtml#P700049702700000000000000003E852">of Sun Microsystems in 2010) operate in big-endian mode. Note that we said “most.” The conventions do not split precisely along corporate boundaries. For example, both IBM and Oracle manufacture machines that use Intel-compatible processors and hence are little endian. Many recent microprocessor chips are <i class="calibre5 pcalibre pcalibre1">bi-endian</i>, meaning that they can be configured to operate as either little- or big-endian machines. In practice, however, byte ordering becomes fixed once a particular operating system is chosen. For example, ARM microprocessors, used in many cell phones, have hardware that can operate in either little- or big-endian mode, but the two most common operating systems for these chips—Android (from Google) and IOS (from Apple) —operate only in little-endian mode.</p>
<p id="P700049702700000000000000003E853" data-uri="chapter02.xhtml#P700049702700000000000000003E853" class="pcalibre1 pcalibre calibre2">People get surprisingly emotional about which byte ordering is the proper one. In fact, the terms “little endian” and “big endian” come from the book <i class="calibre5 pcalibre pcalibre1">Gulliver's Travels</i> by Jonathan Swift, where two warring factions could not agree as to how a soft-boiled egg should be opened—by the little end or by the big. Just like the egg issue, there is no technological reason to choose one byte ordering convention over the other, and hence the arguments degenerate into bickering about sociopolitical issues. As long as one of the conventions is selected and adhered to consistently, the choice is arbitrary.</p>
<p id="P700049702700000000000000003E854" data-uri="chapter02.xhtml#P700049702700000000000000003E854" class="pcalibre1 pcalibre calibre2">For most application programmers, the byte orderings used by their machines are totally invisible; programs compiled for either class of machine give identical results. At times, however, byte ordering becomes an issue. The first is when <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000047F" title="44" data-uri="chapter02.xhtml#P700049702700000000000000000047F" epub:type="pagebreak"></span>binary data are communicated over a network between different machines. A common problem is for data produced by a little-endian machine to be sent to a big-endian machine, or vice versa, leading to the bytes within the words being in reverse order for the receiving program. To avoid such problems, code written for networking applications must follow established conventions for byte ordering to make sure the sending machine converts its internal representation to the network standard, while the receiving machine converts the network standard to its internal representation. We will see examples of these conversions in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007B7A.xhtml#P7000497027000000000000000007B7A"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">11</span></a>.</p>
<p id="P700049702700000000000000003E855" data-uri="chapter02.xhtml#P700049702700000000000000003E855" class="pcalibre1 pcalibre calibre2">A second case where byte ordering becomes important is when looking at the byte sequences representing integer data. This occurs often when inspecting machine-level programs. As an example, the following line occurs in a file that gives a text representation of the machine-level code for an Intel x86–64 processor:</p>
<pre id="P700049702700000000000000003E856" data-uri="chapter02.xhtml#P700049702700000000000000003E856" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E857" data-uri="chapter02.xhtml#P700049702700000000000000003E857" class="calibre10 pcalibre pcalibre1">
4004d3: 01 05 43 0b 20 00	add		%eax,0x200b43(%rip)
</code></pre>
<p id="P700049702700000000000000003E858" data-uri="chapter02.xhtml#P700049702700000000000000003E858" class="pcalibre1 pcalibre calibre2">This line was generated by a <i class="calibre5 pcalibre pcalibre1">disassembler</i>, a tool that determines the instruction sequence represented by an executable program file. We will learn more about disassemblers and how to interpret lines such as this in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>. For now, we simply note that this line states that the hexadecimal byte sequence <code id="P700049702700000000000000003E859" data-uri="chapter02.xhtml#P700049702700000000000000003E859" class="pcalibre1 calibre8 pcalibre">01 05 43 0b 20 00</code> is the byte-level representation of an instruction that adds a word of data to the value stored at an address computed by adding <code id="P700049702700000000000000003E85A" data-uri="chapter02.xhtml#P700049702700000000000000003E85A" class="pcalibre1 calibre8 pcalibre">0x200b43</code> to the current value of the <i class="calibre5 pcalibre pcalibre1">program counter</i>, the address of the next instruction to be executed. If we take the final 4 bytes of the sequence <code id="P700049702700000000000000003E85B" data-uri="chapter02.xhtml#P700049702700000000000000003E85B" class="pcalibre1 calibre8 pcalibre">43 0b 20 00</code> and write them in reverse order, we have <code id="P700049702700000000000000003E85C" data-uri="chapter02.xhtml#P700049702700000000000000003E85C" class="pcalibre1 calibre8 pcalibre">00 20 0b 43</code>. Dropping the leading 0, we have the value <code id="P700049702700000000000000003E85D" data-uri="chapter02.xhtml#P700049702700000000000000003E85D" class="pcalibre1 calibre8 pcalibre">0x200b43</code>, the numeric value written on the right. Having bytes appear in reverse order is a common occurrence when reading machine-level program representations generated for little-endian machines such as this one. The natural way to write a byte sequence is to have the lowest-numbered byte on the left and the highest on the right, but this is contrary to the normal way of writing numbers with the most significant digit on the left and the least on the right.</p>
<p id="P700049702700000000000000003E85E" data-uri="chapter02.xhtml#P700049702700000000000000003E85E" class="pcalibre1 pcalibre calibre2">A third case where byte ordering becomes visible is when programs are written that circumvent the normal type system. In the C language, this can be done using a <i class="calibre5 pcalibre pcalibre1">cast</i> or a <i class="calibre5 pcalibre pcalibre1">union</i> to allow an object to be referenced according to a different data type from which it was created. Such coding tricks are strongly discouraged for most application programming, but they can be quite useful and even necessary for system-level programming.</p>
<p id="P700049702700000000000000003E85F" data-uri="chapter02.xhtml#P700049702700000000000000003E85F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P7000497027000000000000000000491"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.4</span></a> shows C code that uses casting to access and print the byte representations of different program objects. We use <code id="P700049702700000000000000003E860" data-uri="chapter02.xhtml#P700049702700000000000000003E860" class="pcalibre1 calibre8 pcalibre">typedef</code> to define data type <code id="P700049702700000000000000003E861" data-uri="chapter02.xhtml#P700049702700000000000000003E861" class="pcalibre1 calibre8 pcalibre">byte_pointer</code> as a pointer to an object of type <code id="P700049702700000000000000003E862" data-uri="chapter02.xhtml#P700049702700000000000000003E862" class="pcalibre1 calibre8 pcalibre">unsigned char.</code> Such a byte pointer references a sequence of bytes where each byte is considered to be a nonnegative integer. The first routine <code id="P700049702700000000000000003E863" data-uri="chapter02.xhtml#P700049702700000000000000003E863" class="pcalibre1 calibre8 pcalibre">show_bytes</code> is given the address of a sequence of bytes, indicated by a byte pointer, and a byte count. The byte count is specified as having data type <code id="P700049702700000000000000003E864" data-uri="chapter02.xhtml#P700049702700000000000000003E864" class="pcalibre1 calibre8 pcalibre">size_t</code>, the preferred data type for expressing the sizes of data structures. It prints the individual bytes in hexadecimal. The C formatting directive <code id="P700049702700000000000000003E865" data-uri="chapter02.xhtml#P700049702700000000000000003E865" class="pcalibre1 calibre8 pcalibre">%.2x</code> indicates that an integer should be printed in hexadecimal with at least 2 digits.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000000491" data-uri="chapter02.xhtml#P7000497027000000000000000000491">
<pre id="P700049702700000000000000003E866" data-uri="chapter02.xhtml#P700049702700000000000000003E866" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E867" data-uri="chapter02.xhtml#P700049702700000000000000003E867" class="calibre10 pcalibre pcalibre1">
1 #include &lt;stdio.h&gt;
2
3 typedef unsigned char *byte_pointer;
4
5 void show_bytes(byte_pointer start, size_t len) {
6     int i;
7     for (i = 0; i &lt; len; i++)
8          printf(“ %.2x”, start[i]);
9     printf(“\n”);
10 }
11
12 void show_int(int x) {
13	show_bytes((byte_pointer) &amp;;x, sizeof(int));
14 }
15
16 void show_float(float x) {
17	show_bytes((byte_pointer) &amp;, sizeof(float));
18 }
19
20 void show_pointer(void *x) {
21	show_bytes((byte_pointer) &amp;, sizeof(void *));
22 }
</code></pre>
<figcaption id="P700049702700000000000000003E868" data-uri="chapter02.xhtml#P700049702700000000000000003E868" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E869" data-uri="chapter02.xhtml#P700049702700000000000000003E869" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000496" title="45" data-uri="chapter02.xhtml#P7000497027000000000000000000496" epub:type="pagebreak"></span><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.4 </span>Code to print the byte representation of program objects.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E86A" data-uri="chapter02.xhtml#P700049702700000000000000003E86A"><p id="P700049702700000000000000003E86B" data-uri="chapter02.xhtml#P700049702700000000000000003E86B" class="pcalibre calibre3 pcalibre1">This code uses casting to circumvent the type system. Similar functions are easily defined for other data types.</p></div></figcaption>
</figure>
<p id="P700049702700000000000000003E86C" data-uri="chapter02.xhtml#P700049702700000000000000003E86C" class="pcalibre1 pcalibre calibre2">Procedures <code id="P700049702700000000000000003E86D" data-uri="chapter02.xhtml#P700049702700000000000000003E86D" class="pcalibre1 calibre8 pcalibre">show_int, show_float</code>, and <code id="P700049702700000000000000003E86E" data-uri="chapter02.xhtml#P700049702700000000000000003E86E" class="pcalibre1 calibre8 pcalibre">show_pointer</code> demonstrate how to use procedure <code id="P700049702700000000000000003E86F" data-uri="chapter02.xhtml#P700049702700000000000000003E86F" class="pcalibre1 calibre8 pcalibre">show_bytes</code> to print the byte representations of C program objects of type <code id="P700049702700000000000000003E870" data-uri="chapter02.xhtml#P700049702700000000000000003E870" class="pcalibre1 calibre8 pcalibre">int, float</code>, and <code id="P700049702700000000000000003E871" data-uri="chapter02.xhtml#P700049702700000000000000003E871" class="pcalibre1 calibre8 pcalibre">void *</code>, respectively. Observe that they simply pass <code id="P700049702700000000000000003E872" data-uri="chapter02.xhtml#P700049702700000000000000003E872" class="pcalibre1 calibre8 pcalibre">show_bytes</code> a pointer <code id="P700049702700000000000000003E873" data-uri="chapter02.xhtml#P700049702700000000000000003E873" class="pcalibre1 calibre8 pcalibre">&amp;x</code> to their argument <code id="P700049702700000000000000003E874" data-uri="chapter02.xhtml#P700049702700000000000000003E874" class="pcalibre1 calibre8 pcalibre">x</code>, casting the pointer to be of type <code id="P700049702700000000000000003E875" data-uri="chapter02.xhtml#P700049702700000000000000003E875" class="pcalibre1 calibre8 pcalibre">unsigned char *</code>. This cast indicates to the compiler that the program should consider the pointer to be to a sequence of bytes rather than to an object of the original data type. This pointer will then be to the lowest byte address occupied by the object.</p>
<p id="P700049702700000000000000003E876" data-uri="chapter02.xhtml#P700049702700000000000000003E876" class="pcalibre1 pcalibre calibre2">These procedures use the C <code id="P700049702700000000000000003E877" data-uri="chapter02.xhtml#P700049702700000000000000003E877" class="pcalibre1 calibre8 pcalibre">size of operator</code> to determine the number of bytes used by the object. In general, the expression <code id="P700049702700000000000000003E878" data-uri="chapter02.xhtml#P700049702700000000000000003E878" class="pcalibre1 calibre8 pcalibre">sizeof(<var class="calibre5 pcalibre pcalibre1">T</var>)</code> returns the number of bytes required to store an object of type <var class="calibre5 pcalibre pcalibre1">T</var>. Using <code id="P700049702700000000000000003E879" data-uri="chapter02.xhtml#P700049702700000000000000003E879" class="pcalibre1 calibre8 pcalibre">sizeof</code> rather than a fixed value is one step toward writing code that is portable across different machine types.</p>
<p id="P700049702700000000000000003E87A" data-uri="chapter02.xhtml#P700049702700000000000000003E87A" class="pcalibre1 pcalibre calibre2">We ran the code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000004B1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.5</span></a> on several different machines, giving the results shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000004BB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.6</span></a>. The following machines were used:</p>
<table id="P700049702700000000000000003E87B" data-uri="chapter02.xhtml#P700049702700000000000000003E87B" class="pcalibre largetable pcalibre1">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E87C" data-uri="chapter02.xhtml#P700049702700000000000000003E87C" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Linux 32</b></td>
<td id="P700049702700000000000000003E87D" data-uri="chapter02.xhtml#P700049702700000000000000003E87D" class="calibre20 pcalibre pcalibre1">Intel IA32 processor running Linux.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E87E" data-uri="chapter02.xhtml#P700049702700000000000000003E87E" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Windows</b></td>
<td id="P700049702700000000000000003E87F" data-uri="chapter02.xhtml#P700049702700000000000000003E87F" class="calibre20 pcalibre pcalibre1">Intel IA32 processor running Windows.</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E880" data-uri="chapter02.xhtml#P700049702700000000000000003E880" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Sun</b></td>
<td id="P700049702700000000000000003E881" data-uri="chapter02.xhtml#P700049702700000000000000003E881" class="calibre20 pcalibre pcalibre1">Sun Microsystems SPARC processor running Solaris. (These machines are now produced by Oracle.)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E882" data-uri="chapter02.xhtml#P700049702700000000000000003E882" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Linux 64</b></td>
<td id="P700049702700000000000000003E883" data-uri="chapter02.xhtml#P700049702700000000000000003E883" class="calibre20 pcalibre pcalibre1">Intel x86–64 processor running Linux.</td>
</tr>
</tbody>
</table>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000004B1" data-uri="chapter02.xhtml#P70004970270000000000000000004B1">
<pre id="P700049702700000000000000003E884" data-uri="chapter02.xhtml#P700049702700000000000000003E884" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E885" data-uri="chapter02.xhtml#P700049702700000000000000003E885" class="calibre10 pcalibre pcalibre1">
1 void test_show_bytes(int val) {
2     int ival = val;
3     float fval = (float) ival;
4     int *pval = &amp;ival;
5     show_int(ival);
6     show_float(fval);
7     show_pointer(pval);
8 }
</code></pre>
<figcaption id="P700049702700000000000000003E886" data-uri="chapter02.xhtml#P700049702700000000000000003E886" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E887" data-uri="chapter02.xhtml#P700049702700000000000000003E887" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000004B8" title="46" data-uri="chapter02.xhtml#P70004970270000000000000000004B8" epub:type="pagebreak"></span><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.5 </span>Byte representation examples.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E888" data-uri="chapter02.xhtml#P700049702700000000000000003E888"><p id="P700049702700000000000000003E889" data-uri="chapter02.xhtml#P700049702700000000000000003E889" class="pcalibre calibre3 pcalibre1">This code prints the byte representations of sample data objects.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000004BB" data-uri="chapter02.xhtml#P70004970270000000000000000004BB">
<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000003E88A" data-uri="chapter02.xhtml#P700049702700000000000000003E88A">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E88B" data-uri="chapter02.xhtml#P700049702700000000000000003E88B" class="calibre18 pcalibre pcalibre1">Machine</th>
<th id="P700049702700000000000000003E88C" data-uri="chapter02.xhtml#P700049702700000000000000003E88C" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P700049702700000000000000003E88D" data-uri="chapter02.xhtml#P700049702700000000000000003E88D" class="calibre18 pcalibre pcalibre1">Type</th>
<th id="P700049702700000000000000003E88E" data-uri="chapter02.xhtml#P700049702700000000000000003E88E" class="calibre18 pcalibre pcalibre1">Bytes (hex)</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E88F" data-uri="chapter02.xhtml#P700049702700000000000000003E88F" class="calibre20 pcalibre pcalibre1">Linux 32</td>
<td id="P700049702700000000000000003E890" data-uri="chapter02.xhtml#P700049702700000000000000003E890" class="calibre20 pcalibre pcalibre1">12,345</td>
<td id="P700049702700000000000000003E891" data-uri="chapter02.xhtml#P700049702700000000000000003E891" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E892" data-uri="chapter02.xhtml#P700049702700000000000000003E892" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000003E893" data-uri="chapter02.xhtml#P700049702700000000000000003E893" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E894" data-uri="chapter02.xhtml#P700049702700000000000000003E894" class="calibre10 pcalibre pcalibre1">39 30 00 00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E895" data-uri="chapter02.xhtml#P700049702700000000000000003E895" class="calibre20 pcalibre pcalibre1">Windows</td>
<td id="P700049702700000000000000003E896" data-uri="chapter02.xhtml#P700049702700000000000000003E896" class="calibre20 pcalibre pcalibre1">12,345</td>
<td id="P700049702700000000000000003E897" data-uri="chapter02.xhtml#P700049702700000000000000003E897" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E898" data-uri="chapter02.xhtml#P700049702700000000000000003E898" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000003E899" data-uri="chapter02.xhtml#P700049702700000000000000003E899" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E89A" data-uri="chapter02.xhtml#P700049702700000000000000003E89A" class="calibre10 pcalibre pcalibre1">39 30 00 00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E89B" data-uri="chapter02.xhtml#P700049702700000000000000003E89B" class="calibre20 pcalibre pcalibre1">Sun</td>
<td id="P700049702700000000000000003E89C" data-uri="chapter02.xhtml#P700049702700000000000000003E89C" class="calibre20 pcalibre pcalibre1">12,345</td>
<td id="P700049702700000000000000003E89D" data-uri="chapter02.xhtml#P700049702700000000000000003E89D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E89E" data-uri="chapter02.xhtml#P700049702700000000000000003E89E" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000003E89F" data-uri="chapter02.xhtml#P700049702700000000000000003E89F" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8A0" data-uri="chapter02.xhtml#P700049702700000000000000003E8A0" class="calibre10 pcalibre pcalibre1">00 00 30 39</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8A1" data-uri="chapter02.xhtml#P700049702700000000000000003E8A1" class="calibre20 pcalibre pcalibre1">Linux 64</td>
<td id="P700049702700000000000000003E8A2" data-uri="chapter02.xhtml#P700049702700000000000000003E8A2" class="calibre20 pcalibre pcalibre1">12,345</td>
<td id="P700049702700000000000000003E8A3" data-uri="chapter02.xhtml#P700049702700000000000000003E8A3" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8A4" data-uri="chapter02.xhtml#P700049702700000000000000003E8A4" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000003E8A5" data-uri="chapter02.xhtml#P700049702700000000000000003E8A5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8A6" data-uri="chapter02.xhtml#P700049702700000000000000003E8A6" class="calibre10 pcalibre pcalibre1">39 30 00 00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8A7" data-uri="chapter02.xhtml#P700049702700000000000000003E8A7" class="calibre20 pcalibre pcalibre1">Linux 32</td>
<td id="P700049702700000000000000003E8A8" data-uri="chapter02.xhtml#P700049702700000000000000003E8A8" class="calibre20 pcalibre pcalibre1">12,345.0</td>
<td id="P700049702700000000000000003E8A9" data-uri="chapter02.xhtml#P700049702700000000000000003E8A9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8AA" data-uri="chapter02.xhtml#P700049702700000000000000003E8AA" class="calibre10 pcalibre pcalibre1">float</code></td>
<td id="P700049702700000000000000003E8AB" data-uri="chapter02.xhtml#P700049702700000000000000003E8AB" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8AC" data-uri="chapter02.xhtml#P700049702700000000000000003E8AC" class="calibre10 pcalibre pcalibre1">00 e4 40 46</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8AD" data-uri="chapter02.xhtml#P700049702700000000000000003E8AD" class="calibre20 pcalibre pcalibre1">Windows</td>
<td id="P700049702700000000000000003E8AE" data-uri="chapter02.xhtml#P700049702700000000000000003E8AE" class="calibre20 pcalibre pcalibre1">12,345.0</td>
<td id="P700049702700000000000000003E8AF" data-uri="chapter02.xhtml#P700049702700000000000000003E8AF" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8B0" data-uri="chapter02.xhtml#P700049702700000000000000003E8B0" class="calibre10 pcalibre pcalibre1">float</code></td>
<td id="P700049702700000000000000003E8B1" data-uri="chapter02.xhtml#P700049702700000000000000003E8B1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8B2" data-uri="chapter02.xhtml#P700049702700000000000000003E8B2" class="calibre10 pcalibre pcalibre1">00 e4 40 46</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8B3" data-uri="chapter02.xhtml#P700049702700000000000000003E8B3" class="calibre20 pcalibre pcalibre1">Sun</td>
<td id="P700049702700000000000000003E8B4" data-uri="chapter02.xhtml#P700049702700000000000000003E8B4" class="calibre20 pcalibre pcalibre1">12,345.0</td>
<td id="P700049702700000000000000003E8B5" data-uri="chapter02.xhtml#P700049702700000000000000003E8B5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8B6" data-uri="chapter02.xhtml#P700049702700000000000000003E8B6" class="calibre10 pcalibre pcalibre1">float</code></td>
<td id="P700049702700000000000000003E8B7" data-uri="chapter02.xhtml#P700049702700000000000000003E8B7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8B8" data-uri="chapter02.xhtml#P700049702700000000000000003E8B8" class="calibre10 pcalibre pcalibre1">46 40 e4 00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8B9" data-uri="chapter02.xhtml#P700049702700000000000000003E8B9" class="calibre20 pcalibre pcalibre1">Linux 64</td>
<td id="P700049702700000000000000003E8BA" data-uri="chapter02.xhtml#P700049702700000000000000003E8BA" class="calibre20 pcalibre pcalibre1">12,345.0</td>
<td id="P700049702700000000000000003E8BB" data-uri="chapter02.xhtml#P700049702700000000000000003E8BB" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8BC" data-uri="chapter02.xhtml#P700049702700000000000000003E8BC" class="calibre10 pcalibre pcalibre1">float</code></td>
<td id="P700049702700000000000000003E8BD" data-uri="chapter02.xhtml#P700049702700000000000000003E8BD" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8BE" data-uri="chapter02.xhtml#P700049702700000000000000003E8BE" class="calibre10 pcalibre pcalibre1">00 e4 40 46</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8BF" data-uri="chapter02.xhtml#P700049702700000000000000003E8BF" class="calibre20 pcalibre pcalibre1">Linux 32</td>
<td id="P700049702700000000000000003E8C0" data-uri="chapter02.xhtml#P700049702700000000000000003E8C0" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8C1" data-uri="chapter02.xhtml#P700049702700000000000000003E8C1" class="calibre10 pcalibre pcalibre1">&amp;ival</code></td>
<td id="P700049702700000000000000003E8C2" data-uri="chapter02.xhtml#P700049702700000000000000003E8C2" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8C3" data-uri="chapter02.xhtml#P700049702700000000000000003E8C3" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P700049702700000000000000003E8C4" data-uri="chapter02.xhtml#P700049702700000000000000003E8C4" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8C5" data-uri="chapter02.xhtml#P700049702700000000000000003E8C5" class="calibre10 pcalibre pcalibre1">e4 f9 ff bf</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8C6" data-uri="chapter02.xhtml#P700049702700000000000000003E8C6" class="calibre20 pcalibre pcalibre1">Windows</td>
<td id="P700049702700000000000000003E8C7" data-uri="chapter02.xhtml#P700049702700000000000000003E8C7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8C8" data-uri="chapter02.xhtml#P700049702700000000000000003E8C8" class="calibre10 pcalibre pcalibre1">&amp;ival</code></td>
<td id="P700049702700000000000000003E8C9" data-uri="chapter02.xhtml#P700049702700000000000000003E8C9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8CA" data-uri="chapter02.xhtml#P700049702700000000000000003E8CA" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P700049702700000000000000003E8CB" data-uri="chapter02.xhtml#P700049702700000000000000003E8CB" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8CC" data-uri="chapter02.xhtml#P700049702700000000000000003E8CC" class="calibre10 pcalibre pcalibre1">b4 cc 22 00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8CD" data-uri="chapter02.xhtml#P700049702700000000000000003E8CD" class="calibre20 pcalibre pcalibre1">Sun</td>
<td id="P700049702700000000000000003E8CE" data-uri="chapter02.xhtml#P700049702700000000000000003E8CE" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8CF" data-uri="chapter02.xhtml#P700049702700000000000000003E8CF" class="calibre10 pcalibre pcalibre1">&amp;ival</code></td>
<td id="P700049702700000000000000003E8D0" data-uri="chapter02.xhtml#P700049702700000000000000003E8D0" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8D1" data-uri="chapter02.xhtml#P700049702700000000000000003E8D1" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P700049702700000000000000003E8D2" data-uri="chapter02.xhtml#P700049702700000000000000003E8D2" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8D3" data-uri="chapter02.xhtml#P700049702700000000000000003E8D3" class="calibre10 pcalibre pcalibre1">ef ff fa 0c</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E8D4" data-uri="chapter02.xhtml#P700049702700000000000000003E8D4" class="calibre20 pcalibre pcalibre1">Linux 64</td>
<td id="P700049702700000000000000003E8D5" data-uri="chapter02.xhtml#P700049702700000000000000003E8D5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8D6" data-uri="chapter02.xhtml#P700049702700000000000000003E8D6" class="calibre10 pcalibre pcalibre1">&amp;ival</code></td>
<td id="P700049702700000000000000003E8D7" data-uri="chapter02.xhtml#P700049702700000000000000003E8D7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8D8" data-uri="chapter02.xhtml#P700049702700000000000000003E8D8" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P700049702700000000000000003E8D9" data-uri="chapter02.xhtml#P700049702700000000000000003E8D9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E8DA" data-uri="chapter02.xhtml#P700049702700000000000000003E8DA" class="calibre10 pcalibre pcalibre1">b8 11 e5 ff ff 7f 00 00</code></td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000003E8DB" data-uri="chapter02.xhtml#P700049702700000000000000003E8DB" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E8DC" data-uri="chapter02.xhtml#P700049702700000000000000003E8DC" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.6 </span>Byte representations of different data values.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E8DD" data-uri="chapter02.xhtml#P700049702700000000000000003E8DD"><p id="P700049702700000000000000003E8DE" data-uri="chapter02.xhtml#P700049702700000000000000003E8DE" class="pcalibre calibre3 pcalibre1">Results for <code id="P700049702700000000000000003E8DF" data-uri="chapter02.xhtml#P700049702700000000000000003E8DF" class="pcalibre1 calibre8 pcalibre">int</code> and <code id="P700049702700000000000000003E8E0" data-uri="chapter02.xhtml#P700049702700000000000000003E8E0" class="pcalibre1 calibre8 pcalibre">float</code> are identical, except for byte ordering. Pointer values are machine dependent.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E8E1" data-uri="chapter02.xhtml#P700049702700000000000000003E8E1">Our argument 12,345 has hexadecimal representation <code id="P700049702700000000000000003E8E2" data-uri="chapter02.xhtml#P700049702700000000000000003E8E2" class="pcalibre1 calibre8 pcalibre">0x00003039</code>. For the <code id="P700049702700000000000000003E8E3" data-uri="chapter02.xhtml#P700049702700000000000000003E8E3" class="pcalibre1 calibre8 pcalibre">int</code> data, we get identical results for all machines, except for the byte ordering. In particular, we can see that the least significant byte value of <code id="P700049702700000000000000003E8E4" data-uri="chapter02.xhtml#P700049702700000000000000003E8E4" class="pcalibre1 calibre8 pcalibre">0x39</code> is printed first for Linux 32, Windows, and Linux 64, indicating little-endian machines, and last for Sun, indicating a big-endian machine. Similarly, the bytes of the <code id="P700049702700000000000000003E8E5" data-uri="chapter02.xhtml#P700049702700000000000000003E8E5" class="pcalibre1 calibre8 pcalibre">float</code> data are identical, except for the byte ordering. On the other hand, the pointer values are completely different. The different machine/operating system configurations use different conventions for storage allocation. One feature to note is that the Linux 32, Windows, and Sun machines use 4-byte addresses, while the Linux 64 machine uses 8-byte addresses.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000518" data-uri="chapter02.xhtml#P7000497027000000000000000000518"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E8E6" data-uri="chapter02.xhtml#P700049702700000000000000003E8E6" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000051A" title="47" data-uri="chapter02.xhtml#P700049702700000000000000000051A" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">New to C? </span>Naming data types with <code id="P700049702700000000000000003E8E7" data-uri="chapter02.xhtml#P700049702700000000000000003E8E7" class="calibre55 pcalibre pcalibre1">typedef</code></h1></header>
<p id="P700049702700000000000000003E8E8" data-uri="chapter02.xhtml#P700049702700000000000000003E8E8" class="calibre13 pcalibre pcalibre1">The <code id="P700049702700000000000000003E8E9" data-uri="chapter02.xhtml#P700049702700000000000000003E8E9" class="pcalibre1 calibre8 pcalibre">typedef</code> declaration in C provides a way of giving a name to a data type. This can be a great help in improving code readability, since deeply nested type declarations can be difficult to decipher.</p>
<p id="P700049702700000000000000003E8EA" data-uri="chapter02.xhtml#P700049702700000000000000003E8EA" class="calibre13 pcalibre pcalibre1">The syntax for <code id="P700049702700000000000000003E8EB" data-uri="chapter02.xhtml#P700049702700000000000000003E8EB" class="pcalibre1 calibre8 pcalibre">typedef</code> is exactly like that of declaring a variable, except that it uses a type name rather than a variable name. Thus, the declaration of <code id="P700049702700000000000000003E8EC" data-uri="chapter02.xhtml#P700049702700000000000000003E8EC" class="pcalibre1 calibre8 pcalibre">byte_pointer</code> in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P7000497027000000000000000000491"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.4</span></a> has the same form as the declaration of a variable of type <code id="P700049702700000000000000003E8ED" data-uri="chapter02.xhtml#P700049702700000000000000003E8ED" class="pcalibre1 calibre8 pcalibre">unsigned char *.</code></p>
<p id="P700049702700000000000000003E8EE" data-uri="chapter02.xhtml#P700049702700000000000000003E8EE" class="calibre13 pcalibre pcalibre1">For example, the declaration</p>
<pre id="P700049702700000000000000003E8EF" data-uri="chapter02.xhtml#P700049702700000000000000003E8EF" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E8F0" data-uri="chapter02.xhtml#P700049702700000000000000003E8F0" class="calibre10 pcalibre pcalibre1">
typedef int *int_pointer;
int_pointer ip;
</code></pre>
<p class="calibre13 pcalibre pcalibre1" id="P700049702700000000000000003E8F1" data-uri="chapter02.xhtml#P700049702700000000000000003E8F1">defines type <code id="P700049702700000000000000003E8F2" data-uri="chapter02.xhtml#P700049702700000000000000003E8F2" class="pcalibre1 calibre8 pcalibre">int_pointerto</code> be a pointer to an int, and declares a variable <code id="P700049702700000000000000003E8F3" data-uri="chapter02.xhtml#P700049702700000000000000003E8F3" class="pcalibre1 calibre8 pcalibre">ip</code> of this type. Alternatively, we could declare this variable directly as</p>
<pre id="P700049702700000000000000003E8F4" data-uri="chapter02.xhtml#P700049702700000000000000003E8F4" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E8F5" data-uri="chapter02.xhtml#P700049702700000000000000003E8F5" class="calibre10 pcalibre pcalibre1">
int *ip;
</code></pre>
</aside>
<aside class="sidebar pcalibre5 pcalibre" id="P700049702700000000000000000052A" data-uri="chapter02.xhtml#P700049702700000000000000000052A"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E8F6" data-uri="chapter02.xhtml#P700049702700000000000000003E8F6" epub:type="title"><span class="pcalibre label1 pcalibre1">New to C? </span>Formatted printing with <code id="P700049702700000000000000003E8F7" data-uri="chapter02.xhtml#P700049702700000000000000003E8F7" class="calibre55 pcalibre pcalibre1">printf</code></h1></header>
<p id="P700049702700000000000000003E8F8" data-uri="chapter02.xhtml#P700049702700000000000000003E8F8" class="calibre13 pcalibre pcalibre1">The <code id="P700049702700000000000000003E8F9" data-uri="chapter02.xhtml#P700049702700000000000000003E8F9" class="pcalibre1 calibre8 pcalibre">printf</code> function (along with its cousins <code id="P700049702700000000000000003E8FA" data-uri="chapter02.xhtml#P700049702700000000000000003E8FA" class="pcalibre1 calibre8 pcalibre">fprintf</code> and <code id="P700049702700000000000000003E8FB" data-uri="chapter02.xhtml#P700049702700000000000000003E8FB" class="pcalibre1 calibre8 pcalibre">sprintf</code>) provides a way to print information with considerable control over the formatting details. The first argument is a <i class="calibre5 pcalibre pcalibre1">format string</i>, while any remaining arguments are values to be printed. Within the format string, each character sequence starting with <code id="P700049702700000000000000003E8FC" data-uri="chapter02.xhtml#P700049702700000000000000003E8FC" class="pcalibre1 calibre8 pcalibre">‘%'</code> indicates how to format the next argument. Typical examples include <code id="P700049702700000000000000003E8FD" data-uri="chapter02.xhtml#P700049702700000000000000003E8FD" class="pcalibre1 calibre8 pcalibre">‘%d'</code> to print a decimal integer, <code id="P700049702700000000000000003E8FE" data-uri="chapter02.xhtml#P700049702700000000000000003E8FE" class="pcalibre1 calibre8 pcalibre">‘%f'</code> to print a floating-point number, and <code id="P700049702700000000000000003E8FF" data-uri="chapter02.xhtml#P700049702700000000000000003E8FF" class="pcalibre1 calibre8 pcalibre">‘%c'</code> to print a character having the character code given by the argument.</p>
<p id="P700049702700000000000000003E900" data-uri="chapter02.xhtml#P700049702700000000000000003E900" class="pcalibre calibre3 pcalibre1">Specifying the formatting of fixed-size data types, such as <code id="P700049702700000000000000003E901" data-uri="chapter02.xhtml#P700049702700000000000000003E901" class="pcalibre1 calibre8 pcalibre">int_32t</code>, is a bit more involved, as is described in the aside on page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000077D_split_000.xhtml#P7000497027000000000000000000929">67</a>.</p>
</aside>
<p id="P700049702700000000000000003E902" data-uri="chapter02.xhtml#P700049702700000000000000003E902" class="pcalibre1 pcalibre calibre2">Observe that although the floating-point and the integer data both encode the numeric value 12,345, they have very different byte patterns: <code id="P700049702700000000000000003E903" data-uri="chapter02.xhtml#P700049702700000000000000003E903" class="pcalibre1 calibre8 pcalibre">0x00003039</code> for the integer and <code id="P700049702700000000000000003E904" data-uri="chapter02.xhtml#P700049702700000000000000003E904" class="pcalibre1 calibre8 pcalibre">0x4640E400</code> for floating point. In general, these two formats use different encoding schemes. If we expand these hexadecimal patterns into binary form and shift them appropriately, we find a sequence of 13 matching bits, indicated by a sequence of asterisks, as follows:</p>
<figure id="P700049702700000000000000000053A" class="pcalibre5 figure pcalibre" data-uri="chapter02.xhtml#P700049702700000000000000000053A">
<img alt="" id="P700049702700000000000000003E905" data-uri="P700049702700000000000000000B708" src="../images/p47-1.png" class="calibre56 pcalibre pcalibre1"/>
</figure>
<p id="P700049702700000000000000003E906" data-uri="chapter02.xhtml#P700049702700000000000000003E906" class="pcalibre1 pcalibre calibre2">This is not coincidental. We will return to this example when we study floating-point formats.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P700049702700000000000000000053D" data-uri="chapter02.xhtml#P700049702700000000000000000053D"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E907" data-uri="chapter02.xhtml#P700049702700000000000000003E907" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000053F" title="48" data-uri="chapter02.xhtml#P700049702700000000000000000053F" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">New to C? </span>Pointers and arrays</h1></header>
<p id="P700049702700000000000000003E908" data-uri="chapter02.xhtml#P700049702700000000000000003E908" class="pcalibre calibre3 pcalibre1">In function <code id="P700049702700000000000000003E909" data-uri="chapter02.xhtml#P700049702700000000000000003E909" class="pcalibre1 calibre8 pcalibre">show_bytes</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P7000497027000000000000000000491"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.4</span></a>), we see the close connection between pointers and arrays, as will be discussed in detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002B19.xhtml#P7000497027000000000000000002B19"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.8</span></a>. We see that this function has an argument <code id="P700049702700000000000000003E90A" data-uri="chapter02.xhtml#P700049702700000000000000003E90A" class="pcalibre1 calibre8 pcalibre">start</code> of type <code id="P700049702700000000000000003E90B" data-uri="chapter02.xhtml#P700049702700000000000000003E90B" class="pcalibre1 calibre8 pcalibre">byte_pointer</code> (which has been defined to be a pointer to <code id="P700049702700000000000000003E90C" data-uri="chapter02.xhtml#P700049702700000000000000003E90C" class="pcalibre1 calibre8 pcalibre">unsigned char</code>), but we see the array reference <code id="P700049702700000000000000003E90D" data-uri="chapter02.xhtml#P700049702700000000000000003E90D" class="pcalibre1 calibre8 pcalibre">start[i]</code> on line 8. In C, we can dereference a pointer with array notation, and we can reference array elements with pointer notation. In this example, the reference <code id="P700049702700000000000000003E90E" data-uri="chapter02.xhtml#P700049702700000000000000003E90E" class="pcalibre1 calibre8 pcalibre">start[i]</code> indicates that we want to read the byte that is <code id="P700049702700000000000000003E90F" data-uri="chapter02.xhtml#P700049702700000000000000003E90F" class="pcalibre1 calibre8 pcalibre">i</code> positions beyond the location pointed to by <code id="P700049702700000000000000003E910" data-uri="chapter02.xhtml#P700049702700000000000000003E910" class="pcalibre1 calibre8 pcalibre">start</code>.</p>
</aside>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000549" data-uri="chapter02.xhtml#P7000497027000000000000000000549"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E911" data-uri="chapter02.xhtml#P700049702700000000000000003E911" epub:type="title"><span class="pcalibre label1 pcalibre1">New to C? </span>Pointer creation and dereferencing</h1></header>
<p id="P700049702700000000000000003E912" data-uri="chapter02.xhtml#P700049702700000000000000003E912" class="calibre13 pcalibre pcalibre1">In lines 13, 17, and 21 of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P7000497027000000000000000000491"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.4</span></a> we see uses of two operations that give C (and therefore C++) its distinctive character. The C “address of” operator <code id="P700049702700000000000000003E913" data-uri="chapter02.xhtml#P700049702700000000000000003E913" class="pcalibre1 calibre8 pcalibre">&amp;</code> creates a pointer. On all three lines, the expression <code id="P700049702700000000000000003E914" data-uri="chapter02.xhtml#P700049702700000000000000003E914" class="pcalibre1 calibre8 pcalibre">&amp;x</code> creates a pointer to the location holding the object indicated by variable <code id="P700049702700000000000000003E915" data-uri="chapter02.xhtml#P700049702700000000000000003E915" class="pcalibre1 calibre8 pcalibre">x</code>. The type of this pointer depends on the type of <code id="P700049702700000000000000003E916" data-uri="chapter02.xhtml#P700049702700000000000000003E916" class="pcalibre1 calibre8 pcalibre">x</code>, and hence these three pointers are of type <code id="P700049702700000000000000003E917" data-uri="chapter02.xhtml#P700049702700000000000000003E917" class="pcalibre1 calibre8 pcalibre">int *, float *</code>, and <code id="P700049702700000000000000003E918" data-uri="chapter02.xhtml#P700049702700000000000000003E918" class="pcalibre1 calibre8 pcalibre">void **</code>, respectively. (Data type <code id="P700049702700000000000000003E919" data-uri="chapter02.xhtml#P700049702700000000000000003E919" class="pcalibre1 calibre8 pcalibre">void</code> <code id="P700049702700000000000000003E91A" data-uri="chapter02.xhtml#P700049702700000000000000003E91A" class="pcalibre1 calibre8 pcalibre">*</code> is a special kind of pointer with no associated type information.)</p>
<p id="P700049702700000000000000003E91B" data-uri="chapter02.xhtml#P700049702700000000000000003E91B" class="pcalibre calibre3 pcalibre1">The cast operator converts from one data type to another. Thus, the cast (<code id="P700049702700000000000000003E91C" data-uri="chapter02.xhtml#P700049702700000000000000003E91C" class="pcalibre1 calibre8 pcalibre">byte_pointer</code>) <code id="P700049702700000000000000003E91D" data-uri="chapter02.xhtml#P700049702700000000000000003E91D" class="pcalibre1 calibre8 pcalibre">&amp;x</code> indicates that whatever type the pointer <code id="P700049702700000000000000003E91E" data-uri="chapter02.xhtml#P700049702700000000000000003E91E" class="pcalibre1 calibre8 pcalibre">&amp;x</code> had before, the program will now reference a pointer to data of type <code id="P700049702700000000000000003E91F" data-uri="chapter02.xhtml#P700049702700000000000000003E91F" class="pcalibre1 calibre8 pcalibre">unsigned char</code>. The casts shown here do not change the actual pointer; they simply direct the compiler to refer to the data being pointed to according to the new data type.</p>
</aside>
</section>
</section></body></html>
