<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Making The Log Finite</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part470.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part472.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">Making The Log Finite</p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">We thus have arrived at a basic protocol for updating file-system on-disk structures. The file system buffers updates in memory for some time; when it is finally time to write to disk, the file system first carefully writes out the details of the transaction to the journal (a.k.a. write-ahead log); after the transaction is complete, the file system checkpoints those blocks to their final locations on disk.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="63" height="5" alt="image" src="Image_622.png"/></span></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">However, the log is of a finite size. If we keep adding transactions to it (as in this figure), it will soon fill. What do you think happens then?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:90.59pt" cellspacing="0"><tr style="height:29pt"><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx1</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx2</p></td><td style="width:28pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx3</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx4</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx5</p></td><td style="width:115pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">...</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Two problems arise when the log becomes full. The first is simpler, but less critical: the larger the log, the longer recovery will take, as the recovery process must replay all the transactions within the log (in order) to recover. The second is more of an issue: when the log is full (or nearly full), no further transactions can be committed to the disk, thus making the file system “less than useful” (i.e., useless).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To address these problems, journaling file systems treat the log as a circular data structure, re-using it over and over; this is why the journal is sometimes referred to as a <b>circular log</b>. To do so, the file system must take action some time after a checkpoint. Specifically, once a transaction has been checkpointed, the file system should free the space it was occupying within the journal, allowing the log space to be reused. There are many ways to achieve this end; for example, you could simply mark the oldest</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="346" height="47" alt="image" src="Image_623.png"/></span></p><p class="s47" style="text-indent: 0pt;line-height: 7pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx5</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx4</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx3</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx2</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">Tx1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-top: 5pt;padding-left: 4pt;text-indent: -2pt;line-height: 119%;text-align: left;">Journal Super</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: left;">and newest transactions in the log in a <b>journal superblock</b>; all other space is free. Here is a graphical depiction of such a mechanism:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In the journal superblock (not to be confused with the main file system superblock), the journaling system records enough information to know which transactions have not yet been checkpointed, and thus reduces re- covery time as well as enables re-use of the log in a circular fashion. And thus we add another step to our basic protocol:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">1. <b>Journal write: </b>Write the contents of the transaction (containing TxB and the contents of the update) to the log; wait for these writes to complete.</p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">2. <b>Journal commit: </b>Write the transaction commit block (containing TxE) to the log; wait for the write to complete; the transaction is now <b>committed</b>.</p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">3. <b>Checkpoint: </b>Write the contents of the update to their final locations within the file system.</p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">4. <b>Free: </b>Some time later, mark the transaction free in the journal by updating the journal superblock.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Thus we have our final data journaling protocol. But there is still a problem: we are writing each data block to the disk <i>twice</i>, which is a heavy cost to pay, especially for something as rare as a system crash. Can you figure out a way to retain consistency without writing data twice?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part470.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part472.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
