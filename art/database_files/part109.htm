<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.7   Authorization</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part108.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part110.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 9pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">4.7   <span style=" color: #00AEEF;">Authorization</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We may assign a user several forms of authorizations on parts of the database. Autho- rizations on data include:</p><p class="s39" style="padding-top: 5pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Authorization to read data.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Authorization to insert new data.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Authorization to update data.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">Authorization to delete data.</span></p><p style="padding-top: 13pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Each of these types of authorizations is called a <span class="s63">privilege</span>. We may authorize the user all, none, or a combination of these types of privileges on speciﬁed parts of a database, such as a relation or a view.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">When a user submits a query or an update, the <span class="s44">SQL </span>implementation ﬁrst checks if the query or update is authorized, based on the authorizations that the user has been granted. If the query or update is not authorized, it is rejected.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">In addition to authorizations on data, users may also be granted authorizations on the database schema, allowing them, for example, to create, modify, or drop relations. A user who has some form of authorization may be allowed to pass on (grant) this authorization to other users, or to withdraw (revoke) an authorization that was granted earlier. In this section, we see how each of these authorizations can be speciﬁed in <span class="s44">SQL</span>. The ultimate form of authority is that given to the database administrator. The database administrator may authorize new users, restructure the database, and so on. This form of authorization is analogous to that of a <b>superuser</b>, administrator, or oper-</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">ator for an operating system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.7.1 Granting and Revoking of Privileges</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s44">SQL </span>standard includes the <span class="s63">privileges </span><b>select</b>, <b>insert</b>, <b>update</b>, and <b>delete</b>. The privilege <b>all privileges </b>can be used as a short form for all the allowable privileges. A user who creates a new relation is given all privileges on that relation automatically.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL </span>data-deﬁnition language includes commands to grant and revoke privi- leges. The <span class="s63">grant </span>statement is used to confer authorization. The basic form of this state- ment is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-top: 1pt;padding-left: 199pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><span class="s46">grant </span>&lt;<span class="p">privilege list</span>&gt;</p><p class="s83" style="padding-left: 199pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s46">on </span>&lt;<span class="p">relation name or view name</span>&gt;</p><p class="s83" style="padding-left: 199pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><span class="s46">to </span>&lt;<span class="p">user/role list</span>&gt;<span class="p">;</span></p><p style="padding-top: 9pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <i>privilege list </i>allows the granting of several privileges in one command. The notion of roles is covered in Section 4.7.2.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <b>select </b>authorization on a relation is required to read tuples in the relation. The following <b>grant </b>statement grants database users Amit and Satoshi <b>select </b>authorization on the <i>department </i>relation:</p><p class="s13" style="padding-top: 2pt;padding-left: 88pt;text-indent: 91pt;line-height: 29pt;text-align: left;"><b>grant select on </b>department <b>to </b>Amit<span class="p">, </span>Satoshi<span class="p">; This allows those users to run queries on the </span>department <span class="p">relation.</span></p><p style="padding-left: 106pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">The <b>update </b>authorization on a relation allows a user to update any tuple in the</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">relation. The <b>update </b>authorization may be given either on all attributes of the relation or on only some. If <b>update </b>authorization is included in a <b>grant </b>statement, the list of attributes on which update authorization is to be granted optionally appears in paren- theses immediately after the <b>update </b>keyword. If the list of attributes is omitted, the update privilege will be granted on all attributes of the relation.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">This <b>grant </b>statement gives users Amit and Satoshi update authorization on the</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">budget <span class="p">attribute of the </span>department <span class="p">relation:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-left: 189pt;text-indent: 0pt;text-align: left;"><b>grant update </b><span class="p">(</span>budget<span class="p">) </span><b>on </b>department <b>to </b>Amit<span class="p">, </span>Satoshi<span class="p">;</span></p><p style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The <b>insert </b>authorization on a relation allows a user to insert tuples into the relation. The <b>insert </b>privilege may also specify a list of attributes; any inserts to the relation must specify only these attributes, and the system either gives each of the remaining attributes default values (if a default is deﬁned for the attribute) or sets them to <i>null</i>.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">The <b>delete </b>authorization on a relation allows a user to delete tuples from a relation. The user name <b>public </b>refers to all current and future users of the system. Thus,</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">privileges granted to <b>public </b>are implicitly granted to all current and future users.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">By default, a user/role that is granted a privilege is not authorized to grant that privilege to another user/role. <span class="s44">SQL </span>allows a privilege grant to specify that the recipient may further grant the privilege to another user. We describe this feature in more detail in Section 4.7.5.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is worth noting that the <span class="s44">SQL </span>authorization mechanism grants privileges on an entire relation, or on speciﬁed attributes of a relation. However, it does not permit authorizations on speciﬁc tuples of a relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To revoke an authorization, we use the <span class="s63">revoke </span>statement. It takes a form almost identical to that of <b>grant</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-top: 1pt;padding-left: 230pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><span class="s46">revoke </span>&lt;<span class="p">privilege list</span>&gt;</p><p class="s83" style="padding-left: 230pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s46">on </span>&lt;<span class="p">relation name or view name</span>&gt;</p><p class="s83" style="padding-left: 230pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><span class="s46">from </span>&lt;<span class="p">user/role list</span>&gt;<span class="p">;</span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">Thus, to revoke the privileges that we granted previously, we write</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 180pt;text-indent: 0pt;text-align: left;"><b>revoke select on </b>department <b>from </b>Amit<span class="p">, </span>Satoshi<span class="p">;</span></p><p class="s46" style="padding-left: 180pt;text-indent: 0pt;text-align: left;">revoke update <span class="p">(budget) </span>on <i>department </i>from <i>Amit</i><span class="p">, </span><i>Satoshi</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Revocation of privileges is more complex if the user from whom the privilege is revoked has granted the privilege to another user. We return to this issue in Section 4.7.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">4.7.2 Roles</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Consider the real-world roles of various people in a university. Each instructor must have the same types of authorizations on the same set of relations. Whenever a new instructor is appointed, she will have to be given all these authorizations individually.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A better approach would be to specify the authorizations that every instructor is to be given, and to identify separately which database users are instructors. The sys- tem can use these two pieces of information to determine the authorizations of each instructor. When a new instructor is hired, a user identiﬁer must be allocated to him, and he must be identiﬁed as an instructor. Individual permissions given to instructors need not be speciﬁed again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">The notion of <span class="s63">roles </span>captures this concept. A set of roles is created in the database. Authorizations can be granted to roles, in exactly the same fashion as they are granted to individual users. Each database user is granted a set of roles (which may be empty) that she is authorized to perform.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_838.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_839.png"/></span></p><p style="padding-left: 91pt;text-indent: 14pt;text-align: justify;">In our university database, examples of roles could include <i>instructor</i>, <i>teaching assistant</i>, <i>student</i>, <i>dean</i>, and <i>department chair</i>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A less preferable alternative would be to create an <i>instructor </i>userid and permit each instructor to connect to the database using the <i>instructor </i>userid. The problem with this approach is that it would not be possible to identify exactly which instructor carried out a database update, and this could create security risks. Furthermore, if an instruc- tor leaves the university or is moved to a non instructional role, then a new <i>instructor </i>password must be created and distributed in a secure manner to all instructors. The use of roles has the beneﬁt of requiring users to connect to the database with their own userid.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Any authorization that can be granted to a user can be granted to a role. Roles are granted to users just as authorizations are.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">Roles can be created in <span class="s44">SQL </span>as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">create role <i>instructor</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;">Roles can then be granted privileges just as the users can, as illustrated in this state- ment:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 230pt;text-indent: 0pt;text-align: left;">grant select on <i>takes</i></p><p class="s46" style="padding-left: 230pt;text-indent: 0pt;text-align: left;">to <i>instructor</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: center;">Roles can be granted to users, as well as to other roles, as these statements show:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">create role <i>dean</i><span class="p">;</span></p><p class="s46" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">grant <i>instructor </i>to <i>dean</i><span class="p">;</span></p><p class="s46" style="padding-left: 106pt;text-indent: 116pt;line-height: 199%;text-align: left;">grant <i>dean </i>to <span class="p">Satoshi; Thus, the privileges of a user or a role consist of:</span></p><p class="s39" style="padding-left: 91pt;text-indent: 0pt;line-height: 14pt;text-align: left;">• <span class="s40">All privileges directly granted to the user/role.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">All privileges granted to roles that have been granted to the user/role.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_840.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_841.png"/></span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Note that there can be a chain of roles; for example, the role <i>teaching assistant </i>may be granted to all <i>instructors</i>. In turn, the role <i>instructor </i>is granted to all <i>dean</i>s. Thus, the <i>dean </i>role inherits all privileges granted to the roles <i>instructor </i>and to <i>teaching assistant </i>in addition to privileges granted directly to <i>dean</i>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When a user logs in to the database system, the actions executed by the user during that session have all the privileges granted directly to the user, as well as all privileges</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_842.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">granted to roles that are granted (directly or indirectly via other roles) to that user. Thus, if a user Amit has been granted the role <i>dean</i>, user Amit holds all privileges granted directly to Amit, as well as privileges granted to <i>dean</i>, plus privileges granted to <i>instructor </i>and <i>teaching assistant </i>if, as above, those roles were granted (directly or indirectly) to the role <i>dean</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is worth noting that the concept of role-based authorization is not speciﬁc to <span class="s44">SQL</span>, and role-based authorization is used for access control in a wide variety of shared applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.7.3 Authorization on Views</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_843.png"/></span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In our university example, consider a staﬀ member who needs to know the salaries of all faculty in a particular department, say the Geology department. This staﬀ member is not authorized to see information regarding faculty in other departments. Thus, the staﬀ member must be denied direct access to the <i>instructor </i>relation. But if he is to have access to the information for the Geology department, he might be granted access to a view that we shall call <i>geo instructor</i>, consisting of only those <i>instructor </i>tuples pertaining to the Geology department. This view can be deﬁned in <span class="s44">SQL </span>as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_844.png"/></span></p><p class="s46" style="padding-left: 229pt;text-indent: 0pt;text-align: left;">create view <i>geo instructor </i>as</p><p style="padding-left: 242pt;text-indent: 0pt;text-align: left;">(<b>select </b>*</p><p class="s46" style="padding-left: 246pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_845.png"/></span></p><p style="padding-left: 137pt;text-indent: 108pt;line-height: 197%;text-align: left;"><b>where </b><i>dept name </i>= &#39;Geology&#39;); Suppose that the staﬀ member issues the following <span class="s44">SQL </span>query:</p><p class="s46" style="padding-left: 263pt;text-indent: 0pt;line-height: 12pt;text-align: left;">select <span class="p">*</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_846.png"/></span></p><p class="s46" style="padding-left: 263pt;text-indent: 0pt;text-align: left;">from <i>geo instructor</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The staﬀ member is authorized to see the result of this query. However, when the query processor translates it into a query on the actual relations in the database, it replaces uses of a view by the deﬁnition of the view, producing a query on <i>instructor</i>. Thus, the system must check authorization on the clerk’s query before it replaces views by their deﬁnitions.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_847.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A user who creates a view does not necessarily receive all privileges on that view. She receives only those privileges that provide no additional authorization beyond those that she already had. For example, a user who creates a view cannot be given <b>up- date </b>authorization on a view without having <b>update </b>authorization on the relations used to deﬁne the view. If a user creates a view on which no authorization can be granted, the system will deny the view creation request. In our <i>geo instructor </i>view example, the creator of the view must have <b>select </b>authorization on the <i>instructor </i>relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">As we will see in Section 5.2, <span class="s44">SQL </span>supports the creation of functions and proce- dures, which may, in turn, contain queries and updates. The <span class="s63">execute </span>privilege can be granted on a function or procedure, enabling a user to execute the function or proce-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">dure. By default, just like views, functions and procedures have all the privileges that the creator of the function or procedure had. In eﬀect, the function or procedure runs as if it were invoked by the user who created the function.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Although this behavior is appropriate in many situations, it is not always appropri- ate. Starting with <span class="s44">SQL:2003</span>, if the function deﬁnition has an extra clause <b>sql security invoker</b>, then it is executed under the privileges of the user who invokes the function, rather than the privileges of the <b>deﬁner </b>of the function. This allows the creation of libraries of functions that can run under the same authorization as the invoker.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.7.4 Authorizations on Schema</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s44">SQL </span>standard speciﬁes a primitive authorization mechanism for the database schema: Only the owner of the schema can carry out any modiﬁcation to the schema, such as creating or deleting relations, adding or dropping attributes of relations, and adding or dropping indices.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_848.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">However, <span class="s44">SQL </span>includes a <b>references </b>privilege that permits a user to declare foreign keys when creating relations. The <span class="s44">SQL </span><b>references </b>privilege is granted on speciﬁc at- tributes in a manner like that for the <b>update </b>privilege. The following <b>grant </b>statement allows user Mariano to create relations that reference the key <i>dept name </i>of the <i>depart- ment </i>relation as a foreign key:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_849.png"/></span></p><p class="s46" style="padding-left: 56pt;text-indent: 0pt;text-align: center;">grant references <span class="p">(</span><i>dept name</i><span class="p">) </span>on <i>department </i>to <span class="p">Mariano;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_850.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Initially, it may appear that there is no reason ever to prevent users from creating foreign keys referencing another relation. However, recall that foreign-key constraints restrict deletion and update operations on the referenced relation. Suppose Mariano creates a foreign key in a relation <i>r </i>referencing the <i>dept name </i>attribute of the <i>department </i>relation and then inserts a tuple into <i>r </i>pertaining to the Geology department. It is no longer possible to delete the Geology department from the <i>department </i>relation without also modifying relation <i>r</i>. Thus, the deﬁnition of a foreign key by Mariano restricts future activity by other users; therefore, there is a need for the <b>references </b>privilege.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Continuing to use the example of the <i>department </i>relation, the references privilege on <i>department </i>is also required to create a <b>check </b>constraint on a relation <i>r </i>if the con- straint has a subquery referencing <i>department</i>. This is reasonable for the same reason as the one we gave for foreign-key constraints; a check constraint that references a relation limits potential updates to that relation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.7.5 Transfer of Privileges</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A user who has been granted some form of authorization may be allowed to pass on this authorization to other users. By default, a user/role that is granted a privilege is not authorized to grant that privilege to another user/role. If we wish to grant a privilege and to allow the recipient to pass the privilege on to other users, we append the <b>with grant option </b>clause to the appropriate <b>grant </b>command. For example, if we wish to allow</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Amit the <b>select </b>privilege on <i>department </i>and allow Amit to grant this privilege to others, we write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 190pt;text-indent: 0pt;text-align: left;">grant select on <i>department </i>to <span class="p">Amit </span>with grant option<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The creator of an object (relation/view/role) holds all privileges on the object, including the privilege to grant privileges to others.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Consider, as an example, the granting of update authorization on the <i>teaches </i>rela- tion of the university database. Assume that, initially, the database administrator grants update authorization on <i>teaches </i>to users <i>U</i><span class="s98">1</span>, <i>U</i><span class="s98">2</span>, and <i>U</i><span class="s98">3</span>, who may, in turn, pass on this authorization to other users. The passing of a speciﬁc authorization from one user to another can be represented by an <span class="s63">authorization graph</span>. The nodes of this graph are the users.</p><p class="s13" style="padding-top: 1pt;padding-left: 119pt;text-indent: 17pt;line-height: 92%;text-align: justify;"><span class="p">Consider the graph for update authorization on </span>teaches<span class="p">. The graph includes an edge </span>U<span class="s97">i </span><span class="s86">→ </span>U<span class="s97">j </span><span class="p">if user </span>U<span class="s97">i </span><span class="p">grants update authorization on </span>teaches <span class="p">to </span>U<span class="s97">j </span><span class="p">. The root of the graph is the database administrator. In the sample graph in Figure 4.11, observe that user </span>U<span class="s130">5 </span><span class="s94">is granted authorization by both </span>U<span class="s130">1 </span><span class="s94">and </span>U<span class="s130">2</span><span class="s94">; </span>U<span class="s130">4 </span><span class="s94">is granted authorization by</span></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">only <i>U</i><span class="s98">1</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A user has an authorization <i>if and only if </i>there is a path from the root of the authorization graph (the node representing the database administrator) down to the node representing the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.7.6 Revoking of Privileges</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Suppose that the database administrator decides to revoke the authorization of user <i>U</i><span class="s98">1</span>. Since <i>U</i><span class="s98">4</span> has authorization from <i>U</i><span class="s98">1</span>, that authorization should be revoked as well. However, <i>U</i><span class="s98">5</span> was granted authorization by both <i>U</i><span class="s98">1</span> and <i>U</i><span class="s98">2</span>. Since the database ad- ministrator did not revoke update authorization on <i>teaches </i>from <i>U</i><span class="s98">2</span>, <i>U</i><span class="s98">5</span> retains update</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="68" height="72" alt="image" src="Image_851.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="64" height="64" alt="image" src="Image_852.png"/></span></p><p class="s69" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">U<span class="s175">1</span><span class="s42">       </span>U<span class="s175">4</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="63" height="63" alt="image" src="Image_853.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="65" height="5" alt="image" src="Image_854.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="68" height="5" alt="image" src="Image_855.png"/></span></p><p class="s42" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">DBA       <i>U</i><span class="s175">2</span>       <i>U</i><span class="s175">5</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 128pt;text-indent: 0pt;text-align: center;">U<span class="s175">3</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 251pt;text-indent: -130pt;text-align: left;"><span class="s73">Figure 4.11 </span>Authorization-grant graph (<span class="s182">U</span><span class="s116">1</span>, <span class="s182">U</span><span class="s116">2</span>, <span class="s112">… </span>, <span class="s182">U</span><span class="s116">5</span> are users and <span class="s157">DBA </span>refers to the database administrator).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">authorization on <i>teaches</i>. If <i>U</i><span class="s98">2</span> eventually revokes authorization from <i>U</i><span class="s98">5</span>, then <i>U</i><span class="s98">5</span> loses the authorization.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A pair of devious users might attempt to defeat the rules for revocation of autho- rization by granting authorization to each other. For example, <i>U</i><span class="s98">2</span> is initially granted an authorization by the database administrator, and <i>U</i><span class="s98">2</span> further grants it to <i>U</i><span class="s98">3</span>. Suppose <i>U</i><span class="s98">3</span> now grants the privilege back to <i>U</i><span class="s98">2</span>. If the database administrator revokes autho- rization from <i>U</i><span class="s98">2</span>, it might appear that <i>U</i><span class="s98">2</span> retains authorization through <i>U</i><span class="s98">3</span>. However, note that once the administrator revokes authorization from <i>U</i><span class="s98">2</span>, there is no path in the authorization graph from the root either to <i>U</i><span class="s98">2</span> or to <i>U</i><span class="s98">3</span>. Thus, <span class="s44">SQL </span>ensures that the authorization is revoked from both the users.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As we just saw, revocation of a privilege from a user/role may cause other users/roles also to lose that privilege. This behavior is called <i>cascading revocation</i>. In most database systems, cascading is the default behavior. However, the <b>revoke </b>state- ment may specify <b>restrict </b>in order to prevent cascading revocation:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 56pt;text-indent: 0pt;text-align: center;">revoke select on <i>department </i>from <span class="p">Amit, Satoshi </span>restrict<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">In this case, the system returns an error if there are any cascading revocations and does not carry out the revoke action.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The keyword <b>cascade </b>can be used instead of <b>restrict </b>to indicate that revocation should cascade; however, it can be omitted, as we have done in the preceding examples, since it is the default behavior.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">The following <b>revoke </b>statement revokes only the grant option, rather than the actual</p><p class="s46" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">select <span class="p">privilege:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">revoke grant option for select on <i>department </i>from <span class="p">Amit;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Note that some database implementations do not support the above syntax; instead, the privilege itself can be revoked and then granted again without the grant option.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Cascading revocation is inappropriate in many situations. Suppose Satoshi has the role of <i>dean</i>, grants <i>instructor </i>to Amit, and later the role <i>dean </i>is revoked from Satoshi (perhaps because Satoshi leaves the university); Amit continues to be employed on the faculty and should retain the <i>instructor </i>role.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_856.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">To deal with this situation, <span class="s44">SQL </span>permits a privilege to be granted by a role rather than by a user. <span class="s44">SQL </span>has a notion of the current role associated with a session. By default, the current role associated with a session is null (except in some special cases). The current role associated with a session can be set by executing <b>set role </b><i>role name</i>. The speciﬁed role must have been granted to the user, otherwise the <b>set role </b>statement fails. To grant a privilege with the grantor set to the current role associated with a session,</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">we can add the clause:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_857.png"/></span></p><p class="s46" style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: center;">granted by current role</p><p style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">to the grant statement, provided the current role is not null.</p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;"><a name="bookmark65">4.8 </a><span style=" color: #00AEEF;">Summary  </span><span class="s164">173</span><a name="bookmark106">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_858.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Suppose the granting of the role <i>instructor </i>(or other privileges) to Amit is done using the <b>granted by current role </b>clause, with the current role set to <i>dean</i>, instead of the grantor being the user Satoshi. Then, revoking of roles/privileges (including the role <i>dean</i>) from Satoshi will not result in revoking of privileges that had the grantor set to the role <i>dean</i>, even if Satoshi was the user who executed the grant; thus, Amit would retain the <i>instructor </i>role even after Satoshi’s privileges are revoked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.7.7 Row-Level Authorization</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The types of authorization privileges we have studied apply at the level of relations or views. Some database systems provide mechanisms for ﬁne-grained authorization at the level of speciﬁc tuples within a relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Suppose, for example, that we wish to allow a student to see her or his own data in the <i>takes </i>relation but not those data of other users. We can enforce such a restric- tion using row-level authorization, if the database supports it. We describe row-level authorization in Oracle below; <span class="s44">P</span>ostgre<span class="s44">SQL </span>and <span class="s44">SQL S</span>erver too support row-level au- thorization using a conceptually similar mechanism, but using a diﬀerent syntax.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_859.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The Oracle <span class="s63">Virtual Private Database </span>(<span class="s64">VPD</span>) feature supports row-level authoriza- tion as follows. It allows a system administrator to associate a function with a relation; the function returns a predicate that gets added automatically to any query that uses the relation. The predicate can use the function <b>sys context</b>, which returns the identi- ﬁer of the user on whose behalf a query is being executed. For our example of students accessing their data in the <i>takes </i>relation, we would specify the following predicate to be associated with the <i>takes </i>relation:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_860.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_861.png"/></span></p><p style="padding-left: 199pt;text-indent: 0pt;text-align: left;"><span class="s69">ID </span>= <b>sys context </b>(&#39;<span class="s44">USERENV</span>&#39;, &#39;<span class="s44">SESSION USER</span>&#39;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">This predicate is added by the system to the <b>where </b>clause of every query that uses the <i>takes </i>relation. As a result, each student can see only those <i>takes </i>tuples whose <span class="s44">ID </span>value matches her <span class="s44">ID</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s42">VPD </span><span class="s43">provides authorization at the level of speciﬁc tuples, or rows, of a relation, and is therefore said to be a </span><span class="s63">row-level authorization </span>mechanism. A potential pitfall with adding a predicate as described above is that it may change the meaning of a query signiﬁcantly. For example, if a user wrote a query to ﬁnd the average grade over all courses, she would end up getting the average of <i>her </i>grades, not all grades. Although the system would give the “right” answer for the rewritten query, that answer would not correspond to the query the user may have thought she was submitting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part108.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part110.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
