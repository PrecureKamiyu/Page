<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>10.7  Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part208.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part210.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 71pt;text-indent: 0pt;text-align: left;">10.7  <span style=" color: #00AEEF;">Summary</span></p><p class="s39" style="padding-top: 9pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Modern data management applications often need to deal with data that are not necessarily in relational form, and these applications also need to deal with vol- umes of data that are far larger than what a single traditional organization would have generated.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The increasing use of data sensors leads to the connection of sensors and other computing devices embedded within other objects to the internet, often referred to as the “internet of things.”</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">There is now a wider variety of query language options for Big Data applications, driven by the need to handle more varied of data types, and by the need to scale to very large data volumes/velocity.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Building data management systems that can scale to large volume/velocity of data requires parallel storage and processing of data.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Distributed ﬁle systems allow ﬁles to be stored across a number of machines, while allowing access to ﬁles using a traditional ﬁle-system interface.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Key-value storage systems allow records to be stored and retrieved based on a key and may additionally provide limited query facilities. These systems are not full- ﬂedged database systems, and they are sometimes called No<span class="s41">SQL </span>systems.</p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Parallel and distributed databases provide a traditional database interface, but they store data across multiple machines, and they perform query processing in parallel across multiple machines.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">The MapReduce paradigm models a common situation in parallel processing, where some processing, identiﬁed by the </span>map() <span class="p">function, is applied to each of a large number of input records, and then some form of aggregation, identiﬁed by the </span>reduce() <span class="p">function, is applied to the result of the </span>map() <span class="p">function.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The Hadoop system provides a widely used open-source implementation of MapReduce in the Java language.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>There are a large number of applications that use the MapReduce paradigm for data processing of various kinds whose logic can be easily expressed using <span class="s41">SQL</span>.</p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Relational algebra forms the foundation of relational query processing, allowing queries to be modeled as trees of operations. This idea is extended to settings with more complex data types by supporting algebraic operators that can work on datasets containing records with complex data types, and returning datasets with records containing similar complex data types.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">There are many applications where queries need to be executed continuously, on data that arrive in a continuous fashion. The term </span><span class="s63">streaming data </span><span class="p">refers to data that arrive in a continuous fashion. Many application domains need to process incoming data in real time.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">• <span class="s40">Graphs are an important type of data that databases need to deal with.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part208.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part210.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
