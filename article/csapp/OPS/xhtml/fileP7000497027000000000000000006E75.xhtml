<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>8.8 Summary </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006E75" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004566D" data-uri="chapter08.xhtml#P700049702700000000000000004566D" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E77" title="787" data-uri="chapter08.xhtml#P7000497027000000000000000006E77" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">8.8 </span><span class="pcalibre label pcalibre1">Summary </span></h1></header>
<p id="P700049702700000000000000004566E" data-uri="chapter08.xhtml#P700049702700000000000000004566E" class="pcalibre1 pcalibre calibre2">Exceptional control flow (ECF) occurs at all levels of a computer system and is a basic mechanism for providing concurrency in a computer system.</p>
<p id="P700049702700000000000000004566F" data-uri="chapter08.xhtml#P700049702700000000000000004566F" class="pcalibre1 pcalibre calibre2">At the hardware level, exceptions are abrupt changes in the control flow that are triggered by events in the processor. The control flow passes to a software handler, which does some processing and then returns control to the interrupted control flow.</p>
<p id="P7000497027000000000000000045670" data-uri="chapter08.xhtml#P7000497027000000000000000045670" class="pcalibre1 pcalibre calibre2">There are four different types of exceptions: interrupts, faults, aborts, and traps. Interrupts occur asynchronously (with respect to any instructions) when an external I/O device such as a timer chip or a disk controller sets the interrupt pin on the processor chip. Control returns to the instruction following the faulting instruction. Faults and aborts occur synchronously as the result of the execution of an instruction. Fault handlers restart the faulting instruction, while abort handlers never return control to the interrupted flow. Finally, traps are like function calls that are used to implement the system calls that provide applications with controlled entry points into the operating system code.</p>
<p id="P7000497027000000000000000045671" data-uri="chapter08.xhtml#P7000497027000000000000000045671" class="pcalibre1 pcalibre calibre2">At the operating system level, the kernel uses ECF to provide the fundamental notion of a process. A process provides applications with two important abstractions: (1) logical control flows that give each program the illusion that it has exclusive use of the processor, and (2) private address spaces that provide the illusion that each program has exclusive use of the main memory.</p>
<p id="P7000497027000000000000000045672" data-uri="chapter08.xhtml#P7000497027000000000000000045672" class="pcalibre1 pcalibre calibre2">At the interface between the operating system and applications, applications can create child processes, wait for their child processes to stop or terminate, run new programs, and catch signals from other processes. The semantics of signal handling is subtle and can vary from system to system. However, mechanisms exist on Posix-compliant systems that allow programs to clearly specify the expected signal-handling semantics.</p>
<p id="P7000497027000000000000000045673" data-uri="chapter08.xhtml#P7000497027000000000000000045673" class="pcalibre1 pcalibre calibre2">Finally, at the application level, C programs can use nonlocal jumps to bypass the normal call/return stack discipline and branch directly from one function to another.</p>
</section></body></html>
