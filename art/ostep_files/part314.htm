<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Final Producer/Consumer Solution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part313.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part315.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Final Producer/Consumer Solution</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">We now have a working producer/consumer solution, albeit not a fully general one. The last change we make is to enable more concurrency and efficiency; specifically, we add more buffer slots, so that multiple values can be produced before sleeping, and similarly multiple values can be consumed before sleeping. With just a single producer and consumer, this approach is more efficient as it reduces context switches; with multiple producers or consumers (or both), it even allows concurrent producing or consuming to take place, thus increasing concurrency. Fortunately, it is a small change from our current solution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:52.0199pt" cellspacing="0"><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">1</p></td><td style="width:21pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 6pt;text-align: right;">int</p></td><td style="width:55pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">buffer[MAX];</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">2</p></td><td style="width:21pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">int</p></td><td style="width:55pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">fill = 0;</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">3</p></td><td style="width:21pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">int</p></td><td style="width:55pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">use = 0;</p></td></tr><tr style="height:9pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;text-align: center;">4</p></td><td style="width:21pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 8pt;text-align: right;">int</p></td><td style="width:55pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">count = 0;</p></td></tr><tr style="height:7pt"><td style="width:11pt"><p class="s135" style="padding-right: 3pt;text-indent: 0pt;line-height: 5pt;text-align: center;">5</p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:55pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">6  <span class="s38">void put(int value) {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">7    <span class="s38">buffer[fill] = value;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8     <span class="s38">fill = (fill + 1) % MAX;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9    <span class="s38">count++;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">10  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">11</p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">12  <span class="s38">int get() {</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">13    <span class="s38">int tmp = buffer[use];</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">14     <span class="s38">use = (use + 1) % MAX;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">15    <span class="s38">count--;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">16    <span class="s38">return tmp;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">17  <span class="s38">}</span></p><p style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Figure 30.9: <b>The Final Put and Get Routines</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:49.5003pt" cellspacing="0"><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">1</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">cond_t empty, fill;</p></td><td style="width:25pt" colspan="2" rowspan="6"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">mutex_t mutex;</p></td></tr><tr style="height:7pt"><td style="width:13pt"><p class="s135" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">3</p></td><td style="width:201pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">void <span class="s136">*</span>producer(void <span class="s136">*</span>arg) {</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">5</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 6pt;text-align: left;">int i;</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">6</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 7pt;text-align: left;">for (i = 0; i &lt; loops; i++) {</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">7</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_mutex_lock(&amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p1</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">8</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">while (count == MAX)</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p2</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">9</p></td><td style="width:201pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">Pthread_cond_wait(&amp;empty, &amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p3</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">10</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">put(i);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p4</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">11</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_cond_signal(&amp;fill);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p5</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">12</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_mutex_unlock(&amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">p6</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">13</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:7pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">15</p></td><td style="width:201pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:9pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">void <span class="s136">*</span>consumer(void <span class="s136">*</span>arg) {</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">17</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 6pt;text-align: left;">int i;</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">18</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 7pt;text-align: left;">for (i = 0; i &lt; loops; i++) {</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">19</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_mutex_lock(&amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c1</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">20</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">while (count == 0)</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c2</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">21</p></td><td style="width:201pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 7pt;text-align: right;">Pthread_cond_wait(&amp;fill, &amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c3</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">22</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">int tmp = get();</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c4</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">23</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_cond_signal(&amp;empty);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c5</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">24</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Pthread_mutex_unlock(&amp;mutex);</p></td><td style="width:13pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: right;">//</p></td><td style="width:12pt"><p class="s42" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 7pt;text-align: center;">c6</p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">25</p></td><td style="width:201pt"><p class="s42" style="padding-left: 39pt;text-indent: 0pt;line-height: 7pt;text-align: left;">printf(&quot;%d\n&quot;, tmp);</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 6pt;text-align: left;">26</p></td><td style="width:201pt"><p class="s42" style="padding-left: 22pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:13pt"><p class="s135" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;line-height: 5pt;text-align: left;">27</p></td><td style="width:201pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">}</p></td><td style="width:13pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-left: 54pt;text-indent: 0pt;text-align: center;">Figure 30.10: <b>The Final Working Solution</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The first change for this final solution is within the buffer structure itself and the corresponding <span class="s41">put() </span>and <span class="s41">get() </span>(Figure <span style=" color: #00AEEF;">30.9</span>). We also slightly change the conditions that producers and consumers check in or- der to determine whether to sleep or not. Figure <span style=" color: #00AEEF;">30.10 </span>shows the final waiting and signaling logic. A producer only sleeps if all buffers are cur- rently filled (p2); similarly, a consumer only sleeps if all buffers are cur- rently empty (c2). And thus we solve the producer/consumer problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 64pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: U<span class="s7">SE </span>W<span class="s7">HILE </span>(N<span class="s7">OT </span>I<span class="s7">F</span>) F<span class="s7">OR </span>C<span class="s7">ONDITIONS</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 88%;text-align: justify;">When checking for a condition in a multi-threaded program, using a <span class="s41">while </span>loop is always correct; using an <span class="s41">if </span>statement only might be, depending on the semantics of signaling. Thus, always use <span class="s41">while </span>and your code will behave as expected.</p><p style="padding-top: 2pt;padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Using while loops around conditional checks also handles the case where <b>spurious wakeups </b>occur. In some thread packages, due to de- tails of the implementation, it is possible that two threads get woken up though just a single signal has taken place [L11]. Spurious wakeups are further reason to re-check the condition a thread is waiting on.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part313.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part315.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
