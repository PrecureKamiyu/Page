<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>36.6 Methods Of Device Interaction</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part371.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part373.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">36.6 Methods Of Device Interaction</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Now that we have some sense of the efficiency issues involved with performing I/O, there are a few other problems we need to handle to incorporate devices into modern systems. One problem you may have noticed thus far: we have not really said anything about how the OS ac- tually communicates with the device! Thus, the problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">HE </span>C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>C<span class="s7">OMMUNICATE </span>W<span class="s7">ITH </span>D<span class="s7">EVICES</span></p><p style="padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: left;">How should the hardware communicate with a device? Should there be explicit instructions? Or are there other ways to do it?</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Over time, two primary methods of device communication have de- veloped. The first, oldest method (used by IBM mainframes for many years) is to have explicit <b>I/O instructions</b>. These instructions specify a way for the OS to send data to specific device registers and thus allow the construction of the protocols described above.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">For example, on x86, the <span class="s41">in </span>and <span class="s41">out </span>instructions can be used to com- municate with devices. For example, to send data to a device, the caller specifies a register with the data in it, and a specific <i>port </i>which names the device. Executing the instruction leads to the desired behavior.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Such instructions are usually <b>privileged</b>. The OS controls devices, and the OS thus is the only entity allowed to directly communicate with them. Imagine if any program could read or write the disk, for example: total chaos (as always), as any user program could use such a loophole to gain complete control over the machine.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The second method to interact with devices is known as <b>memory- mapped I/O</b>. With this approach, the hardware makes device registers available as if they were memory locations. To access a particular register, the OS issues a load (to read) or store (to write) the address; the hardware then routes the load/store to the device instead of main memory.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">There is not some great advantage to one approach or the other. The memory-mapped approach is nice in that no new instructions are needed to support it, but both approaches are still in use today.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part371.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part373.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
