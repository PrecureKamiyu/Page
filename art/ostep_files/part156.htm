<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>16.5 Fine-grained vs. Coarse-grained Segmentation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part155.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part157.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 6pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">16.5 Fine-grained vs. Coarse-grained Segmentation</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Most of our examples thus far have focused on systems with just a few segments (i.e., code, stack, heap); we can think of this segmentation as <b>coarse-grained</b>, as it chops up the address space into relatively large, coarse chunks. However, some early systems (e.g., Multics [CV65,DD68]) were more flexible and allowed for address spaces to consist of a large number smaller segments, referred to as <b>fine-grained </b>segmentation.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Supporting many segments requires even further hardware support, with a <b>segment table </b>of some kind stored in memory. Such segment ta- bles usually support the creation of a very large number of segments, and thus enable a system to use segments in more flexible ways than we have thus far discussed. For example, early machines like the Burroughs B5000 had support for thousands of segments, and expected a compiler to chop code and data into separate segments which the OS and hardware would then support [RK68]. The thinking at the time was that by having fine- grained segments, the OS could better learn about which segments are in use and which are not and thus utilize main memory more effectively.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part155.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part157.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
