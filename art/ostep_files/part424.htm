<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>39.8 Getting Information About Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part423.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part425.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">39.8 Getting Information About Files</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Beyond file access, we expect the file system to keep a fair amount of information about each file it is storing. We generally call such data about files <b>metadata</b>. To see the metadata for a certain file, we can use <span class="s41">stat() </span>or <span class="s41">fstat() </span>system call – read their man pages for details on how to call them. These calls take a pathname (or file descriptor) to a file and fill in a <span class="s41">stat </span>structure as seen here:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">struct stat {</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 89%;text-align: left;">dev_t  st_dev;  /<span class="s39">* </span>ID of device containing file <span class="s39">*</span>/ ino_t  st_ino;  /<span class="s39">* </span>inode number <span class="s39">*</span>/</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 85%;text-align: left;">mode_t  st_mode;  /<span class="s39">* </span>protection <span class="s39">*</span>/</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 89%;text-align: left;">nlink_t  st_nlink;  /<span class="s39">* </span>number of hard links <span class="s39">*</span>/ uid_t  st_uid;  /<span class="s39">* </span>user ID of owner <span class="s39">*</span>/ gid_t  st_gid;  /<span class="s39">* </span>group ID of owner <span class="s39">*</span>/</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 89%;text-align: left;">dev_t  st_rdev;  /<span class="s39">* </span>device ID (if special file) <span class="s39">*</span>/ off_t  st_size;  /<span class="s39">* </span>total size, in bytes <span class="s39">*</span>/ blksize_t st_blksize; /<span class="s39">* </span>blocksize for filesystem I/O <span class="s39">*</span>/ blkcnt_t st_blocks; /<span class="s39">* </span>number of blocks allocated <span class="s39">*</span>/ time_t  st_atime;  /<span class="s39">* </span>time of last access <span class="s39">*</span>/</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 83%;text-align: left;">time_t  st_mtime; /<span class="s39">* </span>time of last modification <span class="s39">*</span>/</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 79%;text-align: left;">time_t  st_ctime; /<span class="s39">* </span>time of last status change <span class="s39">*</span>/</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You can see that there is a lot of information kept about each file, in- cluding its size (in bytes), its low-level name (i.e., inode number), some ownership information, and some information about when the file was accessed or modified, among other things. To see this information, you can use the command line tool <span class="s41">stat</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">prompt&gt; echo hello &gt; file prompt&gt; stat file</p><p class="s38" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">File: ‘file’</p><p class="s38" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">Size: 6 Blocks: 8    IO Block: 4096  regular file</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Device: 811h/2065d Inode: 67158084  Links: 1</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Access: (0640/-rw-r-----) Uid: (30686/ remzi) Gid: (30686/ remzi) Access: 2011-05-03 15:50:20.157594748 -0500</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Modify: 2011-05-03 15:50:20.157594748 -0500</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Change: 2011-05-03 15:50:20.157594748 -0500</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">As it turns out, each file system usually keeps this type of information</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">in a structure called an <b>inode</b><span class="s35">1</span>. We’ll be learning a lot more about inodes when we talk about file system implementation. For now, you should just think of an inode as a persistent data structure kept by the file system that has information like we see above inside of it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part423.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part425.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
