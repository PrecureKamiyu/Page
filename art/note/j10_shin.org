#+TITLE: SHIN Java Chapter 10: threads

* Threads. First Encounter

What is threads? Threads are seperately executed to enhance the performance. The difference between a thread and a process is that the
threads share the same variables and the memory, which look pretty risky, but on the contrary, the exact feature makes thread light weight. 

On the first encounter, let us meet the class ~bank~. It is a class defined by the author of the book to simulate a bank. Inside a
bank, there are some accounts. What ~transfer~ do is to transfer certain amount of money from one a count to the other.

Okay. We have the following code. 

#+BEGIN_SRC
public interface Runnable {
       void run();
}
#+END_SRC

It is an interface. Yes. An interface. Why ~Runnable~? You need to know that there is always a function named ~run~ to be executed by
the threads. What the interface does is only that the function ~run~ is in you class. Anyway, let us continue. 

#+BEGIN_SRC
Runnable r = () -> {
         // code here.
}
#+END_SRC

You just define a anomynous function using lambda expression. 

#+BEGIN_SRC
var t = new Thread(r);
#+END_SRC

You just pass the ~r~ to a thread, and the thread is called ~t~ now. 

#+BEGIN_SRC
t.start();
#+END_SRC

You just start the thread by calling the function named ~start~ inside the thread. 

For the note below. One needs to know that there is method called ~run~ inside of the thread class. However one should not define the
~run~ method by their own to /decouple/ the task from the thread that execute the task.