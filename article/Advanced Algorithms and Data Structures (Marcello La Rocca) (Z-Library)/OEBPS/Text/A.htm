<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>appendix A</title>
    
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-998530"></a><a id="pgfId-998542"></a>appendix A. A quick guide to pseudo-code</h1>
  </div>

  <p class="body"><a id="pgfId-998559"></a>For this <a id="marker-1001372"></a>book we decided to use pseudo-code to describe how algorithms work. This decision was mainly motivated by two considerations:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-998570"></a>We wanted to make the book accessible to readers with all kind of backgrounds, without being tied to a particular programming language or paradigm.</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-998583"></a>By providing a generic description of the steps performed by the algorithm and abstracting away low-level details, we can focus on the essence of the algorithms without worrying about programming language quirks.</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-998595"></a>The whole point of pseudo-code should be to provide a generic, complete, and easy-to-understand description of algorithms; hence, if it is done properly, there should be no need to further explain it.</p>

  <p class="body"><a id="pgfId-998606"></a>At the same time, even pseudo-code uses arbitrary conventions and needs to be consistent and well defined. Moreover, readers who are not familiar either with this approach or with the notations or conventions chosen might initially need some time to adjust and get up to speed.</p>

  <p class="body"><a id="pgfId-998621"></a>For this reason, we decided to add a short guide explaining the notation we are going to use throughout the book. If you already feel comfortable with reading pseudo-code, you can safely skip this appendix, or just refer to it when you feel you need clarifications on notation.</p>

  <h2 class="fm-head" id="heading_id_3"><a id="pgfId-998630"></a>A.1 Variables and basics</h2>

  <p class="body"><a id="pgfId-998644"></a>Like <a id="marker-1001376"></a><a id="marker-1001380"></a>for every other programming language, the first fundamental step is being able to save values and recover them: as you all know, while low-level languages like <code class="fm-code-in-text">Assembly</code> uses <i class="calibre17">registers</i><a id="marker-1001384"></a> as locations where you can park a value, higher-level languages introduced the concept of <i class="calibre17">variables</i>.</p>

  <p class="body"><a id="pgfId-998667"></a>Variables are just named placeholders that can be created and to which values can be assigned and later read.</p>

  <p class="body"><a id="pgfId-998676"></a>Some languages, the strongly typed ones, require each variable to accept only a certain type of value (for example, integers or strings) for the whole life of a variable. Other languages (loosely typed) will allow variables to hold any value without restricting them to a single type. The loosely typed approach also removes the need to declare variables before assigning them: a variable will be automatically created when it is first assigned (but note that using its value before assigning it will result in an error, in all loosely typed languages).</p>

  <p class="body"><a id="pgfId-998689"></a>For pseudo-code, using a loosely typed approach is pretty natural; as mentioned, we would like to abstract as much as possible from implementation details.</p>

  <p class="body"><a id="pgfId-998702"></a>Another open point for variables (and functions, and so on) is the naming convention used. This is not something that a programming language will force (usually), but rather a convention that stems from the community and from guidelines.</p>

  <p class="body"><a id="pgfId-998715"></a>We will use <i class="calibre17">camelCase</i><a id="marker-1001388"></a> for names, not for any technical reason or preference toward one programming language, but just because it uses fewer characters than <i class="calibre17">snake_case</i><a id="marker-1001392"></a>, and that makes it easier to fit code on a book page.</p>

  <p class="body"><a id="pgfId-998734"></a>So, for instance, we will use <i class="calibre17">doAction</i><a id="marker-1001396"></a> rather than <i class="calibre17">do_action</i> for a function name, and something like <i class="calibre17">RedBox</i><a id="marker-1001400"></a> for a class or object.</p>

  <p class="body"><a id="pgfId-998751"></a>There are a few basic operations on variables that are needed to interact with them:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-998760"></a><i class="calibre15">Assigning to a variabl</i>e—We use a left-pointing arrow; for instance, <code class="fm-code-in-text">index</code> ← <code class="fm-code-in-text">1</code> assigns the value 1 to a variable named “index.”</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998776"></a><i class="calibre15">Reading a variable value</i>—We just use the variable name, and that becomes a placeholder for the value held by the variable when that line of code is executed: <code class="fm-code-in-text">index</code> ← <code class="fm-code-in-text">size</code> reads the value of the variable size and assigns it to <code class="fm-code-in-text">index</code>.</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998794"></a><i class="calibre15">Comparing values</i>:</p>

      <ul class="calibre20">
        <li class="fm-list-bullet1">
          <p class="list"><a class="calibre14" id="pgfId-998807"></a>We use two equal characters to compare two variables or values<a class="calibre14" href="#pgfId-1001739"><sup class="footnotenumber">1</sup></a> for equality: <code class="fm-code-in-text">index == size</code> or <code class="fm-code-in-text">index == 1</code> are two examples, the former comparing two variables, and the latter comparing a variable and a value.</p>
        </li>

        <li class="fm-list-bullet1">
          <p class="list"><a class="calibre14" id="pgfId-998825"></a>To compare for inequality, we use either <code class="fm-code-in-text">&lt;&gt;</code> or <code class="fm-code-in-text">!=</code>: <code class="fm-code-in-text">index &lt;&gt; size</code>.</p>
        </li>
      </ul>
    </li>
  </ul>

  <p class="body"><a id="pgfId-998842"></a>We adopt the standard operators for less than, greater than, and so on: <code class="fm-code-in-text">index &lt;= size</code>, for instance, evaluates to <code class="fm-code-in-text">true</code><a id="marker-1001404"></a> if index is less than or equal than <a id="marker-1001408"></a><a id="marker-1001412"></a><code class="fm-code-in-text">size</code>.</p>

  <h2 class="fm-head" id="heading_id_4"><a id="pgfId-998866"></a>A.2 Arrays</h2>

  <p class="body"><a id="pgfId-998878"></a>Arrays <a id="marker-1001416"></a><a id="marker-1001420"></a>can somewhat be considered a special case of variables, because you can assign/read the whole array or just its single elements. If you are not familiar with arrays and containers, check out appendix C.</p>

  <p class="body"><a id="pgfId-998892"></a>In our pseudo-code we will abstract over the details of the implementation of the arrays typical of individual programming languages. In particular, we will treat arrays as dynamic, without the need to explicitly allocate room for the elements before accessing them.</p>

  <p class="body"><a id="pgfId-998905"></a>Some programming languages provide natively this concept of dynamic arrays; others provide something similar in their standard libraries, often with a data structure called <code class="fm-code-in-text">vector</code><a id="marker-1001424"></a>.</p>

  <p class="body"><a id="pgfId-998917"></a>Arrays can also either have a homogenous type, meaning that all their elements must have the same type, decided when the array is created, or can hold any value independently on the type. This is usually connected to a programming language being strongly or loosely typed.</p>

  <p class="body"><a id="pgfId-998930"></a>As mentioned in the previous section, we will abstract over variable types in this book’s pseudocode, so the latter approach will be naturally assumed. However, for most of our data structures we will only need arrays and containers that hold elements of the same type, and unless it’s stated differently, you can safely assume this will be the case: just be aware that handling arrays with heterogeneous types is possible, but requires extra effort and care.</p>

  <p class="body"><a id="pgfId-998943"></a>As for the nomenclature, to access an array element we use square brackets, like most programming languages do: <code class="fm-code-in-text">A[i]</code> denotes the value of the <code class="fm-code-in-text">i</code>-th element of array <code class="fm-code-in-text">A</code>, and similarly, to assign a value to that element, we use the regular syntax we have shown for variables, something like <code class="fm-code-in-text">A[j]</code> ← <code class="fm-code-in-text">b</code> (that assigns the value of the variable <code class="fm-code-in-text">b</code> to the <code class="fm-code-in-text">j</code>-th element of array <code class="fm-code-in-text">A</code>).</p>

  <p class="body"><a id="pgfId-998988"></a>Whenever it’s not stated otherwise, we will assume arrays use 0-based indexing, so the first element in array <code class="fm-code-in-text">A</code> will be <code class="fm-code-in-text">A[0]</code>, the second one <code class="fm-code-in-text">A[1]</code>, and so on.</p>

  <p class="body"><a id="pgfId-999004"></a>We will also, occasionally, have to perform certain operations on arrays (and containers in general). For example, we might need to find the maximum value in an array of numbers, or the longest word in an array of strings, or the sum of values in a numeric array.</p>

  <p class="body"><a id="pgfId-999019"></a>For these array-wide operations, we will use something closer to mathematical notation, for the sake of synthesis. For instance, given an array <code class="fm-code-in-text">A</code></p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-999030"></a><code class="fm-code-in-text">max{A}</code> stands for the maximum value of <code class="fm-code-in-text">A</code>.</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-999044"></a><code class="fm-code-in-text">sum{A}</code> is the sum of all element of <code class="fm-code-in-text">A</code>.</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-999058"></a><code class="fm-code-in-text">sum{x</code> <span class="cambria">∈</span> <code class="fm-code-in-text">A | x &gt; 0}</code> is the sum of positive elements of <code class="fm-code-in-text">A</code>.</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-999075"></a><code class="fm-code-in-text">A[i]</code> ← <code class="fm-code-in-text">i<sup class="superscript1">3</sup> (</code><span class="cambria">∀</span> <code class="fm-code-in-text">i</code> <span class="cambria">ϵ</span> <code class="fm-code-in-text">{0..|A|-1} | i % 3 ==0)</code> sets all elements of <code class="fm-code-in-text">A</code> whose indices are multiples of 3 to the cube of the index.</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-999102"></a>It goes without saying that depending on the programming language you choose, there might not be a direct translation into a single instruction, and you will need to use or write a helper method to perform the same <a id="marker-1001428"></a><a id="marker-1001432"></a>operations.</p>

  <h2 class="fm-head" id="heading_id_5"><a id="pgfId-999114"></a>A.3 Conditional instructions</h2>

  <p class="body"><a id="pgfId-999128"></a>The <a id="marker-1007128"></a><a id="marker-1007129"></a>next fundamental concepts we need in order to write a meaningful program are conditional statements. Most programming languages implement conditionals with an <i class="fm-italics">if-then-else</i> construction<a id="marker-1007131"></a>, and we will use a similar syntax.</p>

  <p class="body"><a id="pgfId-999144"></a>For instance, to express a simple algorithm to compute the absolute value of a number x and store it in another variable y, we will use the following syntax:</p>
  <pre class="programlisting"><b class="calibre21">if</b> x &lt; 0 <b class="calibre21">then</b>
  y ← -x
<b class="calibre21">else</b>
  y ← x</pre>

  <p class="body"><a id="pgfId-999197"></a>Conditions are not surrounded by parentheses, and we don’t use curly braces for blocks (see section A.4). Also, notice that keywords will be in a <b class="calibre21">bold</b> font.</p>

  <p class="body"><a id="pgfId-999208"></a>Sometimes, you won’t need an <code class="fm-code-in-text">else</code> clause, specifically whenever you need to take action only if a condition is met and do nothing otherwise. For instance, figure A.1 shows an alternative version of the absolute value algorithm, assigning the absolute value of <code class="fm-code-in-text">x</code> to <code class="fm-code-in-text">x</code> itself; this allows us to simplify the initial code as</p>
  <pre class="programlisting"><b class="calibre21">if</b> x &lt; 0 <b class="calibre21">then</b>
  x ← -x
 </pre>

  <p class="fm-figure"><img alt="" class="calibre23" src="../Images/appA_F01.png"/></p>

  <p class="fm-figure-caption"><a id="pgfId-1014678"></a>Figure A.1 Possible flowchart for an algorithm computing absolute value</p>

  <h3 class="fm-head2" id="heading_id_6"><a id="pgfId-999261"></a>A.3.1 Else-if</h3>

  <p class="body"><a id="pgfId-999273"></a>At other <a id="marker-1001448"></a><a id="marker-1001452"></a><a id="marker-1001456"></a>times we need to decide between more than two branches. In that case, while it is possible to implement the same logic using multiple nested <code class="fm-code-in-text">if-then-else</code> statements<a id="marker-1001460"></a>, it would make the code cumbersome and mangled (because of the indentation).</p>

  <p class="body"><a id="pgfId-999290"></a>A more succinct approach uses the <code class="fm-code-in-text">else-if</code> variant, common in script languages such as Python and Ruby.</p>

  <p class="body"><a id="pgfId-999301"></a>Here we decided to use the <code class="fm-code-in-text">elsif</code> keyword:</p>
  <pre class="programlisting"><b class="calibre21">if</b> x &lt; 0 <b class="calibre21">then</b>
  y ← -1/x
<b class="calibre21">elsif</b> x &gt; 0 <b class="calibre21">then</b>
  y ← 1/x
<b class="calibre21">else</b> 
  y ← NaN</pre>

  <p class="body"><a id="pgfId-999373"></a>Incidentally, this code snippet computes the absolute value of the reciprocal of a number <code class="fm-code-in-text">x</code>, and <code class="fm-code-in-text">NaN</code> stands for “not a number,” that’s the best choice to express the fact that <code class="fm-code-in-text">1/0</code> is not <a id="marker-1001464"></a><a id="marker-1001468"></a><a id="marker-1001472"></a>defined.<a href="#pgfId-1001753"><sup class="footnotenumber">2</sup></a></p>

  <h3 class="fm-head2" id="heading_id_7"><a id="pgfId-999398"></a>A.3.2 Switch</h3>

  <p class="body"><a id="pgfId-999410"></a>Many <a id="marker-1001476"></a><a id="marker-1001480"></a>programming languages also offer a specialized instruction to be used when the condition we check can assume several discrete values. Usually this instruction is called <code class="fm-code-in-text">switch</code><a id="marker-1001484"></a> and allows us to enumerate possible values that an expression can assume and perform a different <code class="fm-code-in-text">case</code> branch for each one of them (plus a <code class="fm-code-in-text">default</code> branch if the value doesn’t match any of the other cases):</p>
  <pre class="programlisting"><b class="calibre21">switch</b> x<sup class="superscript2">2</sup> + y<sup class="superscript2">2</sup>
  <b class="calibre21">case</b> 0
    label ← “origin”
  <b class="calibre21">case</b> 1
    label ← “unit circle”
  <b class="calibre21">default</b>
    label ← “circle”</pre>

  <p class="body"><a id="pgfId-999509"></a>The code snippet evaluates the expression <code class="fm-code-in-text">x<sup class="superscript1">2</sup> + y<sup class="superscript1">2</sup></code>: each <code class="fm-code-in-text">case</code> statement corresponds to a different branch executed when the expression evaluates to whatever follows the keyword, so if <code class="fm-code-in-text">x<sup class="superscript1">2</sup> + y<sup class="superscript1">2</sup></code> evaluates to <code class="fm-code-in-text">0</code>, then the code after the first <code class="fm-code-in-text">case</code> is executed, and the variable <code class="fm-code-in-text">label</code> is set to “<code class="fm-code-in-text">origin</code>”; similarly, if the value is 1, <code class="fm-code-in-text">label</code> is set to “<code class="fm-code-in-text">unit circle</code>”. For any other value, the branch after the keyword <code class="fm-code-in-text">default</code> is executed and the <code class="fm-code-in-text">label</code> is set to “<code class="fm-code-in-text">circle</code>”.</p>

  <p class="body"><a id="pgfId-999548"></a>We will use an extended version of this instruction, also allowing ranges to be specified in <code class="fm-code-in-text">case</code> statements:</p>
  <pre class="programlisting"><b class="calibre21">switch</b> x<sup class="superscript2">2</sup> + y<sup class="superscript2">2</sup>
  <b class="calibre21">case</b> 0
    label ← “origin”
  <b class="calibre21">case</b> [0,1]
    label ← “inside unit circle”
  <b class="calibre21">case</b> {1..10}
    label ← “multiple of unit circle”
  <b class="calibre21">default</b>
    label ← “outside unit circle”</pre>

  <p class="body"><a id="pgfId-999653"></a>In this code snippet, we use four different rule types for matching:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-999663"></a>The first one matches exactly one value (<code class="fm-code-in-text">0</code>).</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-999679"></a>The second one matches all numbers between <code class="fm-code-in-text">0</code> and <code class="fm-code-in-text">1</code> included.</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-999697"></a>The third rule matches all integers between <code class="fm-code-in-text">1</code> and <code class="fm-code-in-text">10</code> included.</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-999715"></a>The last one matches all values (by default).</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-999729"></a>Notice that rules are evaluated from top to bottom, and the first clause matching will be selected, so, for instance, while the value <code class="fm-code-in-text">0</code> for <code class="fm-code-in-text">x<sup class="superscript1">2</sup> + y<sup class="superscript1">2</sup></code> would match both the first and second (and fourth!) clause, only the top-most one will match.</p>

  <p class="body"><a id="pgfId-999748"></a>Finally, we have shown examples evaluating numeric expressions, but we will allow all kind of values (for instance, strings) to be <a id="marker-1001488"></a><a id="marker-1001492"></a>switched <a id="marker-1001496"></a><a id="marker-1001500"></a>on.</p>

  <h2 class="fm-head" id="heading_id_8"><a id="pgfId-999763"></a>A.4 Loops</h2>

  <p class="body"><a id="pgfId-999775"></a>The <a id="marker-1001504"></a><a id="marker-1001508"></a>other fundamental constructs that are needed to control the workflow are loops.</p>

  <p class="body"><a id="pgfId-999787"></a>Traditionally, programming languages provide at least two kinds of loops:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-999796"></a><code class="fm-code-in-text">for</code> loops, where we iterate explicitly over some indices or the elements in a container</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-999809"></a><code class="fm-code-in-text">while</code> loops, which are somewhat more generic, where a predicate is given and the statements in the loop are executed until the predicate evaluates to <code class="fm-code-in-text">true</code></p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-999822"></a>There are several variations on both (for instance <code class="fm-code-in-text">do-while</code>, <code class="fm-code-in-text">for-each,</code> and <code class="fm-code-in-text">repeat-until</code>), but all loops can always be implemented in terms of the basic <code class="fm-code-in-text">while</code> loop.</p>

  <p class="body"><a id="pgfId-999840"></a>We will use the <code class="fm-code-in-text">for-each</code> loop, and the basic <code class="fm-code-in-text">while</code> statement.</p>

  <p class="body"><a id="pgfId-999851"></a>For both, we can further control the execution using keywords <code class="fm-code-in-text">continue</code> (that will force execution to skip to the next iteration in the loop) and <code class="fm-code-in-text">break</code> (that will force execution to immediately exit the loop without checking its predicate).</p>

  <p class="body"><a id="pgfId-999864"></a>Providing a few examples should help to clarify this.</p>

  <h3 class="fm-head2" id="heading_id_9"><a id="pgfId-999873"></a>A.4.1 For loop</h3>

  <p class="body"><a id="pgfId-999887"></a>To <a id="marker-1001512"></a><a id="marker-1001516"></a><a id="marker-1001520"></a>exemplify the use of for loops, let’s see how to sum all elements in an array <code class="fm-code-in-text">A.</code> There are at least three ways to do so.</p>

  <p class="body"><a id="pgfId-999907"></a>The first one iterates over the length of the array:</p>
  <pre class="programlisting">n ← length(A)
total ← 0
<b class="calibre21">for</b> i <b class="calibre21">in</b> {0..n-1} <b class="calibre21">do</b>
  total ← total + A[i]</pre>

  <p class="body"><a id="pgfId-999957"></a>After the <code class="fm-code-in-text">for</code> keyword, we will specify the name of the variable (<code class="fm-code-in-text">i</code>) that will hold the values on which we iterate; then we need the <code class="fm-code-in-text">in</code> keyword,<a id="marker-1001524"></a> and after that the (ordered) list of values that <code class="fm-code-in-text">i</code> will assume (in this case, all integers from <code class="fm-code-in-text">0</code> to <code class="fm-code-in-text">n-1</code> included).</p>

  <p class="body"><a id="pgfId-999983"></a>Since we only need the index <code class="fm-code-in-text">i</code> to access the current element in the array, we can obtain the same result in a more succinct way by iterating over <code class="fm-code-in-text">A</code>’s elements directly:</p>
  <pre class="programlisting">total ← 0
<b class="calibre21">for</b> a <b class="calibre21">in</b> A do
  total ← total + a</pre>

  <p class="body"><a id="pgfId-1000028"></a>Finally, as we have shown in a previous section, whenever possible we will also use a mathematical notation instead of a <code class="fm-code-in-text">for</code> loop to be even more succinct, without hurting clarity:</p>
  <pre class="programlisting">total ← sum{A}</pre>

  <p class="body"><a id="pgfId-1000048"></a>The last two options are, obviously, not always viable. For instance, if we need to write complex expressions using more than one element of an array at a time, then we might need to explicitly iterate over <a id="marker-1001528"></a><a id="marker-1001532"></a><a id="marker-1001536"></a>indices:</p>
  <pre class="programlisting">n ← length(A)
total ← A[0]
<b class="calibre21">for</b> i <b class="calibre21">in</b> {1..n-1} do
  total ← total + A[i] + A[i-1]<sup class="superscript2">2</sup></pre>

  <h3 class="fm-head2" id="heading_id_10"><a id="pgfId-1000103"></a>A.4.2 While loop</h3>

  <p class="body"><a id="pgfId-1000117"></a>As <a id="marker-1001540"></a><a id="marker-1001544"></a><a id="marker-1001548"></a>mentioned, <code class="fm-code-in-text">while</code> loops are intended to be more generic. As such, they can be used to implement the same logic of <code class="fm-code-in-text">for</code> loops, included in the examples in the previous section. This is an equivalent <code class="fm-code-in-text">for</code> loop to compute the sum of the elements in an array:</p>
  <pre class="programlisting">n ← length(A)
i ← 0
total ← 0
<b class="calibre21">while</b> i &lt; n <b class="calibre21">do</b>
  total ← total + A[i]
  i ← i + 1</pre>

  <p class="body"><a id="pgfId-1000198"></a>Clearly the <code class="fm-code-in-text">for-each</code> syntax is a way to express the same logic with less code (and also, as importantly, it encapsulates the logic of iterating through indices, making it less error-prone than the <code class="fm-code-in-text">while</code> loop, where we have to initialize and increment <code class="fm-code-in-text">i</code> explicitly).</p>

  <p class="body"><a id="pgfId-1000213"></a>With <code class="fm-code-in-text">while</code> loops, however, we can also write conditions that would be hard or impossible to express using <code class="fm-code-in-text">for</code> statements:</p>
  <pre class="programlisting"><b class="calibre21">while not</b> eof(file) do
  x ← read(file)
  total ← total + x</pre>

  <p class="body"><a id="pgfId-1000259"></a>The code snippet abstracts the process of reading integers from a file and summing them, until we reach the end of the file (<code class="fm-code-in-text">eof</code>).</p>

  <p class="body"><a id="pgfId-1000275"></a>For a more concrete example, consider the algorithm to compute the <a id="id_Hlk56605633"></a><i class="calibre17">greatest common divisor (GCD<a id="marker-1001552"></a>)</i> of two integers, <code class="fm-code-in-text">a</code> and <code class="fm-code-in-text">b</code>:</p>
  <pre class="programlisting"><b class="calibre21">while</b> a &lt;&gt; b do
  <b class="calibre21">if</b> a &gt; b <b class="calibre21">then</b>
    a ← a – b
  <b class="calibre21">else</b> 
    b ← b - a</pre>

  <p class="body"><a id="pgfId-1000345"></a>At the end of the loop, variable a will hold the GCD of <code class="fm-code-in-text">a</code> and <code class="fm-code-in-text">b</code>.</p>

  <p class="body"><a id="pgfId-1000360"></a>As you can see, both examples need to evaluate a predicate that is clearly harder to express with a <code class="fm-code-in-text">for-each</code> <a id="marker-1001556"></a><a id="marker-1001560"></a><a id="marker-1001564"></a>loop.</p>

  <h3 class="fm-head2" id="heading_id_11"><a id="pgfId-1000373"></a>A.4.3 Break and continue</h3>

  <p class="body"><a id="pgfId-1000387"></a>Sometimes <a id="marker-1001568"></a><a id="marker-1001572"></a><a id="marker-1001576"></a><a id="marker-1001580"></a>you need to check multiple conditions or react to conditions that can only be evaluated inside the body of the loops. To cope with that, we can use <code class="fm-code-in-text">break</code> and <code class="fm-code-in-text">continue</code>. For instance, to refine the example summing numbers in a file, we might decide that we skip odd numbers and use <code class="fm-code-in-text">0</code> as a marker, which means that we stop summing numbers as soon as we read a 0:</p>
  <pre class="programlisting"><b class="calibre21">while</b> <b class="calibre21">not</b> eof(file) <b class="calibre21">do</b>
  x ← read(file)
  <b class="calibre21">if</b> x % 2 == 1 <b class="calibre21">then</b>
    <b class="calibre21">continue</b>
  <b class="calibre21">elsif</b> x == 0 <b class="calibre21">then</b>
    <b class="calibre21">break</b>
  total ← total + x</pre>

  <p class="body"><a id="pgfId-1000486"></a>Whenever the next number read from the file is odd, then we skip to the next iteration of the loop (meaning we will again check the predicate, and find out if we are at the end of the file).</p>

  <p class="body"><a id="pgfId-1000495"></a>If, instead, the number is <code class="fm-code-in-text">0</code>, we will exit the loop before incrementing our total.</p>

  <p class="body"><a id="pgfId-1000506"></a>Both keywords can also be used inside <a id="marker-1001584"></a><a id="marker-1001588"></a><a id="marker-1001592"></a><a id="marker-1001596"></a><code class="fm-code-in-text">for</code> <a id="marker-1001600"></a><a id="marker-1001604"></a>loops.</p>

  <h2 class="fm-head" id="heading_id_12"><a id="pgfId-1000524"></a>A.5 Blocks and indent</h2>

  <p class="body"><a id="pgfId-1000538"></a>So <a id="marker-1001608"></a><a id="marker-1001612"></a>far, in most of our examples, loops and each branch of our conditionals consisted of exactly one instruction, and this made syntax particularly simple. However, that’s not the case in general, and each branch of the <code class="fm-code-in-text">if-then-else</code> statement<a id="marker-1001616"></a> can execute an arbitrary number of instructions. To avoid ambiguity, we need to be able to group instructions into <i class="calibre17">blocks</i><a id="marker-1001620"></a>.</p>

  <p class="body"><a id="pgfId-1000557"></a>In its simplest definition, a block of instructions is a sequence of instructions that is executed sequentially from top to bottom.</p>

  <p class="body"><a id="pgfId-1000566"></a>As always, different programming languages have different ways to specify blocks: some of them use curly braces to mark the beginning and ending of a block (for instance, C, Java, and so on), some use explicitly the begin and end keywords (for instance, Pascal), and others use indentation (Python).</p>

  <p class="body"><a id="pgfId-1000583"></a>Moreover, blocks can carry extra meaning in some programming languages, specifically if <i class="calibre17">block-scope</i> is used; then local variables defined inside a block can only be accessed inside that same block of code (including any nested block).</p>

  <p class="body"><a id="pgfId-1000592"></a>To simplify things, as mentioned, we won’t bother with declaring variables, and we will instead assume <i class="calibre17">function-scope</i>, so variables can be accessed everywhere inside a function (see the following code snippet). We will also assume <i class="calibre17">lexical scope</i> (aka static scope), so the life of variables ends when a function execution is completed, and there will be no support for <i class="calibre17">closures</i>.</p>

  <p class="body"><a id="pgfId-1000605"></a>Finally, blocks will be defined by indentation only. You can see the previous examples are already indented, but the following example should clarify this even further:</p>
  <pre class="programlisting"><b class="calibre21">for</b> i <b class="calibre21">in</b> {0..n-1} do
  k ← i * 2
  j ← i * 2 + 1
  <b class="calibre21">if</b> i % 2 == 0 <b class="calibre21">then</b> 
    A[k] ← 1
    A[j] ← 0
  <b class="calibre21">else</b>
    A[k] ← 0
    A[j] ← 1
A[2*n-1] ← 0</pre>

  <p class="body"><a id="pgfId-1000726"></a>The <code class="fm-code-in-text">for</code> loop executes <code class="fm-code-in-text">n</code> times the eight lines below it (all but the very last line in the snippet) and each branch of the <code class="fm-code-in-text">if</code> statement has two instructions (that can be recognized because they are further indented).</p>

  <p class="body"><a id="pgfId-1000743"></a>The line containing <code class="fm-code-in-text">A[2*n-1]</code> ← <code class="fm-code-in-text">0</code> does not have any indentation (it’s at the same level of indentation of the first line) and that shows it is the next instruction to be executed after the <code class="fm-code-in-text">for</code> loop <a id="marker-1001624"></a><a id="marker-1001628"></a><a id="marker-1001632"></a>ends</p>

  <h2 class="fm-head" id="heading_id_13"><a id="pgfId-1000761"></a>A.6 Functions</h2>

  <p class="body"><a id="pgfId-1000773"></a>To <a id="marker-1001636"></a><a id="marker-1001640"></a>group and reuse code, we will use functions. A function defines a block of code where local variables are in scope. It also has a signature declaring its name and the arguments it expects: the variables that are the input to the function. Finally, a function also returns a value that is effectively the function’s output.</p>

  <p class="body"><a id="pgfId-1000794"></a>Breaking code into functions allows writing reusable code that can be more easily understood and unit-tested, because (ideally) every function can (and should) only implement a single responsibility (or a single action/algorithm, if you prefer).</p>

  <p class="body"><a id="pgfId-1000803"></a>Take, for instance, the code in section A.4.2 that computes the GCD of two numbers. We can easily refactor it into a function:</p>
  <pre class="programlisting"><b class="calibre21">function</b> gcd(a, b)
  <b class="calibre21">while</b>  a &lt;&gt; b do
    <b class="calibre21">if</b> a &gt; b <b class="calibre21">then</b>
      a ← a – b
    <b class="calibre21">else</b> 
      b ← b – a
  <b class="calibre21">return</b> a</pre>

  <p class="body"><a id="pgfId-1000892"></a>Notice, among other things, how it is now immediately clear where the final result is stored—the best part is, the caller doesn’t even have to worry about it, because the function takes care of returning the right value. Moreover, variables <code class="fm-code-in-text">a</code> and <code class="fm-code-in-text">b</code> only exist inside function <code class="fm-code-in-text">gcd</code><a id="marker-1001644"></a>, and therefore anything happening inside the body of this function won’t influence the rest of the code.</p>

  <h3 class="fm-head2" id="heading_id_14"><a id="pgfId-1000910"></a>A.6.1 Overloading and default arguments</h3>

  <p class="body"><a id="pgfId-1000922"></a>A function’s <a id="marker-1001648"></a><a id="marker-1001652"></a><a id="marker-1001656"></a><a id="marker-1001660"></a>arguments can have default values:</p>
  <pre class="programlisting"><b class="calibre21">function</b> f(a, b=2)
  <b class="calibre21">return</b> a * b<sup class="superscript2">2</sup></pre>

  <p class="body"><a id="pgfId-1000960"></a>For instance, a binary function <code class="fm-code-in-text">f</code><a id="marker-1001664"></a> that has a default value for the second argument could be called with either two arguments, something like <code class="fm-code-in-text">f(5,3)</code>, or just one. In that case, for example, <code class="fm-code-in-text">f(5)</code> is the same as calling <code class="fm-code-in-text">f(5,2)</code>.</p>

  <p class="body"><a id="pgfId-1000988"></a>Default arguments allow a compact syntax for overloading functions and methods.</p>

  <p class="body"><a id="pgfId-1000997"></a>Because we are using a loosely-typed approach, this is the only kind of overloading we need or can even perform (while in strongly-typed languages like C++ or Java, we would need to overload functions for which an argument can be an integer or a string <a id="marker-1001668"></a><a id="marker-1001672"></a><a id="marker-1001676"></a><a id="marker-1001680"></a>or . . . ).</p>

  <h3 class="fm-head2" id="heading_id_15"><a id="pgfId-1001014"></a>A.6.2 Tuples</h3>

  <p class="body"><a id="pgfId-1001026"></a>Sometimes <a id="marker-1001684"></a><a id="marker-1001688"></a><a id="marker-1001692"></a>we need functions to return more than one value. To make things easy for us, we assume that functions can return tuples.</p>

  <p class="body"><a id="pgfId-1001039"></a>A tuple is similar to an array, although slightly different:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-1001048"></a>It’s a list of values with a fixed length (while arrays can grow or shrink).</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-1001062"></a>Its elements can have any type, and tuples can hold different types at the same time.</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-1001075"></a>Tuples are denoted using parentheses: <code class="fm-code-in-text">(1,2)</code> is a tuple of length two (aka a pair) whose elements are numbers with values <code class="fm-code-in-text">1</code> and <code class="fm-code-in-text">2</code>.</p>

  <p class="body"><a id="pgfId-1001092"></a>We can assign tuples of values to tuples of variables:</p>
  <pre class="programlisting">(x, y, z) ← (0, -1, 0.5)</pre>

  <p class="body"><a id="pgfId-1001110"></a>is equivalent to</p>
  <pre class="programlisting">x ← 0
y ← -1
z ← 0.5</pre>

  <p class="body"><a id="pgfId-1001146"></a>Likewise, we can write <code class="fm-code-in-text">(name, age)</code> ← <code class="fm-code-in-text">(“Marc”, 20)</code>.</p>

  <p class="body"><a id="pgfId-1001161"></a>This syntax can be extremely useful to implement functions returning multiple values. Suppose we have written a function <code class="fm-code-in-text">min_max</code><a id="marker-1006067"></a> returning both the max and min values in an array; then we can assume it returns a pair of values and call it like this:</p>
  <pre class="programlisting">(a_min, a_max) ← min_max(A)</pre>

  <h3 class="fm-head2" id="heading_id_16"><a id="pgfId-1001186"></a>A.6.3 Tuples and destructuring objects</h3>

  <p class="body"><a id="pgfId-1001200"></a>It is a good practice to avoid unnamed tuples, because the meaning of a field is not immediately apparent and is only determined by the position inside the tuple; therefore, objects are to be preferred (for instance, an object with a <code class="fm-code-in-text">min</code><a id="marker-1001700"></a> and <code class="fm-code-in-text">max</code><a id="marker-1001704"></a> field would be clearer in the example in the previous sub-section).</p>

  <p class="body"><a id="pgfId-1001217"></a>Tuples, however, provide a viable and synthetic alternative whenever the meaning of the fields is clear enough. To exploit this even further, we use a particular notation to assign all or part of the fields of an object to a tuple. Assume we have an object <code class="fm-code-in-text">Employee</code> with fields <code class="fm-code-in-text">name</code>, <code class="fm-code-in-text">surname</code>, <code class="fm-code-in-text">age</code>, <code class="fm-code-in-text">address</code>, and so on.</p>

  <p class="body"><a id="pgfId-1001238"></a>If <code class="fm-code-in-text">empl</code> is an instance of employee, we use the following syntax to extract any subset of fields from <code class="fm-code-in-text">empl</code> into <i class="calibre17">aliases</i>:<a id="marker-1001708"></a><a href="#pgfId-1001780"><sup class="footnotenumber">3</sup></a></p>
  <pre class="programlisting">(name, surname, age) ← empl</pre>

  <p class="body"><a id="pgfId-1001264"></a>Of course, in this example, we extract only three fields.</p>

  <p class="body"><a id="pgfId-1001273"></a>This syntax is particularly convenient in combination with <code class="fm-code-in-text">for-each</code> loops, because we can iterate through a collection of employees and directly access aliases to the fields we need, without having to redundantly write something like <code class="fm-code-in-text">empl.name</code> each time we access a field of the <code class="fm-code-in-text">empl</code> object. Here is a comparative example to make <a id="marker-1001712"></a><a id="marker-1001716"></a><a id="marker-1001720"></a>the <a id="marker-1001724"></a><a id="marker-1001728"></a>difference <a id="marker-1001732"></a>clear:</p>
  <pre class="programlisting"><b class="calibre21">for</b> empl <b class="calibre21">in </b>employees <b class="calibre21">do</b>
  user ← empl.surname + empl.age
<b class="calibre21">for</b> (surname, age) <b class="calibre21">in</b> employees <b class="calibre21">do</b>
  user ← surname + age</pre>
  <hr class="calibre22"/>

  <p class="fm-footnote"><sup class="footnotenumber">1.</sup> <a id="pgfId-1001739"></a>In the general case, we can compare two expressions composing both variables and values.</p>

  <p class="fm-footnote"><sup class="footnotenumber">2.</sup> <a id="pgfId-1001753"></a>Another less mathematically precise alternative could have been assigning <code class="calibre39"><b class="calibre21">inf</b></code> (which stands for infinity) to y, but since the sign of the limit depends on the direction we approach 0, neither +inf nor -inf would be correct.</p>

  <p class="fm-footnote"><sup class="footnotenumber">3.</sup> <a id="pgfId-1001780"></a>An alias is just another name for a variable: it can be implemented by creating a new variable or just a reference to the original one.</p>
</body>
</html>
