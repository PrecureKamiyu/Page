<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.7 Procedures</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000281F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000040A66" data-uri="chapter03.xhtml#P7000497027000000000000000040A66" epub:type="title"><span class="pcalibre label pcalibre1">3.7 </span>Procedures</h1></header>
<p id="P7000497027000000000000000040A67" data-uri="chapter03.xhtml#P7000497027000000000000000040A67" class="pcalibre1 pcalibre calibre2">Procedures are a key abstraction in software. They provide a way to package code that implements some functionality with a designated set of arguments and an optional return value. This function can then be invoked from different points in a program. Well-designed software uses procedures as an abstraction mechanism, hiding the detailed implementation of some action while providing a clear and concise interface definition of what values will be computed and what effects the procedure will have on the program state. Procedures come in many guises <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002822" title="239" data-uri="chapter03.xhtml#P7000497027000000000000000002822" epub:type="pagebreak"></span>in different programming languages—functions, methods, subroutines, handlers, and so on—but they all share a general set of features.</p>
<p id="P7000497027000000000000000040A68" data-uri="chapter03.xhtml#P7000497027000000000000000040A68" class="pcalibre1 pcalibre calibre2">There are many different attributes that must be handled when providing machine-level support for procedures. For discussion purposes, suppose procedure <code id="P7000497027000000000000000040A69" data-uri="chapter03.xhtml#P7000497027000000000000000040A69" class="pcalibre1 calibre8 pcalibre">P</code> calls procedure <code id="P7000497027000000000000000040A6A" data-uri="chapter03.xhtml#P7000497027000000000000000040A6A" class="pcalibre1 calibre8 pcalibre">Q</code>, and <code id="P7000497027000000000000000040A6B" data-uri="chapter03.xhtml#P7000497027000000000000000040A6B" class="pcalibre1 calibre8 pcalibre">Q</code> then executes and returns back to <code id="P7000497027000000000000000040A6C" data-uri="chapter03.xhtml#P7000497027000000000000000040A6C" class="pcalibre1 calibre8 pcalibre">P</code>. These actions involve one or more of the following mechanisms:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000040A6D" data-uri="chapter03.xhtml#P7000497027000000000000000040A6D">
<li id="P7000497027000000000000000040A6E" data-uri="chapter03.xhtml#P7000497027000000000000000040A6E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A6F" data-uri="chapter03.xhtml#P7000497027000000000000000040A6F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Passing control. </span>The program counter must be set to the starting address of the code for <code id="P7000497027000000000000000040A70" data-uri="chapter03.xhtml#P7000497027000000000000000040A70" class="pcalibre1 calibre8 pcalibre">Q</code> upon entry and then set to the instruction in <code id="P7000497027000000000000000040A71" data-uri="chapter03.xhtml#P7000497027000000000000000040A71" class="pcalibre1 calibre8 pcalibre">P</code> following the call to <code id="P7000497027000000000000000040A72" data-uri="chapter03.xhtml#P7000497027000000000000000040A72" class="pcalibre1 calibre8 pcalibre">Q</code> upon return.</p></li>
<li id="P7000497027000000000000000040A73" data-uri="chapter03.xhtml#P7000497027000000000000000040A73" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A74" data-uri="chapter03.xhtml#P7000497027000000000000000040A74" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Passing data. </span><code id="P7000497027000000000000000040A75" data-uri="chapter03.xhtml#P7000497027000000000000000040A75" class="pcalibre1 calibre8 pcalibre">P</code> must be able to provide one or more parameters to <code id="P7000497027000000000000000040A76" data-uri="chapter03.xhtml#P7000497027000000000000000040A76" class="pcalibre1 calibre8 pcalibre">Q</code>, and <code id="P7000497027000000000000000040A77" data-uri="chapter03.xhtml#P7000497027000000000000000040A77" class="pcalibre1 calibre8 pcalibre">Q</code> must be able to return a value back to <code id="P7000497027000000000000000040A78" data-uri="chapter03.xhtml#P7000497027000000000000000040A78" class="pcalibre1 calibre8 pcalibre">P</code>.</p></li>
<li id="P7000497027000000000000000040A79" data-uri="chapter03.xhtml#P7000497027000000000000000040A79" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A7A" data-uri="chapter03.xhtml#P7000497027000000000000000040A7A" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Allocating and deallocating memory. </span><code id="P7000497027000000000000000040A7B" data-uri="chapter03.xhtml#P7000497027000000000000000040A7B" class="pcalibre1 calibre8 pcalibre">Q</code> may need to allocate space for local variables when it begins and then free that storage before it returns.</p></li>
</ul>
<p id="P7000497027000000000000000040A7C" data-uri="chapter03.xhtml#P7000497027000000000000000040A7C" class="pcalibre1 pcalibre calibre2">The x86-64 implementation of procedures involves a combination of special instructions and a set of conventions on how to use the machine resources, such as the registers and the program memory. Great effort has been made to minimize the overhead involved in invoking a procedure. As a consequence, it follows what can be seen as a minimalist strategy, implementing only as much of the above set of mechanisms as is required for each particular procedure. In our presentation, we build up the different mechanisms step by step, first describing control, then data passing, and, finally, memory management.</p>
<section id="P7000497027000000000000000002838" data-uri="chapter03.xhtml#P7000497027000000000000000002838" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040A7D" data-uri="chapter03.xhtml#P7000497027000000000000000040A7D" epub:type="title"><span class="pcalibre label pcalibre1">3.7.1 </span>The Run-Time Stack</h1></header>
<p id="P7000497027000000000000000040A7E" data-uri="chapter03.xhtml#P7000497027000000000000000040A7E" class="pcalibre1 pcalibre calibre2">A key feature of the procedure-calling mechanism of C, and of most other languages, is that it can make use of the last-in, first-out memory management discipline provided by a stack data structure. Using our example of procedure <code id="P7000497027000000000000000040A7F" data-uri="chapter03.xhtml#P7000497027000000000000000040A7F" class="pcalibre1 calibre8 pcalibre">P</code> calling procedure <code id="P7000497027000000000000000040A80" data-uri="chapter03.xhtml#P7000497027000000000000000040A80" class="pcalibre1 calibre8 pcalibre">Q</code>, we can see that while <code id="P7000497027000000000000000040A81" data-uri="chapter03.xhtml#P7000497027000000000000000040A81" class="pcalibre1 calibre8 pcalibre">Q</code> is executing, <code id="P7000497027000000000000000040A82" data-uri="chapter03.xhtml#P7000497027000000000000000040A82" class="pcalibre1 calibre8 pcalibre">P</code>, along with any of the procedures in the chain of calls up to P, is temporarily suspended. While <code id="P7000497027000000000000000040A83" data-uri="chapter03.xhtml#P7000497027000000000000000040A83" class="pcalibre1 calibre8 pcalibre">Q</code> is running, only it will need the ability to allocate new storage for its local variables or to set up a call to another procedure. On the other hand, when <code id="P7000497027000000000000000040A84" data-uri="chapter03.xhtml#P7000497027000000000000000040A84" class="pcalibre1 calibre8 pcalibre">Q</code> returns, any local storage it has allocated can be freed. Therefore, a program can manage the storage required by its procedures using a stack, where the stack and the program registers store the information required for passing control and data, and for allocating memory. As <code id="P7000497027000000000000000040A85" data-uri="chapter03.xhtml#P7000497027000000000000000040A85" class="pcalibre1 calibre8 pcalibre">P</code> calls <code id="P7000497027000000000000000040A86" data-uri="chapter03.xhtml#P7000497027000000000000000040A86" class="pcalibre1 calibre8 pcalibre">Q</code>, control and data information are added to the end of the stack. This information gets deallocated when <code id="P7000497027000000000000000040A87" data-uri="chapter03.xhtml#P7000497027000000000000000040A87" class="pcalibre1 calibre8 pcalibre">P</code> returns.</p>
<p id="P7000497027000000000000000040A88" data-uri="chapter03.xhtml#P7000497027000000000000000040A88" class="pcalibre1 pcalibre calibre2">As described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000002143"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.4.4</span></a>, the x86-64 stack grows toward lower addresses and the stack pointer <code id="P7000497027000000000000000040A89" data-uri="chapter03.xhtml#P7000497027000000000000000040A89" class="pcalibre1 calibre8 pcalibre">%rsp</code> points to the top element of the stack. Data can be stored on and retrieved from the stack using the <code id="P7000497027000000000000000040A8A" data-uri="chapter03.xhtml#P7000497027000000000000000040A8A" class="pcalibre1 calibre8 pcalibre">pushq</code> and <code id="P7000497027000000000000000040A8B" data-uri="chapter03.xhtml#P7000497027000000000000000040A8B" class="pcalibre1 calibre8 pcalibre">popq</code> instructions. Space for data with no specified initial value can be allocated on the stack by simply decrementing the stack pointer by an appropriate amount. Similarly, space can be deallocated by incrementing the stack pointer.</p>
<p id="P7000497027000000000000000040A8C" data-uri="chapter03.xhtml#P7000497027000000000000000040A8C" class="pcalibre1 pcalibre calibre2">When an x86-64 procedure requires storage beyond what it can hold in registers, it allocates space on the stack. This region is referred to as the procedure's</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002849" data-uri="chapter03.xhtml#P7000497027000000000000000002849">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000284A" title="240" data-uri="chapter03.xhtml#P700049702700000000000000000284A" epub:type="pagebreak"></span>
<img alt="A diagram illustrates a general stack frame structure." id="P7000497027000000000000000040A8D" data-uri="P700049702700000000000000000B6B6" src="../images/p240-1.png" class="pcalibre calibre88 pcalibre1"/>
<figcaption id="P7000497027000000000000000040A8E" data-uri="chapter03.xhtml#P7000497027000000000000000040A8E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040A8F" data-uri="chapter03.xhtml#P7000497027000000000000000040A8F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.25 </span>General stack frame structure.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040A90" data-uri="chapter03.xhtml#P7000497027000000000000000040A90"><p id="P7000497027000000000000000040A91" data-uri="chapter03.xhtml#P7000497027000000000000000040A91" class="pcalibre calibre3 pcalibre1">The stack can be used for passing arguments, for storing return information, for saving registers, and for local storage. Portions may be omitted when not needed.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000020D73" data-uri="chapter03.xhtml#P7000497027000000000000000020D73">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000040A92" data-uri="chapter03.xhtml#P7000497027000000000000000040A92" class="pcalibre1 pcalibre calibre2">A diagram shows a stack with increasing address from stack “top” on bottom to stack “bottom” on top. The stack is divided into sections, as summarized from stack “top” to stack “bottom” below.</p>
<ul class="ul_none1 pcalibre pcalibre1" id="P7000497027000000000000000040A93" data-uri="chapter03.xhtml#P7000497027000000000000000040A93">
<li id="P7000497027000000000000000040A94" data-uri="chapter03.xhtml#P7000497027000000000000000040A94" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A95" data-uri="chapter03.xhtml#P7000497027000000000000000040A95" class="calibre13 pcalibre pcalibre1">Stack pointer %rsp at stack “top”</p></li>
<li id="P7000497027000000000000000040A96" data-uri="chapter03.xhtml#P7000497027000000000000000040A96" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A97" data-uri="chapter03.xhtml#P7000497027000000000000000040A97" class="calibre13 pcalibre pcalibre1">Three sections within frame for executing function Q:</p>
<ul class="ul_none1 pcalibre pcalibre1" id="P7000497027000000000000000040A98" data-uri="chapter03.xhtml#P7000497027000000000000000040A98">
<li id="P7000497027000000000000000040A99" data-uri="chapter03.xhtml#P7000497027000000000000000040A99" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A9A" data-uri="chapter03.xhtml#P7000497027000000000000000040A9A" class="calibre13 pcalibre pcalibre1">Argument build area</p></li>
<li id="P7000497027000000000000000040A9B" data-uri="chapter03.xhtml#P7000497027000000000000000040A9B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A9C" data-uri="chapter03.xhtml#P7000497027000000000000000040A9C" class="calibre13 pcalibre pcalibre1">Local variables</p></li>
<li id="P7000497027000000000000000040A9D" data-uri="chapter03.xhtml#P7000497027000000000000000040A9D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040A9E" data-uri="chapter03.xhtml#P7000497027000000000000000040A9E" class="calibre13 pcalibre pcalibre1">Saved registers</p></li>
</ul></li>
<li id="P7000497027000000000000000040A9F" data-uri="chapter03.xhtml#P7000497027000000000000000040A9F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AA0" data-uri="chapter03.xhtml#P7000497027000000000000000040AA0" class="calibre13 pcalibre pcalibre1">Five sections within frame for calling function P:</p>
<ul class="ul_none1 pcalibre pcalibre1" id="P7000497027000000000000000040AA1" data-uri="chapter03.xhtml#P7000497027000000000000000040AA1">
<li id="P7000497027000000000000000040AA2" data-uri="chapter03.xhtml#P7000497027000000000000000040AA2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AA3" data-uri="chapter03.xhtml#P7000497027000000000000000040AA3" class="calibre13 pcalibre pcalibre1">Return address</p></li>
<li id="P7000497027000000000000000040AA4" data-uri="chapter03.xhtml#P7000497027000000000000000040AA4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AA5" data-uri="chapter03.xhtml#P7000497027000000000000000040AA5" class="calibre13 pcalibre pcalibre1">Argument 7</p></li>
<li id="P7000497027000000000000000040AA6" data-uri="chapter03.xhtml#P7000497027000000000000000040AA6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AA7" data-uri="chapter03.xhtml#P7000497027000000000000000040AA7" class="calibre13 pcalibre pcalibre1">...</p></li>
<li id="P7000497027000000000000000040AA8" data-uri="chapter03.xhtml#P7000497027000000000000000040AA8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AA9" data-uri="chapter03.xhtml#P7000497027000000000000000040AA9" class="calibre13 pcalibre pcalibre1">Argument n</p></li>
<li id="P7000497027000000000000000040AAA" data-uri="chapter03.xhtml#P7000497027000000000000000040AAA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AAB" data-uri="chapter03.xhtml#P7000497027000000000000000040AAB" class="calibre13 pcalibre pcalibre1">...</p></li>
</ul></li>
<li id="P7000497027000000000000000040AAC" data-uri="chapter03.xhtml#P7000497027000000000000000040AAC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AAD" data-uri="chapter03.xhtml#P7000497027000000000000000040AAD" class="calibre13 pcalibre pcalibre1">Earlier frames to stack “bottom”</p></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040AAE" data-uri="chapter03.xhtml#P7000497027000000000000000040AAE"><i class="calibre5 pcalibre pcalibre1">stack frame</i>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a> shows the overall structure of the run-time stack, including its partitioning into stack frames, in its most general form. The frame for the currently executing procedure is always at the top of the stack. When procedure <code id="P7000497027000000000000000040AAF" data-uri="chapter03.xhtml#P7000497027000000000000000040AAF" class="pcalibre1 calibre8 pcalibre">P</code> calls procedure <code id="P7000497027000000000000000040AB0" data-uri="chapter03.xhtml#P7000497027000000000000000040AB0" class="pcalibre1 calibre8 pcalibre">Q</code>, it will push the <i class="calibre5 pcalibre pcalibre1">return address</i> onto the stack, indicating where within <code id="P7000497027000000000000000040AB1" data-uri="chapter03.xhtml#P7000497027000000000000000040AB1" class="pcalibre1 calibre8 pcalibre">P</code> the program should resume execution once <code id="P7000497027000000000000000040AB2" data-uri="chapter03.xhtml#P7000497027000000000000000040AB2" class="pcalibre1 calibre8 pcalibre">Q</code> returns. We consider the return address to be part of <code id="P7000497027000000000000000040AB3" data-uri="chapter03.xhtml#P7000497027000000000000000040AB3" class="pcalibre1 calibre8 pcalibre">P</code>'s stack frame, since it holds state relevant to <code id="P7000497027000000000000000040AB4" data-uri="chapter03.xhtml#P7000497027000000000000000040AB4" class="pcalibre1 calibre8 pcalibre">P</code>. The code for <code id="P7000497027000000000000000040AB5" data-uri="chapter03.xhtml#P7000497027000000000000000040AB5" class="pcalibre1 calibre8 pcalibre">Q</code> allocates the space required for its stack frame by extending the current stack boundary. Within that space, it can save the values of registers, allocate <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002858" title="241" data-uri="chapter03.xhtml#P7000497027000000000000000002858" epub:type="pagebreak"></span>space for local variables, and set up arguments for the procedures it calls. The stack frames for most procedures are of fixed size, allocated at the beginning of the procedure. Some procedures, however, require variable-size frames. This issue is discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002E6D.xhtml#P700049702700000000000000000300F"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.10.5</span></a>. Procedure <code id="P7000497027000000000000000040AB6" data-uri="chapter03.xhtml#P7000497027000000000000000040AB6" class="pcalibre1 calibre8 pcalibre">P</code> can pass up to six integral values (i.e., pointers and integers) on the stack, but if <code id="P7000497027000000000000000040AB7" data-uri="chapter03.xhtml#P7000497027000000000000000040AB7" class="pcalibre1 calibre8 pcalibre">Q</code> requires more arguments, these can be stored by <code id="P7000497027000000000000000040AB8" data-uri="chapter03.xhtml#P7000497027000000000000000040AB8" class="pcalibre1 calibre8 pcalibre">P</code> within its stack frame prior to the call.</p>
<p id="P7000497027000000000000000040AB9" data-uri="chapter03.xhtml#P7000497027000000000000000040AB9" class="pcalibre1 pcalibre calibre2">In the interest of space and time efficiency, x86-64 procedures allocate only the portions of stack frames they require. For example, many procedures have six or fewer arguments, and so all of their parameters can be passed in registers. Thus, parts of the stack frame diagrammed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a> may be omitted. Indeed, many functions do not even require as tack frame. This occurs when all of the local variables can be held in registers and the function does not call any other functions (sometimes referred to as a <i class="calibre5 pcalibre pcalibre1">leaf procedure</i>, in reference to the tree structure of procedure calls). For example, none of the functions we have examined thus far required stack frames.</p>
</section>
<section id="P700049702700000000000000000285D" data-uri="chapter03.xhtml#P700049702700000000000000000285D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040ABA" data-uri="chapter03.xhtml#P7000497027000000000000000040ABA" epub:type="title"><span class="pcalibre label pcalibre1">3.7.2 </span>Control Transfer</h1></header>
<p id="P7000497027000000000000000040ABB" data-uri="chapter03.xhtml#P7000497027000000000000000040ABB" class="pcalibre1 pcalibre calibre2">Passing control from function <code id="P7000497027000000000000000040ABC" data-uri="chapter03.xhtml#P7000497027000000000000000040ABC" class="pcalibre1 calibre8 pcalibre">P</code> to function <code id="P7000497027000000000000000040ABD" data-uri="chapter03.xhtml#P7000497027000000000000000040ABD" class="pcalibre1 calibre8 pcalibre">Q</code> involves simply setting the program counter (PC) to the starting address of the code for <code id="P7000497027000000000000000040ABE" data-uri="chapter03.xhtml#P7000497027000000000000000040ABE" class="pcalibre1 calibre8 pcalibre">Q</code>. However, when it later comes time for <code id="P7000497027000000000000000040ABF" data-uri="chapter03.xhtml#P7000497027000000000000000040ABF" class="pcalibre1 calibre8 pcalibre">Q</code> to return, the processor must have some record of the code location where it should resume the execution of <code id="P7000497027000000000000000040AC0" data-uri="chapter03.xhtml#P7000497027000000000000000040AC0" class="pcalibre1 calibre8 pcalibre">P</code>. This information is recorded in x86-64 machines by invoking procedure <code id="P7000497027000000000000000040AC1" data-uri="chapter03.xhtml#P7000497027000000000000000040AC1" class="pcalibre1 calibre8 pcalibre">Q</code> with the instruction call <code id="P7000497027000000000000000040AC2" data-uri="chapter03.xhtml#P7000497027000000000000000040AC2" class="pcalibre1 calibre8 pcalibre">Q</code>. This instruction pushes an address <var class="calibre5 pcalibre pcalibre1">A</var> onto the stack and sets the PC to the beginning of <code id="P7000497027000000000000000040AC3" data-uri="chapter03.xhtml#P7000497027000000000000000040AC3" class="pcalibre1 calibre8 pcalibre">Q</code>. The pushed address <var class="calibre5 pcalibre pcalibre1">A</var> is referred to as the <i class="calibre5 pcalibre pcalibre1">return address</i> and is computed as the address of the instruction immediately following the <code id="P7000497027000000000000000040AC4" data-uri="chapter03.xhtml#P7000497027000000000000000040AC4" class="pcalibre1 calibre8 pcalibre">call</code> instruction. The counterpart instruction <code id="P7000497027000000000000000040AC5" data-uri="chapter03.xhtml#P7000497027000000000000000040AC5" class="pcalibre1 calibre8 pcalibre">ret</code> pops an address <var class="calibre5 pcalibre pcalibre1">A</var> off the stack and sets the PC to <var class="calibre5 pcalibre pcalibre1">A</var>.</p>
<p id="P7000497027000000000000000040AC6" data-uri="chapter03.xhtml#P7000497027000000000000000040AC6" class="pcalibre1 pcalibre calibre2">The general forms of the <code id="P7000497027000000000000000040AC7" data-uri="chapter03.xhtml#P7000497027000000000000000040AC7" class="pcalibre1 calibre8 pcalibre">call</code> and <code id="P7000497027000000000000000040AC8" data-uri="chapter03.xhtml#P7000497027000000000000000040AC8" class="pcalibre1 calibre8 pcalibre">ret</code> instructions are described as follows:</p>
<table id="P7000497027000000000000000040AC9" data-uri="chapter03.xhtml#P7000497027000000000000000040AC9" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040ACA" data-uri="chapter03.xhtml#P7000497027000000000000000040ACA" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P7000497027000000000000000040ACB" data-uri="chapter03.xhtml#P7000497027000000000000000040ACB" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040ACC" data-uri="chapter03.xhtml#P7000497027000000000000000040ACC" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040ACD" data-uri="chapter03.xhtml#P7000497027000000000000000040ACD" class="calibre10 pcalibre pcalibre1">call</code> <i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040ACE" data-uri="chapter03.xhtml#P7000497027000000000000000040ACE" class="calibre20 pcalibre pcalibre1">Procedure call</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040ACF" data-uri="chapter03.xhtml#P7000497027000000000000000040ACF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040AD0" data-uri="chapter03.xhtml#P7000497027000000000000000040AD0" class="calibre10 pcalibre pcalibre1">call</code> *<i class="calibre5 pcalibre pcalibre1">Operand</i></td>
<td id="P7000497027000000000000000040AD1" data-uri="chapter03.xhtml#P7000497027000000000000000040AD1" class="calibre20 pcalibre pcalibre1">Procedure call</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040AD2" data-uri="chapter03.xhtml#P7000497027000000000000000040AD2" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040AD3" data-uri="chapter03.xhtml#P7000497027000000000000000040AD3" class="calibre10 pcalibre pcalibre1">ret</code></td>
<td id="P7000497027000000000000000040AD4" data-uri="chapter03.xhtml#P7000497027000000000000000040AD4" class="calibre20 pcalibre pcalibre1">Return from call</td>
</tr>
</tbody>
</table>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040AD5" data-uri="chapter03.xhtml#P7000497027000000000000000040AD5">(These instructions are referred to as <code id="P7000497027000000000000000040AD6" data-uri="chapter03.xhtml#P7000497027000000000000000040AD6" class="pcalibre1 calibre8 pcalibre">callq</code> and <code id="P7000497027000000000000000040AD7" data-uri="chapter03.xhtml#P7000497027000000000000000040AD7" class="pcalibre1 calibre8 pcalibre">retq</code> in the disassembly outputs generated by the program <code id="P7000497027000000000000000040AD8" data-uri="chapter03.xhtml#P7000497027000000000000000040AD8" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">objdump</span></code>. The added suffix `<code id="P7000497027000000000000000040AD9" data-uri="chapter03.xhtml#P7000497027000000000000000040AD9" class="pcalibre1 calibre8 pcalibre">q</code>' simply emphasizes that these are x86-64 versions of call and return instructions, not IA32. In x86-64 assembly code, both versions can be used interchangeably.)</p>
<p id="P7000497027000000000000000040ADA" data-uri="chapter03.xhtml#P7000497027000000000000000040ADA" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000040ADB" data-uri="chapter03.xhtml#P7000497027000000000000000040ADB" class="pcalibre1 calibre8 pcalibre">call</code> instruction has a target indicating the address of the instruction where the called procedure starts. Like jumps, a call can be either direct or indirect. In assembly code, the target of a direct call is given as a label, while the target of an indirect call is given by `*' followed by an operand specifier using one of the formats described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F57"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.3</span></a>.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002880" data-uri="chapter03.xhtml#P7000497027000000000000000002880">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002881" title="242" data-uri="chapter03.xhtml#P7000497027000000000000000002881" epub:type="pagebreak"></span>
<img alt="A diagram illustrates call and ret functions." id="P7000497027000000000000000040ADC" data-uri="P700049702700000000000000000B6B7" src="../images/p242-1.png" class="pcalibre1 pcalibre calibre89"/>
<figcaption id="P7000497027000000000000000040ADD" data-uri="chapter03.xhtml#P7000497027000000000000000040ADD" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040ADE" data-uri="chapter03.xhtml#P7000497027000000000000000040ADE" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.26 </span>Illustration of <code id="P7000497027000000000000000040ADF" data-uri="chapter03.xhtml#P7000497027000000000000000040ADF" class="pcalibre1 calibre8 pcalibre">call</code> and <code id="P7000497027000000000000000040AE0" data-uri="chapter03.xhtml#P7000497027000000000000000040AE0" class="pcalibre1 calibre8 pcalibre">ret</code> functions.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040AE1" data-uri="chapter03.xhtml#P7000497027000000000000000040AE1"><p id="P7000497027000000000000000040AE2" data-uri="chapter03.xhtml#P7000497027000000000000000040AE2" class="pcalibre calibre3 pcalibre1">The <code id="P7000497027000000000000000040AE3" data-uri="chapter03.xhtml#P7000497027000000000000000040AE3" class="pcalibre1 calibre8 pcalibre">call instruction</code> transfers control to the start of a function, while the <code id="P7000497027000000000000000040AE4" data-uri="chapter03.xhtml#P7000497027000000000000000040AE4" class="pcalibre1 calibre8 pcalibre">ret</code> instruction returns back to the instruction following the call.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000020DC2" data-uri="chapter03.xhtml#P7000497027000000000000000020DC2">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000040AE5" data-uri="chapter03.xhtml#P7000497027000000000000000040AE5" class="pcalibre1 pcalibre calibre2">A diagram has three cells representing executing call, after call, and after ret, as summarized below.</p>
<ul class="ul_none1 pcalibre pcalibre1" id="P7000497027000000000000000040AE6" data-uri="chapter03.xhtml#P7000497027000000000000000040AE6">
<li id="P7000497027000000000000000040AE7" data-uri="chapter03.xhtml#P7000497027000000000000000040AE7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AE8" data-uri="chapter03.xhtml#P7000497027000000000000000040AE8" class="calibre13 pcalibre pcalibre1">Executing call: at bottom of cell, %rip = 0x400563 and %rsp = 0x7fffffffe840</p></li>
<li id="P7000497027000000000000000040AE9" data-uri="chapter03.xhtml#P7000497027000000000000000040AE9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AEA" data-uri="chapter03.xhtml#P7000497027000000000000000040AEA" class="calibre13 pcalibre pcalibre1">After call: below bottom of cell, at 0x400568, %rip = 0x400540 and %rsp = 0x7fffffffe838</p></li>
<li id="P7000497027000000000000000040AEB" data-uri="chapter03.xhtml#P7000497027000000000000000040AEB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040AEC" data-uri="chapter03.xhtml#P7000497027000000000000000040AEC" class="calibre13 pcalibre pcalibre1">After ret: at bottom of cell, %rip = 0x400548 and %rsp = 0x7fffffffe840.</p></li>
</ul>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000040AED" data-uri="chapter03.xhtml#P7000497027000000000000000040AED" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002880"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.26</span></a> illustrates the execution of the <code id="P7000497027000000000000000040AEE" data-uri="chapter03.xhtml#P7000497027000000000000000040AEE" class="pcalibre1 calibre8 pcalibre">call</code> and <code id="P7000497027000000000000000040AEF" data-uri="chapter03.xhtml#P7000497027000000000000000040AEF" class="pcalibre1 calibre8 pcalibre">ret</code> instructions for the <code id="P7000497027000000000000000040AF0" data-uri="chapter03.xhtml#P7000497027000000000000000040AF0" class="pcalibre1 calibre8 pcalibre">multstore</code> and <code id="P7000497027000000000000000040AF1" data-uri="chapter03.xhtml#P7000497027000000000000000040AF1" class="pcalibre1 calibre8 pcalibre">main</code> functions introduced in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001E38.xhtml#P7000497027000000000000000001E6C"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.2.2</span></a>. The following are excerpts of the disassembled code for the two functions:</p>
<pre id="P7000497027000000000000000040AF2" data-uri="chapter03.xhtml#P7000497027000000000000000040AF2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040AF3" data-uri="chapter03.xhtml#P7000497027000000000000000040AF3" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Beginning of function multstore</i>
1	0000000000400540 &lt;multstore&gt;:
2	400540:	53		push	%rbx
3	400541:	48 89 d3	mov	%rdx,%rbx
	...
	<i class="calibre5 pcalibre pcalibre1">Return from function multstore</i>
4	40054d:	c3		retq
	...
	<i class="calibre5 pcalibre pcalibre1">Call to multstore from main</i>
5	400563:	e8 d8 ff ff ff	callq 400540 &lt;multstore&gt;
6	400568:	48 8b 54 24 08	mov 0x8 (%rsp),%rdx
</code></pre>
<p id="P7000497027000000000000000040AF4" data-uri="chapter03.xhtml#P7000497027000000000000000040AF4" class="pcalibre1 pcalibre calibre2">In this code, we can see that the <code id="P7000497027000000000000000040AF5" data-uri="chapter03.xhtml#P7000497027000000000000000040AF5" class="pcalibre1 calibre8 pcalibre">call</code> instruction with address <code id="P7000497027000000000000000040AF6" data-uri="chapter03.xhtml#P7000497027000000000000000040AF6" class="pcalibre1 calibre8 pcalibre">0x400563</code> in <code id="P7000497027000000000000000040AF7" data-uri="chapter03.xhtml#P7000497027000000000000000040AF7" class="pcalibre1 calibre8 pcalibre">main</code> calls function <code id="P7000497027000000000000000040AF8" data-uri="chapter03.xhtml#P7000497027000000000000000040AF8" class="pcalibre1 calibre8 pcalibre">multstore</code>. This status is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002880"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.26(a)</span></a>, with the indicated values for the stack pointer <code id="P7000497027000000000000000040AF9" data-uri="chapter03.xhtml#P7000497027000000000000000040AF9" class="pcalibre1 calibre8 pcalibre">%rsp</code> and the program counter <code id="P7000497027000000000000000040AFA" data-uri="chapter03.xhtml#P7000497027000000000000000040AFA" class="pcalibre1 calibre8 pcalibre">%rip</code>. The effect of the <code id="P7000497027000000000000000040AFB" data-uri="chapter03.xhtml#P7000497027000000000000000040AFB" class="pcalibre1 calibre8 pcalibre">call</code> is to push the return address <code id="P7000497027000000000000000040AFC" data-uri="chapter03.xhtml#P7000497027000000000000000040AFC" class="pcalibre1 calibre8 pcalibre">0x400568</code> onto the stack and to jump to the first instruction in function <code id="P7000497027000000000000000040AFD" data-uri="chapter03.xhtml#P7000497027000000000000000040AFD" class="pcalibre1 calibre8 pcalibre">multstore</code>, at address <code id="P7000497027000000000000000040AFE" data-uri="chapter03.xhtml#P7000497027000000000000000040AFE" class="pcalibre1 calibre8 pcalibre">0x0400540</code> (3.26(b)). The execution of <code id="P7000497027000000000000000040AFF" data-uri="chapter03.xhtml#P7000497027000000000000000040AFF" class="pcalibre1 calibre8 pcalibre">function</code> multstore continues until it hits the <code id="P7000497027000000000000000040B00" data-uri="chapter03.xhtml#P7000497027000000000000000040B00" class="pcalibre1 calibre8 pcalibre">ret</code> instruction at address <code id="P7000497027000000000000000040B01" data-uri="chapter03.xhtml#P7000497027000000000000000040B01" class="pcalibre1 calibre8 pcalibre">0x40054d</code>. This instruction pops the value <code id="P7000497027000000000000000040B02" data-uri="chapter03.xhtml#P7000497027000000000000000040B02" class="pcalibre1 calibre8 pcalibre">0x400568</code> from the stack and jumps to this address, resuming the execution of <code id="P7000497027000000000000000040B03" data-uri="chapter03.xhtml#P7000497027000000000000000040B03" class="pcalibre1 calibre8 pcalibre">main</code> just after the <code id="P7000497027000000000000000040B04" data-uri="chapter03.xhtml#P7000497027000000000000000040B04" class="pcalibre1 calibre8 pcalibre">call</code> instruction (3.26(c)).</p>
<p id="P7000497027000000000000000040B05" data-uri="chapter03.xhtml#P7000497027000000000000000040B05" class="pcalibre1 pcalibre calibre2">As a more detailed example of passing control to and from procedures, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000028B1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.27(a)</span></a> shows the disassembled code for two functions, <code id="P7000497027000000000000000040B06" data-uri="chapter03.xhtml#P7000497027000000000000000040B06" class="pcalibre1 calibre8 pcalibre">top</code> and <code id="P7000497027000000000000000040B07" data-uri="chapter03.xhtml#P7000497027000000000000000040B07" class="pcalibre1 calibre8 pcalibre">leaf</code>, as well as the portion of code in function <code id="P7000497027000000000000000040B08" data-uri="chapter03.xhtml#P7000497027000000000000000040B08" class="pcalibre1 calibre8 pcalibre">main</code> where <code id="P7000497027000000000000000040B09" data-uri="chapter03.xhtml#P7000497027000000000000000040B09" class="pcalibre1 calibre8 pcalibre">top</code> gets called. Each instruction is identified by labels <code id="P7000497027000000000000000040B0A" data-uri="chapter03.xhtml#P7000497027000000000000000040B0A" class="pcalibre1 calibre8 pcalibre">L1–L2</code> (in <code id="P7000497027000000000000000040B0B" data-uri="chapter03.xhtml#P7000497027000000000000000040B0B" class="pcalibre1 calibre8 pcalibre">leaf</code>), <code id="P7000497027000000000000000040B0C" data-uri="chapter03.xhtml#P7000497027000000000000000040B0C" class="pcalibre1 calibre8 pcalibre">T1–T4</code> (in top), and <code id="P7000497027000000000000000040B0D" data-uri="chapter03.xhtml#P7000497027000000000000000040B0D" class="pcalibre1 calibre8 pcalibre">M1–M2</code> in main. Part (b) of the figure shows a detailed trace of the code execution, in which <code id="P7000497027000000000000000040B0E" data-uri="chapter03.xhtml#P7000497027000000000000000040B0E" class="pcalibre1 calibre8 pcalibre">main</code> calls <code id="P7000497027000000000000000040B0F" data-uri="chapter03.xhtml#P7000497027000000000000000040B0F" class="pcalibre1 calibre8 pcalibre">top(100)</code>, causing top to call <code id="P7000497027000000000000000040B10" data-uri="chapter03.xhtml#P7000497027000000000000000040B10" class="pcalibre1 calibre8 pcalibre">leaf(95)</code>. Function <code id="P7000497027000000000000000040B11" data-uri="chapter03.xhtml#P7000497027000000000000000040B11" class="pcalibre1 calibre8 pcalibre">leaf</code> returns 97 to <code id="P7000497027000000000000000040B12" data-uri="chapter03.xhtml#P7000497027000000000000000040B12" class="pcalibre1 calibre8 pcalibre">top</code>, which</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000028B1" data-uri="chapter03.xhtml#P70004970270000000000000000028B1">
<p id="P7000497027000000000000000040B13" data-uri="chapter03.xhtml#P7000497027000000000000000040B13" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P70004970270000000000000000028B3" title="243" data-uri="chapter03.xhtml#P70004970270000000000000000028B3" epub:type="pagebreak"></span>(a) Disassembled code for demonstrating procedure calls and returns</p>
<pre id="P7000497027000000000000000040B14" data-uri="chapter03.xhtml#P7000497027000000000000000040B14" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040B15" data-uri="chapter03.xhtml#P7000497027000000000000000040B15" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Disassembly of leaf(long y</i>)
	<i class="calibre5 pcalibre pcalibre1">y in %rdi</i>
1	0000000000400540 &lt;leaf&gt;:
2	400540:	48 8d 47 02	lea	0x2(%rdi),%rax	<i class="calibre5 pcalibre pcalibre1">L1: z+2</i>
3	400544:	c3		retq			<i class="calibre5 pcalibre pcalibre1">L2: Return</i>

4	0000000000400545 &lt;top&gt;:
	<i class="calibre5 pcalibre pcalibre1">Disassembly of top(long x</i>)
	<i class="calibre5 pcalibre pcalibre1">x in %rdi</i>
5	400545:	48 83 ef 05	 sub	$0x5,%rdi	<i class="calibre5 pcalibre pcalibre1">T1: x-5</i>
6	400549: e8 f2 ff ff ff	callq   400540 &lt;leaf&gt;	<i class="calibre5 pcalibre pcalibre1">T2: Call leaf(x-5)</i>
7	40054e: 4801c0		add	%rax,%rax	<i class="calibre5 pcalibre pcalibre1">T3: Double result</i>
8	400551:c3		retq			<i class="calibre5 pcalibre pcalibre1">T4: Return</i>
	...
	<i class="calibre5 pcalibre pcalibre1">Call to top from function main</i>
9	40055b: e8 e5 ff ff ff	callq	400545 &lt;top&gt;	<i class="calibre5 pcalibre pcalibre1">M1: Call top(100)</i>
10	400560: 4889c2		mov	%rax,%rdx	<i class="calibre5 pcalibre pcalibre1">M2: Resume</i>
</code></pre>
<p id="P7000497027000000000000000040B16" data-uri="chapter03.xhtml#P7000497027000000000000000040B16" class="pcalibre1 pcalibre calibre2">(b) Execution trace of example code</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000040B17" data-uri="chapter03.xhtml#P7000497027000000000000000040B17">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="3" id="P7000497027000000000000000040B18" data-uri="chapter03.xhtml#P7000497027000000000000000040B18" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th colspan="4" id="P7000497027000000000000000040B19" data-uri="chapter03.xhtml#P7000497027000000000000000040B19" class="calibre18 pcalibre pcalibre1">State values (at beginning)</th>
<th id="P7000497027000000000000000040B1A" data-uri="chapter03.xhtml#P7000497027000000000000000040B1A" class="calibre18 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040B1B" data-uri="chapter03.xhtml#P7000497027000000000000000040B1B" class="calibre18 pcalibre pcalibre1">Label</th>
<th id="P7000497027000000000000000040B1C" data-uri="chapter03.xhtml#P7000497027000000000000000040B1C" class="calibre18 pcalibre pcalibre1">PC</th>
<th id="P7000497027000000000000000040B1D" data-uri="chapter03.xhtml#P7000497027000000000000000040B1D" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P7000497027000000000000000040B1E" data-uri="chapter03.xhtml#P7000497027000000000000000040B1E" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040B1F" data-uri="chapter03.xhtml#P7000497027000000000000000040B1F" class="calibre10 pcalibre pcalibre1">%rdi</code></th>
<th id="P7000497027000000000000000040B20" data-uri="chapter03.xhtml#P7000497027000000000000000040B20" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040B21" data-uri="chapter03.xhtml#P7000497027000000000000000040B21" class="calibre10 pcalibre pcalibre1">%rax</code></th>
<th id="P7000497027000000000000000040B22" data-uri="chapter03.xhtml#P7000497027000000000000000040B22" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040B23" data-uri="chapter03.xhtml#P7000497027000000000000000040B23" class="calibre10 pcalibre pcalibre1">%rsp</code></th>
<th id="P7000497027000000000000000040B24" data-uri="chapter03.xhtml#P7000497027000000000000000040B24" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040B25" data-uri="chapter03.xhtml#P7000497027000000000000000040B25" class="calibre10 pcalibre pcalibre1">*%rsp</code></th>
<th id="P7000497027000000000000000040B26" data-uri="chapter03.xhtml#P7000497027000000000000000040B26" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B27" data-uri="chapter03.xhtml#P7000497027000000000000000040B27" class="calibre20 pcalibre pcalibre1">M1</td>
<td id="P7000497027000000000000000040B28" data-uri="chapter03.xhtml#P7000497027000000000000000040B28" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B29" data-uri="chapter03.xhtml#P7000497027000000000000000040B29" class="calibre10 pcalibre pcalibre1">0x40055b</code></td>
<td id="P7000497027000000000000000040B2A" data-uri="chapter03.xhtml#P7000497027000000000000000040B2A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B2B" data-uri="chapter03.xhtml#P7000497027000000000000000040B2B" class="calibre10 pcalibre pcalibre1">callq</code></td>
<td id="P7000497027000000000000000040B2C" data-uri="chapter03.xhtml#P7000497027000000000000000040B2C" class="calibre20 pcalibre pcalibre1">100</td>
<td id="P7000497027000000000000000040B2D" data-uri="chapter03.xhtml#P7000497027000000000000000040B2D" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B2E" data-uri="chapter03.xhtml#P7000497027000000000000000040B2E" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B2F" data-uri="chapter03.xhtml#P7000497027000000000000000040B2F" class="calibre10 pcalibre pcalibre1">0x7fffffffe820</code></td>
<td id="P7000497027000000000000000040B30" data-uri="chapter03.xhtml#P7000497027000000000000000040B30" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B31" data-uri="chapter03.xhtml#P7000497027000000000000000040B31" class="calibre20 pcalibre pcalibre1">Call <code id="P7000497027000000000000000040B32" data-uri="chapter03.xhtml#P7000497027000000000000000040B32" class="calibre10 pcalibre pcalibre1">top(100)</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B33" data-uri="chapter03.xhtml#P7000497027000000000000000040B33" class="calibre20 pcalibre pcalibre1">T1</td>
<td id="P7000497027000000000000000040B34" data-uri="chapter03.xhtml#P7000497027000000000000000040B34" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B35" data-uri="chapter03.xhtml#P7000497027000000000000000040B35" class="calibre10 pcalibre pcalibre1">0x400545</code></td>
<td id="P7000497027000000000000000040B36" data-uri="chapter03.xhtml#P7000497027000000000000000040B36" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B37" data-uri="chapter03.xhtml#P7000497027000000000000000040B37" class="calibre10 pcalibre pcalibre1">sub</code></td>
<td id="P7000497027000000000000000040B38" data-uri="chapter03.xhtml#P7000497027000000000000000040B38" class="calibre20 pcalibre pcalibre1">100</td>
<td id="P7000497027000000000000000040B39" data-uri="chapter03.xhtml#P7000497027000000000000000040B39" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B3A" data-uri="chapter03.xhtml#P7000497027000000000000000040B3A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B3B" data-uri="chapter03.xhtml#P7000497027000000000000000040B3B" class="calibre10 pcalibre pcalibre1">0x7fffffffe818</code></td>
<td id="P7000497027000000000000000040B3C" data-uri="chapter03.xhtml#P7000497027000000000000000040B3C" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B3D" data-uri="chapter03.xhtml#P7000497027000000000000000040B3D" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040B3E" data-uri="chapter03.xhtml#P7000497027000000000000000040B3E" class="calibre20 pcalibre pcalibre1">Entry of <code id="P7000497027000000000000000040B3F" data-uri="chapter03.xhtml#P7000497027000000000000000040B3F" class="calibre10 pcalibre pcalibre1">top</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B40" data-uri="chapter03.xhtml#P7000497027000000000000000040B40" class="calibre20 pcalibre pcalibre1">T2</td>
<td id="P7000497027000000000000000040B41" data-uri="chapter03.xhtml#P7000497027000000000000000040B41" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B42" data-uri="chapter03.xhtml#P7000497027000000000000000040B42" class="calibre10 pcalibre pcalibre1">0x400549</code></td>
<td id="P7000497027000000000000000040B43" data-uri="chapter03.xhtml#P7000497027000000000000000040B43" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B44" data-uri="chapter03.xhtml#P7000497027000000000000000040B44" class="calibre10 pcalibre pcalibre1">callq</code></td>
<td id="P7000497027000000000000000040B45" data-uri="chapter03.xhtml#P7000497027000000000000000040B45" class="calibre20 pcalibre pcalibre1">95</td>
<td id="P7000497027000000000000000040B46" data-uri="chapter03.xhtml#P7000497027000000000000000040B46" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B47" data-uri="chapter03.xhtml#P7000497027000000000000000040B47" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B48" data-uri="chapter03.xhtml#P7000497027000000000000000040B48" class="calibre10 pcalibre pcalibre1">0x7fffffffe818</code></td>
<td id="P7000497027000000000000000040B49" data-uri="chapter03.xhtml#P7000497027000000000000000040B49" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B4A" data-uri="chapter03.xhtml#P7000497027000000000000000040B4A" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040B4B" data-uri="chapter03.xhtml#P7000497027000000000000000040B4B" class="calibre20 pcalibre pcalibre1">Call <code id="P7000497027000000000000000040B4C" data-uri="chapter03.xhtml#P7000497027000000000000000040B4C" class="calibre10 pcalibre pcalibre1">leaf(95)</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B4D" data-uri="chapter03.xhtml#P7000497027000000000000000040B4D" class="calibre20 pcalibre pcalibre1">L1</td>
<td id="P7000497027000000000000000040B4E" data-uri="chapter03.xhtml#P7000497027000000000000000040B4E" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B4F" data-uri="chapter03.xhtml#P7000497027000000000000000040B4F" class="calibre10 pcalibre pcalibre1">0x400540</code></td>
<td id="P7000497027000000000000000040B50" data-uri="chapter03.xhtml#P7000497027000000000000000040B50" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B51" data-uri="chapter03.xhtml#P7000497027000000000000000040B51" class="calibre10 pcalibre pcalibre1">lea</code></td>
<td id="P7000497027000000000000000040B52" data-uri="chapter03.xhtml#P7000497027000000000000000040B52" class="calibre20 pcalibre pcalibre1">95</td>
<td id="P7000497027000000000000000040B53" data-uri="chapter03.xhtml#P7000497027000000000000000040B53" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B54" data-uri="chapter03.xhtml#P7000497027000000000000000040B54" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B55" data-uri="chapter03.xhtml#P7000497027000000000000000040B55" class="calibre10 pcalibre pcalibre1">0x7fffffffe810</code></td>
<td id="P7000497027000000000000000040B56" data-uri="chapter03.xhtml#P7000497027000000000000000040B56" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B57" data-uri="chapter03.xhtml#P7000497027000000000000000040B57" class="calibre10 pcalibre pcalibre1">0x40054e</code></td>
<td id="P7000497027000000000000000040B58" data-uri="chapter03.xhtml#P7000497027000000000000000040B58" class="calibre20 pcalibre pcalibre1">Entry of <code id="P7000497027000000000000000040B59" data-uri="chapter03.xhtml#P7000497027000000000000000040B59" class="calibre10 pcalibre pcalibre1">leaf</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B5A" data-uri="chapter03.xhtml#P7000497027000000000000000040B5A" class="calibre20 pcalibre pcalibre1">L2</td>
<td id="P7000497027000000000000000040B5B" data-uri="chapter03.xhtml#P7000497027000000000000000040B5B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B5C" data-uri="chapter03.xhtml#P7000497027000000000000000040B5C" class="calibre10 pcalibre pcalibre1">0x400544</code></td>
<td id="P7000497027000000000000000040B5D" data-uri="chapter03.xhtml#P7000497027000000000000000040B5D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B5E" data-uri="chapter03.xhtml#P7000497027000000000000000040B5E" class="calibre10 pcalibre pcalibre1">retq</code></td>
<td id="P7000497027000000000000000040B5F" data-uri="chapter03.xhtml#P7000497027000000000000000040B5F" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B60" data-uri="chapter03.xhtml#P7000497027000000000000000040B60" class="calibre20 pcalibre pcalibre1">97</td>
<td id="P7000497027000000000000000040B61" data-uri="chapter03.xhtml#P7000497027000000000000000040B61" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B62" data-uri="chapter03.xhtml#P7000497027000000000000000040B62" class="calibre10 pcalibre pcalibre1">0x7fffffffe810</code></td>
<td id="P7000497027000000000000000040B63" data-uri="chapter03.xhtml#P7000497027000000000000000040B63" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B64" data-uri="chapter03.xhtml#P7000497027000000000000000040B64" class="calibre10 pcalibre pcalibre1">0x40054e</code></td>
<td id="P7000497027000000000000000040B65" data-uri="chapter03.xhtml#P7000497027000000000000000040B65" class="calibre20 pcalibre pcalibre1">Return 97 from leaf</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B66" data-uri="chapter03.xhtml#P7000497027000000000000000040B66" class="calibre20 pcalibre pcalibre1">T3</td>
<td id="P7000497027000000000000000040B67" data-uri="chapter03.xhtml#P7000497027000000000000000040B67" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B68" data-uri="chapter03.xhtml#P7000497027000000000000000040B68" class="calibre10 pcalibre pcalibre1">0x40054e</code></td>
<td id="P7000497027000000000000000040B69" data-uri="chapter03.xhtml#P7000497027000000000000000040B69" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B6A" data-uri="chapter03.xhtml#P7000497027000000000000000040B6A" class="calibre10 pcalibre pcalibre1">add</code></td>
<td id="P7000497027000000000000000040B6B" data-uri="chapter03.xhtml#P7000497027000000000000000040B6B" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B6C" data-uri="chapter03.xhtml#P7000497027000000000000000040B6C" class="calibre20 pcalibre pcalibre1">97</td>
<td id="P7000497027000000000000000040B6D" data-uri="chapter03.xhtml#P7000497027000000000000000040B6D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B6E" data-uri="chapter03.xhtml#P7000497027000000000000000040B6E" class="calibre10 pcalibre pcalibre1">0x7fffffffe818</code></td>
<td id="P7000497027000000000000000040B6F" data-uri="chapter03.xhtml#P7000497027000000000000000040B6F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B70" data-uri="chapter03.xhtml#P7000497027000000000000000040B70" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040B71" data-uri="chapter03.xhtml#P7000497027000000000000000040B71" class="calibre20 pcalibre pcalibre1">Resume <code id="P7000497027000000000000000040B72" data-uri="chapter03.xhtml#P7000497027000000000000000040B72" class="calibre10 pcalibre pcalibre1">top</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B73" data-uri="chapter03.xhtml#P7000497027000000000000000040B73" class="calibre20 pcalibre pcalibre1">T4</td>
<td id="P7000497027000000000000000040B74" data-uri="chapter03.xhtml#P7000497027000000000000000040B74" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B75" data-uri="chapter03.xhtml#P7000497027000000000000000040B75" class="calibre10 pcalibre pcalibre1">0x400551</code></td>
<td id="P7000497027000000000000000040B76" data-uri="chapter03.xhtml#P7000497027000000000000000040B76" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B77" data-uri="chapter03.xhtml#P7000497027000000000000000040B77" class="calibre10 pcalibre pcalibre1">retq</code></td>
<td id="P7000497027000000000000000040B78" data-uri="chapter03.xhtml#P7000497027000000000000000040B78" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B79" data-uri="chapter03.xhtml#P7000497027000000000000000040B79" class="calibre20 pcalibre pcalibre1">194</td>
<td id="P7000497027000000000000000040B7A" data-uri="chapter03.xhtml#P7000497027000000000000000040B7A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B7B" data-uri="chapter03.xhtml#P7000497027000000000000000040B7B" class="calibre10 pcalibre pcalibre1">0x7fffffffe818</code></td>
<td id="P7000497027000000000000000040B7C" data-uri="chapter03.xhtml#P7000497027000000000000000040B7C" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B7D" data-uri="chapter03.xhtml#P7000497027000000000000000040B7D" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040B7E" data-uri="chapter03.xhtml#P7000497027000000000000000040B7E" class="calibre20 pcalibre pcalibre1">Return 194 from <code id="P7000497027000000000000000040B7F" data-uri="chapter03.xhtml#P7000497027000000000000000040B7F" class="calibre10 pcalibre pcalibre1">top</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040B80" data-uri="chapter03.xhtml#P7000497027000000000000000040B80" class="calibre20 pcalibre pcalibre1">M2</td>
<td id="P7000497027000000000000000040B81" data-uri="chapter03.xhtml#P7000497027000000000000000040B81" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B82" data-uri="chapter03.xhtml#P7000497027000000000000000040B82" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040B83" data-uri="chapter03.xhtml#P7000497027000000000000000040B83" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B84" data-uri="chapter03.xhtml#P7000497027000000000000000040B84" class="calibre10 pcalibre pcalibre1">mov</code></td>
<td id="P7000497027000000000000000040B85" data-uri="chapter03.xhtml#P7000497027000000000000000040B85" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B86" data-uri="chapter03.xhtml#P7000497027000000000000000040B86" class="calibre20 pcalibre pcalibre1">194</td>
<td id="P7000497027000000000000000040B87" data-uri="chapter03.xhtml#P7000497027000000000000000040B87" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040B88" data-uri="chapter03.xhtml#P7000497027000000000000000040B88" class="calibre10 pcalibre pcalibre1">0x7fffffffe820</code></td>
<td id="P7000497027000000000000000040B89" data-uri="chapter03.xhtml#P7000497027000000000000000040B89" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040B8A" data-uri="chapter03.xhtml#P7000497027000000000000000040B8A" class="calibre20 pcalibre pcalibre1">Resume <code id="P7000497027000000000000000040B8B" data-uri="chapter03.xhtml#P7000497027000000000000000040B8B" class="calibre10 pcalibre pcalibre1">main</code></td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040B8C" data-uri="chapter03.xhtml#P7000497027000000000000000040B8C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040B8D" data-uri="chapter03.xhtml#P7000497027000000000000000040B8D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.27 </span>Detailed execution of program involving procedure calls and returns.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040B8E" data-uri="chapter03.xhtml#P7000497027000000000000000040B8E"><p id="P7000497027000000000000000040B8F" data-uri="chapter03.xhtml#P7000497027000000000000000040B8F" class="pcalibre calibre3 pcalibre1">Using the stack to store return addresses makes it possible to return to the right point in the procedures.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040B90" data-uri="chapter03.xhtml#P7000497027000000000000000040B90">then returns 194 to <code id="P7000497027000000000000000040B91" data-uri="chapter03.xhtml#P7000497027000000000000000040B91" class="pcalibre1 calibre8 pcalibre">main</code>. The first three columns describe the instruction being executed, including the instruction label, the address, and the instruction type. The next four columns show the state of the program <i class="calibre5 pcalibre pcalibre1">before</i> the instruction is executed, including the contents of registers <code id="P7000497027000000000000000040B92" data-uri="chapter03.xhtml#P7000497027000000000000000040B92" class="pcalibre1 calibre8 pcalibre">%rdi, %rax</code>, and <code id="P7000497027000000000000000040B93" data-uri="chapter03.xhtml#P7000497027000000000000000040B93" class="pcalibre1 calibre8 pcalibre">%rsp</code>, as well as the value at the top of the stack. The contents of this table should be studied carefully, as they <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002934" title="244" data-uri="chapter03.xhtml#P7000497027000000000000000002934" epub:type="pagebreak"></span>demonstrate the important role of the run-time stack in managing the storage needed to support procedure calls and returns.</p>
<p id="P7000497027000000000000000040B94" data-uri="chapter03.xhtml#P7000497027000000000000000040B94" class="pcalibre1 pcalibre calibre2">Instruction <code id="P7000497027000000000000000040B95" data-uri="chapter03.xhtml#P7000497027000000000000000040B95" class="pcalibre1 calibre8 pcalibre">L1</code> of leaf sets <code id="P7000497027000000000000000040B96" data-uri="chapter03.xhtml#P7000497027000000000000000040B96" class="pcalibre1 calibre8 pcalibre">%rax</code> to 97, the value to be returned. Instruction <code id="P7000497027000000000000000040B97" data-uri="chapter03.xhtml#P7000497027000000000000000040B97" class="pcalibre1 calibre8 pcalibre">L2</code> then returns. It pops <code id="P7000497027000000000000000040B98" data-uri="chapter03.xhtml#P7000497027000000000000000040B98" class="pcalibre1 calibre8 pcalibre">0x400054e</code> from the stack. In setting the PC to this popped value, control transfers back to instruction <code id="P7000497027000000000000000040B99" data-uri="chapter03.xhtml#P7000497027000000000000000040B99" class="pcalibre1 calibre8 pcalibre">T3</code> of <code id="P7000497027000000000000000040B9A" data-uri="chapter03.xhtml#P7000497027000000000000000040B9A" class="pcalibre1 calibre8 pcalibre">top</code>. The program has successfully completed the call to <code id="P7000497027000000000000000040B9B" data-uri="chapter03.xhtml#P7000497027000000000000000040B9B" class="pcalibre1 calibre8 pcalibre">leaf</code> and returned to <code id="P7000497027000000000000000040B9C" data-uri="chapter03.xhtml#P7000497027000000000000000040B9C" class="pcalibre1 calibre8 pcalibre">top</code>.</p>
<p id="P7000497027000000000000000040B9D" data-uri="chapter03.xhtml#P7000497027000000000000000040B9D" class="pcalibre1 pcalibre calibre2">Instruction <code id="P7000497027000000000000000040B9E" data-uri="chapter03.xhtml#P7000497027000000000000000040B9E" class="pcalibre1 calibre8 pcalibre">T3</code> sets <code id="P7000497027000000000000000040B9F" data-uri="chapter03.xhtml#P7000497027000000000000000040B9F" class="pcalibre1 calibre8 pcalibre">%rax</code> to 194, the value to be returned from <code id="P7000497027000000000000000040BA0" data-uri="chapter03.xhtml#P7000497027000000000000000040BA0" class="pcalibre1 calibre8 pcalibre">top</code>. Instruction <code id="P7000497027000000000000000040BA1" data-uri="chapter03.xhtml#P7000497027000000000000000040BA1" class="pcalibre1 calibre8 pcalibre">T4</code> then returns. It pops <code id="P7000497027000000000000000040BA2" data-uri="chapter03.xhtml#P7000497027000000000000000040BA2" class="pcalibre1 calibre8 pcalibre">0x4000560</code> from the stack, thereby setting the PC to instruction <code id="P7000497027000000000000000040BA3" data-uri="chapter03.xhtml#P7000497027000000000000000040BA3" class="pcalibre1 calibre8 pcalibre">M2</code> of <code id="P7000497027000000000000000040BA4" data-uri="chapter03.xhtml#P7000497027000000000000000040BA4" class="pcalibre1 calibre8 pcalibre">main</code>. The program has successfully completed the call to <code id="P7000497027000000000000000040BA5" data-uri="chapter03.xhtml#P7000497027000000000000000040BA5" class="pcalibre1 calibre8 pcalibre">top</code> and returned to <code id="P7000497027000000000000000040BA6" data-uri="chapter03.xhtml#P7000497027000000000000000040BA6" class="pcalibre1 calibre8 pcalibre">main</code>. We see that the stack pointer has also been restored to <code id="P7000497027000000000000000040BA7" data-uri="chapter03.xhtml#P7000497027000000000000000040BA7" class="pcalibre1 calibre8 pcalibre">0x7fffffffe820</code>, the value it had before the call to <code id="P7000497027000000000000000040BA8" data-uri="chapter03.xhtml#P7000497027000000000000000040BA8" class="pcalibre1 calibre8 pcalibre">top</code>.</p>
<p id="P7000497027000000000000000040BA9" data-uri="chapter03.xhtml#P7000497027000000000000000040BA9" class="pcalibre1 pcalibre calibre2">We can see that this simple mechanism of pushing the return address onto the stack makes it possible for the function to later return to the proper point in the program. The standard call/return mechanism of C (and of most programming languages) conveniently matches the last-in, first-out memory management discipline provided by a stack.</p>
<section id="P700049702700000000000000000294B" data-uri="chapter03.xhtml#P700049702700000000000000000294B" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040BAA" data-uri="chapter03.xhtml#P7000497027000000000000000040BAA" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.32 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000036ED">339</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040BAB" data-uri="chapter03.xhtml#P7000497027000000000000000040BAB">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040BAC" data-uri="chapter03.xhtml#P7000497027000000000000000040BAC">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040BAD" data-uri="chapter03.xhtml#P7000497027000000000000000040BAD"><p id="P7000497027000000000000000040BAE" data-uri="chapter03.xhtml#P7000497027000000000000000040BAE" class="pcalibre calibre3 pcalibre1">The disassembled code for two functions <code id="P7000497027000000000000000040BAF" data-uri="chapter03.xhtml#P7000497027000000000000000040BAF" class="pcalibre1 calibre8 pcalibre">first</code> and <code id="P7000497027000000000000000040BB0" data-uri="chapter03.xhtml#P7000497027000000000000000040BB0" class="pcalibre1 calibre8 pcalibre">last</code> is shown below, along with the code for a call of <code id="P7000497027000000000000000040BB1" data-uri="chapter03.xhtml#P7000497027000000000000000040BB1" class="pcalibre1 calibre8 pcalibre">first</code> by function <code id="P7000497027000000000000000040BB2" data-uri="chapter03.xhtml#P7000497027000000000000000040BB2" class="pcalibre1 calibre8 pcalibre">main</code>:</p>
<pre id="P7000497027000000000000000040BB3" data-uri="chapter03.xhtml#P7000497027000000000000000040BB3" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040BB4" data-uri="chapter03.xhtml#P7000497027000000000000000040BB4" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Disassembly of last(long u, long v</i>)
	<i class="calibre5 pcalibre pcalibre1">u in %rdi, v in %rsi</i>
1	0000000000400540 &lt;last&gt;:
2	400540: 48 89 f8		mov		%rdi,%rax		<i class="calibre5 pcalibre pcalibre1">L1: u</i>
3	400543: 48 0f af c6		imul		%rsi,%rax		<i class="calibre5 pcalibre pcalibre1">L2: u*v</i>
4	400547: c3			retq					<i class="calibre5 pcalibre pcalibre1">L3: Return</i>
	<i class="calibre5 pcalibre pcalibre1">Disassembly of last(long x</i>)
	<i class="calibre5 pcalibre pcalibre1">x in %rdi</i>
5	0000000000400548 &lt;first&gt;:
6	400548: 48 8d 77 01		lea		0x1(%rdi),%rsi		<i class="calibre5 pcalibre pcalibre1">F1: x+1</i>
7	40054c: 48 83 ef 01		sub		$0x1,%rdi		<i class="calibre5 pcalibre pcalibre1">F2: x-1</i>
8	400550: e8 eb ff ff ff		callq		400540 &lt;last&gt;		<i class="calibre5 pcalibre pcalibre1">F3: Call last(x-1,x+1</i>)
9	400555: f3 c3			repz retq				<i class="calibre5 pcalibre pcalibre1">F4: Return</i>
	⋮
10	400560: e8 e3 ff ff ff		callq		400548 &lt;first&gt;		<i class="calibre5 pcalibre pcalibre1">M1: Call first(10</i>)
11	400565: 48 89 c2		mov		%rax,%rdx		<i class="calibre5 pcalibre pcalibre1">M2: Resume</i>
</code></pre>
<p id="P7000497027000000000000000040BB5" data-uri="chapter03.xhtml#P7000497027000000000000000040BB5" class="pcalibre calibre3 pcalibre1">Each of these instructions is given a label, similar to those in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000028B1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.27(a)</span></a>. Starting with the calling of <code id="P7000497027000000000000000040BB6" data-uri="chapter03.xhtml#P7000497027000000000000000040BB6" class="pcalibre1 calibre8 pcalibre">first(10)</code> by <code id="P7000497027000000000000000040BB7" data-uri="chapter03.xhtml#P7000497027000000000000000040BB7" class="pcalibre1 calibre8 pcalibre">main</code>, fill in the following table to trace instruction execution through to the point where the program returns back to <code id="P7000497027000000000000000040BB8" data-uri="chapter03.xhtml#P7000497027000000000000000040BB8" class="pcalibre1 calibre8 pcalibre">main</code>.</p>
<table class="informaltable pcalibre pcalibre1" id="P7000497027000000000000000040BB9" data-uri="chapter03.xhtml#P7000497027000000000000000040BB9">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="3" id="P7000497027000000000000000040BBA" data-uri="chapter03.xhtml#P7000497027000000000000000040BBA" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000295D" title="245" data-uri="chapter03.xhtml#P700049702700000000000000000295D" epub:type="pagebreak"></span>Instruction</th>
<th colspan="5" id="P7000497027000000000000000040BBB" data-uri="chapter03.xhtml#P7000497027000000000000000040BBB" class="calibre18 pcalibre pcalibre1">State values (at beginning)</th>
<th id="P7000497027000000000000000040BBC" data-uri="chapter03.xhtml#P7000497027000000000000000040BBC" class="calibre18 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040BBD" data-uri="chapter03.xhtml#P7000497027000000000000000040BBD" class="calibre18 pcalibre pcalibre1">Label</th>
<th id="P7000497027000000000000000040BBE" data-uri="chapter03.xhtml#P7000497027000000000000000040BBE" class="calibre18 pcalibre pcalibre1">PC</th>
<th id="P7000497027000000000000000040BBF" data-uri="chapter03.xhtml#P7000497027000000000000000040BBF" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P7000497027000000000000000040BC0" data-uri="chapter03.xhtml#P7000497027000000000000000040BC0" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040BC1" data-uri="chapter03.xhtml#P7000497027000000000000000040BC1" class="calibre10 pcalibre pcalibre1">%rdi</code></th>
<th id="P7000497027000000000000000040BC2" data-uri="chapter03.xhtml#P7000497027000000000000000040BC2" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040BC3" data-uri="chapter03.xhtml#P7000497027000000000000000040BC3" class="calibre10 pcalibre pcalibre1">%rsi</code></th>
<th id="P7000497027000000000000000040BC4" data-uri="chapter03.xhtml#P7000497027000000000000000040BC4" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040BC5" data-uri="chapter03.xhtml#P7000497027000000000000000040BC5" class="calibre10 pcalibre pcalibre1">%rax</code></th>
<th id="P7000497027000000000000000040BC6" data-uri="chapter03.xhtml#P7000497027000000000000000040BC6" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040BC7" data-uri="chapter03.xhtml#P7000497027000000000000000040BC7" class="calibre10 pcalibre pcalibre1">%rsp</code></th>
<th id="P7000497027000000000000000040BC8" data-uri="chapter03.xhtml#P7000497027000000000000000040BC8" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000040BC9" data-uri="chapter03.xhtml#P7000497027000000000000000040BC9" class="calibre10 pcalibre pcalibre1">*%rsp</code></th>
<th id="P7000497027000000000000000040BCA" data-uri="chapter03.xhtml#P7000497027000000000000000040BCA" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BCB" data-uri="chapter03.xhtml#P7000497027000000000000000040BCB" class="calibre20 pcalibre pcalibre1">M1</td>
<td id="P7000497027000000000000000040BCC" data-uri="chapter03.xhtml#P7000497027000000000000000040BCC" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040BCD" data-uri="chapter03.xhtml#P7000497027000000000000000040BCD" class="calibre10 pcalibre pcalibre1">0x400560</code></td>
<td id="P7000497027000000000000000040BCE" data-uri="chapter03.xhtml#P7000497027000000000000000040BCE" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040BCF" data-uri="chapter03.xhtml#P7000497027000000000000000040BCF" class="calibre10 pcalibre pcalibre1">callq</code></td>
<td id="P7000497027000000000000000040BD0" data-uri="chapter03.xhtml#P7000497027000000000000000040BD0" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P7000497027000000000000000040BD1" data-uri="chapter03.xhtml#P7000497027000000000000000040BD1" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040BD2" data-uri="chapter03.xhtml#P7000497027000000000000000040BD2" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040BD3" data-uri="chapter03.xhtml#P7000497027000000000000000040BD3" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040BD4" data-uri="chapter03.xhtml#P7000497027000000000000000040BD4" class="calibre10 pcalibre pcalibre1">0x7fffffffe820</code></td>
<td id="P7000497027000000000000000040BD5" data-uri="chapter03.xhtml#P7000497027000000000000000040BD5" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000040BD6" data-uri="chapter03.xhtml#P7000497027000000000000000040BD6" class="calibre20 pcalibre pcalibre1">Call <code id="P7000497027000000000000000040BD7" data-uri="chapter03.xhtml#P7000497027000000000000000040BD7" class="calibre10 pcalibre pcalibre1">first(10)</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BD8" data-uri="chapter03.xhtml#P7000497027000000000000000040BD8" class="calibre20 pcalibre pcalibre1">F1</td>
<td id="P7000497027000000000000000040BD9" data-uri="chapter03.xhtml#P7000497027000000000000000040BD9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDA" data-uri="chapter03.xhtml#P7000497027000000000000000040BDA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDB" data-uri="chapter03.xhtml#P7000497027000000000000000040BDB" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDC" data-uri="chapter03.xhtml#P7000497027000000000000000040BDC" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDD" data-uri="chapter03.xhtml#P7000497027000000000000000040BDD" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDE" data-uri="chapter03.xhtml#P7000497027000000000000000040BDE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BDF" data-uri="chapter03.xhtml#P7000497027000000000000000040BDF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE0" data-uri="chapter03.xhtml#P7000497027000000000000000040BE0" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BE1" data-uri="chapter03.xhtml#P7000497027000000000000000040BE1" class="calibre20 pcalibre pcalibre1">F2</td>
<td id="P7000497027000000000000000040BE2" data-uri="chapter03.xhtml#P7000497027000000000000000040BE2" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE3" data-uri="chapter03.xhtml#P7000497027000000000000000040BE3" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE4" data-uri="chapter03.xhtml#P7000497027000000000000000040BE4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE5" data-uri="chapter03.xhtml#P7000497027000000000000000040BE5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE6" data-uri="chapter03.xhtml#P7000497027000000000000000040BE6" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE7" data-uri="chapter03.xhtml#P7000497027000000000000000040BE7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE8" data-uri="chapter03.xhtml#P7000497027000000000000000040BE8" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BE9" data-uri="chapter03.xhtml#P7000497027000000000000000040BE9" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BEA" data-uri="chapter03.xhtml#P7000497027000000000000000040BEA" class="calibre20 pcalibre pcalibre1">F3</td>
<td id="P7000497027000000000000000040BEB" data-uri="chapter03.xhtml#P7000497027000000000000000040BEB" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BEC" data-uri="chapter03.xhtml#P7000497027000000000000000040BEC" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BED" data-uri="chapter03.xhtml#P7000497027000000000000000040BED" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BEE" data-uri="chapter03.xhtml#P7000497027000000000000000040BEE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BEF" data-uri="chapter03.xhtml#P7000497027000000000000000040BEF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF0" data-uri="chapter03.xhtml#P7000497027000000000000000040BF0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF1" data-uri="chapter03.xhtml#P7000497027000000000000000040BF1" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF2" data-uri="chapter03.xhtml#P7000497027000000000000000040BF2" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BF3" data-uri="chapter03.xhtml#P7000497027000000000000000040BF3" class="calibre20 pcalibre pcalibre1">L1</td>
<td id="P7000497027000000000000000040BF4" data-uri="chapter03.xhtml#P7000497027000000000000000040BF4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF5" data-uri="chapter03.xhtml#P7000497027000000000000000040BF5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF6" data-uri="chapter03.xhtml#P7000497027000000000000000040BF6" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF7" data-uri="chapter03.xhtml#P7000497027000000000000000040BF7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF8" data-uri="chapter03.xhtml#P7000497027000000000000000040BF8" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BF9" data-uri="chapter03.xhtml#P7000497027000000000000000040BF9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BFA" data-uri="chapter03.xhtml#P7000497027000000000000000040BFA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BFB" data-uri="chapter03.xhtml#P7000497027000000000000000040BFB" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040BFC" data-uri="chapter03.xhtml#P7000497027000000000000000040BFC" class="calibre20 pcalibre pcalibre1">L2</td>
<td id="P7000497027000000000000000040BFD" data-uri="chapter03.xhtml#P7000497027000000000000000040BFD" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BFE" data-uri="chapter03.xhtml#P7000497027000000000000000040BFE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040BFF" data-uri="chapter03.xhtml#P7000497027000000000000000040BFF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C00" data-uri="chapter03.xhtml#P7000497027000000000000000040C00" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C01" data-uri="chapter03.xhtml#P7000497027000000000000000040C01" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C02" data-uri="chapter03.xhtml#P7000497027000000000000000040C02" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C03" data-uri="chapter03.xhtml#P7000497027000000000000000040C03" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C04" data-uri="chapter03.xhtml#P7000497027000000000000000040C04" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C05" data-uri="chapter03.xhtml#P7000497027000000000000000040C05" class="calibre20 pcalibre pcalibre1">L3</td>
<td id="P7000497027000000000000000040C06" data-uri="chapter03.xhtml#P7000497027000000000000000040C06" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C07" data-uri="chapter03.xhtml#P7000497027000000000000000040C07" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C08" data-uri="chapter03.xhtml#P7000497027000000000000000040C08" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C09" data-uri="chapter03.xhtml#P7000497027000000000000000040C09" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C0A" data-uri="chapter03.xhtml#P7000497027000000000000000040C0A" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C0B" data-uri="chapter03.xhtml#P7000497027000000000000000040C0B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C0C" data-uri="chapter03.xhtml#P7000497027000000000000000040C0C" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C0D" data-uri="chapter03.xhtml#P7000497027000000000000000040C0D" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C0E" data-uri="chapter03.xhtml#P7000497027000000000000000040C0E" class="calibre20 pcalibre pcalibre1">F4</td>
<td id="P7000497027000000000000000040C0F" data-uri="chapter03.xhtml#P7000497027000000000000000040C0F" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C10" data-uri="chapter03.xhtml#P7000497027000000000000000040C10" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C11" data-uri="chapter03.xhtml#P7000497027000000000000000040C11" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C12" data-uri="chapter03.xhtml#P7000497027000000000000000040C12" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C13" data-uri="chapter03.xhtml#P7000497027000000000000000040C13" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C14" data-uri="chapter03.xhtml#P7000497027000000000000000040C14" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C15" data-uri="chapter03.xhtml#P7000497027000000000000000040C15" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C16" data-uri="chapter03.xhtml#P7000497027000000000000000040C16" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C17" data-uri="chapter03.xhtml#P7000497027000000000000000040C17" class="calibre20 pcalibre pcalibre1">M2</td>
<td id="P7000497027000000000000000040C18" data-uri="chapter03.xhtml#P7000497027000000000000000040C18" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C19" data-uri="chapter03.xhtml#P7000497027000000000000000040C19" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1A" data-uri="chapter03.xhtml#P7000497027000000000000000040C1A" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1B" data-uri="chapter03.xhtml#P7000497027000000000000000040C1B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1C" data-uri="chapter03.xhtml#P7000497027000000000000000040C1C" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1D" data-uri="chapter03.xhtml#P7000497027000000000000000040C1D" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1E" data-uri="chapter03.xhtml#P7000497027000000000000000040C1E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040C1F" data-uri="chapter03.xhtml#P7000497027000000000000000040C1F" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
</div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000029C3" data-uri="chapter03.xhtml#P70004970270000000000000000029C3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040C20" data-uri="chapter03.xhtml#P7000497027000000000000000040C20" epub:type="title"><span class="pcalibre label pcalibre1">3.7.3 </span>Data Transfer</h1></header>
<p id="P7000497027000000000000000040C21" data-uri="chapter03.xhtml#P7000497027000000000000000040C21" class="pcalibre1 pcalibre calibre2">In addition to passing control to a procedure when called, and then back again when the procedure returns, procedure calls may involve passing data as arguments, and returning from a procedure may also involve returning a value. With x86-64, most of these data passing to and from procedures take place via registers. For example, we have already seen numerous examples of functions where arguments are passed in registers <code id="P7000497027000000000000000040C22" data-uri="chapter03.xhtml#P7000497027000000000000000040C22" class="pcalibre1 calibre8 pcalibre">%rdi, %rsi</code>, and others, and where values are returned in register <code id="P7000497027000000000000000040C23" data-uri="chapter03.xhtml#P7000497027000000000000000040C23" class="pcalibre1 calibre8 pcalibre">%rax</code>. When procedure <code id="P7000497027000000000000000040C24" data-uri="chapter03.xhtml#P7000497027000000000000000040C24" class="pcalibre1 calibre8 pcalibre">P</code> calls procedure <code id="P7000497027000000000000000040C25" data-uri="chapter03.xhtml#P7000497027000000000000000040C25" class="pcalibre1 calibre8 pcalibre">Q</code>, the code for <code id="P7000497027000000000000000040C26" data-uri="chapter03.xhtml#P7000497027000000000000000040C26" class="pcalibre1 calibre8 pcalibre">P</code> must first copy the arguments into the proper registers. Similarly, when <code id="P7000497027000000000000000040C27" data-uri="chapter03.xhtml#P7000497027000000000000000040C27" class="pcalibre1 calibre8 pcalibre">Q</code> returns back to <code id="P7000497027000000000000000040C28" data-uri="chapter03.xhtml#P7000497027000000000000000040C28" class="pcalibre1 calibre8 pcalibre">P</code>, the code for <code id="P7000497027000000000000000040C29" data-uri="chapter03.xhtml#P7000497027000000000000000040C29" class="pcalibre1 calibre8 pcalibre">P</code> can access the returned value in register <code id="P7000497027000000000000000040C2A" data-uri="chapter03.xhtml#P7000497027000000000000000040C2A" class="pcalibre1 calibre8 pcalibre">%rax</code>. In this section, we explore these conventions in greater detail.</p>
<p id="P7000497027000000000000000040C2B" data-uri="chapter03.xhtml#P7000497027000000000000000040C2B" class="pcalibre1 pcalibre calibre2">With x86-64, up to six integral (i.e., integer and pointer) arguments can be passed via registers. The registers are used in a specified order, with the name used for a register depending on the size of the data type being passed. These are shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000029D0"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.28</span></a>. Arguments are allocated to these registers according to their</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000029D0" data-uri="chapter03.xhtml#P70004970270000000000000000029D0">
<table id="P7000497027000000000000000040C2C" data-uri="chapter03.xhtml#P7000497027000000000000000040C2C" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th rowspan="2" id="P7000497027000000000000000040C2D" data-uri="chapter03.xhtml#P7000497027000000000000000040C2D" class="calibre18 pcalibre pcalibre1">Operand size (bits)</th>
<th colspan="6" id="P7000497027000000000000000040C2E" data-uri="chapter03.xhtml#P7000497027000000000000000040C2E" class="calibre18 pcalibre pcalibre1">Argument number</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040C2F" data-uri="chapter03.xhtml#P7000497027000000000000000040C2F" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000040C30" data-uri="chapter03.xhtml#P7000497027000000000000000040C30" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000040C31" data-uri="chapter03.xhtml#P7000497027000000000000000040C31" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000040C32" data-uri="chapter03.xhtml#P7000497027000000000000000040C32" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000040C33" data-uri="chapter03.xhtml#P7000497027000000000000000040C33" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000040C34" data-uri="chapter03.xhtml#P7000497027000000000000000040C34" class="calibre18 pcalibre pcalibre1">6</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C35" data-uri="chapter03.xhtml#P7000497027000000000000000040C35" class="calibre20 pcalibre pcalibre1">64</td>
<td id="P7000497027000000000000000040C36" data-uri="chapter03.xhtml#P7000497027000000000000000040C36" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C37" data-uri="chapter03.xhtml#P7000497027000000000000000040C37" class="calibre10 pcalibre pcalibre1">%rdi</code></td>
<td id="P7000497027000000000000000040C38" data-uri="chapter03.xhtml#P7000497027000000000000000040C38" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C39" data-uri="chapter03.xhtml#P7000497027000000000000000040C39" class="calibre10 pcalibre pcalibre1">%rsi</code></td>
<td id="P7000497027000000000000000040C3A" data-uri="chapter03.xhtml#P7000497027000000000000000040C3A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C3B" data-uri="chapter03.xhtml#P7000497027000000000000000040C3B" class="calibre10 pcalibre pcalibre1">%rdx</code></td>
<td id="P7000497027000000000000000040C3C" data-uri="chapter03.xhtml#P7000497027000000000000000040C3C" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C3D" data-uri="chapter03.xhtml#P7000497027000000000000000040C3D" class="calibre10 pcalibre pcalibre1">%rcx</code></td>
<td id="P7000497027000000000000000040C3E" data-uri="chapter03.xhtml#P7000497027000000000000000040C3E" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C3F" data-uri="chapter03.xhtml#P7000497027000000000000000040C3F" class="calibre10 pcalibre pcalibre1">%r8</code></td>
<td id="P7000497027000000000000000040C40" data-uri="chapter03.xhtml#P7000497027000000000000000040C40" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C41" data-uri="chapter03.xhtml#P7000497027000000000000000040C41" class="calibre10 pcalibre pcalibre1">%r9</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C42" data-uri="chapter03.xhtml#P7000497027000000000000000040C42" class="calibre20 pcalibre pcalibre1">32</td>
<td id="P7000497027000000000000000040C43" data-uri="chapter03.xhtml#P7000497027000000000000000040C43" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C44" data-uri="chapter03.xhtml#P7000497027000000000000000040C44" class="calibre10 pcalibre pcalibre1">%edi</code></td>
<td id="P7000497027000000000000000040C45" data-uri="chapter03.xhtml#P7000497027000000000000000040C45" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C46" data-uri="chapter03.xhtml#P7000497027000000000000000040C46" class="calibre10 pcalibre pcalibre1">%esi</code></td>
<td id="P7000497027000000000000000040C47" data-uri="chapter03.xhtml#P7000497027000000000000000040C47" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C48" data-uri="chapter03.xhtml#P7000497027000000000000000040C48" class="calibre10 pcalibre pcalibre1">%edx</code></td>
<td id="P7000497027000000000000000040C49" data-uri="chapter03.xhtml#P7000497027000000000000000040C49" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C4A" data-uri="chapter03.xhtml#P7000497027000000000000000040C4A" class="calibre10 pcalibre pcalibre1">%ecx</code></td>
<td id="P7000497027000000000000000040C4B" data-uri="chapter03.xhtml#P7000497027000000000000000040C4B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C4C" data-uri="chapter03.xhtml#P7000497027000000000000000040C4C" class="calibre10 pcalibre pcalibre1">%r8d</code></td>
<td id="P7000497027000000000000000040C4D" data-uri="chapter03.xhtml#P7000497027000000000000000040C4D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C4E" data-uri="chapter03.xhtml#P7000497027000000000000000040C4E" class="calibre10 pcalibre pcalibre1">%r9d</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C4F" data-uri="chapter03.xhtml#P7000497027000000000000000040C4F" class="calibre20 pcalibre pcalibre1">16</td>
<td id="P7000497027000000000000000040C50" data-uri="chapter03.xhtml#P7000497027000000000000000040C50" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C51" data-uri="chapter03.xhtml#P7000497027000000000000000040C51" class="calibre10 pcalibre pcalibre1">%di</code></td>
<td id="P7000497027000000000000000040C52" data-uri="chapter03.xhtml#P7000497027000000000000000040C52" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C53" data-uri="chapter03.xhtml#P7000497027000000000000000040C53" class="calibre10 pcalibre pcalibre1">%si</code></td>
<td id="P7000497027000000000000000040C54" data-uri="chapter03.xhtml#P7000497027000000000000000040C54" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C55" data-uri="chapter03.xhtml#P7000497027000000000000000040C55" class="calibre10 pcalibre pcalibre1">%dx</code></td>
<td id="P7000497027000000000000000040C56" data-uri="chapter03.xhtml#P7000497027000000000000000040C56" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C57" data-uri="chapter03.xhtml#P7000497027000000000000000040C57" class="calibre10 pcalibre pcalibre1">%cx</code></td>
<td id="P7000497027000000000000000040C58" data-uri="chapter03.xhtml#P7000497027000000000000000040C58" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C59" data-uri="chapter03.xhtml#P7000497027000000000000000040C59" class="calibre10 pcalibre pcalibre1">%r8w</code></td>
<td id="P7000497027000000000000000040C5A" data-uri="chapter03.xhtml#P7000497027000000000000000040C5A" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C5B" data-uri="chapter03.xhtml#P7000497027000000000000000040C5B" class="calibre10 pcalibre pcalibre1">%r9w</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040C5C" data-uri="chapter03.xhtml#P7000497027000000000000000040C5C" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000040C5D" data-uri="chapter03.xhtml#P7000497027000000000000000040C5D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C5E" data-uri="chapter03.xhtml#P7000497027000000000000000040C5E" class="calibre10 pcalibre pcalibre1">%dil</code></td>
<td id="P7000497027000000000000000040C5F" data-uri="chapter03.xhtml#P7000497027000000000000000040C5F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C60" data-uri="chapter03.xhtml#P7000497027000000000000000040C60" class="calibre10 pcalibre pcalibre1">%sil</code></td>
<td id="P7000497027000000000000000040C61" data-uri="chapter03.xhtml#P7000497027000000000000000040C61" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C62" data-uri="chapter03.xhtml#P7000497027000000000000000040C62" class="calibre10 pcalibre pcalibre1">%dl</code></td>
<td id="P7000497027000000000000000040C63" data-uri="chapter03.xhtml#P7000497027000000000000000040C63" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C64" data-uri="chapter03.xhtml#P7000497027000000000000000040C64" class="calibre10 pcalibre pcalibre1">%cl</code></td>
<td id="P7000497027000000000000000040C65" data-uri="chapter03.xhtml#P7000497027000000000000000040C65" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C66" data-uri="chapter03.xhtml#P7000497027000000000000000040C66" class="calibre10 pcalibre pcalibre1">%r8b</code></td>
<td id="P7000497027000000000000000040C67" data-uri="chapter03.xhtml#P7000497027000000000000000040C67" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040C68" data-uri="chapter03.xhtml#P7000497027000000000000000040C68" class="calibre10 pcalibre pcalibre1">%r9b</code></td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040C69" data-uri="chapter03.xhtml#P7000497027000000000000000040C69" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040C6A" data-uri="chapter03.xhtml#P7000497027000000000000000040C6A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.28 </span>Registers for passing function arguments.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040C6B" data-uri="chapter03.xhtml#P7000497027000000000000000040C6B"><p id="P7000497027000000000000000040C6C" data-uri="chapter03.xhtml#P7000497027000000000000000040C6C" class="pcalibre calibre3 pcalibre1">The registers are used in a specified order and named according to the argument sizes.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040C6D" data-uri="chapter03.xhtml#P7000497027000000000000000040C6D"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002A13" title="246" data-uri="chapter03.xhtml#P7000497027000000000000000002A13" epub:type="pagebreak"></span>ordering in the argument list. Arguments smaller than 64 bits can be accessed using the appropriate subsection of the 64-bit register. For example, if the first argument is 32 bits, it can be accessed as <code id="P7000497027000000000000000040C6E" data-uri="chapter03.xhtml#P7000497027000000000000000040C6E" class="pcalibre1 calibre8 pcalibre">%edi</code>.</p>
<p id="P7000497027000000000000000040C6F" data-uri="chapter03.xhtml#P7000497027000000000000000040C6F" class="pcalibre1 pcalibre calibre2">When a function has more than six integral arguments, the other ones are passed on the stack. Assume that procedure <code id="P7000497027000000000000000040C70" data-uri="chapter03.xhtml#P7000497027000000000000000040C70" class="pcalibre1 calibre8 pcalibre">P</code> calls procedure <code id="P7000497027000000000000000040C71" data-uri="chapter03.xhtml#P7000497027000000000000000040C71" class="pcalibre1 calibre8 pcalibre">Q</code> with <var class="calibre5 pcalibre pcalibre1">n</var> integral arguments, such that <var class="calibre5 pcalibre pcalibre1">n</var> &gt; 6. Then the code for <code id="P7000497027000000000000000040C72" data-uri="chapter03.xhtml#P7000497027000000000000000040C72" class="pcalibre1 calibre8 pcalibre">P</code> must allocate a stack frame with enough storage for arguments 7 through <var class="calibre5 pcalibre pcalibre1">n</var>, as illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a>. It copies arguments 1–6 into the appropriate registers, and it puts arguments 7 through <var class="calibre5 pcalibre pcalibre1">n</var> onto the stack, with argument 7 at the top of the stack. When passing parameters on the stack, all data sizes are rounded up to be multiples of eight. With the arguments in place, the program can then execute a <code id="P7000497027000000000000000040C73" data-uri="chapter03.xhtml#P7000497027000000000000000040C73" class="pcalibre1 calibre8 pcalibre">call</code> instruction to transfer control to procedure <code id="P7000497027000000000000000040C74" data-uri="chapter03.xhtml#P7000497027000000000000000040C74" class="pcalibre1 calibre8 pcalibre">Q</code>. Procedure <code id="P7000497027000000000000000040C75" data-uri="chapter03.xhtml#P7000497027000000000000000040C75" class="pcalibre1 calibre8 pcalibre">Q</code> can access its arguments via registers and possibly from the stack. If <code id="P7000497027000000000000000040C76" data-uri="chapter03.xhtml#P7000497027000000000000000040C76" class="pcalibre1 calibre8 pcalibre">Q</code>, in turn, calls some function that has more than six arguments, it can allocate space within its stack frame for these, as is illustrated by the area labeled "Argument build area" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a>.</p>
<p id="P7000497027000000000000000040C77" data-uri="chapter03.xhtml#P7000497027000000000000000040C77" class="pcalibre1 pcalibre calibre2">As an example of argument passing, consider the C function <code id="P7000497027000000000000000040C78" data-uri="chapter03.xhtml#P7000497027000000000000000040C78" class="pcalibre1 calibre8 pcalibre">proc</code> shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A38"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.29(a)</span></a>. This function has eight arguments, including integers with different numbers of bytes (8, 4, 2, and 1), as well as different types of pointers, each of which is 8 bytes.</p>
<p id="P7000497027000000000000000040C79" data-uri="chapter03.xhtml#P7000497027000000000000000040C79" class="pcalibre1 pcalibre calibre2">The assembly code generated for <code id="P7000497027000000000000000040C7A" data-uri="chapter03.xhtml#P7000497027000000000000000040C7A" class="pcalibre1 calibre8 pcalibre">proc</code> is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A38"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.29(b)</span></a>. The first six arguments are passed in registers. The last two are passed on the stack, as documented by the diagram of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A44"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.30</span></a>. This diagram shows the state of the stack during the execution of <code id="P7000497027000000000000000040C7B" data-uri="chapter03.xhtml#P7000497027000000000000000040C7B" class="pcalibre1 calibre8 pcalibre">proc</code>. We can see that the return address was pushed onto the stack as part of the procedure call. The two arguments, therefore, are at positions 8 and 16 relative to the stack pointer. Within the code, we can see that different versions of the <span class="smallcaps pcalibre pcalibre1">add </span>instruction are used according to the sizes of the operands: <code id="P7000497027000000000000000040C7C" data-uri="chapter03.xhtml#P7000497027000000000000000040C7C" class="pcalibre1 calibre8 pcalibre">addq</code> for <code id="P7000497027000000000000000040C7D" data-uri="chapter03.xhtml#P7000497027000000000000000040C7D" class="pcalibre1 calibre8 pcalibre">a1 (long), addl</code> for <code id="P7000497027000000000000000040C7E" data-uri="chapter03.xhtml#P7000497027000000000000000040C7E" class="pcalibre1 calibre8 pcalibre">a2 (int), addw</code> for <code id="P7000497027000000000000000040C7F" data-uri="chapter03.xhtml#P7000497027000000000000000040C7F" class="pcalibre1 calibre8 pcalibre">a3 (short)</code>, and <code id="P7000497027000000000000000040C80" data-uri="chapter03.xhtml#P7000497027000000000000000040C80" class="pcalibre1 calibre8 pcalibre">addb</code> for <code id="P7000497027000000000000000040C81" data-uri="chapter03.xhtml#P7000497027000000000000000040C81" class="pcalibre1 calibre8 pcalibre">a4</code> (char). Observe that the <code id="P7000497027000000000000000040C82" data-uri="chapter03.xhtml#P7000497027000000000000000040C82" class="pcalibre1 calibre8 pcalibre">movl</code> instruction of line 6 reads 4 bytes from memory; the following <code id="P7000497027000000000000000040C83" data-uri="chapter03.xhtml#P7000497027000000000000000040C83" class="pcalibre1 calibre8 pcalibre">addb</code> instruction only makes use of the low-order byte.</p>
<section id="P7000497027000000000000000002A2A" data-uri="chapter03.xhtml#P7000497027000000000000000002A2A" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040C84" data-uri="chapter03.xhtml#P7000497027000000000000000040C84" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.33 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000036ED">339</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040C85" data-uri="chapter03.xhtml#P7000497027000000000000000040C85">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040C86" data-uri="chapter03.xhtml#P7000497027000000000000000040C86">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040C87" data-uri="chapter03.xhtml#P7000497027000000000000000040C87"><p id="P7000497027000000000000000040C88" data-uri="chapter03.xhtml#P7000497027000000000000000040C88" class="pcalibre calibre3 pcalibre1">A C function <code id="P7000497027000000000000000040C89" data-uri="chapter03.xhtml#P7000497027000000000000000040C89" class="pcalibre1 calibre8 pcalibre">pro cprob</code> has four arguments <code id="P7000497027000000000000000040C8A" data-uri="chapter03.xhtml#P7000497027000000000000000040C8A" class="pcalibre1 calibre8 pcalibre">u, a, v</code>, and <code id="P7000497027000000000000000040C8B" data-uri="chapter03.xhtml#P7000497027000000000000000040C8B" class="pcalibre1 calibre8 pcalibre">b</code>. Each is either a signed number or a pointer to a signed number, where the numbers have different sizes. The function has the following body:</p>
<pre id="P7000497027000000000000000040C8C" data-uri="chapter03.xhtml#P7000497027000000000000000040C8C" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040C8D" data-uri="chapter03.xhtml#P7000497027000000000000000040C8D" class="calibre10 pcalibre pcalibre1">
*u += a;
*v += b;
return sizeof(a) + sizeof(b);
</code></pre>
<p id="P7000497027000000000000000040C8E" data-uri="chapter03.xhtml#P7000497027000000000000000040C8E" class="pcalibre calibre3 pcalibre1">It compiles to the following x86-64 code:</p>
<pre id="P7000497027000000000000000040C8F" data-uri="chapter03.xhtml#P7000497027000000000000000040C8F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040C90" data-uri="chapter03.xhtml#P7000497027000000000000000040C90" class="calibre10 pcalibre pcalibre1">
1	procprob:
2	movslq %edi, %rdi
3	addq %rdi, (%rdx)
4	addb %sil, (%rcx)
</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002A38" data-uri="chapter03.xhtml#P7000497027000000000000000002A38">
<p id="P7000497027000000000000000040C91" data-uri="chapter03.xhtml#P7000497027000000000000000040C91" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002A3A" title="247" data-uri="chapter03.xhtml#P7000497027000000000000000002A3A" epub:type="pagebreak"></span>(a) C code</p>
<pre id="P7000497027000000000000000040C92" data-uri="chapter03.xhtml#P7000497027000000000000000040C92" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040C93" data-uri="chapter03.xhtml#P7000497027000000000000000040C93" class="calibre10 pcalibre pcalibre1">
void proc(long a1, long *a1p,
	  int a2, int *a2p,
	  short a3, short *a3p,
	  char a4, char *a4p)
{
	*a1p += a1;
	*a2p += a2;
	*a3p += a3;
	*a4p += a4;
}
</code></pre>
<p id="P7000497027000000000000000040C94" data-uri="chapter03.xhtml#P7000497027000000000000000040C94" class="pcalibre calibre3 pcalibre1">(b) Generated assembly code</p>
<pre id="P7000497027000000000000000040C95" data-uri="chapter03.xhtml#P7000497027000000000000000040C95" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040C96" data-uri="chapter03.xhtml#P7000497027000000000000000040C96" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">void proc(a1, a1p, a2, a2p, a3, a3p, a4, a4p</i>)
	<i class="calibre5 pcalibre pcalibre1">Arguments passed as follows:</i>
	  a1 in %rdi (64 bits)
	  a1p in %rsi (64 bits)
	  a2 in %edx (32 bits)
	  a2p in %rcx (64 bits)
	  a3 in %r8w (16 bits)
	  a3p in %r9 (64 bits)
	  a4 at %rsp+8 ( 8 bits)
	  a4p at %rsp+16 (64 bits)
1	proc:
2	movq	16(%rsp), %rax	<i class="calibre5 pcalibre pcalibre1">Fetch a4p (64 bits</i>)
3	addq	%rdi, (%rsi)	<i class="calibre5 pcalibre pcalibre1">*a1p += a1 (64 bits</i>)
4	addl	%edx, (%rcx)	<i class="calibre5 pcalibre pcalibre1">*a2p += a2 (32 bits</i>)
5	addw	%r8w, (%r9)	<i class="calibre5 pcalibre pcalibre1">*a3p += a3 (16 bits</i>)
6	movl	8(%rsp), %edx	<i class="calibre5 pcalibre pcalibre1">Fetch a4 (8 bits</i>)
7	addb	%dl, (%rax)	<i class="calibre5 pcalibre pcalibre1">*a4p += a4 (8 bits</i>)
8	ret			<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P7000497027000000000000000040C97" data-uri="chapter03.xhtml#P7000497027000000000000000040C97" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040C98" data-uri="chapter03.xhtml#P7000497027000000000000000040C98" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.29 </span>Example of function with multiple arguments of different types.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040C99" data-uri="chapter03.xhtml#P7000497027000000000000000040C99"><p id="P7000497027000000000000000040C9A" data-uri="chapter03.xhtml#P7000497027000000000000000040C9A" class="pcalibre calibre3 pcalibre1">Arguments 1–6 are passed in registers, while arguments 7–8 are passed on the stack.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002A44" data-uri="chapter03.xhtml#P7000497027000000000000000002A44">
<img alt="A diagram of a stack frame structure has three sections: 16 containing a4p on top; 8 containing a small section with a4 in the center; and 0 (stack pointer %rsp) containing Return address on bottom." id="P7000497027000000000000000040C9B" data-uri="P700049702700000000000000000B6B8" src="../images/p247-1.png" class="calibre90 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000040C9C" data-uri="chapter03.xhtml#P7000497027000000000000000040C9C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040C9D" data-uri="chapter03.xhtml#P7000497027000000000000000040C9D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.30 </span>Stack frame structure for function <code id="P7000497027000000000000000040C9E" data-uri="chapter03.xhtml#P7000497027000000000000000040C9E" class="pcalibre1 calibre8 pcalibre">proc</code>.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040C9F" data-uri="chapter03.xhtml#P7000497027000000000000000040C9F"><p id="P7000497027000000000000000040CA0" data-uri="chapter03.xhtml#P7000497027000000000000000040CA0" class="pcalibre calibre3 pcalibre1">Arguments <code id="P7000497027000000000000000040CA1" data-uri="chapter03.xhtml#P7000497027000000000000000040CA1" class="pcalibre1 calibre8 pcalibre">a</code>4 and <code id="P7000497027000000000000000040CA2" data-uri="chapter03.xhtml#P7000497027000000000000000040CA2" class="pcalibre1 calibre8 pcalibre">a4p</code> are passed on the stack.</p></div></figcaption>
</figure>
<pre id="P7000497027000000000000000040CA3" data-uri="chapter03.xhtml#P7000497027000000000000000040CA3" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040CA4" data-uri="chapter03.xhtml#P7000497027000000000000000040CA4" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002A4F" title="248" data-uri="chapter03.xhtml#P7000497027000000000000000002A4F" epub:type="pagebreak"></span>5 movl $6, %eax
6 ret
</code></pre>
<p id="P7000497027000000000000000040CA5" data-uri="chapter03.xhtml#P7000497027000000000000000040CA5" class="pcalibre calibre3 pcalibre1">Determine a valid ordering and types of the four parameters. There are two correct answers.</p>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002A51" data-uri="chapter03.xhtml#P7000497027000000000000000002A51" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040CA6" data-uri="chapter03.xhtml#P7000497027000000000000000040CA6" epub:type="title"><span class="pcalibre label pcalibre1">3.7.4 </span>Local Storage on the Stack</h1></header>
<p id="P7000497027000000000000000040CA7" data-uri="chapter03.xhtml#P7000497027000000000000000040CA7" class="pcalibre1 pcalibre calibre2">Most of the procedure examples we have seen so far did not require any local storage beyond what could be held in registers. At times, however, local data must be stored in memory. Common cases of this include these:</p>
<ul id="P7000497027000000000000000040CA8" data-uri="chapter03.xhtml#P7000497027000000000000000040CA8" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000040CA9" data-uri="chapter03.xhtml#P7000497027000000000000000040CA9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CAA" data-uri="chapter03.xhtml#P7000497027000000000000000040CAA" class="pcalibre calibre3 pcalibre1">There are not enough registers to hold all of the local data.</p></li>
<li id="P7000497027000000000000000040CAB" data-uri="chapter03.xhtml#P7000497027000000000000000040CAB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CAC" data-uri="chapter03.xhtml#P7000497027000000000000000040CAC" class="pcalibre calibre3 pcalibre1">The address operator `<code id="P7000497027000000000000000040CAD" data-uri="chapter03.xhtml#P7000497027000000000000000040CAD" class="pcalibre1 calibre8 pcalibre">&amp;</code>' is applied to a local variable, and hence we must be able to generate an address for it.</p></li>
<li id="P7000497027000000000000000040CAE" data-uri="chapter03.xhtml#P7000497027000000000000000040CAE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CAF" data-uri="chapter03.xhtml#P7000497027000000000000000040CAF" class="pcalibre calibre3 pcalibre1">Some of the local variables are arrays or structures and hence must be accessed by array or structure references. We will discuss this possibility when we describe how arrays and structures are allocated.</p></li>
</ul>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040CB0" data-uri="chapter03.xhtml#P7000497027000000000000000040CB0">Typically, a procedure allocates space on the stack frame by decrementing the stack pointer. This results in the portion of the stack frame labeled "Local variables" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a>.</p>

<p id="P7000497027000000000000000040CB1" data-uri="chapter03.xhtml#P7000497027000000000000000040CB1" class="pcalibre1 pcalibre calibre2">As an example of the handling of the address operator, consider the two functions shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A74"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.31(a)</span></a>. The function <code id="P7000497027000000000000000040CB2" data-uri="chapter03.xhtml#P7000497027000000000000000040CB2" class="pcalibre1 calibre8 pcalibre">swap_add</code> swaps the two values designated by pointers <code id="P7000497027000000000000000040CB3" data-uri="chapter03.xhtml#P7000497027000000000000000040CB3" class="pcalibre1 calibre8 pcalibre">xp</code> and <code id="P7000497027000000000000000040CB4" data-uri="chapter03.xhtml#P7000497027000000000000000040CB4" class="pcalibre1 calibre8 pcalibre">yp</code> and also returns the sum of the two values. The function <code id="P7000497027000000000000000040CB5" data-uri="chapter03.xhtml#P7000497027000000000000000040CB5" class="pcalibre1 calibre8 pcalibre">caller</code> creates pointers to local variables <code id="P7000497027000000000000000040CB6" data-uri="chapter03.xhtml#P7000497027000000000000000040CB6" class="pcalibre1 calibre8 pcalibre">arg1</code> and <code id="P7000497027000000000000000040CB7" data-uri="chapter03.xhtml#P7000497027000000000000000040CB7" class="pcalibre1 calibre8 pcalibre">arg2</code> and passes these to <code id="P7000497027000000000000000040CB8" data-uri="chapter03.xhtml#P7000497027000000000000000040CB8" class="pcalibre1 calibre8 pcalibre">swap_add</code>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A74"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.31(b)</span></a> shows how <code id="P7000497027000000000000000040CB9" data-uri="chapter03.xhtml#P7000497027000000000000000040CB9" class="pcalibre1 calibre8 pcalibre">caller</code> uses a stack frame to implement these local variables. The code for <code id="P7000497027000000000000000040CBA" data-uri="chapter03.xhtml#P7000497027000000000000000040CBA" class="pcalibre1 calibre8 pcalibre">caller</code> starts by decrementing the stack pointer by 16; this effectively allocates 16 bytes on the stack. Letting <var class="calibre5 pcalibre pcalibre1">S</var> denote the value of the stack pointer, we can see that the code computes <code id="P7000497027000000000000000040CBB" data-uri="chapter03.xhtml#P7000497027000000000000000040CBB" class="pcalibre1 calibre8 pcalibre">&amp;arg2</code> as <var class="calibre5 pcalibre pcalibre1">S</var> + 8 (line 5), <code id="P7000497027000000000000000040CBC" data-uri="chapter03.xhtml#P7000497027000000000000000040CBC" class="pcalibre1 calibre8 pcalibre">&amp;arg1</code> as <var class="calibre5 pcalibre pcalibre1">S</var> (line 6). We can therefore infer that local variables <code id="P7000497027000000000000000040CBD" data-uri="chapter03.xhtml#P7000497027000000000000000040CBD" class="pcalibre1 calibre8 pcalibre">arg1</code> and <code id="P7000497027000000000000000040CBE" data-uri="chapter03.xhtml#P7000497027000000000000000040CBE" class="pcalibre1 calibre8 pcalibre">arg2</code> are stored within the stack frame at offsets 0 and 8 relative to the stack pointer. When the call to <code id="P7000497027000000000000000040CBF" data-uri="chapter03.xhtml#P7000497027000000000000000040CBF" class="pcalibre1 calibre8 pcalibre">swap_add</code> completes, the code for <code id="P7000497027000000000000000040CC0" data-uri="chapter03.xhtml#P7000497027000000000000000040CC0" class="pcalibre1 calibre8 pcalibre">caller</code> then retrieves the two values from the stack (lines 8–9), computes their difference, and multiplies this by the value returned by <code id="P7000497027000000000000000040CC1" data-uri="chapter03.xhtml#P7000497027000000000000000040CC1" class="pcalibre1 calibre8 pcalibre">swap_add</code> in register <code id="P7000497027000000000000000040CC2" data-uri="chapter03.xhtml#P7000497027000000000000000040CC2" class="pcalibre1 calibre8 pcalibre">%rax</code> (line 10). Finally, the function deallocates its stack frame by incrementing the stack pointer by 16 (line 11.) We can see with this example that the run-time stack provides a simple mechanism for allocating local storage when it is required and deallocating it when the function completes.</p>

<p id="P7000497027000000000000000040CC3" data-uri="chapter03.xhtml#P7000497027000000000000000040CC3" class="pcalibre1 pcalibre calibre2">As a more complex example, the function <code id="P7000497027000000000000000040CC4" data-uri="chapter03.xhtml#P7000497027000000000000000040CC4" class="pcalibre1 calibre8 pcalibre">call_proc</code>, shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A89"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.32</span></a>, illustrates many aspects of the x86-64 stack discipline. Despite the length of this example, it is worth studying carefully. It shows a function that must allocate storage on the stack for local variables, as well as to pass values to the 8-argument function <code id="P7000497027000000000000000040CC5" data-uri="chapter03.xhtml#P7000497027000000000000000040CC5" class="pcalibre1 calibre8 pcalibre">proc</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A38"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.29</span></a>). The function creates a stack frame, diagrammed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A96"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.33</span></a>.</p>

<p id="P7000497027000000000000000040CC6" data-uri="chapter03.xhtml#P7000497027000000000000000040CC6" class="pcalibre1 pcalibre calibre2">Looking at the assembly code for <code id="P7000497027000000000000000040CC7" data-uri="chapter03.xhtml#P7000497027000000000000000040CC7" class="pcalibre1 calibre8 pcalibre">call_proc</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A89"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.32(b)</span></a>), we can see that a large portion of the code (lines 2–15) involves preparing to call function</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002A74" data-uri="chapter03.xhtml#P7000497027000000000000000002A74">
<p id="P7000497027000000000000000040CC8" data-uri="chapter03.xhtml#P7000497027000000000000000040CC8" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002A76" title="249" data-uri="chapter03.xhtml#P7000497027000000000000000002A76" epub:type="pagebreak"></span>(a) Code for swap_add and calling function</p>
<pre id="P7000497027000000000000000040CC9" data-uri="chapter03.xhtml#P7000497027000000000000000040CC9" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040CCA" data-uri="chapter03.xhtml#P7000497027000000000000000040CCA" class="calibre10 pcalibre pcalibre1">
long swap_add(long *xp, long *yp)
{
	long x = *xp;
	long y = *yp;
	*xp = y;
	*yp = x;
	return x + y;
}
long caller()
{
	long arg1 = 534;
	long arg2 = 1057;
	long sum = swap_add(&amp;arg1, &amp;arg2);
	long diff = arg1 - arg2;
	return sum * diff;
}
</code></pre>
<p id="P7000497027000000000000000040CCB" data-uri="chapter03.xhtml#P7000497027000000000000000040CCB" class="pcalibre1 pcalibre calibre2">(b) Generated assembly code for calling function</p>
<pre id="P7000497027000000000000000040CCC" data-uri="chapter03.xhtml#P7000497027000000000000000040CCC" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040CCD" data-uri="chapter03.xhtml#P7000497027000000000000000040CCD" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long caller()</i>
1	caller:
2	subq	$16, %rsp	<i class="calibre5 pcalibre pcalibre1">Allocate 16 bytes for stack frame</i>
3	movq	$534, (%rsp)	<i class="calibre5 pcalibre pcalibre1">Store 534 in arg1</i>
4	movq	$1057, 8(%rsp)	<i class="calibre5 pcalibre pcalibre1">Store 1057 in arg2</i>
5	leaq	8(%rsp), %rsi	<i class="calibre5 pcalibre pcalibre1">Compute &amp;arg2 as second argument</i>
6	movq	%rsp, %rdi	<i class="calibre5 pcalibre pcalibre1">Compute &amp;arg1 as first argument</i>
7	call	swap_add	<i class="calibre5 pcalibre pcalibre1">Call swap_add(&amp;arg1, &amp;arg2</i>)
8	movq	(%rsp), %rdx	<i class="calibre5 pcalibre pcalibre1">Get arg1</i>
9	subq	8(%rsp), %rdx	<i class="calibre5 pcalibre pcalibre1">Compute diff = arg1 - arg2</i>
10	imulq	%rdx, %rax	<i class="calibre5 pcalibre pcalibre1">Compute sum * diff</i>
11	addq	$16, %rsp	<i class="calibre5 pcalibre pcalibre1">Deallocate stack frame</i>
12	ret <i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P7000497027000000000000000040CCE" data-uri="chapter03.xhtml#P7000497027000000000000000040CCE" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040CCF" data-uri="chapter03.xhtml#P7000497027000000000000000040CCF" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.31 </span>Example of procedure definition and call.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040CD0" data-uri="chapter03.xhtml#P7000497027000000000000000040CD0"><p id="P7000497027000000000000000040CD1" data-uri="chapter03.xhtml#P7000497027000000000000000040CD1" class="pcalibre calibre3 pcalibre1">The calling code must allocate a stack frame due to the presence of address operators.</p></div></figcaption>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040CD2" data-uri="chapter03.xhtml#P7000497027000000000000000040CD2"><code id="P7000497027000000000000000040CD3" data-uri="chapter03.xhtml#P7000497027000000000000000040CD3" class="pcalibre1 calibre8 pcalibre">proc</code>. This includes setting up the stack frame for the local variables and function parameters, and for loading function arguments into registers. As <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A96"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.33</span></a> shows, local variables <code id="P7000497027000000000000000040CD4" data-uri="chapter03.xhtml#P7000497027000000000000000040CD4" class="pcalibre1 calibre8 pcalibre">x1–x4</code> are allocated on the stack and have different sizes. Expressing their locations as offsets relative to the stack pointer, they occupy bytes 24–31 (<code id="P7000497027000000000000000040CD5" data-uri="chapter03.xhtml#P7000497027000000000000000040CD5" class="pcalibre1 calibre8 pcalibre">x1</code>), 20–23 (<code id="P7000497027000000000000000040CD6" data-uri="chapter03.xhtml#P7000497027000000000000000040CD6" class="pcalibre1 calibre8 pcalibre">x2</code>), 18–19 (<code id="P7000497027000000000000000040CD7" data-uri="chapter03.xhtml#P7000497027000000000000000040CD7" class="pcalibre1 calibre8 pcalibre">x3</code>), and 17 (<code id="P7000497027000000000000000040CD8" data-uri="chapter03.xhtml#P7000497027000000000000000040CD8" class="pcalibre1 calibre8 pcalibre">s3</code>). Pointers to these locations are generated by <code id="P7000497027000000000000000040CD9" data-uri="chapter03.xhtml#P7000497027000000000000000040CD9" class="pcalibre1 calibre8 pcalibre">leaq</code> instructions (lines 7, 10, 12, and 14). Arguments 7 (with value 4) and 8 (a pointer to the location of <code id="P7000497027000000000000000040CDA" data-uri="chapter03.xhtml#P7000497027000000000000000040CDA" class="pcalibre1 calibre8 pcalibre">x4</code>) are stored on the stack at offsets 0 and 8 relative to the stack pointer.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002A89" data-uri="chapter03.xhtml#P7000497027000000000000000002A89">
<p id="P7000497027000000000000000040CDB" data-uri="chapter03.xhtml#P7000497027000000000000000040CDB" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002A8B" title="250" data-uri="chapter03.xhtml#P7000497027000000000000000002A8B" epub:type="pagebreak"></span>(a) C code for calling function</p>
<pre id="P7000497027000000000000000040CDC" data-uri="chapter03.xhtml#P7000497027000000000000000040CDC" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040CDD" data-uri="chapter03.xhtml#P7000497027000000000000000040CDD" class="calibre10 pcalibre pcalibre1">
long call_proc()
{
	long x1 = 1; int x2 = 2;
	short x3 = 3; char x4 = 4;
	proc(x1, &amp;x1, x2, &amp;x2, x3, &amp;x3, x4, &amp;x4);
	return (x1+x2)*(x3-x4);
}
</code></pre>
<p id="P7000497027000000000000000040CDE" data-uri="chapter03.xhtml#P7000497027000000000000000040CDE" class="pcalibre1 pcalibre calibre2">(b) Generated assembly code</p>
<pre id="P7000497027000000000000000040CDF" data-uri="chapter03.xhtml#P7000497027000000000000000040CDF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040CE0" data-uri="chapter03.xhtml#P7000497027000000000000000040CE0" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long call_proc()</i>
1	call_proc:
	<i class="calibre5 pcalibre pcalibre1">Set up arguments to proc</i>
2	subq	$32, %rsp		<i class="calibre5 pcalibre pcalibre1">Allocate 32-byte stack frame</i>
3	movq	$1, 24(%rsp)		<i class="calibre5 pcalibre pcalibre1">Store 1 in &amp;x1</i>
4	movl	$2, 20(%rsp)		<i class="calibre5 pcalibre pcalibre1">Store 2 in &amp;x2</i>
5	movw	$3, 18(%rsp)		<i class="calibre5 pcalibre pcalibre1">Store 3 in &amp;x3</i>
6	movb	$4, 17(%rsp)		<i class="calibre5 pcalibre pcalibre1">Store 4 in &amp;x4</i>
7	leaq	17(%rsp), %rax		<i class="calibre5 pcalibre pcalibre1">Create &amp;x4</i>
8	movq	%rax, 8(%rsp)		<i class="calibre5 pcalibre pcalibre1">Store &amp;x4 as argument 8</i>
9	movl	$4, (%rsp)		<i class="calibre5 pcalibre pcalibre1">Store 4 as argument 7</i>
10	leaq	18(%rsp), %r9		<i class="calibre5 pcalibre pcalibre1">Pass &amp;x3 as argument 6</i>
11	movl	$3, %r8d		<i class="calibre5 pcalibre pcalibre1">Pass 3 as argument 5</i>
12	leaq	20(%rsp), %rcx		<i class="calibre5 pcalibre pcalibre1">Pass &amp;x2 as argument 4</i>
13	movl	$2, %edx		<i class="calibre5 pcalibre pcalibre1">Pass 2 as argument 3</i>
14	leaq	24(%rsp), %rsi		<i class="calibre5 pcalibre pcalibre1">Pass &amp;x1 as argument 2</i>
15	movl	$1, %edi		<i class="calibre5 pcalibre pcalibre1">Pass 1 as argument 1</i>
	<i class="calibre5 pcalibre pcalibre1">Call proc</i>
16	call proc
	<i class="calibre5 pcalibre pcalibre1">Retrieve changes to memory</i>
17	movslq	 20(%rsp), %rdx		<i class="calibre5 pcalibre pcalibre1">Get x2 and convert to long</i>
18	addq	24(%rsp), %rdx		<i class="calibre5 pcalibre pcalibre1">Compute x1+x2</i>
19	movswl	18(%rsp), %eax		<i class="calibre5 pcalibre pcalibre1">Get x3 and convert to int</i>
20	movsbl	17(%rsp), %ecx		<i class="calibre5 pcalibre pcalibre1">Get x4 and convert to int</i>
21	subl	%ecx, %eax		<i class="calibre5 pcalibre pcalibre1">Compute x3-x4</i>
22	cltq				<i class="calibre5 pcalibre pcalibre1">Convert to long</i>
23	imulq	%rdx, %rax		<i class="calibre5 pcalibre pcalibre1">Compute (x1+x2) * (x3-x4</i>)
24	addq	$32, %rsp		<i class="calibre5 pcalibre pcalibre1">Deallocate stack frame</i>
25	ret				<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P7000497027000000000000000040CE1" data-uri="chapter03.xhtml#P7000497027000000000000000040CE1" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040CE2" data-uri="chapter03.xhtml#P7000497027000000000000000040CE2" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.32 </span>Example of code to call function <code id="P7000497027000000000000000040CE3" data-uri="chapter03.xhtml#P7000497027000000000000000040CE3" class="pcalibre1 calibre8 pcalibre">proc</code>, defined in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A38"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.29</span></a>.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040CE4" data-uri="chapter03.xhtml#P7000497027000000000000000040CE4"><p id="P7000497027000000000000000040CE5" data-uri="chapter03.xhtml#P7000497027000000000000000040CE5" class="pcalibre calibre3 pcalibre1">This code creates a stack frame.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002A96" data-uri="chapter03.xhtml#P7000497027000000000000000002A96">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002A97" title="251" data-uri="chapter03.xhtml#P7000497027000000000000000002A97" epub:type="pagebreak"></span>
<img alt="A diagram illustrates stack frame for a function." id="P7000497027000000000000000040CE6" data-uri="P700049702700000000000000000B6BA" src="../images/p251-1.png" class="calibre91 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000040CE7" data-uri="chapter03.xhtml#P7000497027000000000000000040CE7" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040CE8" data-uri="chapter03.xhtml#P7000497027000000000000000040CE8" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.33 </span>Stack frame for function <code id="P7000497027000000000000000040CE9" data-uri="chapter03.xhtml#P7000497027000000000000000040CE9" class="pcalibre1 calibre8 pcalibre">call_proc</code>.</h1></header><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040CEA" data-uri="chapter03.xhtml#P7000497027000000000000000040CEA"><p id="P7000497027000000000000000040CEB" data-uri="chapter03.xhtml#P7000497027000000000000000040CEB" class="pcalibre calibre3 pcalibre1">The stack frame contains local variables, as well as two of the arguments to pass to function <code id="P7000497027000000000000000040CEC" data-uri="chapter03.xhtml#P7000497027000000000000000040CEC" class="pcalibre1 calibre8 pcalibre">proc</code>.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000020FC7" data-uri="chapter03.xhtml#P7000497027000000000000000020FC7">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000040CED" data-uri="chapter03.xhtml#P7000497027000000000000000040CED" class="pcalibre1 pcalibre calibre2">A diagram illustrates a stack frame divided into five sections, from top to bottom:</p>
<ul class="ul_none1 pcalibre pcalibre1" id="P7000497027000000000000000040CEE" data-uri="chapter03.xhtml#P7000497027000000000000000040CEE">
<li id="P7000497027000000000000000040CEF" data-uri="chapter03.xhtml#P7000497027000000000000000040CEF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CF0" data-uri="chapter03.xhtml#P7000497027000000000000000040CF0" class="calibre13 pcalibre pcalibre1">32: Return address</p></li>
<li id="P7000497027000000000000000040CF1" data-uri="chapter03.xhtml#P7000497027000000000000000040CF1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CF2" data-uri="chapter03.xhtml#P7000497027000000000000000040CF2" class="calibre13 pcalibre pcalibre1">24: x1</p></li>
<li id="P7000497027000000000000000040CF3" data-uri="chapter03.xhtml#P7000497027000000000000000040CF3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CF4" data-uri="chapter03.xhtml#P7000497027000000000000000040CF4" class="calibre13 pcalibre pcalibre1">Four sections: 16, 17 containing x4, 18 containing x3, 20 containing x2</p></li>
<li id="P7000497027000000000000000040CF5" data-uri="chapter03.xhtml#P7000497027000000000000000040CF5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CF6" data-uri="chapter03.xhtml#P7000497027000000000000000040CF6" class="calibre13 pcalibre pcalibre1">8: Argument 8 = &amp;x4</p></li>
<li id="P7000497027000000000000000040CF7" data-uri="chapter03.xhtml#P7000497027000000000000000040CF7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040CF8" data-uri="chapter03.xhtml#P7000497027000000000000000040CF8" class="calibre13 pcalibre pcalibre1">0 (stack pointer %rsp): Argument 7 = 4</p></li>
</ul>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000040CF9" data-uri="chapter03.xhtml#P7000497027000000000000000040CF9" class="pcalibre1 pcalibre calibre2">When procedure <code id="P7000497027000000000000000040CFA" data-uri="chapter03.xhtml#P7000497027000000000000000040CFA" class="pcalibre1 calibre8 pcalibre">proc</code> is called, the program will begin executing the code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A38"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.29(b)</span></a>. As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002A44"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.30</span></a>, arguments 7 and 8 are now at offsets 8 and 16 relative to the stack pointer, because the return address was pushed onto the stack.</p>
<p id="P7000497027000000000000000040CFB" data-uri="chapter03.xhtml#P7000497027000000000000000040CFB" class="pcalibre1 pcalibre calibre2">When the program returns to <code id="P7000497027000000000000000040CFC" data-uri="chapter03.xhtml#P7000497027000000000000000040CFC" class="pcalibre1 calibre8 pcalibre">call_proc</code>, the code retrieves the values of the four local variables (lines 17–20) and performs the final computations. It finishes by incrementing the stack pointer by 32 to deallocate the stack frame.</p>
</section>
<section id="P7000497027000000000000000002AA3" data-uri="chapter03.xhtml#P7000497027000000000000000002AA3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040CFD" data-uri="chapter03.xhtml#P7000497027000000000000000040CFD" epub:type="title"><span class="pcalibre label pcalibre1">3.7.5 </span>Local Storage in Registers</h1></header>
<p id="P7000497027000000000000000040CFE" data-uri="chapter03.xhtml#P7000497027000000000000000040CFE" class="pcalibre1 pcalibre calibre2">The set of program registers acts as a single resource shared by all of the procedures. Although only one procedure can be active at a given time, we must make sure that when one procedure (the <i class="calibre5 pcalibre pcalibre1">caller</i>) calls another (the <i class="calibre5 pcalibre pcalibre1">callee</i>), the callee does not overwrite some register value that the caller planned to use later. For this reason, x86-64 adopts a uniform set of conventions for register usage that must be respected by all procedures, including those in program libraries.</p>
<p id="P7000497027000000000000000040CFF" data-uri="chapter03.xhtml#P7000497027000000000000000040CFF" class="pcalibre1 pcalibre calibre2">By convention, registers <code id="P7000497027000000000000000040D00" data-uri="chapter03.xhtml#P7000497027000000000000000040D00" class="pcalibre1 calibre8 pcalibre">%rbx, %rbp</code>, and <code id="P7000497027000000000000000040D01" data-uri="chapter03.xhtml#P7000497027000000000000000040D01" class="pcalibre1 calibre8 pcalibre">%r12–%r15</code> are classified as <i class="calibre5 pcalibre pcalibre1">callee-saved</i> registers. When procedure <code id="P7000497027000000000000000040D02" data-uri="chapter03.xhtml#P7000497027000000000000000040D02" class="pcalibre1 calibre8 pcalibre">P</code> calls procedure <code id="P7000497027000000000000000040D03" data-uri="chapter03.xhtml#P7000497027000000000000000040D03" class="pcalibre1 calibre8 pcalibre">Q</code>, <code id="P7000497027000000000000000040D04" data-uri="chapter03.xhtml#P7000497027000000000000000040D04" class="pcalibre1 calibre8 pcalibre">Q</code> must <i class="calibre5 pcalibre pcalibre1">preserve</i> the values of these registers, ensuring that they have the same values when <code id="P7000497027000000000000000040D05" data-uri="chapter03.xhtml#P7000497027000000000000000040D05" class="pcalibre1 calibre8 pcalibre">Q</code> returns to <code id="P7000497027000000000000000040D06" data-uri="chapter03.xhtml#P7000497027000000000000000040D06" class="pcalibre1 calibre8 pcalibre">P</code> as they did when <code id="P7000497027000000000000000040D07" data-uri="chapter03.xhtml#P7000497027000000000000000040D07" class="pcalibre1 calibre8 pcalibre">Q</code> was called. Procedure <code id="P7000497027000000000000000040D08" data-uri="chapter03.xhtml#P7000497027000000000000000040D08" class="pcalibre1 calibre8 pcalibre">Q</code> can preserve a register value by either not changing it at all or by pushing the original value on the stack, altering it, and then popping the old value from the stack before returning. The pushing of register values has the effect of creating the portion of the stack frame labeled "Saved registers" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002849"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.25</span></a>. With this convention, the code for <code id="P7000497027000000000000000040D09" data-uri="chapter03.xhtml#P7000497027000000000000000040D09" class="pcalibre1 calibre8 pcalibre">P</code> can safely store a value in a callee-saved register (after saving the previous value on the stack, of course), call <code id="P7000497027000000000000000040D0A" data-uri="chapter03.xhtml#P7000497027000000000000000040D0A" class="pcalibre1 calibre8 pcalibre">Q</code>, and then use the value in the register without risk of it having been corrupted.</p>
<p id="P7000497027000000000000000040D0B" data-uri="chapter03.xhtml#P7000497027000000000000000040D0B" class="pcalibre1 pcalibre calibre2">All other registers, except for the stack pointer <code id="P7000497027000000000000000040D0C" data-uri="chapter03.xhtml#P7000497027000000000000000040D0C" class="pcalibre1 calibre8 pcalibre">%rsp</code>, are classified as <i class="calibre5 pcalibre pcalibre1">caller-saved</i> registers. This means that they can be modified by any function. The name "caller saved" can be understood in the context of a procedure <code id="P7000497027000000000000000040D0D" data-uri="chapter03.xhtml#P7000497027000000000000000040D0D" class="pcalibre1 calibre8 pcalibre">P</code> having some local data in such a register and calling procedure <code id="P7000497027000000000000000040D0E" data-uri="chapter03.xhtml#P7000497027000000000000000040D0E" class="pcalibre1 calibre8 pcalibre">Q</code>. Since <code id="P7000497027000000000000000040D0F" data-uri="chapter03.xhtml#P7000497027000000000000000040D0F" class="pcalibre1 calibre8 pcalibre">Q</code> is free to alter this register, it is incumbent upon <code id="P7000497027000000000000000040D10" data-uri="chapter03.xhtml#P7000497027000000000000000040D10" class="pcalibre1 calibre8 pcalibre">P</code> (the caller) to first save the data before it makes the call.</p>
<p id="P7000497027000000000000000040D11" data-uri="chapter03.xhtml#P7000497027000000000000000040D11" class="pcalibre1 pcalibre calibre2">As an example, consider the function <code id="P7000497027000000000000000040D12" data-uri="chapter03.xhtml#P7000497027000000000000000040D12" class="pcalibre1 calibre8 pcalibre">P</code> shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002ABE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.34(a)</span></a>. It calls <code id="P7000497027000000000000000040D13" data-uri="chapter03.xhtml#P7000497027000000000000000040D13" class="pcalibre1 calibre8 pcalibre">Q</code> twice. During the first call, it must retain the value of <code id="P7000497027000000000000000040D14" data-uri="chapter03.xhtml#P7000497027000000000000000040D14" class="pcalibre1 calibre8 pcalibre">x</code> for use later. Similarly, during the second call, it must retain the value computed for <code id="P7000497027000000000000000040D15" data-uri="chapter03.xhtml#P7000497027000000000000000040D15" class="pcalibre1 calibre8 pcalibre">Q</code>(<code id="P7000497027000000000000000040D16" data-uri="chapter03.xhtml#P7000497027000000000000000040D16" class="pcalibre1 calibre8 pcalibre">y</code>). In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002ABE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.34(b)</span></a>,</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002ABE" data-uri="chapter03.xhtml#P7000497027000000000000000002ABE">
<p id="P7000497027000000000000000040D17" data-uri="chapter03.xhtml#P7000497027000000000000000040D17" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002AC0" title="252" data-uri="chapter03.xhtml#P7000497027000000000000000002AC0" epub:type="pagebreak"></span>(a) Calling function</p>
<pre id="P7000497027000000000000000040D18" data-uri="chapter03.xhtml#P7000497027000000000000000040D18" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D19" data-uri="chapter03.xhtml#P7000497027000000000000000040D19" class="calibre10 pcalibre pcalibre1">
long P(long x, long y)
{
	long u = Q(y);
	long v = Q(x);
	return u + v;
}
</code></pre>
<p id="P7000497027000000000000000040D1A" data-uri="chapter03.xhtml#P7000497027000000000000000040D1A" class="pcalibre1 pcalibre calibre2">(b) Generated assembly code for the calling function</p>
<pre id="P7000497027000000000000000040D1B" data-uri="chapter03.xhtml#P7000497027000000000000000040D1B" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D1C" data-uri="chapter03.xhtml#P7000497027000000000000000040D1C" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long P(long x, long y</i>)
	<i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi</i>
1	P:
2	pushq	%rbp		<i class="calibre5 pcalibre pcalibre1">Save %rbp</i>
3	pushq	%rbx		<i class="calibre5 pcalibre pcalibre1">Save %rbx</i>
4	subq	$8, %rsp	<i class="calibre5 pcalibre pcalibre1">Align stack frame</i>
5	movq	%rdi, %rbp	<i class="calibre5 pcalibre pcalibre1">Save x</i>
6	movq	%rsi, %rdi	<i class="calibre5 pcalibre pcalibre1">Move y to first argument</i>
7	call	Q		<i class="calibre5 pcalibre pcalibre1">Call Q(y</i>)
8	movq	%rax, %rbx	<i class="calibre5 pcalibre pcalibre1">Save result</i>
9	movq	%rbp, %rdi	<i class="calibre5 pcalibre pcalibre1">Move x to first argument</i>
10	call	Q		<i class="calibre5 pcalibre pcalibre1">Call Q(x</i>)
11	addq	%rbx, %rax	<i class="calibre5 pcalibre pcalibre1">Add saved Q(y) to Q(x</i>)
12	addq	$8, %rsp	<i class="calibre5 pcalibre pcalibre1">Deallocate last part of stack</i>
13	popq	%rbx		<i class="calibre5 pcalibre pcalibre1">Restore %rbx</i>
14	popq	%rbp		<i class="calibre5 pcalibre pcalibre1">Restore %rbp</i>
15	ret
</code></pre>
<figcaption id="P7000497027000000000000000040D1D" data-uri="chapter03.xhtml#P7000497027000000000000000040D1D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040D1E" data-uri="chapter03.xhtml#P7000497027000000000000000040D1E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.34 </span>Code demonstrating use of callee-saved registers.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040D1F" data-uri="chapter03.xhtml#P7000497027000000000000000040D1F"><p id="P7000497027000000000000000040D20" data-uri="chapter03.xhtml#P7000497027000000000000000040D20" class="pcalibre calibre3 pcalibre1">Value <code id="P7000497027000000000000000040D21" data-uri="chapter03.xhtml#P7000497027000000000000000040D21" class="pcalibre1 calibre8 pcalibre">x</code> must be preserved during the first call, and value <code id="P7000497027000000000000000040D22" data-uri="chapter03.xhtml#P7000497027000000000000000040D22" class="pcalibre1 calibre8 pcalibre">Q</code>(<code id="P7000497027000000000000000040D23" data-uri="chapter03.xhtml#P7000497027000000000000000040D23" class="pcalibre1 calibre8 pcalibre">y</code>) must be preserved during the second.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040D24" data-uri="chapter03.xhtml#P7000497027000000000000000040D24">we can see that the code generated by <span class="smallcaps pcalibre pcalibre1">gcc </span>uses two callee-saved registers: <code id="P7000497027000000000000000040D25" data-uri="chapter03.xhtml#P7000497027000000000000000040D25" class="pcalibre1 calibre8 pcalibre">%rbp</code> to hold <code id="P7000497027000000000000000040D26" data-uri="chapter03.xhtml#P7000497027000000000000000040D26" class="pcalibre1 calibre8 pcalibre">x</code>, and <code id="P7000497027000000000000000040D27" data-uri="chapter03.xhtml#P7000497027000000000000000040D27" class="pcalibre1 calibre8 pcalibre">%rbx</code> to hold the computed value of <code id="P7000497027000000000000000040D28" data-uri="chapter03.xhtml#P7000497027000000000000000040D28" class="pcalibre1 calibre8 pcalibre">Q</code>(<code id="P7000497027000000000000000040D29" data-uri="chapter03.xhtml#P7000497027000000000000000040D29" class="pcalibre1 calibre8 pcalibre">y</code>). At the beginning of the function, it saves the values of these two registers on the stack (lines 2–3). It copies argument <code id="P7000497027000000000000000040D2A" data-uri="chapter03.xhtml#P7000497027000000000000000040D2A" class="pcalibre1 calibre8 pcalibre">x</code> to <code id="P7000497027000000000000000040D2B" data-uri="chapter03.xhtml#P7000497027000000000000000040D2B" class="pcalibre1 calibre8 pcalibre">%rbp</code> before the first call to <code id="P7000497027000000000000000040D2C" data-uri="chapter03.xhtml#P7000497027000000000000000040D2C" class="pcalibre1 calibre8 pcalibre">Q</code> (line 5). It copies the result of this call to <code id="P7000497027000000000000000040D2D" data-uri="chapter03.xhtml#P7000497027000000000000000040D2D" class="pcalibre1 calibre8 pcalibre">%rbx</code> before the second call to <code id="P7000497027000000000000000040D2E" data-uri="chapter03.xhtml#P7000497027000000000000000040D2E" class="pcalibre1 calibre8 pcalibre">Q</code> (line 8). At the end of the function (lines 13–14), it restores the values of the two callee-saved registers by popping them off the stack. Note how they are popped in the reverse order from how they were pushed, to account for the last-in, first-out discipline of a stack.</p>
<section id="P7000497027000000000000000002AD8" data-uri="chapter03.xhtml#P7000497027000000000000000002AD8" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040D2F" data-uri="chapter03.xhtml#P7000497027000000000000000040D2F" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.34 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003782">340</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040D30" data-uri="chapter03.xhtml#P7000497027000000000000000040D30">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040D31" data-uri="chapter03.xhtml#P7000497027000000000000000040D31">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040D32" data-uri="chapter03.xhtml#P7000497027000000000000000040D32"><p id="P7000497027000000000000000040D33" data-uri="chapter03.xhtml#P7000497027000000000000000040D33" class="pcalibre calibre3 pcalibre1">Consider a function P, which generates local values, named <code id="P7000497027000000000000000040D34" data-uri="chapter03.xhtml#P7000497027000000000000000040D34" class="pcalibre1 calibre8 pcalibre">a0–a8</code>. It then calls function <code id="P7000497027000000000000000040D35" data-uri="chapter03.xhtml#P7000497027000000000000000040D35" class="pcalibre1 calibre8 pcalibre">Q</code> using these generated values as arguments. G<span class="smallcaps pcalibre pcalibre1">cc </span>produces the following code for the first part of <code id="P7000497027000000000000000040D36" data-uri="chapter03.xhtml#P7000497027000000000000000040D36" class="pcalibre1 calibre8 pcalibre">P</code>:</p>
<pre id="P7000497027000000000000000040D37" data-uri="chapter03.xhtml#P7000497027000000000000000040D37" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D38" data-uri="chapter03.xhtml#P7000497027000000000000000040D38" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002AE3" title="253" data-uri="chapter03.xhtml#P7000497027000000000000000002AE3" epub:type="pagebreak"></span>	<i class="calibre5 pcalibre pcalibre1">long P(long x)
	x in %rdi</i>
1	P:
2	pushq	%r15
3	pushq	%r14
4	pushq	%r13
5	pushq	%r12
6	pushq	%rbp
7	pushq	%rbx
8	subq	$24, %rsp
9	movq	%rdi, %rbx
10	leaq	1(%rdi), %r15
11	leaq	2(%rdi), %r14
12	leaq	3(%rdi), %r13
13	leaq	4(%rdi), %r12
14	leaq	5(%rdi), %rbp
15	leaq	6(%rdi), %rax
16	movq	%rax, (%rsp)
17	leaq	7(%rdi), %rdx
18	movq	%rdx, 8(%rsp)
19	movl	$0, %eax
20	call	Q
	<i class="calibre5 pcalibre pcalibre1">...</i>
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000040D39" data-uri="chapter03.xhtml#P7000497027000000000000000040D39">
<li id="P7000497027000000000000000040D3A" data-uri="chapter03.xhtml#P7000497027000000000000000040D3A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040D3B" data-uri="chapter03.xhtml#P7000497027000000000000000040D3B" class="pcalibre calibre3 pcalibre1">Identify which local values get stored in callee-saved registers.</p></li>
<li id="P7000497027000000000000000040D3C" data-uri="chapter03.xhtml#P7000497027000000000000000040D3C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040D3D" data-uri="chapter03.xhtml#P7000497027000000000000000040D3D" class="pcalibre calibre3 pcalibre1">Identify which local values get stored on the stack.</p></li>
<li id="P7000497027000000000000000040D3E" data-uri="chapter03.xhtml#P7000497027000000000000000040D3E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040D3F" data-uri="chapter03.xhtml#P7000497027000000000000000040D3F" class="pcalibre calibre3 pcalibre1">Explain why the program could not store all of the local values in callee-saved registers.</p></li>
</ol>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002AEB" data-uri="chapter03.xhtml#P7000497027000000000000000002AEB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040D40" data-uri="chapter03.xhtml#P7000497027000000000000000040D40" epub:type="title"><span class="pcalibre label pcalibre1">3.7.6 </span>Recursive Procedures</h1></header>
<p id="P7000497027000000000000000040D41" data-uri="chapter03.xhtml#P7000497027000000000000000040D41" class="pcalibre1 pcalibre calibre2">The conventions we have described for using the registers and the stack allow x86-64 procedures to call themselves recursively. Each procedure call has its own private space on the stack, and so the local variables of the multiple outstanding calls do not interfere with one another. Furthermore, the stack discipline naturally provides the proper policy for allocating local storage when the procedure is called and deallocating it before returning.</p>
<p id="P7000497027000000000000000040D42" data-uri="chapter03.xhtml#P7000497027000000000000000040D42" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002AF2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.35</span></a> shows both the C code and the generated assembly code for a recursive factorial function. We can see that the assembly code uses register <code id="P7000497027000000000000000040D43" data-uri="chapter03.xhtml#P7000497027000000000000000040D43" class="pcalibre1 calibre8 pcalibre">%rbx</code> to hold the parameter <code id="P7000497027000000000000000040D44" data-uri="chapter03.xhtml#P7000497027000000000000000040D44" class="pcalibre1 calibre8 pcalibre">n</code>, after first saving the existing value on the stack (line 2) and later restoring the value before returning (line 11). Due to the stack discipline, and the register-saving conventions, we can be assured that when the recursive call to <code id="P7000497027000000000000000040D45" data-uri="chapter03.xhtml#P7000497027000000000000000040D45" class="pcalibre1 calibre8 pcalibre">rfact(n-1)</code> returns (line 9) that (1) the result of the call will be held in register</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002AF2" data-uri="chapter03.xhtml#P7000497027000000000000000002AF2">
<p id="P7000497027000000000000000040D46" data-uri="chapter03.xhtml#P7000497027000000000000000040D46" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002AF4" title="254" data-uri="chapter03.xhtml#P7000497027000000000000000002AF4" epub:type="pagebreak"></span>(a) C code</p>
<pre id="P7000497027000000000000000040D47" data-uri="chapter03.xhtml#P7000497027000000000000000040D47" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D48" data-uri="chapter03.xhtml#P7000497027000000000000000040D48" class="calibre10 pcalibre pcalibre1">
long rfact(long n)
{
	long result;
	if (n &lt;= 1)
	  result = 1;
	else
	  result = n * rfact(n-1);
	return result;
}
</code></pre>
<p id="P7000497027000000000000000040D49" data-uri="chapter03.xhtml#P7000497027000000000000000040D49" class="pcalibre1 pcalibre calibre2">(b) Generated assembly code</p>
<pre id="P7000497027000000000000000040D4A" data-uri="chapter03.xhtml#P7000497027000000000000000040D4A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D4B" data-uri="chapter03.xhtml#P7000497027000000000000000040D4B" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long rfact(long n</i>)
	<i class="calibre5 pcalibre pcalibre1">n in %rdi</i>
1	rfact:
2	pushq	%rbx		<i class="calibre5 pcalibre pcalibre1">Save %rbx</i>
3	movq	%rdi, %rbx	<i class="calibre5 pcalibre pcalibre1">Store n in callee-saved register</i>
4	movl	$1, %eax	<i class="calibre5 pcalibre pcalibre1">Set return value = 1</i>
5	cmpq	$1, %rdi	<i class="calibre5 pcalibre pcalibre1">Compare n:1</i>
6	jle	.L35		<i class="calibre5 pcalibre pcalibre1">If &lt;=, goto done</i>
7	leaq	-1(%rdi), %rdi <i class="calibre5 pcalibre pcalibre1">Compute n-1</i>
8	call	rfact		<i class="calibre5 pcalibre pcalibre1">Call rfact(n-1</i>)
9	imulq	%rbx, %rax	<i class="calibre5 pcalibre pcalibre1">Multiply result by n</i>
10	.L35:		   <b class="calibre4 pcalibre pcalibre1">done:</b>
11	popq	%rbx		<i class="calibre5 pcalibre pcalibre1">Restore %rbx</i>
12	ret			<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P7000497027000000000000000040D4C" data-uri="chapter03.xhtml#P7000497027000000000000000040D4C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040D4D" data-uri="chapter03.xhtml#P7000497027000000000000000040D4D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.35 </span>Code for recursive factorial program.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040D4E" data-uri="chapter03.xhtml#P7000497027000000000000000040D4E"><p id="P7000497027000000000000000040D4F" data-uri="chapter03.xhtml#P7000497027000000000000000040D4F" class="pcalibre calibre3 pcalibre1">The standard procedure handling mechanisms suffice for implementing recursive functions.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040D50" data-uri="chapter03.xhtml#P7000497027000000000000000040D50"><code id="P7000497027000000000000000040D51" data-uri="chapter03.xhtml#P7000497027000000000000000040D51" class="pcalibre1 calibre8 pcalibre">%rax</code>, and (2) the value of argument <code id="P7000497027000000000000000040D52" data-uri="chapter03.xhtml#P7000497027000000000000000040D52" class="pcalibre1 calibre8 pcalibre">n</code> will held in register <code id="P7000497027000000000000000040D53" data-uri="chapter03.xhtml#P7000497027000000000000000040D53" class="pcalibre1 calibre8 pcalibre">%rbx</code>. Multiplying these two values then computes the desired result.</p>
<p id="P7000497027000000000000000040D54" data-uri="chapter03.xhtml#P7000497027000000000000000040D54" class="pcalibre1 pcalibre calibre2">We can see from this example that calling a function recursively proceeds just like any other function call. Our stack discipline provides a mechanism where each invocation of a function has its own private storage for state information (saved values of the return location and callee-saved registers). If need be, it can also provide storage for local variables. The stack discipline of allocation and deallocation naturally matches the call-return ordering of functions. This method of implementing function calls and returns even works for more complex patterns, including mutual recursion (e.g., when procedure <code id="P7000497027000000000000000040D55" data-uri="chapter03.xhtml#P7000497027000000000000000040D55" class="pcalibre1 calibre8 pcalibre">P</code> calls <code id="P7000497027000000000000000040D56" data-uri="chapter03.xhtml#P7000497027000000000000000040D56" class="pcalibre1 calibre8 pcalibre">Q</code>, which in turn calls <code id="P7000497027000000000000000040D57" data-uri="chapter03.xhtml#P7000497027000000000000000040D57" class="pcalibre1 calibre8 pcalibre">P</code>).</p>
<section id="P7000497027000000000000000002B06" data-uri="chapter03.xhtml#P7000497027000000000000000002B06" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040D58" data-uri="chapter03.xhtml#P7000497027000000000000000040D58" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.35 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003782">340</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040D59" data-uri="chapter03.xhtml#P7000497027000000000000000040D59">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040D5A" data-uri="chapter03.xhtml#P7000497027000000000000000040D5A">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040D5B" data-uri="chapter03.xhtml#P7000497027000000000000000040D5B"><p id="P7000497027000000000000000040D5C" data-uri="chapter03.xhtml#P7000497027000000000000000040D5C" class="pcalibre calibre3 pcalibre1">For a C function having the general structure</p>
<pre id="P7000497027000000000000000040D5D" data-uri="chapter03.xhtml#P7000497027000000000000000040D5D" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D5E" data-uri="chapter03.xhtml#P7000497027000000000000000040D5E" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002B0E" title="255" data-uri="chapter03.xhtml#P7000497027000000000000000002B0E" epub:type="pagebreak"></span>long rfun(unsigned long x) {
	if(__________)
	  return __________;
	unsigned long nx = __________;
	long rv = rfun(nx);
	return __________;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P7000497027000000000000000040D5F" data-uri="chapter03.xhtml#P7000497027000000000000000040D5F"><span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following assembly code:</p>
<pre id="P7000497027000000000000000040D60" data-uri="chapter03.xhtml#P7000497027000000000000000040D60" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D61" data-uri="chapter03.xhtml#P7000497027000000000000000040D61" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long rfun(unsigned long x</i>)
	<i class="calibre5 pcalibre pcalibre1">x in %rdi</i>
1	rfun:
2		pushq	 %rbx
3		movq	%rdi, %rbx
4		movl	$0, %eax
5		testq	%rdi, %rdi
6		je	.L2
7		shrq	$2, %rdi
8		call	rfun
9		addq	%rbx, %rax
10	.L2:
11		popq	%rbx
12		ret
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000040D62" data-uri="chapter03.xhtml#P7000497027000000000000000040D62">
<li id="P7000497027000000000000000040D63" data-uri="chapter03.xhtml#P7000497027000000000000000040D63" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040D64" data-uri="chapter03.xhtml#P7000497027000000000000000040D64" class="pcalibre calibre3 pcalibre1">What value does <code id="P7000497027000000000000000040D65" data-uri="chapter03.xhtml#P7000497027000000000000000040D65" class="pcalibre1 calibre8 pcalibre">rfun</code> store in the callee-saved register <code id="P7000497027000000000000000040D66" data-uri="chapter03.xhtml#P7000497027000000000000000040D66" class="pcalibre1 calibre8 pcalibre">%rbx</code>?</p></li>
<li id="P7000497027000000000000000040D67" data-uri="chapter03.xhtml#P7000497027000000000000000040D67" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040D68" data-uri="chapter03.xhtml#P7000497027000000000000000040D68" class="pcalibre calibre3 pcalibre1">Fill in the missing expressions in the C code shown above.</p></li>
</ol></div></li></ol>
</section>
</section>
</section></body></html>
