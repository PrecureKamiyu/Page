<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Data Journaling</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part467.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part469.htm">下一个 &gt;</a></p><p class="s32" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">Data Journaling</p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Let’s look at a simple example to understand how <b>data journaling </b>works. Data journaling is available as a mode with the Linux ext3 file system, from which much of this discussion is based.</p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Say we have our canonical update again, where we wish to write the ‘inode (I[v2]), bitmap (B[v2]), and data block (Db) to disk again. Before writing them to their final disk locations, we are now first going to write them to the log (a.k.a. journal). This is what this will look like in the log:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:90.59pt" cellspacing="0"><tr style="height:29pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;text-align: left;">TxB</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">I[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Db</p></td><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;text-align: left;">TxE</p></td><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="63" height="5" alt="image" src="Image_616.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">You can see we have written five blocks here. The transaction begin (TxB) tells us about this update, including information about the pend- ing update to the file system (e.g., the final addresses of the blocks I[v2], B[v2], and Db), as well as some kind of <b>transaction identifier </b>(<b>TID</b>). The middle three blocks just contain the exact contents of the blocks them- selves; this is known as <b>physical logging </b>as we are putting the exact physical contents of the update in the journal (an alternate idea, <b>logi- cal logging</b>, puts a more compact logical representation of the update in the journal, e.g., “this update wishes to append data block Db to file X”, which is a little more complex but can save space in the log and perhaps improve performance). The final block (TxE) is a marker of the end of this transaction, and will also contain the TID.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Once this transaction is safely on disk, we are ready to overwrite the old structures in the file system; this process is called <b>checkpointing</b>. Thus, to <b>checkpoint </b>the file system (i.e., bring it up to date with the pend- ing update in the journal), we issue the writes I[v2], B[v2], and Db to their disk locations as seen above; if these writes complete successfully, we have successfully checkpointed the the file system and are basically done. Thus, our initial sequence of operations:</p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: -11pt;line-height: 89%;text-align: justify;">1. <b>Journal write: </b>Write the transaction, including a transaction-begin block, all pending data and metadata updates, and a transaction- end block, to the log; wait for these writes to complete.</p><p style="padding-left: 91pt;text-indent: -11pt;line-height: 89%;text-align: justify;">2. <b>Checkpoint: </b>Write the pending metadata and data updates to their final locations in the file system.</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In our example, we would write TxB, I[v2], B[v2], Db, and TxE to the journal first. When these writes complete, we would complete the update by checkpointing I[v2], B[v2], and Db, to their final locations on disk.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Things get a little trickier when a crash occurs during the writes to the journal. Here, we are trying to write the set of blocks in the transac- tion (e.g., TxB, I[v2], B[v2], Db, TxE) to disk. One simple way to do this would be to issue each one at a time, waiting for each to complete, and then issuing the next. However, this is slow. Ideally, we’d like to issue</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 6pt;padding-left: 80pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>F<span class="s45">ORCING </span>W<span class="s45">RITES </span>T<span class="s45">O </span>D<span class="s45">ISK</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">To enforce ordering between two disk writes, modern file systems have to take a few extra precautions. In olden times, forcing ordering between two writes, <span class="s43">A </span>and <span class="s43">B</span>, was easy: just issue the write of <span class="s43">A </span>to the disk, wait for the disk to interrupt the OS when the write is complete, and then issue the write of <span class="s43">B</span>.</p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Things got slightly more complex due to the increased use of write caches within disks. With write buffering enabled (sometimes called <b>immediate reporting</b>), a disk will inform the OS the write is complete when it simply has been placed in the disk’s memory cache, and has not yet reached disk. If the OS then issues a subsequent write, it is not guaranteed to reach the disk after previous writes; thus ordering between writes is not preserved. One solution is to disable write buffering. However, more modern systems take extra precautions and issue explicit <b>write barriers</b>; such a barrier, when it completes, guarantees that all writes issued before the barrier will reach disk before any writes issued after the barrier.</p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">All of this machinery requires a great deal of trust in the correct oper- ation of the disk. Unfortunately, recent research shows that some disk manufacturers, in an effort to deliver “higher performing” disks, explic- itly ignore write-barrier requests, thus making the disks seemingly run faster but at the risk of incorrect operation [C+13, R+11]. As Kahan said, the fast almost always beats out the slow, even if the fast is wrong.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">all five block writes at once, as this would turn five writes into a single sequential write and thus be faster. However, this is unsafe, for the fol- lowing reason: given such a big write, the disk internally may perform scheduling and complete small pieces of the big write in any order. Thus, the disk internally may (1) write TxB, I[v2], B[v2], and TxE and only later</p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">(2) write Db. Unfortunately, if the disk loses power between (1) and (2), this is what ends up on disk:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:62.7497pt" cellspacing="0"><tr style="height:29pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;line-height: 8pt;text-align: left;">TxB</p><p class="s89" style="text-indent: 0pt;line-height: 7pt;text-align: left;">id=1</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">I[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 9pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">??</p></td><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;line-height: 8pt;text-align: left;">TxE</p><p class="s89" style="text-indent: 0pt;line-height: 7pt;text-align: left;">id=1</p></td><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="63" height="5" alt="image" src="Image_617.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Why is this a problem? Well, the transaction looks like a valid trans- action (it has a begin and an end with matching sequence numbers). Fur- ther, the file system can’t look at that fourth block and know it is wrong; after all, it is arbitrary user data. Thus, if the system now reboots and runs recovery, it will replay this transaction, and ignorantly copy the con- tents of the garbage block ’??’ to the location where Db is supposed to live. This is bad for arbitrary user data in a file; it is much worse if it hap- pens to a critical piece of file system, such as the superblock, which could render the file system unmountable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="408" height="369" alt="image" src="Image_618.png"/></span></p><p class="s27" style="padding-left: 142pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>O<span class="s45">PTIMIZING </span>L<span class="s45">OG </span>W<span class="s45">RITES</span></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">You may have noticed a particular inefficiency of writing to the log. Namely, the file system first has to write out the transaction-begin block and contents of the transaction; only after these writes complete can the file system send the transaction-end block to disk. The performance im- pact is clear, if you think about how a disk works: usually an extra rota- tion is incurred (think about why).</p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">One of our former graduate students, Vijayan Prabhakaran, had a simple idea to fix this problem [P+05]. When writing a transaction to the journal, include a checksum of the contents of the journal in the begin and end blocks. Doing so enables the file system to write the entire transaction at once, without incurring a wait; if, during recovery, the file system sees a mismatch in the computed checksum versus the stored checksum in the transaction, it can conclude that a crash occurred during the write of the transaction and thus discard the file-system update. Thus, with a small tweak in the write protocol and recovery system, a file system can achieve faster common-case performance; on top of that, the system is slightly more reliable, as any reads from the journal are now protected by a checksum.</p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">This simple fix was attractive enough to gain the notice of Linux file sys- tem developers, who then incorporated it into the next generation Linux file system, called (you guessed it!) <b>Linux ext4</b>. It now ships on mil- lions of machines worldwide, including the Android handheld platform. Thus, every time you write to disk on many Linux-based systems, a little code developed at Wisconsin makes your system a little faster and more reliable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To avoid this problem, the file system issues the transactional write in two steps. First, it writes all blocks except the TxE block to the journal, issuing these writes all at once. When these writes complete, the journal will look something like this (assuming our append workload again):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:90.59pt" cellspacing="0"><tr style="height:29pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;line-height: 8pt;text-align: left;">TxB</p><p class="s89" style="text-indent: 0pt;line-height: 7pt;text-align: left;">id=1</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">I[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Db</p></td><td style="width:158pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="63" height="5" alt="image" src="Image_619.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Journal</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">When those writes complete, the file system issues the write of the TxE block, thus leaving the journal in this final, safe state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:90.59pt" cellspacing="0"><tr style="height:28pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;line-height: 8pt;text-align: left;">TxB</p><p class="s89" style="text-indent: 0pt;line-height: 7pt;text-align: left;">id=1</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">I[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B[v2]</p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Db</p></td><td style="width:14pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" bgcolor="#A8A8A8"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="text-indent: 0pt;line-height: 8pt;text-align: left;">TxE</p><p class="s89" style="text-indent: 0pt;line-height: 7pt;text-align: left;">id=1</p></td><td style="width:144pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:2pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="63" height="5" alt="image" src="Image_620.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">An important aspect of this process is the atomicity guarantee pro- vided by the disk. It turns out that the disk guarantees that any 512-byte</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">write will either happen or not (and never be half-written); thus, to make sure the write of TxE is atomic, one should make it a single 512-byte block. Thus, our current protocol to update the file system, with each of its three phases labeled:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">1. <b>Journal write: </b>Write the contents of the transaction (including TxB, metadata, and data) to the log; wait for these writes to complete.</p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">2. <b>Journal commit: </b>Write the transaction commit block (containing TxE) to the log; wait for write to complete; transaction is said to be <b>committed</b>.</p><p style="padding-left: 64pt;text-indent: -11pt;line-height: 89%;text-align: justify;">3. <b>Checkpoint: </b>Write the contents of the update (metadata and data) to their final on-disk locations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part467.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part469.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
