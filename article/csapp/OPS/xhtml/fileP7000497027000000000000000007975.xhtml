<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.5 Robust Reading and Writing with the Rio Package</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007975" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004645F" data-uri="chapter10.xhtml#P700049702700000000000000004645F" epub:type="title"><span class="pcalibre label pcalibre1">10.5 </span>Robust Reading and Writing with the R<span class="smallcaps pcalibre pcalibre1">io</span> Package</h1></header>
<p id="P7000497027000000000000000046460" data-uri="chapter10.xhtml#P7000497027000000000000000046460" class="pcalibre1 pcalibre calibre2">In this section, we will develop an I/O package, called the R<span class="smallcaps pcalibre pcalibre1">io </span>(Robust I/O) package, that handles these short counts for you automatically. The R<span class="smallcaps pcalibre pcalibre1">io </span>package provides convenient, robust, and efficient I/O in applications such as network programs that are subject to short counts. R<span class="smallcaps pcalibre pcalibre1">io </span>provides two different kinds of functions:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046461" data-uri="chapter10.xhtml#P7000497027000000000000000046461">
<li id="P7000497027000000000000000046462" data-uri="chapter10.xhtml#P7000497027000000000000000046462" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046463" data-uri="chapter10.xhtml#P7000497027000000000000000046463" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Unbuffered input and output functions. </span>These functions transfer data directly between memory and a file, with no application-level buffering. They are especially useful for reading and writing binary data to and from networks.</p></li>
<li id="P7000497027000000000000000046464" data-uri="chapter10.xhtml#P7000497027000000000000000046464" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046465" data-uri="chapter10.xhtml#P7000497027000000000000000046465" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Buffered input functions. </span>These functions allow you to efficiently read text lines and binary data from a file whose contents are cached in an application-level buffer, similar to the one provided for standard I/O functions such as <code id="P7000497027000000000000000046466" data-uri="chapter10.xhtml#P7000497027000000000000000046466" class="pcalibre1 calibre8 pcalibre">printf</code>. Unlike the buffered I/O routines presented in [110], the buffered R<span class="smallcaps pcalibre pcalibre1">io </span>input functions are thread-safe (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008577.xhtml#P700049702700000000000000000857A"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">12.7.1</span></a>) and can be interleaved arbitrarily on the same descriptor. For example, you can read some text lines from a descriptor, then some binary data, and then some more text lines.</p></li>
</ul>
<p id="P7000497027000000000000000046467" data-uri="chapter10.xhtml#P7000497027000000000000000046467" class="pcalibre1 pcalibre calibre2">We are presenting the R<span class="smallcaps pcalibre pcalibre1">io </span>routines for two reasons. First, we will be using them in the network applications we develop in the next two chapters. Second, by studying the code for these routines, you will gain a deeper understanding of Unix I/O in general.</p>
<section id="P700049702700000000000000000797F" data-uri="chapter10.xhtml#P700049702700000000000000000797F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046468" data-uri="chapter10.xhtml#P7000497027000000000000000046468" epub:type="title"><span class="pcalibre label pcalibre1">10.5.1 </span><code id="P7000497027000000000000000046469" data-uri="chapter10.xhtml#P7000497027000000000000000046469" class="pcalibre1 calibre8 pcalibre">R<span class="smallcaps pcalibre pcalibre1">io</span></code> Unbuffered Input and Output Functions</h1></header>
<p id="P700049702700000000000000004646A" data-uri="chapter10.xhtml#P700049702700000000000000004646A" class="pcalibre1 pcalibre calibre2">Applications can transfer data directly between memory and a file by calling the <code id="P700049702700000000000000004646B" data-uri="chapter10.xhtml#P700049702700000000000000004646B" class="pcalibre1 calibre8 pcalibre">rio_readn</code> and <code id="P700049702700000000000000004646C" data-uri="chapter10.xhtml#P700049702700000000000000004646C" class="pcalibre1 calibre8 pcalibre">rio_writen</code> functions.</p>
<pre id="P700049702700000000000000004646D" data-uri="chapter10.xhtml#P700049702700000000000000004646D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004646E" data-uri="chapter10.xhtml#P700049702700000000000000004646E" class="calibre10 pcalibre pcalibre1">
#include "csapp.h"
ssize_t rio_readn(int fd, void *usrbuf, size_t n);
ssize_t rio_writen(int fd, void *usrbuf, size_t n);
					Returns: number of bytes transferred if OK, 0 on EOF (rio_readn only), âˆ’1 on error
</code></pre>
<p id="P700049702700000000000000004646F" data-uri="chapter10.xhtml#P700049702700000000000000004646F" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000046470" data-uri="chapter10.xhtml#P7000497027000000000000000046470" class="pcalibre1 calibre8 pcalibre">rio_readn</code> function transfers up to <code id="P7000497027000000000000000046471" data-uri="chapter10.xhtml#P7000497027000000000000000046471" class="pcalibre1 calibre8 pcalibre">n</code> bytes from the current file position of descriptor <code id="P7000497027000000000000000046472" data-uri="chapter10.xhtml#P7000497027000000000000000046472" class="pcalibre1 calibre8 pcalibre">fd</code> to memory location <code id="P7000497027000000000000000046473" data-uri="chapter10.xhtml#P7000497027000000000000000046473" class="pcalibre1 calibre8 pcalibre">usrbuf</code>. Similarly, the <code id="P7000497027000000000000000046474" data-uri="chapter10.xhtml#P7000497027000000000000000046474" class="pcalibre1 calibre8 pcalibre">rio_writen</code> function transfers <code id="P7000497027000000000000000046475" data-uri="chapter10.xhtml#P7000497027000000000000000046475" class="pcalibre1 calibre8 pcalibre">n</code> bytes from location <code id="P7000497027000000000000000046476" data-uri="chapter10.xhtml#P7000497027000000000000000046476" class="pcalibre1 calibre8 pcalibre">usrbuf</code> to descriptor <code id="P7000497027000000000000000046477" data-uri="chapter10.xhtml#P7000497027000000000000000046477" class="pcalibre1 calibre8 pcalibre">fd</code>. The <code id="P7000497027000000000000000046478" data-uri="chapter10.xhtml#P7000497027000000000000000046478" class="pcalibre1 calibre8 pcalibre">rio_readn</code> function can only return a short count if it encounters EOF. The <code id="P7000497027000000000000000046479" data-uri="chapter10.xhtml#P7000497027000000000000000046479" class="pcalibre1 calibre8 pcalibre">rio_writen</code> function never returns a short count. Calls to <code id="P700049702700000000000000004647A" data-uri="chapter10.xhtml#P700049702700000000000000004647A" class="pcalibre1 calibre8 pcalibre">rio_readn</code> and <code id="P700049702700000000000000004647B" data-uri="chapter10.xhtml#P700049702700000000000000004647B" class="pcalibre1 calibre8 pcalibre">rio_writen</code> can be interleaved arbitrarily on the same descriptor.</p>
<p id="P700049702700000000000000004647C" data-uri="chapter10.xhtml#P700049702700000000000000004647C" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007995" title="898" data-uri="chapter10.xhtml#P7000497027000000000000000007995" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079BE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.4</span></a> shows the code for <code id="P700049702700000000000000004647D" data-uri="chapter10.xhtml#P700049702700000000000000004647D" class="pcalibre1 calibre8 pcalibre">rio_readn</code> and <code id="P700049702700000000000000004647E" data-uri="chapter10.xhtml#P700049702700000000000000004647E" class="pcalibre1 calibre8 pcalibre">rio_writen</code>. Notice that each function manually restarts the <code id="P700049702700000000000000004647F" data-uri="chapter10.xhtml#P700049702700000000000000004647F" class="pcalibre1 calibre8 pcalibre">read</code> or <code id="P7000497027000000000000000046480" data-uri="chapter10.xhtml#P7000497027000000000000000046480" class="pcalibre1 calibre8 pcalibre">write</code> function if it is interrupted by the return from an application signal handler. To be as portable as possible, we allow for interrupted system calls and restart them when necessary.</p>
</section>
<section id="P700049702700000000000000000799A" data-uri="chapter10.xhtml#P700049702700000000000000000799A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046481" data-uri="chapter10.xhtml#P7000497027000000000000000046481" epub:type="title"><span class="pcalibre label pcalibre1">10.5.2 </span><code id="P7000497027000000000000000046482" data-uri="chapter10.xhtml#P7000497027000000000000000046482" class="pcalibre1 calibre8 pcalibre">R<span class="smallcaps pcalibre pcalibre1">io</span></code> Buffered Input Functions</h1></header>
<p id="P7000497027000000000000000046483" data-uri="chapter10.xhtml#P7000497027000000000000000046483" class="pcalibre1 pcalibre calibre2">Suppose we wanted to write a program that counts the number of lines in a text file. How might we do this? One approach is to use the <code id="P7000497027000000000000000046484" data-uri="chapter10.xhtml#P7000497027000000000000000046484" class="pcalibre1 calibre8 pcalibre">read</code> function to transfer 1 byte at a time from the file to the user's memory, checking each byte for the newline character. The disadvantage of this approach is that it is inefficient, requiring a trap to the kernel to read each byte in the file.</p>
<p id="P7000497027000000000000000046485" data-uri="chapter10.xhtml#P7000497027000000000000000046485" class="pcalibre1 pcalibre calibre2">A better approach is to call a wrapper function (<code id="P7000497027000000000000000046486" data-uri="chapter10.xhtml#P7000497027000000000000000046486" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code>) that copies the text line from an internal <i class="calibre5 pcalibre pcalibre1">read buffer</i>, automatically making a read call to refill the buffer whenever it becomes empty. For files that contain both text lines and binary data (such as the HTTP responses described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007ED4"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">11.5.3</span></a>), we also provide a buffered version of <code id="P7000497027000000000000000046487" data-uri="chapter10.xhtml#P7000497027000000000000000046487" class="pcalibre1 calibre8 pcalibre">rio_readn</code>, called <code id="P7000497027000000000000000046488" data-uri="chapter10.xhtml#P7000497027000000000000000046488" class="pcalibre1 calibre8 pcalibre">rio_readn</code>b, that transfers raw bytes from the same read buffer as <code id="P7000497027000000000000000046489" data-uri="chapter10.xhtml#P7000497027000000000000000046489" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code>.</p>
<pre id="P700049702700000000000000004648A" data-uri="chapter10.xhtml#P700049702700000000000000004648A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004648B" data-uri="chapter10.xhtml#P700049702700000000000000004648B" class="calibre10 pcalibre pcalibre1">
#include "csapp.h"
void rio_readinitb(rio_t *rp, int fd);
										Returns: nothing
ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen);
ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n);
					Returns: number of bytes read if OK, 0 on EOF, âˆ’1 on error
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004648C" data-uri="chapter10.xhtml#P700049702700000000000000004648C">The <code id="P700049702700000000000000004648D" data-uri="chapter10.xhtml#P700049702700000000000000004648D" class="pcalibre1 calibre8 pcalibre">rio_readinitb</code> function is called once per open descriptor. It associates the descriptor <code id="P700049702700000000000000004648E" data-uri="chapter10.xhtml#P700049702700000000000000004648E" class="pcalibre1 calibre8 pcalibre">fd</code> with a read buffer of type <code id="P700049702700000000000000004648F" data-uri="chapter10.xhtml#P700049702700000000000000004648F" class="pcalibre1 calibre8 pcalibre">rio_t</code> at address <code id="P7000497027000000000000000046490" data-uri="chapter10.xhtml#P7000497027000000000000000046490" class="pcalibre1 calibre8 pcalibre">rp</code>.</p>
<p id="P7000497027000000000000000046491" data-uri="chapter10.xhtml#P7000497027000000000000000046491" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000046492" data-uri="chapter10.xhtml#P7000497027000000000000000046492" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> function reads the next text line from file <code id="P7000497027000000000000000046493" data-uri="chapter10.xhtml#P7000497027000000000000000046493" class="pcalibre1 calibre8 pcalibre">rp</code> (including the terminating newline character), copies it to memory location <code id="P7000497027000000000000000046494" data-uri="chapter10.xhtml#P7000497027000000000000000046494" class="pcalibre1 calibre8 pcalibre">usrbuf</code>, and terminates the text line with the NULL (zero) character. The <code id="P7000497027000000000000000046495" data-uri="chapter10.xhtml#P7000497027000000000000000046495" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> function reads at most <code id="P7000497027000000000000000046496" data-uri="chapter10.xhtml#P7000497027000000000000000046496" class="pcalibre1 calibre8 pcalibre">maxlen-1</code> bytes, leaving room for the terminating NULL character. Text lines that exceed <code id="P7000497027000000000000000046497" data-uri="chapter10.xhtml#P7000497027000000000000000046497" class="pcalibre1 calibre8 pcalibre">maxlen-1</code> bytes are truncated and terminated with a NULL character.</p>
<p id="P7000497027000000000000000046498" data-uri="chapter10.xhtml#P7000497027000000000000000046498" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000046499" data-uri="chapter10.xhtml#P7000497027000000000000000046499" class="pcalibre1 calibre8 pcalibre">rio_readn</code>b function reads up to <code id="P700049702700000000000000004649A" data-uri="chapter10.xhtml#P700049702700000000000000004649A" class="pcalibre1 calibre8 pcalibre">n</code> bytes from file <code id="P700049702700000000000000004649B" data-uri="chapter10.xhtml#P700049702700000000000000004649B" class="pcalibre1 calibre8 pcalibre">rp</code> to memory location <code id="P700049702700000000000000004649C" data-uri="chapter10.xhtml#P700049702700000000000000004649C" class="pcalibre1 calibre8 pcalibre">usrbuf</code>. Calls to <code id="P700049702700000000000000004649D" data-uri="chapter10.xhtml#P700049702700000000000000004649D" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> and <code id="P700049702700000000000000004649E" data-uri="chapter10.xhtml#P700049702700000000000000004649E" class="pcalibre1 calibre8 pcalibre">rio_readnb</code> can be interleaved arbitrarily on the same descriptor. However, calls to these buffered functions should not be interleaved with calls to the unbuffered <code id="P700049702700000000000000004649F" data-uri="chapter10.xhtml#P700049702700000000000000004649F" class="pcalibre1 calibre8 pcalibre">rio_readn</code> function.</p>
<p id="P70004970270000000000000000464A0" data-uri="chapter10.xhtml#P70004970270000000000000000464A0" class="pcalibre1 pcalibre calibre2">You will encounter numerous examples of the R<span class="smallcaps pcalibre pcalibre1">io </span>functions in the remainder of this text. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079C8"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.5</span></a> shows how to use the R<span class="smallcaps pcalibre pcalibre1">io </span>functions to copy a text file from standard input to standard output, one line at a time.</p>
<p id="P70004970270000000000000000464A1" data-uri="chapter10.xhtml#P70004970270000000000000000464A1" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079CF"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.6</span></a> shows the format of a read buffer, along with the code for the <code id="P70004970270000000000000000464A2" data-uri="chapter10.xhtml#P70004970270000000000000000464A2" class="pcalibre1 calibre8 pcalibre">rio_readinitb</code> function that initializes it. The <code id="P70004970270000000000000000464A3" data-uri="chapter10.xhtml#P70004970270000000000000000464A3" class="pcalibre1 calibre8 pcalibre">rio_readinitb</code> function sets up an empty read buffer and associates an open file descriptor with that buffer.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000079BE" data-uri="chapter10.xhtml#P70004970270000000000000000079BE">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000079BF" title="899" data-uri="chapter10.xhtml#P70004970270000000000000000079BF" epub:type="pagebreak"></span>

<pre id="P70004970270000000000000000464A4" data-uri="chapter10.xhtml#P70004970270000000000000000464A4" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464A5" data-uri="chapter10.xhtml#P70004970270000000000000000464A5" class="calibre10 pcalibre pcalibre1">
1	ssize_t rio_readn(int fd, void *usrbuf, size_t n)
2	{
3		size_t nleft = n;
4		ssize_t nread;
5		char *bufp = usrbuf;
6	
7		while (nleft &gt; 0) {
8			if ((nread = read(fd, bufp, nleft)) &lt; 0) {
9				if (errno == EINTR)	/* Interrupted by sig handler return */
10					nread = 0;		/* and call read() again */
11				else
12					return âˆ’1;	/* errno set by read() */
13			}
14			else if (nread == 0)
15				break;			/*EOF */
16			nleft -= nread;
17			bufp += nread;
18		}
19		return (n - nleft);			/* Return &gt;= 0 */
20	}
</code></pre>


<pre id="P70004970270000000000000000464A6" data-uri="chapter10.xhtml#P70004970270000000000000000464A6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464A7" data-uri="chapter10.xhtml#P70004970270000000000000000464A7" class="calibre10 pcalibre pcalibre1">
1	ssize_t rio_writen(int fd, void *usrbuf, size_t n)
2	{
3		size_t nleft = n;
4		ssize_t nwritten;
5		char *bufp = usrbuf;
6	
7		while (nleft &gt; 0) {
8			if ((nwritten = write(fd, bufp, nleft)) &lt;= 0) {
9				if (errno == EINTR)	/* Interrupted by sig handler return */
10					nwritten = 0;	/* and call write() again */
11				else
12					return âˆ’1;	/* errno set by write() */
13			}
14			nleft -= nwritten;
15			bufp += nwritten;
16		}
17		return n;
18	}
</code></pre>

<figcaption id="P70004970270000000000000000464A8" data-uri="chapter10.xhtml#P70004970270000000000000000464A8" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000464A9" data-uri="chapter10.xhtml#P70004970270000000000000000464A9" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.4 </span>The <code id="P70004970270000000000000000464AA" data-uri="chapter10.xhtml#P70004970270000000000000000464AA" class="pcalibre1 calibre8 pcalibre">rio_readn</code> and <code id="P70004970270000000000000000464AB" data-uri="chapter10.xhtml#P70004970270000000000000000464AB" class="pcalibre1 calibre8 pcalibre">rio_writen</code> functions.</h1></header>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000079C8" data-uri="chapter10.xhtml#P70004970270000000000000000079C8">

<p id="P70004970270000000000000000464AC" data-uri="chapter10.xhtml#P70004970270000000000000000464AC" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P70004970270000000000000000079CA" title="900" data-uri="chapter10.xhtml#P70004970270000000000000000079CA" epub:type="pagebreak"></span></p>
<pre id="P70004970270000000000000000464AD" data-uri="chapter10.xhtml#P70004970270000000000000000464AD" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464AE" data-uri="chapter10.xhtml#P70004970270000000000000000464AE" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main(int argc, char **argv)
4	{
5		int n;
6		rio_t rio;
7		char buf[MAXLINE];
8	
9		Rio_readinitb(&amp;rio, STDIN_FILENO);
10		while((n = Rio_readlineb(&amp;rio, buf, MAXLINE)) != 0)
11		Rio_writen(STDOUT_FILENO, buf, n);
12	}
</code></pre>
<figcaption id="P70004970270000000000000000464AF" data-uri="chapter10.xhtml#P70004970270000000000000000464AF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000464B0" data-uri="chapter10.xhtml#P70004970270000000000000000464B0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">10.5 </span>Copying a text file from standard input to standard output.</h1></header>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000079CF" data-uri="chapter10.xhtml#P70004970270000000000000000079CF">
<pre id="P70004970270000000000000000464B1" data-uri="chapter10.xhtml#P70004970270000000000000000464B1" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464B2" data-uri="chapter10.xhtml#P70004970270000000000000000464B2" class="calibre10 pcalibre pcalibre1">
1	#define RIO_BUFSIZE 8192
2	typedef struct {
3		int rio_fd;			/* Descriptor for this internal buf */
4		int rio_cnt;			/* Unread bytes in internal buf */
5		char *rio_bufptr;		/* Next unread byte in internal buf */
6		char rio_buf[RIO_BUFSIZE];	/* Internal buffer */
7	} rio_t;
</code></pre>

<pre id="P70004970270000000000000000464B3" data-uri="chapter10.xhtml#P70004970270000000000000000464B3" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464B4" data-uri="chapter10.xhtml#P70004970270000000000000000464B4" class="calibre10 pcalibre pcalibre1">
1	void rio_readinitb(rio_t *rp, int fd)
2	{
3		rp-&gt;rio_fd = fd;
4		rp-&gt;rio_cnt = 0;
5		rp-&gt;rio_bufptr = rp-&gt;rio_buf;
6	}
</code></pre>

<figcaption id="P70004970270000000000000000464B5" data-uri="chapter10.xhtml#P70004970270000000000000000464B5" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000464B6" data-uri="chapter10.xhtml#P70004970270000000000000000464B6" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.6 </span>A read buffer of type <code id="P70004970270000000000000000464B7" data-uri="chapter10.xhtml#P70004970270000000000000000464B7" class="pcalibre1 calibre8 pcalibre">rio_t</code> and the <code id="P70004970270000000000000000464B8" data-uri="chapter10.xhtml#P70004970270000000000000000464B8" class="pcalibre1 calibre8 pcalibre">rio_readinitb</code> function that initializes it.</h1></header>
</figcaption>
</figure>
<p id="P70004970270000000000000000464B9" data-uri="chapter10.xhtml#P70004970270000000000000000464B9" class="pcalibre1 pcalibre calibre2">The heart of the R<span class="smallcaps pcalibre pcalibre1">io </span>read routines is the <code id="P70004970270000000000000000464BA" data-uri="chapter10.xhtml#P70004970270000000000000000464BA" class="pcalibre1 calibre8 pcalibre">rio_read</code> function shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079E1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.7</span></a>. The <code id="P70004970270000000000000000464BB" data-uri="chapter10.xhtml#P70004970270000000000000000464BB" class="pcalibre1 calibre8 pcalibre">rio_read</code> function is a buffered version of the Linux <code id="P70004970270000000000000000464BC" data-uri="chapter10.xhtml#P70004970270000000000000000464BC" class="pcalibre1 calibre8 pcalibre">read</code> function. When <code id="P70004970270000000000000000464BD" data-uri="chapter10.xhtml#P70004970270000000000000000464BD" class="pcalibre1 calibre8 pcalibre">rio_read</code> is called with a request to read <code id="P70004970270000000000000000464BE" data-uri="chapter10.xhtml#P70004970270000000000000000464BE" class="pcalibre1 calibre8 pcalibre">n</code> bytes, there are <code id="P70004970270000000000000000464BF" data-uri="chapter10.xhtml#P70004970270000000000000000464BF" class="pcalibre1 calibre8 pcalibre">rp-&gt;rio_cnt</code> unread bytes in the read buffer. If the buffer is empty, then it is replenished with a call to <code id="P70004970270000000000000000464C0" data-uri="chapter10.xhtml#P70004970270000000000000000464C0" class="pcalibre1 calibre8 pcalibre">read</code>. Receiving a short count from this invocation of <code id="P70004970270000000000000000464C1" data-uri="chapter10.xhtml#P70004970270000000000000000464C1" class="pcalibre1 calibre8 pcalibre">read</code> is not an error; it simply has the effect of partially filling the read buffer. Once the buffer is</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000079E1" data-uri="chapter10.xhtml#P70004970270000000000000000079E1">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000079E2" title="901" data-uri="chapter10.xhtml#P70004970270000000000000000079E2" epub:type="pagebreak"></span>

<pre id="P70004970270000000000000000464C2" data-uri="chapter10.xhtml#P70004970270000000000000000464C2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464C3" data-uri="chapter10.xhtml#P70004970270000000000000000464C3" class="calibre10 pcalibre pcalibre1">
1	static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)
2	{
3		int cnt;
4	
5		while (rp-&gt;rio_cnt &lt;= 0) { /* Refill if buf is empty */
6			rp-&gt;rio_cnt = read(rp-&gt;rio_fd, rp-&gt;rio_buf,
7							sizeof(rp-&gt;rio_buf));
8			if (rp-&gt;rio_cnt &lt; 0) {
9				if (errno != EINTR) /* Interrupted by sig handler return */
10					return -1;
11			}
12			else if (rp-&gt;rio_cnt == 0) /* EOF */
13				return 0;
14			else
15				rp-&gt;rio_bufptr = rp-&gt;rio_buf; /* Reset buffer ptr */
16		}
17	
18		/* Copy min(n, rp-&gt;rio_cnt) bytes from internal buf to user buf */
19			cnt = n;
20		if (rp-&gt;rio_cnt &lt; n)
21		cnt = rp-&gt;rio_cnt;
22		memcpy(usrbuf, rp-&gt;rio_bufptr, cnt);
23		rp-&gt;rio_bufptr += cnt;
24		rp-&gt;rio_cnt -= cnt;
25		return cnt;
26	}
</code></pre>

<figcaption id="P70004970270000000000000000464C4" data-uri="chapter10.xhtml#P70004970270000000000000000464C4" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000464C5" data-uri="chapter10.xhtml#P70004970270000000000000000464C5" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.7 </span>The internal <code id="P70004970270000000000000000464C6" data-uri="chapter10.xhtml#P70004970270000000000000000464C6" class="pcalibre1 calibre8 pcalibre">rio_read</code> function.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000464C7" data-uri="chapter10.xhtml#P70004970270000000000000000464C7">nonempty, <code id="P70004970270000000000000000464C8" data-uri="chapter10.xhtml#P70004970270000000000000000464C8" class="pcalibre1 calibre8 pcalibre">rio_read</code> copies the minimum of <code id="P70004970270000000000000000464C9" data-uri="chapter10.xhtml#P70004970270000000000000000464C9" class="pcalibre1 calibre8 pcalibre">n</code> and <code id="P70004970270000000000000000464CA" data-uri="chapter10.xhtml#P70004970270000000000000000464CA" class="pcalibre1 calibre8 pcalibre">rp-&gt;rio_cnt</code> bytes from the read buffer to the user buffer and returns the number of bytes copied.</p>
<p id="P70004970270000000000000000464CB" data-uri="chapter10.xhtml#P70004970270000000000000000464CB" class="pcalibre1 pcalibre calibre2">To an application program, the <code id="P70004970270000000000000000464CC" data-uri="chapter10.xhtml#P70004970270000000000000000464CC" class="pcalibre1 calibre8 pcalibre">rio_read</code> function has the same semantics as the Linux read function. On error, it returns âˆ’1 and sets <code id="P70004970270000000000000000464CD" data-uri="chapter10.xhtml#P70004970270000000000000000464CD" class="pcalibre1 calibre8 pcalibre">errno</code> appropriately. On EOF, it returns 0. It returns a short count if the number of requested bytes exceeds the number of unread bytes in the read buffer. The similarity of the two functions makes it easy to build different kinds of buffered read functions by substituting <code id="P70004970270000000000000000464CE" data-uri="chapter10.xhtml#P70004970270000000000000000464CE" class="pcalibre1 calibre8 pcalibre">rio_read</code> for <code id="P70004970270000000000000000464CF" data-uri="chapter10.xhtml#P70004970270000000000000000464CF" class="pcalibre1 calibre8 pcalibre">read</code>. For example, the <code id="P70004970270000000000000000464D0" data-uri="chapter10.xhtml#P70004970270000000000000000464D0" class="pcalibre1 calibre8 pcalibre">rio_readnb</code> function in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079F7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.8</span></a> has the same structure as <code id="P70004970270000000000000000464D1" data-uri="chapter10.xhtml#P70004970270000000000000000464D1" class="pcalibre1 calibre8 pcalibre">rio_readn</code>, with <code id="P70004970270000000000000000464D2" data-uri="chapter10.xhtml#P70004970270000000000000000464D2" class="pcalibre1 calibre8 pcalibre">rio_read</code> substituted for read. Similarly, the <code id="P70004970270000000000000000464D3" data-uri="chapter10.xhtml#P70004970270000000000000000464D3" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> routine in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000079F7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.8</span></a> calls <code id="P70004970270000000000000000464D4" data-uri="chapter10.xhtml#P70004970270000000000000000464D4" class="pcalibre1 calibre8 pcalibre">rio_read</code> at most <code id="P70004970270000000000000000464D5" data-uri="chapter10.xhtml#P70004970270000000000000000464D5" class="pcalibre1 calibre8 pcalibre">maxlen-1</code> times. Each call returns 1 byte from the read buffer, which is then checked for being the terminating newline.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000079F7" data-uri="chapter10.xhtml#P70004970270000000000000000079F7">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000079F8" title="902" data-uri="chapter10.xhtml#P70004970270000000000000000079F8" epub:type="pagebreak"></span>

<pre id="P70004970270000000000000000464D6" data-uri="chapter10.xhtml#P70004970270000000000000000464D6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464D7" data-uri="chapter10.xhtml#P70004970270000000000000000464D7" class="calibre10 pcalibre pcalibre1">
1	ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen)
2	{
3		int n, rc;
4		char c, *bufp = usrbuf;
5	
6		for (n = 1; n &lt; maxlen; n++) {
7			if ((rc = rio_read(rp, &amp;c, 1)) == 1) {
8				*bufp++ = c;
9				if (c == '\n') {
10					n++;
11					break;
12				}
13			} else if (rc == 0) {
14				if (n == 1)
15					return 0;	/* EOF, no data read */
16				else
17					break;		/* EOF, some data was read */
18			} else
19				return âˆ’1;		/* Error */
20		}
21		*bufp = 0;
22		return n-1;
23	}
</code></pre>


<pre id="P70004970270000000000000000464D8" data-uri="chapter10.xhtml#P70004970270000000000000000464D8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464D9" data-uri="chapter10.xhtml#P70004970270000000000000000464D9" class="calibre10 pcalibre pcalibre1">
1	ssize_t <code id="P70004970270000000000000000464DA" data-uri="chapter10.xhtml#P70004970270000000000000000464DA" class="pcalibre1 calibre8 pcalibre">rio_readn</code>b(rio_t *rp, void *usrbuf, size_t n)
2	{
3		size_t nleft = n;
4		ssize_t nread;
5		char *bufp = usrbuf;
6	
7		while (nleft &gt; 0) {
8		if ((nread = rio_read(rp, bufp, nleft)) &lt; 0)
9			return âˆ’1;	/* errno set by read() */
10		else if (nread == 0)
11			break;		/*EOF */
12		nleft -= nread;
13		bufp += nread;
14		}
15		return (n - nleft);	/* Return &gt;= 0 */
16	}
</code></pre>

<figcaption id="P70004970270000000000000000464DB" data-uri="chapter10.xhtml#P70004970270000000000000000464DB" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000464DC" data-uri="chapter10.xhtml#P70004970270000000000000000464DC" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.8 </span>The <code id="P70004970270000000000000000464DD" data-uri="chapter10.xhtml#P70004970270000000000000000464DD" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> and <code id="P70004970270000000000000000464DE" data-uri="chapter10.xhtml#P70004970270000000000000000464DE" class="pcalibre1 calibre8 pcalibre">rio_readnb</code> functions.</h1></header>
</figcaption>
</figure>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007A02" data-uri="chapter10.xhtml#P7000497027000000000000000007A02"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P70004970270000000000000000464DF" data-uri="chapter10.xhtml#P70004970270000000000000000464DF" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007A04" title="903" data-uri="chapter10.xhtml#P7000497027000000000000000007A04" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Origins of the Rio package</h1></header>
<p id="P70004970270000000000000000464E0" data-uri="chapter10.xhtml#P70004970270000000000000000464E0" class="pcalibre calibre3 pcalibre1">The R<span class="smallcaps pcalibre pcalibre1">io </span>functions are inspired by the <code id="P70004970270000000000000000464E1" data-uri="chapter10.xhtml#P70004970270000000000000000464E1" class="pcalibre1 calibre8 pcalibre">readline, readn</code>, and <code id="P70004970270000000000000000464E2" data-uri="chapter10.xhtml#P70004970270000000000000000464E2" class="pcalibre1 calibre8 pcalibre">writen</code> functions described by W. Richard Stevens in his classic network programming text [110]. The <code id="P70004970270000000000000000464E3" data-uri="chapter10.xhtml#P70004970270000000000000000464E3" class="pcalibre1 calibre8 pcalibre">rio_readn</code> and <code id="P70004970270000000000000000464E4" data-uri="chapter10.xhtml#P70004970270000000000000000464E4" class="pcalibre1 calibre8 pcalibre">rio_writen</code> functions are identical to the Stevens <code id="P70004970270000000000000000464E5" data-uri="chapter10.xhtml#P70004970270000000000000000464E5" class="pcalibre1 calibre8 pcalibre">readn</code> and <code id="P70004970270000000000000000464E6" data-uri="chapter10.xhtml#P70004970270000000000000000464E6" class="pcalibre1 calibre8 pcalibre">writen</code> functions. However, the Stevens <code id="P70004970270000000000000000464E7" data-uri="chapter10.xhtml#P70004970270000000000000000464E7" class="pcalibre1 calibre8 pcalibre">readline</code> function has some limitations that are corrected in R<span class="smallcaps pcalibre pcalibre1">io</span>. First, because <code id="P70004970270000000000000000464E8" data-uri="chapter10.xhtml#P70004970270000000000000000464E8" class="pcalibre1 calibre8 pcalibre">readline</code> is buffered and <code id="P70004970270000000000000000464E9" data-uri="chapter10.xhtml#P70004970270000000000000000464E9" class="pcalibre1 calibre8 pcalibre">readn</code> is not, these two functions cannot be used together on the same descriptor. Second, because it uses a <code id="P70004970270000000000000000464EA" data-uri="chapter10.xhtml#P70004970270000000000000000464EA" class="pcalibre1 calibre8 pcalibre">static</code> buffer, the Stevens <code id="P70004970270000000000000000464EB" data-uri="chapter10.xhtml#P70004970270000000000000000464EB" class="pcalibre1 calibre8 pcalibre">readline</code> function is not thread-safe, which required Stevens to introduce a different thread-safe version called <code id="P70004970270000000000000000464EC" data-uri="chapter10.xhtml#P70004970270000000000000000464EC" class="pcalibre1 calibre8 pcalibre">readline_r</code>. We have corrected both of these flaws with the <code id="P70004970270000000000000000464ED" data-uri="chapter10.xhtml#P70004970270000000000000000464ED" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> and <code id="P70004970270000000000000000464EE" data-uri="chapter10.xhtml#P70004970270000000000000000464EE" class="pcalibre1 calibre8 pcalibre">rio_readnb</code> functions, which are mutually compatible and thread-safe.</p>
</aside>
</section>
</section></body></html>
