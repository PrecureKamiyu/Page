<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>43.2 Writing Sequentially And Effectively</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part479.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part481.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">43.2 Writing Sequentially And Effectively</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Unfortunately, writing to disk sequentially is not (alone) enough to guarantee efficient writes. For example, imagine if we wrote a single block to address <span class="s43">A</span>, at time <span class="s43">T </span>. We then wait a little while, and write to the disk at address <span class="s43">A </span><span class="s44">+ 1 </span>(the next block address in sequential order), but at time <span class="s43">T </span><span class="s44">+ </span><span class="s43">δ</span>. In-between the first and second writes, unfortunately, the disk has rotated; when you issue the second write, it will thus wait for most of a rotation before being committed (specifically, if the rotation <span class="s61">takes time </span><span class="s57">T</span><span class="s58">rotation</span><span class="s61">, the disk will wait </span><span class="s57">T</span><span class="s58">rotation </span><span class="s60">− </span><span class="s57">δ </span><span class="s61">before it can commit </span>the second write to the disk surface). And thus you can hopefully see that simply writing to disk in sequential order is not enough to achieve peak performance; rather, you must issue a large number of <i>contiguous </i>writes (or one large write) to the drive in order to achieve good write performance.</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">To achieve this end, LFS uses an ancient technique known as <b>write</b></p><p class="s27" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">buffering<span class="s35">1</span><span class="p">. Before writing to the disk, LFS keeps track of updates in memory; when it has received a sufficient number of updates, it writes them to disk all at once, thus ensuring efficient use of the disk.</span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The large chunk of updates LFS writes at one time is referred to by the name of a <b>segment</b>. Although this term is over-used in computer systems, here it just means a large-ish chunk which LFS uses to group writes. Thus, when writing to disk, LFS buffers updates in an in-memory segment, and then writes the segment all at once to the disk. As long as the segment is large enough, these writes will be efficient.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Here is an example, in which LFS buffers two sets updates into a small segment; actual segments are larger (a few MB). The first update is of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_633.png"/></span></p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 13pt;line-height: 92%;text-align: justify;">1<span class="s12">Indeed, it is hard to find a good citation for this idea, since it was likely invented by many and very early on in the history of computing. For a study of the benefits of write buffering, see Solworth and Orji [SO90]; to learn about its potential harms, see Mogul [M94].</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">four block writes to file <span class="s43">j</span>; the second is one block being added to file <span class="s43">k</span>. LFS then commits the entire segment of seven blocks to disk at once. The resulting on-disk layout of these blocks is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="356" height="1" alt="image" src="Image_634.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="356" height="23" alt="image" src="Image_635.png"/></span></p><p class="s91" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">blk[0]:A5</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">D<span class="s219">[k,0]</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="padding-left: 3pt;text-indent: 0pt;line-height: 7pt;text-align: left;">blk[0]:A0</p><p class="s91" style="padding-left: 3pt;text-indent: 0pt;line-height: 7pt;text-align: left;">blk[1]:A1</p><p class="s91" style="padding-left: 3pt;text-indent: 0pt;line-height: 7pt;text-align: left;">blk[2]:A2</p><p class="s91" style="padding-left: 3pt;text-indent: 0pt;line-height: 7pt;text-align: left;">blk[3]:A3</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">D<span class="s219">[j,3]</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">D<span class="s219">[j,2]</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">D<span class="s219">[j,1]</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">D<span class="s219">[j,0]</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="padding-left: 38pt;text-indent: 0pt;text-align: right;">A0   A1</p><p class="s91" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">A2   A3</p><p class="s91" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">Inode[j] A5</p><p class="s91" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">Inode[k]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part479.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part481.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
