<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>16.7  Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part301.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part303.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 9pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">16.7  <span style=" color: #00AEEF;">Summary</span></p><p class="s39" style="padding-top: 9pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Given a query, there are generally a variety of methods for computing the answer. It is the responsibility of the system to transform the query as entered by the user into an equivalent query that can be computed more eﬃciently. The process of ﬁnding a good strategy for processing a query is called </span><span class="s13">query optimization</span><span class="p">.</span></p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>The evaluation of complex queries involves many accesses to disk. Since the trans- fer of data from disk is slow relative to the speed of main memory and the <span class="s41">CPU </span>of the computer system, it is worthwhile to allocate a considerable amount of pro- cessing to choose a method that minimizes disk accesses.</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">There are a number of equivalence rules that we can use to transform an expression into an equivalent one. We use these rules to generate systematically all expressions equivalent to the given query.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Each relational-algebra expression represents a particular sequence of operations. The ﬁrst step in selecting a query-processing strategy is to ﬁnd a relational-algebra expression that is equivalent to the given expression and is estimated to cost less to execute.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The strategy that the database system chooses for evaluating an operation depends on the size of each relation and on the distribution of values within columns. So that they can base the strategy choice on reliable information, database systems may store statistics for each relation </span><span class="s13">r</span><span class="p">. These statistics include:</span></p><p class="s50" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: justify;">° <span class="s51">The number of tuples in the relation </span><span class="s13">r</span><span class="p">.</span></p><p class="s50" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: justify;">° <span class="s51">The size of a record (tuple) of relation </span><span class="s13">r </span><span class="p">in bytes.</span></p><p class="s50" style="padding-top: 4pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s51">The number of distinct values that appear in the relation </span><span class="s13">r </span><span class="p">for a particular attribute.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Most database systems use histograms to store the number of values for an at- tribute within each of several ranges of values. Histograms are often computed using sampling.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">These statistics allow us to estimate the sizes of the results of various operations, as well as the cost of executing the operations. Statistical information about relations is particularly useful when several indices are available to assist in the processing of a query. The presence of these structures has a signiﬁcant inﬂuence on the choice of a query-processing strategy.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Alternative evaluation plans for each expression can be generated by equivalence rules, and the cheapest plan across all expressions can be chosen. Several opti- mization techniques are available to reduce the number of alternative expressions and plans that need to be generated.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">We use heuristics to reduce the number of plans considered, and thereby to reduce the cost of optimization. Heuristic rules for transforming relational-algebra queries include “Perform selection operations as early as possible,” “Perform projections early,” and “Avoid Cartesian products.”</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Materialized views can be used to speed up query processing. Incremental view maintenance is needed to eﬃciently update materialized views when the underly- ing relations are modiﬁed. The diﬀerential of an operation can be computed by means of algebraic expressions involving diﬀerentials of the inputs of the opera- tion. Other issues related to materialized views include how to optimize queries by making use of available materialized views, and how to select views to be materi- alized.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">A number of advanced optimization techniques have been proposed, such as top- </span><span class="s13">K </span><span class="p">optimization, join minimization, optimization of updates, multiquery optimiza- tion, and parametric query optimization.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part301.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part303.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
