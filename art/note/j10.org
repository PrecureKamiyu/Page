* Process and Thread 
** What is process 

In simple terms, a process is an instance of a computer program that
is being executed by the operating system. It consists of the program
code, data and resources such as memory, file handles, network
connections, and other system resources that are allocated to it. Each
process has its own memory space and runs independently of other
processes. Processes are created by the operating system in response
to a request from a user or another program, and they can communicate
with other processes through interprocess communication
mechanisms. Examples of processes include web browsers, word
processors, and media players.

** What is process (不同演绎)

In computing, a process is an instance of a computer program that is
being executed by one or many threads1. It is close in meaning to a
task, a term used in some operating systems2. A process can initiate a
subprocess, which is called a child process (and the initiating
process is sometimes referred to as its parent)2. Would you like to
know more about processes?

reference:
1. https://en.wikipedia.org/wiki/Process_(computing)
2. https://www.techtarget.com/whatis/definition/process

** What is thread?

In computing, a *thread* is a lightweight process that can be executed
independently within a larger program. Threads share the same memory
space as the *parent process*, which allows them to access shared data
and communicate with other threads more efficiently than if each
thread had its own separate memory space.

Threads are useful for implementing parallelism in software, because
multiple threads can execute different parts of a program
simultaneously on multiple CPUs or CPU cores. This can result in
faster execution times for certain types of programs, such as those
that perform lengthy computations or I/O operations.

However, managing threads can be challenging, because they must be
synchronized to ensure that they don't interfere with each other and
cause race conditions, deadlocks, or other problems. As a result,
programmers often use higher-level threading libraries and frameworks
to simplify the process of creating and coordinating threads in their
software.

** What is thread? (不同演绎)

In computer programming, a thread is a small set of instructions
designed to be scheduled and executed by the CPU independently of the
parent process1. A thread of execution is the *smallest* sequence of
programmed instructions that can be managed independently by a
scheduler, which is typically a part of the operating system2.

reference: 
1. https://www.computerhope.com/jargon/t/thread.htm
2. https://en.wikipedia.org/wiki/Thread_(computing)
3. https://stackoverflow.com/questions/5201852/what-is-a-thread-really

** Compare thread with process (Could be useless)

A process and a thread are both related to the execution of software,
but they differ in several important ways:

Memory: A process has its own memory space, while threads share the
same memory space as the parent process.

Resources: A process is allocated its own set of resources, such as
file handles and network connections, while threads share these
resources with the parent process.

Creation: Processes are typically created using system calls provided
by the operating system, while threads can be created within a process
by the program itself using a threading library or framework.

Scheduling: Processes are scheduled independently by the operating
system, while threads are scheduled by the operating system within the
context of their parent process.

Context switching: Context switching between processes is more
expensive than context switching between threads, because a process
switch requires saving and restoring the entire state of the CPU,
while a thread switch only requires saving and restoring the state of
the CPU registers.

In summary, processes and threads have different properties and use
cases. Processes provide isolation between programs and enable
multiprocessing, while threads provide lightweight concurrency within
a single program.

* "Synchronized" keyword

** What is synchronized keyword? 

In Java, "*synchronized*" is a keyword that can be used to control
access to shared resources in a *multithreaded* environment. 

When a method or block of code is marked as synchronized, only one
thread can execute that code at a time, preventing multiple threads
from accessing the same resource simultaneously and causing data
inconsistencies or other issues.

For example, if you have a method that accesses a shared variable in a
multithreaded application, you could mark the method as synchronized
to ensure that only one thread can modify the variable at a time. This
helps to prevent *race conditions* and other synchronization problems.

In addition to synchronizing methods, Java also provides synchronized
blocks that allow you to synchronize specific sections of code rather
than entire methods. This can be useful in cases where you only need
to synchronize a small portion of a method's code.

** What do you mean "race conditions"? 

A race condition occurs when the behavior of a program depends on the
order and timing of events or operations, which can be unpredictable
in a multithreaded environment. In other words, it is a situation
where two or more threads try to access a shared resource at the same
time, resulting in unexpected or incorrect behavior.

** How to use synchronized keyword? 

You can use ~synchronized (foo.class) { \\code here }~ to write a
block of the code that is synchronized. Note the ~synchronized
(foo.class)~ says that the class is synchronized, so that such code
can be run in one thread regardless which instance is the runned code
is in. 

You may also use ~

* 同步, 死锁
* 任务创建和线程池

* 多线程应用---生产者和消费者模式