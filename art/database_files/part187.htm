<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.5   Client-Side Code and Web Services</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part186.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part188.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">9.5   <span style=" color: #00AEEF;">Client-Side Code and Web Services</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The two most widely used classes of user interfaces today are the web interfaces and mobile application interfaces.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">While early generation web browsers only displayed <span class="s44">HTML </span>code, the need was soon felt to allow code to run on the browsers. <span class="s63">Client-side scripting languages </span>are lan- guages designed to be executed on the client’s web browser. The primary motivation for such scripting languages is ﬂexible interaction with the user, providing features beyond the limited interaction power provided by <span class="s44">HTML </span>and <span class="s44">HTML </span>forms. Further, executing programs at the client site speeds up interaction greatly compared to every interaction being sent to a server site for processing.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s63">JavaScript </span>language is by far the most widely used client-side scripting lan- guage. The current generation of web interfaces uses the JavaScript scripting language extensively to construct sophisticated user interfaces.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Any client-side interface needs to store and retrieve data from the back end. Di- rectly accessing a database is not a good idea, since it not only exposes low-level details, but it also exposes the database to attacks. Instead, back ends provide access to store and retrieve data through web services. We discuss web services in Section 9.5.2.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Mobile applications are very widely used, and user interfaces for mobile devices are very important today. Although we do not cover mobile application development in this book, we oﬀer pointers to some mobile application development frameworks in Section 9.5.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.5.1 JavaScript</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">JavaScript is used for a variety of tasks, including validation, ﬂexible user interfaces, and interaction with web services, which we now describe.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">9.5.1.1 Input Validation</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Functions written in JavaScript can be used to perform error checks (validation) on user input, such as a date string being properly formatted, or a value entered (such as age) being in an appropriate range. These checks are carried out on the browser as data are entered even before the data are sent to the web server.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">With <span class="s44">HTML</span>5, many validation constraints can be speciﬁed as part of the input tag.</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">For example, the following <span class="s44">HTML </span>code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-left: 117pt;text-indent: 0pt;text-align: left;">&lt;<span class="s49">input type=&quot;number&quot; name=&quot;credits&quot; size=&quot;2&quot; min=&quot;1&quot; max=&quot;15&quot;</span>&gt;</p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">ensures that the input for the parameter “credits” is a number between 1 and 15. More complex validations that cannot be performed using <span class="s44">HTML</span>5 features are best done using JavaScript.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 9.11 shows an example of a form with a JavaScript function used to validate a form input. The function is declared in the <span class="s49">head </span>section of the <span class="s44">HTML </span>document. The form accepts a start and an end date. The validation function ensures that the start date</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2252.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;html&gt;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;head&gt;</p><p class="s49" style="padding-left: 118pt;text-indent: -21pt;text-align: left;">&lt;script type=&quot;text/javascript&quot;&gt; function validate() {</p><p class="s49" style="padding-left: 139pt;text-indent: 0pt;text-align: left;">var startdate = new Date (document.getElementById(&quot;start&quot;).value); var enddate = new Date (document.getElementById(&quot;end&quot;).value); if(startdate &gt; enddate) {</p><p class="s49" style="padding-left: 160pt;text-indent: 0pt;text-align: left;">alert(&quot;Start date is &gt; end date&quot;); return false;</p><p class="s49" style="padding-left: 139pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p class="s49" style="padding-left: 106pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;/script&gt;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;/head&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;body&gt;</p><p class="s49" style="padding-left: 118pt;text-indent: -21pt;text-align: left;">&lt;form action=&quot;submitDates&quot; onsubmit=&quot;return validate()&quot;&gt; Start Date: &lt;input type=&quot;date&quot; id=&quot;start&quot;&gt;&lt;br /&gt;</p><p class="s49" style="padding-left: 118pt;text-indent: 0pt;text-align: left;">End Date : &lt;input type=&quot;date&quot; id=&quot;end&quot;&gt;&lt;br /&gt;</p><p class="s49" style="padding-left: 118pt;text-indent: 0pt;text-align: left;">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;/body&gt;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">&lt;/html&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2253.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.11 <span class="s74">Example of JavaScript used to validate form input.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">is not greater than the end date. The <span class="s49">form </span>tag speciﬁes that the validation function is to be invoked when the form is submitted. If the validation fails, an alert box is shown to the user, and if it succeeds, the form is submitted to the server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.5.1.2 Responsive User Interfaces</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The most important beneﬁt of JavaScript is the ability to create highly responsive user interfaces within a browser using JavaScript. The key to building such a user interface is the ability to dynamically modify the <span class="s44">HTML </span>code being displayed by using JavaScript. The browser parses <span class="s44">HTML </span>code into an in-memory tree structure deﬁned by a stan- dard called the <span class="s63">Document Object Model </span>(<span class="s64">DOM</span>). JavaScript code can modify the tree structure to carry out certain operations. For example, suppose a user needs to enter a number of rows of data, for example multiple items in a single bill. A table containing text boxes and other form input methods can be used to gather user input. The table may have a default size, but if more rows are needed, the user may click on a button labeled (for example) “Add Item.” This button can be set up to invoke a JavaScript function that modiﬁes the <span class="s44">DOM </span>tree by adding an extra row in the table.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Although the JavaScript language has been standardized, there are diﬀerences be- tween browsers, particularly in the details of the <span class="s44">DOM </span>model. As a result, JavaScript code that works on one browser may not work on another. To avoid such problems, it is best to use a JavaScript library, such as the JQuery library, which allows code to be written in a browser-independent way. Internally, the functions in the library can ﬁnd out which browser is in use and send appropriately generated JavaScript to the browser.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">JavaScript libraries such as JQuery provide a number of <span class="s44">UI </span>elements, such as menus, tabs, widgets such as sliders, and features such as autocomplete, that can be created and executed using library functions.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s44">HTML</span>5 standard supports a number of features for rich user interaction, in- cluding drag-and-drop, geolocation (which allows the user’s location to be provided to the application with user permission), allowing customization of the data/interface based on location. <span class="s44">HTML</span>5 also supports Server-Side Events (<span class="s44">SSE</span>), which allows a back- end to notify the front end when some event occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.5.1.3 Interfacing with Web Services</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Today, JavaScript is widely used to create dynamic web pages, using several technolo- gies that are collectively called <span class="s63">Ajax</span>. Programs written in JavaScript can communicate with the web server asynchronously (that is, in the background, without blocking user interaction with the web browser), and can fetch data and display it. The <i>JavaScript Object Notation</i>, or <span class="s44">JSON</span>, representation described in Section 8.1.2 is the most widely used data format for transferring data, although other formats such as <span class="s44">XML </span>are also used.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The role of the code for the above tasks, which runs at the application server, is to send data to the JavaScript code, which then renders the data on the browser.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Such backend services, which serve the role of functions which can be invoked to fetch required data, are known as <i>web services</i>. Such services can be implemented using Java Servlets, Python, or any of a number of other language frameworks.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As an example of the use of Ajax, consider the autocomplete feature implemented by many web applications. As the user types a value in a text box, the system suggests completions for the value being typed. Such autocomplete is very useful for helping a user choose a value from a large number of values where a drop-down list would not be feasible. Libraries such as jQuery provide support for autocomplete by associating a function with a text box; the function takes partial input in the box, connected to a web back end to get possible completions, and displays them as suggestions for the autocomplete.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The JavaScript code shown in Figure 9.12 uses the jQuery library to implement autocomplete and the DataTables plug-in for the jQuery library to provide a tabular display of data. The <span class="s44">HTML </span>code has a text input box for name, which has an <span class="s49">id </span>attribute set to <span class="s49">name</span>. The script associates an autocomplete function from the jQuery library with the text box by using $(&quot;#name&quot;) syntax of jQuery to locate the <span class="s44">DOM </span>node for text box with <span class="s49">id </span>“name”, and then associating the <span class="s49">autocomplete </span>function with the node. The attribute <span class="s49">source </span>passed to the function identiﬁes the web service that must be invoked to get values for the autocomplete functionality. We assume that a servlet</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2254.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s49">/autocomplete name </span>has been deﬁned, which accepts a parameter <span class="s49">term </span>containing the letters typed so far by the user, even as they are being typed. The servlet should return a <span class="s44">JSON </span>array of names of students/instructors that match the letters in the <span class="s49">term </span>parameter.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2255.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2256.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2257.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The JavaScript code also illustrates how data can be retrieved from a web service and then displayed. Our sample code uses the DataTables jQuery plug-in; there are a number of other alternative libraries for displaying tabular data. We assume that the <span class="s49">person query ajax </span>Servlet, which is not shown, returns the ID, name, and department name of students or instructors with a given name, as we saw earlier in Figure 9.7, but encoded in <span class="s44">JSON </span>as an object with attribute <span class="s49">data </span>containing an array of rows; each row is a <span class="s44">JSON </span>object with attributes <span class="s49">id</span>, <span class="s49">name</span>, and <span class="s49">dept name</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2258.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2259.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The line starting with <span class="s49">myTable </span>shows how the jQuery plug-in DataTable is associ- ated with the <span class="s44">HTML </span>table shown later in the ﬁgure, whose identiﬁer is <span class="s49">personTable</span>. When the button “Show details” is clicked, the function <span class="s49">loadTableAsync() </span>is invoked. This function ﬁrst creates a URL string <span class="s49">url </span>that is used to invoke <span class="s49">person query ajax </span>with values for person type and name. The function <span class="s49">ajax.url(url).load() </span>invoked on <span class="s49">myTable </span>ﬁlls the rows of the table using the <span class="s44">JSON </span>data fetched from the web service whose <span class="s44">URL </span>we created above. This happens asynchronously; that is, the function re- turns immediately, but when the data have been fetched, the table rows are ﬁlled with the returned data.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 9.13 shows a screenshot of a browser displaying the result of the code in Figure 9.12.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As another example of the use of Ajax, consider a web site with a form that allows you to select a country, and once a country has been selected, you are allowed to select</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2260.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-top: 2pt;padding-left: 119pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">html</span>&gt; &lt;<span class="s49">head</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">script src=&quot;https://code.jquery.com/jquery-3.3.1.js&quot;</span>&gt; &lt;<span class="s49">/script</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">script src=&quot;https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js&quot;</span>&gt;&lt;<span class="s49">/script</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">script src=&quot;https://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;</span>&gt;&lt;<span class="s49">/script</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">script src=&quot;https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js&quot;</span>&gt;&lt;<span class="s49">/script</span>&gt;</p><p class="s186" style="padding-left: 140pt;text-indent: -21pt;line-height: 62%;text-align: left;">&lt;<span class="s49">link rel=&quot;stylesheet&quot; href=&quot;https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css&quot; /</span>&gt;</p><p class="s186" style="padding-left: 140pt;text-indent: -21pt;line-height: 62%;text-align: left;">&lt;<span class="s49">link rel=&quot;stylesheet&quot; href=&quot;https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css&quot;/</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">script</span>&gt;</p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;line-height: 9pt;text-align: left;">var myTable;</p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;text-align: left;">$(document).ready(function() {</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2261.png"/></span></p><p class="s49" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">$(&quot;#name&quot;).autocomplete({ source: &quot;/autocomplete name&quot; }); myTable = $(&quot;#personTable&quot;).DataTable({</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2262.png"/></span></p><p class="s49" style="padding-left: 162pt;text-indent: 0pt;line-height: 12pt;text-align: left;">columns: [{data:&quot;id&quot;}, {data:&quot;name&quot;}, {data:&quot;dept name&quot;}]</p><p class="s49" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">});</p><p class="s49" style="padding-left: 141pt;text-indent: 0pt;text-align: left;">});</p><p class="s49" style="padding-left: 141pt;text-indent: 0pt;text-align: left;">function loadTableAsync() {</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2263.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2264.png"/></span></p><p class="s49" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">var params = {persontype:$(&quot;#persontype&quot;).val(), name:$(&quot;#name&quot;).val()}; var url = &quot;/person query ajax?&quot; + jQuery.param(params); myTable.ajax.url(url).load();</p><p class="s49" style="text-indent: 0pt;line-height: 11pt;text-align: center;">}</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 15pt;text-align: left;">&lt;<span class="s49">/script</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 13pt;text-align: left;">&lt;<span class="s49">/head</span>&gt; &lt;<span class="s49">body</span>&gt;</p><p class="s49" style="padding-left: 84pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Search for:</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 15pt;text-align: left;">&lt;<span class="s49">select id=&quot;persontype&quot;</span>&gt;</p><p class="s186" style="padding-left: 141pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">option value=&quot;student&quot; selected</span>&gt;<span class="s49">Student </span>&lt;<span class="s49">/option</span>&gt;</p><p class="s186" style="padding-left: 141pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">option value=&quot;instructor&quot;</span>&gt; <span class="s49">Instructor </span>&lt;<span class="s49">/option</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/select</span>&gt; &lt;<span class="s49">br</span>&gt;</p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Name: <span class="s186">&lt;</span>input type=text size=20 id=&quot;name&quot;<span class="s186">&gt;</span></p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">button onclick=&quot;loadTableAsync()&quot;</span>&gt; <span class="s49">Show details </span>&lt;<span class="s49">/button</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">table id=&quot;personTable&quot; border=&quot;1&quot;</span>&gt;</p><p class="s186" style="padding-left: 140pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">thead</span>&gt;</p><p class="s186" style="padding-left: 162pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">tr</span>&gt; &lt;<span class="s49">th</span>&gt;<span class="s49">ID</span>&lt;<span class="s49">/th</span>&gt; &lt;<span class="s49">th</span>&gt;<span class="s49">Name</span>&lt;<span class="s49">/th</span>&gt; &lt;<span class="s49">th</span>&gt;<span class="s49">Dept. Name</span>&lt;<span class="s49">/th</span>&gt; &lt;<span class="s49">/tr</span>&gt;</p><p class="s186" style="padding-left: 141pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/thead</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/table</span>&gt;</p><p class="s186" style="padding-left: 119pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/body</span>&gt; &lt;<span class="s49">/html</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2265.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 84pt;text-indent: 0pt;text-align: center;">Figure 9.12 <span class="s74">HTML page using JavaScript and Ajax.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: center;">a state from a list of states in that country. Until the country is selected, the drop-down list of states is empty. The Ajax framework allows the list of states to be downloaded</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 132pt;text-indent: 0pt;text-align: left;"><span><img width="383" height="179" alt="image" src="Image_2266.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.13 <span class="s74">Screenshot of display generated by Figure 9.12.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">from the web site in the background when the country is selected, and as soon as the list has been fetched, it is added to the drop-down list, which allows you to select the state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.5.2 Web Services</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A <span class="s63">web service </span>is an application component that can be invoked over the web and func- tions, in eﬀect, like an application programming interface. A web service request is sent using the <span class="s44">HTTP </span>protocol, it is executed at an application server, and the results are sent back to the calling program.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Two approaches are widely used to implement web services. In the simpler ap- proach, called <span class="s63">Representation State Transfer </span>(or <span class="s64">REST</span>), web service function calls are executed by a standard <span class="s44">HTTP </span>request to a <span class="s44">URL </span>at an application server, with parameters sent as standard <span class="s44">HTTP </span>request parameters. The application server executes the request (which may involve updating the database at the server), generates and encodes the result, and returns the result as the result of the <span class="s44">HTTP </span>request. The most widely used encoding for the results today is the <span class="s44">JSON </span>representation, although <span class="s44">XML</span>, which we saw earlier in Section 8.1.3, is also used. The requestor parses the returned page to access the returned data.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In many applications of such <span class="s44">REST</span>ful web services (i.e., web services using <span class="s44">REST</span>), the requestor is JavaScript code running in a web browser; the code updates the browser screen using the result of the function call. For example, when you scroll the display on a map interface on the web, the part of the map that needs to be newly displayed may be fetched by JavaScript code using a <span class="s44">REST</span>ful interface and then displayed on the screen.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">While some web services are not publicly documented and are used only inter- nally by speciﬁc applications, other web services have their interfaces documented and can be used by any application. Such services may allow use without any restriction,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">may require users to be logged in before accessing the service, or may require users or application developers to pay the web service provider for the privilege of using the service.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Today, a very large variety of <span class="s44">REST</span>ful web services are available, and most front-end applications use one or more such services to perform backend activities. For exam- ple, your web-based email system, your social media web page, or your web-based map service would almost surely be built with JavaScript code for rendering and would use backend web services to fetch data as well as to perform updates. Similarly, any mobile app that stores data at the back end almost surely uses web services to fetch data and to perform updates.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Web services are also increasingly used at the backend, to make use of function- alities provided by other backend systems. For example, web-based storage systems provide a web service <span class="s44">API </span>for storing and retrieving data; such services are provided by a number of providers, such as Amazon S3, Google Cloud Storage, and Microsoft Azure. They are very popular with application developers since they allow storage of very large amounts of data, and they support a very large number of operations per second, allowing scalability far beyond what a centralized database can support.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There are many more such web-service <span class="s44">API</span>s. For example, text-to-speech, speech recognition, and vision web-service <span class="s44">API</span>s allow developers to construct applications incorporating speech and image recognition with very little development eﬀort.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A more complex and less frequently used approach, sometimes referred to as “Big Web Services,” uses <span class="s44">XML </span>encoding of parameters as well as results, has a formal def- inition of the web <span class="s44">API </span>using a special language, and uses a protocol layer built on top of the <span class="s44">HTTP </span>protocol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.5.3 Disconnected Operation</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Many applications wish to support some operations even when a client is disconnected from the application server. For example, a student may wish to complete an applica- tion form even if her laptop is disconnected from the network but have it saved back when the laptop is reconnected. As another example, if an email client is built as a web application, a user may wish to compose an email even if her laptop is disconnected from the network and have it sent when it is reconnected. Building such applications requires local storage in the client machine.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s44">HTML</span>5 standard supports local storage, which can be accessed using JavaScript. The code:</p><p class="s49" style="padding-top: 8pt;padding-left: 142pt;text-indent: 0pt;text-align: left;">if (typeof(Storage) !== &quot;undefined&quot;) { // browser supports local storage</p><p class="s49" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">...</p><p class="s49" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">checks if the browser supports local storage. If it does, the following functions can be used to store, load, or delete values for a given key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 211pt;text-indent: 0pt;text-align: left;">localStorage.setItem(key, value) localStorage.getItem(key) localStorage.deleteItem(key)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">To avoid excessive data storage, the browser may limit a web site to storing at most some amount of data; the default maximum is typically 5 megabytes.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The above interface only allows storage/retrieval of key/value pairs. Retrieval re- quires that a key be provided; otherwise the entire set of key/value pairs will need to be scanned to ﬁnd a required value. Applications may need to store tuples indexed on multiple attributes, allowing eﬃcient access based on values of any of the attributes. <span class="s44">HTML</span>5 supports IndexedDB, which allows storage of JSON objects with indices on multiple attributes. IndexedDB also supports schema versions and allows the developer to provide code to migrate data from one schema version to the next version.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.5.4 Mobile Application Platforms</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Mobile applications (or mobile apps, for short) are widely used today, and they form the primary user interface for a large class of users. The two most widely used mo- bile platforms today are Android and iOS. Each of these platforms provides a way of building applications with a graphical user interface, tailored to small touch-screen de- vices. The graphical user interface provides a variety of standard <span class="s44">GUI </span>features such as menus, lists, buttons, check boxes, progress bars, and so on, and the ability to display text, images, and video.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Mobile apps can be downloaded and stored and used later. Thus, the user can download apps when connected to a high-speed network and then use the app with a lower-speed network. In contrast, web apps may get downloaded when they are used, resulting in a lot of data transfer when a user may be connected to a lower-speed net- work or a network where data transfer is expensive. Further, mobile apps can be better tuned to small-sized devices than web apps, with user interfaces that work well on small devices. Mobile apps can also be compiled to machine code, resulting in lower power demands than web apps. More importantly, unlike (earlier generation) web apps, mo- bile apps can store data locally, allowing oﬄine usage. Further, mobile apps have a well-developed authorization model, allowing them to use information and device fea- tures such as location, cameras, contacts, and so on with user authorization.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">However, one of the drawbacks of using mobile-app interfaces is that code written for the Android platform can only run on that platform and not on iOS, and vice versa. As a result, developers are forced to code every application twice, once for Android and once for iOS, unless they decide to ignore one of the platforms completely, which is not very desirable.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The ability to create applications where the same high-level code can run on ei- ther Android or iOS is clearly very important. The <i>React Native framework </i>based on JavaScript, developed by Facebook, and the <i>Flutter framework </i>based on the <i>Dart </i>lan- guage developed by Google, are designed to allow cross-platform development. (Dart</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark190">is a language optimized for developing user interfaces, providing features such as asyn- chronous function invocation and functions on streams.) Both frameworks allow much of the application code to be common for both Android and iOS, but some function- ality can be made speciﬁc to the underlying platform in case it is not supported in the platform-independent part of the framework.</a><a name="bookmark210">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">With the wide availability of high-speed mobile networks, some of the motivation for using mobile apps instead of web apps, such as the ability to download ahead of time, is not as important anymore. A new generation of web apps, called <span class="s63">Progressive Web Apps </span>(<span class="s64">PWA</span>) that combine the beneﬁts of mobile apps with web apps is seeing increasing usage. Such apps are built using JavaScript and <span class="s44">HTML</span>5 and are tailored for mobile devices.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A key enabling feature for <span class="s44">PWA</span>s is the <span class="s44">HTML</span>5 support for local data storage, which allows apps to be used even when the device is oﬄine. Another enabling feature is the support for compilation of JavaScript code; compilation is restricted to code that fol- lows a restricted syntax, since compilation of arbitrary JavaScript code is not practical. Such compilation is typically done just-in-time, that is, it is done when the code needs to be executed, or if it has already been executed multiple times. Thus, by writing <span class="s44">CPU</span>- heavy parts of a web application using only JavaScript features that allow compilation, it is possible to ensure <span class="s44">CPU </span>and energy-eﬃcient execution of the code on a mobile device.</p><p class="s42" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">PWA<span class="s43">s also make use of </span>HTML<span class="s43">5 service workers, which allow a script to run in the background in the browser, separate from a web page. Such service workers can be used to perform background synchronization operations between the local store and a web service, or to receive or push notiﬁcations from a backend service. </span>HTML<span class="s43">5 also allows apps to get device location (after user authorization), allowing </span>PWA<span class="s43">s to use location information.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Thus, <span class="s44">PWA</span>s are likely to see increasing use, replacing many (but certainly not all) of the use cases for mobile apps.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part186.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part188.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
