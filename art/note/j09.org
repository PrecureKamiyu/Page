* MVC 模式

** What is Java Swing? 

Java Swing is a lightweight Java graphical user interface (GUI) widget
toolkit that includes a rich set of widgets. It is part of the Java
Foundation Classes (JFC) and includes several packages for developing
rich desktop applications in Java. Swing provides a rich set of
widgets and packages to make sophisticated GUI components for Java
applications. Swing is a Java Foundation Classes [JFC] library and an
extension of the Abstract Window Toolkit *[AWT]*. Swing offers
much-improved functionality over AWT, new components, expanded
components features, and excellent event handling with drag-and-drop
support.

不同平台上 AWT 用户有不同的 Bug. Swing 使用纯 Java 实现. 不再依赖于本
地平台的图形界面

** What is the advantages of Java Swing?

Some of the key advantages of Java Swing are:

- Platform Independence: Swing is written entirely in Java, which
  makes it platform-independent. It can run on any platform that
  supports Java, without any modification _1_.

- Lightweight: Swing components are lightweight and can be easily
  customized _2_.

- Pluggable Look and Feel: Swing provides a pluggable look and feel
  that allows developers to change the appearance of their
  applications without changing the code _2_.

- Rich Set of Components: Swing provides a rich set of components such
  as text boxes, buttons, split panes, and tables _3_.

- Event Handling: Swing provides excellent event handling with
  drag-and-drop support.

reference: 
1. [[https://www.prepbytes.com/blog/java/introduction-to-java-swing/]]
2. [[https://www.geeksforgeeks.org/introduction-to-java-swing/]]
3. [[https://devdojo.com/anvesh_kumar/the-battle-of-javafx-vs-java-swing-which-one-is-best-for-you]]

** What is MVC pattern? 

*MVC* (*Model-View-Controller*) is a pattern in software design commonly
used to implement user interfaces, data, and controlling logic1. It
emphasizes a separation between the software’s business logic and
display _1_. This “separation of concerns” provides for a better division
of labor and improved maintenance _1_. The pattern divides an interactive
application into three components _2_:

1. Model: The model represents the data and business logic of the
   application. 

   It represents the data and business rules that govern how the data
   is stored, processed, and manipulated. The model component is
   responsible for retrieving data from a database or other data
   source, processing that data, and storing it back in the
   database. It also contains the application’s business logic, which
   defines how the data should be processed. The model component is
   independent of both the view and controller components. This means
   that changes to the view or controller components do not affect the
   model component.

2. View: The view represents the user interface of the application.

3. Controller: The controller acts as an intermediary between the
   model and view components.  

   It receives input from the user and updates both the model and view
   components. The controller component is responsible for
   interpreting user input and determining how that input should be
   processed. It then updates the model component with any changes
   that need to be made. Finally, it updates the view component to
   reflect any changes that have been made to the model component.

The model component manages the data and business logic of the
application _3_. The view component displays the data to the user
_3_. The controller component receives input from the user and updates
both the model and view components _3_.

reference: 
1. [[https://developer.mozilla.org/en-US/docs/Glossary/MVC]]
2. [[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]]
3. [[https://www.tutorialspoint.com/design_pattern/mvc_pattern.htm]]

Users interactive with the *Controller* to make input and watch the
things that is displayed by *View*. *Controller* passes the input to
the *Model*. The *Model* manipulates with the data and returns a
value. Then the *Controller* pass the return value to *View* to renew
the display content.

** What is component and container in Swing?

In Swing, a *container* is a component that holds other components
_1_. It provides a space where a component can be located and aids
with grouping related components together in the GUI _2_. A container is
responsible for displaying the components according to your
layout _1_. If a button is placed on the top left corner, every time the
window is resized, the button will still be on the top left corner _1_.

reference:
1. [[https://stackoverflow.com/questions/700314/what-is-the-use-of-container-in-swing]]
2. [[https://www.tutorialspoint.com/swing/swing_containers.htm]]


In Swing, a *component* can be defined as a control that can be
represented visually and is usually independent _1_. It has got a
specific functionality and is represented as an individual class in
Swing API _1_. Swing has a wide range of various components, including
buttons, check boxes, sliders, and list boxes _2_. For example, class
JButton in swing API is a button component and provides the
functionality of a button _1_.

reference: 
1. [[https://www.softwaretestinghelp.com/java/java-swing-tutorial/]]
2. [[https://zetcode.com/javaswing/basicswingcomponents/]]

** Heavyweight and Lightweight

In Java Swing, a *component* is an independent visual control that can
be added to a *container* and manipulated separately from other
components. Swing components are derived from the JComponent class and
provide functionality that is common to all components.

A *container* is a component that can hold other components inside
it. 

Swing supports two types of containers: *heavyweight* and *lightweight*
containers. Heavyweight containers are implemented by the operating
system’s windowing toolkit and are used for top-level containers such
as JFrame and JDialog. Lightweight containers are implemented
entirely in Java and are used for intermediate-level containers such
as JPanel.

** How to layout the windows in Swing?

Bing:

In Java Swing, layout managers are used to arrange components within a
container _1_. Layout managers are used to define how components
should be arranged on a container _2_. Java provides several layout
managers that can be used to arrange components on a container
_1_. Some of the commonly used layout managers are BorderLayout,
FlowLayout, GridLayout, CardLayout, GroupLayout and SpringLayout
_1_. You can set a panel’s layout manager using the JPanel
constructor _2_.

reference: 
1. [[https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html]]
2. [[https://docs.oracle.com/javase/tutorial/uiswing/layout/using.html]]

** Tell me an example of configuring layout using Swing.

Bing: 

Here’s an example of configuring layout using Swing:
#+BEGIN_SRC 
import java.awt.*;
import javax.swing.*;

public class LayoutExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Layout Example");
        // set exit if window closed
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // get the content pane. 
        Container contentPane = frame.getContentPane();
        // set the layout method.
        contentPane.setLayout(new BorderLayout());
        // initialize button.
        JButton button1 = new JButton("Button 1");
        JButton button2 = new JButton("Button 2");
        JButton button3 = new JButton("Button 3");
        // add button to contentPane.
        contentPane.add(button1, BorderLayout.NORTH);
        contentPane.add(button2, BorderLayout.CENTER);
        contentPane.add(button3, BorderLayout.SOUTH);
        // see the question below
        frame.pack();
        // make things visible
        frame.setVisible(true);
    }
}
#+END_SRC

This example uses the BorderLayout layout manager to arrange three buttons on a container. The buttons are added to the container using the add() method. The pack() method is used to resize the frame so that all the components are at their preferred size. The setVisible() method is used to make the frame visible.

*** What ~frame.pack()~ do in the example? 

The pack() method is defined as a Window class in Java and it sizes
the frame so that all its contents are at or above their preferred
sizes1. If you don’t set frame size there will be a 0 pixel width and
0 pixel height window/frame, so you won’t even see it1. The pack()
method is used to resize the frame so that all the components are at
their preferred size2.

reference: 
1. [[https://stackoverflow.com/questions/22982295/what-does-pack-do]]
2. [[https://stackoverflow.com/questions/25335064/how-do-i-use-jframe-pack]]

*** What does ~frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)~ do in your example? 

The setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) method sets the
default close operation for the frame1. In this example, it sets the
close operation to exit the application when the frame is closed2.

reference: 
1. https://chortle.ccsu.edu/java5/Notes/chap56/ch56_9.html
2. https://stackoverflow.com/questions/32077449/whats-the-point-of-setdefaultcloseoperationwindowconstants-exit-on-close

* TODO (Holy shit)Swing 图形处理, 绘制颜色的原理 

** What is Frame? 

A frame 

* Lambda Expression

Lambda表达式是Java 8中引入的一种新特性。Lambda表达式是一种短小的代码块，它接受参数并返回值。Lambda表达式类似于方法，但它们不需要名称，并且可以直接在方法体中实现。Lambda表达式的最简单形式包含一个参数和一个表达式。这里是一个例子：

#+BEGIN_SRC
public class LambdaExample {
   public static void main(String args[]) {
      // lambda expression
      HelloWorld hello = (name) -> {
         System.out.println("Hello " + name);
      };
      hello.greet("world");
   }
}
interface HelloWorld {
   void greet(String name);
}
#+END_SRC

这个例子定义了一个接口HelloWorld，它只有一个方法greet，该方法接受一个
字符串参数name。然后，我们定义了一个lambda表达式，该表达式实现了
HelloWorld 接口中的greet方法。在main方法中，我们创建了一个HelloWorld对
象hello，并调用了它的greet方法。

** Usage of Lambda Expression

Bing: 

Lambda表达式的使用场景有很多，其中之一是当我们想要稍后执行一段代码时，
可以使用Lambda表达式。Lambda表达式的实际目的是延迟执行，有许多原因可以
延迟执行代码，例如：我们想在单独的线程中运行代码1。

Lambda表达式的另一个常见用途是在集合中进行筛选和排序。例如，我们可以使
用lambda表达式来筛选出一个字符串列表中长度大于5的字符串。这个lambda表
达式可以传递给Java 8中的stream()方法，该方法提供了一种简单而强大的方法
来处理集合2。

reference: 
1. https://stackoverflow.com/questions/32775164/lambda-expression-use-case-and-connection-with-functional-interface
2. https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html

* 事件机制

** What is event? 

In Java, an *event* is something that happens when you interact with a program. For example, when you click a button on a website or press a key on your keyboard, that’s an event.

When an *event* happens in Java, it can trigger some code to run. This code is called an *event handler*. The *event handler* is responsible for responding to the event and performing some action based on the *event* that occurred.

Java provides the ~java.awt.event~ package which contains many event
classes and listener interfaces for event handling. An *event source*
is typically a *component or model*, but other types of objects can
also be event sources. Each event is *represented* by an object that
provides information about the event and identifies the event source.

For example, let’s say you have a button on your website that says
“Click me”. When someone clicks that button, it generates an
*event*. The button is an *event source*. You can write some code that
listens for that event and performs some action when the button is
clicked. This code is called an *event handler*.

*** 

For example, you create a button. There is a method called
~addActionListner(listener)~ . It is method to add listener to the
button. When there is an event, the added listener will be called. Of
course, you need construct the listener yourself. 

#+BEGIN_SRC
class MyListener implements ActionListener{
      @Override
      public void actionPerformed(ActionEvent event){
             // code is placed here. 
      }
}
#+END_SRC

The code above defines a listener class. One shall use an instance of
the class to insert it into the ~button~ class or other class using

#+BEGIN_SRC
button.addActionListner(listener)
#+END_SRC

When an event is created, it is passed to the listener method you
just inserted. Then the ~button~ will called the ~actionPerformed~
function in the ~Mylistener~ class. 

下面是一个例子. 

先是一个 ~make Button~ 方法的定义. 其根据参数, 创造了一个 Button, 然后
将其插到 ~buttonPanel~ 中.

#+BEGIN_SRC
void makeButton (String name, Color backgroundColor){
     var button = new JButton (name);
     buttonPanel.add(button);
     button.addActionListner(event->
        buttonPanel.setBackground(backgroundColor));
}
#+END_SRC

这里创建出的 ~button~ 的 ~listener~ 已经赋值了. 使用的是 lambda
expression. 

随后我们有

#+BEGIN_SRC
//客户端代码
buttonPanel = new JPanel();
add(buttonPanel);

makeButton("yellow", Color.YELLOW);
makeButton("green", Color.Green);
makeButton("blue", Color.BLUE);
makeButton("red", Color.RED);
#+END_SRC



* Swing 基本用户组件