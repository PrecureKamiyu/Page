<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>49.4 AFS Version 2</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part536.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part538.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">49.4 AFS Version 2</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">AFSv2 introduced the notion of a <b>callback </b>to reduce the number of client/server interactions. A callback is simply a promise from the server to the client that the server will inform the client when a file that the client is caching has been modified. By adding this <b>state </b>to the server, the client no longer needs to contact the server to find out if a cached file is still valid. Rather, it assumes that the file is valid until the server tells it otherwise; insert analogy to <b>polling </b>versus <b>interrupts </b>here.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">AFSv2 also introduced the notion of a <b>file identifier </b>(<b>FID</b>) (similar to the NFS <b>file handle</b>) instead of pathnames to specify which file a client was interested in. An FID in AFS consists of a volume identifier, a file identifier, and a “uniquifier” (to enable reuse of the volume and file IDs when a file is deleted). Thus, instead of sending whole pathnames to the server and letting the server walk the pathname to find the desired file, the client would walk the pathname, one piece at a time, caching the results and thus hopefully reducing the load on the server.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">For example, if a client accessed the file <span class="s41">/home/remzi/notes.txt</span>, and <span class="s41">home </span>was the AFS directory mounted onto <span class="s41">/ </span>(i.e., <span class="s41">/ </span>was the local root directory, but <span class="s41">home </span>and its children were in AFS), the client would first Fetch the directory contents of <span class="s41">home</span>, put them in the local-disk cache, and setup a callback on <span class="s41">home</span>. Then, the client would Fetch the directory <span class="s41">remzi</span>, put it in the local-disk cache, and setup a callback on the server on <span class="s41">remzi</span>. Finally, the client would Fetch <span class="s41">notes.txt</span>, cache this regular file in the local disk, setup a callback, and finally return a file descriptor to the calling application. See Table <span style=" color: #00AEEF;">49.1 </span>for a summary.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The key difference, however, from NFS, is that with each fetch of a directory or file, the AFS client would establish a callback with the server, thus ensuring that the server would notify the client of a change in its</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 3pt;padding-left: 47pt;text-indent: 0pt;text-align: left;">Client (C<span class="s237">1</span>)                 Server</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="400" height="1" alt="image" src="Image_684.png"/></span></p><p class="s9" style="padding-left: 47pt;text-indent: 0pt;line-height: 8pt;text-align: left;">fd = open(“/home/remzi/notes.txt”, ...);</p><p class="s5" style="padding-left: 51pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Send Fetch (home FID, “remzi”)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 49pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Receive Fetch reply</p><p class="s5" style="padding-left: 51pt;text-indent: 2pt;text-align: left;">write remzi to local disk cache record callback status of remzi Send Fetch (remzi FID, “notes.txt”)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 49pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Receive Fetch reply</p><p class="s5" style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">write notes.txt to local disk cache record callback status of notes.txt local <span class="s15">open() </span>of cached notes.txt return file descriptor to application</p><p class="s5" style="padding-left: 31pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Receive Fetch request</p><p class="s5" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">look for remzi in home dir establish callback(C<span class="s237">1</span>) on remzi return remzi’s content and FID</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 31pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Receive Fetch request</p><p class="s5" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">look for notes.txt in remzi dir establish callback(C<span class="s237">1</span>) on notes.txt return notes.txt’s content and FID</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="400" height="1" alt="image" src="Image_685.png"/></span></p><p class="s9" style="padding-left: 47pt;text-indent: 0pt;line-height: 8pt;text-align: left;">read(fd, buffer, MAX);</p><p class="s5" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">perform local <span class="s15">read() </span>on cached copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="400" height="1" alt="image" src="Image_686.png"/></span></p><p class="s9" style="padding-left: 47pt;text-indent: 0pt;line-height: 8pt;text-align: left;">close(fd);</p><p class="s5" style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">do local <span class="s15">close() </span>on cached copy if file has changed, flush to server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="400" height="1" alt="image" src="Image_687.png"/></span></p><p class="s9" style="padding-left: 47pt;text-indent: 0pt;line-height: 8pt;text-align: left;">fd = open(“/home/remzi/notes.txt”, ...);</p><p class="s5" style="padding-left: 51pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Foreach dir (home, remzi)</p><p class="s5" style="padding-left: 55pt;text-indent: 0pt;text-align: left;">if (callback(dir) == VALID) use local copy for lookup(dir) else</p><p class="s5" style="padding-left: 60pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Fetch (as above)</p><p class="s5" style="padding-left: 55pt;text-indent: -4pt;text-align: left;">if (callback(notes.txt) == VALID) open local cached copy</p><p class="s5" style="padding-left: 51pt;text-indent: 4pt;text-align: left;">return file descriptor to it else</p><p class="s5" style="padding-left: 55pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Fetch (as above) then open and return fd</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part538.htm">Table 49.1: Reading A File: Client-side And File Server Actions</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part536.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part538.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
