<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>6.11   Other Aspects of Database Design</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part141.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part143.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">6.11   <span style=" color: #00AEEF;">Other Aspects of Database Design</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Our extensive discussion of schema design in this chapter may create the false impres- sion that schema design is the only component of a database design. There are indeed several other considerations that we address more fully in subsequent chapters, and survey brieﬂy here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.11.1 Functional Requirements</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">All enterprises have rules on what kinds of functionality are to be supported by an enterprise application. These could include transactions that update the data, as well as queries to view data in a desired fashion. In addition to planning the functionality, designers have to plan the interfaces to be built to support the functionality.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Not all users are authorized to view all data, or to perform all transactions. An authorization mechanism is very important for any enterprise application. Such autho- rization could be at the level of the database, using database authorization features. But it could also be at the level of higher-level functionality or interfaces, specifying who can use which functions/interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.11.2 Data Flow, Workflow</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Database applications are often part of a larger enterprise application that interacts not only with the database system but also with various specialized applications. As an example, consider a travel-expense report. It is created by an employee returning from a business trip (possibly by means of a special software package) and is subse- quently routed to the employee’s manager, perhaps other higher-level managers, and eventually to the accounting department for payment (at which point it interacts with the enterprise’s accounting information systems).</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The term <i>workﬂow </i>refers to the combination of data and tasks involved in processes like those of the preceding examples. Workﬂows interact with the database system as they move among users and users perform their tasks on the workﬂow. In addition to the data on which workﬂows operate, the database may store data about the workﬂow itself, including the tasks making up a workﬂow and how they are to be routed among users. Workﬂows thus specify a series of queries and updates to the database that may be taken into account as part of the database-design process. Put in other terms, modeling the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark130">enterprise requires us not only to understand the semantics of the data but also the business processes that use those data.</a><a name="bookmark159">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">6.11.3 Schema Evolution</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Database design is usually not a one-time activity. The needs of an organization evolve continually, and the data that it needs to store also evolve correspondingly. During the initial database-design phases, or during the development of an application, the database designer may realize that changes are required at the conceptual, logical, or physical schema levels. Changes in the schema can aﬀect all aspects of the database application. A good database design anticipates future needs of an organization and ensures that the schema requires minimal changes as the needs evolve.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It is important to distinguish between fundamental constraints that are expected to be permanent and constraints that are anticipated to change. For example, the con- straint that an instructor-id identify a unique instructor is fundamental. On the other hand, a university may have a policy that an instructor can have only one department, which may change at a later date if joint appointments are allowed. A database design that only allows one department per instructor might require major changes if joint appointments are allowed. Such joint appointments can be represented by adding an extra relationship without modifying the <i>instructor </i>relation, as long as each instructor has only one primary department aﬃliation; a policy change that allows more than one primary aﬃliation may require a larger change in the database design. A good design should account not only for current policies, but should also avoid or minimize the need for modiﬁcations due to changes that are anticipated or have a reasonable chance of happening.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Finally, it is worth noting that database design is a human-oriented activity in two senses: the end users of the system are people (even if an application sits between the database and the end users); and the database designer needs to interact extensively with experts in the application domain to understand the data requirements of the application. All of the people involved with the data have needs and preferences that should be taken into account in order for a database design and deployment to succeed within the enterprise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part141.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part143.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
