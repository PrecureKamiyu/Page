<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>22.7 Implementing Historical Algorithms</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part236.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part238.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">22.7 Implementing Historical Algorithms</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As you can see, an algorithm such as LRU can generally do a better job than simpler policies like FIFO or Random, which may throw out important pages. Unfortunately, historical policies present us with a new challenge: how do we implement them?</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Let’s take, for example, LRU. To implement it perfectly, we need to do a lot of work. Specifically, upon each <i>page access </i>(i.e., each memory access, whether an instruction fetch or a load or store), we must update some data structure to move this page to the front of the list (i.e., the MRU side). Contrast this to FIFO, where the FIFO list of pages is only accessed when a page is evicted (by removing the first-in page) or when a new page is added to the list (to the last-in side). To keep track of which pages have been least- and most-recently used, the system has to do some accounting work <i>on every memory reference. </i>Clearly, without great care, such accounting could greatly reduce performance.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">One method that could help speed this up is to add a little bit of hard- ware support. For example, a machine could update, on each page access, a time field in memory (for example, this could be in the per-process page table, or just in some separate array in memory, with one entry per phys- ical page of the system). Thus, when a page is accessed, the time field would be set, by hardware, to the current time. Then, when replacing a page, the OS could simply scan all the time fields in the system to find the least-recently-used page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Unfortunately, as the number of pages in a system grows, scanning a huge array of times just to find the absolute least-recently-used page is prohibitively expensive. Imagine a modern machine with 4GB of mem- ory, chopped into 4KB pages. This machine has 1 million pages, and thus finding the LRU page will take a long time, even at modern CPU speeds. Which begs the question: do we really need to find the absolute oldest page to replace? Can we instead survive with an approximation?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;line-height: 11pt;text-align: left;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>I<span class="s7">MPLEMENT </span>A<span class="s7">N </span>LRU R<span class="s7">EPLACEMENT </span>P<span class="s7">OLICY</span></p><p style="padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: left;">Given that it will be expensive to implement perfect LRU, can we ap- proximate it in some way, and still obtain the desired behavior?</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part236.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part238.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
