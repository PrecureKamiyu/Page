<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Problems With Our Current MLFQ</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part84.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part86.htm">下一个 &gt;</a></p><p class="s32" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Problems With Our Current MLFQ</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">We thus have a basic MLFQ. It seems to do a fairly good job, sharing the CPU fairly between long-running jobs, and letting short or I/O-intensive interactive jobs run quickly. Unfortunately, the approach we have devel- oped thus far contains serious flaws. Can you think of any?</p><p class="s6" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">(This is where you pause and think as deviously as you can)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="50" alt="image" src="Image_085.png"/></span></p><p class="s48" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">Q2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">Q1</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="150" height="17" alt="image" src="Image_086.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">Q0</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="150" height="17" alt="image" src="Image_087.png"/></span></p><p class="s65" style="padding-top: 3pt;padding-left: 94pt;text-indent: 0pt;text-align: left;">0    50   100   150   200</p><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Q2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="149" height="50" alt="image" src="Image_088.png"/></span></p><p class="s48" style="padding-bottom: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Q1</p><p style="padding-left: 16pt;text-indent: 0pt;text-align: left;"><span><img width="149" height="17" alt="image" src="Image_089.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Q0</p><p style="padding-left: 16pt;text-indent: 0pt;text-align: left;"><span><img width="149" height="17" alt="image" src="Image_090.png"/></span></p><p class="s65" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">0    50   100   150   200</p><p style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">Figure 8.5: <b>Without (Left) and With (Right) Priority Boost</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 11pt;line-height: 89%;text-align: justify;">First, there is the problem of <b>starvation</b>: if there are “too many” in- teractive jobs in the system, they will combine to consume <i>all </i>CPU time, and thus long-running jobs will <i>never </i>receive any CPU time (they <b>starve</b>). We’d like to make some progress on these jobs even in this scenario.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Second, a smart user could rewrite their program to <b>game the sched- uler</b>. Gaming the scheduler generally refers to the idea of doing some- thing sneaky to trick the scheduler into giving you more than your fair share of the resource. The algorithm we have described is susceptible to the following attack: before the time slice is over, issue an I/O operation (to some file you don’t care about) and thus relinquish the CPU; doing so allows you to remain in the same queue, and thus gain a higher percent- age of CPU time. When done right (e.g., by running for 99% of a time slice before relinquishing the CPU), a job could nearly monopolize the CPU.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Finally, a program may <i>change its behavior </i>over time; what was CPU- bound may transition to a phase of interactivity. With our current ap- proach, such a job would be out of luck and not be treated like the other interactive jobs in the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part84.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part86.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
