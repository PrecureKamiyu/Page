<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>49.8 AFS: Other Improvements</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part541.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part543.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">49.8 AFS: Other Improvements</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Like we saw with the introduction of Berkeley FFS (which added sym- bolic links and a number of other features), the designers of AFS took the opportunity when building their system to add a number of features that made the system easier to use and manage. For example, AFS provides a true global namespace to clients, thus ensuring that all files were named the same way on all client machines. NFS, in contrast, allows each client to mount NFS servers in any way that they please, and thus only by con- vention (and great administrative effort) would files be named similarly across clients.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_691.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_692.png"/></span></p><p class="s12" style="padding-top: 2pt;padding-left: 68pt;text-indent: 13pt;line-height: 92%;text-align: justify;"><span class="s11">1</span>We assume here that NFS reads are block-sized and block-aligned; if they were not, the NFS client would also have to read the block first. We also assume the file was <i>not </i>opened with the O TRUNC flag; if it had been, the initial open in AFS would not fetch the soon to be truncated file’s contents.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 6pt;padding-left: 66pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>T<span class="s45">HE </span>I<span class="s45">MPORTANCE </span>O<span class="s45">F </span>W<span class="s45">ORKLOAD</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">One challenge of evaluating any system is the choice of <b>workload</b>. Be- cause computer systems are used in so many different ways, there are a large variety of workloads to choose from. How should the storage sys- tem designer decide which workloads are important, in order to make reasonable design decisions?</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The designers of AFS, given their experience in measuring how file sys- tems were used, made certain workload assumptions; in particular, they assumed that most files were not frequently shared, and accessed sequen- tially in their entirety. Given those assumptions, the AFS design makes perfect sense.</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">However, these assumptions are not always correct. For example, imag- ine an application that appends information, periodically, to a log. These little log writes, which add small amounts of data to an existing large file, are quite problematic for AFS. Many other difficult workloads exist as well, e.g., random updates in a transaction database.</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">One place to get some information about what types of workloads are common are through various research studies that have been performed. See any of these studies for good examples of workload analysis [B+91, H+11, R+00, V99], including the AFS retrospective [H+88].</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">AFS also takes security seriously, and incorporates mechanisms to au- thenticate users and ensure that a set of files could be kept private if a user so desired. NFS, in contrast, had quite primitive support for security for many years.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">AFS also includes facilities for flexible user-managed access control. Thus, when using AFS, a user has a great deal of control over who exactly can access which files. NFS, like most U<span class="s7">NIX </span>file systems, has much less support for this type of sharing.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Finally, as mentioned before, AFS adds tools to enable simpler man- agement of servers for the administrators of the system. In thinking about system management, AFS was light years ahead of the field.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part541.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part543.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
