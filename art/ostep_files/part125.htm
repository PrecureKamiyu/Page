<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>14.2 The malloc() Call</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">14.2 The <span class="s51">malloc() </span>Call</p><p style="padding-top: 6pt;padding-left: 68pt;text-indent: 12pt;text-align: justify;">The <span class="s41">malloc() </span>call is quite simple: you pass it a size asking for some room on the heap, and it either succeeds and gives you back a pointer to the newly-allocated space, or fails and returns <span class="s41">NULL</span><span class="s35">2</span>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">The manual page shows what you need to do to use malloc; type <span class="s41">man malloc </span>at the command line and you will see:</p><p class="s38" style="padding-top: 4pt;padding-left: 98pt;text-indent: 0pt;text-align: left;">#include &lt;stdlib.h&gt;</p><p class="s38" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">...</p><p class="s38" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">void <span class="s39">*</span>malloc(size_t size);</p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">From this information, you can see that all you need to do is include the header file <span class="s41">stdlib.h </span>to use malloc. In fact, you don’t really need to even do this, as the C library, which all C programs link with by default, has the code for <span class="s41">malloc() </span>inside of it; adding the header just lets the compiler check whether you are calling <span class="s41">malloc() </span>correctly (e.g., passing the right number of arguments to it, of the right type).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_135.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The single parameter <span class="s41">malloc() </span>takes is of type <span class="s41">size t </span>which sim- ply describes how many bytes you need. However, most programmers do not type in a number here directly (such as 10); indeed, it would be considered poor form to do so. Instead, various routines and macros are utilized. For example, to allocate space for a double-precision floating point value, you simply do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">double <span class="s39">*</span>d = (double <span class="s39">*</span>) malloc(sizeof(double));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_136.png"/></span></p><p class="s12" style="padding-top: 1pt;padding-left: 82pt;text-indent: 0pt;text-align: left;"><span class="s11">2</span>Note that <span class="s38">NULL </span>in C isn’t really anything special at all, just a macro for the value zero.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: W<span class="s7">HEN </span>I<span class="s7">N </span>D<span class="s7">OUBT</span>, T<span class="s7">RY </span>I<span class="s7">T </span>O<span class="s7">UT</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">If you aren’t sure how some routine or operator you are using behaves, there is no substitute for simply trying it out and making sure it behaves as you expect. While reading the manual pages or other documentation is useful, how it works in practice is what matters. Write some code and test it! That is no doubt the best way to make sure your code behaves as you desire. Indeed, that is what we did to double-check the things we were saying about <span class="s41">sizeof() </span>were actually true!</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Wow, that’s lot of <span class="s41">double</span>-ing! This invocation of <span class="s41">malloc() </span>uses the <span class="s41">sizeof() </span>operator to request the right amount of space; in C, this is generally thought of as a <i>compile-time </i>operator, meaning that the actual size is known at <i>compile time </i>and thus a number (in this case, 8, for a double) is substituted as the argument to <span class="s41">malloc()</span>. For this reason, <span class="s41">sizeof() </span>is correctly thought of as an operator and not a function call (a function call would take place at run time).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You can also pass in the name of a variable (and not just a type) to <span class="s41">sizeof()</span>, but in some cases you may not get the desired results, so be careful. For example, let’s look at the following code snippet:</p><p class="s38" style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;line-height: 89%;text-align: left;">int <span class="s39">*</span>x = malloc(10 <span class="s39">* </span>sizeof(int)); printf(&quot;%d\n&quot;, sizeof(x));</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 11pt;line-height: 87%;text-align: justify;">In the first line, we’ve declared space for an array of 10 integers, which is fine and dandy. However, when we use <span class="s41">sizeof() </span>in the next line, it returns a small value, such as 4 (on 32-bit machines) or 8 (on 64-bit machines). The reason is that in this case, <span class="s41">sizeof() </span>thinks we are sim- ply asking how big a <i>pointer </i>to an integer is, not how much memory we have dynamically allocated. However, sometimes <span class="s41">sizeof() </span>does work as you might expect:</p><p class="s38" style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">int x[10];</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">printf(&quot;%d\n&quot;, sizeof(x));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In this case, there is enough static information for the compiler to know that 40 bytes have been allocated.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Another place to be careful is with strings. When declaring space for a string, use the following idiom: <span class="s41">malloc(strlen(s) + 1)</span>, which gets the length of the string using the function <span class="s41">strlen()</span>, and adds 1 to it in order to make room for the end-of-string character. Using <span class="s41">sizeof() </span>may lead to trouble here.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You might also notice that <span class="s41">malloc() </span>returns a pointer to type <span class="s41">void</span>. Doing so is just the way in C to pass back an address and let the pro- grammer decide what to do with it. The programmer further helps out by using what is called a <b>cast</b>; in our example above, the programmer casts the return type of <span class="s41">malloc() </span>to a pointer to a <span class="s41">double</span>. Casting doesn’t really accomplish anything, other than tell the compiler and other</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 88%;text-align: justify;">programmers who might be reading your code: “yeah, I know what I’m doing.” By casting the result of <span class="s41">malloc()</span>, the programmer is just giving some reassurance; the cast is not needed for the correctness.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
