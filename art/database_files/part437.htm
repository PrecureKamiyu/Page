<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>24.3  Bitmap Indices</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part436.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part438.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">24.3  <span style=" color: #00AEEF;">Bitmap Indices</span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">As we saw in Section 14.9, a bitmap index is a specialized type of index designed for easy querying on multiple keys. Bitmaps work best for attributes that take only a small number of distinct values.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For bitmap indices to be used, records in a relation must be numbered sequentially, starting from, say, 0. Given a number <i>n</i>, it must be easy to retrieve the record numbered</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">n<span class="p">. This is particularly easy to achieve if records are ﬁxed in size and allocated on con- secutive blocks of a ﬁle. The record number can then be translated easily into a block number and a number that identiﬁes the record within the block.</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Recall that <i>column-oriented storage</i>, described in Section 13.6, stores attributes in arrays, allowing eﬃcient access of the attribute of the <i>i</i>th record, for any given <i>i</i>. Bitmap indices are thus particularly useful with columnar storage.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3331.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3332.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We use as a running example a relation <i>instructor info</i>, which has an attribute <i>gen- der</i>, which can take only values <span class="s95">m </span>(male) or <span class="s95">f </span>(female), and an attribute <i>income level</i>, where income has been broken up into 5 levels: <i>L</i>1: 0-9999, <i>L</i>2: 10, 000-19, 999, <i>L</i>3:</p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">20, 000-39, 999, <i>L</i>4: 40, 000-74, 999, and <i>L</i>5: 75, 000 <span class="s15">− ∞</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">24.3.1 Bitmap Index Structure</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">As we saw in Section 14.9, a <span class="s63">bitmap </span>is simply an array of bits. In its simplest form, a <span class="s63">bitmap index </span>on the attribute <i>A </i>of relation <i>r </i>consists of one bitmap for each value that <i>A </i>can take. Each bitmap has as many bits as the number of records in the relation. The <i>i</i>th bit of the bitmap for value <i>v</i><span class="s97">j </span>is set to 1 if the record numbered <i>i </i>has the value <i>v</i><span class="s97">j </span>for</p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">attribute <i>A</i>. All other bits of the bitmap are set to 0.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In our example, there is one bitmap for the value <span class="s95">m </span>and one for <span class="s95">f</span>. The <i>i</i>th bit of the bitmap for <span class="s95">m </span>is set to 1 if the <i>gender </i>value of the record numbered <i>i </i>is <span class="s95">m</span>. All other bits of the bitmap for <span class="s95">m </span>are set to 0. Similarly, the bitmap for <span class="s95">f </span>has the value 1 for bits corresponding to records with the value <span class="s95">f </span>for the <i>gender </i>attribute; all other bits have</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 145pt;text-indent: -4pt;text-align: center;">record number</p><p class="s33" style="padding-top: 3pt;padding-left: 145pt;text-indent: 0pt;text-align: center;">0</p><p class="s33" style="padding-top: 8pt;padding-left: 145pt;text-indent: 0pt;text-align: center;">1</p><p class="s33" style="padding-top: 8pt;padding-left: 145pt;text-indent: 0pt;text-align: center;">2</p><p class="s33" style="padding-top: 8pt;padding-left: 145pt;text-indent: 0pt;text-align: center;">3</p><p class="s33" style="padding-top: 8pt;padding-left: 145pt;text-indent: 0pt;text-align: center;">4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">Bitmaps for <i>gender</i></p><p class="s33" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">01101</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">10010</p><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s131" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">ID</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s131" style="padding-top: 5pt;padding-left: 2pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">gender</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s131" style="padding-top: 5pt;padding-left: 1pt;padding-right: 7pt;text-indent: 0pt;text-align: center;">income_level</p></td></tr><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">76766</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">m</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 5pt;padding-left: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">L1</p></td></tr><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">22222</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">f</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-left: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">L2</p></td></tr><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">12121</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">f</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-left: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">L1</p></td></tr><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">15151</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 3pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">m</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-left: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">L4</p></td></tr><tr style="height:19pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">58583</p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 4pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">f</p></td><td style="width:58pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s133" style="padding-top: 5pt;padding-left: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">L3</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 8pt;padding-left: 151pt;text-indent: 0pt;line-height: 223%;text-align: left;">m f</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">Bitmaps for</p><p class="s200" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">income_level</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">00000</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">00010</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">00001</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">01000</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">10100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-left: 11pt;text-indent: 0pt;line-height: 223%;text-align: justify;">L1 L2 L3 L4 L5</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3333.png"/></span></p><p class="s74" style="padding-top: 5pt;padding-left: 190pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 24.3 </span>Bitmap indices on relation <span class="s91">instructor info</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3334.png"/></span></p><p style="padding-top: 9pt;padding-left: 123pt;text-indent: -3pt;text-align: justify;">the value 0. Figure 24.3 shows an example of bitmap indices on a relation <i>instructor info</i></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We now consider when bitmaps are useful. The simplest way of retrieving all records with value <span class="s95">m </span>(or value <span class="s95">f</span>) would be to simply read all records of the relation and select those records with value <span class="s95">m </span>(or <span class="s95">f</span>, respectively). The bitmap index doesn’t really help to speed up such a selection. While it would allow us to read only those records for a speciﬁc gender, it is likely that every disk block for the ﬁle would have to be read anyway.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3335.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In fact, bitmap indices are useful for selections mainly when there are selections on multiple keys. Suppose we create a bitmap index on attribute <i>income level</i>, which we described earlier, in addition to the bitmap index on <i>gender</i>.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">Consider now a query that selects women with income in the range $10,000 <i>to</i></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">$19, 999. This query can be expressed as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 218pt;text-indent: 0pt;text-align: left;">select <span class="p">*</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3336.png"/></span></p><p class="s46" style="padding-left: 218pt;text-indent: 0pt;text-align: left;">from <i>instructor info</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3337.png"/></span></p><p class="s46" style="padding-left: 218pt;text-indent: 0pt;text-align: left;">where <i>gender </i><span class="p">= &#39;f&#39; </span>and <i>income level </i><span class="p">= &#39;L2&#39;;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3338.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3339.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">To evaluate this selection, we fetch the bitmaps for <i>gender </i>value <span class="s95">f </span>and the bitmap for <i>income level </i>value <i>L</i>2 and perform an <span class="s63">intersection </span>(logical-and) of the two bitmaps. In other words, we compute a new bitmap where bit <i>i </i>has value 1 if the <i>i</i>th bit of the two bitmaps are both 1 and has a value 0 otherwise. In the example in Figure 24.3, the intersection of the bitmap for <i>gender </i><span class="s15">= 𝖿 </span>(01101) and the bitmap for <i>income level </i><span class="s15">= </span><i>L</i>2 (01000) gives the bitmap 01000.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Since the ﬁrst attribute can take two values, and the second can take ﬁve values, we would expect only about 1 in 10 records, on an average, to satisfy a combined condition on the two attributes. If there are further conditions, the fraction of records satisfying all the conditions is likely to be quite small. The system can then compute the query result by ﬁnding all bits with value 1 in the intersection bitmap and retrieving the cor-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">responding records. If the fraction is large, scanning the entire relation would remain the cheaper alternative.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Another important use of bitmaps is to count the number of tuples satisfying a given selection. Such queries are important for data analysis. For instance, if we wish to ﬁnd out how many women have an income level <i>L</i>2, we compute the intersection of the two bitmaps and then count the number of bits that are 1 in the intersection bitmap. We can thus get the desired result from the bitmap index, without even accessing the relation.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="1" alt="image" src="Image_3340.png"/></span></p><p class="s119" style="text-indent: 0pt;line-height: 8pt;text-align: left;">8</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Bitmap indices are generally quite small compared to the actual relation size. Rec- ords are typically at least tens of bytes to hundreds of bytes long, whereas a single bit represents the record in a bitmap. Thus, the space occupied by a single bitmap is usually less than 1 percent of the space occupied by the relation. For instance, if the record size for a given relation is 100 bytes, then the space occupied by a single bitmap will be <span class="s76">1</span> of 1 percent of the space occupied by the relation. If an attribute <i>A </i>of the relation can take on only one of eight values, a bitmap index on attribute <i>A </i>would consist of eight bitmaps, which together occupy only 1 percent of the size of the relation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Deletion of records creates gaps in the sequence of records, since shifting records (or record numbers) to ﬁll gaps would be extremely expensive. To recognize deleted records, we can store an <span class="s63">existence bitmap</span>, in which bit <i>i </i>is 0 if record <i>i </i>does not exist and 1 otherwise. We shall see the need for existence bitmaps in Section 24.3.2. Insertion of records should not aﬀect the sequence numbering of other records. Therefore, we can do insertion either by appending records to the end of the ﬁle or by replacing deleted records.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">24.3.2 Efficient Implementation of Bitmap Operations</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">We can compute the intersection of two bitmaps easily by using a <b>for </b>loop: the <i>i</i>th iteration of the loop computes the <b>and </b>of the <i>i</i>th bits of the two bitmaps. We can speed up computation of the intersection greatly by using bit-wise <b>and </b>instructions supported by most computer instruction sets. A <i>word </i>usually consists of 32 or 64 bits, depending on the architecture of the computer. A bit-wise <b>and </b>instruction takes two words as input and outputs a word where each bit is the logical <b>and </b>of the bits in corresponding positions of the input words. What is important to note is that a single bit-wise <b>and </b>instruction can compute the intersection of 32 or 64 bits <i>at once</i>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">If a relation had 1 million records, each bitmap would contain 1 million bits, or equivalently 128 kilobytes. Only 31,250 instructions are needed to compute the inter- section of two bitmaps for our relation, assuming a 32-bit word length. Thus, computing bitmap intersections is an extremely fast operation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Just as bitmap intersection is useful for computing the <b>and </b>of two conditions, bitmap union is useful for computing the <b>or </b>of two conditions. The procedure for bitmap union is exactly the same as for intersection, except we use bit-wise <b>or </b>instruc- tions instead of bit-wise <b>and </b>instructions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3341.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3342.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">The complement operation can be used to compute a predicate involving the nega- tion of a condition, such as <b>not </b>(<i>income-level </i>= <i>L</i>1). The complement of a bitmap is generated by complementing every bit of the bitmap (the complement of 1 is 0 and the complement of 0 is 1). It may appear that <b>not </b>(<i>income level </i>= <i>L</i>1) can be implemented by just computing the complement of the bitmap for income level <i>L</i>1. If some records have been deleted, however, just computing the complement of a bitmap is not suﬃ- cient. Bits corresponding to such records would be 0 in the original bitmap but would become 1 in the complement, although the records don’t exist. A similar problem also arises when the value of an attribute is <i>null</i>. For instance, if the value of <i>income level </i>is null, the bit would be 0 in the original bitmap for value <i>L</i>1 and 1 in the complement bitmap.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To make sure that the bits corresponding to deleted records are set to 0 in the result, the complement bitmap must be intersected with the existence bitmap to turn oﬀ the bits for deleted records. Similarly, to handle null values, the complement bitmap must also be intersected with the complement of the bitmap for the value <i>null</i>.<span class="s76">1</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="1" alt="image" src="Image_3343.png"/></span></p><p class="s119" style="text-indent: 0pt;line-height: 8pt;text-align: left;">8</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Counting the number of bits that are 1 in a bitmap can be done quickly by a clever technique. We can maintain an array with 256 entries, where the <i>i</i>th entry stores the number of bits that are 1 in the binary representation of <i>i</i>. Set the total count initially to 0. We take each byte of the bitmap, use it to index into this array, and add the stored count to the total count. The number of addition operations is <span class="s76">1</span> of the number</p><p style="padding-top: 2pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">of tuples, and thus the counting process is very eﬃcient. A large array (using 2<span class="s76">16</span> <span class="s15">= </span>65,536 entries), indexed by pairs of bytes, would give even higher speedup, but at a higher storage cost.</p><p class="s68" style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">24.3.3 Bitmaps and B<span class="s331">+</span>-Trees</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Bitmaps can be combined with regular B<span class="s181">+</span>-tree indices for relations where a few at- tribute values are extremely common, and other values also occur, but much less fre- quently. In a B<span class="s181">+</span>-tree index leaf, for each value we would normally maintain a list of all records with that value for the indexed attribute. Each element of the list would be a record identiﬁer, consisting of at least 32 bits, and usually more. For a value that occurs in many records, we store a bitmap instead of a list of records.</p><p class="s109" style="text-indent: 0pt;line-height: 8pt;text-align: left;">i</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 137pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Suppose a particular value <i>v </i>occurs in <u>&nbsp;1</u></p><p class="s119" style="padding-left: 119pt;text-indent: 0pt;line-height: 3pt;text-align: right;">16</p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">of the records of a relation. Let <i>N </i>be</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">the number of records in the relation, and assume that a record has a 64-bit number identifying it. The bitmap needs only 1 bit per record, or <i>N </i>bits in total. In contrast, the list representation requires 64 bits per record where the value occurs, or 64 <span class="s15">∗ </span><i>N </i><span class="s15">∕</span>16 <span class="s15">= </span>4<i>N </i>bits. Thus, a bitmap is preferable for representing the list of records for value <i>v</i><span class="s145">i</span>. In our example (with a 64-bit record identiﬁer), if fewer than 1 in 64 records have a</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">particular value, the list representation is preferable for identifying records with that</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_3344.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">1<span class="s78">Handling predicates such as </span><span class="s79">is unknown </span><span class="s80">would cause further complications, which would in general require use of an extra bitmap to track which operation results are unknown.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark546">value, since it uses fewer bits than the bitmap representation. If more than 1 in 64 records have that value, the bitmap representation is preferable.</a><a name="bookmark576">&zwnj;</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Thus, bitmaps can be used as a compressed storage mechanism at the leaf nodes of B<span class="s181">+</span>-trees for those values that occur very frequently.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part436.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part438.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
