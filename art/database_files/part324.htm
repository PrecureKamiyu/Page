<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part323.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part325.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Exercises</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 89pt;text-indent: 0pt;text-align: justify;"><b>17.12 </b>List the <span class="s44">ACID </span>properties. Explain the usefulness of each.</p><p class="s46" style="padding-top: 6pt;padding-left: 123pt;text-indent: -34pt;text-align: justify;">17.13  <span class="p">During its execution, a transaction passes through several states, until it ﬁnally commits or aborts. List all possible sequences of states through which a trans- action may pass. Explain why each state transition may occur.</span></p><p style="padding-top: 6pt;padding-left: 123pt;text-indent: -33pt;text-align: justify;"><b>17.14  </b>Explain the distinction between the terms <i>serial schedule </i>and <i>serializable sched- ule</i>.</p><p class="s46" style="padding-top: 6pt;padding-left: 89pt;text-indent: 0pt;text-align: justify;">17.15 <span class="p">Consider the following two transactions:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: center;"><i>T</i><span class="s98">13</span>: <span class="s49">read</span>(<i>A</i>);</p><p style="padding-left: 49pt;text-indent: 0pt;text-align: center;"><span class="s49">read</span>(<i>B</i>);</p><p class="s13" style="padding-left: 249pt;text-indent: 0pt;text-align: left;"><b>if </b>A <span class="s15">= </span><span class="p">0 </span><b>then </b>B <span class="p">:= </span>B <span class="p">+ 1;</span></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: center;"><span class="s49">write</span>(<i>B</i>).</p><p style="padding-left: 27pt;text-indent: 0pt;text-align: center;"><i>T</i><span class="s98">14</span>: <span class="s49">read</span>(<i>B</i>);</p><p style="padding-left: 49pt;text-indent: 0pt;text-align: center;"><span class="s49">read</span>(<i>A</i>);</p><p class="s13" style="padding-left: 249pt;text-indent: 0pt;text-align: left;"><b>if </b>B <span class="s15">= </span><span class="p">0 </span><b>then </b>A <span class="p">:= </span>A <span class="p">+ 1;</span></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: center;"><span class="s49">write</span>(<i>A</i>).</p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Exercises  <span class="s164">833</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="padding-left: 154pt;text-indent: 0pt;text-align: left;"><span class="p">Let the consistency requirement be </span><span class="s13">A </span>= <span class="p">0 </span>∨ <span class="s13">B </span>= <span class="p">0, with </span><span class="s13">A </span>= <span class="s13">B </span>= <span class="p">0 as the initial values.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 180pt;text-indent: -18pt;text-align: justify;">a. Show that every serial execution involving these two transactions pre- serves the consistency of the database.</p><p class="s13" style="padding-top: 7pt;padding-left: 180pt;text-indent: -19pt;line-height: 87%;text-align: justify;"><span class="p">b.  Show a concurrent execution of </span>T<span class="s130">13 </span><span class="s94">and </span>T<span class="s130">14 </span><span class="s94">that produces a nonserializ- able schedule.</span></p><p class="s13" style="padding-top: 7pt;padding-left: 180pt;text-indent: -18pt;line-height: 87%;text-align: justify;"><span class="p">c.  Is there a concurrent execution of </span>T<span class="s130">13 </span><span class="s94">and </span>T<span class="s130">14 </span><span class="s94">that produces a serializable schedule?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 154pt;text-indent: -33pt;text-align: justify;">17.16  <span class="p">Give an example of a serializable schedule with two transactions such that the order in which the transactions commit is diﬀerent from the serialization order.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 154pt;text-indent: -33pt;text-align: justify;">17.17 <span class="p">What is a recoverable schedule? Why is recoverability of schedules desirable? Are there any circumstances under which it would be desirable to allow non- recoverable schedules? Explain your answer.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 154pt;text-indent: -33pt;text-align: justify;">17.18  <span class="p">Why do database systems support concurrent execution of transactions, de- spite the extra eﬀort needed to ensure that concurrent execution does not cause any problems?</span></p><p class="s46" style="padding-top: 6pt;padding-left: 154pt;text-indent: -34pt;text-align: justify;">17.19 <span class="p">Explain why the read-committed isolation level ensures that schedules are cascade-free.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 154pt;text-indent: -35pt;text-align: justify;">17.20 <span class="p">For each of the following isolation levels, give an example of a schedule that respects the speciﬁed level of isolation but is not serializable:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 162pt;text-indent: 0pt;text-align: left;">a. Read uncommitted</p><p style="padding-top: 6pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">b. Read committed</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">c. Repeatable read</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2998.png"/></span></p><p style="padding-left: 154pt;text-indent: -34pt;text-align: justify;"><b>17.21  </b>Suppose that in addition to the operations <span class="s49">read </span>and <span class="s49">write</span>, we allow an opera- tion <span class="s95">pred read</span>(<i>r</i>, <i>P</i>), which reads all tuples in relation <i>r </i>that satisfy predicate <i>P</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2999.png"/></span></p><p style="padding-left: 180pt;text-indent: -18pt;text-align: justify;">a. Give an example of a schedule using the <span class="s95">pred read </span>operation that ex- hibits the phantom phenomenon and is nonserializable as a result.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_3000.png"/></span></p><p style="padding-top: 6pt;padding-left: 180pt;text-indent: -19pt;text-align: justify;">b.  Give an example of a schedule where one transaction uses the <span class="s95">pred read </span>operation on relation <i>r </i>and another concurrent transaction deletes a tuple from <i>r</i>, but the schedule does not exhibit a phantom con- ﬂict. (To do so, you have to give the schema of relation <i>r </i>and show the attribute values of the deleted tuple.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part323.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part325.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
