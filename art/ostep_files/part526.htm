<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>48.7 Handling Server Failure with Idempotent Operations</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part525.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part527.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">48.7 Handling Server Failure with Idempotent Operations</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">When a client sends a message to the server, it sometimes does not re- ceive a reply. There are many possible reasons for this failure to respond. In some cases, the message may be dropped by the network; networks do lose messages, and thus either the request or the reply could be lost and thus the client would never receive a response.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">It is also possible that the server has crashed, and thus is not currently responding to messages. After a bit, the server will be rebooted and start running again, but in the meanwhile all requests have been lost. In all of these cases, clients are left with a question: what should they do when the server does not reply in a timely manner?</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In NFSv2, a client handles all of these failures in a single, uniform, and elegant way: it simply <i>retries </i>the request. Specifically, after sending the request, the client sets a timer to go off after a specified time period. If a reply is received before the timer goes off, the timer is canceled and all is well. If, however, the timer goes off <i>before </i>any reply is received, the client assumes the request has not been processed and resends it. If the server replies, all is well and the client has neatly handled the problem.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The ability of the client to simply retry the request (regardless of what caused the failure) is due to an important property of most NFS requests: they are <b>idempotent</b>. An operation is called idempotent when the effect of performing the operation multiple times is equivalent to the effect of performing the operating a single time. For example, if you store a value to a memory location three times, it is the same as doing so once; thus “store value to memory” is an idempotent operation. If, however, you in- crement a counter three times, it results in a different amount than doing so just once; thus, “increment counter” is not idempotent. More gener- ally, any operation that just reads data is obviously idempotent; an oper- ation that updates data must be more carefully considered to determine if it has this property.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The heart of the design of crash recovery in NFS is the idempotency of most common operations. LOOKUP and READ requests are trivially idempotent, as they only read information from the file server and do not update it. More interestingly, WRITE requests are also idempotent. If, for example, a WRITE fails, the client can simply retry it. The WRITE message contains the data, the count, and (importantly) the exact offset to write the data to. Thus, it can be repeated with the knowledge that the outcome of multiple writes is the same as the outcome of a single one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s80" style="padding-top: 6pt;padding-left: 137pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Client</p><p class="s47" style="padding-left: 136pt;text-indent: 0pt;line-height: 8pt;text-align: center;">[send request]</p><p class="s236" style="padding-top: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Case 1: Request Lost</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span><img width="97" height="12" alt="image" src="Image_677.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s80" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">Server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 25pt;text-indent: 0pt;text-align: left;">(no mesg)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="347" height="1" alt="image" src="Image_678.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s80" style="padding-top: 7pt;padding-left: 137pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Client</p><p class="s47" style="padding-left: 136pt;text-indent: 0pt;line-height: 8pt;text-align: center;">[send request]</p><p class="s236" style="padding-top: 2pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Case 2: Server Down</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 1pt;text-indent: 0pt;text-align: left;"><span><img width="196" height="18" alt="image" src="Image_679.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s80" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">(down)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="347" height="1" alt="image" src="Image_680.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s236" style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;">Case 3: Reply lost on way back from Server</p><p class="s80" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Client</p><p style="text-indent: 0pt;text-align: left;"><span><img width="183" height="16" alt="image" src="Image_681.png"/></span></p><p class="s47" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: center;">[send request]</p><p class="s80" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="111" height="12" alt="image" src="Image_682.png"/></span></p><p class="s47" style="padding-left: 2pt;text-indent: 0pt;line-height: 112%;text-align: left;">[recv request] [handle request] [send reply]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 138pt;text-indent: 0pt;text-align: left;">Figure 48.5: <b>The Three Types of Loss</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In this way, the client can handle all timeouts in a unified way. If a WRITE request was simply lost (Case 1 above), the client will retry it, the server will perform the write, and all will be well. The same will happen if the server happened to be down while the request was sent, but back up and running when the second request is sent, and again all works as desired (Case 2). Finally, the server may in fact receive the WRITE request, issue the write to its disk, and send a reply. This reply may get lost (Case 3), again causing the client to re-send the request. When the server receives the request again, it will simply do the exact same thing: write the data to disk and reply that it has done so. If the client this time receives the reply, all is again well, and thus the client has handled both message loss and server failure in a uniform manner. Neat!</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">A small aside: some operations are hard to make idempotent. For example, when you try to make a directory that already exists, you are informed that the mkdir request has failed. Thus, in NFS, if the file server receives a MKDIR protocol message and executes it successfully but the reply is lost, the client may repeat it and encounter that failure when in fact the operation at first succeeded and then only failed on the retry. Thus, life is not perfect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 25pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: P<span class="s7">ERFECT </span>I<span class="s7">S </span>T<span class="s7">HE </span>E<span class="s7">NEMY </span>O<span class="s7">F </span>T<span class="s7">HE </span>G<span class="s7">OOD </span>(V<span class="s7">OLTAIRE</span>’<span class="s7">S </span>L<span class="s7">AW</span>)</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Even when you design a beautiful system, sometimes all the corner cases don’t work out exactly as you might like. Take the mkdir example above; one could redesign mkdir to have different semantics, thus making it idempotent (think about how you might do so); however, why bother? The NFS design philosophy covers most of the important cases, and over- all makes the system design clean and simple with regards to failure. Thus, accepting that life isn’t perfect and still building the system is a sign of good engineering. Apparently, this wisdom is attributed to Voltaire, for saying “... a wise Italian says that the best is the enemy of the good” [V72], and thus we call it <b>Voltaire’s Law</b>.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part525.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part527.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
