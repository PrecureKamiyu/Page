<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Free-Space Management</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part161.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part163.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 3pt;padding-left: 166pt;text-indent: 0pt;text-align: left;">Free-Space Management</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In this chapter, we take a small detour from our discussion of virtual- izing memory to discuss a fundamental aspect of any memory manage- ment system, whether it be a malloc library (managing pages of a pro- cess’s heap) or the OS itself (managing portions of the address space of a process). Specifically, we will discuss the issues surrounding <b>free-space management</b>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Let us make the problem more specific. Managing free space can cer- tainly be easy, as we will see when we discuss the concept of <b>paging</b>. It is easy when the space you are managing is divided into fixed-sized units; in such a case, you just keep a list of these fixed-sized units; when a client requests one of them, return the first entry.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: left;">Where free-space management becomes more difficult (and interest- ing) is when the free space you are managing consists of variable-sized units; this arises in a user-level memory-allocation library (as in <span class="s41">malloc() </span>and <span class="s41">free()</span>) and in an OS managing physical memory when using <b>seg- mentation </b>to implement virtual memory. In either case, the problem that exists is known as <b>external fragmentation</b>: the free space gets chopped into little pieces of different sizes and is thus fragmented; subsequent re- quests may fail because there is no single contiguous space that can sat- isfy the request, even though the total amount of free space exceeds the size of the request.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:120.223pt" cellspacing="0"><tr style="height:10pt"><td style="width:43pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s96" style="padding-left: 14pt;padding-right: 14pt;text-indent: 0pt;line-height: 8pt;text-align: center;">free</p></td><td style="width:43pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p class="s96" style="padding-left: 13pt;text-indent: 0pt;line-height: 8pt;text-align: left;">used</p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s96" style="padding-left: 14pt;padding-right: 14pt;text-indent: 0pt;line-height: 8pt;text-align: center;">free</p></td></tr></table><p class="s46" style="padding-left: 22pt;text-indent: 0pt;text-align: center;">0      10      20      30</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The figure shows an example of this problem. In this case, the total free space available is 20 bytes; unfortunately, it is fragmented into two chunks of size 10 each. As a result, a request for 15 bytes will fail even though there are 20 bytes free. And thus we arrive at the problem ad- dressed in this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">153</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 75pt;text-indent: 0pt;line-height: 11pt;text-align: left;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>M<span class="s7">ANAGE </span>F<span class="s7">REE </span>S<span class="s7">PACE</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">How should free space be managed, when satisfying variable-sized re- quests? What strategies can be used to minimize fragmentation? What are the time and space overheads of alternate approaches?</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part163.htm">17.1 Assumptions</a><a class="toc0" href="part164.htm">17.2 Low-level Mechanisms</a><a class="toc1" href="part165.htm">Splitting and Coalescing</a><a class="toc1" href="part166.htm">Tracking The Size Of Allocated Regions</a><a class="toc1" href="part167.htm">Embedding A Free List</a><a class="toc1" href="part168.htm">Growing The Heap</a><a class="toc0" href="part169.htm">17.3 Basic Strategies</a><a class="toc1" href="part170.htm">Best Fit</a><a class="toc1" href="part171.htm">Worst Fit</a><a class="toc1" href="part172.htm">First Fit</a><a class="toc1" href="part173.htm">Next Fit</a><a class="toc1" href="part174.htm">Examples</a><a class="toc0" href="part175.htm">17.4 Other Approaches</a><a class="toc1" href="part176.htm">Segregated Lists</a><a class="toc1" href="part177.htm">Buddy Allocation</a><a class="toc1" href="part178.htm">Other Ideas</a><a class="toc0" href="part179.htm">17.5 Summary</a><a class="toc0" href="part180.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part161.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part163.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
