<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.1 Unix I/O</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007899" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000046362" data-uri="chapter10.xhtml#P7000497027000000000000000046362" epub:type="title"><span class="pcalibre label pcalibre1">10.1 </span>Unix I/O</h1></header>
<p id="P7000497027000000000000000046363" data-uri="chapter10.xhtml#P7000497027000000000000000046363" class="pcalibre1 pcalibre calibre2">A Linux <i class="calibre5 pcalibre pcalibre1">file</i> is a sequence of <var class="calibre5 pcalibre pcalibre1">m</var> bytes:</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000046364" data-uri="chapter10.xhtml#P7000497027000000000000000046364">
<m:math display="block" alttext="" data-uri="" altimg-width="221" altimg-height="19" altimg="../images/ch10-1.png"><m:mrow><m:msub><m:mi>B</m:mi><m:mn>0</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>B</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:mo>…</m:mo><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>B</m:mi><m:mi>k</m:mi></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:mo>…</m:mo><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>B</m:mi><m:mrow><m:mi>m</m:mi><m:mo>-</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:math>
</div>
<p id="P7000497027000000000000000046365" data-uri="chapter10.xhtml#P7000497027000000000000000046365" class="pcalibre1 pcalibre calibre2">All I/O devices, such as networks, disks, and terminals, are modeled as files, and all input and output is performed by reading and writing the appropriate files. This elegant mapping of devices to files allows the Linux kernel to export a simple, low-level application interface, known as <i class="calibre5 pcalibre pcalibre1">Unix I/O</i>, that enables all input and output to be performed in a uniform and consistent way:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046366" data-uri="chapter10.xhtml#P7000497027000000000000000046366">
<li id="P7000497027000000000000000046367" data-uri="chapter10.xhtml#P7000497027000000000000000046367" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046368" data-uri="chapter10.xhtml#P7000497027000000000000000046368" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000078A1" title="891" data-uri="chapter10.xhtml#P70004970270000000000000000078A1" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">Opening files. </span>An application announces its intention to access an I/O device by asking the kernel to <i class="calibre5 pcalibre pcalibre1">open</i> the corresponding file. The kernel returns a small nonnegative integer, called a <i class="calibre5 pcalibre pcalibre1">descriptor</i>, that identifies the file in all subsequent operations on the file. The kernel keeps track of all information about the open file. The application only keeps track of the descriptor.</p>
<p id="P7000497027000000000000000046369" data-uri="chapter10.xhtml#P7000497027000000000000000046369" class="calibre15 pcalibre pcalibre1">Each process created by a Linux shell begins life with three open files: <i class="calibre5 pcalibre pcalibre1">standard input</i> (descriptor 0), <i class="calibre5 pcalibre pcalibre1">standard output</i> (descriptor 1), and <i class="calibre5 pcalibre pcalibre1">standard error</i> (descriptor 2). The header file <code id="P700049702700000000000000004636A" data-uri="chapter10.xhtml#P700049702700000000000000004636A" class="pcalibre1 calibre8 pcalibre">&lt;unistd.h&gt;</code> defines constants <code id="P700049702700000000000000004636B" data-uri="chapter10.xhtml#P700049702700000000000000004636B" class="pcalibre1 calibre8 pcalibre">STDIN_FILENO, STDOUT_FILENO</code>, and <code id="P700049702700000000000000004636C" data-uri="chapter10.xhtml#P700049702700000000000000004636C" class="pcalibre1 calibre8 pcalibre">STDERR_FILENO</code>, which can be used instead of the explicit descriptor values.</p></li>
<li id="P700049702700000000000000004636D" data-uri="chapter10.xhtml#P700049702700000000000000004636D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004636E" data-uri="chapter10.xhtml#P700049702700000000000000004636E" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Changing the current file position. </span>The kernel maintains a <i class="calibre5 pcalibre pcalibre1">file position k</i>, initially 0, for each open file. The file position is a byte offset from the beginning of a file. An application can set the current file position <var class="calibre5 pcalibre pcalibre1">k</var> explicitly by performing a <i class="calibre5 pcalibre pcalibre1">seek</i> operation.</p></li>
<li id="P700049702700000000000000004636F" data-uri="chapter10.xhtml#P700049702700000000000000004636F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046370" data-uri="chapter10.xhtml#P7000497027000000000000000046370" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Reading and writing files. </span>A <i class="calibre5 pcalibre pcalibre1">read</i> operation copies <var class="calibre5 pcalibre pcalibre1">n</var> &gt; 0 bytes from a file to memory, starting at the current file position <var class="calibre5 pcalibre pcalibre1">k</var> and then incrementing <var class="calibre5 pcalibre pcalibre1">k</var> by <var class="calibre5 pcalibre pcalibre1">n</var>. Given a file with a size of <var class="calibre5 pcalibre pcalibre1">m</var> bytes, performing a read operation when <var class="calibre5 pcalibre pcalibre1">k</var> ≥ <var class="calibre5 pcalibre pcalibre1">m</var> triggers a condition known as <i class="calibre5 pcalibre pcalibre1">end-of-file (EOF)</i>, which can be detected by the application. There is no explicit "EOF character" at the end of a file.</p>
<p id="P7000497027000000000000000046371" data-uri="chapter10.xhtml#P7000497027000000000000000046371" class="calibre15 pcalibre pcalibre1">Similarly, a <i class="calibre5 pcalibre pcalibre1">write</i> operation copies <var class="calibre5 pcalibre pcalibre1">n</var> &gt; 0 bytes from memory to a file, starting at the current file position <var class="calibre5 pcalibre pcalibre1">k</var> and then updating <var class="calibre5 pcalibre pcalibre1">k</var>.</p></li>
<li id="P7000497027000000000000000046372" data-uri="chapter10.xhtml#P7000497027000000000000000046372" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046373" data-uri="chapter10.xhtml#P7000497027000000000000000046373" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Closing files. </span>When an application has finished accessing a file, it informs the kernel by asking it to <i class="calibre5 pcalibre pcalibre1">close</i> the file. The kernel responds by freeing the data structures it created when the file was opened and restoring the descriptor to a pool of available descriptors. When a process terminates for any reason, the kernel closes all open files and frees their memory resources.</p></li>
</ul>
</section></body></html>
