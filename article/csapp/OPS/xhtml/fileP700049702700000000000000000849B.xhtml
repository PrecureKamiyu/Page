<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>12.6 Using Threads for Parallelism</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000849B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000046F5B" data-uri="chapter12.xhtml#P7000497027000000000000000046F5B" epub:type="title"><span class="pcalibre label pcalibre1">12.6 </span>Using Threads for Parallelism</h1></header>
<p id="P7000497027000000000000000046F5C" data-uri="chapter12.xhtml#P7000497027000000000000000046F5C" class="pcalibre1 pcalibre calibre2">Thus far in our study of concurrency, we have assumed concurrent threads exe-cuting on uniprocessor systems. However, most modern machines have multi-core processors. Concurrent programs often run faster on such machines because the operating system kernel schedules the concurrent threads in parallel on multiple cores, rather than sequentially on a single core. Exploiting such parallelism is critically important in applications such as busy Web servers, database servers, and large scientific codes, and it is becoming increasingly useful in mainstream applications such as Web browsers, spreadsheets, and document processors.</p>
<p id="P7000497027000000000000000046F5D" data-uri="chapter12.xhtml#P7000497027000000000000000046F5D" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000827E.xhtml#P7000497027000000000000000008497"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.30</span></a> shows the set relationships between sequential, concurrent, and parallel programs. The set of all programs can be partitioned into the disjoint sets of sequential and concurrent programs. A sequential program is written as a single logical flow. A concurrent program is written as multiple concurrent flows. A parallel program is a concurrent program running on multiple processors. Thus, the set of parallel programs is a proper subset of the set of concurrent programs.</p>
<p id="P7000497027000000000000000046F5E" data-uri="chapter12.xhtml#P7000497027000000000000000046F5E" class="pcalibre1 pcalibre calibre2">A detailed treatment of parallel programs is beyond our scope, but studying a few simple example programs will help you understand some important aspects of parallel programming. For example, consider how we might sum the sequence of integers 0, . . . , <var class="calibre5 pcalibre pcalibre1">n</var> − 1 in parallel. Of course, there is a closed-form solution for this particular problem, but nonetheless it is a concise and easy-to-understand exemplar that will allow us to make some interesting points about parallel programs.</p>
<p id="P7000497027000000000000000046F5F" data-uri="chapter12.xhtml#P7000497027000000000000000046F5F" class="pcalibre1 pcalibre calibre2">The most straightforward approach for assigning work to different threads is to partition the sequence into <var class="calibre5 pcalibre pcalibre1">t</var> disjoint regions and then assign each of <var class="calibre5 pcalibre pcalibre1">t</var> different <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000084A1" title="1014" data-uri="chapter12.xhtml#P70004970270000000000000000084A1" epub:type="pagebreak"></span>threads to work on its own region. For simplicity, assume that <var class="calibre5 pcalibre pcalibre1">n</var> is a multiple of <var class="calibre5 pcalibre pcalibre1">t</var>, such that each region has <i class="calibre5 pcalibre pcalibre1">n/t</i> elements. Let's look at some of the different ways that multiple threads might work on their assigned regions in parallel.</p>
<p id="P7000497027000000000000000046F60" data-uri="chapter12.xhtml#P7000497027000000000000000046F60" class="pcalibre1 pcalibre calibre2">The simplest and most straightforward option is to have the threads sum into a shared global variable that is protected by a mutex. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000084BD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.31</span></a> shows how we might implement this. In lines 28−33, the main thread creates the peer threads and then waits for them to terminate. Notice that the main thread passes a small integer to each peer thread that serves as a unique thread ID. Each peer thread will use its thread ID to determine which portion of the sequence it should work on. This idea of passing a small unique thread ID to the peer threads is a general technique that is used in many parallel applications. After the peer threads have terminated, the global variable <code id="P7000497027000000000000000046F61" data-uri="chapter12.xhtml#P7000497027000000000000000046F61" class="pcalibre1 calibre8 pcalibre">gsum</code> contains the final sum. The main thread then uses the closed-form solution to verify the result (lines 36−37).</p>
<p id="P7000497027000000000000000046F62" data-uri="chapter12.xhtml#P7000497027000000000000000046F62" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000084C8"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.32</span></a> shows the function that each peer thread executes. In line 4, the thread extracts the thread ID from the thread argument and then uses this ID to determine the region of the sequence it should work on (lines 5−6). In lines 9−13, the thread iterates over its portion of the sequence, updating the shared global variable <code id="P7000497027000000000000000046F63" data-uri="chapter12.xhtml#P7000497027000000000000000046F63" class="pcalibre1 calibre8 pcalibre">gsum</code> on each iteration. Notice that we are careful to protect each update with <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> mutex operations.</p>
<p id="P7000497027000000000000000046F64" data-uri="chapter12.xhtml#P7000497027000000000000000046F64" class="pcalibre1 pcalibre calibre2">When we run <code id="P7000497027000000000000000046F65" data-uri="chapter12.xhtml#P7000497027000000000000000046F65" class="pcalibre1 calibre8 pcalibre">psum-mutex</code> on a system with four cores on a sequence of size <var class="calibre5 pcalibre pcalibre1">n</var> = 2<sup class="calibre51 pcalibre pcalibre1">31</sup> and measure its running time (in seconds) as a function of the number of threads, we get a nasty surprise:</p>
<table id="P7000497027000000000000000046F66" data-uri="chapter12.xhtml#P7000497027000000000000000046F66" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046F67" data-uri="chapter12.xhtml#P7000497027000000000000000046F67" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000046F68" data-uri="chapter12.xhtml#P7000497027000000000000000046F68" class="calibre18 pcalibre pcalibre1">Number of threads</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046F69" data-uri="chapter12.xhtml#P7000497027000000000000000046F69" class="calibre18 pcalibre pcalibre1">Version</th>
<th id="P7000497027000000000000000046F6A" data-uri="chapter12.xhtml#P7000497027000000000000000046F6A" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000046F6B" data-uri="chapter12.xhtml#P7000497027000000000000000046F6B" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000046F6C" data-uri="chapter12.xhtml#P7000497027000000000000000046F6C" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000046F6D" data-uri="chapter12.xhtml#P7000497027000000000000000046F6D" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000046F6E" data-uri="chapter12.xhtml#P7000497027000000000000000046F6E" class="calibre18 pcalibre pcalibre1">16</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046F6F" data-uri="chapter12.xhtml#P7000497027000000000000000046F6F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046F70" data-uri="chapter12.xhtml#P7000497027000000000000000046F70" class="calibre10 pcalibre pcalibre1">psum-mutex</code></td>
<td id="P7000497027000000000000000046F71" data-uri="chapter12.xhtml#P7000497027000000000000000046F71" class="calibre20 pcalibre pcalibre1">68</td>
<td id="P7000497027000000000000000046F72" data-uri="chapter12.xhtml#P7000497027000000000000000046F72" class="calibre20 pcalibre pcalibre1">432</td>
<td id="P7000497027000000000000000046F73" data-uri="chapter12.xhtml#P7000497027000000000000000046F73" class="calibre20 pcalibre pcalibre1">719</td>
<td id="P7000497027000000000000000046F74" data-uri="chapter12.xhtml#P7000497027000000000000000046F74" class="calibre20 pcalibre pcalibre1">552</td>
<td id="P7000497027000000000000000046F75" data-uri="chapter12.xhtml#P7000497027000000000000000046F75" class="calibre20 pcalibre pcalibre1">599</td>
</tr>
</tbody>
</table>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046F76" data-uri="chapter12.xhtml#P7000497027000000000000000046F76">Not only is the program extremely slow when it runs sequentially as a single thread, it is nearly an order of magnitude slower when it runs in parallel as multiple threads. And the performance gets worse as we add more cores. The reason for this poor performance is that the synchronization operations (<var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var>) are very expensive relative to the cost of a single memory update. This highlights an important lesson about parallel programming: <i class="calibre5 pcalibre pcalibre1">Synchronization overhead is expensive and should be avoided if possible. If it cannot be avoided, the overhead should be amortized by as much useful computation as possible.</i></p>
<p id="P7000497027000000000000000046F77" data-uri="chapter12.xhtml#P7000497027000000000000000046F77" class="pcalibre1 pcalibre calibre2">One way to avoid synchronization in our example program is to have each peer thread compute its partial sum in a private variable that is not shared with any other thread, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000084D3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.33</span></a>. The main thread (not shown) defines a global array called <code id="P7000497027000000000000000046F78" data-uri="chapter12.xhtml#P7000497027000000000000000046F78" class="pcalibre1 calibre8 pcalibre">psum</code>, and each peer thread <var class="calibre5 pcalibre pcalibre1">i</var> accumulates its partial sum in <code id="P7000497027000000000000000046F79" data-uri="chapter12.xhtml#P7000497027000000000000000046F79" class="pcalibre1 calibre8 pcalibre">psum[i]</code>. Since we are careful to give each peer thread a unique memory location to update, it is not necessary to protect these updates with mutexes. The only necessary synchronization is that the main thread must wait for all of the children to finish. After the peer threads have terminated, the main thread sums up the elements of the <code id="P7000497027000000000000000046F7A" data-uri="chapter12.xhtml#P7000497027000000000000000046F7A" class="pcalibre1 calibre8 pcalibre">psum</code> vector to arrive at the final result.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000084BD" data-uri="chapter12.xhtml#P70004970270000000000000000084BD">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000084BE" title="1015" data-uri="chapter12.xhtml#P70004970270000000000000000084BE" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046F7B" data-uri="chapter12.xhtml#P7000497027000000000000000046F7B" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-mutex.c</i></p>
<pre id="P7000497027000000000000000046F7C" data-uri="chapter12.xhtml#P7000497027000000000000000046F7C" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F7D" data-uri="chapter12.xhtml#P7000497027000000000000000046F7D" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	#define MAXTHREADS 32
3	
4	void *sum_mutex(void *vargp); /* Thread routine */
5	
6	/* Global shared variables */
7	long gsum = 0;		/* Global sum */
8	long nelems_per_thread;	/* Number of elements to sum */
9	sem_t mutex;		/* Mutex to protect global sum */
10	
11	int main(int argc, char **argv)
12	{
13		long i, nelems, log_nelems, nthreads, myid[MAXTHREADS];
14		pthread_t tid[MAXTHREADS]; 15
16		/* Get input arguments */
17		if (argc != 3) {
18			printf("Usage: %s &lt;nthreads&gt; &lt;log_nelems&gt;\n", argv[0]);
19			exit(0);
20		}
21		nthreads = atoi(argv[1]);
22		log_nelems = atoi(argv[2]);
23		nelems = (1L &lt;&lt; log_nelems);
24		nelems_per_thread = nelems / nthreads;
25		sem_init(&amp;mutex, 0, 1);
26	
27		/* Create peer threads and wait for them to finish */
28		for (i = 0; i &lt; nthreads; i++) {
29			myid[i] = i;
30			Pthread_create(&amp;tid[i], NULL, sum_mutex, &amp;myid[i]);
31		}
32		for (i = 0; i &lt; nthreads; i++)
33			Pthread_join(tid[i], NULL);
34	
35		/* Check final answer */
36		if (gsum != (nelems * (nelems-1))/2)
37			printf("Error: result=%ld\n", gsum); 38
39		exit(0);
40	}
</code></pre>
<p id="P7000497027000000000000000046F7E" data-uri="chapter12.xhtml#P7000497027000000000000000046F7E" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-mutex.c</i></p>
<figcaption id="P7000497027000000000000000046F7F" data-uri="chapter12.xhtml#P7000497027000000000000000046F7F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F80" data-uri="chapter12.xhtml#P7000497027000000000000000046F80" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.31 </span>Main routine for <code id="P7000497027000000000000000046F81" data-uri="chapter12.xhtml#P7000497027000000000000000046F81" class="pcalibre1 calibre8 pcalibre">psum-mutex</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046F82" data-uri="chapter12.xhtml#P7000497027000000000000000046F82"><p id="P7000497027000000000000000046F83" data-uri="chapter12.xhtml#P7000497027000000000000000046F83" class="pcalibre calibre3 pcalibre1">Uses multiple threads to sum the elements of a sequence into a shared global variable protected by a mutex.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000084C8" data-uri="chapter12.xhtml#P70004970270000000000000000084C8">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000084C9" title="1016" data-uri="chapter12.xhtml#P70004970270000000000000000084C9" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046F84" data-uri="chapter12.xhtml#P7000497027000000000000000046F84" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-mutex.c</i></p>
<pre id="P7000497027000000000000000046F85" data-uri="chapter12.xhtml#P7000497027000000000000000046F85" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F86" data-uri="chapter12.xhtml#P7000497027000000000000000046F86" class="calibre10 pcalibre pcalibre1">
1	/* Thread routine for psum-mutex.c */
2	void *sum_mutex(void *vargp)
3	{
4		long myid = *((long *)vargp);		/* Extract the thread ID */
5		long start = myid * nelems_per_thread;	/* Start element index */
6		long end = start + nelems_per_thread;	/* End element index */
7		long i;
8	
9		for (i = start; i &lt; end; i++) {
10			P(&amp;mutex);
11			gsum += i;
12			V(&amp;mutex);
13		}
14		return NULL;
15	}
</code></pre>
<p id="P7000497027000000000000000046F87" data-uri="chapter12.xhtml#P7000497027000000000000000046F87" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-mutex.c</i></p>
<figcaption id="P7000497027000000000000000046F88" data-uri="chapter12.xhtml#P7000497027000000000000000046F88" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F89" data-uri="chapter12.xhtml#P7000497027000000000000000046F89" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.32 </span>Thread routine for <code id="P7000497027000000000000000046F8A" data-uri="chapter12.xhtml#P7000497027000000000000000046F8A" class="pcalibre1 calibre8 pcalibre">psum-mutex</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046F8B" data-uri="chapter12.xhtml#P7000497027000000000000000046F8B"><p id="P7000497027000000000000000046F8C" data-uri="chapter12.xhtml#P7000497027000000000000000046F8C" class="pcalibre calibre3 pcalibre1">Each peer thread sums into a shared global variable protected by a mutex.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000084D3" data-uri="chapter12.xhtml#P70004970270000000000000000084D3">
<p id="P7000497027000000000000000046F8D" data-uri="chapter12.xhtml#P7000497027000000000000000046F8D" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-array.c</i></p>
<pre id="P7000497027000000000000000046F8E" data-uri="chapter12.xhtml#P7000497027000000000000000046F8E" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F8F" data-uri="chapter12.xhtml#P7000497027000000000000000046F8F" class="calibre10 pcalibre pcalibre1">
1	/* Thread routine for psum-array.c */
2	void *sum_array(void *vargp)
3	{
4		long myid = *((long *)vargp);		/* Extract the thread ID */
5		long start = myid * nelems_per_thread;	/* Start element index */
6		long end = start + nelems_per_thread;	/* End element index */
7		long i;
8	
9		for (i = start; i &lt; end; i++) {
10			psum[myid] += i;
11		}
12		return NULL;
13	}
</code></pre>
<p id="P7000497027000000000000000046F90" data-uri="chapter12.xhtml#P7000497027000000000000000046F90" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-array.c</i></p>
<figcaption id="P7000497027000000000000000046F91" data-uri="chapter12.xhtml#P7000497027000000000000000046F91" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F92" data-uri="chapter12.xhtml#P7000497027000000000000000046F92" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.33 </span>Thread routine for <code id="P7000497027000000000000000046F93" data-uri="chapter12.xhtml#P7000497027000000000000000046F93" class="pcalibre1 calibre8 pcalibre">psum-array</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046F94" data-uri="chapter12.xhtml#P7000497027000000000000000046F94"><p id="P7000497027000000000000000046F95" data-uri="chapter12.xhtml#P7000497027000000000000000046F95" class="pcalibre calibre3 pcalibre1">Each peer thread accumulates its partial sum in a private array element that is not shared with any other peer thread.</p></div></figcaption>
</figure>
<p id="P7000497027000000000000000046F96" data-uri="chapter12.xhtml#P7000497027000000000000000046F96" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000084DE" title="1017" data-uri="chapter12.xhtml#P70004970270000000000000000084DE" epub:type="pagebreak"></span>When we run <code id="P7000497027000000000000000046F97" data-uri="chapter12.xhtml#P7000497027000000000000000046F97" class="pcalibre1 calibre8 pcalibre">psum-array</code> on our four-core system, we see that it runs orders of magnitude faster than <code id="P7000497027000000000000000046F98" data-uri="chapter12.xhtml#P7000497027000000000000000046F98" class="pcalibre1 calibre8 pcalibre">psum-mutex</code>:</p>
<table id="P7000497027000000000000000046F99" data-uri="chapter12.xhtml#P7000497027000000000000000046F99" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046F9A" data-uri="chapter12.xhtml#P7000497027000000000000000046F9A" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000046F9B" data-uri="chapter12.xhtml#P7000497027000000000000000046F9B" class="calibre18 pcalibre pcalibre1">Number of threads</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046F9C" data-uri="chapter12.xhtml#P7000497027000000000000000046F9C" class="calibre18 pcalibre pcalibre1">Version</th>
<th id="P7000497027000000000000000046F9D" data-uri="chapter12.xhtml#P7000497027000000000000000046F9D" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000046F9E" data-uri="chapter12.xhtml#P7000497027000000000000000046F9E" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000046F9F" data-uri="chapter12.xhtml#P7000497027000000000000000046F9F" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000046FA0" data-uri="chapter12.xhtml#P7000497027000000000000000046FA0" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000046FA1" data-uri="chapter12.xhtml#P7000497027000000000000000046FA1" class="calibre18 pcalibre pcalibre1">16</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FA2" data-uri="chapter12.xhtml#P7000497027000000000000000046FA2" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046FA3" data-uri="chapter12.xhtml#P7000497027000000000000000046FA3" class="calibre10 pcalibre pcalibre1">psum-mutex</code></td>
<td id="P7000497027000000000000000046FA4" data-uri="chapter12.xhtml#P7000497027000000000000000046FA4" class="calibre20 pcalibre pcalibre1">68.00</td>
<td id="P7000497027000000000000000046FA5" data-uri="chapter12.xhtml#P7000497027000000000000000046FA5" class="calibre20 pcalibre pcalibre1">432.00</td>
<td id="P7000497027000000000000000046FA6" data-uri="chapter12.xhtml#P7000497027000000000000000046FA6" class="calibre20 pcalibre pcalibre1">719.00</td>
<td id="P7000497027000000000000000046FA7" data-uri="chapter12.xhtml#P7000497027000000000000000046FA7" class="calibre20 pcalibre pcalibre1">552.00</td>
<td id="P7000497027000000000000000046FA8" data-uri="chapter12.xhtml#P7000497027000000000000000046FA8" class="calibre20 pcalibre pcalibre1">599.00</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FA9" data-uri="chapter12.xhtml#P7000497027000000000000000046FA9" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046FAA" data-uri="chapter12.xhtml#P7000497027000000000000000046FAA" class="calibre10 pcalibre pcalibre1">psum-array</code></td>
<td id="P7000497027000000000000000046FAB" data-uri="chapter12.xhtml#P7000497027000000000000000046FAB" class="calibre20 pcalibre pcalibre1">7.26</td>
<td id="P7000497027000000000000000046FAC" data-uri="chapter12.xhtml#P7000497027000000000000000046FAC" class="calibre20 pcalibre pcalibre1">3.64</td>
<td id="P7000497027000000000000000046FAD" data-uri="chapter12.xhtml#P7000497027000000000000000046FAD" class="calibre20 pcalibre pcalibre1">1.91</td>
<td id="P7000497027000000000000000046FAE" data-uri="chapter12.xhtml#P7000497027000000000000000046FAE" class="calibre20 pcalibre pcalibre1">1.85</td>
<td id="P7000497027000000000000000046FAF" data-uri="chapter12.xhtml#P7000497027000000000000000046FAF" class="calibre20 pcalibre pcalibre1">1.84</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000046FB0" data-uri="chapter12.xhtml#P7000497027000000000000000046FB0" class="pcalibre1 pcalibre calibre2">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a>, we learned how to use local variables to eliminate unnecessary memory references. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008518"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.34</span></a> shows how we can apply this principle by having each peer thread accumulate its partial sum into a local variable rather than a global variable. When we run <code id="P7000497027000000000000000046FB1" data-uri="chapter12.xhtml#P7000497027000000000000000046FB1" class="pcalibre1 calibre8 pcalibre">psum-local</code> on our four-core machine, we get another order-of-magnitude decrease in running time:</p>
<table id="P7000497027000000000000000046FB2" data-uri="chapter12.xhtml#P7000497027000000000000000046FB2" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046FB3" data-uri="chapter12.xhtml#P7000497027000000000000000046FB3" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000046FB4" data-uri="chapter12.xhtml#P7000497027000000000000000046FB4" class="calibre18 pcalibre pcalibre1">Number of threads</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046FB5" data-uri="chapter12.xhtml#P7000497027000000000000000046FB5" class="calibre18 pcalibre pcalibre1">Version</th>
<th id="P7000497027000000000000000046FB6" data-uri="chapter12.xhtml#P7000497027000000000000000046FB6" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000046FB7" data-uri="chapter12.xhtml#P7000497027000000000000000046FB7" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000046FB8" data-uri="chapter12.xhtml#P7000497027000000000000000046FB8" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000046FB9" data-uri="chapter12.xhtml#P7000497027000000000000000046FB9" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000046FBA" data-uri="chapter12.xhtml#P7000497027000000000000000046FBA" class="calibre18 pcalibre pcalibre1">16</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FBB" data-uri="chapter12.xhtml#P7000497027000000000000000046FBB" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046FBC" data-uri="chapter12.xhtml#P7000497027000000000000000046FBC" class="calibre10 pcalibre pcalibre1">psum-mutex</code></td>
<td id="P7000497027000000000000000046FBD" data-uri="chapter12.xhtml#P7000497027000000000000000046FBD" class="calibre20 pcalibre pcalibre1">68.00</td>
<td id="P7000497027000000000000000046FBE" data-uri="chapter12.xhtml#P7000497027000000000000000046FBE" class="calibre20 pcalibre pcalibre1">432.00</td>
<td id="P7000497027000000000000000046FBF" data-uri="chapter12.xhtml#P7000497027000000000000000046FBF" class="calibre20 pcalibre pcalibre1">719.00</td>
<td id="P7000497027000000000000000046FC0" data-uri="chapter12.xhtml#P7000497027000000000000000046FC0" class="calibre20 pcalibre pcalibre1">552.00</td>
<td id="P7000497027000000000000000046FC1" data-uri="chapter12.xhtml#P7000497027000000000000000046FC1" class="calibre20 pcalibre pcalibre1">599.00</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FC2" data-uri="chapter12.xhtml#P7000497027000000000000000046FC2" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046FC3" data-uri="chapter12.xhtml#P7000497027000000000000000046FC3" class="calibre10 pcalibre pcalibre1">psum-array</code></td>
<td id="P7000497027000000000000000046FC4" data-uri="chapter12.xhtml#P7000497027000000000000000046FC4" class="calibre20 pcalibre pcalibre1">7.26</td>
<td id="P7000497027000000000000000046FC5" data-uri="chapter12.xhtml#P7000497027000000000000000046FC5" class="calibre20 pcalibre pcalibre1">3.64</td>
<td id="P7000497027000000000000000046FC6" data-uri="chapter12.xhtml#P7000497027000000000000000046FC6" class="calibre20 pcalibre pcalibre1">1.91</td>
<td id="P7000497027000000000000000046FC7" data-uri="chapter12.xhtml#P7000497027000000000000000046FC7" class="calibre20 pcalibre pcalibre1">1.85</td>
<td id="P7000497027000000000000000046FC8" data-uri="chapter12.xhtml#P7000497027000000000000000046FC8" class="calibre20 pcalibre pcalibre1">1.84</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FC9" data-uri="chapter12.xhtml#P7000497027000000000000000046FC9" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000046FCA" data-uri="chapter12.xhtml#P7000497027000000000000000046FCA" class="calibre10 pcalibre pcalibre1">psum-local</code></td>
<td id="P7000497027000000000000000046FCB" data-uri="chapter12.xhtml#P7000497027000000000000000046FCB" class="calibre20 pcalibre pcalibre1">1.06</td>
<td id="P7000497027000000000000000046FCC" data-uri="chapter12.xhtml#P7000497027000000000000000046FCC" class="calibre20 pcalibre pcalibre1">0.54</td>
<td id="P7000497027000000000000000046FCD" data-uri="chapter12.xhtml#P7000497027000000000000000046FCD" class="calibre20 pcalibre pcalibre1">0.28</td>
<td id="P7000497027000000000000000046FCE" data-uri="chapter12.xhtml#P7000497027000000000000000046FCE" class="calibre20 pcalibre pcalibre1">0.29</td>
<td id="P7000497027000000000000000046FCF" data-uri="chapter12.xhtml#P7000497027000000000000000046FCF" class="calibre20 pcalibre pcalibre1">0.30</td>
</tr>
</tbody>
</table>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008518" data-uri="chapter12.xhtml#P7000497027000000000000000008518">
<p id="P7000497027000000000000000046FD0" data-uri="chapter12.xhtml#P7000497027000000000000000046FD0" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-local.c</i></p>
<pre id="P7000497027000000000000000046FD1" data-uri="chapter12.xhtml#P7000497027000000000000000046FD1" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046FD2" data-uri="chapter12.xhtml#P7000497027000000000000000046FD2" class="calibre10 pcalibre pcalibre1">
1	/* Thread routine for psum-local.c */
2	void *sum_local(void *vargp)
3	{
4		long myid = *((long *)vargp);		/* Extract the thread ID */
5		long start = myid * nelems_per_thread;	/* Start element index */
6		long end = start + nelems_per_thread;	/* End element index */
7		long i, sum = 0;
8	
9		for (i = start; i &lt; end; i++) {
10			sum += i;
11		}
12		psum[myid] = sum;
13		return NULL;
14	}
</code></pre>
<p id="P7000497027000000000000000046FD3" data-uri="chapter12.xhtml#P7000497027000000000000000046FD3" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/psum-local.c</i></p>
<figcaption id="P7000497027000000000000000046FD4" data-uri="chapter12.xhtml#P7000497027000000000000000046FD4" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046FD5" data-uri="chapter12.xhtml#P7000497027000000000000000046FD5" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.34 </span>Thread routine for <code id="P7000497027000000000000000046FD6" data-uri="chapter12.xhtml#P7000497027000000000000000046FD6" class="pcalibre1 calibre8 pcalibre">psum-local</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046FD7" data-uri="chapter12.xhtml#P7000497027000000000000000046FD7"><p id="P7000497027000000000000000046FD8" data-uri="chapter12.xhtml#P7000497027000000000000000046FD8" class="pcalibre calibre3 pcalibre1">Each peer thread accumulates its partial sum in a local variable.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008522" data-uri="chapter12.xhtml#P7000497027000000000000000008522">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008523" title="1018" data-uri="chapter12.xhtml#P7000497027000000000000000008523" epub:type="pagebreak"></span>
<img alt="A graph of elapsed time versus thread shows 1.06 seconds at thread 1, 0.54 seconds at thread 2, 0.28 seconds at thread 4, 0.29 seconds at thread 8, and 0.3 seconds at thread 16." id="P7000497027000000000000000046FD9" data-uri="P700049702700000000000000000B69A" src="../images/p1018-1.png" class="calibre344 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046FDA" data-uri="chapter12.xhtml#P7000497027000000000000000046FDA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046FDB" data-uri="chapter12.xhtml#P7000497027000000000000000046FDB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.35 </span>Performance of <code id="P7000497027000000000000000046FDC" data-uri="chapter12.xhtml#P7000497027000000000000000046FDC" class="pcalibre1 calibre8 pcalibre">psum-local</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008518"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.34</span></a>).</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046FDD" data-uri="chapter12.xhtml#P7000497027000000000000000046FDD"><p id="P7000497027000000000000000046FDE" data-uri="chapter12.xhtml#P7000497027000000000000000046FDE" class="pcalibre calibre3 pcalibre1">Summing a sequence of 2<sup class="calibre51 pcalibre pcalibre1">31</sup> elements using four processor cores.</p></div>
</figcaption>
</figure>
<p id="P7000497027000000000000000046FDF" data-uri="chapter12.xhtml#P7000497027000000000000000046FDF" class="pcalibre1 pcalibre calibre2">An important lesson to take away from this exercise is that writing parallel programs is tricky. Seemingly small changes to the code have a significant impact on performance.</p>
<section id="P700049702700000000000000000852B" data-uri="chapter12.xhtml#P700049702700000000000000000852B" class="pcalibre halftitlepage pcalibre1">
<section id="P700049702700000000000000000852C" data-uri="chapter12.xhtml#P700049702700000000000000000852C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046FE0" data-uri="chapter12.xhtml#P7000497027000000000000000046FE0" epub:type="title">Characterizing the Performance of Parallel Programs</h1></header>
<p id="P7000497027000000000000000046FE1" data-uri="chapter12.xhtml#P7000497027000000000000000046FE1" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008522"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.35</span></a> plots the total elapsed running time of the <code id="P7000497027000000000000000046FE2" data-uri="chapter12.xhtml#P7000497027000000000000000046FE2" class="pcalibre1 calibre8 pcalibre">psum-local</code> program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008518"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.34</span></a> as a function of the number of threads. In each case, the program runs on a system with four processor cores and sums a sequence of <var class="calibre5 pcalibre pcalibre1">n</var> = 2<sup class="calibre51 pcalibre pcalibre1">31</sup> elements. We see that running time decreases as we increase the number of threads, up to four threads, at which point it levels off and even starts to increase a little.</p>
<p id="P7000497027000000000000000046FE3" data-uri="chapter12.xhtml#P7000497027000000000000000046FE3" class="pcalibre1 pcalibre calibre2">In the ideal case, we would expect the running time to decrease linearly with the number of cores. That is, we would expect running time to drop by half each time we double the number of threads. This is indeed the case until we reach the point (<var class="calibre5 pcalibre pcalibre1">t</var> &gt; 4) where each of the four cores is busy running at least one thread. Running time actually increases a bit as we increase the number of threads because of the overhead of context switching multiple threads on the same core. For this reason, parallel programs are often written so that each core runs exactly one thread.</p>
<p id="P7000497027000000000000000046FE4" data-uri="chapter12.xhtml#P7000497027000000000000000046FE4" class="pcalibre1 pcalibre calibre2">Although absolute running time is the ultimate measure of any program's performance, there are some useful relative measures that can provide insight into how well a parallel program is exploiting potential parallelism. The <i class="calibre5 pcalibre pcalibre1">speedup</i> of a parallel program is typically defined as</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000046FE5" data-uri="chapter12.xhtml#P7000497027000000000000000046FE5">
<m:math display="block" alttext="" data-uri="" altimg-width="71" altimg-height="52" altimg="../images/ch12-03.png"><m:mrow><m:msub><m:mi>S</m:mi><m:mi>p</m:mi></m:msub><m:mo>=</m:mo><m:mfrac><m:mrow><m:msub><m:mi>T</m:mi><m:mn>1</m:mn></m:msub></m:mrow><m:mrow><m:msub><m:mi>T</m:mi><m:mi>p</m:mi></m:msub></m:mrow></m:mfrac></m:mrow></m:math>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046FE6" data-uri="chapter12.xhtml#P7000497027000000000000000046FE6">where <var class="calibre5 pcalibre pcalibre1">p</var> is the number of processor cores and <i class="calibre5 pcalibre pcalibre1">T<sub class="pcalibre1 calibre47 pcalibre">k</sub></i> is the running time on <var class="calibre5 pcalibre pcalibre1">k</var> cores. This formulation is sometimes referred to as <i class="calibre5 pcalibre pcalibre1">strong scaling.</i> When <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> is the execution</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008534" data-uri="chapter12.xhtml#P7000497027000000000000000008534">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008535" title="1019" data-uri="chapter12.xhtml#P7000497027000000000000000008535" epub:type="pagebreak"></span>
<table id="P7000497027000000000000000046FE7" data-uri="chapter12.xhtml#P7000497027000000000000000046FE7" class="pcalibre largetable pcalibre1">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FE8" data-uri="chapter12.xhtml#P7000497027000000000000000046FE8" class="calibre20 pcalibre pcalibre1">Threads (<var class="calibre5 pcalibre pcalibre1">t</var>)</td>
<td id="P7000497027000000000000000046FE9" data-uri="chapter12.xhtml#P7000497027000000000000000046FE9" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046FEA" data-uri="chapter12.xhtml#P7000497027000000000000000046FEA" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046FEB" data-uri="chapter12.xhtml#P7000497027000000000000000046FEB" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046FEC" data-uri="chapter12.xhtml#P7000497027000000000000000046FEC" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000046FED" data-uri="chapter12.xhtml#P7000497027000000000000000046FED" class="calibre20 pcalibre pcalibre1">16</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FEE" data-uri="chapter12.xhtml#P7000497027000000000000000046FEE" class="calibre20 pcalibre pcalibre1">Cores (<var class="calibre5 pcalibre pcalibre1">p</var>)</td>
<td id="P7000497027000000000000000046FEF" data-uri="chapter12.xhtml#P7000497027000000000000000046FEF" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046FF0" data-uri="chapter12.xhtml#P7000497027000000000000000046FF0" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046FF1" data-uri="chapter12.xhtml#P7000497027000000000000000046FF1" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046FF2" data-uri="chapter12.xhtml#P7000497027000000000000000046FF2" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046FF3" data-uri="chapter12.xhtml#P7000497027000000000000000046FF3" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FF4" data-uri="chapter12.xhtml#P7000497027000000000000000046FF4" class="calibre20 pcalibre pcalibre1">Running time (<i class="calibre5 pcalibre pcalibre1">T<sub class="calibre59 pcalibre pcalibre1">p</sub></i>)</td>
<td id="P7000497027000000000000000046FF5" data-uri="chapter12.xhtml#P7000497027000000000000000046FF5" class="calibre20 pcalibre pcalibre1">1.06</td>
<td id="P7000497027000000000000000046FF6" data-uri="chapter12.xhtml#P7000497027000000000000000046FF6" class="calibre20 pcalibre pcalibre1">0.54</td>
<td id="P7000497027000000000000000046FF7" data-uri="chapter12.xhtml#P7000497027000000000000000046FF7" class="calibre20 pcalibre pcalibre1">0.28</td>
<td id="P7000497027000000000000000046FF8" data-uri="chapter12.xhtml#P7000497027000000000000000046FF8" class="calibre20 pcalibre pcalibre1">0.29</td>
<td id="P7000497027000000000000000046FF9" data-uri="chapter12.xhtml#P7000497027000000000000000046FF9" class="calibre20 pcalibre pcalibre1">0.30</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046FFA" data-uri="chapter12.xhtml#P7000497027000000000000000046FFA" class="calibre20 pcalibre pcalibre1">Speedup (<var class="calibre5 pcalibre pcalibre1">S</var>)</td>
<td id="P7000497027000000000000000046FFB" data-uri="chapter12.xhtml#P7000497027000000000000000046FFB" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046FFC" data-uri="chapter12.xhtml#P7000497027000000000000000046FFC" class="calibre20 pcalibre pcalibre1">1.9</td>
<td id="P7000497027000000000000000046FFD" data-uri="chapter12.xhtml#P7000497027000000000000000046FFD" class="calibre20 pcalibre pcalibre1">3.8</td>
<td id="P7000497027000000000000000046FFE" data-uri="chapter12.xhtml#P7000497027000000000000000046FFE" class="calibre20 pcalibre pcalibre1">3.7</td>
<td id="P7000497027000000000000000046FFF" data-uri="chapter12.xhtml#P7000497027000000000000000046FFF" class="calibre20 pcalibre pcalibre1">3.5</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047000" data-uri="chapter12.xhtml#P7000497027000000000000000047000" class="calibre20 pcalibre pcalibre1">Efficiency (<i class="calibre5 pcalibre pcalibre1">E<sub class="calibre59 pcalibre pcalibre1">p</sub></i>)</td>
<td id="P7000497027000000000000000047001" data-uri="chapter12.xhtml#P7000497027000000000000000047001" class="calibre20 pcalibre pcalibre1">100%</td>
<td id="P7000497027000000000000000047002" data-uri="chapter12.xhtml#P7000497027000000000000000047002" class="calibre20 pcalibre pcalibre1">98%</td>
<td id="P7000497027000000000000000047003" data-uri="chapter12.xhtml#P7000497027000000000000000047003" class="calibre20 pcalibre pcalibre1">95%</td>
<td id="P7000497027000000000000000047004" data-uri="chapter12.xhtml#P7000497027000000000000000047004" class="calibre20 pcalibre pcalibre1">91%</td>
<td id="P7000497027000000000000000047005" data-uri="chapter12.xhtml#P7000497027000000000000000047005" class="calibre20 pcalibre pcalibre1">88%</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000047006" data-uri="chapter12.xhtml#P7000497027000000000000000047006" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000047007" data-uri="chapter12.xhtml#P7000497027000000000000000047007" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.36 </span>Speedup and parallel efficiency for the execution times in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008522"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.35</span></a>.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000047008" data-uri="chapter12.xhtml#P7000497027000000000000000047008">time of a sequential version of the program, then <i class="calibre5 pcalibre pcalibre1">S<sub class="pcalibre1 calibre47 pcalibre">p</sub></i> is called the <i class="calibre5 pcalibre pcalibre1">absolute speedup</i>. When <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> is the execution time of the parallel version of the program running on one core, then <i class="calibre5 pcalibre pcalibre1">S<sub class="pcalibre1 calibre47 pcalibre">p</sub></i> is called the <i class="calibre5 pcalibre pcalibre1">relative speedup</i>. Absolute speedup is a truer measure of the benefits of parallelism than relative speedup. Parallel programs often suffer from synchronization overheads, even when they run on one processor, and these overheads can artificially inflate the relative speedup numbers because they increase the size of the numerator. On the other hand, absolute speedup is more difficult to measure than relative speedup because measuring absolute speedup requires two different versions of the program. For complex parallel codes, creating a separate sequential version might not be feasible, either because the code is too complex or because the source code is not available.</p>
<p id="P7000497027000000000000000047009" data-uri="chapter12.xhtml#P7000497027000000000000000047009" class="pcalibre1 pcalibre calibre2">A related measure, known as <i class="calibre5 pcalibre pcalibre1">efficiency</i>, is defined as</p>
<div class="informalequation pcalibre pcalibre1" id="P700049702700000000000000004700A" data-uri="chapter12.xhtml#P700049702700000000000000004700A">
<m:math display="block" alttext="" data-uri="" altimg-width="140" altimg-height="55" altimg="../images/ch12-04.png"><m:mrow><m:msub><m:mi>E</m:mi><m:mi>p</m:mi></m:msub><m:mo>=</m:mo><m:mfrac><m:mrow><m:msub><m:mi>S</m:mi><m:mi>p</m:mi></m:msub></m:mrow><m:mi>p</m:mi></m:mfrac><m:mo>=</m:mo><m:mfrac><m:mrow><m:msub><m:mi>T</m:mi><m:mn>1</m:mn></m:msub></m:mrow><m:mrow><m:mi>p</m:mi><m:msub><m:mi>T</m:mi><m:mi>p</m:mi></m:msub></m:mrow></m:mfrac></m:mrow></m:math>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004700B" data-uri="chapter12.xhtml#P700049702700000000000000004700B">and is typically reported as a percentage in the range (0, 100]. Efficiency is a measure of the overhead due to parallelization. Programs with high efficiency are spending more time doing useful work and less time synchronizing and communicating than programs with low efficiency.</p>
<p id="P700049702700000000000000004700C" data-uri="chapter12.xhtml#P700049702700000000000000004700C" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008534"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.36</span></a> shows the different speedup and efficiency measures for our example parallel sum program. Efficiencies over 90 percent such as these are very good, but do not be fooled. We were able to achieve high efficiency because our problem was trivially easy to parallelize. In practice, this is not usually the case. Parallel programming has been an active area of research for decades. With the advent of commodity multi-core machines whose core count is doubling every few years, parallel programming continues to be a deep, difficult, and active area of research.</p>
<p id="P700049702700000000000000004700D" data-uri="chapter12.xhtml#P700049702700000000000000004700D" class="pcalibre1 pcalibre calibre2">There is another view of speedup, known as <i class="calibre5 pcalibre pcalibre1">weak scaling</i>, which increases the problem size along with the number of processors, such that the amount of work performed on each processor is held constant as the number of processors increases. With this formulation, speedup and efficiency are expressed in terms of the total amount of work accomplished per unit time. For example, if we can double the number of processors and do twice the amount of work per hour, then we are enjoying linear speedup and 100 percent efficiency.</p>
<p id="P700049702700000000000000004700E" data-uri="chapter12.xhtml#P700049702700000000000000004700E" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000855E" title="1020" data-uri="chapter12.xhtml#P700049702700000000000000000855E" epub:type="pagebreak"></span>Weak scaling is often a truer measure than strong scaling because it more accurately reflects our desire to use bigger machines to do more work. This is particularly true for scientific codes, where the problem size can be easily increased and where bigger problem sizes translate directly to better predictions of nature. However, there exist applications whose sizes are not so easily increased, and for these applications strong scaling is more appropriate. For example, the amount of work performed by real-time signal-processing applications is often determined by the properties of the physical sensors that are generating the signals. Changing the total amount of work requires using different physical sensors, which might not be feasible or necessary. For these applications, we typically want to use parallelism to accomplish a fixed amount of work as quickly as possible.</p>
<section id="P700049702700000000000000000855F" data-uri="chapter12.xhtml#P700049702700000000000000000855F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P700049702700000000000000004700F" data-uri="chapter12.xhtml#P700049702700000000000000004700F" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.11 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000875E.xhtml#P7000497027000000000000000008803">1038</a>)</h1></header>
<p id="P7000497027000000000000000047010" data-uri="chapter12.xhtml#P7000497027000000000000000047010" class="pcalibre1 pcalibre calibre2">Fill in the blanks for the parallel program in the following table. Assume strong scaling.</p>
<table id="P7000497027000000000000000047011" data-uri="chapter12.xhtml#P7000497027000000000000000047011" class="pcalibre largetable pcalibre1">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047012" data-uri="chapter12.xhtml#P7000497027000000000000000047012" class="calibre20 pcalibre pcalibre1">Threads (<var class="calibre5 pcalibre pcalibre1">t</var>)</td>
<td id="P7000497027000000000000000047013" data-uri="chapter12.xhtml#P7000497027000000000000000047013" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000047014" data-uri="chapter12.xhtml#P7000497027000000000000000047014" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000047015" data-uri="chapter12.xhtml#P7000497027000000000000000047015" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047016" data-uri="chapter12.xhtml#P7000497027000000000000000047016" class="calibre20 pcalibre pcalibre1">Cores (<var class="calibre5 pcalibre pcalibre1">p</var>)</td>
<td id="P7000497027000000000000000047017" data-uri="chapter12.xhtml#P7000497027000000000000000047017" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000047018" data-uri="chapter12.xhtml#P7000497027000000000000000047018" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000047019" data-uri="chapter12.xhtml#P7000497027000000000000000047019" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004701A" data-uri="chapter12.xhtml#P700049702700000000000000004701A" class="calibre20 pcalibre pcalibre1">Running time (<i class="calibre5 pcalibre pcalibre1">T<sub class="calibre59 pcalibre pcalibre1">p</sub></i>)</td>
<td id="P700049702700000000000000004701B" data-uri="chapter12.xhtml#P700049702700000000000000004701B" class="calibre20 pcalibre pcalibre1">12</td>
<td id="P700049702700000000000000004701C" data-uri="chapter12.xhtml#P700049702700000000000000004701C" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P700049702700000000000000004701D" data-uri="chapter12.xhtml#P700049702700000000000000004701D" class="calibre20 pcalibre pcalibre1">6</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004701E" data-uri="chapter12.xhtml#P700049702700000000000000004701E" class="calibre20 pcalibre pcalibre1">Speedup (<var class="calibre5 pcalibre pcalibre1">S</var><var class="calibre5 pcalibre pcalibre1">p</var>)</td>
<td id="P700049702700000000000000004701F" data-uri="chapter12.xhtml#P700049702700000000000000004701F" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000047020" data-uri="chapter12.xhtml#P7000497027000000000000000047020" class="calibre20 pcalibre pcalibre1">1.5</td>
<td id="P7000497027000000000000000047021" data-uri="chapter12.xhtml#P7000497027000000000000000047021" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047022" data-uri="chapter12.xhtml#P7000497027000000000000000047022" class="calibre20 pcalibre pcalibre1">Efficiency (<i class="calibre5 pcalibre pcalibre1">E<sub class="calibre59 pcalibre pcalibre1">p</sub></i>)</td>
<td id="P7000497027000000000000000047023" data-uri="chapter12.xhtml#P7000497027000000000000000047023" class="calibre20 pcalibre pcalibre1">100%</td>
<td id="P7000497027000000000000000047024" data-uri="chapter12.xhtml#P7000497027000000000000000047024" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000047025" data-uri="chapter12.xhtml#P7000497027000000000000000047025" class="calibre20 pcalibre pcalibre1">50%</td>
</tr>
</tbody>
</table>
</section>
</section>
</section>
</section></body></html>
