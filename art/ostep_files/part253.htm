<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Segmented FIFO</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part252.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part254.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Segmented FIFO</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: right;">To address these two problems, the developers came up with the <b>seg- mented FIFO </b>replacement policy [RL81]. The idea is simple: each pro- cess has a maximum number of pages it can keep in memory, known as its <b>resident set size </b>(<b>RSS</b>). Each of these pages is kept on a FIFO list; when a process exceeds its RSS, the “first-in” page is evicted. FIFO clearly does not need any support from the hardware, and is thus easy to implement. Of course, pure FIFO does not perform particularly well, as we saw earlier. To improve FIFO’s performance, VMS introduced two <b>second- chance lists </b>where pages are placed before getting evicted from memory, specifically a global <i>clean-page free list </i>and <i>dirty-page list</i>. When a process <span class="s43">P </span>exceeds its RSS, a page is removed from its per-process FIFO; if clean (not modified), it is placed on the end of the clean-page list; if dirty (mod-</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">ified), it is placed on the end of the dirty-page list.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">If another process <span class="s43">Q </span>needs a free page, it takes the first free page off of the global clean list. However, if the original process <span class="s43">P </span>faults on that page <i>before </i>it is reclaimed, <span class="s43">P </span>reclaims it from the free (or dirty) list, thus avoiding a costly disk access. The bigger these global second-chance lists are, the closer the segmented FIFO algorithm performs to LRU [RL81].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part252.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part254.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
