<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>27.1 Thread Creation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part271.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part273.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">27.1 Thread Creation</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The first thing you have to be able to do to write a multi-threaded program is to create new threads, and thus some kind of thread creation interface must exist. In POSIX, it is easy:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">#include &lt;pthread.h&gt; int</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">pthread_create(   pthread_t <span class="s39">*   </span>thread,</p><p class="s38" style="padding-left: 103pt;text-indent: 0pt;line-height: 83%;text-align: left;">const pthread_attr_t <span class="s39">* </span>attr,</p><p class="s38" style="padding-left: 128pt;text-indent: 0pt;line-height: 85%;text-align: left;">void <span class="s39">*     </span>(<span class="s39">*</span>start_routine)(void<span class="s39">*</span>),</p><p class="s38" style="padding-left: 128pt;text-indent: 0pt;line-height: 92%;text-align: left;">void <span class="s39">*     </span>arg);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_318.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_319.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_320.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">This declaration might look a little complex (particularly if you haven’t used function pointers in C), but actually it’s not too bad. There are four arguments: <span class="s41">thread</span>, <span class="s41">attr</span>, <span class="s41">start routine</span>, and <span class="s41">arg</span>. The first, <span class="s41">thread</span>, is a pointer to a structure of type <span class="s41">pthread t</span>; we’ll use this structure to interact with this thread, and thus we need to pass it to <span class="s41">pthread create() </span>in order to initialize it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: center;">279</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_321.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_322.png"/></span></p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: left;">The second argument, <span class="s41">attr</span>, is used to specify any attributes this thread might have. Some examples include setting the stack size or perhaps in- formation about the scheduling priority of the thread. An attribute is initialized with a separate call to <span class="s41">pthread attr init()</span>; see the man- ual page for details. However, in most cases, the defaults will be fine; in this case, we will simply pass the value <span class="s41">NULL </span>in.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_323.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_324.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 86%;text-align: justify;">The third argument is the most complex, but is really just asking: which function should this thread start running in? In C, we call this a <b>function pointer</b>, and this one tells us the following is expected: a function name (<span class="s41">start routine</span>), which is passed a single argument of type <span class="s41">void </span><span class="s86">* </span>(as indicated in the parentheses after <span class="s41">start routine</span>), and which returns a value of type <span class="s41">void </span><span class="s86">* </span>(i.e., a <b>void pointer</b>).</p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">If this routine instead required an integer argument, instead of a void</p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">pointer, the declaration would look like this:</p><p class="s38" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">int pthread_create(..., // first two args are the same</p><p class="s38" style="padding-left: 148pt;text-indent: 0pt;line-height: 90%;text-align: left;">void <span class="s39">*  </span>(<span class="s39">*</span>start_routine)(int), int   arg);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">If instead the routine took a void pointer as an argument, but returned an integer, it would look like this:</p><p class="s38" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">int pthread_create(..., // first two args are the same</p><p class="s38" style="padding-left: 148pt;text-indent: 0pt;line-height: 89%;text-align: left;">int   (<span class="s39">*</span>start_routine)(void <span class="s39">*</span>), void <span class="s39">*  </span>arg);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_325.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Finally, the fourth argument, <span class="s41">arg</span>, is exactly the argument to be passed to the function where the thread begins execution. You might ask: why do we need these void pointers? Well, the answer is quite simple: having a void pointer as an argument to the function <span class="s41">start routine </span>allows us to pass in <i>any </i>type of argument; having it as a return value allows the thread to return <i>any </i>type of result.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_326.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Let’s look at an example in Figure <span style=" color: #00AEEF;">27.1</span>. Here we just create a thread that is passed two arguments, packaged into a single type we define our- selves (<span class="s41">myarg t</span>). The thread, once created, can simply cast its argument to the type it expects and thus unpack the arguments as desired.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">And there it is! Once you create a thread, you really have another live executing entity, complete with its own call stack, running within the <i>same </i>address space as all the currently existing threads in the program. The fun thus begins!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part271.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part273.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
