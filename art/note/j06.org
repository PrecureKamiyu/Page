* intro 什么是软件测试

** 测试的分类

软件生命周期之中, 将会执行不同类型或者级别的软件测试. 我们应当组合应用
不同类型的测试, 以确保系统功能行为都符合预期.

两种分类: 
1. V模式
2. W模式
前者就是线性的软件编写和测试, 也就是说, 只有现编写完了, 我们才能够进行
测试. 是一种线性的结构. 

W 模式就是测试和编写并行.编写程序的同时, 还编写了应该如何测试. 随后再
进行测试.

** 测试用例

Test case 是指对于某个产品进行的 *测试任务的描述*. 体现测试方案方法计
数和策略 (?)

简单地认为, 测试用例是为了一个 *特定的目标* 而定制的一组 *测试输入, 实
行条件和预期结果*. Indeed. 用于核实是否满足某种需求.

测试用例是执行的 *最小测试实体*.

** 测试方法

测试用例（Test Case）是将 *行为活动* 做一个科学化的组织归纳，目的是能
够将软件测试的行为转化成可管理的模式；同时测试用例也是将测试具体量化的
方法之一，不同类别的软件，测试用例是不同的。

你在说你吗呢.

分为白盒测试和黑盒测试. 

- *白盒*: 全面了解程序内部逻辑结构. 
- *黑盒*: 功能测试, 不考虑内部逻辑.

** 设计原则



* 白盒测试

也称为 ~结构测试~ 和 ~逻辑驱动~ 测试, 基于源代码, 对于程序内部展开测试.
其验证程序中的通路是否有正常工作. 

** 优缺点

*** 优点

其针对程序内部的各个部分, 因此定位速度快. 有助于了解测试的 ~覆盖程度~ ,
有助于优化代码. 

*** 缺点 
但是其对于测试人员的要求高. 并且成本较高.

** 模型

白盒测试需要验证所有道路. 于是对于不同分支结构需要进行对应的模型构建. 

** 逻辑覆盖方法

针对不同分支, 其判定表达式, 来遍历整个结构, 也就是每一个分支, 每一个情
况都能测试到, 也即, 实现了对于程序的 ~覆盖~ 

有下面指标: 
1. 语句覆盖; 程序之中的每一个 ~语句~ 都执行了一遍. 
2. 判定覆盖: 程序之中的每个 ~分支~ 都执行了一遍. 
3. 条件覆盖: 程序之中的每一个逻辑判定 ~条件~ 的两种可能(真假)都取到了
   一遍.
4. 判定条件覆盖: 判定条件覆盖, 即, 同时满足了判定覆盖和条件覆盖.
5. 条件组合覆盖: 在每一个判定节点之中, 所有简单判定条件的所有可能的取
   值组合情况至少执行一次. 比如说, 我们有两个判定条件, 我们需要遍历四
   种情况, 也就是 TT TF FT FF 这四种. 所有的 ~组合~ 都得进行一遍. 
6. 路径覆盖: 程序之中每一条可能的 ~路径~ 都执行一遍. 

什么, 难道 2.3. 不是一样的吗? 

* 黑盒测试

也称为功能测试或者是数据驱动测试, 仅仅对程序接口进行测试. 

*优点* 简单. 开发和测试可以 =并行=. *缺点*: 

** 等价类

一个等价类之中发生的错误是等效的. 我们应当划分出等价类, 随后取等价类之
中的一个例子进行测试. 

对于输入, 符合要求的称为有效等价类, 不符合要求的称为无效等价类. 比如说
我们的输入应该为一个数字, 那么有两个等价类, 一个有效的: 确实是数字; 一
个无效的: 含有非数字字符的输入. 

比如说, 我们现在输入一个年月, 用 6 位数字表示: 

| 年月     |          |                                  |
| 类型     | 有效     | 无效                             |
| 6 位数字 | 6 位数字 | 有非数字字符; 多于六个; 少于六个 |
| 年份范围 | 范围     | 大于这个范围的; 小于这个范围的   |
| 月份范围 | 01到12   | 等于00; 大于12                   |

** 覆盖等价类

每一个等价类我们都至少设置一个测试用例. 最好这些用例没有重叠, 也就是说,对
于一个测试用例, 其不会同时是两种等价类.

** 边界值分析

边界值分析是一种常用的测试技术, 其选择 =系统边界= 或者是 =边界附近= 的
数据进行用例的设计, 这是因为边界条件的测试用例具有更高的测试回报. 

针对输入条件的边界点, 进行一个组合就能找到系统的边界. 而输入条件的边界
定义为: 在等价类之中, 可能导致系统的 =内部处理机制= 发生变化的点. 

找到了边界之后, 我们可以进行测试的设计, 这里存在不同的设计, 比如说我们
对于所有边界进行测试, 也就是遍历所有边界值(边界附近的值). 或者是我们考
虑有效等价类之中的边界值. 或者说我们只进行 =单边界= 的测试, 也就是, 这
个边界值仅仅在 一个条件 的附近. 或者是我们相反, 进行 =双边界= 的测试.

我们能够看到, 双边界测试明显是数据量最小的, 但是其覆盖率并不高. 遍历虽
然说将所有情况都覆盖了, 但是数量庞大, 效率并不是很高. 

** 场景法

以 =事件流= 为核心, 测试软件, 系统, 程序的 =主要业务流程=, =主要功能的
正确性= 和 =异常处理能力=.

这个时候我们针对的不同流程, 看其在某些特定流程之下是否正常运转. 

我们流程为: 
1. 定义 =基本流= 和 =备选流=
2. 定义场景 ?
3. 从场景设计之中测试用例.
4. 输入测试数据, 完善测试用例.

什么几把

** 单元测试

针对软件之中的 =最小可测试单元=, 比如说一个对象之类的, 进行检查和验证,
比如说测试一个对象内部的方法. 单元测试可以看为是编码工作的一部分. 应该
由程序员完成. 

* 压力测试和性能测试?
* 代码质量保证? 