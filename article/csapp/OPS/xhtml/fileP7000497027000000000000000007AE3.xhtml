<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.11 Putting It Together: Which I/O Functions Should I Use?</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007AE3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000465CA" data-uri="chapter10.xhtml#P70004970270000000000000000465CA" epub:type="title"><span class="pcalibre label pcalibre1">10.11 </span>Putting It Together: Which I/O Functions Should I Use?</h1></header>
<p id="P70004970270000000000000000465CB" data-uri="chapter10.xhtml#P70004970270000000000000000465CB" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007AE6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.16</span></a> summarizes the various I/O packages that we have discussed in this chapter.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007AE6" data-uri="chapter10.xhtml#P7000497027000000000000000007AE6">
<img alt="A diagram illustrates relationships between various I/O packages." id="P70004970270000000000000000465CC" data-uri="P700049702700000000000000000B7B9" src="../images/p911-1.png" class="calibre314 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000465CD" data-uri="chapter10.xhtml#P70004970270000000000000000465CD" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000465CE" data-uri="chapter10.xhtml#P70004970270000000000000000465CE" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.16 </span>Relationship between Unix I/O, standard I/O, and R<span class="smallcaps1 pcalibre pcalibre1">io</span>.</h1></header>

<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002692F" data-uri="chapter10.xhtml#P700049702700000000000000002692F">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000465CF" data-uri="chapter10.xhtml#P70004970270000000000000000465CF" class="pcalibre1 pcalibre calibre2">A diagram shows three functions within C application program, each leading to a list, as summarized below.</p>
<ul id="P70004970270000000000000000465D0" data-uri="chapter10.xhtml#P70004970270000000000000000465D0" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000465D1" data-uri="chapter10.xhtml#P70004970270000000000000000465D1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465D2" data-uri="chapter10.xhtml#P70004970270000000000000000465D2" class="pcalibre calibre3 pcalibre1">Unix I/O functions:</p>
<ul id="P70004970270000000000000000465D3" data-uri="chapter10.xhtml#P70004970270000000000000000465D3" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000465D4" data-uri="chapter10.xhtml#P70004970270000000000000000465D4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465D5" data-uri="chapter10.xhtml#P70004970270000000000000000465D5" class="pcalibre calibre3 pcalibre1">Open</p></li>
<li id="P70004970270000000000000000465D6" data-uri="chapter10.xhtml#P70004970270000000000000000465D6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465D7" data-uri="chapter10.xhtml#P70004970270000000000000000465D7" class="pcalibre calibre3 pcalibre1">Read</p></li>
<li id="P70004970270000000000000000465D8" data-uri="chapter10.xhtml#P70004970270000000000000000465D8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465D9" data-uri="chapter10.xhtml#P70004970270000000000000000465D9" class="pcalibre calibre3 pcalibre1">Write</p></li>
<li id="P70004970270000000000000000465DA" data-uri="chapter10.xhtml#P70004970270000000000000000465DA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465DB" data-uri="chapter10.xhtml#P70004970270000000000000000465DB" class="pcalibre calibre3 pcalibre1">Lseek</p></li>
<li id="P70004970270000000000000000465DC" data-uri="chapter10.xhtml#P70004970270000000000000000465DC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465DD" data-uri="chapter10.xhtml#P70004970270000000000000000465DD" class="pcalibre calibre3 pcalibre1">Stat</p></li>
<li id="P70004970270000000000000000465DE" data-uri="chapter10.xhtml#P70004970270000000000000000465DE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465DF" data-uri="chapter10.xhtml#P70004970270000000000000000465DF" class="pcalibre calibre3 pcalibre1">Close</p></li>
</ul></li>
<li id="P70004970270000000000000000465E0" data-uri="chapter10.xhtml#P70004970270000000000000000465E0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465E1" data-uri="chapter10.xhtml#P70004970270000000000000000465E1" class="pcalibre calibre3 pcalibre1">Standard I/O functions:</p>
<ul id="P70004970270000000000000000465E2" data-uri="chapter10.xhtml#P70004970270000000000000000465E2" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000465E3" data-uri="chapter10.xhtml#P70004970270000000000000000465E3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465E4" data-uri="chapter10.xhtml#P70004970270000000000000000465E4" class="pcalibre calibre3 pcalibre1">Fopen</p></li>
<li id="P70004970270000000000000000465E5" data-uri="chapter10.xhtml#P70004970270000000000000000465E5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465E6" data-uri="chapter10.xhtml#P70004970270000000000000000465E6" class="pcalibre calibre3 pcalibre1">Fdopen</p></li>
<li id="P70004970270000000000000000465E7" data-uri="chapter10.xhtml#P70004970270000000000000000465E7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465E8" data-uri="chapter10.xhtml#P70004970270000000000000000465E8" class="pcalibre calibre3 pcalibre1">Fread</p></li>
<li id="P70004970270000000000000000465E9" data-uri="chapter10.xhtml#P70004970270000000000000000465E9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465EA" data-uri="chapter10.xhtml#P70004970270000000000000000465EA" class="pcalibre calibre3 pcalibre1">Fwrite</p></li>
<li id="P70004970270000000000000000465EB" data-uri="chapter10.xhtml#P70004970270000000000000000465EB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465EC" data-uri="chapter10.xhtml#P70004970270000000000000000465EC" class="pcalibre calibre3 pcalibre1">Fscanf</p></li>
<li id="P70004970270000000000000000465ED" data-uri="chapter10.xhtml#P70004970270000000000000000465ED" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465EE" data-uri="chapter10.xhtml#P70004970270000000000000000465EE" class="pcalibre calibre3 pcalibre1">Fprintf</p></li>
<li id="P70004970270000000000000000465EF" data-uri="chapter10.xhtml#P70004970270000000000000000465EF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465F0" data-uri="chapter10.xhtml#P70004970270000000000000000465F0" class="pcalibre calibre3 pcalibre1">Ascanf</p></li>
<li id="P70004970270000000000000000465F1" data-uri="chapter10.xhtml#P70004970270000000000000000465F1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465F2" data-uri="chapter10.xhtml#P70004970270000000000000000465F2" class="pcalibre calibre3 pcalibre1">Aprintf</p></li>
<li id="P70004970270000000000000000465F3" data-uri="chapter10.xhtml#P70004970270000000000000000465F3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465F4" data-uri="chapter10.xhtml#P70004970270000000000000000465F4" class="pcalibre calibre3 pcalibre1">Fgets</p></li>
<li id="P70004970270000000000000000465F5" data-uri="chapter10.xhtml#P70004970270000000000000000465F5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465F6" data-uri="chapter10.xhtml#P70004970270000000000000000465F6" class="pcalibre calibre3 pcalibre1">Fputs</p></li>
<li id="P70004970270000000000000000465F7" data-uri="chapter10.xhtml#P70004970270000000000000000465F7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465F8" data-uri="chapter10.xhtml#P70004970270000000000000000465F8" class="pcalibre calibre3 pcalibre1">Fflish</p></li>
<li id="P70004970270000000000000000465F9" data-uri="chapter10.xhtml#P70004970270000000000000000465F9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465FA" data-uri="chapter10.xhtml#P70004970270000000000000000465FA" class="pcalibre calibre3 pcalibre1">Fseek</p></li>
<li id="P70004970270000000000000000465FB" data-uri="chapter10.xhtml#P70004970270000000000000000465FB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465FC" data-uri="chapter10.xhtml#P70004970270000000000000000465FC" class="pcalibre calibre3 pcalibre1">Fclose</p></li>
</ul></li>
<li id="P70004970270000000000000000465FD" data-uri="chapter10.xhtml#P70004970270000000000000000465FD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000465FE" data-uri="chapter10.xhtml#P70004970270000000000000000465FE" class="pcalibre calibre3 pcalibre1">Rio functions:</p>
<ul id="P70004970270000000000000000465FF" data-uri="chapter10.xhtml#P70004970270000000000000000465FF" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046600" data-uri="chapter10.xhtml#P7000497027000000000000000046600" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046601" data-uri="chapter10.xhtml#P7000497027000000000000000046601" class="pcalibre calibre3 pcalibre1">Rio_readn</p></li>
<li id="P7000497027000000000000000046602" data-uri="chapter10.xhtml#P7000497027000000000000000046602" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046603" data-uri="chapter10.xhtml#P7000497027000000000000000046603" class="pcalibre calibre3 pcalibre1">Rio_writen</p></li>
<li id="P7000497027000000000000000046604" data-uri="chapter10.xhtml#P7000497027000000000000000046604" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046605" data-uri="chapter10.xhtml#P7000497027000000000000000046605" class="pcalibre calibre3 pcalibre1">Rio_readinitb</p></li>
<li id="P7000497027000000000000000046606" data-uri="chapter10.xhtml#P7000497027000000000000000046606" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046607" data-uri="chapter10.xhtml#P7000497027000000000000000046607" class="pcalibre calibre3 pcalibre1">Rio_readlineb</p></li>
<li id="P7000497027000000000000000046608" data-uri="chapter10.xhtml#P7000497027000000000000000046608" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046609" data-uri="chapter10.xhtml#P7000497027000000000000000046609" class="pcalibre calibre3 pcalibre1">Rio_readnb</p></li>
</ul>
</li></ul>
</details>
</figcaption>
</figure>
<p id="P700049702700000000000000004660A" data-uri="chapter10.xhtml#P700049702700000000000000004660A" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007AEB" title="912" data-uri="chapter10.xhtml#P7000497027000000000000000007AEB" epub:type="pagebreak"></span>The Unix I/O model is implemented in the operating system kernel. It is available to applications through functions such as <code id="P700049702700000000000000004660B" data-uri="chapter10.xhtml#P700049702700000000000000004660B" class="pcalibre1 calibre8 pcalibre">open, close, lseek, read, write</code>, and <code id="P700049702700000000000000004660C" data-uri="chapter10.xhtml#P700049702700000000000000004660C" class="pcalibre1 calibre8 pcalibre">stat</code>. The higher-level R<span class="smallcaps pcalibre pcalibre1">io </span>and standard I/O functions are implemented "on top of" (using) the Unix I/O functions. The R<span class="smallcaps pcalibre pcalibre1">io </span>functions are robust wrappers for <code id="P700049702700000000000000004660D" data-uri="chapter10.xhtml#P700049702700000000000000004660D" class="pcalibre1 calibre8 pcalibre">read</code> and <code id="P700049702700000000000000004660E" data-uri="chapter10.xhtml#P700049702700000000000000004660E" class="pcalibre1 calibre8 pcalibre">write</code> that were developed specifically for this textbook. They automatically deal with short counts and provide an efficient buffered approach for reading text lines. The standard I/O functions provide a more complete buffered alternative to the Unix I/O functions, including formatted I/O routines such as <code id="P700049702700000000000000004660F" data-uri="chapter10.xhtml#P700049702700000000000000004660F" class="pcalibre1 calibre8 pcalibre">printf</code> and <code id="P7000497027000000000000000046610" data-uri="chapter10.xhtml#P7000497027000000000000000046610" class="pcalibre1 calibre8 pcalibre">scanf</code>.</p>
<p id="P7000497027000000000000000046611" data-uri="chapter10.xhtml#P7000497027000000000000000046611" class="pcalibre1 pcalibre calibre2">So which of these functions should you use in your programs? Here are some basic guidelines:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046612" data-uri="chapter10.xhtml#P7000497027000000000000000046612">
<li id="P7000497027000000000000000046613" data-uri="chapter10.xhtml#P7000497027000000000000000046613" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046614" data-uri="chapter10.xhtml#P7000497027000000000000000046614" class="calibre13 pcalibre pcalibre1">G1: <span class="pcalibre leadin pcalibre1">Use the standard I/O functions whenever possible.</span> The standard I/O functions are the method of choice for I/O on disk and terminal devices. Most C programmers use standard I/O exclusively throughout their careers, never bothering with the lower-level Unix I/O functions (except possibly <code id="P7000497027000000000000000046615" data-uri="chapter10.xhtml#P7000497027000000000000000046615" class="pcalibre1 calibre8 pcalibre">stat</code>, which has no counterpart in the standard I/O library). Whenever possible, we recommend that you do likewise.</p></li>
<li id="P7000497027000000000000000046616" data-uri="chapter10.xhtml#P7000497027000000000000000046616" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046617" data-uri="chapter10.xhtml#P7000497027000000000000000046617" class="calibre13 pcalibre pcalibre1">G2: <span class="pcalibre leadin pcalibre1">Don't use <code id="P7000497027000000000000000046618" data-uri="chapter10.xhtml#P7000497027000000000000000046618" class="pcalibre1 calibre8 pcalibre">scanf</code> or <code id="P7000497027000000000000000046619" data-uri="chapter10.xhtml#P7000497027000000000000000046619" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> to read binary files.</span> Functions like <code id="P700049702700000000000000004661A" data-uri="chapter10.xhtml#P700049702700000000000000004661A" class="pcalibre1 calibre8 pcalibre">scanf</code> and <code id="P700049702700000000000000004661B" data-uri="chapter10.xhtml#P700049702700000000000000004661B" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> are designed specifically for reading text files. A common error that students make is to use these functions to read binary data, causing their programs to fail in strange and unpredictable ways. For example, binary files might be littered with many <code id="P700049702700000000000000004661C" data-uri="chapter10.xhtml#P700049702700000000000000004661C" class="pcalibre1 calibre8 pcalibre">0xa</code> bytes that have nothing to do with terminating text lines.</p></li>
<li id="P700049702700000000000000004661D" data-uri="chapter10.xhtml#P700049702700000000000000004661D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004661E" data-uri="chapter10.xhtml#P700049702700000000000000004661E" class="calibre13 pcalibre pcalibre1">G3: <span class="pcalibre leadin pcalibre1">Use the R<span class="smallcaps pcalibre pcalibre1">io </span>functions for I/O on network sockets.</span> Unfortunately, standard I/O poses some nasty problems when we attempt to use it for input and output on networks. As we will see in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007CC1"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">11.4</span></a>, the Linux abstraction for a network is a type of file called a <i class="calibre5 pcalibre pcalibre1">socket</i>. Like any Linux file, sockets are referenced by file descriptors, known in this case as <i class="calibre5 pcalibre pcalibre1">socket descriptors</i>. Application processes communicate with processes running on other computers by reading and writing socket descriptors.</p></li>
</ul>
<p id="P700049702700000000000000004661F" data-uri="chapter10.xhtml#P700049702700000000000000004661F" class="pcalibre1 pcalibre calibre2">Standard I/O streams are <i class="calibre5 pcalibre pcalibre1">full duplex</i> in the sense that programs can perform input and output on the same stream. However, there are poorly documented restrictions on streams that interact badly with restrictions on sockets:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046620" data-uri="chapter10.xhtml#P7000497027000000000000000046620">
<li id="P7000497027000000000000000046621" data-uri="chapter10.xhtml#P7000497027000000000000000046621" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046622" data-uri="chapter10.xhtml#P7000497027000000000000000046622" class="calibre13 pcalibre pcalibre1">Restriction 1: <span class="pcalibre leadin pcalibre1">Input functions following output functions.</span> An input function cannot follow an output function without an intervening call to <code id="P7000497027000000000000000046623" data-uri="chapter10.xhtml#P7000497027000000000000000046623" class="pcalibre1 calibre8 pcalibre">fflush, fseek, fsetpos</code>, or rewind. The <code id="P7000497027000000000000000046624" data-uri="chapter10.xhtml#P7000497027000000000000000046624" class="pcalibre1 calibre8 pcalibre">fflush</code> function empties the buffer associated with a stream. The latter three functions use the Unix I/O <code id="P7000497027000000000000000046625" data-uri="chapter10.xhtml#P7000497027000000000000000046625" class="pcalibre1 calibre8 pcalibre">lseek</code> function to reset the current file position.</p></li>
<li id="P7000497027000000000000000046626" data-uri="chapter10.xhtml#P7000497027000000000000000046626" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046627" data-uri="chapter10.xhtml#P7000497027000000000000000046627" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Restriction 2: Output functions following input functions.</span> An output function cannot follow an input function without an intervening call to <code id="P7000497027000000000000000046628" data-uri="chapter10.xhtml#P7000497027000000000000000046628" class="pcalibre1 calibre8 pcalibre">fseek, fsetpos</code>, or <code id="P7000497027000000000000000046629" data-uri="chapter10.xhtml#P7000497027000000000000000046629" class="pcalibre1 calibre8 pcalibre">rewind</code>, unless the input function encounters an end-of-file.</p></li>
</ul>
<p id="P700049702700000000000000004662A" data-uri="chapter10.xhtml#P700049702700000000000000004662A" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007B0C" title="913" data-uri="chapter10.xhtml#P7000497027000000000000000007B0C" epub:type="pagebreak"></span>These restrictions pose a problem for network applications because it is illegal to use the <code id="P700049702700000000000000004662B" data-uri="chapter10.xhtml#P700049702700000000000000004662B" class="pcalibre1 calibre8 pcalibre">lseek</code> function on a socket. The first restriction on stream I/O can be worked around by adopting a discipline of flushing the buffer before every input operation. However, the only way to work around the second restriction is to open two streams on the same open socket descriptor, one for reading and one for writing:</p>
<pre id="P700049702700000000000000004662C" data-uri="chapter10.xhtml#P700049702700000000000000004662C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004662D" data-uri="chapter10.xhtml#P700049702700000000000000004662D" class="calibre10 pcalibre pcalibre1">
FILE *fpin, *fpout;
fpin = fdopen(sockfd, "r");
 fpout = fdopen(sockfd, "w");
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004662E" data-uri="chapter10.xhtml#P700049702700000000000000004662E">But this approach has problems as well, because it requires the application to call <code id="P700049702700000000000000004662F" data-uri="chapter10.xhtml#P700049702700000000000000004662F" class="pcalibre1 calibre8 pcalibre">fclose</code> on both streams in order to free the memory resources associated with each stream and avoid a memory leak:</p>
<pre id="P7000497027000000000000000046630" data-uri="chapter10.xhtml#P7000497027000000000000000046630" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046631" data-uri="chapter10.xhtml#P7000497027000000000000000046631" class="calibre10 pcalibre pcalibre1">
fclose(fpin);
fclose(fpout);
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046632" data-uri="chapter10.xhtml#P7000497027000000000000000046632">Each of these operations attempts to close the same underlying socket descriptor, so the second <code id="P7000497027000000000000000046633" data-uri="chapter10.xhtml#P7000497027000000000000000046633" class="pcalibre1 calibre8 pcalibre">close</code> operation will fail. This is not a problem for sequential programs, but closing an already closed descriptor in a threaded program is a recipe for disaster (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008610"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">12.7.4</span></a>).</p>
<p id="P7000497027000000000000000046634" data-uri="chapter10.xhtml#P7000497027000000000000000046634" class="pcalibre1 pcalibre calibre2">Thus, we recommend that you not use the standard I/O functions for input and output on network sockets. Use the robust R<span class="smallcaps pcalibre pcalibre1">io </span>functions instead. If you need formatted output, use the <code id="P7000497027000000000000000046635" data-uri="chapter10.xhtml#P7000497027000000000000000046635" class="pcalibre1 calibre8 pcalibre">sprintf</code> function to format a string in memory, and then send it to the socket using <code id="P7000497027000000000000000046636" data-uri="chapter10.xhtml#P7000497027000000000000000046636" class="pcalibre1 calibre8 pcalibre">rio_writen</code>. If you need formatted input, use <code id="P7000497027000000000000000046637" data-uri="chapter10.xhtml#P7000497027000000000000000046637" class="pcalibre1 calibre8 pcalibre">rio_readlineb</code> to read an entire text line, and then use <code id="P7000497027000000000000000046638" data-uri="chapter10.xhtml#P7000497027000000000000000046638" class="pcalibre1 calibre8 pcalibre">sscanf</code> to extract different fields from the text line.</p>
</section></body></html>
