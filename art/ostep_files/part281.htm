<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>28.2 Pthread Locks</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part280.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part282.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">28.2 Pthread Locks</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The name that the POSIX library uses for a lock is a <b>mutex</b>, as it is used to provide <b>mutual exclusion </b>between threads, i.e., if one thread is in the critical section, it excludes the others from entering until it has completed the section. Thus, when you see the following POSIX threads code, you should understand that it is doing the same thing as above (we again use our wrappers that check for errors upon lock and unlock):</p><p class="s37" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">2</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3  <span class="s38">Pthread_mutex_lock(&amp;lock); // wrapper for pthread_mutex_lock()</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4  <span class="s38">balance = balance + 1;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">5  <span class="s38">Pthread_mutex_unlock(&amp;lock);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">You might also notice here that the POSIX version passes a variable to lock and unlock, as we may be using <i>different </i>locks to protect different variables. Doing so can increase concurrency: instead of one big lock that is used any time any critical section is accessed (a <b>coarse-grained </b>locking strategy), one will often protect different data and data structures with different locks, thus allowing more threads to be in locked code at once (a more <b>fine-grained </b>approach).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part280.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part282.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
