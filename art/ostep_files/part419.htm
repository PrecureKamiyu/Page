<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>39.3 Creating Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part418.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part420.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">39.3 Creating Files</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_570.png"/></span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">We’ll start with the most basic of operations: creating a file. This can be accomplished with the <span class="s41">open </span>system call; by calling <span class="s41">open() </span>and passing it the <span class="s41">O CREAT </span>flag, a program can create a new file. Here is some exam- ple code to create a file called “foo” in the current working directory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">int fd = open(&quot;foo&quot;, O_CREAT | O_WRONLY | O_TRUNC);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_571.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_572.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_573.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">The routine <span class="s41">open() </span>takes a number of different flags. In this exam- ple, the program creates the file (<span class="s41">O CREAT</span>), can only write to that file while opened in this manner (<span class="s41">O WRONLY</span>), and, if the file already exists, first truncate it to a size of zero bytes thus removing any existing content (<span class="s41">O TRUNC</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="408" height="171" alt="image" src="Image_574.png"/></span></p><p class="s27" style="padding-top: 6pt;padding-left: 78pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>T<span class="s45">HE </span><span class="s119">C R E A T</span><span class="s211">() </span>S<span class="s45">YSTEM </span>C<span class="s45">ALL</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The older way of creating a file is to call <span class="s41">creat()</span>, as follows:</p><p class="s38" style="padding-top: 6pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">int fd = creat(&quot;foo&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 8pt;text-indent: 12pt;line-height: 88%;text-align: justify;">You can think of <span class="s41">creat() </span>as <span class="s41">open() </span>with the following flags: <span class="s41">O CREAT | O WRONLY | O TRUNC</span>. Because <span class="s41">open() </span>can create a file, the usage of <span class="s41">creat() </span>has somewhat fallen out of favor (indeed, it could just be implemented as a library call to <span class="s41">open()</span>); however, it does hold a special place in U<span class="s7">NIX </span>lore. Specifically, when Ken Thompson was asked what he would do differently if he were redesigning U<span class="s7">NIX</span>, he replied: “I’d spell creat with an e.”</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">One important aspect of <span class="s41">open() </span>is what it returns: a <b>file descriptor</b>. A file descriptor is just an integer, private per process, and is used in U<span class="s7">NIX </span>systems to access files; thus, once a file is opened, you use the file de- scriptor to read or write the file, assuming you have permission to do so. In this way, a file descriptor is a <b>capability </b>[L84], i.e., an opaque handle that gives you the power to perform certain operations. Another way to think of a file descriptor is as a pointer to an object of type file; once you have such an object, you can call other “methods” to access the file, like <span class="s41">read() </span>and <span class="s41">write()</span>. We’ll see just how a file descriptor is used below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part418.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part420.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
