<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>8.4   Spatial Data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part173.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part175.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">8.4   <span style=" color: #00AEEF;">Spatial Data</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">Spatial data support in database systems is important for eﬃciently storing, indexing, and querying of data on the basis of spatial locations.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: left;">Two types of spatial data are particularly important:</p><p class="s63" style="padding-top: 9pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Geographic data <span class="p">such as road maps, land-usage maps, topographic elevation maps, political maps showing boundaries, land-ownership maps, and so on. </span>Geographic information systems <span class="p">are special-purpose database systems tailored for storing geo- graphic data. Geographic data is based on a round-earth coordinate system, with latitude, longitude, and elevation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2160.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">2<span class="s78">In this case the knowledge graph may already record that Stonebraker developed PostgreSQL, but there are many other pieces of information that may exist only in documents, and not in the knowledge graphs.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s63">Geometric data</span>, which include spatial information about how objects— such as buildings, cars, or aircraft — are constructed. Geometric data is based on a two- dimensional or three-dimensional Euclidean space, with <i>X </i>, <i>Y </i>, and <i>Z </i>coordinates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Geographic and geometric data types are supported by many database systems, such as Oracle Spatial and Graph, the <span class="s44">P</span>ost<span class="s44">GIS </span>extension of <span class="s44">P</span>ostgre<span class="s44">SQL</span>, <span class="s44">SQL S</span>erver, and the <span class="s44">IBM DB2 </span>Spatial Extender.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In this section we describe the modeling and querying of spatial data; implemen- tation techniques such as indexing and query processing techniques are covered in Chapter 14 and in Chapter 15.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The syntax for representing geographic and geometric data varies by database, al- though representations based on the <span class="s63">Open Geospatial Consortium </span>(<span class="s64">OGC</span>) standard are now increasingly supported. See the manuals of the database you use to learn more about the speciﬁc syntax supported by the database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">8.4.1 Representation of Geometric Information</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Figure 8.5 illustrates how various geometric constructs can be represented in a data- base, in a normalized fashion. We stress here that geometric information can be repre- sented in several diﬀerent ways, only some of which we describe.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A <i>line segment </i>can be represented by the coordinates of its endpoints. For example, in a map database, the two coordinates of a point would be its latitude and longitude. A <span class="s63">polyline </span>(also called a <span class="s63">linestring</span>) consists of a connected sequence of line segments and can be represented by a list containing the coordinates of the endpoints of the seg- ments, in sequence. We can approximately represent an arbitrary curve with polylines by partitioning the curve into a sequence of segments. This representation is useful for two-dimensional features such as roads; here, the width of the road is small enough relative to the size of the full map that it can be considered to be a line. Some systems also support <i>circular arcs </i>as primitives, allowing curves to be represented as sequences of arcs.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can represent a <i>polygon </i>by listing its vertices in order, as in Figure 8.5.<span class="s76">3</span> The list of vertices speciﬁes the boundary of a polygonal region. In an alternative represen- tation, a polygon can be divided into a set of triangles, as shown in Figure 8.5. This process is called <span class="s63">triangulation</span>, and any polygon can be triangulated. The complex poly- gon can be given an identiﬁer, and each of the triangles into which it is divided carries the identiﬁer of the polygon. Circles and ellipses can be represented by corresponding types or approximated by polygons.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">List-based representations of polylines or polygons are often convenient for query processing. Such non-ﬁrst-normal-form representations are used when supported by the underlying database. So that we can use ﬁxed-size tuples (in ﬁrst normal form) for representing polylines, we can give the polyline or curve an identiﬁer, and we can</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_2161.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">3<span class="s78">Some references use the term </span><span class="s111">closed polygon </span><span class="s80">to refer to what we call polygons and refer to polylines as open polygons.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="58" height="45" alt="image" src="Image_2162.png"/></span></p><p class="s185" style="padding-left: 249pt;text-indent: 0pt;text-align: left;">2</p><p class="s185" style="padding-top: 2pt;padding-left: 139pt;text-indent: 0pt;text-align: left;">line segment</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="text-indent: 0pt;text-align: right;">1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">{(x1,y1), (x2,y2)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="58" height="51" alt="image" src="Image_2163.png"/></span></p><p class="s185" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-top: 3pt;padding-left: 84pt;text-indent: 0pt;text-align: center;">triangle</p><p class="s185" style="padding-top: 3pt;padding-left: 212pt;text-indent: 0pt;text-align: center;">1      2</p><p class="s185" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">{(x1,y1), (x2,y2), (x3,y3)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">polygon</p><p class="s185" style="padding-top: 3pt;padding-left: 110pt;text-indent: 0pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"><span><img width="98" height="58" alt="image" src="Image_2164.png"/></span></p><p class="s256" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">1            <span class="s185">{(x1,y1), (x2,y2), (x3,y3), (x4,y4), (x5,y5)}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-top: 3pt;text-indent: 0pt;line-height: 9pt;text-align: center;">4</p><p class="s185" style="text-indent: 0pt;line-height: 9pt;text-align: center;">5</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s185" style="padding-top: 15pt;padding-left: 137pt;text-indent: 0pt;text-align: left;">polygon   1</p><p class="s185" style="padding-top: 17pt;text-indent: 0pt;text-align: right;">5</p><p class="s185" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">3  {(x1,y1), (x2,y2), (x3,y3), ID1}</p><p style="text-indent: 0pt;text-align: left;"><span><img width="98" height="58" alt="image" src="Image_2165.png"/></span></p><p class="s185" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">{(x1,y1), (x3,y3), (x4,y4), ID1}</p><p class="s185" style="padding-left: 119pt;text-indent: 0pt;line-height: 11pt;text-align: right;">{(x1,y1), (x4,y4), (x5,y5), ID1}</p><p class="s185" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s257" style="padding-top: 2pt;padding-left: 222pt;text-indent: 0pt;text-align: left;">object          representation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">Figure 8.5 <span class="s74">Representation of geometric constructs.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">represent each segment as a separate tuple that also carries with it the identiﬁer of the polyline or curve. Similarly, the triangulated representation of polygons allows a ﬁrst normal form relational representation of polygons.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The representation of points and line segments in three-dimensional space is sim- ilar to their representation in two-dimensional space, the only diﬀerence being that points have an extra <i>z </i>component. Similarly, the representation of planar ﬁgures— such as triangles, rectangles, and other polygons — does not change much when we move to three dimensions. Tetrahedrons and cuboids can be represented in the same way as triangles and rectangles. We can represent arbitrary polyhedra by dividing them into tetrahedrons, just as we triangulate polygons. We can also represent them by listing their faces, each of which is itself a polygon, along with an indication of which side of the face is inside the polyhedron.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">For example, <span class="s44">SQL S</span>erver and <span class="s44">P</span>ost<span class="s44">GIS </span>support the <b>geometry </b>and <b>geography </b>types, each of which has subtypes such as point, linestring, curve, polygon, as well as col- lections of these types called multipoint, multilinestring, multicurve and multipoly- gon. Textual representations of these types are deﬁned by the <span class="s44">OGC </span>standards, and can be converted to internal representations using conversion functions. For example, <span class="s49">LINESTRING(1 1, 2 3, 4 4) </span>deﬁnes a line that connects points (1, 1), (2, 3) and (4,</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2166.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2167.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2168.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2169.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">4), while <span class="s49">POLYGON((1 1, 2 3, 4 4, 1 1)) </span>deﬁnes a triangle deﬁned by these points. Functions <i>ST GeometryFromText</i>() and <i>ST GeographyFromText</i>() convert the textual representations to geometry and geography objects respectively. Operations on geom- etry and geography types that return objects of the same type include the <i>ST Union</i>() and <i>ST Intersection</i>() functions which compute the union and intersection of geomet- ric objects such as linestrings and polygons. The function names as well as syntax diﬀer by system; see the system manuals for details.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In the context of map data, the various line segments representing the roads are actually interconnected to form a graph. Such a <span class="s63">spatial network </span>or <span class="s63">spatial graph </span>has spa- tial locations for vertices of the graph, along with interconnection information between the vertices, which form the edges of the graph. The edges have a variety of associated information, such as distance, number of lanes, average speed at diﬀerent times of the day, and so on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">8.4.2 Design Databases</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Computer-aided-design (<span class="s44">CAD</span>) systems traditionally stored data in memory during edit- ing or other processing and wrote the data back to a ﬁle at the end of a session of editing. The drawbacks of such a scheme include the cost (programming complexity, as well as time cost) of transforming data from one form to another and the need to read in an entire ﬁle even if only parts of it are required. For large designs, such as the design of a large-scale integrated circuit or the design of an entire airplane, it may be impossible to hold the complete design in memory. Designers of object-oriented databases were motivated in large part by the database requirements of <span class="s44">CAD </span>systems. Object-oriented databases represent components of the design as objects, and the connections between the objects indicate how the design is structured.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The objects stored in a design database are generally geometric objects. Simple two-dimensional geometric objects include points, lines, triangles, rectangles, and, in general, polygons. Complex two-dimensional objects can be formed from simple ob- jects by means of union, intersection, and diﬀerence operations. Similarly, complex three-dimensional objects may be formed from simpler objects such as spheres, cylin- ders, and cuboids by union, intersection, and diﬀerence operations, as in Figure 8.6. Three-dimensional surfaces may also be represented by <span class="s63">wireframe models</span>, which essen- tially model the surface as a set of simpler objects, such as line segments, triangles, and rectangles.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Design databases also store nonspatial information about objects, such as the ma- terial from which the objects are constructed. We can usually model such information</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s258" style="padding-left: 141pt;text-indent: 0pt;text-align: left;"><span><img width="162" height="157" alt="image" src="Image_2170.png"/></span>	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="226" height="153" alt="image" src="Image_2171.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="25" alt="image" src="Image_2172.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="25" alt="image" src="Image_2173.png"/></span></p><p class="s185" style="padding-top: 3pt;padding-left: 148pt;text-indent: 0pt;text-align: left;">(a) Diﬀerence of cylinders          (b) Union of cylinders</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 200pt;text-indent: 0pt;text-align: left;">Figure 8.6 <span class="s74">Complex three-dimensional objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">by standard data-modeling techniques. We concern ourselves here with only the spatial aspects.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Various spatial operations must be performed on a design. For instance, the de- signer may want to retrieve that part of the design that corresponds to a particular region of interest. Spatial-index structures, discussed in Section 14.10.1, are useful for such tasks. Spatial-index structures are multidimensional, dealing with two- and three- dimensional data, rather than dealing with just the simple one-dimensional ordering provided by the B<span class="s181">+</span>-trees.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Spatial-integrity constraints, such as “two pipes should not be in the same loca- tion,” are important in design databases to prevent interference errors. Such errors often occur if the design is performed manually and are detected only when a proto- type is being constructed. As a result, these errors can be expensive to ﬁx. Database support for spatial-integrity constraints helps people to avoid design errors, thereby keeping the design consistent. Implementing such integrity checks again depends on the availability of eﬃcient multidimensional index structures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">8.4.3 Geographic Data</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Geographic data are spatial in nature but diﬀer from design data in certain ways. Maps and satellite images are typical examples of geographic data. Maps may provide not only location information — about boundaries, rivers, and roads, for example — but also much more detailed information associated with locations, such as elevation, soil type, land usage, and annual rainfall.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">8.4.3.1 Applications of Geographic Data</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Geographic databases have a variety of uses, including online map and navigation ser- vices, which are ubiquitous today. Other applications include distribution-network in- formation for public-service utilities such as telephone, electric-power, and water-supply</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">systems, and land-usage information for ecologists and planners, land records to track land ownership, and many more.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Geographic databases for public-utility information have become very important as the network of buried cables and pipes has grown. Without detailed maps, work carried out by one utility may damage the structure of another utility, resulting in large-scale disruption of service. Geographic databases, coupled with accurate location-ﬁnding systems using <span class="s44">GPS </span>help avoid such problems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">8.4.3.2 Representation of Geographic Data</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Geographic data can be categorized into two types:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Raster data</span><span class="p">. Such data consist of bitmaps or pixel maps, in two or more dimen- sions. A typical example of a two-dimensional raster image is a satellite image of an area. In addition to the actual image, the data include the location of the image, speciﬁed, for example, by the latitude and longitude of its corners, and the reso- lution, speciﬁed either by the total number of pixels, or, more commonly in the context of geographic data, by the area covered by each pixel.</span></p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">Raster data are often represented as <span class="s63">tiles</span>, each covering a ﬁxed-size area. A larger area can be displayed by displaying all the tiles that overlap with the area. To allow the display of data at diﬀerent zoom levels, a separate set of tiles is created for each zoom level. Once the zoom level is set by the user interface (e.g., a web browser), tiles at the speciﬁed zoom level that overlap the area being displayed are retrieved and displayed.</p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">Raster data can be three-dimensional— for example, the temperature at diﬀer- ent altitudes at diﬀerent regions, again measured with the help of a satellite. Time could form another dimension— for example, the surface temperature measure- ments at diﬀerent points in time.</p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Vector data</span><span class="p">. Vector data are constructed from basic geometric objects, such as points, line segments, polylines, triangles, and other polygons in two dimensions, and cylinders, spheres, cuboids, and other polyhedrons in three dimensions. In the context of geographic data, points are usually represented by latitude and lon- gitude, and where the height is relevant, additionally by elevation.</span></p><p style="padding-left: 107pt;text-indent: 13pt;text-align: justify;">Map data are often represented in vector format. Roads are often represented as polylines. Geographic features, such as large lakes, or even political features such as states and countries, are represented as complex polygons. Some features, such as rivers, may be represented either as complex curves or as complex polygons, depending on whether their width is relevant.</p><p style="padding-top: 2pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Geographic information related to regions, such as annual rainfall, can be repre- sented as an array— that is, in raster form. For space eﬃciency, the array can be stored in a compressed form. In Section 24.4.1, we study an alternative representation of such arrays by a data structure called a <i>quadtree</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">As another alternative, we can represent region information in vector form, using polygons, where each polygon is a region within which the array value is the same. The vector representation is more compact than the raster representation in some applica- tions. It is also more accurate for some tasks, such as depicting roads, where dividing the region into pixels (which may be fairly large) leads to a loss of precision in location information. However, the vector representation is unsuitable for applications where the data are intrinsically raster based, such as satellite images.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s63">Topographical information</span>, that is information about the elevation (height) of each point on a surface, can be represented in raster form. Alternatively, it can be represented in vector form by dividing the surface into polygons covering regions of (approximately) equal elevation, with a single elevation value associated with each polygon. As another alternative, the surface can be <span class="s63">triangulated </span>(i.e., divided into triangles), with each tri- angle represented by the latitude, longitude, and elevation of each of its corners. The latter representation, called the <span class="s63">triangulated irregular network </span>(<span class="s64">TIN</span>) representation, is a compact representation which is particularly useful for generating three-dimensional views of an area.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Geographic information systems usually contain both raster and vector data, and they can merge the two kinds of data when displaying results to users. For example, map applications usually contain both satellite images and vector data about roads, buildings, and other landmarks. A map display usually <span class="s63">overlays </span>diﬀerent kinds of infor- mation; for example, road information can be overlaid on a background satellite image to create a hybrid display. In fact, a map typically consists of multiple layers, which are displayed in bottom-to-top order; data from higher layers appear on top of data from lower layers.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is also interesting to note that even information that is actually stored in vector form may be converted to raster form before it is sent to a user interface such as a web browser. One reason is that even web browsers in which JavaScript has been disabled can then display map data; a second reason may be to prevent end users from extracting and using the vector data.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Map services such as Google Maps and Bing Maps provide <span class="s44">API</span>s that allow users to create specialized map displays, containing application-speciﬁc data overlaid on top of standard map data. For example, a web site may show a map of an area with information about restaurants overlaid on the map. The overlays can be constructed dynamically, displaying only restaurants with a speciﬁc cuisine, for example, or allowing users to change the zoom level or pan the display.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">8.4.4 Spatial Queries</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">There are a number of types of queries that involve spatial locations.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2174.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2175.png"/></span></p><p style="padding-top: 2pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s63">Region queries </span>deal with spatial regions. Such a query can ask for objects that lie partially or fully inside a speciﬁed region. A query to ﬁnd all retail shops within the geographic boundaries of a given town is an example. <span class="s44">P</span>ost<span class="s44">GIS </span>supports predicates between two geometry or geography objects such as <i>ST Contains</i>(), <i>ST Overlaps</i>(),</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2176.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2177.png"/></span></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: justify;"><a name="bookmark181"><i>ST Disjoint</i></a>() and <i>ST Touches</i>(). These can be used to ﬁnd objects that are con- tained in, or intersect, or are disjoint from a region. <span class="s44">SQL S</span>erver supports equivalent functions with slightly diﬀerent names.<a name="bookmark202">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2178.png"/></span></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: justify;">Suppose we have a <i>shop </i>relation, with an attribute <i>location </i>of type <i>point</i>, and a geography object of type <i>polygon</i>. Then the <i>ST Contains</i>() function can be used to retrieve all shops whose location is contained in the given polygon.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2179.png"/></span></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s63">Nearness queries </span>request objects that lie near a speciﬁed location. A query to ﬁnd all restaurants that lie within a given distance of a given point is an example of a nearness query. The <span class="s63">nearest-neighbor query </span>requests the object that is nearest to a speciﬁed point. For example, we may want to ﬁnd the nearest gasoline station. Note that this query does not have to specify a limit on the distance, and hence we can ask it even if we have no idea how far the nearest gasoline station lies. The <span class="s44">P</span>ost<span class="s44">GIS </span><i>ST Distance</i>() function gives the minimum distance between two such objects, and can be used to ﬁnd objects that are within a speciﬁed distance from a point or region. Nearest neighbors can be found by ﬁnding objects with minimum distance.</p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Spatial graph queries </span><span class="p">request information based on spatial graphs such as road maps. For example, a query may ask for the shortest path between two locations via the road network, or via a train network, each of which can be represented as a spatial graph. Such queries are ubiquitous for navigation systems.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2180.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2181.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Queries that compute intersections of regions can be thought of as computing the <span class="s63">spatial join </span>of two spatial relations— for example, one representing rainfall and the other representing population density— with the location playing the role of join attribute. In general, given two relations, each containing spatial objects, the spatial join of the two relations generates either pairs of objects that intersect or the intersection regions of such pairs. Spatial predicates such as <i>ST Contains</i>() or <i>ST Overlaps</i>() can be used as join predicates when performing spatial joins.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In general, queries on spatial data may have a combination of spatial and nonspa- tial requirements. For instance, we may want to ﬁnd the nearest restaurant that has vegetarian selections and that charges less than $10 for a meal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part173.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part175.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
