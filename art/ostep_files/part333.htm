<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part332.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part334.htm">下一个 &gt;</a></p><h4 style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">References</h4><p class="s12" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">[B04] “Implementing Condition Variables with Semaphores” Andrew Birrell</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">December 2004</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">An interesting read on how difficult implementing CVs on top of semaphores really is, and the mistakes the author and co-workers made along the way. Particularly relevant because the group had done a ton of concurrent programming; Birrell, for example, is known for (among other things) writing various thread-programming guides.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[CB08] “Real-world Concurrency” Bryan Cantrill and Jeff Bonwick</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">ACM Queue. Volume 6, No. 5. September 2008</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A nice article by some kernel hackers from a company formerly known as Sun on the real problems faced in concurrent code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[CHP71] “Concurrent Control with Readers and Writers”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">P.J. Courtois, F. Heymans, D.L. Parnas Communications of the ACM, 14:10, October 1971</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The introduction of the reader-writer problem, and a simple solution. Later work introduced more complex solutions, skipped here because, well, they are pretty complex.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[D59] “A Note on Two Problems in Connexion with Graphs”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E. W. Dijkstra</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Numerische Mathematik 1, 269271, 1959</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www-m3.ma.tum.de/twiki/pub/MN0506/WebHome/dijkstra.pdf" class="a" target="_blank">Available: </a><a href="http://www-m3.ma.tum.de/twiki/pub/MN0506/WebHome/dijkstra.pdf" target="_blank">http://www-m3.ma.tum.de/twiki/pub/MN0506/WebHome/dijkstra.pdf</a></p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">Can you believe people worked on algorithms in 1959? We can’t. Even before computers were any fun to use, these people had a sense that they would transform the world...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[D68a] “Go-to Statement Considered Harmful”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E.W. Dijkstra</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 93%;text-align: left;"><a href="http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF" class="a" target="_blank">Communications of the ACM, volume 11(3): pages 147148, March 1968 Available: </a>http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF <i>Sometimes thought as the beginning of the field of software engineering.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[D68b] “The Structure of the THE Multiprogramming System”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E.W. Dijkstra</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Communications of the ACM, volume 11(5), pages 341346, 1968</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">One of the earliest papers to point out that systems work in computer science is an engaging intellectual endeavor. Also argues strongly for modularity in the form of layered systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[D72] “Information Streams Sharing a Finite Buffer”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E.W. Dijkstra</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Information Processing Letters 1: 179180, 1972</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF" class="a" target="_blank">Available: </a><a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF" target="_blank">http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF</a></p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Did Dijkstra invent everything? No, but maybe close. He certainly was the first to clearly write down what the problems were in concurrent code. However, it is true that practitioners in operating system design knew of many of the problems described by Dijkstra, so perhaps giving him too much credit would be a misrepresentation of history.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[D08] “The Little Book of Semaphores”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">A.B. Downey</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://greenteapress.com/semaphores/" class="a" target="_blank">Available: </a><a href="http://greenteapress.com/semaphores/" target="_blank">http://greenteapress.com/semaphores/</a></p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">A nice (and free!) book about semaphores. Lots of fun problems to solve, if you like that sort of thing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[DHO71] “Hierarchical ordering of sequential processes”</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">E.W. Dijkstra</p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD310.PDF" class="a" target="_blank">Available: </a><a href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD310.PDF" target="_blank">http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD310.PDF</a></p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: left;">Presents numerous concurrency problems, including the Dining Philosophers. The wikipedia page about this problem is also quite informative.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 91%;text-align: justify;">[GR92] “Transaction Processing: Concepts and Techniques” Jim Gray and Andreas Reuter</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">Morgan Kaufmann, September 1992</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The exact quote that we find particularly humorous is found on page 485, at the top of Section 8.8: “The first multiprocessors, circa 1960, had test and set instructions ... presumably the OS imple- mentors worked out the appropriate algorithms, although Dijkstra is generally credited with inventing semaphores many years later.”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 91%;text-align: left;">[H87] “Aspects of Cache Memory and Instruction Buffer Performance” Mark D. Hill</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Ph.D. Dissertation, U.C. Berkeley, 1987</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: left;">Hill’s dissertation work, for those obsessed with caching in early systems. A great example of a quanti- tative dissertation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="57" alt="image" src="Image_484.png"/></span></p><p class="s50" style="padding-top: 8pt;text-indent: 0pt;text-align: right;">32</p><p style="text-indent: 0pt;text-align: left;"/><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part332.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part334.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
