<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Parallel and Distributed Transaction Processing</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part416.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part418.htm">下一个 &gt;</a></p><p class="s62" style="padding-top: 13pt;padding-left: 71pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark484">Parallel and Distributed Transaction Processing</a><a name="bookmark529">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">We studied transaction processing in centralized databases earlier, covering concur- rency control in Chapter 18 and recovery in Chapter 19. In this chapter, we study how to carry out transaction processing in parallel and distributed databases. In addition to supporting concurrency control and recovery, transaction processing in parallel and distributed databases must also deal with issues due to replication of data, and of fail- ures of some nodes.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Both parallel and distributed databases have multiple nodes, which can fail in- dependently. The main diﬀerence between parallel and distributed databases from the view point of transaction processing is that the latency of remote access is much higher, and bandwidth lower, in a distributed database than in a parallel database where all nodes are in a single data center. Failures such as network partitioning and message delays are much less likely within a data center than across geographically distributed sites, but nevertheless they can occur; transaction processing must be done correctly even if they do occur.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Thus, most techniques for transaction processing are common to both parallel and distributed databases. In the few cases where there is a diﬀerence, we explicitly point out the diﬀerence. And as a result, in this chapter, whenever we say that a technique is applicable to distributed databases, it should be interpreted to mean that it is appli- cable to distributed databases as well as to parallel databases, unless we explicitly say otherwise.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In Section 23.1, we outline a model for transaction processing in a distributed database. In Section 23.2, we describe how to implement atomic transactions in a dis- tributed database by using special commit protocols.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In Section 23.3 we describe how to extend traditional concurrency control tech- niques to distributed databases. Section 23.4 describes concurrency control techniques for the case where data items are replicated, while Section 23.5 describes further ex- tensions including how multiversion concurrency control techniques can be extended to deal with distributed databases, and concurrency control can be implemented with</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">1097</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark485">heterogeneous distributed databases. Replication with weak degrees of consistency is discussed in Section 23.6.</a><a name="bookmark530">&zwnj;</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most techniques for dealing with distributed data require the use of coordinators to ensure consistent and eﬃcient transaction processing. In Section 23.7 we discuss how coordinators can be chosen in a distributed fashion, robust to failures. Finally, Section</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">23.8 describes the distributed consensus problem, outlines solutions for the problem, and then discusses how these solutions can be used to implement fault-tolerant services by means of replication of a log.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part418.htm">23.1  Distributed Transactions</a><a class="toc0" href="part419.htm">23.2  Commit Protocols</a><a class="toc0" href="part420.htm">23.3  Concurrency Control in Distributed Databases</a><a class="toc0" href="part421.htm">23.4  Replication</a><a class="toc0" href="part422.htm">23.5  Extended Concurrency Control Protocols</a><a class="toc0" href="part423.htm">23.6  Replication with Weak Degrees of Consistency</a><a class="toc0" href="part424.htm">23.7  Coordinator Selection</a><a class="toc0" href="part425.htm">23.8  Consensus in Distributed Systems</a><a class="toc0" href="part426.htm">23.9  Summary</a><a class="toc0" href="part427.htm">Review Terms</a><a class="toc0" href="part428.htm">Practice Exercises</a><a class="toc0" href="part429.htm">Exercises</a><a class="toc0" href="part430.htm">Further Reading</a><a class="toc0" href="part431.htm">Bibliography</a><a class="toc0" href="part432.htm">Credits</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part416.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part418.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
