<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>8.4 Attempt #3: Better Accounting</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part87.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part89.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">8.4 Attempt #3: Better Accounting</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We now have one more problem to solve: how to prevent gaming of our scheduler? The real culprit here, as you might have guessed, are Rules 4a and 4b, which let a job retain its priority by relinquishing the CPU before the time slice expires. So what should we do?</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The solution here is to perform better <b>accounting </b>of CPU time at each level of the MLFQ. Instead of forgetting how much of a time slice a pro- cess used at a given level, the scheduler should keep track; once a process has used its allotment, it is demoted to the next priority queue. Whether</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="99" alt="image" src="Image_099.png"/></span></p><p class="s48" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">Q2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:19pt"><td style="width:56pt;border-top-style:dashed;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:22pt;border-top-style:dashed;border-top-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:22pt;border-top-style:dashed;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:22pt;border-top-style:dashed;border-top-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:78pt;border-bottom-style:dashed;border-bottom-width:1pt" colspan="2"><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="29" height="24" alt="image" src="Image_100.png"/></span></p></td><td style="width:22pt" bgcolor="#000000"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:11pt;border-bottom-style:dashed;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:11pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s48" style="padding-left: 54pt;text-indent: 0pt;text-align: center;">Q1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="30" height="25" alt="image" src="Image_101.png"/></span></p><p class="s48" style="padding-left: 54pt;text-indent: 0pt;text-align: center;">Q0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s65" style="padding-top: 4pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">0    50   100   150   200</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 128pt;text-indent: 0pt;text-align: left;">Figure 8.7: <b>Lower Priority, Longer Quanta</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">it uses the time slice in one long burst or many small ones does not matter. We thus rewrite Rules 4a and 4b to the following single rule:</p><p class="s4" style="padding-top: 4pt;padding-left: 91pt;text-indent: -9pt;line-height: 89%;text-align: justify;">• <span class="s27">Rule 4: </span><span class="p">Once a job uses up its time allotment at a given level (re- gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</span></p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Let’s look at an example. Figure <span style=" color: #00AEEF;">8.6 </span>shows what happens when a workload tries to game the scheduler with the old Rules 4a and 4b (on the left) as well the new anti-gaming Rule 4. Without any protection from gaming, a process can issue an I/O just before a time slice ends and thus dominate CPU time. With such protections in place, regardless of the I/O behavior of the process, it slowly moves down the queues, and thus cannot gain an unfair share of the CPU.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part87.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part89.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
