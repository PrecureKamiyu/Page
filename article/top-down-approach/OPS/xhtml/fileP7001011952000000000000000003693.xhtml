<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>Homework Problems and Questions</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000003693" class="conclusion level1"><header><h1 class="title" id="P700101195200000000000000000BCEC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCEC" epub:type="title">Homework Problems and Questions</h1></header>
<section id="P7001011952000000000000000003695" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003695" epub:type="practice" class="practice level2"><header><h1 class="title" id="P700101195200000000000000000BCED" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCED" epub:type="title"><span class="label">Chapter </span><span class="number">9</span> Review Questions</h1></header>
<section id="P7001011952000000000000000003697" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003697" class="practicediv level3"><header><h1 class="title" id="P700101195200000000000000000BCEE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCEE" epub:type="title"><span class="label">SECTION </span><span class="number">9.1</span></h1></header>
<ol class="practicelist dynamiclist" id="P700101195200000000000000000BCEF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCEF">
<li class="general-problem" id="P700101195200000000000000000369A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000369A"><div class="question" id="P700101195200000000000000000BCF0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF0"><p id="P700101195200000000000000000BCF1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF1"><span class="lc_labelnum"><span class="label">R</span><span class="number">1.</span></span> Reconstruct <a class="xref" href="fileP70010119520000000000000000033DE.xhtml#P70010119520000000000000000033E6" data-foobar="7"><span class="lc_labelnum"><span class="label">Table</span> <span class="number">9.1</span></span> </a> for when Victor Video is watching a 4 Mbps video, Facebook Frank is looking at a new 100 Kbyte image every 20 seconds, and Martha Music is listening to 200 kbps audio stream.</p></div></li>
<li class="general-problem" id="P700101195200000000000000000369D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000369D"><div class="question" id="P700101195200000000000000000BCF2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF2"><p id="P700101195200000000000000000BCF3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF3"><span class="pagebreak" title="728" id="P70010119520000000000000000036A0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036A0" epub:type="pagebreak" role="doc-pagebreak"></span><span class="lc_labelnum"><span class="label">R</span><span class="number">2.</span></span> There are two types of redundancy in video. Describe them, and discuss how they can be exploited for efficient compression.</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036A1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036A1"><div class="question" id="P700101195200000000000000000BCF4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF4"><p id="P700101195200000000000000000BCF5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF5"><span class="lc_labelnum"><span class="label">R</span><span class="number">3.</span></span> Suppose an analog audio signal is sampled 16,000 times per second, and each sample is quantized into one of 1024 levels. What would be the resulting bit rate of the PCM digital audio signal?</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036A4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036A4"><div class="question" id="P700101195200000000000000000BCF6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF6"><p id="P700101195200000000000000000BCF7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF7"><span class="lc_labelnum"><span class="label">R</span><span class="number">4.</span></span> Multimedia applications can be classified into three categories. Name and describe each category.</p></div></li>
</ol>
</section>
<section id="P70010119520000000000000000036A7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036A7" class="practicediv level3"><header><h1 class="title" id="P700101195200000000000000000BCF8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF8" epub:type="title"><span class="label">SECTION </span><span class="number">9.2</span></h1></header>
<ol class="practicelist dynamiclist" id="P700101195200000000000000000BCF9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCF9">
<li class="general-problem" id="P70010119520000000000000000036AA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036AA"><div class="question" id="P700101195200000000000000000BCFA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFA"><p id="P700101195200000000000000000BCFB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFB"><span class="lc_labelnum"><span class="label">R</span><span class="number">5.</span></span> Streaming video systems can be classified into three categories. Name and briefly describe each of these categories.</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036AD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036AD"><div class="question" id="P700101195200000000000000000BCFC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFC"><p id="P700101195200000000000000000BCFD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFD"><span class="lc_labelnum"><span class="label">R</span><span class="number">6.</span></span> List three disadvantages of UDP streaming.</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036B0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036B0"><div class="question" id="P700101195200000000000000000BCFE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFE"><p id="P700101195200000000000000000BCFF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BCFF"><span class="lc_labelnum"><span class="label">R</span><span class="number">7.</span></span> With HTTP streaming, are the TCP receive buffer and the client’s application buffer the same thing? If not, how do they interact?</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036B3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036B3"><div class="question" id="P700101195200000000000000000BD00" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD00"><p id="P700101195200000000000000000BD01" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD01"><span class="lc_labelnum"><span class="label">R</span><span class="number">8.</span></span> Consider the simple model for HTTP streaming. Suppose the server sends bits at a constant rate of 2 Mbps and playback begins when 8 million bits have been received. What is the initial buffering delay <i>t<sub>p</sub></i>?</p></div></li>
</ol>
</section>
<section id="P70010119520000000000000000036B6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036B6" class="practicediv level3"><header><h1 class="title" id="P700101195200000000000000000BD02" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD02" epub:type="title"><span class="label">SECTION </span><span class="number">9.3</span></h1></header>
<ol class="practicelist dynamiclist" id="P700101195200000000000000000BD03" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD03">
<li class="general-problem" id="P70010119520000000000000000036B9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036B9"><div class="question" id="P700101195200000000000000000BD04" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD04"><p id="P700101195200000000000000000BD05" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD05"><span class="lc_labelnum"><span class="label">R</span><span class="number">9.</span></span> What is the difference between end-to-end delay and packet jitter? What are the causes of packet jitter?</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036BC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036BC"><div class="question" id="P700101195200000000000000000BD06" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD06"><p id="P700101195200000000000000000BD07" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD07"><span class="lc_labelnum"><span class="label">R</span><span class="number">10.</span></span> Why is a packet that is received after its scheduled playout time considered lost?</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036BF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036BF"><div class="question" id="P700101195200000000000000000BD08" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD08"><p id="P700101195200000000000000000BD09" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD09"><span class="lc_labelnum"><span class="label">R</span><span class="number">11.</span></span> <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a> describes two FEC schemes. Briefly summarize them. Both schemes increase the transmission rate of the stream by adding overhead. Does interleaving also increase the transmission rate?</p></div></li>
</ol>
</section>
<section id="P70010119520000000000000000036C2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036C2" class="practicediv level3"><header><h1 class="title" id="P700101195200000000000000000BD0A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0A" epub:type="title"><span class="label">SECTION </span><span class="number">9.4</span></h1></header>
<ol class="practicelist dynamiclist" id="P700101195200000000000000000BD0B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0B">
<li class="general-problem" id="P70010119520000000000000000036C5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036C5"><div class="question" id="P700101195200000000000000000BD0C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0C"><p id="P700101195200000000000000000BD0D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0D"><span class="lc_labelnum"><span class="label">R</span><span class="number">12.</span></span> How are different RTP streams in different sessions identified by a receiver? How are different streams from within the same session identified?</p></div></li>
<li class="general-problem" id="P70010119520000000000000000036C8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036C8"><div class="question" id="P700101195200000000000000000BD0E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0E"><p id="P700101195200000000000000000BD0F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD0F"><span class="lc_labelnum"><span class="label">R</span><span class="number">13.</span></span> What is the role of a SIP registrar? How is the role of an SIP registrar different from that of a home agent in Mobile IP?</p></div></li>
</ol>
</section>
</section>
<section id="P70010119520000000000000000036CB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036CB" epub:type="practice" class="practice level2"><header><h1 class="title" id="P700101195200000000000000000BD10" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD10" epub:type="title"><span class="label">Problems </span></h1></header>
<ol class="practicelist dynamiclist" id="P700101195200000000000000000BD11" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD11">
<li class="general-problem" id="P70010119520000000000000000036CE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036CE"><div class="question" id="P700101195200000000000000000BD12" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD12"><p id="P700101195200000000000000000BD13" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD13"><span class="lc_labelnum"><span class="label">P</span><span class="number">1.</span></span> Consider the figure below. Similar to our discussion of <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003439" data-foobar="7"><span class="lc_labelnum"><span class="label">Figure</span> <span class="number">9.1</span></span> </a>, suppose that video is encoded at a fixed bit rate, and thus each video block contains video frames that are to be played out over the same fixed amount of time, Δ. The server transmits the first video block at <i>t</i><sub>0</sub>, the second block at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="61" altimg-height="18" altimg="../images/ch09math64.png"><m:mrow><m:msub><m:mi>t</m:mi><m:mn>0</m:mn></m:msub><m:mo>+</m:mo><m:mi>Δ</m:mi><m:mo>,</m:mo></m:mrow></m:math></span> <span class="pagebreak" title="729" id="P70010119520000000000000000036D1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036D1" epub:type="pagebreak" role="doc-pagebreak"></span>the third block at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="70" altimg-height="18" altimg="../images/ch09math65.png"><m:mrow><m:msub><m:mi>t</m:mi><m:mn>0</m:mn></m:msub><m:mo>+</m:mo><m:mn>2</m:mn><m:mi>Δ</m:mi><m:mo>,</m:mo></m:mrow></m:math></span> and so on. Once the client begins playout, each block should be played out Δ time units after the previous block.</p>
<figure id="P70010119520000000000000000036D2" class="informalfigure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036D2">
<img alt="P1.d Video Block Number Graph." height="275" width="450" aria-describedby="P70010119520000000000000000036D4" id="P700101195200000000000000000BD14" data-uri="P7001011952000000000000000005645" src="../images/4055109020.png"></img>
<details class="longdesc" id="P70010119520000000000000000036D4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036D4">
<summary><span class="label">Description</span></summary>
<p id="P700101195200000000000000000BD15" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD15">In this graph, the x-axis is labeled "Time" and the y-axis is labeled "Video block number." The y-axis omits 0 but moves upwards in increments of one to 9. In the left half of the x-axis we see a blue line rising upwards to the right in a stair-step fashion. This line is labeled "Constant bit rate video transmission by server." It begins at a point labeled "t0." The line rises to 1 on the y-axis then extends horizontally to the right for one unit defined as Delta. It then goes up to 2 and over one Delta, etc. until it reaches 7 on the y-axis.</p>
<p id="P700101195200000000000000000BD16" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD16">In the right half of the x-axis we see a dark blue line, labeled "Video reception at client," rise from a point labeled t1 and extend upward to the right in an inconsistent fashion. The x-axis is delineated from this point into units of Delta. This line rises to 1 on the y-axis and then extends horizontally for one and a half Deltas. It rises to 2 and extends into the next Delta. Then it rises to 3 and extends within the same Delta, then rises to 4 and extends just barely into the next Delta. From here it rises to 5 and extends through the Delta and halfway into the next Delta. From here it rises to 6 and extends three Deltas, then rises to seven.</p>
</details>
</figure>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD17" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD17">
<li id="P700101195200000000000000000BD18" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD18"><p id="P700101195200000000000000000BD19" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD19">Suppose that the client begins playout as soon as the first block arrives at <i>t</i><sub>1</sub>. In the figure below, how many blocks of video (including the first block) will have arrived at the client in time for their playout? Explain how you arrived at your answer.</p></li>
<li id="P700101195200000000000000000BD1A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1A"><p id="P700101195200000000000000000BD1B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1B">Suppose that the client begins playout now at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="57" altimg-height="18" altimg="../images/ch09math66.png"><m:mrow><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub><m:mo>+</m:mo><m:mi>Δ</m:mi></m:mrow></m:math></span>. How many blocks of video (including the first block) will have arrived at the client in time for their playout? Explain how you arrived at your answer.</p></li>
<li id="P700101195200000000000000000BD1C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1C"><p id="P700101195200000000000000000BD1D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1D">In the same scenario at (b) above, what is the largest number of blocks that is ever stored in the client buffer, awaiting playout? Explain how you arrived at your answer.</p></li>
<li id="P700101195200000000000000000BD1E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1E"><p id="P700101195200000000000000000BD1F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD1F">What is the smallest playout delay at the client, such that every video block has arrived in time for its playout? Explain how you arrived at your answer.</p></li>
</ol></div></li>
<li class="general-problem" id="P70010119520000000000000000036E0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036E0"><div class="question" id="P700101195200000000000000000BD20" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD20"><p id="P700101195200000000000000000BD21" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD21"><span class="lc_labelnum"><span class="label">P</span><span class="number">2.</span></span> Recall the simple model for HTTP streaming shown in <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003464" data-foobar="7"><span class="lc_labelnum"><span class="label">Figure</span> <span class="number">9.3</span></span> </a>. Recall that <i>B</i> denotes the size of the client’s application buffer, and <i>Q</i> denotes the number of bits that must be buffered before the client application begins playout. Also <i>r</i> denotes the video consumption rate. Assume that the server sends bits at a constant rate <i>x</i> whenever the client buffer is not full.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD22" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD22">
<li id="P700101195200000000000000000BD23" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD23"><p id="P700101195200000000000000000BD24" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD24">Suppose that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="12" altimg="../images/ch09math67.png"><m:mrow><m:mi>x</m:mi><m:mo>&lt;</m:mo><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> As discussed in the text, in this case playout will alternate between periods of continuous playout and periods of freezing. Determine the length of each continuous playout and freezing period as a function of <i>Q</i>, <i>r</i>, and <i>x</i>.</p></li>
<li id="P700101195200000000000000000BD25" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD25"><p id="P700101195200000000000000000BD26" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD26">Now suppose that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="12" altimg="../images/ch09math68.png"><m:mrow><m:mi>x</m:mi><m:mo>&gt;</m:mo><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> At what time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="18" altimg="../images/ch09math69.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:msub><m:mi>t</m:mi><m:mi>f</m:mi></m:msub></m:mrow></m:math></span> does the client application buffer become full?</p></li>
</ol></div></li>
<li class="general-problem" id="P70010119520000000000000000036E8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036E8"><div class="question" id="P700101195200000000000000000BD27" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD27"><p id="P700101195200000000000000000BD28" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD28"><span class="pagebreak" title="730" id="P70010119520000000000000000036EB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036EB" epub:type="pagebreak" role="doc-pagebreak"></span><span class="lc_labelnum"><span class="label">P</span><span class="number">3.</span></span> Recall the simple model for HTTP streaming shown in <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003464" data-foobar="7"><span class="lc_labelnum"><span class="label">Figure</span> <span class="number">9.3</span></span> </a>. Suppose the buffer size is infinite but the server sends bits at variable rate <i>x</i>(<i>t</i>). Specifically, suppose <i>x</i>(<i>t</i>) has the following saw-tooth shape. The rate is initially zero at time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="45" altimg-height="13" altimg="../images/ch09math70.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math></span> and linearly climbs to <i>H</i> at time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="13" altimg="../images/ch09math71.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mi>T</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> It then repeats this pattern again and again, as shown in the figure below.</p>
<figure id="P70010119520000000000000000036EC" class="informalfigure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036EC">
<img alt="P3.f Bit rate graph." height="269" width="454" aria-describedby="P70010119520000000000000000036EE" id="P700101195200000000000000000BD29" data-uri="P7001011952000000000000000005646" src="../images/4055109021.png"></img>
<details class="longdesc" id="P70010119520000000000000000036EE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036EE">
<summary><span class="label">Description</span></summary>
<p id="P700101195200000000000000000BD2A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2A">In this graph, the x-axis is labeled "Time" and the y-axis is labeled "Bit rate x(t)." The x-axis is divided at regular intervals into T, 2T, 3T, and 4T. The y-axis is unmarked except for an H near its top.</p>
<p id="P700101195200000000000000000BD2B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2B">A blue line begins at the intersection of x and y and rises sharply to H on the y-axis at T on the x-axis, then drops vertically to the x-axis. From here it rises sharply to H on the y-axis and 2T on the x-axis, then drops vertically to the x-axis. This pattern is repeated twice more.</p>
</details>
</figure>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD2C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2C">
<li id="P700101195200000000000000000BD2D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2D"><p id="P700101195200000000000000000BD2E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2E">What is the server’s average send rate?</p></li>
<li id="P700101195200000000000000000BD2F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD2F"><p id="P700101195200000000000000000BD30" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD30">Suppose that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="17" altimg="../images/ch09math72.png"><m:mrow><m:mi>Q</m:mi><m:mo>=</m:mo><m:mn>0</m:mn><m:mo>,</m:mo></m:mrow></m:math></span> so that the client starts playback as soon as it receives a video frame. What will happen?</p></li>
<li id="P700101195200000000000000000BD31" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD31"><p id="P700101195200000000000000000BD32" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD32">Now suppose <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="53" altimg-height="17" altimg="../images/ch09math73.png"><m:mrow><m:mi>Q</m:mi><m:mo>&gt;</m:mo><m:mn>0</m:mn></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="88" altimg-height="18" altimg="../images/ch09math74.png"><m:mrow><m:mi>H</m:mi><m:mi>T</m:mi><m:mo>/</m:mo><m:mn>2</m:mn><m:mo>≥</m:mo><m:mi>Q</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> Determine as a function of <i>Q</i>, <i>H</i>, and <i>T</i> the time at which playback first begins.</p></li>
<li id="P700101195200000000000000000BD33" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD33"><p id="P700101195200000000000000000BD34" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD34">Suppose <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="63" altimg-height="13" altimg="../images/ch09math75.png"><m:mrow><m:mi>H</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn><m:mi>r</m:mi></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="87" altimg-height="18" altimg="../images/ch09math76.png"><m:mrow><m:mi>Q</m:mi><m:mo>=</m:mo><m:mi>H</m:mi><m:mi>T</m:mi><m:mo>/</m:mo><m:mn>2.</m:mn></m:mrow></m:math></span> Prove there will be no freezing after the initial playout delay.</p></li>
<li id="P700101195200000000000000000BD35" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD35"><p id="P700101195200000000000000000BD36" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD36">Suppose <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="66" altimg-height="13" altimg="../images/ch09math77.png"><m:mrow><m:mi>H</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> Find the smallest value of <i>Q</i> such that there will be no freezing after the initial playback delay.</p></li>
<li id="P700101195200000000000000000BD37" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD37"><p id="P700101195200000000000000000BD38" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD38">Now suppose that the buffer size <i>B</i> is finite. Suppose <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="66" altimg-height="13" altimg="../images/ch09math78.png"><m:mrow><m:mi>H</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> As a function of <i>Q</i>, <i>B</i>, <i>T</i>, and <i>H</i>, determine the time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="18" altimg="../images/ch09math79.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:msub><m:mi>t</m:mi><m:mi>f</m:mi></m:msub></m:mrow></m:math></span> when the client application buffer first becomes full.</p></li>
</ol></div></li>
<li class="general-problem" id="P70010119520000000000000000036FE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000036FE"><div class="question" id="P700101195200000000000000000BD39" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD39"><p id="P700101195200000000000000000BD3A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3A"><span class="lc_labelnum"><span class="label">P</span><span class="number">4.</span></span> Recall the simple model for HTTP streaming shown in <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003464" data-foobar="7"><span class="lc_labelnum"><span class="label">Figure</span> <span class="number">9.3</span></span> </a>. Suppose the client application buffer is infinite, the server sends at the constant rate <i>x</i>, and the video consumption rate is <i>r</i> with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="12" altimg="../images/ch09math80.png"><m:mrow><m:mi>r</m:mi><m:mo>&lt;</m:mo><m:mi>x</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> Also suppose playback begins immediately. Suppose that the user terminates the video early at time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="13" altimg="../images/ch09math81.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mi>E</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> At the time of termination, the server stops sending bits (if it hasn’t already sent all the bits in the video).</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD3B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3B">
<li id="P700101195200000000000000000BD3C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3C"><p id="P700101195200000000000000000BD3D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3D">Suppose the video is infinitely long. How many bits are wasted (that is, sent but not viewed)?</p></li>
<li id="P700101195200000000000000000BD3E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3E"><p id="P700101195200000000000000000BD3F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD3F">Suppose the video is <i>T</i> seconds long with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="58" altimg-height="13" altimg="../images/ch09math82.png"><m:mrow><m:mi>T</m:mi><m:mo>&gt;</m:mo><m:mi>E</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> How many bits are wasted (that is, sent but not viewed)?</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003706" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003706"><div class="question" id="P700101195200000000000000000BD40" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD40"><p id="P700101195200000000000000000BD41" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD41"><span class="pagebreak" title="731" id="P7001011952000000000000000003709" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003709" epub:type="pagebreak" role="doc-pagebreak"></span><span class="lc_labelnum"><span class="label">P</span><span class="number">5.</span></span> Consider a DASH system (as discussed in <a class="xref" href="fileP7001011952000000000000000000DC1.xhtml#P7001011952000000000000000000DC1" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">2.6</span></span> </a>) for which there are <i>N</i> video versions (at <i>N</i> different rates and qualities) and <i>N</i> audio versions (at <i>N</i> different rates and qualities). Suppose we want to allow the player to choose at any time any of the <i>N</i> video versions and any of the <i>N</i> audio versions.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD42" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD42">
<li id="P700101195200000000000000000BD43" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD43"><p id="P700101195200000000000000000BD44" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD44">If we create files so that the audio is mixed in with the video, so server sends only one media stream at given time, how many files will the server need to store (each a different URL)?</p></li>
<li id="P700101195200000000000000000BD45" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD45"><p id="P700101195200000000000000000BD46" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD46">If the server instead sends the audio and video streams separately and has the client synchronize the streams, how many files will the server need to store?</p></li>
</ol></div></li>
<li class="general-problem" id="P700101195200000000000000000370F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000370F"><div class="question" id="P700101195200000000000000000BD47" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD47"><p id="P700101195200000000000000000BD48" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD48"><span class="lc_labelnum"><span class="label">P</span><span class="number">6.</span></span> In the VoIP example in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a>, let <i>h</i> be the total number of header bytes added to each chunk, including UDP and IP header.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD49" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD49">
<li id="P700101195200000000000000000BD4A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4A"><p id="P700101195200000000000000000BD4B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4B">Assuming an IP datagram is emitted every 20 msecs, find the transmission rate in bits per second for the datagrams generated by one side of this application.</p></li>
<li id="P700101195200000000000000000BD4C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4C"><p id="P700101195200000000000000000BD4D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4D">What is a typical value of <i>h</i> when RTP is used?</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003717" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003717"><div class="question" id="P700101195200000000000000000BD4E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4E"><p id="P700101195200000000000000000BD4F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD4F"><span class="lc_labelnum"><span class="label">P</span><span class="number">7.</span></span> Consider the procedure described in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a> for estimating average delay <i>d<sub>i</sub></i>. Suppose that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="68" altimg-height="13" altimg="../images/ch09math83.png"><m:mrow><m:mi>u</m:mi><m:mo>=</m:mo><m:mn>0.1.</m:mn></m:mrow></m:math></span> Let <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="53" altimg-height="15" altimg="../images/ch09math84.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub></m:mrow></m:math></span> be the most recent sample delay, let <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="54" altimg-height="15" altimg="../images/ch09math85.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>2</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>2</m:mn></m:msub></m:mrow></m:math></span> be the next most recent sample delay, and so on.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD50" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD50">
<li id="P700101195200000000000000000BD51" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD51"><p id="P700101195200000000000000000BD52" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD52">For a given audio application suppose four packets have arrived at the receiver with sample delays <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="180" altimg-height="15" altimg="../images/ch09math86.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>4</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>4</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>r</m:mi><m:mn>3</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>3</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>r</m:mi><m:mn>2</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>2</m:mn></m:msub><m:mo>,</m:mo></m:mrow></m:math></span> and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="57" altimg-height="15" altimg="../images/ch09math87.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub><m:mo>.</m:mo></m:mrow></m:math></span> Express the estimate of delay <i>d</i> in terms of the four samples.</p></li>
<li id="P700101195200000000000000000BD53" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD53"><p id="P700101195200000000000000000BD54" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD54">Generalize your formula for <i>n</i> sample delays.</p></li>
<li id="P700101195200000000000000000BD55" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD55"><p id="P700101195200000000000000000BD56" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD56">For the formula in part (b), let <i>n</i> approach infinity and give the resulting formula. Comment on why this averaging procedure is called an exponential moving average.</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003721" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003721"><div class="question" id="P700101195200000000000000000BD57" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD57"><p id="P700101195200000000000000000BD58" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD58"><span class="lc_labelnum"><span class="label">P</span><span class="number">8.</span></span> Repeat parts (a) and (b) in Question P7 for the estimate of average delay deviation.</p></div></li>
<li class="general-problem" id="P7001011952000000000000000003724" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003724"><div class="question" id="P700101195200000000000000000BD59" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD59"><p id="P700101195200000000000000000BD5A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5A"><span class="lc_labelnum"><span class="label">P</span><span class="number">9.</span></span> For the VoIP example in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a>, we introduced an online procedure (exponential moving average) for estimating delay. In this problem we will examine an alternative procedure. Let <i>t<sub>i</sub></i> be the timestamp of the <i>i</i>th packet received; let <i>r<sub>i</sub></i> be the time at which the <i>i</i>th packet is received. Let <i>d<sub>n</sub></i> be our estimate of average delay after receiving the <i>n</i>th packet. After the first packet is received, we set the delay estimate equal to <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="104" altimg-height="17" altimg="../images/ch09math88.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mn>1</m:mn></m:msub><m:mo>=</m:mo><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub><m:mo>.</m:mo></m:mrow></m:math></span></p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD5B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5B">
<li id="P700101195200000000000000000BD5C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5C"><p id="P700101195200000000000000000BD5D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5D">Suppose that we would like <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="345" altimg-height="17" altimg="../images/ch09math89.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mi>n</m:mi></m:msub><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub><m:mo>+</m:mo><m:msub><m:mi>r</m:mi><m:mn>2</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>2</m:mn></m:msub><m:mo>+</m:mo><m:mo>⋯</m:mo><m:mo>+</m:mo><m:msub><m:mi>r</m:mi><m:mi>n</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>n</m:mi></m:msub></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>/</m:mo><m:mi>n</m:mi></m:mrow></m:math></span> for all <i>n</i>. Give a recursive formula for <i>d<sub>n</sub></i> in terms of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="62" altimg-height="16" altimg="../images/ch09math90.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>r</m:mi><m:mi>n</m:mi></m:msub><m:mo>,</m:mo></m:mrow></m:math></span> and <i>t<sub>n</sub></i>.</p></li>
<li id="P700101195200000000000000000BD5E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5E"><p id="P700101195200000000000000000BD5F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD5F">Describe why for Internet telephony, the delay estimate described in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a> is more appropriate than the delay estimate outlined in part (a).</p></li>
</ol></div></li>
<li class="general-problem" id="P700101195200000000000000000372C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000372C"><div class="question" id="P700101195200000000000000000BD60" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD60"><p id="P700101195200000000000000000BD61" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD61"><span class="lc_labelnum"><span class="label">P</span><span class="number">10.</span></span> Compare the procedure described in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a> for estimating average delay with the procedure in <a class="xref" href="fileP7001011952000000000000000001442.xhtml#P7001011952000000000000000001442" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">3.5</span></span> </a> for estimating round-trip time. What do the procedures have in common? How are they different?</p></div></li>
<li class="general-problem" id="P700101195200000000000000000372F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000372F"><div class="question" id="P700101195200000000000000000BD62" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD62"><p id="P700101195200000000000000000BD63" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD63"><span class="pagebreak" title="732" id="P7001011952000000000000000003732" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003732" epub:type="pagebreak" role="doc-pagebreak"></span><span class="lc_labelnum"><span class="label">P</span><span class="number">11.</span></span> Consider the figure below (which is similar to <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003464" data-foobar="7"><span class="lc_labelnum"><span class="label">Figure</span> <span class="number">9.3</span></span> </a>). A sender begins sending packetized audio periodically at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="13" altimg="../images/ch09math91.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>1.</m:mn></m:mrow></m:math></span> The first packet arrives at the receiver at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="13" altimg="../images/ch09math92.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>8.</m:mn></m:mrow></m:math></span></p>
<figure id="P7001011952000000000000000003733" class="informalfigure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003733">
<img alt="P11 Packets graph." height="380" width="649" aria-describedby="P7001011952000000000000000003735" id="P700101195200000000000000000BD64" data-uri="P7001011952000000000000000005647" src="../images/4055109022.png"></img>
<details class="longdesc" id="P7001011952000000000000000003735" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003735">
<summary><span class="label">Description</span></summary>
<p id="P700101195200000000000000000BD65" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD65">In this graph, the x-axis is labeled "Time" and the y-axis is labeled "Packets." The x-axis begins at 0 and moves at regular intervals in increments of one to sixteen. Only 1 and 8 are actually numbered. The y-axis is also is notched at eight regular intervals, though these are not labeled.</p>
<p id="P700101195200000000000000000BD66" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD66">At 1 on the x-axis, a line extends upwards to the right in a stair-step fashion. It rises to 1 on the y-axis then over to 2 on the x-axis, then up to 2 on y and 3 on x, etc. to the top of the graph. This line is labeled "Packets generated."</p>
<p id="P700101195200000000000000000BD67" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD67">At 8 on the x-axis, a line extends upwards to the right in an inconsistent stair-step fashion. It rises to 1 on the y-axis then extends horizontally over to 9 on the x-axis. From there it rises to 2 on the y-axis and extends to 12 on the x-axis. From there it rises to 5 on the y-axis and extends to 15 on the x-axis. From there it rises to 7 on the y-axis and extends to 16 on the x-axis, then rises to 8 on the y-axis</p>
</details>
</figure>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD68" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD68">
<li id="P700101195200000000000000000BD69" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD69"><p id="P700101195200000000000000000BD6A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6A">What are the delays (from sender to receiver, ignoring any playout delays) of packets 2 through 8? Note that each vertical and horizontal line segment in the figure has a length of 1, 2, or 3 time units.</p></li>
<li id="P700101195200000000000000000BD6B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6B"><p id="P700101195200000000000000000BD6C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6C">If audio playout begins as soon as the first packet arrives at the receiver at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="16" altimg="../images/ch09math93.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>8</m:mn><m:mo>,</m:mo></m:mrow></m:math></span> which of the first eight packets sent will <i>not</i> arrive in time for playout?</p></li>
<li id="P700101195200000000000000000BD6D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6D"><p id="P700101195200000000000000000BD6E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6E">If audio playout begins at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="16" altimg="../images/ch09math94.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>9</m:mn><m:mo>,</m:mo></m:mrow></m:math></span> which of the first eight packets sent will not arrive in time for playout?</p></li>
<li id="P700101195200000000000000000BD6F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD6F"><p id="P700101195200000000000000000BD70" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD70">What is the minimum playout delay at the receiver that results in all of the first eight packets arriving in time for their playout?</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003742" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003742"><div class="question" id="P700101195200000000000000000BD71" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD71"><p id="P700101195200000000000000000BD72" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD72"><span class="lc_labelnum"><span class="label">P</span><span class="number">12.</span></span> Consider again the figure in P11, showing packet audio transmission and reception times.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD73" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD73">
<li id="P700101195200000000000000000BD74" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD74"><p id="P700101195200000000000000000BD75" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD75">Compute the estimated delay for packets 2 through 8, using the formula for <i>d<sub>i</sub></i> from <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003496" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3.2</span></span> </a>. Use a value of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="63" altimg-height="13" altimg="../images/ch09math95.png"><m:mrow><m:mi>u</m:mi><m:mo>=</m:mo><m:mn>0.1</m:mn></m:mrow></m:math></span>.</p></li>
<li id="P700101195200000000000000000BD76" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD76"><p id="P700101195200000000000000000BD77" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD77">Compute the estimated deviation of the delay from the estimated average for packets 2 through 8, using the formula for <i>v<sub>i</sub></i> from <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003496" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3.2</span></span> </a>. Use a value of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="62" altimg-height="13" altimg="../images/ch09math96.png"><m:mrow><m:mi>u</m:mi><m:mo>=</m:mo><m:mn>0.1</m:mn></m:mrow></m:math></span>.</p></li>
</ol></div></li>
<li class="general-problem" id="P700101195200000000000000000374A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000374A"><div class="question" id="P700101195200000000000000000BD78" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD78"><p id="P700101195200000000000000000BD79" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD79"><span class="lc_labelnum"><span class="label">P</span><span class="number">13.</span></span> Recall the two FEC schemes for VoIP described in <a class="xref" href="fileP7001011952000000000000000003477.xhtml#P7001011952000000000000000003477" data-foobar="7"><span class="lc_labelnum"><span class="label">Section</span> <span class="number">9.3</span></span> </a>. Suppose the first scheme generates a redundant chunk for every four original chunks. Suppose the second scheme uses a low-bit rate encoding whose transmission rate is 25 percent of the transmission rate of the nominal stream.</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD7A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7A">
<li id="P700101195200000000000000000BD7B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7B"><p id="P700101195200000000000000000BD7C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7C"><span class="pagebreak" title="733" id="P7001011952000000000000000003750" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003750" epub:type="pagebreak" role="doc-pagebreak"></span>How much additional bandwidth does each scheme require? How much playback delay does each scheme add?</p></li>
<li id="P700101195200000000000000000BD7D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7D"><p id="P700101195200000000000000000BD7E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7E">How do the two schemes perform if the first packet is lost in every group of five packets? Which scheme will have better audio quality?</p></li>
<li id="P700101195200000000000000000BD7F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD7F"><p id="P700101195200000000000000000BD80" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD80">How do the two schemes perform if the first packet is lost in every group of two packets? Which scheme will have better audio quality?</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003755" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003755"><div class="question" id="P700101195200000000000000000BD81" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD81"><p id="P700101195200000000000000000BD82" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD82"><span class="lc_labelnum"><span class="label">P</span><span class="number">14.</span></span></p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD83" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD83">
<li id="P700101195200000000000000000BD84" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD84"><p id="P700101195200000000000000000BD85" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD85">Consider an audio conference call in Skype with <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="53" altimg-height="14" altimg="../images/ch09math97.png"><m:mrow><m:mi>N</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn></m:mrow></m:math></span> participants. Suppose each participant generates a constant stream of rate <i>r</i> bps. How many bits per second will the call initiator need to send? How many bits per second will each of the other <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="14" altimg="../images/ch09math98.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> participants need to send? What is the total send rate, aggregated over all participants?</p></li>
<li id="P700101195200000000000000000BD86" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD86"><p id="P700101195200000000000000000BD87" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD87">Repeat part (a) for a Skype video conference call using a central server.</p></li>
<li id="P700101195200000000000000000BD88" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD88"><p id="P700101195200000000000000000BD89" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD89">Repeat part (b), but now for when each peer sends a copy of its video stream to each of the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="14" altimg="../images/ch09math99.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> other peers.</p></li>
</ol></div></li>
<li class="general-problem" id="P700101195200000000000000000375F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000375F"><div class="question" id="P700101195200000000000000000BD8A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8A"><p id="P700101195200000000000000000BD8B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8B"><span class="lc_labelnum"><span class="label">P</span><span class="number">15.</span></span></p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD8C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8C">
<li id="P700101195200000000000000000BD8D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8D"><p id="P700101195200000000000000000BD8E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8E">Suppose we send into the Internet two IP datagrams, each carrying a different UDP segment. The first datagram has source IP address A1, destination IP address B, source port P1, and destination port T. The second datagram has source IP address A2, destination IP address B, source port P2, and destination port T. Suppose that A1 is different from A2 and that P1 is different from P2. Assuming that both datagrams reach their final destination, will the two UDP datagrams be received by the same socket? Why or why not?</p></li>
<li id="P700101195200000000000000000BD8F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD8F"><p id="P700101195200000000000000000BD90" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD90">Suppose Alice, Bob, and Claire want to have an audio conference call using SIP and RTP. For Alice to send and receive RTP packets to and from Bob and Claire, is only one UDP socket sufficient (in addition to the socket needed for the SIP messages)? If yes, then how does Alice’s SIP client distinguish between the RTP packets received from Bob and Claire?</p></li>
</ol></div></li>
<li class="tf-problem" id="P7001011952000000000000000003767" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003767"><div class="question" id="P700101195200000000000000000BD91" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD91"><p id="P700101195200000000000000000BD92" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD92"><span class="lc_labelnum"><span class="label">P</span><span class="number">16.</span></span> True or false:</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BD93" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD93">
<li id="P700101195200000000000000000BD94" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD94"><p id="P700101195200000000000000000BD95" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD95">If stored video is streamed directly from a Web server to a media player, then the application is using TCP as the underlying transport protocol.</p></li>
<li id="P700101195200000000000000000BD96" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD96"><p id="P700101195200000000000000000BD97" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD97">When using RTP, it is possible for a sender to change encoding in the middle of a session.</p></li>
<li id="P700101195200000000000000000BD98" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD98"><p id="P700101195200000000000000000BD99" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD99">All applications that use RTP must use port 87.</p></li>
<li id="P700101195200000000000000000BD9A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD9A"><p id="P700101195200000000000000000BD9B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD9B">If an RTP session has a separate audio and video stream for each sender, then the audio and video streams use the same SSRC.</p></li>
<li id="P700101195200000000000000000BD9C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD9C"><p id="P700101195200000000000000000BD9D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD9D">In differentiated services, while per-hop behavior defines differences in performance among classes, it does not mandate any particular mechanism for achieving these performances.<span class="pagebreak" title="734" id="P7001011952000000000000000003775" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003775" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000003776" class="informalfigure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003776">
<img alt="P17 Packet queue image." height="289" width="861" aria-describedby="P7001011952000000000000000003778" id="P700101195200000000000000000BD9E" data-uri="P7001011952000000000000000005648" src="../images/4055109023.png"></img>
<details class="longdesc" id="P7001011952000000000000000003778" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003778">
<summary><span class="label">Description</span></summary>
<p id="P700101195200000000000000000BD9F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BD9F">In this illustration, we see (from left to right) a horizontal line labeled "Arrivals," which is marked at regular intervals and labeled at every other mark. The first mark is labeled "t =8," then "t = 6," and so on to "t = 0." At t = 7 we see two data packets labeled 10 and 9. At t = 6 we see two data packets labeled 8 and 7. At t = 3 we see one data packet labeled 6. At t = 2 we see one data packet labeled 5. At t = 1 we see one data packet labeled 4. And at t = 0 we see three data packets labeled 3, 2, and 1.</p>
<p id="P700101195200000000000000000BDA0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA0">To the right of the arrivals we see "Packet queue (wait for tokens)" with eight empty slots. To the right of the packet queue is the "remove token" diamond shape from figure 9.14 (though unlabeled here). Above it is the leaky bucket, with the dropped token labeled "r = 1 token/slot," and the bucket labeled "b = 2 tokens."</p>
<p id="P700101195200000000000000000BDA1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA1">To the right of the diamond is a horizontal line pointing to the right and notched at regular intervals and labeled at every other notch, beginning with "t = 4" and ending with "t = 0."</p>
</details>
</figure></li>
<li id="P700101195200000000000000000BDA2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA2"><p id="P700101195200000000000000000BDA3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA3">Suppose Alice wants to establish an SIP session with Bob. In her INVITE message she includes the line: m=audio 48753 RTP/AVP 3 (AVP 3 denotes GSM audio). Alice has therefore indicated in this message that she wishes to send GSM audio.</p></li>
<li id="P700101195200000000000000000BDA4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA4"><p id="P700101195200000000000000000BDA5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA5">Referring to the preceding statement, Alice has indicated in her INVITE message that she will send audio to port 48753.</p></li>
<li id="P700101195200000000000000000BDA6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA6"><p id="P700101195200000000000000000BDA7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA7">SIP messages are typically sent between SIP entities using a default SIP port number.</p></li>
<li id="P700101195200000000000000000BDA8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA8"><p id="P700101195200000000000000000BDA9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDA9">In order to maintain registration, SIP clients must periodically send REGISTER messages.</p></li>
<li id="P700101195200000000000000000BDAA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAA"><p id="P700101195200000000000000000BDAB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAB">SIP mandates that all SIP clients support G.711 audio encoding.</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003786" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003786"><div class="question" id="P700101195200000000000000000BDAC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAC"><p id="P700101195200000000000000000BDAD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAD"><span class="lc_labelnum"><span class="label">P</span><span class="number">17.</span></span> Consider the figure below, which shows a leaky bucket policer being fed by a stream of packets. The token buffer can hold at most two tokens, and is initially full at <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="13" altimg="../images/ch09math100.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>0.</m:mn></m:mrow></m:math></span> New tokens arrive at a rate of one token per slot. The output link speed is such that if two packets obtain tokens at the beginning of a time slot, they can both go to the output link in the same slot. The timing details of the system are as follows:</p>
<ol id="P700101195200000000000000000BDAE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAE">
<li id="P700101195200000000000000000BDAF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDAF"><p id="P700101195200000000000000000BDB0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB0">Packets (if any) arrive at the beginning of the slot. Thus in the figure, packets 1, 2, and 3 arrive in slot 0. If there are already packets in the queue, then the arriving packets join the end of the queue. Packets proceed towards the front of the queue in a FIFO manner.</p></li>
<li id="P700101195200000000000000000BDB1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB1"><p id="P700101195200000000000000000BDB2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB2">After the arrivals have been added to the queue, if there are any queued packets, one or two of those packets (depending on the number of available tokens) will each remove a token from the token buffer and go to the output link during that slot. Thus, packets 1 and 2 each remove a token from the buffer (since there are initially two tokens) and go to the output link during slot 0.</p></li>
<li id="P700101195200000000000000000BDB3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB3"><p id="P700101195200000000000000000BDB4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB4"><span class="pagebreak" title="735" id="P7001011952000000000000000003790" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003790" epub:type="pagebreak" role="doc-pagebreak"></span>A new token is added to the token buffer if it is not full, since the token generation rate is <i>r</i> = 1 token/slot.</p></li>
<li id="P700101195200000000000000000BDB5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB5"><p id="P700101195200000000000000000BDB6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB6">Time then advances to the next time slot, and these steps repeat.</p></li>
</ol>
<p class="continued" id="P700101195200000000000000000BDB7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB7">Answer the following questions:</p>
<ol class="ol_lower-alpha" type="a" id="P700101195200000000000000000BDB8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB8">
<li id="P700101195200000000000000000BDB9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDB9"><p id="P700101195200000000000000000BDBA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBA">For each time slot, identify the packets that are in the queue and the number of tokens in the bucket, immediately after the arrivals have been processed (step 1 above) but before any of the packets have passed through the queue and removed a token. Thus, for the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="45" altimg-height="13" altimg="../images/ch09math101.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math></span> time slot in the example above, packets 1, 2, and 3 are in the queue, and there are two tokens in the buffer.</p></li>
<li id="P700101195200000000000000000BDBB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBB"><p id="P700101195200000000000000000BDBC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBC">For each time slot indicate which packets appear on the output after the token(s) have been removed from the queue. Thus, for the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="45" altimg-height="13" altimg="../images/ch09math102.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math></span> time slot in the example above, packets 1 and 2 appear on the output link from the leaky buffer during slot 0.</p></li>
</ol></div></li>
<li class="general-problem" id="P7001011952000000000000000003799" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003799"><div class="question" id="P700101195200000000000000000BDBD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBD"><p id="P700101195200000000000000000BDBE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBE"><span class="lc_labelnum"><span class="label">P</span><span class="number">18.</span></span> Repeat P17 but assume that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="13" altimg="../images/ch09math103.png"><m:mrow><m:mi>r</m:mi><m:mo>=</m:mo><m:mn>2.</m:mn></m:mrow></m:math></span> Assume again that the bucket is initially full.</p></div></li>
<li class="general-problem" id="P700101195200000000000000000379C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000379C"><div class="question" id="P700101195200000000000000000BDBF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDBF"><p id="P700101195200000000000000000BDC0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC0"><span class="lc_labelnum"><span class="label">P</span><span class="number">19.</span></span> Consider P18 and suppose now that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="13" altimg="../images/ch09math104.png"><m:mrow><m:mi>r</m:mi><m:mo>=</m:mo><m:mn>3</m:mn></m:mrow></m:math></span> and that <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="13" altimg="../images/ch09math105.png"><m:mrow><m:mi>b</m:mi><m:mo>=</m:mo><m:mn>2</m:mn></m:mrow></m:math></span> as before. Will your answer to the question above change?</p></div></li>
<li class="general-problem" id="P700101195200000000000000000379F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000379F"><div class="question" id="P700101195200000000000000000BDC1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC1"><p id="P700101195200000000000000000BDC2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC2"><span class="lc_labelnum"><span class="label">P</span><span class="number">20.</span></span> Consider the leaky bucket policer that polices the average rate and burst size of a packet flow. We now want to police the peak rate, <i>p</i>, as well. Show how the output of this leaky bucket policer can be fed into a second leaky bucket policer so that the two leaky buckets in series police the average rate, peak rate, and burst size. Be sure to give the bucket size and token generation rate for the second policer.</p></div></li>
<li class="general-problem" id="P70010119520000000000000000037A2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037A2"><div class="question" id="P700101195200000000000000000BDC3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC3"><p id="P700101195200000000000000000BDC4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC4"><span class="lc_labelnum"><span class="label">P</span><span class="number">21.</span></span> A packet flow is said to conform to a leaky bucket specification (<i>r</i>, <i>b</i>) with burst size <i>b</i> and average rate <i>r</i> if the number of packets that arrive to the leaky bucket is less than <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="13" altimg="../images/ch09math106.png"><m:mrow><m:mi>r</m:mi><m:mi>t</m:mi><m:mo>+</m:mo><m:mi>b</m:mi></m:mrow></m:math></span> packets in every interval of time of length <i>t</i> for all <i>t</i>. Will a packet flow that conforms to a leaky bucket specification (<i>r</i>, <i>b</i>) ever have to wait at a leaky bucket policer with parameters <i>r</i> and <i>b</i>? Justify your answer.</p></div></li>
<li class="general-problem" id="P70010119520000000000000000037A5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037A5"><div class="question" id="P700101195200000000000000000BDC5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC5"><p id="P700101195200000000000000000BDC6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC6"><span class="lc_labelnum"><span class="label">P</span><span class="number">22.</span></span> Show that as long as <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="135" altimg-height="21" altimg="../images/ch09math107.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>&lt;</m:mo><m:mi>R</m:mi><m:msub><m:mi>w</m:mi><m:mn>1</m:mn></m:msub><m:mo>/</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mstyle displaystyle="true"><m:mo>∑</m:mo> <m:mrow><m:msub><m:mi>w</m:mi><m:mi>j</m:mi></m:msub></m:mrow></m:mstyle></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>,</m:mo></m:mrow></m:math></span> then <i>d</i><sub>max</sub> is indeed the maximum delay that any packet in flow 1 will ever experience in the WFQ queue.</p></div></li>
</ol>
<section id="P70010119520000000000000000037A8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037A8" class="practicediv level3"><header><h1 class="title" id="P700101195200000000000000000BDC7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC7" epub:type="title">Programming Assignment</h1></header>
<p id="P700101195200000000000000000BDC8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC8">In this lab, you will implement a streaming video server and client. The client will use the real-time streaming protocol (RTSP) to control the actions of the server. The server will use the real-time protocol (RTP) to packetize the video for transport over UDP. You will be given Python code that partially implements RTSP and RTP at the client and server. Your job will be to complete both the client and server code. <span class="pagebreak" title="736" id="P70010119520000000000000000037AB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037AB" epub:type="pagebreak" role="doc-pagebreak"></span>When you are finished, you will have created a client-server application that does the following:</p>
<ul id="P700101195200000000000000000BDC9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDC9">
<li id="P700101195200000000000000000BDCA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCA"><p id="P700101195200000000000000000BDCB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCB">The client sends SETUP, PLAY, PAUSE, and TEARDOWN RTSP commands, and the server responds to the commands.</p></li>
<li id="P700101195200000000000000000BDCC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCC"><p id="P700101195200000000000000000BDCD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCD">When the server is in the playing state, it periodically grabs a stored JPEG frame, packetizes the frame with RTP, and sends the RTP packet into a UDP socket.</p></li>
<li id="P700101195200000000000000000BDCE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCE"><p id="P700101195200000000000000000BDCF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDCF">The client receives the RTP packets, removes the JPEG frames, decompresses the frames, and renders the frames on the client’s monitor.</p></li>
</ul>
<p id="P700101195200000000000000000BDD0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD0">The code you will be given implements the RTSP protocol in the server and the RTP depacketization in the client. The code also takes care of displaying the transmitted video. You will need to implement RTSP in the client and RTP server. This programming assignment will significantly enhance the student’s understanding of RTP, RTSP, and streaming video. It is highly recommended. The assignment also suggests a number of optional exercises, including implementing the RTSP DESCRIBE command at both client and server. You can find full details of the assignment, as well as an overview of the RTSP protocol, at the Web site <a class="ulink" href="http://www.pearsonhighered.com/cs-resources">www.pearsonhighered.com/<wbr></wbr>cs-resources</a>.</p>
</section>
</section>
<aside class="sidebar" id="P70010119520000000000000000037B4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037B4"><header><h1 class="title" id="P700101195200000000000000000BDD1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD1" epub:type="title"><span class="pagebreak" title="737" id="P70010119520000000000000000037B6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037B6" epub:type="pagebreak" role="doc-pagebreak"></span><span class="label">AN INTERVIEW WITH . . . </span></h1></header>
<section class="read" id="P70010119520000000000000000037B7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037B7">
<div class="authorgroup" id="P700101195200000000000000000BDD2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD2"><div class="author" id="P700101195200000000000000000BDD3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD3"><div class="name" id="P700101195200000000000000000BDD4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD4"><p id="P700101195200000000000000000BDD5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD5">Henning Schulzrinne</p></div></div></div>
<p id="P700101195200000000000000000BDD6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD6">Henning Schulzrinne is a professor, chair of the Department of Computer Science, and head of the Internet Real-Time Laboratory at Columbia University. He is the co-author of RTP, RTSP, SIP, and GIST—key protocols for audio and video communications over the Internet. Henning received his BS in electrical and industrial engineering at TU Darmstadt in Germany, his MS in electrical and computer engineering at the University of Cincinnati, and his PhD in electrical engineering at the University of Massachusetts, Amherst.</p>
<figure id="P70010119520000000000000000037BD" class="informalfigure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037BD">
<img alt="Photograph of Henning Schulzrinne." height="213" width="165" id="P700101195200000000000000000BDD7" data-uri="P7001011952000000000000000005649" src="../images/4055109024.jpg"></img>
</figure>
</section>
<section id="P70010119520000000000000000037BF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037BF"><header><h1 class="title" id="P700101195200000000000000000BDD8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD8" epub:type="title">What made you decide to specialize in multimedia networking?</h1></header>
<p id="P700101195200000000000000000BDD9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDD9">This happened almost by accident. As a PhD student, I got involved with DARTnet, an experimental network spanning the United States with T1 lines. DARTnet was used as a proving ground for multicast and Internet real-time tools. That led me to write my first audio tool, NeVoT. Through some of the DARTnet participants, I became involved in the IETF, in the then-nascent Audio Video Transport working group. This group later ended up standardizing RTP.</p>
</section>
<section id="P70010119520000000000000000037C2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037C2"><header><h1 class="title" id="P700101195200000000000000000BDDA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDA" epub:type="title">What was your first job in the computer industry? What did it entail?</h1></header>
<p id="P700101195200000000000000000BDDB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDB">My first job in the computer industry was soldering together an Altair computer kit when I was a high school student in Livermore, California. Back in Germany, I started a little consulting company that devised an address management program for a travel agency—storing data on cassette tapes for our TRS-80 and using an IBM Selectric typewriter with a home-brew hardware interface as a printer.</p>
<p id="P700101195200000000000000000BDDC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDC">My first real job was with AT&amp;T Bell Laboratories, developing a network emulator for constructing experimental networks in a lab environment.</p>
</section>
<section id="P70010119520000000000000000037C6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037C6"><header><h1 class="title" id="P700101195200000000000000000BDDD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDD" epub:type="title">What are the goals of the Internet Real-Time Lab?</h1></header>
<p id="P700101195200000000000000000BDDE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDE">Our goal is to provide components and building blocks for the Internet as the single future communications infrastructure. This includes developing new protocols, such as GIST (for network-layer signaling) and LoST (for finding resources by location), or enhancing protocols that we have worked on earlier, such as SIP, through work on rich presence, peer-to-peer systems, next-generation emergency calling, and service creation tools. Recently, we have also looked extensively at wireless systems for VoIP, as 802.11b and 802.11n networks and maybe WiMax networks are likely to become important last-mile technologies for telephony. We are also trying to greatly improve the ability of users to diagnose faults in the complicated tangle of providers and equipment, using a peer-to-peer fault diagnosis system called DYSWIS (Do You See What I See).</p>
<p id="P700101195200000000000000000BDDF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDDF"><span class="pagebreak" title="738" id="P70010119520000000000000000037CA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037CA" epub:type="pagebreak" role="doc-pagebreak"></span>We try to do practically relevant work, by building prototypes and open source systems, by measuring performance of real systems, and by contributing to IETF standards.</p>
</section>
<section id="P70010119520000000000000000037CB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037CB"><header><h1 class="title" id="P700101195200000000000000000BDE0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE0" epub:type="title">What is your vision for the future of multimedia networking?</h1></header>
<p id="P700101195200000000000000000BDE1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE1">We are now in a transition phase; just a few years shy of when IP will be the universal platform for multimedia services, from IPTV to VoIP. We expect radio, telephone, and TV to be available even during snowstorms and earthquakes, so when the Internet takes over the role of these dedicated networks, users will expect the same level of reliability.</p>
<p id="P700101195200000000000000000BDE2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE2">We will have to learn to design network technologies for an ecosystem of competing carriers, service and content providers, serving lots of technically untrained users and defending them against a small, but destructive, set of malicious and criminal users. Changing protocols is becoming increasingly hard. They are also becoming more complex, as they need to take into account competing business interests, security, privacy, and the lack of transparency of networks caused by firewalls and network address translators.</p>
<p id="P700101195200000000000000000BDE3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE3">Since multimedia networking is becoming the foundation for almost all of consumer entertainment, there will be an emphasis on managing very large networks, at low cost. Users will expect ease of use, such as finding the same content on all of their devices.</p>
</section>
<section id="P70010119520000000000000000037D0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037D0"><header><h1 class="title" id="P700101195200000000000000000BDE4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE4" epub:type="title">Why does SIP have a promising future?</h1></header>
<p id="P700101195200000000000000000BDE5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE5">As the current wireless network upgrade to 3G networks proceeds, there is the hope of a single multimedia signaling mechanism spanning all types of networks, from cable modems, to corporate telephone networks and public wireless networks. Together with software radios, this will make it possible in the future that a single device can be used on a home network, as a cordless BlueTooth phone, in a corporate network via 802.11 and in the wide area via 3G networks. Even before we have such a single universal wireless device, the personal mobility mechanisms make it possible to hide the differences between networks. One identifier becomes the universal means of reaching a person, rather than remembering or passing around half a dozen technology- or location-specific telephone numbers.</p>
<p id="P700101195200000000000000000BDE6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE6">SIP also breaks apart the provision of voice (bit) transport from voice services. It now becomes technically possible to break apart the local telephone monopoly, where one company provides neutral bit transport, while others provide IP “dial tone” and the classical telephone services, such as gateways, call forwarding, and caller ID.</p>
<p id="P700101195200000000000000000BDE7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE7">Beyond multimedia signaling, SIP offers a new service that has been missing in the Internet: event notification. We have approximated such services with HTTP kludges and e-mail, but this was never very satisfactory. Since events are a common abstraction for distributed systems, this may simplify the construction of new services.</p>
</section>
<section id="P70010119520000000000000000037D5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037D5"><header><h1 class="title" id="P700101195200000000000000000BDE8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE8" epub:type="title"><span class="pagebreak" title="739" id="P70010119520000000000000000037D7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037D7" epub:type="pagebreak" role="doc-pagebreak"></span>Do you have any advice for students entering the networking field?</h1></header>
<p id="P700101195200000000000000000BDE9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDE9">Networking bridges disciplines. It draws from electrical engineering, all aspects of computer science, operations research, statistics, economics, and other disciplines. Thus, networking researchers have to be familiar with subjects well beyond protocols and routing algorithms. Given that networks are becoming such an important part of everyday life, students wanting to make a difference in the field should think of the new resource constraints in networks: human time and effort, rather than just bandwidth or storage.</p>
<p id="P700101195200000000000000000BDEA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BDEA">Work in networking research can be immensely satisfying since it is about allowing people to communicate and exchange ideas, one of the essentials of being human. The Internet has become the third major global infrastructure, next to the transportation system and energy distribution. Almost no part of the economy can work without high-performance networks, so there should be plenty of opportunities for the foreseeable future.<span class="pagebreak" title="740" id="P70010119520000000000000000037DA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000037DA" epub:type="pagebreak" role="doc-pagebreak"></span></p>
</section>
</aside>
</section></body></html>