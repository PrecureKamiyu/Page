<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>14.4  B+-Tree Extensions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part263.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part265.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><span style=" color: #231F20;">14.4  </span>B<span class="s329">+</span>-Tree Extensions</p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In this section, we discuss several extensions and variations of the B<span class="s181">+</span>-tree index struc- ture.</p><p class="s68" style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">14.4.1 B<span class="s331">+</span>-Tree File Organization</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">As mentioned in Section 14.3, the main drawback of index-sequential ﬁle organization is the degradation of performance as the ﬁle grows: With growth, an increasing percent- age of index entries and actual records become out of order and are stored in overﬂow blocks. We solve the degradation of index lookups by using B<span class="s181">+</span>-tree indices on the ﬁle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:145.99pt" cellspacing="0"><tr style="height:6pt"><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p class="s352" style="text-indent: 0pt;text-align: left;">(A,4)</p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">(B,8)</p></td><td style="width:16pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:5pt"><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:5pt"><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(I,4)</p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(J,8)</p></td><td style="width:16pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:5pt"><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse" cellspacing="0"><tr style="height:11pt"><td style="width:25pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">(M,4)</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(N,8)</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s352" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(P,6)</p></td><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s386" style="padding-left: 240pt;text-indent: 0pt;line-height: 12pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="364" height="149" alt="image" src="Image_2693.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="6" height="4" alt="image" src="Image_2694.png"/></span></p><p class="s119" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">(L,6)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="text-indent: 0pt;text-align: left;">(K,1)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">M</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">K</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="text-indent: 0pt;text-align: left;">(H,3)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">(G,3)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(F,7)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="text-indent: 0pt;text-align: left;">(E,4)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">(D,9)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">(C,1)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">F</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">C</p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">I</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="174" height="41" alt="image" src="Image_2695.png"/></span></p><p class="s74" style="padding-top: 5pt;padding-left: 220pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 14.22 </span>B<span class="s237">+</span>-tree file organization.</p><p style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We solve the degradation problem for storing the actual records by using the leaf level of the B<span class="s181">+</span>-tree to organize the blocks containing the actual records. We use the B<span class="s181">+</span>-tree structure not only as an index, but also as an organizer for records in a ﬁle. In a <span class="s63">B</span><span class="s330">+</span><span class="s63">-tree ﬁle organization</span>, the leaf nodes of the tree store records, instead of storing pointers to records. Figure 14.22 shows an example of a B<span class="s181">+</span>-tree ﬁle organization. Since records are usually larger than pointers, the maximum number of records that can be stored in a leaf node is less than the number of pointers in a nonleaf node. However, the leaf nodes are still required to be at least half full.</p><p style="padding-left: 119pt;text-indent: 17pt;line-height: 94%;text-align: justify;">Insertion and deletion of records from a B<span class="s181">+</span>-tree ﬁle organization are handled in the same way as insertion and deletion of entries in a B<span class="s181">+</span>-tree index. When a record with a given key value <i>v </i>is inserted, the system locates the block that should contain the record by searching the B<span class="s181">+</span>-tree for the largest key in the tree that is <span class="s86">≤ </span><i>v</i>. If the block located has enough free space for the record, the system stores the record in the block.</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Otherwise, as in B<span class="s181">+</span>-tree insertion, the system splits the block in two and redistributes the records in it (in the B<span class="s181">+</span>-tree–key order) to create space for the new record. The split propagates up the B<span class="s181">+</span>-tree in the normal fashion. When we delete a record, the system ﬁrst removes it from the block containing it. If a block <i>B </i>becomes less than half full as a result, the records in <i>B </i>are redistributed with the records in an adjacent block <i>B</i><span class="s181">′</span>. Assuming ﬁxed-sized records, each block will hold at least one-half as many records as the maximum that it can hold. The system updates the nonleaf nodes of the B<span class="s181">+</span>-tree in the usual fashion.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When we use a B<span class="s181">+</span>-tree for ﬁle organization, space utilization is particularly impor- tant, since the space occupied by the records is likely to be much more than the space occupied by keys and pointers. We can improve the utilization of space in a B<span class="s181">+</span>-tree by involving more sibling nodes in redistribution during splits and merges. The technique is applicable to both leaf nodes and nonleaf nodes, and it works as follows:</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">During insertion, if a node is full, the system attempts to redistribute some of its entries to one of the adjacent nodes, to make space for a new entry. If this attempt fails because the adjacent nodes are themselves full, the system splits the node and divides the entries evenly among one of the adjacent nodes and the two nodes that it obtained by splitting the original node. Since the three nodes together contain one more record</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;text-align: left;">⌋</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">∕<span class="p">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">than can ﬁt in two nodes, each node will be about two-thirds full. More precisely, each</p><p class="s15" style="text-indent: 0pt;text-align: left;">⌊ ⌋</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 59pt;text-indent: 0pt;text-align: center;">node will have at least <span class="s15">⌊</span>2<i>n  </i>entries, where <i>n </i>is the maximum number of entries that</p><p style="text-indent: 0pt;text-align: left;">the node can hold. ( <i>x </i>denotes the greatest integer that is less than or equal to <i>x</i>; that is, we drop the fractional part, if any.)</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">⌋</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">∕<span class="p">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 77pt;text-indent: 0pt;line-height: 13pt;text-align: center;">During deletion of a record, if the occupancy of a node falls below <span class="s15">⌊</span>2<i>n  </i>, the</p><p style="text-indent: 0pt;line-height: 12pt;text-align: left;">system attempts to borrow an entry from one of the sibling nodes. If both sibling nodes</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">⌋</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 12pt;text-align: left;">in the node and in the two siblings evenly between two of the nodes and deletes the third</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">∕<span class="p">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 59pt;text-indent: 0pt;line-height: 13pt;text-align: center;">have <span class="s15">⌊</span>2<i>n  </i>records, instead of borrowing an entry, the system redistributes the entries</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s15" style="text-indent: 0pt;text-align: left;">⌋</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">∕<span class="p">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="padding-top: 5pt;padding-left: 119pt;text-indent: 0pt;line-height: 6pt;text-align: right;">− <span class="p">1,</span></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 6pt;text-align: center;">node. We can use this approach because the total number of entries is 3<span class="s15">⌊</span>2<i>n</i></p><p style="text-indent: 0pt;line-height: 12pt;text-align: left;">which is less than 2<i>n</i>. With three adjacent nodes used for redistribution, each node can</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">∕<span class="p">4</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">entries. In general, if <i>m </i>nodes (<i>m</i><span class="s15">−</span>1 siblings) are involved</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;">in redistribution, each node can be guaranteed to contain at least <span class="s15">⌊</span>(<i>m</i></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 12pt;text-align: left;">1)<i>n</i></p><p style="text-indent: 0pt;text-align: left;"/><p class="s13" style="text-indent: 0pt;line-height: 12pt;text-align: left;">m</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 12pt;text-align: left;">entries.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s15" style="text-indent: 0pt;text-align: left;">⌋</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 12pt;text-indent: 0pt;text-align: center;">be guaranteed to have <span class="s15">⌊</span>3<i>n  </i><span class="s15">⌋                    </span><span class="s353">− ∕</span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">However, the cost of update becomes higher as more sibling nodes are involved in the redistribution.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Note that in a B<span class="s181">+</span>-tree index or ﬁle organization, leaf nodes that are adjacent to each other in the tree may be located at diﬀerent places on disk. When a ﬁle organization is newly created on a set of records, it is possible to allocate blocks that are mostly contiguous on disk to leaf nodes that are contiguous in the tree. Thus, a sequential scan of leaf nodes would correspond to a mostly sequential scan on disk. As insertions and deletions occur on the tree, sequentiality is increasingly lost, and sequential access has to wait for disk seeks increasingly often. An index rebuild may be required to restore sequentiality.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">B<span class="s181">+</span>-tree ﬁle organizations can also be used to store large objects, such as <span class="s44">SQL </span>clobs and blobs, which may be larger than a disk block, and as large as multiple gigabytes. Such large objects can be stored by splitting them into sequences of smaller records that are organized in a B<span class="s181">+</span>-tree ﬁle organization. The records can be sequentially numbered, or numbered by the byte oﬀset of the record within the large object, and the record number can be used as the search key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">14.4.2 Secondary Indices and Record Relocation</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Some ﬁle organizations, such as the B<span class="s181">+</span>-tree ﬁle organization, may change the location of records even when the records have not been updated. As an example, when a leaf node is split in a B<span class="s181">+</span>-tree ﬁle organization, a number of records are moved to a new node. In such cases, all secondary indices that store pointers to the relocated records would have to be updated, even though the values in the records may not have changed. Each leaf node may contain a fairly large number of records, and each of them may be in diﬀerent locations on each secondary index. Thus, a leaf-node split may require tens or even hundreds of <span class="s44">I/O </span>operations to update all aﬀected secondary indices, making it a very expensive operation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A widely used solution for this problem is as follows: In secondary indices, in place of pointers to the indexed records, we store the values of the primary-index search-key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2696.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">attributes. For example, suppose we have a primary index on the attribute <span class="s69">ID </span>of relation <i>instructor</i>; then a secondary index on <i>dept name </i>would store with each department name a list of instructor’s <span class="s69">ID </span>values of the corresponding records, instead of storing pointers to the records.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: right;">Relocation of records because of leaf-node splits then does not require any update on any such secondary index. However, locating a record using the secondary index now requires two steps: First we use the secondary index to ﬁnd the primary-index search-key values, and then we use the primary index to ﬁnd the corresponding records. This approach thus greatly reduces the cost of index update due to ﬁle reorganiza-</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">tion, although it increases the cost of accessing data using a secondary index.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">14.4.3 Indexing Strings</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Creating B<span class="s181">+</span>-tree indices on string-valued attributes raises two problems. The ﬁrst prob- lem is that strings can be of variable length. The second problem is that strings can be long, leading to a low fanout and a correspondingly increased tree height.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">With variable-length search keys, diﬀerent nodes can have diﬀerent fanouts even if they are full. A node must then be split if it is full, that is, there is no space to add a new entry, regardless of how many search entries it has. Similarly, nodes can be merged or entries redistributed depending on what fraction of the space in the nodes is used, instead of being based on the maximum number of entries that the node can hold.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The fanout of nodes can be increased by using a technique called <span class="s63">preﬁx compres- sion</span>. With preﬁx compression, we do not store the entire search key value at nonleaf nodes. We only store a preﬁx of each search key value that is suﬃcient to distinguish between the key values in the subtrees that it separates. For example, if we had an index on names, the key value at a nonleaf node could be a preﬁx of a name; it may suﬃce to store “Silb” at a nonleaf node, instead of the full “Silberschatz” if the closest values in the two subtrees that it separates are, say, “Silas” and “Silver” respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">14.4.4 Bulk Loading of B<span class="s331">+</span>-Tree Indices</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">As we saw earlier, insertion of a record in a B<span class="s181">+</span>-tree requires a number of <span class="s44">I/O </span>operations that in the worst case is proportional to the height of the tree, which is usually fairly small (typically ﬁve or less, even for large relations).</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Now consider the case where a B<span class="s181">+</span>-tree is being built on a large relation. Suppose the relation is signiﬁcantly larger than main memory, and we are constructing a non- clustering index on the relation such that the index is also larger than main memory. In this case, as we scan the relation and add entries to the B<span class="s181">+</span>-tree, it is quite likely that each leaf node accessed is not in the database buﬀer when it is accessed, since there is no particular ordering of the entries. With such randomly ordered accesses to blocks, each time an entry is added to the leaf, a disk seek will be required to fetch the block containing the leaf node. The block will probably be evicted from the disk buﬀer before another entry is added to the block, leading to another disk seek to write the block back</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">to disk. Thus, a random read and a random write operation may be required for each entry inserted.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">For example, if the relation has 100 million records, and each <span class="s44">I/O </span>operation takes about 10 milliseconds on a magnetic disk, it would take at least 1 million seconds to build the index, counting only the cost of reading leaf nodes, not even counting the cost of writing the updated nodes back to disk. This is clearly a very large amount of time; in contrast, if each record occupies 100 bytes, and the disk subsystem can transfer data at 50 megabytes per second, it would take just 200 seconds to read the entire relation. Insertion of a large number of entries at a time into an index is referred to as <span class="s63">bulk loading </span>of the index. An eﬃcient way to perform bulk loading of an index is as follows: First, create a temporary ﬁle containing index entries for the relation, then sort the ﬁle on the search key of the index being constructed, and ﬁnally scan the sorted ﬁle and insert the entries into the index. There are eﬃcient algorithms for sorting large relations, described later in Section 15.4, which can sort even a large ﬁle with an <span class="s44">I/O </span>cost comparable to that of reading the ﬁle a few times, assuming a reasonable amount</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">of main memory is available.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There is a signiﬁcant beneﬁt to sorting the entries before inserting them into the B<span class="s181">+</span>-tree. When the entries are inserted in sorted order, all entries that go to a particular leaf node will appear consecutively, and the leaf needs to be written out only once; nodes will never have to be read from disk during bulk load, if the B<span class="s181">+</span>-tree was empty to start with. Each leaf node will thus incur only one <span class="s44">I/O </span>operation even though many entries may be inserted into the node. If each leaf contains 100 entries, the leaf level will contain 1 million nodes, resulting in only 1 million <span class="s44">I/O </span>operations for creating the leaf level. Even these <span class="s44">I/O </span>operations can be expected to be sequential, if succes- sive leaf nodes are allocated on successive disk blocks, and few disk seeks would be required. With magnetic disks, 1 millisecond per block is a reasonable estimate for mostly sequential <span class="s44">I/O </span>operations, in contrast to 10 milliseconds per block for random <span class="s44">I/O </span>operations.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We shall study the cost of sorting a large relation later, in Section 15.4, but as a rough estimate, the index which would have otherwise taken up to 1,000,000 seconds to build on a magnetic disk can be constructed in well under 1000 seconds by sorting the entries before inserting them into the B<span class="s181">+</span>-tree.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">If the B<span class="s181">+</span>-tree is initially empty, it can be constructed faster by building it bottom- up, from the leaf level, instead of using the usual insert procedure. In <span class="s63">bottom-up B</span><span class="s330">+</span><span class="s63">- tree construction</span>, after sorting the entries as we just described, we break up the sorted entries into blocks, keeping as many entries in a block as can ﬁt in the block; the resulting blocks form the leaf level of the B<span class="s181">+</span>-tree. The minimum value in each block, along with the pointer to the block, is used to create entries in the next level of the B<span class="s181">+</span>- tree, pointing to the leaf blocks. Each further level of the tree is similarly constructed using the minimum values associated with each node one level below, until the root is created. We leave details as an exercise for the reader.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most database systems implement eﬃcient techniques based on sorting of entries, and bottom-up construction, when creating an index on a relation, although they use</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:265.928pt" cellspacing="0"><tr style="height:11pt"><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:4pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:29pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s199" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Einstein</p></td><td style="width:4pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:3pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:16pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s199" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Katz</p></td><td style="width:5pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:4pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s199" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Singh</p></td><td style="width:4pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="482" height="96" alt="image" src="Image_2697.png"/></span></p><p class="s312" style="padding-left: 4pt;text-indent: -4pt;line-height: 110%;text-align: left;">Einstein record</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">Katz  Singh</p><p class="s312" style="text-indent: 0pt;text-align: left;">record  record</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Wu</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Srinivasan</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Mozart</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Kim</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Gold</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">El Said</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Crick</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Caliﬁeri</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Brandt</p><p style="text-indent: 0pt;text-align: left;"/><p class="s312" style="padding-left: 121pt;text-indent: 0pt;line-height: 110%;text-align: right;">Brandt record</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s312" style="padding-left: 11pt;text-indent: -4pt;line-height: 110%;text-align: left;">Caliﬁeri record</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s312" style="padding-top: 6pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">... and so on for other records...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 14.23 </span>B-tree equivalent of B<span class="s237">+</span>-tree in Figure 14.9.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">the normal insertion procedure when tuples are added one at a time to a relation with an existing index. Some database systems recommend that if a very large number of tuples are added at once to an already existing relation, indices on the relation (other than any index on the primary key) should be dropped, and then re-created after the tuples are inserted, to take advantage of eﬃcient bulk-loading techniques.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">14.4.5 B-Tree Index Files</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s63">B-tree indices </span>are similar to B<span class="s181">+</span>-tree indices. The primary distinction between the two approaches is that a B-tree eliminates the redundant storage of search-key values. In the B<span class="s181">+</span>-tree of Figure 14.9, the search keys “Einstein”, “Gold”, “Mozart”, and “Srinivasan” appear in nonleaf nodes, in addition to appearing in the leaf nodes. Every search-key value appears in some leaf node; several are repeated in nonleaf nodes.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A B-tree allows search-key values to appear only once (if they are unique), unlike a B<span class="s181">+</span>-tree, where a value may appear in a nonleaf node, in addition to appearing in a leaf node. Figure 14.23 shows a B-tree that represents the same search keys as the B<span class="s181">+</span>-tree of Figure 14.9. Since search keys are not repeated in the B-tree, we may be able to store the index in fewer tree nodes than in the corresponding B<span class="s181">+</span>-tree index. However, since search keys that appear in nonleaf nodes appear nowhere else in the B-tree, we are forced to include an additional pointer ﬁeld for each search key in a nonleaf node. These additional pointers point to either ﬁle records or buckets for the associated search key.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is worth noting that many database system manuals, articles in industry litera- ture, and industry professionals use the term B-tree to refer to the data structure that we call the B<span class="s181">+</span>-tree. In fact, it would be fair to say that in current usage, the term B-tree is assumed to be synonymous with B<span class="s181">+</span>-tree. However, in this book we use the terms B-tree and B<span class="s181">+</span>-tree as they were originally deﬁned, to avoid confusion between the two data structures.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A generalized B-tree leaf node appears in Figure 14.24a; a nonleaf node appears in Figure 14.24b. Leaf nodes are the same as in B<span class="s181">+</span>-trees. In nonleaf nodes, the pointers <i>P</i><span class="s145">i </span>are the tree pointers that we used also for B<span class="s181">+</span>-trees, while the pointers <i>B</i><span class="s145">i </span>are bucket or ﬁle-record pointers. In the generalized B-tree in the ﬁgure, there are <i>n </i><span class="s15">− </span>1 keys in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:149.413pt" cellspacing="0"><tr style="height:18pt"><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 2pt;padding-left: 12pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">P<span class="s354">1</span></p></td><td style="width:35pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 12pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">K<span class="s354">1</span></p></td><td style="width:35pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 12pt;padding-right: 11pt;text-indent: 0pt;text-align: center;">P<span class="s354">2</span></p></td><td style="width:34pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s319" style="padding-top: 2pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">…</p></td><td style="width:35pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s355" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">P<span class="s356">n</span><span class="s342">-1</span></p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s355" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">K<span class="s356">n</span><span class="s342">-1</span></p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 2pt;padding-left: 13pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">P<span class="s357">n</span></p></td></tr></table><p class="s33" style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: center;">(a)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:114.675pt" cellspacing="0"><tr style="height:18pt"><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">P<span class="s354">1</span></p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 7pt;padding-right: 8pt;text-indent: 0pt;text-align: center;">B<span class="s354">1</span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">K<span class="s354">1</span></p></td><td style="width:23pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">P<span class="s354">2</span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">B<span class="s354">2</span></p></td><td style="width:23pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">K<span class="s354">2</span></p></td><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s319" style="padding-top: 2pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">…</p></td><td style="width:32pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s355" style="padding-top: 4pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">P<span class="s356">m</span><span class="s342">-1</span></p></td><td style="width:37pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s355" style="padding-top: 4pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">B<span class="s356">m</span><span class="s342">-1</span></p></td><td style="width:37pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s355" style="padding-top: 4pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">K<span class="s356">m</span><span class="s342">-1</span></p></td><td style="width:39pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s134" style="padding-top: 4pt;padding-left: 14pt;padding-right: 13pt;text-indent: 0pt;text-align: center;">P<span class="s357">m</span></p></td></tr></table><p class="s33" style="padding-top: 6pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">(b)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 14.24 <span class="s74">Typical nodes of a B-tree. (a) Leaf node. (b) Nonleaf node.</span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">the leaf node, but there are <i>m </i><span class="s15">− </span>1 keys in the nonleaf node. This discrepancy occurs</p><p class="s13" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;line-height: 72%;text-align: justify;"><span class="p">because nonleaf nodes must include pointers </span>B<span class="s145">i</span><span class="p">, thus reducing the number of search keys that can be held in these nodes. Clearly, </span>m <span class="s83">&lt; </span>n<span class="p">, but the exact relationship between </span>m <span class="p">and </span>n <span class="p">depends on the relative size of search keys and pointers.</span></p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">The number of nodes accessed in a lookup in a B-tree depends on where the search key is located. A lookup on a B<span class="s181">+</span>-tree requires traversal of a path from the root of the tree to some leaf node. In contrast, it is sometimes possible to ﬁnd the desired value in a B-tree before reaching a leaf node. However, roughly <i>n </i>times as many keys are stored in the leaf level of a B-tree as in the nonleaf levels, and, since <i>n </i>is typically large, the beneﬁt of ﬁnding certain values early is relatively small. Moreover, the fact that fewer search keys appear in a nonleaf B-tree node, compared to B<span class="s181">+</span>-trees, implies that a B-tree has a smaller fanout and therefore may have depth greater than that of the corresponding B<span class="s181">+</span>-tree. Thus, lookup in a B-tree is faster for some search keys but slower for others, although, in general, lookup time is still proportional to the logarithm of the number of search keys.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Deletion in a B-tree is more complicated. In a B<span class="s181">+</span>-tree, the deleted entry always appears in a leaf. In a B-tree, the deleted entry may appear in a nonleaf node. The proper value must be selected as a replacement from the subtree of the node containing the deleted entry. Speciﬁcally, if search key <i>K</i><span class="s97">i </span>is deleted, the smallest search key appearing</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 78%;text-align: justify;"><span class="p">in the subtree of pointer </span>P<span class="s97">i </span><span class="s136">+ </span><span class="s130">1 </span><span class="s94">must be moved to the ﬁeld formerly occupied by </span>K<span class="s97">i</span><span class="p">.</span></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Further actions need to be taken if the leaf node now has too few entries. In contrast,</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">insertion in a B-tree is only slightly more complicated than is insertion in a B<span class="s181">+</span>-tree.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The space advantages of B-trees are marginal for large indices and usually do not outweigh the disadvantages that we have noted. Thus, pretty much all database-system implementations use the B<span class="s181">+</span>-tree data structure, even if (as we discussed earlier) they refer to the data structure as a B-tree.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">14.4.6 Indexing on Flash Storage</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In our description of indexing so far, we have assumed that data are resident on mag- netic disks. Although this assumption continues to be true for the most part, ﬂash stor- age capacities have grown signiﬁcantly, and the cost of ﬂash storage per gigabyte has dropped correspondingly, and ﬂash based <span class="s44">SSD </span>storage has now replaced magnetic-disk storage for many applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Standard B<span class="s181">+</span>-tree indices can continue to be used even on <span class="s44">SSD</span>s, with acceptable update performance and signiﬁcantly improved lookup performance compared to disk storage.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Flash storage is structured as pages, and the B<span class="s181">+</span>-tree index structure can be used with ﬂash based <span class="s44">SSD</span>s. <span class="s44">SSD</span>s provide much faster random <span class="s44">I/O </span>operations than magnetic disks, requiring only around 20 to 100 microseconds for a random page read, instead of about 5 to 10 milliseconds with magnetic disks. Thus, lookups run much faster with data on <span class="s44">SSDs</span>, compared to data on magnetic disks.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The performance of write operations is more complicated with ﬂash storage. An important diﬀerence between ﬂash storage and magnetic disks is that ﬂash storage does not permit in-place updates to data at the physical level, although it appears to do so logically. Every update turns into a copy+write of an entire ﬂash-storage page, requiring the old copy of the page to be erased subsequently. A new page can be written in 20 to 100 microseconds, but eventually old pages need to be erased to free up the pages for further writes. Erases are done at the level of blocks containing multiple pages, and a block erase takes 2 to 5 milliseconds.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The optimum B<span class="s181">+</span>-tree node size for ﬂash storage is smaller than that with magnetic disk, since ﬂash pages are smaller than disk blocks; it makes sense for tree-node sizes to match to ﬂash pages, since larger nodes would lead to multiple page writes when a node is updated. Although smaller pages lead to taller trees and more <span class="s44">I/O </span>operations to access data, random page reads are so much faster with ﬂash storage that the overall impact on read performance is quite small.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Although random <span class="s44">I/O </span>is much cheaper with <span class="s44">SSD</span>s than with magnetic disks, bulk loading still provides signiﬁcant performance beneﬁts, compared to tuple-at-a-time in- sertion, with <span class="s44">SSD</span>s. In particular, bottom-up construction reduces the number of page writes compared to tuple-at-a-time insertion, even if the entries are sorted on the search key. Since page writes on ﬂash cannot be done in place and require relatively expen- sive block erases at a later point in time, the reduction of number of page writes with bottom-up B<span class="s181">+</span>-tree construction provides signiﬁcant performance beneﬁts.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Several extensions and alternatives to B<span class="s181">+</span>-trees have been proposed for ﬂash stor- age, with a focus on reducing the number of erase operations that result due to page rewrites. One approach is to add buﬀers to internal nodes of B<span class="s181">+</span>-trees and record up- dates temporarily in buﬀers at higher levels, pushing the updates down to lower levels lazily. The key idea is that when a page is updated, multiple updates are applied to- gether, reducing the number of page writes per update. Another approach creates mul- tiple trees and merges them; the log-structured merge tree and its variants are based on this idea. In fact, both these approaches are also useful for reducing the cost of writes on magnetic disks; we outline both these approaches in Section 14.8.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">14.4.7 Indexing in Main Memory</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">Main memory today is large and cheap enough that many organizations can aﬀord to buy enough main memory to ﬁt all their operational data in-memory. B<span class="s181">+</span>-trees can</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark280">be used to index in-memory data, with no change to the structure. However, some optimizations are possible.</a><a name="bookmark313">&zwnj;</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">First, since memory is costlier than disk space, internal data structures in main memory databases have to be designed to reduce space requirements. Techniques that we saw in Section 14.4.1 to improve B<span class="s181">+</span>-tree storage utilization can be used to reduce memory usage for in-memory B<span class="s181">+</span>-trees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Data structures that require traversal of multiple pointers are acceptable for in- memory data, unlike in the case of disk-based data, where the cost of the <span class="s44">I/O</span>s to tra- verse multiple pages would be excessively high. Thus, tree structures in main memory databases can be relatively deep, unlike B<span class="s181">+</span>-trees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The speed diﬀerence between cache memory and main memory, and the fact that data are transferred between main memory and cache in units of a <i>cache-line </i>(typically about 64 bytes), results in a situation where the relationship between cache and main memory is not dissimilar to the relationship between main memory and disk (although with smaller speed diﬀerences). When reading a memory location, if it is present in cache the CPU can complete the read in 1 or 2 nanoseconds, whereas a cache miss results in about 50 to 100 nanoseconds of delay to read data from main memory.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">B<span class="s181">+</span>-trees with small nodes that ﬁt in a cache line have been found to provide very good performance with in-memory data. Such B<span class="s181">+</span>-trees allow index operations to be completed with far fewer cache misses than tall, skinny tree structures such as binary trees, since each node traversal is likely to result in a cache miss. Compared to B<span class="s181">+</span>-trees with nodes that match cache lines, trees with large nodes also tend to have more cache misses since locating data within a node requires either a full scan of the node content, spanning multiple cache lines, or a binary search, which also results in multiple cache misses.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For databases where data do not ﬁt entirely in memory, but frequently used data are often memory resident, the following idea is used to create B<span class="s181">+</span>-tree structures that oﬀer good performance on disk as well as in-memory. Large nodes are used to optimize disk-based access, but instead of treating data in a node as single large array of keys and pointers, the data within a node are structured as a tree, with smaller nodes that match the size of a cache line. Instead of scanning data linearly or using binary search within a node, the tree-structure within the large B<span class="s181">+</span>-tree node is used to access the data with a minimal number of cache misses.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part263.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part265.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
