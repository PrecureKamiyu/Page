<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Data Integrity and Protection</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part492.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part494.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 147pt;text-indent: 0pt;text-align: left;">Data Integrity and Protection</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Beyond the basic advances found in the file systems we have studied thus far, a number of features are worth studying. In this chapter, we focus on reliability once again (having previously studied storage system reliabil- ity in the RAID chapter). Specifically, how should a file system or storage system ensure that data is safe, given the unreliable nature of modern storage devices?</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">This general area is referred to as <b>data integrity </b>or <b>data protection</b>. Thus, we will now investigate techniques used to ensure that the data you put into your storage system is the same when the storage system returns it to you.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>E<span class="s7">NSURE </span>D<span class="s7">ATA </span>I<span class="s7">NTEGRITY</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">How should systems ensure that the data written to storage is pro- tected? What techniques are required? How can such techniques be made efficient, with both low space and time overheads?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part494.htm">44.1 Disk Failure Modes</a><a class="toc0" href="part495.htm">44.2 Handling Latent Sector Errors</a><a class="toc0" href="part496.htm">44.3 Detecting Corruption: The Checksum</a><a class="toc1" href="part497.htm">Common Checksum Functions</a><a class="toc1" href="part498.htm">Checksum Layout</a><a class="toc0" href="part499.htm">44.4 Using Checksums</a><a class="toc0" href="part500.htm">44.5 A New Problem: Misdirected Writes</a><a class="toc0" href="part501.htm">44.6 One Last Problem: Lost Writes</a><a class="toc0" href="part502.htm">44.7 Scrubbing</a><a class="toc0" href="part503.htm">44.8 Overheads Of Checksumming</a><a class="toc0" href="part504.htm">44.9 Summary</a><a class="toc0" href="part505.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part492.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part494.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
