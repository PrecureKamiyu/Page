<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>5.4   Recursive Queries</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part120.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part122.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">5.4   <span style=" color: #00AEEF;">Recursive Queries</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Consider the instance of the relation <i>prereq </i>shown in Figure 5.13 containing informa- tion about the various courses oﬀered at the university and the prerequisite for each course.<span class="s76">6</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Suppose now that we want to ﬁnd out which courses are a prerequisite whether di- rectly or indirectly, for a speciﬁc course— say, CS-347. That is, we wish to ﬁnd a course</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_1084.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">6<span class="s78">This instance of </span><span class="s111">prereq </span><span class="s80">diﬀers from that used earlier for reasons that will become apparent as we use it to explain recursive queries.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">that is a direct prerequisite for CS-347, or is a prerequisite for a course that is a prereq- uisite for CS-347, and so on.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Thus, since CS-319 is a prerequisite for CS-347 and CS-315 and CS-101 are pre- requisites for CS-319, CS-315 and CS-101 are also prerequisites (indirectly) for CS-347. Then, since CS-190 is a prerequisite for CS-315, CS-190 is another indirect prerequisite for CS-347. Continuing, we see that CS-101 is a prerequisite for CS-190, but note that CS-101 was already added to the list of prerequisites for CS-347. In a real university, rather than our example, we would not expect such a complex prerequisite structure, but this example serves to show some of the situations that might possibly arise.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s63">transitive closure </span>of the relation <i>prereq </i>is a relation that contains all pairs (<i>cid</i>, <i>pre</i>) such that <i>pre </i>is a direct or indirect prerequisite of <i>cid</i>. There are numerous ap- plications that require computation of similar transitive closures on <span class="s63">hierarchies</span>. For instance, organizations typically consist of several levels of organizational units. Ma- chines consist of parts that in turn have subparts, and so on; for example, a bicycle may have subparts such as wheels and pedals, which in turn have subparts such as tires, rims, and spokes. Transitive closure can be used on such hierarchies to ﬁnd, for example, all parts in a bicycle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">5.4.1 Transitive Closure Using Iteration</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1085.png"/></span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">One way to write the preceding query is to use iteration: First ﬁnd those courses that are a direct prerequisite of CS-347, then those courses that are a prerequisite of all the courses under the ﬁrst set, and so on. This iterative process continues until we reach an iteration where no courses are added. Figure 5.14 shows a function <i>findAllPrereqs</i>(<i>cid</i>) to carry out this task; the function takes the <i>course id </i>of the course as a parameter (<i>cid</i>), computes the set of all direct and indirect prerequisites of that course, and returns the set.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;">The procedure uses three temporary tables:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1086.png"/></span></p><p class="s39" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s13">c prereq</span><span class="p">: stores the set of tuples to be returned.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1087.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1088.png"/></span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s13">new c prereq</span><span class="p">: stores the courses found in the previous iteration.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s13">temp</span><span class="p">: used as temporary storage while sets of courses are manipulated.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Note that <span class="s44">SQL </span>allows the creation of temporary tables using the command <span class="s63">create tem- porary table</span>; such tables are available only within the transaction executing the query and are dropped when the transaction ﬁnishes. Moreover, if two instances of <i>findAll- Prereqs </i>run concurrently, each gets its own copy of the temporary tables; if they shared a copy, their result could be incorrect.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1089.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1090.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1091.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1092.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1093.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1094.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1095.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The procedure inserts all direct prerequisites of course <i>cid </i>into <i>new c prereq </i>before the <b>repeat </b>loop. The <b>repeat </b>loop ﬁrst adds all courses in <i>new c prereq </i>to <i>c prereq</i>. Next, it computes prerequisites of all those courses in <i>new c prereq</i>, except those that have already been found to be prerequisites of <i>cid</i>, and stores them in the temporary table</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-left: 131pt;text-indent: 0pt;text-align: left;"><b>create function </b>findAllPrereqs<span class="p">(</span>cid <b>varchar(8)</b><span class="p">)</span></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;">– – Finds all courses that are prerequisite (directly or indirectly) for <i>cid</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1096.png"/></span></p><p class="s46" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">returns table <span class="p">(</span><i>course id </i>varchar<span class="p">(8))</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1098.png"/></span></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;">–– The relation <i>prereq</i>(<i>course id</i>, <i>prereq id</i>) speciﬁes which course is</p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;">– – directly a prerequisite for another course.</p><p class="s46" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">begin</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1099.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1100.png"/></span></p><p class="s13" style="padding-left: 153pt;text-indent: 0pt;text-align: left;"><b>create temporary table </b>c prereq <span class="p">(</span>course id <b>varchar(8)</b><span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1101.png"/></span></p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;">–– table <i>c prereq </i>stores the set of courses to be returned</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1102.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1103.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1104.png"/></span></p><p class="s13" style="padding-left: 153pt;text-indent: 0pt;text-align: left;"><b>create temporary table </b>new c prereq <span class="p">(</span>course id <b>varchar(8)</b><span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1105.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1106.png"/></span></p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;">–– table <i>new c prereq </i>contains courses found in the previous iteration</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1107.png"/></span></p><p class="s13" style="padding-left: 153pt;text-indent: 0pt;text-align: left;"><b>create temporary table </b>temp <span class="p">(</span>course id <b>varchar</b><span class="p">(8));</span></p><p style="padding-left: 174pt;text-indent: 0pt;text-align: left;">–– table <i>temp </i>is used to store intermediate results</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1109.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1110.png"/></span></p><p class="s46" style="padding-left: 174pt;text-indent: -21pt;text-align: left;">insert into <i>new c prereq </i>select <i>prereq id </i>from <i>prereq</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1111.png"/></span></p><p class="s13" style="padding-left: 174pt;text-indent: 0pt;text-align: left;"><b>where </b>course id <span class="p">= </span>cid<span class="p">;</span></p><p class="s46" style="padding-left: 153pt;text-indent: 0pt;text-align: left;">repeat</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1112.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1113.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1114.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1115.png"/></span></p><p class="s46" style="padding-left: 195pt;text-indent: -21pt;text-align: left;">insert into <i>c prereq </i>select <i>course id </i>from <i>new c prereq</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 174pt;text-indent: 0pt;text-align: left;">insert into <i>temp</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1116.png"/></span></p><p style="padding-left: 195pt;text-indent: 0pt;text-align: left;">(<b>select </b><i>prereq</i>.<i>prereq id</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1117.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1118.png"/></span></p><p class="s46" style="padding-left: 217pt;text-indent: 0pt;text-align: left;">from <i>new c prereq, prereq</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1119.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1120.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1121.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1122.png"/></span></p><p class="s13" style="padding-left: 217pt;text-indent: 0pt;text-align: left;"><b>where </b>new c prereq<span class="p">.</span>course id <span class="p">= </span>prereq<span class="p">.</span>course id</p><p style="padding-left: 195pt;text-indent: 0pt;text-align: left;">)</p><p class="s46" style="padding-left: 195pt;text-indent: 0pt;text-align: left;">except <span class="p">(</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1123.png"/></span></p><p class="s46" style="padding-left: 217pt;text-indent: 0pt;text-align: left;">select <i>course id</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1124.png"/></span></p><p class="s46" style="padding-left: 217pt;text-indent: 0pt;text-align: left;">from <i>c prereq</i></p><p style="padding-left: 195pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1125.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1126.png"/></span></p><p class="s46" style="padding-left: 174pt;text-indent: 0pt;text-align: left;">delete from <i>new c prereq</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1128.png"/></span></p><p class="s46" style="padding-left: 174pt;text-indent: 0pt;text-align: left;">insert into <i>new c prereq</i></p><p class="s46" style="padding-left: 195pt;text-indent: 0pt;text-align: left;">select * from <i>temp</i><span class="p">;</span></p><p class="s46" style="padding-left: 174pt;text-indent: 0pt;text-align: left;">delete from <i>temp</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">end</p><p class="s46" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">until not exists <span class="p">(</span>select * from <i>new c prereq</i><span class="p">)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1129.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1130.png"/></span></p><p class="s46" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">end repeat<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1131.png"/></span></p><p class="s46" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">return table <i>c prereq</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">Figure 5.14 <span class="s74">Finding all prerequisites of a course.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:134.944pt" cellspacing="0"><tr style="height:14pt"><td style="width:91pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Iteration Number</p></td><td style="width:187pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Tuples in c1</p></td></tr><tr style="height:13pt"><td style="width:91pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">0</p></td><td style="width:187pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:91pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1</p></td><td style="width:187pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CS-319)</p></td></tr><tr style="height:13pt"><td style="width:91pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2</p></td><td style="width:187pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CS-319), (CS-315), (CS-101)</p></td></tr><tr style="height:13pt"><td style="width:91pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3</p></td><td style="width:187pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CS-319), (CS-315), (CS-101), (CS-190)</p></td></tr><tr style="height:13pt"><td style="width:91pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4</p></td><td style="width:187pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">(CS-319), (CS-315), (CS-101), (CS-190)</p></td></tr><tr style="height:14pt"><td style="width:91pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">5</p></td><td style="width:187pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">done</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 5.15 <span class="s74">Prerequisites of CS-347 in iterations of function </span><span class="s91">findAllPrereqs.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1132.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1133.png"/></span></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">temp<span class="p">. Finally, it replaces the contents of </span>new c prereq <span class="p">with the contents of </span>temp<span class="p">. The</span></p><p class="s46" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">repeat <span class="p">loop terminates when it ﬁnds no new (indirect) prerequisites.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1134.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1135.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1136.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 5.15 shows the prerequisites that are found in each iteration when the proce- dure is called for CS-347. While <i>c prereq </i>could have been updated in one <span class="s44">SQL </span>statement, we need ﬁrst to construct <i>new c prereq </i>so we can tell when nothing is being added in the (ﬁnal) iteration.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">The use of the <b>except </b>clause in the function ensures that the function works even in the (abnormal) case where there is a cycle of prerequisites. For example, if <i>a </i>is a prerequisite for <i>b</i>, <i>b </i>is a prerequisite for <i>c</i>, and <i>c </i>is a prerequisite for <i>a</i>, there is a cycle. While cycles may be unrealistic in course prerequisites, cycles are possible in other applications. For instance, suppose we have a relation <i>flights</i>(<i>to, from</i>) that says which cities can be reached from which other cities by a direct ﬂight. We can write code similar to that in the <i>findAllPrereqs </i>function, to ﬁnd all cities that are reachable by a sequence of one or more ﬂights from a given city. All we have to do is to replace <i>prereq </i>with <i>flight </i>and replace attribute names correspondingly. In this situation, there can be cycles of reachability, but the function would work correctly since it would eliminate</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">cities that have already been seen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">5.4.2 Recursion in SQL</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">It is rather inconvenient to specify transitive closure using iteration. There is an alter- native approach, using recursive view deﬁnitions, that is easier to use.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can use recursion to deﬁne the set of courses that are prerequisites of a par- ticular course, say CS-347, as follows. The courses that are prerequisites (directly or indirectly) of CS-347 are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Courses that are prerequisites for CS-347.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: left;">• <span class="s40">Courses that are prerequisites for those courses that are prerequisites (directly or indirectly) for CS-347.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Note that case 2 is recursive, since it deﬁnes the set of courses that are prerequisites of CS-347 in terms of the set of courses that are prerequisites of CS-347. Other examples</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1137.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1138.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1139.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1140.png"/></span></p><p style="padding-top: 4pt;padding-left: 189pt;text-indent: 0pt;text-align: left;"><b>with recursive </b><i>rec prereq</i>(<i>course id</i>, <i>prereq id</i>) <b>as </b>(</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1141.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1142.png"/></span></p><p class="s13" style="padding-left: 232pt;text-indent: 0pt;text-align: left;"><b>select </b>course id<span class="p">, </span>prereq id</p><p class="s46" style="padding-left: 232pt;text-indent: 0pt;text-align: left;">from <i>prereq</i></p><p class="s46" style="padding-left: 210pt;text-indent: 0pt;text-align: left;">union</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1143.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1144.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1145.png"/></span></p><p class="s13" style="padding-left: 232pt;text-indent: 0pt;text-align: left;"><b>select </b>rec prereq<span class="p">.</span>course id<span class="p">, </span>prereq<span class="p">.</span>prereq id</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1146.png"/></span></p><p class="s13" style="padding-left: 232pt;text-indent: 0pt;text-align: left;"><b>from </b>rec prereq<span class="p">, </span>prereq</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1147.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1148.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1149.png"/></span></p><p class="s13" style="padding-left: 232pt;text-indent: 0pt;text-align: left;"><b>where </b>rec prereq<span class="p">.</span>prereq id <span class="s15">= </span>prereq<span class="p">.</span>course id</p><p style="padding-left: 210pt;text-indent: 0pt;text-align: left;">)</p><p class="s46" style="padding-left: 189pt;text-indent: 0pt;text-align: left;">select <span class="s15">∗</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1150.png"/></span></p><p class="s46" style="padding-left: 189pt;text-indent: 0pt;text-align: left;">from <i>rec prereq</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1151.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 226pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.16 </span>Recursive query in <span class="s157">SQL</span>.</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">of transitive closure, such as ﬁnding all subparts (direct or indirect) of a given part can also be deﬁned in a similar manner, recursively.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL </span>standard supports a limited form of recursion, using the <b>with recursive </b>clause, where a view (or temporary view) is expressed in terms of itself. Recursive queries can be used, for example, to express transitive closure concisely. Recall that the <b>with </b>clause is used to deﬁne a temporary view whose deﬁnition is available only to the query in which it is deﬁned. The additional keyword <b>recursive </b>speciﬁes that the view is recursive.<span class="s76">7</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">For example, we can ﬁnd every pair (<i>cid</i>,<i>pre</i>) such that <i>pre </i>is directly or indirectly a prerequisite for course <i>cid</i>, using the recursive <span class="s44">SQL </span>view shown in Figure 5.16.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1152.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Any recursive view must be deﬁned as the union<span class="s76">8</span> of two subqueries: a <span class="s63">base query </span>that is nonrecursive and a <span class="s63">recursive query </span>that uses the recursive view. In the example in Figure 5.16, the base query is the select on <i>prereq </i>while the recursive query computes the join of <i>prereq </i>and <i>rec prereq</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1153.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The meaning of a recursive view is best understood as follows: First compute the base query and add all the resultant tuples to the recursively deﬁned view relation <i>rec prereq </i>(which is initially empty). Next compute the recursive query using the current contents of the view relation, and add all the resulting tuples back to the view relation. Keep repeating the above step until no new tuples are added to the view relation. The resultant view relation instance is called a <span class="s63">fixed point </span>of the recursive view deﬁnition. (The term “ﬁxed” refers to the fact that there is no further change.) The view relation is thus deﬁned to contain exactly the tuples in the ﬁxed-point instance.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Applying this logic to our example, we ﬁrst ﬁnd all direct prerequisites of each course by executing the base query. The recursive query adds one more level of courses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_1154.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;line-height: 10pt;text-align: left;">7<span class="s78">Some systems treat the </span><span class="s79">recursive </span><span class="s80">keyword as optional; others disallow it.</span></p><p class="s77" style="padding-left: 119pt;text-indent: 0pt;line-height: 10pt;text-align: left;">8<span class="s78">Some systems, notably Oracle, require use of </span><span class="s79">union all</span><span class="s80">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">in each iteration, until the maximum depth of the course-prereq relationship is reached. At this point no new tuples are added to the view, and a ﬁxed point is reached.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1155.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1156.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1157.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1158.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To ﬁnd the prerequisites of a speciﬁc course, such as CS-347, we can modify the outer level query by adding a <b>where </b>clause “<b>where </b><i>rec prereq.course id </i>= ‘CS-347‘”. One way to evaluate the query with the selection is to compute the full contents of <i>rec prereq </i>using the iterative technique, and then select from this result only those tuples whose <i>course id </i>is CS-347. However, this would result in computing (course, prerequisite) pairs for all courses, all of which are irrelevant except for those for the course CS-347. In fact the database system is not required to use this iterative technique to compute the full result of the recursive query and then perform the selection. It may get the same result using other techniques that may be more eﬃcient, such as that used in the function <i>findAllPrereqs </i>which we saw earlier. See the bibliographic notes for references to more information on this topic.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There are some restrictions on the recursive query in a recursive view; speciﬁcally, the query must be <span class="s63">monotonic</span>, that is, its result on a view relation instance <i>V</i><span class="s98">1</span> must be a superset of its result on a view relation instance <i>V</i><span class="s98">2</span> if <i>V</i><span class="s98">1</span> is a superset of <i>V</i><span class="s98">2</span>. Intuitively, if more tuples are added to the view relation, the recursive query must return at least the same set of tuples as before, and possibly return additional tuples.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In particular, recursive queries may not use any of the following constructs, since they would make the query nonmonotonic:</p><p class="s39" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Aggregation on the recursive view.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s46">not exists </span><span class="p">on a subquery that uses the recursive view.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s40">Set diﬀerence (</span><span class="s46">except</span><span class="p">) whose right-hand side uses the recursive view.</span></p><p class="s13" style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="p">For instance, if the recursive query was of the form </span>r <span class="s15">− </span>v<span class="p">, where </span>v <span class="p">is the recursive view, if we add a tuple to </span>v<span class="p">, the result of the query can become smaller; the query is therefore not monotonic.</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The meaning of recursive views can be deﬁned by the iterative procedure as long as the recursive query is monotonic; if the recursive query is nonmonotonic, the meaning of the view is hard to deﬁne. <span class="s44">SQL </span>therefore requires the queries to be monotonic. Recur- sive queries are discussed in more detail in the context of the Datalog query language, in Section 27.4.6.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">also allows creation of recursively deﬁned permanent views by using </span><b>create re- cursive view </b>in place of <b>with recursive</b>. Some implementations support recursive queries using a diﬀerent syntax. This includes the Oracle <b>start with </b>/ <b>connect by prior </b>syntax for what it calls hierarchical queries. <span class="s76">9</span> See the respective system manuals for further details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_1159.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">9<span class="s78">Staring with Oracle 12.c, the standard syntax is accepted in addition to the legacy hierarchical syntax, with the </span><span class="s79">recursive</span></p><p class="s80" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">keyword omitted and with the requirement in our example that <b>union all </b>be used instead of <b>union</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part120.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part122.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
