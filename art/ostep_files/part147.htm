<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part146.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part148.htm">下一个 &gt;</a></p><h4 style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">References</h4><p class="s12" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[M65] “On Dynamic Program Relocation”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">W.C. McGee</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">IBM Systems Journal</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Volume 4, Number 3, 1965, pages 184–199</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">This paper is a nice summary of early work on dynamic relocation, as well as some basics on static relocation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[P90] “Relocating loader for MS-DOS .EXE executable files” Kenneth D. A. Pillay</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">Microprocessors &amp; Microsystems archive Volume 14, Issue 7 (September 1990)</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">An example of a relocating loader for MS-DOS. Not the first one, but just a relatively modern example of how such a system works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[SS74] “The Protection of Information in Computer Systems”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">J. Saltzer and M. Schroeder CACM, July 1974</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">From this paper: “The concepts of base-and-bound register and hardware-interpreted descriptors ap- peared, apparently independently, between 1957 and 1959 on three projects with diverse goals. At M.I.T., McCarthy suggested the base-and-bound idea as part of the memory protection system nec- essary to make time-sharing feasible. IBM independently developed the base-and-bound register as a mechanism to permit reliable multiprogramming of the Stretch (7030) computer system. At Burroughs,</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: justify;">R. Barton suggested that hardware-interpreted descriptors would provide direct support for the naming scope rules of higher level languages in the B5000 computer system.” We found this quote on Mark Smotherman’s cool history pages [S04]; see them for more information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[S04] “System Call Support”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;"><a href="http://people.cs.clemson.edu/" class="a" target="_blank">Mark Smotherman, May 2004 </a>http://people.cs.clemson.edu/˜mark/syscall.html</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A neat history of system call support. Smotherman has also collected some early history on items like interrupts and other fun aspects of computing history. See his web pages for more details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[WL+93] “Efficient Software-based Fault Isolation”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Robert Wahbe, Steven Lucco, Thomas E. Anderson, Susan L. Graham SOSP ’93</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">A terrific paper about how you can use compiler support to bound memory references from a program, without hardware support. The paper sparked renewed interest in software techniques for isolation of memory references.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part146.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part148.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
