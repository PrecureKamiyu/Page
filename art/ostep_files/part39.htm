<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.4 Process States</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part38.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part40.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">4.4 Process States</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now that we have some idea of what a process is (though we will continue to refine this notion), and (roughly) how it is created, let us talk about the different <b>states </b>a process can be in at a given time. The notion that a process can be in one of these states arose in early computer systems [V+65,DV66]. In a simplified view, a process can be in one of three states:</p><p class="s4" style="padding-top: 5pt;padding-left: 64pt;text-indent: -9pt;line-height: 89%;text-align: justify;">• <span class="s27">Running</span><span class="p">: In the running state, a process is running on a processor. This means it is executing instructions.</span></p><p class="s4" style="padding-left: 64pt;text-indent: -9pt;line-height: 89%;text-align: justify;">• <span class="s27">Ready</span><span class="p">: In the ready state, a process is ready to run but for some reason the OS has chosen not to run it at this given moment.</span></p><p class="s4" style="padding-left: 64pt;text-indent: -9pt;line-height: 89%;text-align: justify;">• <span class="s27">Blocked</span><span class="p">: In the blocked state, a process has performed some kind of operation that makes it not ready to run until some other event takes place. A common example: when a process initiates an I/O request to a disk, it becomes blocked and thus some other process can use the processor.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="54" height="54" alt="image" src="Image_022.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Running</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="54" height="54" alt="image" src="Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 5pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">Ready</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="87" height="87" alt="image" src="Image_024.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="40" height="10" alt="image" src="Image_025.png"/></span></p><p class="s47" style="padding-top: 3pt;padding-left: 189pt;text-indent: 0pt;line-height: 248%;text-align: center;">Descheduled Scheduled</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 54pt;text-indent: 0pt;text-align: center;">I/O: initiate        I/O: done</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 54pt;text-indent: 0pt;text-align: center;">Blocked</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 138pt;text-indent: 0pt;text-align: left;">Figure 4.2: <b>Process: State Transitions</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">If we were to map these states to a graph, we would arrive at the di- agram in Figure <span style=" color: #00AEEF;">4.2</span>. As you can see in the diagram, a process can be moved between the ready and running states at the discretion of the OS. Being moved from ready to running means the process has been <b>sched- uled</b>; being moved from running to ready means the process has been <b>descheduled</b>. Once a process has become blocked (e.g., by initiating an I/O operation), the OS will keep it as such until some event occurs (e.g., I/O completion); at that point, the process moves to the ready state again (and potentially immediately to running again, if the OS so decides).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part38.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part40.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
