<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A Dialogue on Memory Virtualization</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part114.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part116.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">A Dialogue on Memory Virtualization</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>So, are we done with virtualization?</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Professor: <i>No!</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Hey, no reason to get so excited; I was just asking a question. Students are supposed to do that, right?</i></p><p class="s6" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Professor: </b>Well, professors do always say that, but really they mean this: ask questions, <b>if </b>they are good questions, <b>and </b>you have actually put a little thought into them.</p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>Well, that sure takes the wind out of my sails.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Mission accomplished. In any case, we are not nearly done with virtualization! Rather, you have just seen how to virtualize the CPU, but really there is a big monster waiting in the closet: memory. Virtualizing memory is complicated and requires us to understand many more intricate details about how the hardware and OS interact.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>That sounds cool. Why is it so hard?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Well, there are a lot of details, and you have to keep them straight in your head to really develop a mental model of what is going on. We’ll start simple, with very basic techniques like base/bounds, and slowly add complexity to tackle new challenges, including fun topics like TLBs and multi-level page tables. Eventually, we’ll be able to describe the workings of a fully-functional modern virtual memory manager.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Neat! Any tips for the poor student, inundated with all of this infor- mation and generally sleep-deprived?</i></p><p class="s6" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Professor: </b>For the sleep deprivation, that’s easy: sleep more (and party less). For understanding virtual memory, start with this: <b>every address generated by a user program is a virtual address</b>. The OS is just providing an illusion to each process, specifically that it has its own large and private memory; with some hardware help, the OS will turn these pretend virtual addresses into real physical addresses, and thus be able to locate the desired information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>OK, I think I can remember that... (to self) every address from a user program is virtual, every address from a user program is virtual, every ...</i></p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">Professor: <i>What are you mumbling about?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Oh nothing.... (awkward pause) ... Anyway, why does the OS want to provide this illusion again?</i></p><p class="s6" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Professor: </b>Mostly <b>ease of use</b>: the OS will give each program the view that it has a large contiguous <b>address space </b>to put its code and data into; thus, as a programmer, you never have to worry about things like “where should I store this variable?” because the virtual address space of the program is large and has lots of room for that sort of thing. Life, for a programmer, becomes much more tricky if you have to worry about fitting all of your code data into a small, crowded memory.</p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">Student: <i>Why else?</i></p><p class="s6" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><b>Professor: </b>Well, <b>isolation </b>and <b>protection </b>are big deals, too. We don’t want one errant program to be able to read, or worse, overwrite, some other program’s memory, do we?</p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Probably not. Unless it’s a program written by someone you don’t like.</i></p><p class="s6" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><b>Professor: </b>Hmmm<span class="s53">  </span>I think we might need to add a class on morals and ethics</p><p class="s6" style="padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">to your schedule for next semester. Perhaps OS class isn’t getting the right mes- sage across.</p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Maybe we should. But remember, it’s not me who taught us that the proper OS response to errant process behavior is to kill the offending process!</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part114.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part116.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
