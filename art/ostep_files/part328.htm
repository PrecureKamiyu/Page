<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>31.6 The Dining Philosophers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part327.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part329.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">31.6 The Dining Philosophers</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">One of the most famous concurrency problems posed, and solved, by Dijkstra, is known as the <b>dining philosopher’s problem </b>[DHO71]. The problem is famous because it is fun and somewhat intellectually inter- esting; however, its practical utility is low. However, its fame forces its inclusion here; indeed, you might be asked about it on some interview, and you’d really hate your OS professor if you miss that question and don’t get the job. Conversely, if you get the job, please feel free to send your OS professor a nice note, or some stock options.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The basic setup for the problem is this (as shown in Figure <span style=" color: #00AEEF;">31.10</span>): as- sume there are five “philosophers” sitting around a table. Between each pair of philosophers is a single fork (and thus, five total). The philoso- phers each have times where they think, and don’t need any forks, and times where they eat. In order to eat, a philosopher needs two forks, both the one on their left and the one on their right. The contention for these forks, and the synchronization problems that ensue, are what makes this a problem we study in concurrent programming.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s150" style="padding-left: 154pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s151" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s150" style="padding-left: 100pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s151" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s150" style="padding-left: 154pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="36" height="36" alt="image" src="Image_473.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">P0</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="36" height="35" alt="image" src="Image_474.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">P1</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="36" height="36" alt="image" src="Image_475.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">P2</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="36" height="36" alt="image" src="Image_476.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">P3</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="36" height="36" alt="image" src="Image_477.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">P4</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="18" alt="image" src="Image_478.png"/></span></p><p class="s91" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">f0</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="18" alt="image" src="Image_479.png"/></span></p><p class="s91" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">f1</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="18" alt="image" src="Image_480.png"/></span></p><p class="s91" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">f2</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="18" alt="image" src="Image_481.png"/></span></p><p class="s91" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">f3</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="18" alt="image" src="Image_482.png"/></span></p><p class="s91" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">f4</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 106pt;text-indent: 0pt;text-align: left;">Figure 31.10: <b>The Dining Philosophers</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Here is the basic loop of each philosopher:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">think(); getforks(); eat(); putforks();</p><p class="s38" style="padding-left: 49pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">The key challenge, then, is to write the routines <span class="s41">getforks() </span>and <span class="s41">putforks() </span>such that there is no deadlock, no philosopher starves and never gets to eat, and concurrency is high (i.e., as many philosophers can eat at the same time as possible).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Following Downey’s solutions [D08], we’ll use a few helper functions to get us towards a solution. They are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int left(int p) { return p; }</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int right(int p) { return (p + 1) % 5; }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">When philosopher <span class="s41">p </span>wishes to refer to the fork on their left, they sim- ply call <span class="s41">left(p)</span>. Similarly, the fork on the right of a philosopher <span class="s41">p </span>is referred to by calling <span class="s41">right(p)</span>; the modulo operator therein handles the one case where the last philosopher (<span class="s41">p=4</span>) tries to grab the fork on their right, which is fork 0.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_483.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We’ll also need some semaphores to solve this problem. Let us assume we have five, one for each fork: <span class="s41">sem t forks[5]</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">void getforks() {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">2   <span class="s38">sem_wait(forks[left(p)]);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3   <span class="s38">sem_wait(forks[right(p)]);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">5</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">6  <span class="s38">void putforks() {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">7   <span class="s38">sem_post(forks[left(p)]);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8   <span class="s38">sem_post(forks[right(p)]);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9  <span class="s38">}</span></p><p class="s27" style="padding-left: 94pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="p">Figure 31.11: </span>The <span class="s52">getforks() </span>and <span class="s52">putforks() </span>Routines</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part329.htm">Broken Solution</a><a class="toc0" href="part330.htm">A Solution: Breaking The Dependency</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part327.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part329.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
