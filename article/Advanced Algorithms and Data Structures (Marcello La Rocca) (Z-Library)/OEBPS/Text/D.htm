<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>appendix D</title>
    
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-998517"></a><a id="pgfId-998529"></a>appendix D. Containers as priority queues</h1>
  </div>

  <p class="body"><a id="pgfId-998542"></a>One of <a id="marker-1002443"></a><a id="marker-1002444"></a><a id="marker-1002445"></a>the largest subsets of data structures, probably the largest (by far), is the set of containers. A container is a collection of objects, with operations for adding, removing, and retrieving them. The difference between each kind of container revolves around</p>

  <ol class="calibre18">
    <li class="fm-list-numbered">
      <p class="list"><a class="calibre14" id="pgfId-998559"></a>The order in which the elements are extracted from the container</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998571"></a>Whether the elements need to be unique, or multiple instances are allowed</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998583"></a>Whether the container is associative, that is, if it stores plain elements or associates keys with values</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998597"></a>How elements can be searched, and what operations can be performed on the stored data</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-998609"></a>Performance</p>
    </li>
  </ol>

  <p class="body"><a id="pgfId-998621"></a>Points 1-4 define an abstraction of a container, in other words, its behavior: in technical jargon, its API. Once the API is fixed, implementations can still differ, though.</p>

  <p class="body"><a id="pgfId-998634"></a>But for now, let’s focus on the abstract data structures: the caveat here is in the definition of priority. At a very high level, we have a black box, a container, that will hold our values, and remove and return a specific element every time we ask for one.</p>

  <p class="body"><a id="pgfId-998647"></a>This description is generic enough that it can describe basically every type of container in data structures: it all boils down to consistently defining the priority of the elements. In mathematical terms, the priority is an univocal mapping between elements and a number, usually with the convention that lower values mean higher priority.</p>

  <p class="body"><a id="pgfId-998659"></a>Some of these definitions for priority are so common that we categorize them as separate data structures. Let’s look at a few of them.</p>

  <h2 class="fm-head" id="heading_id_3">D.1 <a id="pgfId-998668"></a><a id="id_Toc507447828"></a>Bag</h2>

  <p class="body"><a id="pgfId-998680"></a>A <a id="marker-999187"></a><a id="marker-999191"></a><a id="marker-999195"></a><i class="calibre17">bag</i>, shown in figure D.1, is a collection that only supports the <code class="fm-code-in-text">add</code><a id="marker-999199"></a> and <code class="fm-code-in-text">iterate</code> operations<a id="marker-999203"></a>. It’s not possible to remove items from a bag. After checking if the container is actually empty, clients can iterate through its elements; the actual order, however, is unspecified by definition, and clients must not rely on it.</p>

  <p class="body"><a id="pgfId-998709"></a>Bags are useful when you need to collect objects and process them as a whole set rather than individually. For instance, you could collect samples and then, at a later point, compute statistics on them, such as average or standard deviation—the order is irrelevant in that case.</p>

  <p class="fm-figure"><img alt="" class="calibre23" src="../Images/appD_F1.png"/></p>

  <p class="fm-figure-caption"><a id="pgfId-1002693"></a>Figure D.1 Operations on a bag. Insertion adds elements to the container but sets no index for them. The only other available operation is iterating through the bag’s elements; that does not change the container, but the order in which elements are returned is not guaranteed, since it could be insertion order, but it could also be completely random each time the bag is iterated upon.</p>

  <p class="body"><a id="pgfId-998746"></a>So, a <i class="fm-italics">bag</i> can be described in terms of <i class="calibre17">priority queues</i> (<i class="calibre17">PQ</i>s<a id="marker-999207"></a>): one for which element removal (method <code class="fm-code-in-text">top</code><a id="marker-999211"></a>) is disabled, it’s possible to peek one element at a time, and the priority of each element is given by a random number from a uniform distribution. Priorities also change at every <a id="marker-999215"></a><a id="marker-999219"></a><a id="marker-999223"></a>iteration.</p>

  <h2 class="fm-head" id="heading_id_4"><a id="pgfId-998788"></a><a id="id_Toc507447829"></a>D.2  Stack</h2>

  <p class="body"><a id="pgfId-998800"></a>A <a id="marker-999227"></a><a id="marker-999231"></a><a id="marker-999235"></a><i class="calibre17">stack</i> is a collection that returns its elements according to the <i class="calibre17">LIFO</i> (<i class="calibre17">Last In First Out</i><a id="marker-999239"></a>) policy. This means that the elements in the stack will be returned in the reverse order with respect to the order they were added to the stack. This makes stacks pretty useful when you need to reverse a sequence or access recently added elements first.</p>

  <p class="body"><a id="pgfId-998826"></a>We can see a stack, like the one shown in figure D.2, as a specialized <i class="calibre17">PQ</i> where elements’ priorities are given by the time at which they are inserted (most recently inserted elements have highest priority).</p>

  <p class="fm-figure"><img alt="" class="calibre23" src="../Images/appD_F2.png"/></p>

  <p class="fm-figure-caption"><a id="pgfId-1002735"></a>Figure D.2 Operations on a stack. Insertion (<code class="fm-code-in-text">push</code>) adds elements to the top of the stack. Delete (<code class="fm-code-in-text">pop</code>) removes the top element and returns it. For stacks (as well as for queues), a <code class="fm-code-in-text">peek</code> operation is also usually available, returning the top element without removing it from the container.</p>

  <p class="body"><a id="pgfId-998875"></a>When comparing a stack to a bag, in fact, the first difference is that for stacks, order matters.</p>

  <p class="body"><a id="pgfId-998888"></a>The second one is that while it is possible to iterate through the whole stack at once, it’s also possible to remove elements from a stack. In particular, a stack is a limited access data structure, because it’s only possible to add or remove elements to/from the top of the stack.</p>

  <p class="body"><a id="pgfId-998901"></a>Typical real-world examples used to explain stacks usually include a pile of dirty dishes (you pick from the top of the pile, so you first wash the ones that have been added to the pile more recently). It is in computer science, however, that stacks find their largest and more crucial uses:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-998912"></a><i class="calibre15">Memory management</i><a class="calibre14" id="marker-999243"></a> allowing your programs to run (the call stack).</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998927"></a><i class="calibre15">Implementation of the memento pattern</i> in turn allows you to undo actions in your editor or browse back and forth in your browser’s history.</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-998946"></a><i class="calibre15">Enabling recursion</i><a class="calibre14" id="marker-999247"></a> and being used as support for several algorithms.</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-998960"></a>In the JavaScript world, you might have heard of <i class="calibre15">time-travel</i> in <i class="calibre15">React</i>.</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-998976"></a>And this list is by no means <a id="marker-999251"></a><a id="marker-999255"></a><a id="marker-999259"></a>exhaustive.</p>

  <h2 class="fm-head" id="heading_id_5"><a id="pgfId-998991"></a><a id="id_Toc507447830"></a>D.3  Queue</h2>

  <p class="body"><a id="pgfId-999003"></a>A <a id="marker-999263"></a><a id="marker-999267"></a><a id="marker-999271"></a><i class="calibre17">queue</i> is a collection that is based on the FIFO (First In First Out<a id="marker-999275"></a>) policy. Therefore, elements of a queue will be returned in the same order as they were added to it. While queues are also limited access data structures, elements are added to the front of the queue and removed from its back (which also means their implementation is slightly more complicated than stacks’).</p>

  <p class="body"><a id="pgfId-999026"></a>Figure D.3 shows an example of a queue.</p>

  <p class="fm-figure"><img alt="" class="calibre23" src="../Images/appD_F3.png"/></p>

  <p class="fm-figure-caption"><a id="pgfId-1002787"></a>Figure D.3 Operations on a queue. Insertion (<code class="fm-code-in-text">enqueue</code>) adds elements to the front of the queue. Delete (<code class="fm-code-in-text">dequeue</code>) removes the element at the back of the queue and returns it.</p>

  <p class="body"><a id="pgfId-999064"></a>A queue, as you can imagine at this point, is a particular case of priority queue where the priority of an element is its age: older elements have the highest priority.</p>

  <p class="body"><a id="pgfId-999073"></a>The name, in this case, is quite revealing, and indeed in the real world this is the DS we (subconsciously) use every time we are waiting in a fair line: whoever has been waiting the longest is served first. Like stacks, queues are fundamental to computer science, and are used in many <a id="marker-999279"></a><a id="marker-999283"></a><a id="marker-999287"></a>algorithms.</p>

  <h2 class="fm-head" id="heading_id_6"><a id="pgfId-999088"></a>D.4  A comparative analysis of containers</h2>

  <p class="body"><a id="pgfId-999106"></a>In <a id="marker-999291"></a><a id="marker-999295"></a>summary, we can partition the abstract structures discussed according to a few core characteristics: if keys are maintained in a certain order, if they need to be unique, and if the container is associative. In the analysis provided in table D.1, we include all containers shown in the previous sections, plus dictionaries (discussed <a id="marker-999299"></a><a id="marker-999303"></a>in <a id="marker-999307"></a><a id="marker-999311"></a><a id="marker-999315"></a>appendix C).</p>

  <p class="fm-table-caption"><a id="pgfId-1001922"></a>Table D.3 Comparison of Containers</p>

  <table border="1" class="contenttable">
    <tr class="calibre8">
      <th class="fm-contenttable" colspan="1" rowspan="1">
        <p class="fm-table-head"><a id="pgfId-1001930"></a>Structure</p>
      </th>

      <th class="fm-contenttable" colspan="1" rowspan="1">
        <p class="fm-table-head"><a id="pgfId-1001932"></a>Order</p>
      </th>

      <th class="fm-contenttable" colspan="1" rowspan="1">
        <p class="fm-table-head"><a id="pgfId-1001934"></a>Unique</p>
      </th>

      <th class="fm-contenttable" colspan="1" rowspan="1">
        <p class="fm-table-head"><a id="pgfId-1001936"></a>Associativity</p>
      </th>
    </tr>

    <tr class="calibre8">
      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001938"></a><code class="fm-code-in-text2">Bag</code></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001940"></a>No</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001942"></a>No</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001944"></a>None</p>
      </td>
    </tr>

    <tr class="calibre8">
      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001946"></a><code class="fm-code-in-text2">Stack</code></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001948"></a>Yes</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001950"></a>No</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001952"></a>None</p>
      </td>
    </tr>

    <tr class="calibre8">
      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001954"></a><code class="fm-code-in-text2">Queue</code><a id="marker-1001977"></a></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001956"></a>Yes</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001958"></a>No</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001960"></a>None</p>
      </td>
    </tr>

    <tr class="calibre8">
      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001962"></a><code class="fm-code-in-text2">Priority Queue</code><a id="marker-1001978"></a></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001964"></a>Yes</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001966"></a>No <a href="#pgfId-1001981"><sup class="footnotenumber1">1</sup></a></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001968"></a>None</p>
      </td>
    </tr>

    <tr class="calibre8">
      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001970"></a><code class="fm-code-in-text2">Dictionary</code><a id="marker-1001982"></a></p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001972"></a>No</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001974"></a>Yes</p>
      </td>

      <td class="fm-contenttable1" colspan="1" rowspan="1">
        <p class="fm-table-body"><a id="pgfId-1001976"></a>key-value</p>
      </td>
    </tr>
  </table>

  <p class="calibre16"><br class="calibre26"/></p>

  <p class="fm-footnote"><sup class="footnotenumber">1.</sup> <a id="pgfId-1001981"></a>As we mentioned in section 2.6.6, relaxing the uniqueness constraint for keys will require extra efforts on priority update.</p>
</body>
</html>
