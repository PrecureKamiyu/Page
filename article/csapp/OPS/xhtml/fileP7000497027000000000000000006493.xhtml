<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>7.13 Library Interpositioning</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006493" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000044CAA" data-uri="chapter07.xhtml#P7000497027000000000000000044CAA" epub:type="title"><span class="pcalibre label pcalibre1">7.13 </span>Library Interpositioning</h1></header>
<p id="P7000497027000000000000000044CAB" data-uri="chapter07.xhtml#P7000497027000000000000000044CAB" class="pcalibre1 pcalibre calibre2">Linux linkers support a powerful technique, called <i class="calibre5 pcalibre pcalibre1">library interpositioning</i>, that allows you to intercept calls to shared library functions and execute your own code instead. Using interpositioning, you could trace the number of times a particular <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006496" title="708" data-uri="chapter07.xhtml#P7000497027000000000000000006496" epub:type="pagebreak"></span>library function is called, validate and trace its input and output values, or even replace it with a completely different implementation.</p>
<p id="P7000497027000000000000000044CAC" data-uri="chapter07.xhtml#P7000497027000000000000000044CAC" class="pcalibre1 pcalibre calibre2">Here's the basic idea: Given some <i class="calibre5 pcalibre pcalibre1">target function</i> to be interposed on, you create a <i class="calibre5 pcalibre pcalibre1">wrapper function</i> whose prototype is identical to the target function. Using some particular interpositioning mechanism, you then trick the system into calling the wrapper function instead of the target function. The wrapper function typically executes its own logic, then calls the target function and passes its return value back to the caller.</p>
<p id="P7000497027000000000000000044CAD" data-uri="chapter07.xhtml#P7000497027000000000000000044CAD" class="pcalibre1 pcalibre calibre2">Interpositioning can occur at compile time, link time, or run time as the program is being loaded and executed. To explore these different mechanisms, we will use the example program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000064BB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.20(a)</span></a> as a running example. It calls the <code id="P7000497027000000000000000044CAE" data-uri="chapter07.xhtml#P7000497027000000000000000044CAE" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P7000497027000000000000000044CAF" data-uri="chapter07.xhtml#P7000497027000000000000000044CAF" class="pcalibre1 calibre8 pcalibre">free</code> functions from the C standard library (<code id="P7000497027000000000000000044CB0" data-uri="chapter07.xhtml#P7000497027000000000000000044CB0" class="pcalibre1 calibre8 pcalibre">libc.so</code>). The call to <code id="P7000497027000000000000000044CB1" data-uri="chapter07.xhtml#P7000497027000000000000000044CB1" class="pcalibre1 calibre8 pcalibre">malloc</code> allocates a block of 32 bytes from the heap and returns a pointer to the block. The call to <code id="P7000497027000000000000000044CB2" data-uri="chapter07.xhtml#P7000497027000000000000000044CB2" class="pcalibre1 calibre8 pcalibre">free</code> gives the block back to the heap, for use by subsequent calls to <code id="P7000497027000000000000000044CB3" data-uri="chapter07.xhtml#P7000497027000000000000000044CB3" class="pcalibre1 calibre8 pcalibre">malloc</code>. Our goal is to use interpositioning to trace the calls to <code id="P7000497027000000000000000044CB4" data-uri="chapter07.xhtml#P7000497027000000000000000044CB4" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P7000497027000000000000000044CB5" data-uri="chapter07.xhtml#P7000497027000000000000000044CB5" class="pcalibre1 calibre8 pcalibre">free</code> as the program runs.</p>
<section id="P70004970270000000000000000064A1" data-uri="chapter07.xhtml#P70004970270000000000000000064A1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044CB6" data-uri="chapter07.xhtml#P7000497027000000000000000044CB6" epub:type="title"><span class="pcalibre label pcalibre1">7.13.1 </span>Compile-Time Interpositioning</h1></header>
<p id="P7000497027000000000000000044CB7" data-uri="chapter07.xhtml#P7000497027000000000000000044CB7" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000064BB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.20</span></a> shows how to use the C preprocessor to interpose at compile time. Each wrapper function in <code id="P7000497027000000000000000044CB8" data-uri="chapter07.xhtml#P7000497027000000000000000044CB8" class="pcalibre1 calibre8 pcalibre">mymalloc.c</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000064BB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.20(c)</span></a>) calls the target function, prints a trace, and returns. The local <code id="P7000497027000000000000000044CB9" data-uri="chapter07.xhtml#P7000497027000000000000000044CB9" class="pcalibre1 calibre8 pcalibre">malloc.h</code> header file (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000064BB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.20(b)</span></a>) instructs the preprocessor to replace each call to a target function with a call to its wrapper. Here is how to compile and link the program:</p>
<pre id="P7000497027000000000000000044CBA" data-uri="chapter07.xhtml#P7000497027000000000000000044CBA" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CBB" data-uri="chapter07.xhtml#P7000497027000000000000000044CBB" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -DCOMPILETIME -c mymalloc.c</i>
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -I. -o intc int.c mymalloc.o</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044CBC" data-uri="chapter07.xhtml#P7000497027000000000000000044CBC">The interpositioning happens because of the <code id="P7000497027000000000000000044CBD" data-uri="chapter07.xhtml#P7000497027000000000000000044CBD" class="pcalibre1 calibre8 pcalibre">-I</code>. argument, which tells the C preprocessor to look for <code id="P7000497027000000000000000044CBE" data-uri="chapter07.xhtml#P7000497027000000000000000044CBE" class="pcalibre1 calibre8 pcalibre">malloc.h</code> in the current directory before looking in the usual system directories. Notice that the wrappers in <code id="P7000497027000000000000000044CBF" data-uri="chapter07.xhtml#P7000497027000000000000000044CBF" class="pcalibre1 calibre8 pcalibre">mymalloc.c</code> are compiled with the standard <code id="P7000497027000000000000000044CC0" data-uri="chapter07.xhtml#P7000497027000000000000000044CC0" class="pcalibre1 calibre8 pcalibre">malloc.h</code> header file.</p>
<p id="P7000497027000000000000000044CC1" data-uri="chapter07.xhtml#P7000497027000000000000000044CC1" class="pcalibre1 pcalibre calibre2">Running the program gives the following trace:</p>
<pre id="P7000497027000000000000000044CC2" data-uri="chapter07.xhtml#P7000497027000000000000000044CC2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CC3" data-uri="chapter07.xhtml#P7000497027000000000000000044CC3" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">./intc</i>
malloc(32)=0x9ee010
free(0x9ee010)</code></pre>
</section>
<section id="P70004970270000000000000000064B0" data-uri="chapter07.xhtml#P70004970270000000000000000064B0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044CC4" data-uri="chapter07.xhtml#P7000497027000000000000000044CC4" epub:type="title"><span class="pcalibre label pcalibre1">7.13.2 </span>Link-Time Interpositioning</h1></header>
<p id="P7000497027000000000000000044CC5" data-uri="chapter07.xhtml#P7000497027000000000000000044CC5" class="pcalibre1 pcalibre calibre2">The Linux static linker supports link-time interpositioning with the <code id="P7000497027000000000000000044CC6" data-uri="chapter07.xhtml#P7000497027000000000000000044CC6" class="pcalibre1 calibre8 pcalibre">--wrap f</code> flag. This flag tells the linker to resolve references to symbol <code id="P7000497027000000000000000044CC7" data-uri="chapter07.xhtml#P7000497027000000000000000044CC7" class="pcalibre1 calibre8 pcalibre">f</code> as <code id="P7000497027000000000000000044CC8" data-uri="chapter07.xhtml#P7000497027000000000000000044CC8" class="pcalibre1 calibre8 pcalibre">__wrap_f</code> (two underscores for the prefix), and to resolve references to symbol <code id="P7000497027000000000000000044CC9" data-uri="chapter07.xhtml#P7000497027000000000000000044CC9" class="pcalibre1 calibre8 pcalibre">__real_f</code> (two underscores for the prefix) as <code id="P7000497027000000000000000044CCA" data-uri="chapter07.xhtml#P7000497027000000000000000044CCA" class="pcalibre1 calibre8 pcalibre">f</code>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000064CE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.21</span></a> shows the wrappers for our example program.</p>
<p id="P7000497027000000000000000044CCB" data-uri="chapter07.xhtml#P7000497027000000000000000044CCB" class="pcalibre1 pcalibre calibre2">Here is how to compile the source files into relocatable object files:</p>
<pre id="P7000497027000000000000000044CCC" data-uri="chapter07.xhtml#P7000497027000000000000000044CCC" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CCD" data-uri="chapter07.xhtml#P7000497027000000000000000044CCD" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -DLINKTIME -c mymalloc.c</i>
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -c int.c</i></code></pre>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000064BB" data-uri="chapter07.xhtml#P70004970270000000000000000064BB">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000064BC" title="709" data-uri="chapter07.xhtml#P70004970270000000000000000064BC" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000044CCE" data-uri="chapter07.xhtml#P7000497027000000000000000044CCE" class="pcalibre1 pcalibre calibre2">(a) Example program int.c</p>
<p id="P7000497027000000000000000044CCF" data-uri="chapter07.xhtml#P7000497027000000000000000044CCF" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/int.c</i></p>
<pre id="P7000497027000000000000000044CD0" data-uri="chapter07.xhtml#P7000497027000000000000000044CD0" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CD1" data-uri="chapter07.xhtml#P7000497027000000000000000044CD1" class="calibre10 pcalibre pcalibre1">
1	#include &lt;stdio.h&gt;
2	#include &lt;malloc.h&gt;
3
4	int main()
5	{
6		int *p = malloc(32);
7		free(p);
8		return(0);
9	}
</code></pre>
<p id="P7000497027000000000000000044CD2" data-uri="chapter07.xhtml#P7000497027000000000000000044CD2" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/int.c</i></p>
<p id="P7000497027000000000000000044CD3" data-uri="chapter07.xhtml#P7000497027000000000000000044CD3" class="pcalibre1 pcalibre calibre2">(b) Local malloc.h file</p>
<p id="P7000497027000000000000000044CD4" data-uri="chapter07.xhtml#P7000497027000000000000000044CD4" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/malloc.h</i></p>
<pre id="P7000497027000000000000000044CD5" data-uri="chapter07.xhtml#P7000497027000000000000000044CD5" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CD6" data-uri="chapter07.xhtml#P7000497027000000000000000044CD6" class="calibre10 pcalibre pcalibre1">
1	#define malloc(size) mymalloc(size)
2	#define free(ptr) myfree(ptr)
3
4	void *mymalloc(size_t size);
5	void myfree(void *ptr);
</code></pre>
<p id="P7000497027000000000000000044CD7" data-uri="chapter07.xhtml#P7000497027000000000000000044CD7" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/malloc.h</i></p>
<p id="P7000497027000000000000000044CD8" data-uri="chapter07.xhtml#P7000497027000000000000000044CD8" class="pcalibre1 pcalibre calibre2">(c) Wrapper functions in mymalloc.c</p>
<p id="P7000497027000000000000000044CD9" data-uri="chapter07.xhtml#P7000497027000000000000000044CD9" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<pre id="P7000497027000000000000000044CDA" data-uri="chapter07.xhtml#P7000497027000000000000000044CDA" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CDB" data-uri="chapter07.xhtml#P7000497027000000000000000044CDB" class="calibre10 pcalibre pcalibre1">
1	#ifdef COMPILETIME
2	#include &lt;stdio.h&gt;
3	#include &lt;malloc.h&gt;
4
5	/* malloc wrapper function */
6	void *mymalloc(size_t size)
7	{
8		void *ptr = malloc(size);
9		printf("malloc(%d)=%pn",
10			(int)size, ptr);
11		return ptr;
12	}
13
14	/* free wrapper function */
15	void myfree(void *ptr)
16	{
17		free(ptr);
18		printf("free(%p)n", ptr);
19	}
20	#endif
</code></pre>
<p id="P7000497027000000000000000044CDC" data-uri="chapter07.xhtml#P7000497027000000000000000044CDC" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<figcaption id="P7000497027000000000000000044CDD" data-uri="chapter07.xhtml#P7000497027000000000000000044CDD" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044CDE" data-uri="chapter07.xhtml#P7000497027000000000000000044CDE" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">7.20 </span>Compile-time interpositioning with the C preprocessor.</h1></header>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000064CE" data-uri="chapter07.xhtml#P70004970270000000000000000064CE">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000064CF" title="710" data-uri="chapter07.xhtml#P70004970270000000000000000064CF" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000044CDF" data-uri="chapter07.xhtml#P7000497027000000000000000044CDF" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<pre id="P7000497027000000000000000044CE0" data-uri="chapter07.xhtml#P7000497027000000000000000044CE0" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CE1" data-uri="chapter07.xhtml#P7000497027000000000000000044CE1" class="calibre10 pcalibre pcalibre1">
1	#ifdef LINKTIME
2	#include &lt;stdio.h&gt;
3
4	void *__real_malloc(size_t size);
5	void __real_free(void *ptr);
6
7	/* malloc wrapper function */
8	void *__wrap_malloc(size_t size)
9	{
10		void *ptr = __real_malloc(size); /* Call libc malloc */
11		printf("malloc(%d) = %pn", (int)size, ptr);
12		return ptr;
13	}
14
15	/* free wrapper function */
16	void __wrap_free(void *ptr)
17	{
18		__real_free(ptr); /* Call libc free */
19		printf("free(%p)n", ptr);
20	}
21	#endif
</code></pre>
<p id="P7000497027000000000000000044CE2" data-uri="chapter07.xhtml#P7000497027000000000000000044CE2" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<figcaption id="P7000497027000000000000000044CE3" data-uri="chapter07.xhtml#P7000497027000000000000000044CE3" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044CE4" data-uri="chapter07.xhtml#P7000497027000000000000000044CE4" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">7.21 </span>Link-time interpositioning with the <code id="P7000497027000000000000000044CE5" data-uri="chapter07.xhtml#P7000497027000000000000000044CE5" class="pcalibre1 calibre8 pcalibre">--wrap</code> flag.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044CE6" data-uri="chapter07.xhtml#P7000497027000000000000000044CE6">And here is how to link the object files into an executable:</p>
<pre id="P7000497027000000000000000044CE7" data-uri="chapter07.xhtml#P7000497027000000000000000044CE7" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CE8" data-uri="chapter07.xhtml#P7000497027000000000000000044CE8" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.o mymalloc.o</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044CE9" data-uri="chapter07.xhtml#P7000497027000000000000000044CE9">The <code id="P7000497027000000000000000044CEA" data-uri="chapter07.xhtml#P7000497027000000000000000044CEA" class="pcalibre1 calibre8 pcalibre">-Wl</code>, option flag passes option to the linker. Each comma in option is replaced with a space. So <code id="P7000497027000000000000000044CEB" data-uri="chapter07.xhtml#P7000497027000000000000000044CEB" class="pcalibre1 calibre8 pcalibre">-Wl, --wrap, malloc</code> passes <code id="P7000497027000000000000000044CEC" data-uri="chapter07.xhtml#P7000497027000000000000000044CEC" class="pcalibre1 calibre8 pcalibre">--wrap malloc</code> to the linker, and similarly for <code id="P7000497027000000000000000044CED" data-uri="chapter07.xhtml#P7000497027000000000000000044CED" class="pcalibre1 calibre8 pcalibre">-Wl, --wrap, free</code>.</p>
<p id="P7000497027000000000000000044CEE" data-uri="chapter07.xhtml#P7000497027000000000000000044CEE" class="pcalibre1 pcalibre calibre2">Running the program gives the following trace:</p>
<pre id="P7000497027000000000000000044CEF" data-uri="chapter07.xhtml#P7000497027000000000000000044CEF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044CF0" data-uri="chapter07.xhtml#P7000497027000000000000000044CF0" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">./intl</i>
malloc(32) = 0x18cf010
free(0x18cf010)</code></pre>
</section>
<section id="P70004970270000000000000000064E2" data-uri="chapter07.xhtml#P70004970270000000000000000064E2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044CF1" data-uri="chapter07.xhtml#P7000497027000000000000000044CF1" epub:type="title"><span class="pcalibre label pcalibre1">7.13.3 </span>Run-Time Interpositioning</h1></header>
<p id="P7000497027000000000000000044CF2" data-uri="chapter07.xhtml#P7000497027000000000000000044CF2" class="pcalibre1 pcalibre calibre2">Compile-time interpositioning requires access to a program's source files. Link-time interpositioning requires access to its relocatable object files. However, there is a mechanism for interpositioning at run time that requires access only to the executable object file. This fascinating mechanism is based on the dynamic linker's <code id="P7000497027000000000000000044CF3" data-uri="chapter07.xhtml#P7000497027000000000000000044CF3" class="pcalibre1 calibre8 pcalibre">LD_PRELOAD</code> environment variable.</p>
<p id="P7000497027000000000000000044CF4" data-uri="chapter07.xhtml#P7000497027000000000000000044CF4" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000064E7" title="711" data-uri="chapter07.xhtml#P70004970270000000000000000064E7" epub:type="pagebreak"></span>If the <code id="P7000497027000000000000000044CF5" data-uri="chapter07.xhtml#P7000497027000000000000000044CF5" class="pcalibre1 calibre8 pcalibre">LD_PRELOAD</code> environment variable is set to a list of shared library pathnames (separated by spaces or colons), then when you load and execute a program, the dynamic linker (<code id="P7000497027000000000000000044CF6" data-uri="chapter07.xhtml#P7000497027000000000000000044CF6" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">ld-linux.so</span></code>) will search the <code id="P7000497027000000000000000044CF7" data-uri="chapter07.xhtml#P7000497027000000000000000044CF7" class="pcalibre1 calibre8 pcalibre">LD_PRELOAD</code> libraries first, before any other shared libraries, when it resolves undefined references. With this mechanism, you can interpose on any function in any shared library, including <code id="P7000497027000000000000000044CF8" data-uri="chapter07.xhtml#P7000497027000000000000000044CF8" class="pcalibre1 calibre8 pcalibre">libc.so</code>, when you load and execute any executable.</p>
<p id="P7000497027000000000000000044CF9" data-uri="chapter07.xhtml#P7000497027000000000000000044CF9" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006503"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.22</span></a> shows the wrappers for <code id="P7000497027000000000000000044CFA" data-uri="chapter07.xhtml#P7000497027000000000000000044CFA" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P7000497027000000000000000044CFB" data-uri="chapter07.xhtml#P7000497027000000000000000044CFB" class="pcalibre1 calibre8 pcalibre">free</code>. In each wrapper, the call to <code id="P7000497027000000000000000044CFC" data-uri="chapter07.xhtml#P7000497027000000000000000044CFC" class="pcalibre1 calibre8 pcalibre">dlsym</code> returns the pointer to the target <code id="P7000497027000000000000000044CFD" data-uri="chapter07.xhtml#P7000497027000000000000000044CFD" class="pcalibre1 calibre8 pcalibre">libc</code> function. The wrapper then calls the target function, prints a trace, and returns.</p>
<p id="P7000497027000000000000000044CFE" data-uri="chapter07.xhtml#P7000497027000000000000000044CFE" class="pcalibre1 pcalibre calibre2">Here is how to build the shared library that contains the wrapper functions:</p>
<pre id="P7000497027000000000000000044CFF" data-uri="chapter07.xhtml#P7000497027000000000000000044CFF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D00" data-uri="chapter07.xhtml#P7000497027000000000000000044D00" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044D01" data-uri="chapter07.xhtml#P7000497027000000000000000044D01">Here is how to compile the main program:</p>
<pre id="P7000497027000000000000000044D02" data-uri="chapter07.xhtml#P7000497027000000000000000044D02" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D03" data-uri="chapter07.xhtml#P7000497027000000000000000044D03" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -o intr int.c</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044D04" data-uri="chapter07.xhtml#P7000497027000000000000000044D04">Here is how to run the program from the bash shell:<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P7000497027000000000000000006667" epub:type="noteref" href="#P7000497027000000000000000006667">3</a></p><aside class="footnote pcalibre5 pcalibre" id="P7000497027000000000000000006667" data-uri="chapter07.xhtml#P7000497027000000000000000006667" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P7000497027000000000000000006667" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">3. </a></span>If you don't know what shell you are running, type <code id="P7000497027000000000000000044E57" data-uri="chapter07.xhtml#P7000497027000000000000000044E57" class="calibre10 pcalibre pcalibre1">printenv SHELL</code> at the command line.</p></aside>
<pre id="P7000497027000000000000000044D05" data-uri="chapter07.xhtml#P7000497027000000000000000044D05" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D06" data-uri="chapter07.xhtml#P7000497027000000000000000044D06" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">LD_PRELOAD="./mymalloc.so" . /intr</i>
malloc(32) = 0x1bf7010
free(0x1bf7010)</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044D07" data-uri="chapter07.xhtml#P7000497027000000000000000044D07">And here is how to run it from the <code id="P7000497027000000000000000044D08" data-uri="chapter07.xhtml#P7000497027000000000000000044D08" class="pcalibre1 calibre8 pcalibre">csh</code> or <code id="P7000497027000000000000000044D09" data-uri="chapter07.xhtml#P7000497027000000000000000044D09" class="pcalibre1 calibre8 pcalibre">tcsh</code> shells:</p>
<pre id="P7000497027000000000000000044D0A" data-uri="chapter07.xhtml#P7000497027000000000000000044D0A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D0B" data-uri="chapter07.xhtml#P7000497027000000000000000044D0B" class="calibre10 pcalibre pcalibre1">linux&gt; (<i class="calibre5 pcalibre pcalibre1">setenv LD_PRELOAD "./mymalloc.so"; . /intr; unsetenv LD_PRELOAD</i>)
malloc(32) = 0x2157010
free(0x2157010)</code></pre>
<p id="P7000497027000000000000000044D0C" data-uri="chapter07.xhtml#P7000497027000000000000000044D0C" class="pcalibre1 pcalibre calibre2">Notice that you can use <code id="P7000497027000000000000000044D0D" data-uri="chapter07.xhtml#P7000497027000000000000000044D0D" class="pcalibre1 calibre8 pcalibre">LD_PRELOAD</code> to interpose on the library calls of <i class="calibre5 pcalibre pcalibre1">any</i> executable program!</p>
<pre id="P7000497027000000000000000044D0E" data-uri="chapter07.xhtml#P7000497027000000000000000044D0E" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D0F" data-uri="chapter07.xhtml#P7000497027000000000000000044D0F" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">LD_PRELOAD="./mymalloc.so" /usr/bin/uptime</i>
malloc(568) = 0x21bb010
free(0x21bb010)
malloc(15) = 0x21bb010
malloc(568) = 0x21bb030
malloc(2255) = 0x21bb270
free(0x21bb030)
malloc(20) = 0x21bb030
malloc(20) = 0x21bb050
malloc(20) = 0x21bb070
malloc(20) = 0x21bb090
malloc(20) = 0x21bb0b0
malloc(384) = 0x21bb0d0
20:47:36 up 85 days, 6:04, 1 user, load average: 0.10, 0.04, 0.05</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006503" data-uri="chapter07.xhtml#P7000497027000000000000000006503">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006504" title="712" data-uri="chapter07.xhtml#P7000497027000000000000000006504" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000044D10" data-uri="chapter07.xhtml#P7000497027000000000000000044D10" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<pre id="P7000497027000000000000000044D11" data-uri="chapter07.xhtml#P7000497027000000000000000044D11" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044D12" data-uri="chapter07.xhtml#P7000497027000000000000000044D12" class="calibre10 pcalibre pcalibre1">
1	#ifdef RUNTIME
2	#define _GNU_SOURCE
3	#include &lt;stdio.h&gt;
4	#include &lt;stdlib.h&gt;
5	#include &lt;dlfcn.h&gt;
6
7	/* malloc wrapper function */
8	void *malloc(size_t size)
9	{
10		void *(*mallocp)(size_t size);
11		char *error;
12
13		mallocp = dlsym(RTLD_NEXT, "malloc"); /* Get address of libc malloc */
14		if ((error = dlerror()) != NULL) {
15			fputs(error, stderr);
16			exit(1);
17		}
18		char *ptr = mallocp(size); /* Call libc malloc */
19		printf("malloc(%d) = %pn", (int)size, ptr);
20		return ptr;
21	}
22
23	/* free wrapper function */
24	void free(void *ptr)
25	{
26		void (*freep)(void *) = NULL;
27		char *error;
28
29		if (!ptr)
30			return;
31
32		freep = dlsym(RTLD_NEXT, "free"); /* Get address of libc free */
33		if ((error = dlerror()) != NULL) {
34			fputs(error, stderr);
35			exit(1);
36		}
37		freep(ptr); /* Call libc free */
38		printf("free(%p)n", ptr);
39	}
40	#endif
</code></pre>
<p id="P7000497027000000000000000044D13" data-uri="chapter07.xhtml#P7000497027000000000000000044D13" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/interpose/mymalloc.c</i></p>
<figcaption id="P7000497027000000000000000044D14" data-uri="chapter07.xhtml#P7000497027000000000000000044D14" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044D15" data-uri="chapter07.xhtml#P7000497027000000000000000044D15" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">7.22 </span>Run-time interpositioning with <code id="P7000497027000000000000000044D16" data-uri="chapter07.xhtml#P7000497027000000000000000044D16" class="pcalibre1 calibre8 pcalibre">LD_PRELOAD</code>.</h1></header>
</figcaption>
</figure>
</section>
</section></body></html>
