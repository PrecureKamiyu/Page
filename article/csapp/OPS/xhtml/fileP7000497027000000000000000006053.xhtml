<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>7.4 Relocatable Object Files</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006053" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000447F6" data-uri="chapter07.xhtml#P70004970270000000000000000447F6" epub:type="title"><span class="pcalibre label pcalibre1">7.4 </span>Relocatable Object Files</h1></header>
<p id="P70004970270000000000000000447F7" data-uri="chapter07.xhtml#P70004970270000000000000000447F7" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006040.xhtml#P700049702700000000000000000604E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.3</span></a> shows the format of a typical ELF relocatable object file. The <i class="calibre5 pcalibre pcalibre1">ELF header</i> begins with a 16-byte sequence that describes the word size and byte ordering of the system that generated the file. The rest of the ELF header contains information that allows a linker to parse and interpret the object file. This includes the size of the ELF header, the object file type (e.g., relocatable, executable, or shared), the machine type (e.g., x86-64), the file offset of the section header table, and the size and number of entries in the section header table. The locations and sizes of the various sections are described by the <i class="calibre5 pcalibre pcalibre1">section header table</i>, which contains a fixed-size entry for each section in the object file.</p>
<p id="P70004970270000000000000000447F8" data-uri="chapter07.xhtml#P70004970270000000000000000447F8" class="pcalibre1 pcalibre calibre2">Sandwiched between the ELF header and the section header table are the sections themselves. A typical ELF relocatable object file contains the following sections:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000447F9" data-uri="chapter07.xhtml#P70004970270000000000000000447F9">
<li id="P70004970270000000000000000447FA" data-uri="chapter07.xhtml#P70004970270000000000000000447FA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000447FB" data-uri="chapter07.xhtml#P70004970270000000000000000447FB" class="calibre13 pcalibre pcalibre1"><code id="P70004970270000000000000000447FC" data-uri="chapter07.xhtml#P70004970270000000000000000447FC" class="pcalibre1 calibre8 pcalibre">.text</code> The machine code of the compiled program.</p></li>
<li id="P70004970270000000000000000447FD" data-uri="chapter07.xhtml#P70004970270000000000000000447FD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000447FE" data-uri="chapter07.xhtml#P70004970270000000000000000447FE" class="calibre13 pcalibre pcalibre1"><code id="P70004970270000000000000000447FF" data-uri="chapter07.xhtml#P70004970270000000000000000447FF" class="pcalibre1 calibre8 pcalibre">.rodata</code> Read-only data such as the format strings in <code id="P7000497027000000000000000044800" data-uri="chapter07.xhtml#P7000497027000000000000000044800" class="pcalibre1 calibre8 pcalibre">printf</code> statements, and jump tables for switch statements.</p></li>
<li id="P7000497027000000000000000044801" data-uri="chapter07.xhtml#P7000497027000000000000000044801" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044802" data-uri="chapter07.xhtml#P7000497027000000000000000044802" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044803" data-uri="chapter07.xhtml#P7000497027000000000000000044803" class="pcalibre1 calibre8 pcalibre">.data</code> <i class="calibre5 pcalibre pcalibre1">Initialized</i> global and static C variables. Local C variables are maintained at run time on the stack and do <i class="calibre5 pcalibre pcalibre1">not</i> appear in either the <code id="P7000497027000000000000000044804" data-uri="chapter07.xhtml#P7000497027000000000000000044804" class="pcalibre1 calibre8 pcalibre">.data</code> or <code id="P7000497027000000000000000044805" data-uri="chapter07.xhtml#P7000497027000000000000000044805" class="pcalibre1 calibre8 pcalibre">.bss</code> sections.</p></li>
<li id="P7000497027000000000000000044806" data-uri="chapter07.xhtml#P7000497027000000000000000044806" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044807" data-uri="chapter07.xhtml#P7000497027000000000000000044807" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044808" data-uri="chapter07.xhtml#P7000497027000000000000000044808" class="pcalibre1 calibre8 pcalibre">.bss</code> <i class="calibre5 pcalibre pcalibre1">Uninitialized</i> global and static C variables, along with any global or static variables that are initialized to zero. This section occupies no actual space in the object file; it is merely a placeholder. Object file formats distinguish between initialized and uninitialized variables for space efficiency: uninitialized variables do not have to occupy any actual disk space in the object file. At run time, these variables are allocated in memory with an initial value of zero.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000006067" data-uri="chapter07.xhtml#P7000497027000000000000000006067"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000044809" data-uri="chapter07.xhtml#P7000497027000000000000000044809" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006069" title="675" data-uri="chapter07.xhtml#P7000497027000000000000000006069" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Why is uninitialized data called <code id="P700049702700000000000000004480A" data-uri="chapter07.xhtml#P700049702700000000000000004480A" class="calibre55 pcalibre pcalibre1">.bss</code>?</h1></header>
<p id="P700049702700000000000000004480B" data-uri="chapter07.xhtml#P700049702700000000000000004480B" class="calibre13 pcalibre pcalibre1">The use of the term <code id="P700049702700000000000000004480C" data-uri="chapter07.xhtml#P700049702700000000000000004480C" class="pcalibre1 calibre8 pcalibre">.bss</code> to denote uninitialized data is universal. It was originally an acronym for the "block started by symbol" directive from the IBM 704 assembly language (circa 1957) and the acronym has stuck. A simple way to remember the difference between the <code id="P700049702700000000000000004480D" data-uri="chapter07.xhtml#P700049702700000000000000004480D" class="pcalibre1 calibre8 pcalibre">.data</code> and <code id="P700049702700000000000000004480E" data-uri="chapter07.xhtml#P700049702700000000000000004480E" class="pcalibre1 calibre8 pcalibre">.bss</code> sections is to think of "bss" as an abbreviation for "Better Save Space!"</p>
</aside></li>
<li id="P700049702700000000000000004480F" data-uri="chapter07.xhtml#P700049702700000000000000004480F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044810" data-uri="chapter07.xhtml#P7000497027000000000000000044810" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044811" data-uri="chapter07.xhtml#P7000497027000000000000000044811" class="pcalibre1 calibre8 pcalibre">.symtab</code> A <i class="calibre5 pcalibre pcalibre1">symbol table</i> with information about functions and global variables that are defined and referenced in the program. Some programmers mistakenly believe that a program must be compiled with the -<code id="P7000497027000000000000000044812" data-uri="chapter07.xhtml#P7000497027000000000000000044812" class="pcalibre1 calibre8 pcalibre">g</code> option to get symbol table information. In fact, every relocatable object file has a symbol table in <code id="P7000497027000000000000000044813" data-uri="chapter07.xhtml#P7000497027000000000000000044813" class="pcalibre1 calibre8 pcalibre">.symtab</code> (unless the programmer has specifically removed it with the <code id="P7000497027000000000000000044814" data-uri="chapter07.xhtml#P7000497027000000000000000044814" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">strip</span></code> command). However, unlike the symbol table inside a compiler, the <code id="P7000497027000000000000000044815" data-uri="chapter07.xhtml#P7000497027000000000000000044815" class="pcalibre1 calibre8 pcalibre">.symtab</code> symbol table does not contain entries for local variables.</p></li>
<li id="P7000497027000000000000000044816" data-uri="chapter07.xhtml#P7000497027000000000000000044816" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044817" data-uri="chapter07.xhtml#P7000497027000000000000000044817" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044818" data-uri="chapter07.xhtml#P7000497027000000000000000044818" class="pcalibre1 calibre8 pcalibre">.rel.text</code> A list of locations in the <code id="P7000497027000000000000000044819" data-uri="chapter07.xhtml#P7000497027000000000000000044819" class="pcalibre1 calibre8 pcalibre">.text</code> section that will need to be modified when the linker combines this object file with others. In general, any instruction that calls an external function or references a global variable will need to be modified. On the other hand, instructions that call local functions do not need to be modified. Note that relocation information is not needed in executable object files, and is usually omitted unless the user explicitly instructs the linker to include it.</p></li>
<li id="P700049702700000000000000004481A" data-uri="chapter07.xhtml#P700049702700000000000000004481A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004481B" data-uri="chapter07.xhtml#P700049702700000000000000004481B" class="calibre13 pcalibre pcalibre1"><code id="P700049702700000000000000004481C" data-uri="chapter07.xhtml#P700049702700000000000000004481C" class="pcalibre1 calibre8 pcalibre">.rel.data</code> Relocation information for any global variables that are referenced or defined by the module. In general, any initialized global variable whose initial value is the address of a global variable or externally defined function will need to be modified.</p></li>
<li id="P700049702700000000000000004481D" data-uri="chapter07.xhtml#P700049702700000000000000004481D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004481E" data-uri="chapter07.xhtml#P700049702700000000000000004481E" class="calibre13 pcalibre pcalibre1"><code id="P700049702700000000000000004481F" data-uri="chapter07.xhtml#P700049702700000000000000004481F" class="pcalibre1 calibre8 pcalibre">.debug</code> A debugging symbol table with entries for local variables and typedefs defined in the program, global variables defined and referenced in the program, and the original C source file. It is only present if the compiler driver is invoked with the -<code id="P7000497027000000000000000044820" data-uri="chapter07.xhtml#P7000497027000000000000000044820" class="pcalibre1 calibre8 pcalibre">g</code> option.</p></li>
<li id="P7000497027000000000000000044821" data-uri="chapter07.xhtml#P7000497027000000000000000044821" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044822" data-uri="chapter07.xhtml#P7000497027000000000000000044822" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044823" data-uri="chapter07.xhtml#P7000497027000000000000000044823" class="pcalibre1 calibre8 pcalibre">.line</code> A mapping between line numbers in the original C source program and machine code instructions in the <code id="P7000497027000000000000000044824" data-uri="chapter07.xhtml#P7000497027000000000000000044824" class="pcalibre1 calibre8 pcalibre">.text</code> section. It is only present if the compiler driver is invoked with the -<code id="P7000497027000000000000000044825" data-uri="chapter07.xhtml#P7000497027000000000000000044825" class="pcalibre1 calibre8 pcalibre">g</code> option.</p></li>
<li id="P7000497027000000000000000044826" data-uri="chapter07.xhtml#P7000497027000000000000000044826" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044827" data-uri="chapter07.xhtml#P7000497027000000000000000044827" class="calibre13 pcalibre pcalibre1"><code id="P7000497027000000000000000044828" data-uri="chapter07.xhtml#P7000497027000000000000000044828" class="pcalibre1 calibre8 pcalibre">.strtab</code> A string table for the symbol tables in the <code id="P7000497027000000000000000044829" data-uri="chapter07.xhtml#P7000497027000000000000000044829" class="pcalibre1 calibre8 pcalibre">.symtab</code> and <code id="P700049702700000000000000004482A" data-uri="chapter07.xhtml#P700049702700000000000000004482A" class="pcalibre1 calibre8 pcalibre">.debug</code> sections and for the section names in the section headers. A string table is a sequence of null-terminated character strings.</p></li>
</ul>
</section></body></html>
