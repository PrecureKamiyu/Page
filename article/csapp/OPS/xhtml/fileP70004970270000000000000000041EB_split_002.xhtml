<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>4.5 Pipelined Y86-64 Implementations</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000041EB" class="pcalibre halftitlepage pcalibre1">
<section id="P70004970270000000000000000043A8" data-uri="chapter04.xhtml#P70004970270000000000000000043A8" class="pcalibre halftitlepage pcalibre1">
<section id="P70004970270000000000000000043C9" data-uri="chapter04.xhtml#P70004970270000000000000000043C9" class="pcalibre halftitlepage pcalibre1">
<section id="P70004970270000000000000000043CC" data-uri="chapter04.xhtml#P70004970270000000000000000043CC" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042A0E" data-uri="chapter04.xhtml#P7000497027000000000000000042A0E" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.31 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000480E">490</a>)</h1></header>
<p id="P7000497027000000000000000042A0F" data-uri="chapter04.xhtml#P7000497027000000000000000042A0F" class="pcalibre1 pcalibre calibre2">The block labeled "dstE" in the decode stage generates the register ID for the E port of the register file, based on fields from the fetched instruction in pipeline register D. The resulting signal is named d_dstE in the HCL description of PIPE. Write HCL code for this signal, based on the HCL description of the SEQ signal dstE. (See the decode stage for SEQ in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004038"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.3.4</span></a>.) Do not concern yourself with the logic to implement conditional moves yet.</p>
</section>
<p id="P7000497027000000000000000042A10" data-uri="chapter04.xhtml#P7000497027000000000000000042A10" class="pcalibre1 pcalibre calibre2">Most of the complexity of this stage is associated with the forwarding logic. As mentioned earlier, the block labeled "Sel+Fwd A" serves two roles. It merges the valP signal into the valA signal for later stages in order to reduce the amount of state in the pipeline register. It also implements the forwarding logic for source operand valA.</p>
<p id="P7000497027000000000000000042A11" data-uri="chapter04.xhtml#P7000497027000000000000000042A11" class="pcalibre1 pcalibre calibre2">The merging of signals valA and valP exploits the fact that only the <code id="P7000497027000000000000000042A12" data-uri="chapter04.xhtml#P7000497027000000000000000042A12" class="pcalibre1 calibre8 pcalibre">call</code> and jump instructions need the value of valP in later stages, and these instructions</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000043D2" data-uri="chapter04.xhtml#P70004970270000000000000000043D2">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000043D3" title="450" data-uri="chapter04.xhtml#P70004970270000000000000000043D3" epub:type="pagebreak"></span><img alt="A diagram illustrates structure between pipelines D and E." id="P7000497027000000000000000042A13" data-uri="P700049702700000000000000000B6FF" src="../images/p450-1.png" class="calibre156 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042A14" data-uri="chapter04.xhtml#P7000497027000000000000000042A14" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042A15" data-uri="chapter04.xhtml#P7000497027000000000000000042A15" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.58 </span>PIPE decode and write-back stage logic.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042A16" data-uri="chapter04.xhtml#P7000497027000000000000000042A16"><p id="P7000497027000000000000000042A17" data-uri="chapter04.xhtml#P7000497027000000000000000042A17" class="pcalibre1 pcalibre calibre2"> No instruction requires both valP and the value read from register port A, and so these two can be merged to form the signal valA for later stages. The block labeled "Sel+Fwd A" performs this task and also implements the forwarding logic for source operand valA. The block labeled "Fwd B" implements the forwarding logic for source operand valB. The register write locations are specified by the dstE and dstM signals from the write-back stage rather than from the decode stage, since it is writing the results of the instruction currently in the write-back stage.</p><p id="P7000497027000000000000000042A18" data-uri="chapter04.xhtml#P7000497027000000000000000042A18" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022CF4" data-uri="chapter04.xhtml#P7000497027000000000000000022CF4">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042A19" data-uri="chapter04.xhtml#P7000497027000000000000000042A19" class="pcalibre1 pcalibre calibre2">Inputs to pipeline E are summarized from left to right below.</p>
<ul id="P7000497027000000000000000042A1A" data-uri="chapter04.xhtml#P7000497027000000000000000042A1A" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042A1B" data-uri="chapter04.xhtml#P7000497027000000000000000042A1B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A1C" data-uri="chapter04.xhtml#P7000497027000000000000000042A1C" class="pcalibre calibre3 pcalibre1">Stat from stat in D</p></li>
<li id="P7000497027000000000000000042A1D" data-uri="chapter04.xhtml#P7000497027000000000000000042A1D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A1E" data-uri="chapter04.xhtml#P7000497027000000000000000042A1E" class="pcalibre calibre3 pcalibre1">Icode from icode in D, which is input to Sel+Fwd A and dstE, dstM, srcA, and srcB</p></li>
<li id="P7000497027000000000000000042A1F" data-uri="chapter04.xhtml#P7000497027000000000000000042A1F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A20" data-uri="chapter04.xhtml#P7000497027000000000000000042A20" class="pcalibre calibre3 pcalibre1">Ifun from ifun in D</p></li>
<li id="P7000497027000000000000000042A21" data-uri="chapter04.xhtml#P7000497027000000000000000042A21" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A22" data-uri="chapter04.xhtml#P7000497027000000000000000042A22" class="pcalibre calibre3 pcalibre1">valC from valC in D</p></li>
<li id="P7000497027000000000000000042A23" data-uri="chapter04.xhtml#P7000497027000000000000000042A23" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A24" data-uri="chapter04.xhtml#P7000497027000000000000000042A24" class="pcalibre calibre3 pcalibre1">valA from Sel+Fwd, which receives input from:</p>
<ul id="P7000497027000000000000000042A25" data-uri="chapter04.xhtml#P7000497027000000000000000042A25" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042A26" data-uri="chapter04.xhtml#P7000497027000000000000000042A26" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A27" data-uri="chapter04.xhtml#P7000497027000000000000000042A27" class="pcalibre calibre3 pcalibre1">icode in D</p></li>
<li id="P7000497027000000000000000042A28" data-uri="chapter04.xhtml#P7000497027000000000000000042A28" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A29" data-uri="chapter04.xhtml#P7000497027000000000000000042A29" class="pcalibre calibre3 pcalibre1">valP in D</p></li>
<li id="P7000497027000000000000000042A2A" data-uri="chapter04.xhtml#P7000497027000000000000000042A2A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A2B" data-uri="chapter04.xhtml#P7000497027000000000000000042A2B" class="pcalibre calibre3 pcalibre1">d_rvalA from port A in Register file, which receives inputs from:</p>
<ul id="P7000497027000000000000000042A2C" data-uri="chapter04.xhtml#P7000497027000000000000000042A2C" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000042A2D" data-uri="chapter04.xhtml#P7000497027000000000000000042A2D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A2E" data-uri="chapter04.xhtml#P7000497027000000000000000042A2E" class="pcalibre calibre3 pcalibre1">srcA, with input d_srcA from icode and rA in D</p></li>
<li id="P7000497027000000000000000042A2F" data-uri="chapter04.xhtml#P7000497027000000000000000042A2F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A30" data-uri="chapter04.xhtml#P7000497027000000000000000042A30" class="pcalibre calibre3 pcalibre1">srcB, with input d_srcB from icode and rB in D</p></li>
<li id="P7000497027000000000000000042A31" data-uri="chapter04.xhtml#P7000497027000000000000000042A31" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A32" data-uri="chapter04.xhtml#P7000497027000000000000000042A32" class="pcalibre calibre3 pcalibre1">dstM with input W_dstM</p></li>
<li id="P7000497027000000000000000042A33" data-uri="chapter04.xhtml#P7000497027000000000000000042A33" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A34" data-uri="chapter04.xhtml#P7000497027000000000000000042A34" class="pcalibre calibre3 pcalibre1">M with input W_valM</p></li>
<li id="P7000497027000000000000000042A35" data-uri="chapter04.xhtml#P7000497027000000000000000042A35" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A36" data-uri="chapter04.xhtml#P7000497027000000000000000042A36" class="pcalibre calibre3 pcalibre1">dstE with input W_dstE</p></li>
<li id="P7000497027000000000000000042A37" data-uri="chapter04.xhtml#P7000497027000000000000000042A37" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A38" data-uri="chapter04.xhtml#P7000497027000000000000000042A38" class="pcalibre calibre3 pcalibre1">E with input W_valE</p></li>
</ul></li>
<li id="P7000497027000000000000000042A39" data-uri="chapter04.xhtml#P7000497027000000000000000042A39" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A3A" data-uri="chapter04.xhtml#P7000497027000000000000000042A3A" class="pcalibre calibre3 pcalibre1">E_dstE, e_valE, M_dstE, M_dstM, m_valM, W_dstM, W_valM, W_dstE, W_valE</p></li>
</ul></li>
<li id="P7000497027000000000000000042A3B" data-uri="chapter04.xhtml#P7000497027000000000000000042A3B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A3C" data-uri="chapter04.xhtml#P7000497027000000000000000042A3C" class="pcalibre calibre3 pcalibre1">valB from Fwd B, which receives input from:</p>
<ul id="P7000497027000000000000000042A3D" data-uri="chapter04.xhtml#P7000497027000000000000000042A3D" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042A3E" data-uri="chapter04.xhtml#P7000497027000000000000000042A3E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A3F" data-uri="chapter04.xhtml#P7000497027000000000000000042A3F" class="pcalibre calibre3 pcalibre1">d_rvalB from port B in Register file</p></li>
<li id="P7000497027000000000000000042A40" data-uri="chapter04.xhtml#P7000497027000000000000000042A40" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A41" data-uri="chapter04.xhtml#P7000497027000000000000000042A41" class="pcalibre calibre3 pcalibre1">E_dstE, e_valE, M_dstE, M_dstM, m_valM, W_dstM, W_valM, W_dstE, W_valE</p></li>
</ul></li>
<li id="P7000497027000000000000000042A42" data-uri="chapter04.xhtml#P7000497027000000000000000042A42" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A43" data-uri="chapter04.xhtml#P7000497027000000000000000042A43" class="pcalibre calibre3 pcalibre1">dstE from icode and rA in D</p></li>
<li id="P7000497027000000000000000042A44" data-uri="chapter04.xhtml#P7000497027000000000000000042A44" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A45" data-uri="chapter04.xhtml#P7000497027000000000000000042A45" class="pcalibre calibre3 pcalibre1">dstE from icode and rB in D</p></li>
<li id="P7000497027000000000000000042A46" data-uri="chapter04.xhtml#P7000497027000000000000000042A46" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A47" data-uri="chapter04.xhtml#P7000497027000000000000000042A47" class="pcalibre calibre3 pcalibre1">srcA from icode and rA in D</p></li>
<li id="P7000497027000000000000000042A48" data-uri="chapter04.xhtml#P7000497027000000000000000042A48" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042A49" data-uri="chapter04.xhtml#P7000497027000000000000000042A49" class="pcalibre calibre3 pcalibre1">srcB from icode and rB in D</p></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042A4A" data-uri="chapter04.xhtml#P7000497027000000000000000042A4A">do not need the value read from the A port of the register file. This selection is controlled by the icode signal for this stage. When signal D_icode matches the instruction code for either <code id="P7000497027000000000000000042A4B" data-uri="chapter04.xhtml#P7000497027000000000000000042A4B" class="pcalibre1 calibre8 pcalibre">call</code> or <code id="P7000497027000000000000000042A4C" data-uri="chapter04.xhtml#P7000497027000000000000000042A4C" class="pcalibre1 calibre8 pcalibre">jXX</code>, this block should select D_valP as its output.</p>
<p id="P7000497027000000000000000042A4D" data-uri="chapter04.xhtml#P7000497027000000000000000042A4D" class="pcalibre1 pcalibre calibre2">As mentioned in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004251"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.5</span></a>, there are five different forwarding sources, each with a data word and a destination register ID:</p>


<table id="P7000497027000000000000000042A4E" data-uri="chapter04.xhtml#P7000497027000000000000000042A4E" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042A4F" data-uri="chapter04.xhtml#P7000497027000000000000000042A4F" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000043DF" title="451" data-uri="chapter04.xhtml#P70004970270000000000000000043DF" epub:type="pagebreak"></span>Data word	</th><th id="P7000497027000000000000000042A50" data-uri="chapter04.xhtml#P7000497027000000000000000042A50" class="calibre18 pcalibre pcalibre1">Register ID	</th><th id="P7000497027000000000000000042A51" data-uri="chapter04.xhtml#P7000497027000000000000000042A51" class="calibre18 pcalibre pcalibre1">Source description</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042A52" data-uri="chapter04.xhtml#P7000497027000000000000000042A52" class="calibre20 pcalibre pcalibre1">e_valE	</td><td id="P7000497027000000000000000042A53" data-uri="chapter04.xhtml#P7000497027000000000000000042A53" class="calibre20 pcalibre pcalibre1">e_dstE	</td><td id="P7000497027000000000000000042A54" data-uri="chapter04.xhtml#P7000497027000000000000000042A54" class="calibre20 pcalibre pcalibre1">ALU output</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042A55" data-uri="chapter04.xhtml#P7000497027000000000000000042A55" class="calibre20 pcalibre pcalibre1">m_valM</td><td id="P7000497027000000000000000042A56" data-uri="chapter04.xhtml#P7000497027000000000000000042A56" class="calibre20 pcalibre pcalibre1">M_dstM</td><td id="P7000497027000000000000000042A57" data-uri="chapter04.xhtml#P7000497027000000000000000042A57" class="calibre20 pcalibre pcalibre1">Memory output</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042A58" data-uri="chapter04.xhtml#P7000497027000000000000000042A58" class="calibre20 pcalibre pcalibre1">M_valE</td><td id="P7000497027000000000000000042A59" data-uri="chapter04.xhtml#P7000497027000000000000000042A59" class="calibre20 pcalibre pcalibre1">M_dstE</td><td id="P7000497027000000000000000042A5A" data-uri="chapter04.xhtml#P7000497027000000000000000042A5A" class="calibre20 pcalibre pcalibre1">Pending write to port E in memory stage</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042A5B" data-uri="chapter04.xhtml#P7000497027000000000000000042A5B" class="calibre20 pcalibre pcalibre1">W_valM</td><td id="P7000497027000000000000000042A5C" data-uri="chapter04.xhtml#P7000497027000000000000000042A5C" class="calibre20 pcalibre pcalibre1">W_dstM</td><td id="P7000497027000000000000000042A5D" data-uri="chapter04.xhtml#P7000497027000000000000000042A5D" class="calibre20 pcalibre pcalibre1">Pending write to port M in write-back stage</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042A5E" data-uri="chapter04.xhtml#P7000497027000000000000000042A5E" class="calibre20 pcalibre pcalibre1">W_valE</td><td id="P7000497027000000000000000042A5F" data-uri="chapter04.xhtml#P7000497027000000000000000042A5F" class="calibre20 pcalibre pcalibre1">W_dstE</td><td id="P7000497027000000000000000042A60" data-uri="chapter04.xhtml#P7000497027000000000000000042A60" class="calibre20 pcalibre pcalibre1">Pending write to port E in write-back stage</td></tr>
</tbody>
</table>
<p id="P7000497027000000000000000042A61" data-uri="chapter04.xhtml#P7000497027000000000000000042A61" class="pcalibre1 pcalibre calibre2">If none of the forwarding conditions hold, the block should select d_rvalA, the value read from register port A, as its output.</p>
<p id="P7000497027000000000000000042A62" data-uri="chapter04.xhtml#P7000497027000000000000000042A62" class="pcalibre1 pcalibre calibre2">Putting all of this together, we get the following HCL description for the new value of valA for pipeline register E:</p>
<pre id="P7000497027000000000000000042A63" data-uri="chapter04.xhtml#P7000497027000000000000000042A63" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042A64" data-uri="chapter04.xhtml#P7000497027000000000000000042A64" class="calibre10 pcalibre pcalibre1">word d_valA = [
	D_icode in { ICALL, IJXX } : D_valP; # Use incremented PC
	d_srcA == e_dstE : e_valE;	# Forward valE from execute
	d_srcA == M_dstM : m_valM;	# Forward valM from memory
	d_srcA == M_dstE : M_valE;	# Forward valE from memory
	d_srcA == W_dstM : W_valM;	# Forward valM from write back
	d_srcA == W_dstE : W_valE;	# Forward valE from write back
	1 : d_rvalA; # Use value read from register file
];
</code>
</pre>
<p id="P7000497027000000000000000042A65" data-uri="chapter04.xhtml#P7000497027000000000000000042A65" class="pcalibre1 pcalibre calibre2">The priority given to the five forwarding sources in the above HCL code is very important. This priority is determined in the HCL code by the order in which the five destination register IDs are tested. If any order other than the one shown were chosen, the pipeline would behave incorrectly for some programs. <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.59 </span>shows an example of a program that requires a correct setting of priority among the forwarding sources in the execute and memory stages. In this program, the first two instructions write to register <code id="P7000497027000000000000000042A66" data-uri="chapter04.xhtml#P7000497027000000000000000042A66" class="pcalibre1 calibre8 pcalibre">%rdx</code>, while the third uses this register as its source operand. When the <code id="P7000497027000000000000000042A67" data-uri="chapter04.xhtml#P7000497027000000000000000042A67" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction reaches the decode stage in cycle 4, the forwarding logic must choose between two values destined for its source register. Which one should it choose? To set the priority, we must consider the behavior of the machine-language program when it is executed one instruction at a time. The first <code id="P7000497027000000000000000042A68" data-uri="chapter04.xhtml#P7000497027000000000000000042A68" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction would set register <code id="P7000497027000000000000000042A69" data-uri="chapter04.xhtml#P7000497027000000000000000042A69" class="pcalibre1 calibre8 pcalibre">%rdx</code> to 10, the second would set the register to 3, and then the <code id="P7000497027000000000000000042A6A" data-uri="chapter04.xhtml#P7000497027000000000000000042A6A" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction would read 3 from <code id="P7000497027000000000000000042A6B" data-uri="chapter04.xhtml#P7000497027000000000000000042A6B" class="pcalibre1 calibre8 pcalibre">%rdx</code>. To imitate this behavior, our pipelined implementation should always give priority to the forwarding source in the earliest pipeline stage, since it holds the latest instruction in the program sequence setting the register. Thus, the logic in the HCL code above first tests the forwarding source in the execute stage, then those in the memory stage, and finally the sources in the write-back stage. The forwarding priority between the two sources in either the memory or the write-back stages is only a concern for the instruction popq <code id="P7000497027000000000000000042A6C" data-uri="chapter04.xhtml#P7000497027000000000000000042A6C" class="pcalibre1 calibre8 pcalibre">%rsp</code>, since only this instruction can attempt two simultaneous writes to the same register.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000043FD" data-uri="chapter04.xhtml#P70004970270000000000000000043FD">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000043FE" title="452" data-uri="chapter04.xhtml#P70004970270000000000000000043FE" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipeline demonstration of forwarding priority." id="P7000497027000000000000000042A6D" data-uri="P700049702700000000000000000B700" src="../images/p452-1.png" class="calibre157 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042A6E" data-uri="chapter04.xhtml#P7000497027000000000000000042A6E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042A6F" data-uri="chapter04.xhtml#P7000497027000000000000000042A6F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.59 </span>Demonstration of forwarding priority.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042A70" data-uri="chapter04.xhtml#P7000497027000000000000000042A70"><p id="P7000497027000000000000000042A71" data-uri="chapter04.xhtml#P7000497027000000000000000042A71" class="pcalibre calibre3 pcalibre1">In cycle 4, values for <code id="P7000497027000000000000000042A72" data-uri="chapter04.xhtml#P7000497027000000000000000042A72" class="pcalibre1 calibre8 pcalibre">%rdx</code> are available from both the execute and memory stages. The forwarding logic should choose the one in the execute stage, since it represents the most recently generated value for this register.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022D4F" data-uri="chapter04.xhtml#P7000497027000000000000000022D4F">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042A73" data-uri="chapter04.xhtml#P7000497027000000000000000042A73" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042A74" data-uri="chapter04.xhtml#P7000497027000000000000000042A74">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042A75" data-uri="chapter04.xhtml#P7000497027000000000000000042A75" class="calibre18 pcalibre pcalibre1">Prog8</th>
<th id="P7000497027000000000000000042A76" data-uri="chapter04.xhtml#P7000497027000000000000000042A76" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000042A77" data-uri="chapter04.xhtml#P7000497027000000000000000042A77" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000042A78" data-uri="chapter04.xhtml#P7000497027000000000000000042A78" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042A79" data-uri="chapter04.xhtml#P7000497027000000000000000042A79" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042A7A" data-uri="chapter04.xhtml#P7000497027000000000000000042A7A" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042A7B" data-uri="chapter04.xhtml#P7000497027000000000000000042A7B" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042A7C" data-uri="chapter04.xhtml#P7000497027000000000000000042A7C" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P7000497027000000000000000042A7D" data-uri="chapter04.xhtml#P7000497027000000000000000042A7D" class="calibre18 pcalibre pcalibre1">8</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042A7E" data-uri="chapter04.xhtml#P7000497027000000000000000042A7E" class="calibre20 pcalibre pcalibre1">0x000: irmovq $10, %rdx</td>
<td id="P7000497027000000000000000042A7F" data-uri="chapter04.xhtml#P7000497027000000000000000042A7F" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042A80" data-uri="chapter04.xhtml#P7000497027000000000000000042A80" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042A81" data-uri="chapter04.xhtml#P7000497027000000000000000042A81" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042A82" data-uri="chapter04.xhtml#P7000497027000000000000000042A82" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042A83" data-uri="chapter04.xhtml#P7000497027000000000000000042A83" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042A84" data-uri="chapter04.xhtml#P7000497027000000000000000042A84" class="calibre20 pcalibre pcalibre1">0x00a: irmovq $3, %rdx</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042A85" data-uri="chapter04.xhtml#P7000497027000000000000000042A85" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042A86" data-uri="chapter04.xhtml#P7000497027000000000000000042A86" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042A87" data-uri="chapter04.xhtml#P7000497027000000000000000042A87" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042A88" data-uri="chapter04.xhtml#P7000497027000000000000000042A88" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042A89" data-uri="chapter04.xhtml#P7000497027000000000000000042A89" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042A8A" data-uri="chapter04.xhtml#P7000497027000000000000000042A8A" class="calibre20 pcalibre pcalibre1">0x014: rrmovq %rdx, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042A8B" data-uri="chapter04.xhtml#P7000497027000000000000000042A8B" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042A8C" data-uri="chapter04.xhtml#P7000497027000000000000000042A8C" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042A8D" data-uri="chapter04.xhtml#P7000497027000000000000000042A8D" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042A8E" data-uri="chapter04.xhtml#P7000497027000000000000000042A8E" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042A8F" data-uri="chapter04.xhtml#P7000497027000000000000000042A8F" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042A90" data-uri="chapter04.xhtml#P7000497027000000000000000042A90" class="calibre20 pcalibre pcalibre1"> 0x016: halt </td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042A91" data-uri="chapter04.xhtml#P7000497027000000000000000042A91" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042A92" data-uri="chapter04.xhtml#P7000497027000000000000000042A92" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042A93" data-uri="chapter04.xhtml#P7000497027000000000000000042A93" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042A94" data-uri="chapter04.xhtml#P7000497027000000000000000042A94" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042A95" data-uri="chapter04.xhtml#P7000497027000000000000000042A95" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000042A96" data-uri="chapter04.xhtml#P7000497027000000000000000042A96" class="pcalibre calibre3 pcalibre1">Cycle 4 is illustrated with M M_dstE = %rdx, M_valE = 10, E E_dstE = %rdx, e_valE ← 0 + 3 = 3, and D srcA = %rdx, valA ← e_valE = 3.</p>
</details>
</figcaption>
</figure>
<section id="P7000497027000000000000000004405" data-uri="chapter04.xhtml#P7000497027000000000000000004405" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042A97" data-uri="chapter04.xhtml#P7000497027000000000000000042A97" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.32 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000480E">490</a>)</h1></header>
<p id="P7000497027000000000000000042A98" data-uri="chapter04.xhtml#P7000497027000000000000000042A98" class="pcalibre1 pcalibre calibre2">Suppose the order of the third and fourth cases (the two forwarding sources from the memory stage) in the HCL code for d_valA were reversed. Describe the resulting behavior of the <code id="P7000497027000000000000000042A99" data-uri="chapter04.xhtml#P7000497027000000000000000042A99" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction (line 5) for the following program:</p>
<pre id="P7000497027000000000000000042A9A" data-uri="chapter04.xhtml#P7000497027000000000000000042A9A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042A9B" data-uri="chapter04.xhtml#P7000497027000000000000000042A9B" class="calibre10 pcalibre pcalibre1">1	irmovq $5, %rdx
2	<code id="P7000497027000000000000000042A9C" data-uri="chapter04.xhtml#P7000497027000000000000000042A9C" class="pcalibre1 calibre8 pcalibre">irmovq</code> $0x100,%rsp
3	rmmovq %rdx,0(%rsp) popq%rsp
5	<code id="P7000497027000000000000000042A9D" data-uri="chapter04.xhtml#P7000497027000000000000000042A9D" class="pcalibre1 calibre8 pcalibre">rrmovq</code> %rsp,%rax
</code>
</pre>
</section>
<section id="P700049702700000000000000000440D" data-uri="chapter04.xhtml#P700049702700000000000000000440D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042A9E" data-uri="chapter04.xhtml#P7000497027000000000000000042A9E" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.33 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000482C">491</a>)</h1></header>
<p id="P7000497027000000000000000042A9F" data-uri="chapter04.xhtml#P7000497027000000000000000042A9F" class="pcalibre1 pcalibre calibre2">Suppose the order of the fifth and sixth cases (the two forwarding sources from the write-back stage) in the HCL code for d_valA were reversed. Write a Y86-64 program that would be executed incorrectly. Describe how the error would occur and its effect on the program behavior.</p>
</section>

<section id="P7000497027000000000000000004410" data-uri="chapter04.xhtml#P7000497027000000000000000004410" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042AA0" data-uri="chapter04.xhtml#P7000497027000000000000000042AA0" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004412" title="453" data-uri="chapter04.xhtml#P7000497027000000000000000004412" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.34 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000482C">491</a>)</h1></header>
<p id="P7000497027000000000000000042AA1" data-uri="chapter04.xhtml#P7000497027000000000000000042AA1" class="pcalibre1 pcalibre calibre2">Write HCL code for the signal d_valB, giving the value for source operand valB supplied to pipeline register E.</p>
</section>
<p id="P7000497027000000000000000042AA2" data-uri="chapter04.xhtml#P7000497027000000000000000042AA2" class="pcalibre1 pcalibre calibre2">One small part of the write-back stage remains. As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004349"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.52</span></a>, the overall processor status Stat is computed by a block based on the status value in pipeline registerW. Recall from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003AB3"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.1.1</span></a> that the code should indicate either normal operation (<code id="P7000497027000000000000000042AA3" data-uri="chapter04.xhtml#P7000497027000000000000000042AA3" class="pcalibre1 calibre8 pcalibre">AOK</code>) or one of the three exception conditions. Since pipeline registerWholds the state of the most recently completed instruction, it is natural to use this value as an indication of the overall processor status. The only special case to consider is when there is a bubble in the write-back stage. This is part of normal operation, and so we want the status code to be <code id="P7000497027000000000000000042AA4" data-uri="chapter04.xhtml#P7000497027000000000000000042AA4" class="pcalibre1 calibre8 pcalibre">AOK</code> for this case as well:</p>
<pre id="P7000497027000000000000000042AA5" data-uri="chapter04.xhtml#P7000497027000000000000000042AA5" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042AA6" data-uri="chapter04.xhtml#P7000497027000000000000000042AA6" class="calibre10 pcalibre pcalibre1">word Stat = [
	W_stat == SBUB : SAOK;
	1 : W_stat;
];
</code></pre>
</section>
<section id="P7000497027000000000000000004419" data-uri="chapter04.xhtml#P7000497027000000000000000004419" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042AA7" data-uri="chapter04.xhtml#P7000497027000000000000000042AA7" epub:type="title">Execute Stage</h1></header>
<p id="P7000497027000000000000000042AA8" data-uri="chapter04.xhtml#P7000497027000000000000000042AA8" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000441C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.60</span></a> shows the execute stage logic for PIPE. The hardware units and the logic blocks are identical to those in SEQ, with an appropriate renaming of signals. We can see the signals e_valE and e_dstE directed toward the decode stage as one of the forwarding sources. One difference is that the logic labeled "Set CC," which determineswhether or not to update the condition codes, has signalsm_stat and W_stat as inputs. These signals are used to detect cases where an instruction</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000441C" data-uri="chapter04.xhtml#P700049702700000000000000000441C">
<img alt="A diagram illustrates structure between pipelines E and M." id="P7000497027000000000000000042AA9" data-uri="P700049702700000000000000000B701" src="../images/p453-1.png" class="pcalibre1 calibre158 pcalibre"/>
<figcaption id="P7000497027000000000000000042AAA" data-uri="chapter04.xhtml#P7000497027000000000000000042AAA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042AAB" data-uri="chapter04.xhtml#P7000497027000000000000000042AAB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.60 </span>PIPE execute stage logic.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042AAC" data-uri="chapter04.xhtml#P7000497027000000000000000042AAC"><p id="P7000497027000000000000000042AAD" data-uri="chapter04.xhtml#P7000497027000000000000000042AAD" class="pcalibre1 pcalibre calibre2"> This part of the design is very similar to the logic in the SEQ implementation.</p><p id="P7000497027000000000000000042AAE" data-uri="chapter04.xhtml#P7000497027000000000000000042AAE" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022D8B" data-uri="chapter04.xhtml#P7000497027000000000000000022D8B">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042AAF" data-uri="chapter04.xhtml#P7000497027000000000000000042AAF" class="pcalibre1 pcalibre calibre2">Inputs to pipeline M are summarized from left to right below.</p>
<ul id="P7000497027000000000000000042AB0" data-uri="chapter04.xhtml#P7000497027000000000000000042AB0" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042AB1" data-uri="chapter04.xhtml#P7000497027000000000000000042AB1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AB2" data-uri="chapter04.xhtml#P7000497027000000000000000042AB2" class="pcalibre calibre3 pcalibre1">Stat from stat in D</p></li>
<li id="P7000497027000000000000000042AB3" data-uri="chapter04.xhtml#P7000497027000000000000000042AB3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AB4" data-uri="chapter04.xhtml#P7000497027000000000000000042AB4" class="pcalibre calibre3 pcalibre1">Icode from icode in E, which also has output to Set CC (input for CC with inputs from W_stat and m_stat), ALU A, ALU B, and ALU fun. (inputs for ALU), and dstE</p></li>
<li id="P7000497027000000000000000042AB5" data-uri="chapter04.xhtml#P7000497027000000000000000042AB5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AB6" data-uri="chapter04.xhtml#P7000497027000000000000000042AB6" class="pcalibre calibre3 pcalibre1">Cnd with input e_Cnd from cond, which has input from ifun in D and output to dstE</p></li>
<li id="P7000497027000000000000000042AB7" data-uri="chapter04.xhtml#P7000497027000000000000000042AB7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AB8" data-uri="chapter04.xhtml#P7000497027000000000000000042AB8" class="pcalibre calibre3 pcalibre1">valE with input from ALU, which also has output e_valE</p></li>
<li id="P7000497027000000000000000042AB9" data-uri="chapter04.xhtml#P7000497027000000000000000042AB9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ABA" data-uri="chapter04.xhtml#P7000497027000000000000000042ABA" class="pcalibre calibre3 pcalibre1">valA with input from valA, which also has input to ALU A</p></li>
<li id="P7000497027000000000000000042ABB" data-uri="chapter04.xhtml#P7000497027000000000000000042ABB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ABC" data-uri="chapter04.xhtml#P7000497027000000000000000042ABC" class="pcalibre calibre3 pcalibre1">dstE with input from dstE, which has inputs from cond and dstE in E, and output e_dstE</p></li>
<li id="P7000497027000000000000000042ABD" data-uri="chapter04.xhtml#P7000497027000000000000000042ABD" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ABE" data-uri="chapter04.xhtml#P7000497027000000000000000042ABE" class="pcalibre calibre3 pcalibre1">dstM with input from dstM from E</p></li>
</ul>
</details>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004422" data-uri="chapter04.xhtml#P7000497027000000000000000004422">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004423" title="454" data-uri="chapter04.xhtml#P7000497027000000000000000004423" epub:type="pagebreak"></span><img alt="A diagram illustrates structure between pipelines M and W." id="P7000497027000000000000000042ABF" data-uri="P700049702700000000000000000B702" src="../images/p454-1.png" class="calibre159 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042AC0" data-uri="chapter04.xhtml#P7000497027000000000000000042AC0" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042AC1" data-uri="chapter04.xhtml#P7000497027000000000000000042AC1" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.61 </span>PIPE memory stage logic.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042AC2" data-uri="chapter04.xhtml#P7000497027000000000000000042AC2"><p id="P7000497027000000000000000042AC3" data-uri="chapter04.xhtml#P7000497027000000000000000042AC3" class="pcalibre1 pcalibre calibre2"> Many of the signals from pipeline registers M and W are passed down to earlier stages to provide write-back results, instruction addresses, and forwarded results.</p><p id="P7000497027000000000000000042AC4" data-uri="chapter04.xhtml#P7000497027000000000000000042AC4" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022DA1" data-uri="chapter04.xhtml#P7000497027000000000000000022DA1">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042AC5" data-uri="chapter04.xhtml#P7000497027000000000000000042AC5" class="pcalibre1 pcalibre calibre2">Inputs to pipeline W are summarized from left to right below.</p>
<ul id="P7000497027000000000000000042AC6" data-uri="chapter04.xhtml#P7000497027000000000000000042AC6" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000042AC7" data-uri="chapter04.xhtml#P7000497027000000000000000042AC7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AC8" data-uri="chapter04.xhtml#P7000497027000000000000000042AC8" class="pcalibre calibre3 pcalibre1">M_stat from Stat, which has input from stat in M and input dmem_error from Data memory</p></li>
<li id="P7000497027000000000000000042AC9" data-uri="chapter04.xhtml#P7000497027000000000000000042AC9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ACA" data-uri="chapter04.xhtml#P7000497027000000000000000042ACA" class="pcalibre calibre3 pcalibre1">Icode from icode in M, which has output M_icode, and outputs to Addr (with output to Data memory), Mem. Write (with output write to Data memory), and Mem. Read (with output read to Data memory).</p></li>
<li id="P7000497027000000000000000042ACB" data-uri="chapter04.xhtml#P7000497027000000000000000042ACB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ACC" data-uri="chapter04.xhtml#P7000497027000000000000000042ACC" class="pcalibre calibre3 pcalibre1">valE with input from valE in M (which also has input to Addr and output M_valE) and output W_valE</p></li>
<li id="P7000497027000000000000000042ACD" data-uri="chapter04.xhtml#P7000497027000000000000000042ACD" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042ACE" data-uri="chapter04.xhtml#P7000497027000000000000000042ACE" class="pcalibre calibre3 pcalibre1">valM with input data out from Data memory (which is also output m_valM) with output W_valM; Data memory also has input data in from valA, which has output to Addr and output M_valA)</p></li>
<li id="P7000497027000000000000000042ACF" data-uri="chapter04.xhtml#P7000497027000000000000000042ACF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AD0" data-uri="chapter04.xhtml#P7000497027000000000000000042AD0" class="pcalibre calibre3 pcalibre1">dstE with input from dstE in M, which also has output M_dstE, and output W_dstE</p></li>
<li id="P7000497027000000000000000042AD1" data-uri="chapter04.xhtml#P7000497027000000000000000042AD1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AD2" data-uri="chapter04.xhtml#P7000497027000000000000000042AD2" class="pcalibre calibre3 pcalibre1">dstM with input from dstM in M, which also has output M_dstM, and output W_dstM</p></li>
</ul>
<p id="P7000497027000000000000000042AD3" data-uri="chapter04.xhtml#P7000497027000000000000000042AD3" class="pcalibre calibre3 pcalibre1">Cnd from M has output M_Cnd</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042AD4" data-uri="chapter04.xhtml#P7000497027000000000000000042AD4">causing an exception is passing through later pipeline stages, and therefore any updating of the condition codes should be suppressed. This aspect of the design is discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a>.</p>
<section id="P700049702700000000000000000442A" data-uri="chapter04.xhtml#P700049702700000000000000000442A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042AD5" data-uri="chapter04.xhtml#P7000497027000000000000000042AD5" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.35 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000482C">491</a>)</h1></header>
<p id="P7000497027000000000000000042AD6" data-uri="chapter04.xhtml#P7000497027000000000000000042AD6" class="pcalibre1 pcalibre calibre2">Our second case in the HCL code for d_valA uses signal e_dstE to see whether to select the ALU output e_valE as the forwarding source. Suppose instead that we use signal E_dstE, the destination register ID in pipeline register E for this selection. Write a Y86-64 program that would give an incorrect result with this modified forwarding logic.</p>
</section>
</section>
<section id="P700049702700000000000000000442D" data-uri="chapter04.xhtml#P700049702700000000000000000442D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042AD7" data-uri="chapter04.xhtml#P7000497027000000000000000042AD7" epub:type="title">Memory Stage</h1></header>
<p id="P7000497027000000000000000042AD8" data-uri="chapter04.xhtml#P7000497027000000000000000042AD8" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004422"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.61</span></a> shows the memory stage logic for PIPE. Comparing this to the memory stage for SEQ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004125"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.30</span></a>), we see that, as noted before, the block labeled "Mem. data" in SEQ is not present in PIPE. This block served to select between data sources valP (for <code id="P7000497027000000000000000042AD9" data-uri="chapter04.xhtml#P7000497027000000000000000042AD9" class="pcalibre1 calibre8 pcalibre">call</code> instructions) and valA, but this selection is now performed by the block labeled "Sel+Fwd A" in the decode stage. Most other blocks in this stage are identical to their counterparts in SEQ, with an appropriate renaming of the signals. In this figure, you can also see that many of the values in pipeline registers and M and W are supplied to other parts of the circuit as part of the forwarding and pipeline control logic.</p>

<section id="P7000497027000000000000000004431" data-uri="chapter04.xhtml#P7000497027000000000000000004431" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042ADA" data-uri="chapter04.xhtml#P7000497027000000000000000042ADA" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004433" title="455" data-uri="chapter04.xhtml#P7000497027000000000000000004433" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.36 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004846">492</a>)</h1></header>
<p id="P7000497027000000000000000042ADB" data-uri="chapter04.xhtml#P7000497027000000000000000042ADB" class="pcalibre1 pcalibre calibre2">In this stage, we can complete the computation of the status code Stat by detecting the case of an invalid address for the data memory. Write HCL code for the signal m_stat.</p>
</section>
</section>
</section>

<section id="P7000497027000000000000000004435" data-uri="chapter04.xhtml#P7000497027000000000000000004435" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042ADC" data-uri="chapter04.xhtml#P7000497027000000000000000042ADC" epub:type="title"><span class="pcalibre label pcalibre1">4.5.8 </span>Pipeline Control Logic</h1></header>
<p id="P7000497027000000000000000042ADD" data-uri="chapter04.xhtml#P7000497027000000000000000042ADD" class="pcalibre1 pcalibre calibre2">We are now ready to complete our design for PIPE by creating the pipeline control logic. This logic must handle the following four control cases for which other mechanisms, such as data forwarding and branch prediction, do not suffice:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000042ADE" data-uri="chapter04.xhtml#P7000497027000000000000000042ADE">
<li id="P7000497027000000000000000042ADF" data-uri="chapter04.xhtml#P7000497027000000000000000042ADF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AE0" data-uri="chapter04.xhtml#P7000497027000000000000000042AE0" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Load/use hazards. </span>The pipeline must stall for one cycle between an instruction that reads a value from memory and an instruction that uses this value.</p></li>
<li id="P7000497027000000000000000042AE1" data-uri="chapter04.xhtml#P7000497027000000000000000042AE1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AE2" data-uri="chapter04.xhtml#P7000497027000000000000000042AE2" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Processing ret. </span>The pipeline must stall until the <code id="P7000497027000000000000000042AE3" data-uri="chapter04.xhtml#P7000497027000000000000000042AE3" class="pcalibre1 calibre8 pcalibre">ret</code> instruction reaches the write-back stage.</p></li>
<li id="P7000497027000000000000000042AE4" data-uri="chapter04.xhtml#P7000497027000000000000000042AE4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AE5" data-uri="chapter04.xhtml#P7000497027000000000000000042AE5" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Mispredicted branches. </span>By the time the branch logic detects that a jump should not have been taken, several instructions at the branch target will have started down the pipeline. These instructions must be canceled, and fetching should begin at the instruction following the jump instruction.</p></li>
<li id="P7000497027000000000000000042AE6" data-uri="chapter04.xhtml#P7000497027000000000000000042AE6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042AE7" data-uri="chapter04.xhtml#P7000497027000000000000000042AE7" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Exceptions. </span>When an instruction causes an exception, we want to disable the updating of the programmer-visible state by later instructions and halt execution once the excepting instruction reaches the write-back stage.</p></li>
</ul>
<p id="P7000497027000000000000000042AE8" data-uri="chapter04.xhtml#P7000497027000000000000000042AE8" class="pcalibre1 pcalibre calibre2">We will go through the desired actions for each of these cases and then develop control logic to handle all of them.</p>

<section id="P7000497027000000000000000004443" data-uri="chapter04.xhtml#P7000497027000000000000000004443" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042AE9" data-uri="chapter04.xhtml#P7000497027000000000000000042AE9" epub:type="title">Desired Handling of Special Control Cases</h1></header>
<p id="P7000497027000000000000000042AEA" data-uri="chapter04.xhtml#P7000497027000000000000000042AEA" class="pcalibre1 pcalibre calibre2">For a load/use hazard, we have described the desired pipeline operation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004251"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.5</span></a>, as illustrated by the example of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004362"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.54</span></a>. Only the <code id="P7000497027000000000000000042AEB" data-uri="chapter04.xhtml#P7000497027000000000000000042AEB" class="pcalibre1 calibre8 pcalibre">mrmovq</code> and popq instructions read data from memory. When (1) either of these is in the execute stage and (2) an instruction requiring the destination register is in the decode stage, we want to hold back the second instruction in the decode stage and inject a bubble into the execute stage on the next cycle. After this, the forwarding logic will resolve the data hazard. The pipeline can hold back an instruction in the decode stage by keeping pipeline register D in a fixed state. In doing so, it should also keep pipeline register F in a fixed state, so that the next instruction will be fetched a second time. In summary, implementing this pipeline flow requires detecting the hazard condition, keeping pipeline registers F and D fixed, and injecting a bubble into the execute stage.</p>
<p id="P7000497027000000000000000042AEC" data-uri="chapter04.xhtml#P7000497027000000000000000042AEC" class="pcalibre1 pcalibre calibre2">For the processing of a <code id="P7000497027000000000000000042AED" data-uri="chapter04.xhtml#P7000497027000000000000000042AED" class="pcalibre1 calibre8 pcalibre">ret</code> instruction, we have described the desired pipeline operation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004251"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.5</span></a>. The pipeline should stall for three cycles until the return address is read as the <code id="P7000497027000000000000000042AEE" data-uri="chapter04.xhtml#P7000497027000000000000000042AEE" class="pcalibre1 calibre8 pcalibre">ret</code> instruction passes through the memory stage.</p>

<p id="P7000497027000000000000000042AEF" data-uri="chapter04.xhtml#P7000497027000000000000000042AEF" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000444B" title="456" data-uri="chapter04.xhtml#P700049702700000000000000000444B" epub:type="pagebreak"></span>This was illustrated by a simplified pipeline diagram in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004370"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.55</span></a> for processing the following program:</p>
<pre id="P7000497027000000000000000042AF0" data-uri="chapter04.xhtml#P7000497027000000000000000042AF0" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042AF1" data-uri="chapter04.xhtml#P7000497027000000000000000042AF1" class="calibre10 pcalibre pcalibre1">0x000:	irmovq stack,%rsp		# Initialize stack pointer
0x00a:	call proc			# Procedure call
0x013:	irmovq $10,%rdx			# Return point
0x01d:	halt
0x020: .pos 0x20
0x020: proc:				# proc:
0x020 :	ret				# Return immediately
0x021:	rrmovq %rdx,%rbx		# Not executed
0x030: .pos 0x30
0x030: stack:				# stack: Stack pointer
</code>
</pre>
<p id="P7000497027000000000000000042AF2" data-uri="chapter04.xhtml#P7000497027000000000000000042AF2" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004455"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.62</span></a> provides a detailed view of the processing of the <code id="P7000497027000000000000000042AF3" data-uri="chapter04.xhtml#P7000497027000000000000000042AF3" class="pcalibre1 calibre8 pcalibre">ret</code> instruction for the example program. The key observation here is that there is no way to inject a bubble into the fetch stage of our pipeline. On every cycle, the fetch stage reads <i class="calibre5 pcalibre pcalibre1">some</i> instruction from the instruction memory. Looking at the HCL code for implementing the PC prediction logic in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043A8"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.7</span></a>, we can see that for the <code id="P7000497027000000000000000042AF4" data-uri="chapter04.xhtml#P7000497027000000000000000042AF4" class="pcalibre1 calibre8 pcalibre">ret</code> instruction, the new value of the PC is predicted to be valP, the address of the following instruction. In our example program, this would be <code id="P7000497027000000000000000042AF5" data-uri="chapter04.xhtml#P7000497027000000000000000042AF5" class="pcalibre1 calibre8 pcalibre">0x021</code>, the address of the <code id="P7000497027000000000000000042AF6" data-uri="chapter04.xhtml#P7000497027000000000000000042AF6" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction following the ret. This prediction is not correct for this example, nor would it be for most cases, but we are not attempting to predict return addresses correctly in our design. For three clock cycles, the fetch stage stalls, causing the <code id="P7000497027000000000000000042AF7" data-uri="chapter04.xhtml#P7000497027000000000000000042AF7" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction to be fetched but then replaced by a bubble in the decode stage. This process is illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004455"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.62</span></a> by the three fetches, with an arrow leading down to the bubbles passing through the remaining pipeline stages. Finally, the <code id="P7000497027000000000000000042AF8" data-uri="chapter04.xhtml#P7000497027000000000000000042AF8" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction is fetched on cycle 7. Comparing <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004455"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.62</span></a> with</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004455" data-uri="chapter04.xhtml#P7000497027000000000000000004455">
<img alt="A diagram illustrates a pipeline of detailed processing of the ret instruction." id="P7000497027000000000000000042AF9" data-uri="P700049702700000000000000000B703" src="../images/p456-1.png" class="calibre160 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042AFA" data-uri="chapter04.xhtml#P7000497027000000000000000042AFA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042AFB" data-uri="chapter04.xhtml#P7000497027000000000000000042AFB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.62 </span>Detailed processing of the <code id="P7000497027000000000000000042AFC" data-uri="chapter04.xhtml#P7000497027000000000000000042AFC" class="pcalibre1 calibre8 pcalibre">ret</code> instruction.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042AFD" data-uri="chapter04.xhtml#P7000497027000000000000000042AFD"><p id="P7000497027000000000000000042AFE" data-uri="chapter04.xhtml#P7000497027000000000000000042AFE" class="pcalibre1 pcalibre calibre2">The fetch stage repeatedly fetches the <code id="P7000497027000000000000000042AFF" data-uri="chapter04.xhtml#P7000497027000000000000000042AFF" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction following the <code id="P7000497027000000000000000042B00" data-uri="chapter04.xhtml#P7000497027000000000000000042B00" class="pcalibre1 calibre8 pcalibre">ret</code> instruction, but then the pipeline control logic injects a bubble into the decode stage rather than allowing the <code id="P7000497027000000000000000042B01" data-uri="chapter04.xhtml#P7000497027000000000000000042B01" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction to proceed. The resulting behavior is equivalent to that shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004370"><span class="pcalibre label pcalibre1">Figure </span><span class="number pcalibre pcalibre1">4.55</span></a>.</p><p id="P7000497027000000000000000042B02" data-uri="chapter04.xhtml#P7000497027000000000000000042B02" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022DDF" data-uri="chapter04.xhtml#P7000497027000000000000000022DDF">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042B03" data-uri="chapter04.xhtml#P7000497027000000000000000042B03" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042B04" data-uri="chapter04.xhtml#P7000497027000000000000000042B04">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042B05" data-uri="chapter04.xhtml#P7000497027000000000000000042B05" class="calibre18 pcalibre pcalibre1">Prog6</th>
<th id="P7000497027000000000000000042B06" data-uri="chapter04.xhtml#P7000497027000000000000000042B06" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000042B07" data-uri="chapter04.xhtml#P7000497027000000000000000042B07" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000042B08" data-uri="chapter04.xhtml#P7000497027000000000000000042B08" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042B09" data-uri="chapter04.xhtml#P7000497027000000000000000042B09" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042B0A" data-uri="chapter04.xhtml#P7000497027000000000000000042B0A" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042B0B" data-uri="chapter04.xhtml#P7000497027000000000000000042B0B" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042B0C" data-uri="chapter04.xhtml#P7000497027000000000000000042B0C" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P7000497027000000000000000042B0D" data-uri="chapter04.xhtml#P7000497027000000000000000042B0D" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000042B0E" data-uri="chapter04.xhtml#P7000497027000000000000000042B0E" class="calibre18 pcalibre pcalibre1">9</th>
<th id="P7000497027000000000000000042B0F" data-uri="chapter04.xhtml#P7000497027000000000000000042B0F" class="calibre18 pcalibre pcalibre1">10</th>
<th id="P7000497027000000000000000042B10" data-uri="chapter04.xhtml#P7000497027000000000000000042B10" class="calibre18 pcalibre pcalibre1">11</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B11" data-uri="chapter04.xhtml#P7000497027000000000000000042B11" class="calibre20 pcalibre pcalibre1">0x000: irmovq Stack, %rsp</td>
<td id="P7000497027000000000000000042B12" data-uri="chapter04.xhtml#P7000497027000000000000000042B12" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B13" data-uri="chapter04.xhtml#P7000497027000000000000000042B13" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B14" data-uri="chapter04.xhtml#P7000497027000000000000000042B14" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B15" data-uri="chapter04.xhtml#P7000497027000000000000000042B15" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B16" data-uri="chapter04.xhtml#P7000497027000000000000000042B16" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B17" data-uri="chapter04.xhtml#P7000497027000000000000000042B17" class="calibre20 pcalibre pcalibre1">0x00a: call proc</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B18" data-uri="chapter04.xhtml#P7000497027000000000000000042B18" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B19" data-uri="chapter04.xhtml#P7000497027000000000000000042B19" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B1A" data-uri="chapter04.xhtml#P7000497027000000000000000042B1A" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B1B" data-uri="chapter04.xhtml#P7000497027000000000000000042B1B" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B1C" data-uri="chapter04.xhtml#P7000497027000000000000000042B1C" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B1D" data-uri="chapter04.xhtml#P7000497027000000000000000042B1D" class="calibre20 pcalibre pcalibre1">0x020: ret</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B1E" data-uri="chapter04.xhtml#P7000497027000000000000000042B1E" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B1F" data-uri="chapter04.xhtml#P7000497027000000000000000042B1F" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B20" data-uri="chapter04.xhtml#P7000497027000000000000000042B20" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B21" data-uri="chapter04.xhtml#P7000497027000000000000000042B21" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B22" data-uri="chapter04.xhtml#P7000497027000000000000000042B22" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B23" data-uri="chapter04.xhtml#P7000497027000000000000000042B23" class="calibre20 pcalibre pcalibre1">0x021: rrmovq %rdx, %rbx # Not executed</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B24" data-uri="chapter04.xhtml#P7000497027000000000000000042B24" class="calibre20 pcalibre pcalibre1">F</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B25" data-uri="chapter04.xhtml#P7000497027000000000000000042B25" class="calibre20 pcalibre pcalibre1">Bubble</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B26" data-uri="chapter04.xhtml#P7000497027000000000000000042B26" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B27" data-uri="chapter04.xhtml#P7000497027000000000000000042B27" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B28" data-uri="chapter04.xhtml#P7000497027000000000000000042B28" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B29" data-uri="chapter04.xhtml#P7000497027000000000000000042B29" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B2A" data-uri="chapter04.xhtml#P7000497027000000000000000042B2A" class="calibre20 pcalibre pcalibre1">0x021: rrmovq %rdx, %rbx # Not executed </td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B2B" data-uri="chapter04.xhtml#P7000497027000000000000000042B2B" class="calibre20 pcalibre pcalibre1">F</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B2C" data-uri="chapter04.xhtml#P7000497027000000000000000042B2C" class="calibre20 pcalibre pcalibre1">Bubble</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B2D" data-uri="chapter04.xhtml#P7000497027000000000000000042B2D" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B2E" data-uri="chapter04.xhtml#P7000497027000000000000000042B2E" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B2F" data-uri="chapter04.xhtml#P7000497027000000000000000042B2F" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B30" data-uri="chapter04.xhtml#P7000497027000000000000000042B30" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B31" data-uri="chapter04.xhtml#P7000497027000000000000000042B31" class="calibre20 pcalibre pcalibre1">0x021: rrmovq %rdx, %rbx # Not executed </td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B32" data-uri="chapter04.xhtml#P7000497027000000000000000042B32" class="calibre20 pcalibre pcalibre1">F</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B33" data-uri="chapter04.xhtml#P7000497027000000000000000042B33" class="calibre20 pcalibre pcalibre1">Bubble</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B34" data-uri="chapter04.xhtml#P7000497027000000000000000042B34" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B35" data-uri="chapter04.xhtml#P7000497027000000000000000042B35" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B36" data-uri="chapter04.xhtml#P7000497027000000000000000042B36" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B37" data-uri="chapter04.xhtml#P7000497027000000000000000042B37" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B38" data-uri="chapter04.xhtml#P7000497027000000000000000042B38" class="calibre20 pcalibre pcalibre1">0x013: irmovq $10, %rdx # Return point</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B39" data-uri="chapter04.xhtml#P7000497027000000000000000042B39" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B3A" data-uri="chapter04.xhtml#P7000497027000000000000000042B3A" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B3B" data-uri="chapter04.xhtml#P7000497027000000000000000042B3B" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B3C" data-uri="chapter04.xhtml#P7000497027000000000000000042B3C" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B3D" data-uri="chapter04.xhtml#P7000497027000000000000000042B3D" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
</details>
</figcaption>
</figure>

<p id="P7000497027000000000000000042B3E" data-uri="chapter04.xhtml#P7000497027000000000000000042B3E" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004460" title="457" data-uri="chapter04.xhtml#P7000497027000000000000000004460" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004370"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.55</span></a>, we see that our implementation achieves the desired effect, but with a slightly peculiar fetching of an incorrect instruction for three consecutive cycles.</p>
<p id="P7000497027000000000000000042B3F" data-uri="chapter04.xhtml#P7000497027000000000000000042B3F" class="pcalibre1 pcalibre calibre2">When a mispredicted branch occurs, we have described the desired pipeline operation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004251"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.5</span></a> and illustrated it in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P7000497027000000000000000004384"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.56</span></a>. The misprediction will be detected as the jump instruction reaches the execute stage. The control logic then injects bubbles into the decode and execute stages on the next cycle, causing the two incorrectly fetched instructions to be canceled. On the same cycle, the pipeline reads the correct instruction into the fetch stage.</p>
<p id="P7000497027000000000000000042B40" data-uri="chapter04.xhtml#P7000497027000000000000000042B40" class="pcalibre1 pcalibre calibre2">For an instruction that causes an exception, we must make the pipelined implementation match the desired ISA behavior, with all prior instructions completing and with none of the following instructions having any effect on the program state. Achieving these effects is complicated by the facts that (1) exceptions are detected during two different stages (fetch and memory) of program execution, and (2) the program state is updated in three different stages (execute, memory, and write-back).</p>
<p id="P7000497027000000000000000042B41" data-uri="chapter04.xhtml#P7000497027000000000000000042B41" class="pcalibre1 pcalibre calibre2">Our stage designs include a status code stat in each pipeline register to track the status of each instruction as it passes through the pipeline stages. When an exception occurs, we record that information as part of the instruction's status and continue fetching, decoding, and executing instructions as if nothing were amiss. As the excepting instruction reaches the memory stage, we take steps to prevent later instructions from modifying the programmer-visible state by (1) disabling the setting of condition codes by instructions in the execute stage, (2) injecting bubbles into the memory stage to disable any writing to the data memory, and (3) stalling the write-back stage when it has an excepting instruction, thus bringing the pipeline to a halt.</p>
<p id="P7000497027000000000000000042B42" data-uri="chapter04.xhtml#P7000497027000000000000000042B42" class="pcalibre1 pcalibre calibre2">The pipeline diagram in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000446C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.63</span></a> illustrates how our pipeline control handles the situation where an instruction causing an exception is followed by one that would change the condition codes. On cycle 6, the <code id="P7000497027000000000000000042B43" data-uri="chapter04.xhtml#P7000497027000000000000000042B43" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction reaches the memory stage and generates a memory error. On the same cycle, the <code id="P7000497027000000000000000042B44" data-uri="chapter04.xhtml#P7000497027000000000000000042B44" class="pcalibre1 calibre8 pcalibre">addq</code> instruction in the execute stage generates new values for the condition codes. We disable the setting of condition codes when an excepting instruction is in the memory or write-back stage (by examining the signals m_stat and W_stat and then setting the signal set_cc to zero). We can also see the combination of inj ecting bubbles into the memory stage and stalling the excepting instruction in the write-back stage in the example of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000446C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.63</span></a>—the <code id="P7000497027000000000000000042B45" data-uri="chapter04.xhtml#P7000497027000000000000000042B45" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction remains stalled in the write-back stage, and none of the subsequent instructions get past the execute stage.</p>
<p id="P7000497027000000000000000042B46" data-uri="chapter04.xhtml#P7000497027000000000000000042B46" class="pcalibre1 pcalibre calibre2">By this combination of pipelining the status signals, controlling the setting of condition codes, and controlling the pipeline stages, we achieve the desired behavior for exceptions: all instructions prior to the excepting instruction are completed, while none of the following instructions has any effect on the programmer-visible state.</p>
</section>
<section id="P7000497027000000000000000004469" data-uri="chapter04.xhtml#P7000497027000000000000000004469" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042B47" data-uri="chapter04.xhtml#P7000497027000000000000000042B47" epub:type="title">Detecting Special Control Conditions</h1></header>
<p id="P7000497027000000000000000042B48" data-uri="chapter04.xhtml#P7000497027000000000000000042B48" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004474"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.64</span></a> summarizes the conditions requiring special pipeline control. It gives expressions describing the conditions under which the three special cases arise.</p>


<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000446C" data-uri="chapter04.xhtml#P700049702700000000000000000446C">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000446D" title="458" data-uri="chapter04.xhtml#P700049702700000000000000000446D" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipeline of processing invalid memory reference exception." id="P7000497027000000000000000042B49" data-uri="P700049702700000000000000000B704" src="../images/p458-1.png" class="pcalibre1 calibre161 pcalibre"/>
<figcaption id="P7000497027000000000000000042B4A" data-uri="chapter04.xhtml#P7000497027000000000000000042B4A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042B4B" data-uri="chapter04.xhtml#P7000497027000000000000000042B4B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.63 </span>Processing invalid memory reference exception.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042B4C" data-uri="chapter04.xhtml#P7000497027000000000000000042B4C"><p id="P7000497027000000000000000042B4D" data-uri="chapter04.xhtml#P7000497027000000000000000042B4D" class="pcalibre1 pcalibre calibre2"> On cycle 6, the invalid memory reference by the <code id="P7000497027000000000000000042B4E" data-uri="chapter04.xhtml#P7000497027000000000000000042B4E" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction causes the updating of the condition codes to be disabled. The pipeline starts injecting bubbles into the memory stage and stalling the excepting instruction in the write-back stage.</p><p id="P7000497027000000000000000042B4F" data-uri="chapter04.xhtml#P7000497027000000000000000042B4F" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022E2C" data-uri="chapter04.xhtml#P7000497027000000000000000022E2C">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042B50" data-uri="chapter04.xhtml#P7000497027000000000000000042B50" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042B51" data-uri="chapter04.xhtml#P7000497027000000000000000042B51">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B52" data-uri="chapter04.xhtml#P7000497027000000000000000042B52" class="calibre20 pcalibre pcalibre1">Prog10</td>
<th id="P7000497027000000000000000042B53" data-uri="chapter04.xhtml#P7000497027000000000000000042B53" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000042B54" data-uri="chapter04.xhtml#P7000497027000000000000000042B54" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000042B55" data-uri="chapter04.xhtml#P7000497027000000000000000042B55" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042B56" data-uri="chapter04.xhtml#P7000497027000000000000000042B56" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042B57" data-uri="chapter04.xhtml#P7000497027000000000000000042B57" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042B58" data-uri="chapter04.xhtml#P7000497027000000000000000042B58" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042B59" data-uri="chapter04.xhtml#P7000497027000000000000000042B59" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P7000497027000000000000000042B5A" data-uri="chapter04.xhtml#P7000497027000000000000000042B5A" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000042B5B" data-uri="chapter04.xhtml#P7000497027000000000000000042B5B" class="calibre18 pcalibre pcalibre1">9</th>
<th id="P7000497027000000000000000042B5C" data-uri="chapter04.xhtml#P7000497027000000000000000042B5C" class="calibre18 pcalibre pcalibre1">10</th>
<th id="P7000497027000000000000000042B5D" data-uri="chapter04.xhtml#P7000497027000000000000000042B5D" class="calibre18 pcalibre pcalibre1">11</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B5E" data-uri="chapter04.xhtml#P7000497027000000000000000042B5E" class="calibre20 pcalibre pcalibre1">0x000: irmovq $1, %rax</td>
<td id="P7000497027000000000000000042B5F" data-uri="chapter04.xhtml#P7000497027000000000000000042B5F" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B60" data-uri="chapter04.xhtml#P7000497027000000000000000042B60" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B61" data-uri="chapter04.xhtml#P7000497027000000000000000042B61" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B62" data-uri="chapter04.xhtml#P7000497027000000000000000042B62" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B63" data-uri="chapter04.xhtml#P7000497027000000000000000042B63" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B64" data-uri="chapter04.xhtml#P7000497027000000000000000042B64" class="calibre20 pcalibre pcalibre1">0x00a: xorq %rsp, %rsp #C = 100</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B65" data-uri="chapter04.xhtml#P7000497027000000000000000042B65" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B66" data-uri="chapter04.xhtml#P7000497027000000000000000042B66" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B67" data-uri="chapter04.xhtml#P7000497027000000000000000042B67" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B68" data-uri="chapter04.xhtml#P7000497027000000000000000042B68" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B69" data-uri="chapter04.xhtml#P7000497027000000000000000042B69" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B6A" data-uri="chapter04.xhtml#P7000497027000000000000000042B6A" class="calibre20 pcalibre pcalibre1">0x00c: pushq %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B6B" data-uri="chapter04.xhtml#P7000497027000000000000000042B6B" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B6C" data-uri="chapter04.xhtml#P7000497027000000000000000042B6C" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B6D" data-uri="chapter04.xhtml#P7000497027000000000000000042B6D" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042B6E" data-uri="chapter04.xhtml#P7000497027000000000000000042B6E" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042B6F" data-uri="chapter04.xhtml#P7000497027000000000000000042B6F" class="calibre20 pcalibre pcalibre1">W</td>
<td id="P7000497027000000000000000042B70" data-uri="chapter04.xhtml#P7000497027000000000000000042B70" class="calibre20 pcalibre pcalibre1">W</td>
<td id="P7000497027000000000000000042B71" data-uri="chapter04.xhtml#P7000497027000000000000000042B71" class="calibre20 pcalibre pcalibre1">W</td>
<td id="P7000497027000000000000000042B72" data-uri="chapter04.xhtml#P7000497027000000000000000042B72" class="calibre20 pcalibre pcalibre1">W</td>
<td id="P7000497027000000000000000042B73" data-uri="chapter04.xhtml#P7000497027000000000000000042B73" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B74" data-uri="chapter04.xhtml#P7000497027000000000000000042B74" class="calibre20 pcalibre pcalibre1">0x00e: adq %rax, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B75" data-uri="chapter04.xhtml#P7000497027000000000000000042B75" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B76" data-uri="chapter04.xhtml#P7000497027000000000000000042B76" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B77" data-uri="chapter04.xhtml#P7000497027000000000000000042B77" class="calibre20 pcalibre pcalibre1">E</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042B78" data-uri="chapter04.xhtml#P7000497027000000000000000042B78" class="calibre20 pcalibre pcalibre1">0x010: irmovq $2, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042B79" data-uri="chapter04.xhtml#P7000497027000000000000000042B79" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042B7A" data-uri="chapter04.xhtml#P7000497027000000000000000042B7A" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042B7B" data-uri="chapter04.xhtml#P7000497027000000000000000042B7B" class="calibre20 pcalibre pcalibre1">E</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000042B7C" data-uri="chapter04.xhtml#P7000497027000000000000000042B7C" class="pcalibre calibre3 pcalibre1">Cycle 6 is illustrated with M mem_error = 1, with set_cc ← 0 leading to E, with New CC = 000.</p>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004474" data-uri="chapter04.xhtml#P7000497027000000000000000004474">

<table id="P7000497027000000000000000042B7D" data-uri="chapter04.xhtml#P7000497027000000000000000042B7D" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1"><th id="P7000497027000000000000000042B7E" data-uri="chapter04.xhtml#P7000497027000000000000000042B7E" class="calibre18 pcalibre pcalibre1">Condition	</th><th id="P7000497027000000000000000042B7F" data-uri="chapter04.xhtml#P7000497027000000000000000042B7F" class="calibre18 pcalibre pcalibre1">Trigger</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042B80" data-uri="chapter04.xhtml#P7000497027000000000000000042B80" class="calibre20 pcalibre pcalibre1">Processing ret	</td><td id="P7000497027000000000000000042B81" data-uri="chapter04.xhtml#P7000497027000000000000000042B81" class="calibre20 pcalibre pcalibre1">IRET ∊ {D_icode, E_icode, M_icode}</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042B82" data-uri="chapter04.xhtml#P7000497027000000000000000042B82" class="calibre20 pcalibre pcalibre1">Load/use hazard	</td><td id="P7000497027000000000000000042B83" data-uri="chapter04.xhtml#P7000497027000000000000000042B83" class="calibre20 pcalibre pcalibre1">E_icode ∊ {IMRMOVQ, IPOPQ} &amp;&amp; E_dstM ∊ {d_srcA, d_srcB}</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042B84" data-uri="chapter04.xhtml#P7000497027000000000000000042B84" class="calibre20 pcalibre pcalibre1">Mispredicted branch	</td><td id="P7000497027000000000000000042B85" data-uri="chapter04.xhtml#P7000497027000000000000000042B85" class="calibre20 pcalibre pcalibre1">E_icode = IJXX&amp;&amp; !e_Cnd</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042B86" data-uri="chapter04.xhtml#P7000497027000000000000000042B86" class="calibre20 pcalibre pcalibre1">Exception </td><td id="P7000497027000000000000000042B87" data-uri="chapter04.xhtml#P7000497027000000000000000042B87" class="calibre20 pcalibre pcalibre1">m_stat ∊ {SADR, SINS, SHLT} || W_stat ∊ {SADR, SINS, SHLT}</td></tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000042B88" data-uri="chapter04.xhtml#P7000497027000000000000000042B88" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042B89" data-uri="chapter04.xhtml#P7000497027000000000000000042B89" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.64 </span>Detection conditions for pipeline control logic.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042B8A" data-uri="chapter04.xhtml#P7000497027000000000000000042B8A"><p id="P7000497027000000000000000042B8B" data-uri="chapter04.xhtml#P7000497027000000000000000042B8B" class="pcalibre1 pcalibre calibre2"> Four different conditions require altering the pipeline flow by either stalling the pipeline or canceling partially executed instructions.</p><p id="P7000497027000000000000000042B8C" data-uri="chapter04.xhtml#P7000497027000000000000000042B8C" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>

<p id="P7000497027000000000000000042B8D" data-uri="chapter04.xhtml#P7000497027000000000000000042B8D" class="pcalibre1 pcalibre calibre2">These expressions are implemented by simple blocks of combinational logic that must generate their results before the end of the clock cycle in order to control the action of the pipeline registers as the clock rises to start the next cycle. During a clock cycle, pipeline registers D, E, and M hold the states of the instructions that are in the decode, execute, and memory pipeline stages, respectively. As we approach the end of the clock cycle, signals d_srcA and d_srcB will be set to the register IDs of the source operands for the instruction in the decode stage. Detecting a <code id="P7000497027000000000000000042B8E" data-uri="chapter04.xhtml#P7000497027000000000000000042B8E" class="pcalibre1 calibre8 pcalibre">ret</code> instruction as it passes through the pipeline simply involves checking the instruction codes of the instructions in the decode, execute, and memory stages. Detecting a load/use hazard involves checking the instruction type (<code id="P7000497027000000000000000042B8F" data-uri="chapter04.xhtml#P7000497027000000000000000042B8F" class="pcalibre1 calibre8 pcalibre">mrmovq</code> or <code id="P7000497027000000000000000042B90" data-uri="chapter04.xhtml#P7000497027000000000000000042B90" class="pcalibre1 calibre8 pcalibre">popq</code>) of the instruction in the execute stage and comparing its destination register with the source registers of the instruction in the decode stage. The pipeline control logic should detect a mispredicted branch while the jump <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004488" title="459" data-uri="chapter04.xhtml#P7000497027000000000000000004488" epub:type="pagebreak"></span>instruction is in the execute stage, so that it can set up the conditions required to recover from the misprediction as the instruction enters the memory stage. When a jump instruction is in the execute stage, the signal e_Cnd indicates whether or not the jump should be taken. We detect an excepting instruction by examining the instruction status values in the memory and write-back stages. For the memory stage, we use the signal m_stat, computed within the stage, rather than M_stat from the pipeline register. This internal signal incorporates the possibility of a data memory address error.</p>
</section>
<section id="P7000497027000000000000000004489" data-uri="chapter04.xhtml#P7000497027000000000000000004489" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042B91" data-uri="chapter04.xhtml#P7000497027000000000000000042B91" epub:type="title">Pipeline Control Mechanisms</h1></header>
<p id="P7000497027000000000000000042B92" data-uri="chapter04.xhtml#P7000497027000000000000000042B92" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000448C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.65</span></a> shows low-level mechanisms that allow the pipeline control logic to hold back an instruction in a pipeline register or to inject a bubble into the pipeline. These mechanisms involve small extensions to the basic clocked register described</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000448C" data-uri="chapter04.xhtml#P700049702700000000000000000448C">
<img alt="A diagram illustrates pipeline register operations." id="P7000497027000000000000000042B93" data-uri="P700049702700000000000000000B705" src="../images/p459-1.png" class="pcalibre calibre162 pcalibre1"/>
<figcaption id="P7000497027000000000000000042B94" data-uri="chapter04.xhtml#P7000497027000000000000000042B94" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042B95" data-uri="chapter04.xhtml#P7000497027000000000000000042B95" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.65 </span>Additional pipeline register operations,</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042B96" data-uri="chapter04.xhtml#P7000497027000000000000000042B96"><p id="P7000497027000000000000000042B97" data-uri="chapter04.xhtml#P7000497027000000000000000042B97" class="pcalibre calibre3 pcalibre1">(a) Under normal conditions, the state and output of the register are set to the value at the input when the clock rises, (b) When operated in <i class="calibre5 pcalibre pcalibre1">stall</i> mode, the state is held fixed at its previous value, (c) When operated in <i class="calibre5 pcalibre pcalibre1">bubble</i> mode, the state is overwritten with that of a <code id="P7000497027000000000000000042B98" data-uri="chapter04.xhtml#P7000497027000000000000000042B98" class="pcalibre1 calibre8 pcalibre">nop</code> operation.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022E75" data-uri="chapter04.xhtml#P7000497027000000000000000022E75">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042B99" data-uri="chapter04.xhtml#P7000497027000000000000000042B99" class="pcalibre1 pcalibre calibre2">Three diagrams are summarized below.</p>
<ol class="pcalibre1 pcalibre ol_lower-alpha1" id="P7000497027000000000000000042B9A" data-uri="chapter04.xhtml#P7000497027000000000000000042B9A">
<li id="P7000497027000000000000000042B9B" data-uri="chapter04.xhtml#P7000497027000000000000000042B9B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042B9C" data-uri="chapter04.xhtml#P7000497027000000000000000042B9C" class="pcalibre calibre3 pcalibre1">Normal: state = x, with input y, output x, stall 0 and bubble 0, leads to rising clock, leading to state = y with output y.</p></li>
<li id="P7000497027000000000000000042B9D" data-uri="chapter04.xhtml#P7000497027000000000000000042B9D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042B9E" data-uri="chapter04.xhtml#P7000497027000000000000000042B9E" class="pcalibre calibre3 pcalibre1">Stall: state = x, with input y, output x, stall 1 and bubble 1, leads to rising clock, leading to state = x with output x.</p></li>
<li id="P7000497027000000000000000042B9F" data-uri="chapter04.xhtml#P7000497027000000000000000042B9F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BA0" data-uri="chapter04.xhtml#P7000497027000000000000000042BA0" class="pcalibre calibre3 pcalibre1">Bubble: state = x, with input y, output x, stall 0 and bubble 1, leads to rising clock, leading to state = nop with output nop.</p></li>
</ol>
</details>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004493" data-uri="chapter04.xhtml#P7000497027000000000000000004493">

<table id="P7000497027000000000000000042BA1" data-uri="chapter04.xhtml#P7000497027000000000000000042BA1" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042BA2" data-uri="chapter04.xhtml#P7000497027000000000000000042BA2" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000004496" title="460" data-uri="chapter04.xhtml#P7000497027000000000000000004496" epub:type="pagebreak"></span></th>
<th colspan="5" id="P7000497027000000000000000042BA3" data-uri="chapter04.xhtml#P7000497027000000000000000042BA3" class="calibre18 pcalibre pcalibre1">
			Pipeline resister</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042BA4" data-uri="chapter04.xhtml#P7000497027000000000000000042BA4" class="calibre18 pcalibre pcalibre1">
Condition	</th><th id="P7000497027000000000000000042BA5" data-uri="chapter04.xhtml#P7000497027000000000000000042BA5" class="calibre18 pcalibre pcalibre1">F	</th><th id="P7000497027000000000000000042BA6" data-uri="chapter04.xhtml#P7000497027000000000000000042BA6" class="calibre18 pcalibre pcalibre1">D	</th><th id="P7000497027000000000000000042BA7" data-uri="chapter04.xhtml#P7000497027000000000000000042BA7" class="calibre18 pcalibre pcalibre1">E	</th><th id="P7000497027000000000000000042BA8" data-uri="chapter04.xhtml#P7000497027000000000000000042BA8" class="calibre18 pcalibre pcalibre1">M	</th><th id="P7000497027000000000000000042BA9" data-uri="chapter04.xhtml#P7000497027000000000000000042BA9" class="calibre18 pcalibre pcalibre1">W</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042BAA" data-uri="chapter04.xhtml#P7000497027000000000000000042BAA" class="calibre20 pcalibre pcalibre1">Processing ret	</td><td id="P7000497027000000000000000042BAB" data-uri="chapter04.xhtml#P7000497027000000000000000042BAB" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042BAC" data-uri="chapter04.xhtml#P7000497027000000000000000042BAC" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BAD" data-uri="chapter04.xhtml#P7000497027000000000000000042BAD" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BAE" data-uri="chapter04.xhtml#P7000497027000000000000000042BAE" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BAF" data-uri="chapter04.xhtml#P7000497027000000000000000042BAF" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042BB0" data-uri="chapter04.xhtml#P7000497027000000000000000042BB0" class="calibre20 pcalibre pcalibre1">Load/use hazard	</td><td id="P7000497027000000000000000042BB1" data-uri="chapter04.xhtml#P7000497027000000000000000042BB1" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042BB2" data-uri="chapter04.xhtml#P7000497027000000000000000042BB2" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042BB3" data-uri="chapter04.xhtml#P7000497027000000000000000042BB3" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BB4" data-uri="chapter04.xhtml#P7000497027000000000000000042BB4" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BB5" data-uri="chapter04.xhtml#P7000497027000000000000000042BB5" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042BB6" data-uri="chapter04.xhtml#P7000497027000000000000000042BB6" class="calibre20 pcalibre pcalibre1">Mispredicted branch	</td><td id="P7000497027000000000000000042BB7" data-uri="chapter04.xhtml#P7000497027000000000000000042BB7" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BB8" data-uri="chapter04.xhtml#P7000497027000000000000000042BB8" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BB9" data-uri="chapter04.xhtml#P7000497027000000000000000042BB9" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BBA" data-uri="chapter04.xhtml#P7000497027000000000000000042BBA" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BBB" data-uri="chapter04.xhtml#P7000497027000000000000000042BBB" class="calibre20 pcalibre pcalibre1">normal</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000042BBC" data-uri="chapter04.xhtml#P7000497027000000000000000042BBC" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042BBD" data-uri="chapter04.xhtml#P7000497027000000000000000042BBD" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.66 </span>Actions for pipeline control logic.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042BBE" data-uri="chapter04.xhtml#P7000497027000000000000000042BBE"><p id="P7000497027000000000000000042BBF" data-uri="chapter04.xhtml#P7000497027000000000000000042BBF" class="pcalibre1 pcalibre calibre2"> The different conditions require altering the pipeline flow by either stalling the pipeline or canceling partially executed instructions.</p><p id="P7000497027000000000000000042BC0" data-uri="chapter04.xhtml#P7000497027000000000000000042BC0" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042BC1" data-uri="chapter04.xhtml#P7000497027000000000000000042BC1">in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D2F"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.2.5</span></a>. Suppose that each pipeline register has two control inputs stall and bubble. The settings of these signals determine how the pipeline register is updated as the clock rises. Under normal operation (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000448C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.65</span></a>(a)), both of these inputs are set to 0, causing the register to load its input as its new state. When the stall signal is set to 1 (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000448C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.65</span></a>(b)), the updating of the state is disabled. Instead, the register will remain in its previous state. This makes it possible to hold back an instruction in some pipeline stage. When the bubble signal is set to 1 (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000448C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.65</span></a>(c)), the state of the register will be set to some fixed <i class="calibre5 pcalibre pcalibre1">reset configuration</i>, giving a state equivalent to that of a <code id="P7000497027000000000000000042BC2" data-uri="chapter04.xhtml#P7000497027000000000000000042BC2" class="pcalibre1 calibre8 pcalibre">nop</code> instruction. The particular pattern of ones and zeros for a pipeline register's reset configuration depends on the set of fields in the pipeline register. For example, to inject a bubble into pipeline register D, we want the icode field to be set to the constant value <code id="P7000497027000000000000000042BC3" data-uri="chapter04.xhtml#P7000497027000000000000000042BC3" class="pcalibre1 calibre8 pcalibre">INOP</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000403D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.26</span></a>). To inject a bubble into pipeline register E, we want the icode field to be set to <code id="P7000497027000000000000000042BC4" data-uri="chapter04.xhtml#P7000497027000000000000000042BC4" class="pcalibre1 calibre8 pcalibre">INOP</code> and the dstE, dstM, srcA, and srcB fields to be set to the constant <code id="P7000497027000000000000000042BC5" data-uri="chapter04.xhtml#P7000497027000000000000000042BC5" class="pcalibre1 calibre8 pcalibre">RNONE</code>. Determining the reset configuration is one of the tasks for the hardware designer in designing a pipeline register. We will not concern ourselves with the details here. We will consider it an error to set both the bubble and the stall signals to 1.</p>
<p id="P7000497027000000000000000042BC6" data-uri="chapter04.xhtml#P7000497027000000000000000042BC6" class="pcalibre1 pcalibre calibre2">The table in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a> shows the actions the different pipeline stages should take for each of the three special conditions. Each involves some combination of normal, stall, and bubble operations for the pipeline registers. In terms of timing, the stall and bubble control signals for the pipeline registers are generated by blocks of combinational logic. These values must be valid as the clock rises, causing each of the pipeline registers to either load, stall, or bubble as the next clock cycle begins. With this small extension to the pipeline register designs, we can implement a complete pipeline, including all of its control, using the basic building blocks of combinational logic, clocked registers, and random access memories.</p>
</section>
<section id="P70004970270000000000000000044BA" data-uri="chapter04.xhtml#P70004970270000000000000000044BA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042BC7" data-uri="chapter04.xhtml#P7000497027000000000000000042BC7" epub:type="title">Combinations of Control Conditions</h1></header>
<p id="P7000497027000000000000000042BC8" data-uri="chapter04.xhtml#P7000497027000000000000000042BC8" class="pcalibre1 pcalibre calibre2">In our discussion of the special pipeline control conditions so far, we assumed that at most one special case could arise during any single clock cycle. A common bug in designing a system is to fail to handle instances where multiple special conditions arise simultaneously. Let us analyze such possibilities. We need not worry about combinations involving program exceptions, since we have carefully designed our exception-handling mechanism to consider other instructions in the pipeline. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044BD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.67</span></a> diagrams the pipeline states that cause the other three special control</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000044BD" data-uri="chapter04.xhtml#P70004970270000000000000000044BD">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000044BE" title="461" data-uri="chapter04.xhtml#P70004970270000000000000000044BE" epub:type="pagebreak"></span><img alt="A diagram illustrates pipeline states." id="P7000497027000000000000000042BC9" data-uri="P700049702700000000000000000B706" src="../images/p461-1.png" class="pcalibre1 pcalibre calibre163"/>
<figcaption id="P7000497027000000000000000042BCA" data-uri="chapter04.xhtml#P7000497027000000000000000042BCA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042BCB" data-uri="chapter04.xhtml#P7000497027000000000000000042BCB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.67 </span>Pipeline states for special control conditions.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042BCC" data-uri="chapter04.xhtml#P7000497027000000000000000042BCC"><p id="P7000497027000000000000000042BCD" data-uri="chapter04.xhtml#P7000497027000000000000000042BCD" class="pcalibre1 pcalibre calibre2"> The two pairs indicated can arise simultaneously.</p><p id="P7000497027000000000000000042BCE" data-uri="chapter04.xhtml#P7000497027000000000000000042BCE" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022EAA" data-uri="chapter04.xhtml#P7000497027000000000000000022EAA">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042BCF" data-uri="chapter04.xhtml#P7000497027000000000000000042BCF" class="pcalibre1 pcalibre calibre2">A series of diagrams each have stacks of blocks with M on top, E in the center, and D on bottom. The boxes are summarized below.</p>
<ul id="P7000497027000000000000000042BD0" data-uri="chapter04.xhtml#P7000497027000000000000000042BD0" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042BD1" data-uri="chapter04.xhtml#P7000497027000000000000000042BD1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BD2" data-uri="chapter04.xhtml#P7000497027000000000000000042BD2" class="pcalibre calibre3 pcalibre1">Load/use: two shaded boxes: E containing Load and D containing Use</p></li>
<li id="P7000497027000000000000000042BD3" data-uri="chapter04.xhtml#P7000497027000000000000000042BD3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BD4" data-uri="chapter04.xhtml#P7000497027000000000000000042BD4" class="pcalibre calibre3 pcalibre1">Mispredict: shaded box E containing JXX</p></li>
<li id="P7000497027000000000000000042BD5" data-uri="chapter04.xhtml#P7000497027000000000000000042BD5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BD6" data-uri="chapter04.xhtml#P7000497027000000000000000042BD6" class="pcalibre calibre3 pcalibre1">Ret 1: shaded box D containing ret, forming combination A with mispredict and combination B with load/use</p></li>
<li id="P7000497027000000000000000042BD7" data-uri="chapter04.xhtml#P7000497027000000000000000042BD7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BD8" data-uri="chapter04.xhtml#P7000497027000000000000000042BD8" class="pcalibre calibre3 pcalibre1">Ret 2: two shaded boxes: E containing ret and D containing bubble</p></li>
<li id="P7000497027000000000000000042BD9" data-uri="chapter04.xhtml#P7000497027000000000000000042BD9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042BDA" data-uri="chapter04.xhtml#P7000497027000000000000000042BDA" class="pcalibre calibre3 pcalibre1">Ret 3: all shaded boxes: M with ret and E and D each with bubble</p></li>
</ul>
</details>

</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042BDB" data-uri="chapter04.xhtml#P7000497027000000000000000042BDB">conditions. These diagrams show blocks for the decode, execute, and memory stages. The shaded boxes represent particular constraints that must be satisfied for the condition to arise. A load/use hazard requires that the instruction in the execute stage reads a value from memory into a register, and that the instruction in the decode stage has this register as a source operand. A mispredicted branch requires the instruction in the execute stage to have a jump instruction. There are three possible cases for <code id="P7000497027000000000000000042BDC" data-uri="chapter04.xhtml#P7000497027000000000000000042BDC" class="pcalibre1 calibre8 pcalibre">ret</code>—the instruction can be in either the decode, execute, or memory stage. As the <code id="P7000497027000000000000000042BDD" data-uri="chapter04.xhtml#P7000497027000000000000000042BDD" class="pcalibre1 calibre8 pcalibre">ret</code> instruction moves through the pipeline, the earlier pipeline stages will have bubbles.</p>
<p id="P7000497027000000000000000042BDE" data-uri="chapter04.xhtml#P7000497027000000000000000042BDE" class="pcalibre1 pcalibre calibre2">We can see by these diagrams that most of the control conditions are mutually exclusive. For example, it is not possible to have a load/use hazard and a mispredicted branch simultaneously, since one requires a load instruction (<code id="P7000497027000000000000000042BDF" data-uri="chapter04.xhtml#P7000497027000000000000000042BDF" class="pcalibre1 calibre8 pcalibre">mrmovq</code> or <code id="P7000497027000000000000000042BE0" data-uri="chapter04.xhtml#P7000497027000000000000000042BE0" class="pcalibre1 calibre8 pcalibre">popq</code>) in the execute stage, while the other requires a jump. Similarly, the second and third <code id="P7000497027000000000000000042BE1" data-uri="chapter04.xhtml#P7000497027000000000000000042BE1" class="pcalibre1 calibre8 pcalibre">ret</code> combinations cannot occur at the same time as a load/use hazard or a mispredicted branch. Only the two combinations indicated by arrows can arise simultaneously.</p>
<p id="P7000497027000000000000000042BE2" data-uri="chapter04.xhtml#P7000497027000000000000000042BE2" class="pcalibre1 pcalibre calibre2">Combination A involves a not-taken jump instruction in the execute stage and a <code id="P7000497027000000000000000042BE3" data-uri="chapter04.xhtml#P7000497027000000000000000042BE3" class="pcalibre1 calibre8 pcalibre">ret</code> instruction in the decode stage. Setting up this combination requires the <code id="P7000497027000000000000000042BE4" data-uri="chapter04.xhtml#P7000497027000000000000000042BE4" class="pcalibre1 calibre8 pcalibre">ret</code> to be at the target of a not-taken branch. The pipeline control logic should detect that the branch was mispredicted and therefore cancel the <code id="P7000497027000000000000000042BE5" data-uri="chapter04.xhtml#P7000497027000000000000000042BE5" class="pcalibre1 calibre8 pcalibre">ret</code> instruction.</p>

<section id="P70004970270000000000000000044CF" data-uri="chapter04.xhtml#P70004970270000000000000000044CF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042BE6" data-uri="chapter04.xhtml#P7000497027000000000000000042BE6" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.37 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004846">492</a>)</h1></header>
<p id="P7000497027000000000000000042BE7" data-uri="chapter04.xhtml#P7000497027000000000000000042BE7" class="pcalibre1 pcalibre calibre2">Write a Y86-64 assembly-language program that causes combination A to arise and determines whether the control logic handles it correctly.</p>
</section>
<p id="P7000497027000000000000000042BE8" data-uri="chapter04.xhtml#P7000497027000000000000000042BE8" class="pcalibre1 pcalibre calibre2">Combining the control actions for the combination A conditions (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a>), we get the following pipeline control actions (assuming that either a bubble or a stall overrides the normal case):</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000042BE9" data-uri="chapter04.xhtml#P7000497027000000000000000042BE9">
<table id="P7000497027000000000000000042BEA" data-uri="chapter04.xhtml#P7000497027000000000000000042BEA" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042BEB" data-uri="chapter04.xhtml#P7000497027000000000000000042BEB" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000042BEC" data-uri="chapter04.xhtml#P7000497027000000000000000042BEC" class="calibre18 pcalibre pcalibre1">
			Pipeline resister</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042BED" data-uri="chapter04.xhtml#P7000497027000000000000000042BED" class="calibre18 pcalibre pcalibre1">
Condition	</th><th id="P7000497027000000000000000042BEE" data-uri="chapter04.xhtml#P7000497027000000000000000042BEE" class="calibre18 pcalibre pcalibre1">F	</th><th id="P7000497027000000000000000042BEF" data-uri="chapter04.xhtml#P7000497027000000000000000042BEF" class="calibre18 pcalibre pcalibre1">D	</th><th id="P7000497027000000000000000042BF0" data-uri="chapter04.xhtml#P7000497027000000000000000042BF0" class="calibre18 pcalibre pcalibre1">E	</th><th id="P7000497027000000000000000042BF1" data-uri="chapter04.xhtml#P7000497027000000000000000042BF1" class="calibre18 pcalibre pcalibre1">M	</th><th id="P7000497027000000000000000042BF2" data-uri="chapter04.xhtml#P7000497027000000000000000042BF2" class="calibre18 pcalibre pcalibre1">W</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042BF3" data-uri="chapter04.xhtml#P7000497027000000000000000042BF3" class="calibre20 pcalibre pcalibre1">Processing <code id="P7000497027000000000000000042BF4" data-uri="chapter04.xhtml#P7000497027000000000000000042BF4" class="calibre10 pcalibre pcalibre1">ret</code>	</td><td id="P7000497027000000000000000042BF5" data-uri="chapter04.xhtml#P7000497027000000000000000042BF5" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042BF6" data-uri="chapter04.xhtml#P7000497027000000000000000042BF6" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BF7" data-uri="chapter04.xhtml#P7000497027000000000000000042BF7" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BF8" data-uri="chapter04.xhtml#P7000497027000000000000000042BF8" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BF9" data-uri="chapter04.xhtml#P7000497027000000000000000042BF9" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042BFA" data-uri="chapter04.xhtml#P7000497027000000000000000042BFA" class="calibre20 pcalibre pcalibre1">Mispredicted branch	</td><td id="P7000497027000000000000000042BFB" data-uri="chapter04.xhtml#P7000497027000000000000000042BFB" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BFC" data-uri="chapter04.xhtml#P7000497027000000000000000042BFC" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BFD" data-uri="chapter04.xhtml#P7000497027000000000000000042BFD" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042BFE" data-uri="chapter04.xhtml#P7000497027000000000000000042BFE" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042BFF" data-uri="chapter04.xhtml#P7000497027000000000000000042BFF" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042C00" data-uri="chapter04.xhtml#P7000497027000000000000000042C00" class="calibre20 pcalibre pcalibre1">Combination	</td><td id="P7000497027000000000000000042C01" data-uri="chapter04.xhtml#P7000497027000000000000000042C01" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C02" data-uri="chapter04.xhtml#P7000497027000000000000000042C02" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C03" data-uri="chapter04.xhtml#P7000497027000000000000000042C03" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C04" data-uri="chapter04.xhtml#P7000497027000000000000000042C04" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C05" data-uri="chapter04.xhtml#P7000497027000000000000000042C05" class="calibre20 pcalibre pcalibre1">normal</td></tr>
</tbody>
</table>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042C06" data-uri="chapter04.xhtml#P7000497027000000000000000042C06"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000044F1" title="462" data-uri="chapter04.xhtml#P70004970270000000000000000044F1" epub:type="pagebreak"></span>That is, it would be handled like a mispredicted branch, but with a stall in the fetch stage. Fortunately, on the next cycle, the PC selection logic will choose the address of the instruction following the jump, rather than the predicted program counter, and so it does not matter what happens with the pipeline register F. We conclude that the pipeline will correctly handle this combination.</p>
<p id="P7000497027000000000000000042C07" data-uri="chapter04.xhtml#P7000497027000000000000000042C07" class="pcalibre1 pcalibre calibre2">Combination B involves a load/use hazard, where the loading instruction sets register <code id="P7000497027000000000000000042C08" data-uri="chapter04.xhtml#P7000497027000000000000000042C08" class="pcalibre1 calibre8 pcalibre">%rsp</code> and the <code id="P7000497027000000000000000042C09" data-uri="chapter04.xhtml#P7000497027000000000000000042C09" class="pcalibre1 calibre8 pcalibre">ret</code> instruction then uses this register as a source operand, since it must pop the return address from the stack. The pipeline control logic should hold back the <code id="P7000497027000000000000000042C0A" data-uri="chapter04.xhtml#P7000497027000000000000000042C0A" class="pcalibre1 calibre8 pcalibre">ret</code> instruction in the decode stage.</p>
<section id="P70004970270000000000000000044F6" data-uri="chapter04.xhtml#P70004970270000000000000000044F6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042C0B" data-uri="chapter04.xhtml#P7000497027000000000000000042C0B" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.38 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004846">492</a>)</h1></header>
<p id="P7000497027000000000000000042C0C" data-uri="chapter04.xhtml#P7000497027000000000000000042C0C" class="pcalibre1 pcalibre calibre2">Write a Y86-64 assembly-language program that causes combination B to arise and completes with a halt instruction if the pipeline operates correctly.</p>
</section>
<p id="P7000497027000000000000000042C0D" data-uri="chapter04.xhtml#P7000497027000000000000000042C0D" class="pcalibre1 pcalibre calibre2">Combining the control actions for the combination B conditions (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a>), we get the following pipeline control actions:</p>

<table id="P7000497027000000000000000042C0E" data-uri="chapter04.xhtml#P7000497027000000000000000042C0E" class="pcalibre largetable pcalibre1">

<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042C0F" data-uri="chapter04.xhtml#P7000497027000000000000000042C0F" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000042C10" data-uri="chapter04.xhtml#P7000497027000000000000000042C10" class="calibre18 pcalibre pcalibre1">
			Pipeline resister</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042C11" data-uri="chapter04.xhtml#P7000497027000000000000000042C11" class="calibre18 pcalibre pcalibre1">
Condition	</th><th id="P7000497027000000000000000042C12" data-uri="chapter04.xhtml#P7000497027000000000000000042C12" class="calibre18 pcalibre pcalibre1">F	</th><th id="P7000497027000000000000000042C13" data-uri="chapter04.xhtml#P7000497027000000000000000042C13" class="calibre18 pcalibre pcalibre1">D	</th><th id="P7000497027000000000000000042C14" data-uri="chapter04.xhtml#P7000497027000000000000000042C14" class="calibre18 pcalibre pcalibre1">E	</th><th id="P7000497027000000000000000042C15" data-uri="chapter04.xhtml#P7000497027000000000000000042C15" class="calibre18 pcalibre pcalibre1">M	</th><th id="P7000497027000000000000000042C16" data-uri="chapter04.xhtml#P7000497027000000000000000042C16" class="calibre18 pcalibre pcalibre1">W</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042C17" data-uri="chapter04.xhtml#P7000497027000000000000000042C17" class="calibre20 pcalibre pcalibre1">Processing <code id="P7000497027000000000000000042C18" data-uri="chapter04.xhtml#P7000497027000000000000000042C18" class="calibre10 pcalibre pcalibre1">ret</code>	</td><td id="P7000497027000000000000000042C19" data-uri="chapter04.xhtml#P7000497027000000000000000042C19" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C1A" data-uri="chapter04.xhtml#P7000497027000000000000000042C1A" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C1B" data-uri="chapter04.xhtml#P7000497027000000000000000042C1B" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C1C" data-uri="chapter04.xhtml#P7000497027000000000000000042C1C" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C1D" data-uri="chapter04.xhtml#P7000497027000000000000000042C1D" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042C1E" data-uri="chapter04.xhtml#P7000497027000000000000000042C1E" class="calibre20 pcalibre pcalibre1">Load/use hazard	</td><td id="P7000497027000000000000000042C1F" data-uri="chapter04.xhtml#P7000497027000000000000000042C1F" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C20" data-uri="chapter04.xhtml#P7000497027000000000000000042C20" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C21" data-uri="chapter04.xhtml#P7000497027000000000000000042C21" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C22" data-uri="chapter04.xhtml#P7000497027000000000000000042C22" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C23" data-uri="chapter04.xhtml#P7000497027000000000000000042C23" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042C24" data-uri="chapter04.xhtml#P7000497027000000000000000042C24" class="calibre20 pcalibre pcalibre1">Combination	</td><td id="P7000497027000000000000000042C25" data-uri="chapter04.xhtml#P7000497027000000000000000042C25" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C26" data-uri="chapter04.xhtml#P7000497027000000000000000042C26" class="calibre20 pcalibre pcalibre1">bubble+stall	</td><td id="P7000497027000000000000000042C27" data-uri="chapter04.xhtml#P7000497027000000000000000042C27" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C28" data-uri="chapter04.xhtml#P7000497027000000000000000042C28" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C29" data-uri="chapter04.xhtml#P7000497027000000000000000042C29" class="calibre20 pcalibre pcalibre1">normal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042C2A" data-uri="chapter04.xhtml#P7000497027000000000000000042C2A" class="calibre20 pcalibre pcalibre1">Desired	</td><td id="P7000497027000000000000000042C2B" data-uri="chapter04.xhtml#P7000497027000000000000000042C2B" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C2C" data-uri="chapter04.xhtml#P7000497027000000000000000042C2C" class="calibre20 pcalibre pcalibre1">stall	</td><td id="P7000497027000000000000000042C2D" data-uri="chapter04.xhtml#P7000497027000000000000000042C2D" class="calibre20 pcalibre pcalibre1">bubble	</td><td id="P7000497027000000000000000042C2E" data-uri="chapter04.xhtml#P7000497027000000000000000042C2E" class="calibre20 pcalibre pcalibre1">normal	</td><td id="P7000497027000000000000000042C2F" data-uri="chapter04.xhtml#P7000497027000000000000000042C2F" class="calibre20 pcalibre pcalibre1">normal</td></tr>
</tbody>
</table>

<p id="P7000497027000000000000000042C30" data-uri="chapter04.xhtml#P7000497027000000000000000042C30" class="pcalibre1 pcalibre calibre2">If both sets of actions were triggered, the control logic would try to stall the <code id="P7000497027000000000000000042C31" data-uri="chapter04.xhtml#P7000497027000000000000000042C31" class="pcalibre1 calibre8 pcalibre">ret</code> instruction to avoid the load/use hazard but also inject a bubble into the decode stage due to the <code id="P7000497027000000000000000042C32" data-uri="chapter04.xhtml#P7000497027000000000000000042C32" class="pcalibre1 calibre8 pcalibre">ret</code> instruction. Clearly, we do not want the pipeline to perform both sets of actions. Instead, we want it to just take the actions for the load/use hazard. The actions for processing the <code id="P7000497027000000000000000042C33" data-uri="chapter04.xhtml#P7000497027000000000000000042C33" class="pcalibre1 calibre8 pcalibre">ret</code> instruction should be delayed for one cycle.</p>
<p id="P7000497027000000000000000042C34" data-uri="chapter04.xhtml#P7000497027000000000000000042C34" class="pcalibre1 pcalibre calibre2">This analysis shows that combination B requires special handling. In fact, our original implementation of the PIPE control logic did not handle this combination correctly. Even though the design had passed many simulation tests, it had a subtle bug that was uncovered only by the analysis we have just shown. When a program having combination B was executed, the control logic would set both the bubble and the stall signals for pipeline register D to 1. This example shows the importance of systematic analysis. It would be unlikely to uncover this bug by just running normal programs. If left undetected, the pipeline would not faithfully implement the ISA behavior.</p>
</section>
<section id="P7000497027000000000000000004521" data-uri="chapter04.xhtml#P7000497027000000000000000004521" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042C35" data-uri="chapter04.xhtml#P7000497027000000000000000042C35" epub:type="title">Control Logic Implementation</h1></header>
<p id="P7000497027000000000000000042C36" data-uri="chapter04.xhtml#P7000497027000000000000000042C36" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004524"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.68</span></a> shows the overall structure of the pipeline control logic. Based on signals from the pipeline registers and pipeline stages, the control logic generates</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004524" data-uri="chapter04.xhtml#P7000497027000000000000000004524">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004525" title="463" data-uri="chapter04.xhtml#P7000497027000000000000000004525" epub:type="pagebreak"></span><img alt="A diagram illustrates pipeline control logic." id="P7000497027000000000000000042C37" data-uri="P700049702700000000000000000B707" src="../images/p463-1.png" class="calibre164 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042C38" data-uri="chapter04.xhtml#P7000497027000000000000000042C38" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042C39" data-uri="chapter04.xhtml#P7000497027000000000000000042C39" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.68 </span>PIPE pipeline control logic.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042C3A" data-uri="chapter04.xhtml#P7000497027000000000000000042C3A"><p id="P7000497027000000000000000042C3B" data-uri="chapter04.xhtml#P7000497027000000000000000042C3B" class="pcalibre1 pcalibre calibre2"> This logic overrides the normal flow of instructions through the pipeline to handle special conditions such as procedure returns, mispredicted branches, load/use hazards, and program exceptions.</p><p id="P7000497027000000000000000042C3C" data-uri="chapter04.xhtml#P7000497027000000000000000042C3C" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022F18" data-uri="chapter04.xhtml#P7000497027000000000000000022F18">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042C3D" data-uri="chapter04.xhtml#P7000497027000000000000000042C3D" class="pcalibre1 pcalibre calibre2">A diagram with the five pipelines shows elements interacting with pipeline control logic. The five pipelines are summarized below, from bottom to top and left to right.</p>
<ul id="P7000497027000000000000000042C3E" data-uri="chapter04.xhtml#P7000497027000000000000000042C3E" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042C3F" data-uri="chapter04.xhtml#P7000497027000000000000000042C3F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C40" data-uri="chapter04.xhtml#P7000497027000000000000000042C40" class="pcalibre calibre3 pcalibre1">F contains predPC with input F_stall from pipeline control logic</p></li>
<li id="P7000497027000000000000000042C41" data-uri="chapter04.xhtml#P7000497027000000000000000042C41" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C42" data-uri="chapter04.xhtml#P7000497027000000000000000042C42" class="pcalibre calibre3 pcalibre1">D, with inputs D_bubble and D_stall from pipeline control logic, contains:</p>
<ul id="P7000497027000000000000000042C43" data-uri="chapter04.xhtml#P7000497027000000000000000042C43" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042C44" data-uri="chapter04.xhtml#P7000497027000000000000000042C44" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C45" data-uri="chapter04.xhtml#P7000497027000000000000000042C45" class="pcalibre calibre3 pcalibre1">Stat</p></li>
<li id="P7000497027000000000000000042C46" data-uri="chapter04.xhtml#P7000497027000000000000000042C46" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C47" data-uri="chapter04.xhtml#P7000497027000000000000000042C47" class="pcalibre calibre3 pcalibre1">Icode, with output D-icode to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C48" data-uri="chapter04.xhtml#P7000497027000000000000000042C48" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C49" data-uri="chapter04.xhtml#P7000497027000000000000000042C49" class="pcalibre calibre3 pcalibre1">Ifun</p></li>
<li id="P7000497027000000000000000042C4A" data-uri="chapter04.xhtml#P7000497027000000000000000042C4A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C4B" data-uri="chapter04.xhtml#P7000497027000000000000000042C4B" class="pcalibre calibre3 pcalibre1">rA</p></li>
<li id="P7000497027000000000000000042C4C" data-uri="chapter04.xhtml#P7000497027000000000000000042C4C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C4D" data-uri="chapter04.xhtml#P7000497027000000000000000042C4D" class="pcalibre calibre3 pcalibre1">rB</p></li>
<li id="P7000497027000000000000000042C4E" data-uri="chapter04.xhtml#P7000497027000000000000000042C4E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C4F" data-uri="chapter04.xhtml#P7000497027000000000000000042C4F" class="pcalibre calibre3 pcalibre1">valC</p></li>
<li id="P7000497027000000000000000042C50" data-uri="chapter04.xhtml#P7000497027000000000000000042C50" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C51" data-uri="chapter04.xhtml#P7000497027000000000000000042C51" class="pcalibre calibre3 pcalibre1">valP</p></li>
</ul></li>
<li id="P7000497027000000000000000042C52" data-uri="chapter04.xhtml#P7000497027000000000000000042C52" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C53" data-uri="chapter04.xhtml#P7000497027000000000000000042C53" class="pcalibre calibre3 pcalibre1">E, with input E_bubble from pipeline control logic, contains:</p>
<ul id="P7000497027000000000000000042C54" data-uri="chapter04.xhtml#P7000497027000000000000000042C54" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042C55" data-uri="chapter04.xhtml#P7000497027000000000000000042C55" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C56" data-uri="chapter04.xhtml#P7000497027000000000000000042C56" class="pcalibre calibre3 pcalibre1">Stat</p></li>
<li id="P7000497027000000000000000042C57" data-uri="chapter04.xhtml#P7000497027000000000000000042C57" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C58" data-uri="chapter04.xhtml#P7000497027000000000000000042C58" class="pcalibre calibre3 pcalibre1">Icode, with output E_icode to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C59" data-uri="chapter04.xhtml#P7000497027000000000000000042C59" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C5A" data-uri="chapter04.xhtml#P7000497027000000000000000042C5A" class="pcalibre calibre3 pcalibre1">Ifun</p></li>
<li id="P7000497027000000000000000042C5B" data-uri="chapter04.xhtml#P7000497027000000000000000042C5B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C5C" data-uri="chapter04.xhtml#P7000497027000000000000000042C5C" class="pcalibre calibre3 pcalibre1">valC</p></li>
<li id="P7000497027000000000000000042C5D" data-uri="chapter04.xhtml#P7000497027000000000000000042C5D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C5E" data-uri="chapter04.xhtml#P7000497027000000000000000042C5E" class="pcalibre calibre3 pcalibre1">valA</p></li>
<li id="P7000497027000000000000000042C5F" data-uri="chapter04.xhtml#P7000497027000000000000000042C5F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C60" data-uri="chapter04.xhtml#P7000497027000000000000000042C60" class="pcalibre calibre3 pcalibre1">valB</p></li>
<li id="P7000497027000000000000000042C61" data-uri="chapter04.xhtml#P7000497027000000000000000042C61" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C62" data-uri="chapter04.xhtml#P7000497027000000000000000042C62" class="pcalibre calibre3 pcalibre1">dstE</p></li>
<li id="P7000497027000000000000000042C63" data-uri="chapter04.xhtml#P7000497027000000000000000042C63" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C64" data-uri="chapter04.xhtml#P7000497027000000000000000042C64" class="pcalibre calibre3 pcalibre1">dstM, with output E_dstM to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C65" data-uri="chapter04.xhtml#P7000497027000000000000000042C65" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C66" data-uri="chapter04.xhtml#P7000497027000000000000000042C66" class="pcalibre calibre3 pcalibre1">srcA, with input from srcA, which also sends input d_srcA to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C67" data-uri="chapter04.xhtml#P7000497027000000000000000042C67" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C68" data-uri="chapter04.xhtml#P7000497027000000000000000042C68" class="pcalibre calibre3 pcalibre1">srcB, with input from srcB, which also sends input d_srcB to pipeline control logic</p></li>
</ul></li>
<li id="P7000497027000000000000000042C69" data-uri="chapter04.xhtml#P7000497027000000000000000042C69" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C6A" data-uri="chapter04.xhtml#P7000497027000000000000000042C6A" class="pcalibre calibre3 pcalibre1">M, with input M_bubble from pipeline control logic, contains:</p>
<ul id="P7000497027000000000000000042C6B" data-uri="chapter04.xhtml#P7000497027000000000000000042C6B" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042C6C" data-uri="chapter04.xhtml#P7000497027000000000000000042C6C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C6D" data-uri="chapter04.xhtml#P7000497027000000000000000042C6D" class="pcalibre calibre3 pcalibre1">Stat</p></li>
<li id="P7000497027000000000000000042C6E" data-uri="chapter04.xhtml#P7000497027000000000000000042C6E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C6F" data-uri="chapter04.xhtml#P7000497027000000000000000042C6F" class="pcalibre calibre3 pcalibre1">Icode, with output M_icode to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C70" data-uri="chapter04.xhtml#P7000497027000000000000000042C70" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C71" data-uri="chapter04.xhtml#P7000497027000000000000000042C71" class="pcalibre calibre3 pcalibre1">Cnd, with input from CC, which also sends e_Cnd to pipeline control logic, and receive set_CC from pipeline control logic</p></li>
<li id="P7000497027000000000000000042C72" data-uri="chapter04.xhtml#P7000497027000000000000000042C72" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C73" data-uri="chapter04.xhtml#P7000497027000000000000000042C73" class="pcalibre calibre3 pcalibre1">valE</p></li>
<li id="P7000497027000000000000000042C74" data-uri="chapter04.xhtml#P7000497027000000000000000042C74" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C75" data-uri="chapter04.xhtml#P7000497027000000000000000042C75" class="pcalibre calibre3 pcalibre1">valA</p></li>
<li id="P7000497027000000000000000042C76" data-uri="chapter04.xhtml#P7000497027000000000000000042C76" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C77" data-uri="chapter04.xhtml#P7000497027000000000000000042C77" class="pcalibre calibre3 pcalibre1">dstE</p></li>
<li id="P7000497027000000000000000042C78" data-uri="chapter04.xhtml#P7000497027000000000000000042C78" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C79" data-uri="chapter04.xhtml#P7000497027000000000000000042C79" class="pcalibre calibre3 pcalibre1">dstM</p></li>
</ul></li>
<li id="P7000497027000000000000000042C7A" data-uri="chapter04.xhtml#P7000497027000000000000000042C7A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C7B" data-uri="chapter04.xhtml#P7000497027000000000000000042C7B" class="pcalibre calibre3 pcalibre1">W, with input W_stall from pipeline control logic, contains:</p>
<ul id="P7000497027000000000000000042C7C" data-uri="chapter04.xhtml#P7000497027000000000000000042C7C" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042C7D" data-uri="chapter04.xhtml#P7000497027000000000000000042C7D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C7E" data-uri="chapter04.xhtml#P7000497027000000000000000042C7E" class="pcalibre calibre3 pcalibre1">Stat, with input Stat, receiving input m_stat from pipeline control logic, and output W_stat to pipeline control logic</p></li>
<li id="P7000497027000000000000000042C7F" data-uri="chapter04.xhtml#P7000497027000000000000000042C7F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C80" data-uri="chapter04.xhtml#P7000497027000000000000000042C80" class="pcalibre calibre3 pcalibre1">Icode</p></li>
<li id="P7000497027000000000000000042C81" data-uri="chapter04.xhtml#P7000497027000000000000000042C81" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C82" data-uri="chapter04.xhtml#P7000497027000000000000000042C82" class="pcalibre calibre3 pcalibre1">valE</p></li>
<li id="P7000497027000000000000000042C83" data-uri="chapter04.xhtml#P7000497027000000000000000042C83" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C84" data-uri="chapter04.xhtml#P7000497027000000000000000042C84" class="pcalibre calibre3 pcalibre1">valM</p></li>
<li id="P7000497027000000000000000042C85" data-uri="chapter04.xhtml#P7000497027000000000000000042C85" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C86" data-uri="chapter04.xhtml#P7000497027000000000000000042C86" class="pcalibre calibre3 pcalibre1">dstE</p></li>
<li id="P7000497027000000000000000042C87" data-uri="chapter04.xhtml#P7000497027000000000000000042C87" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042C88" data-uri="chapter04.xhtml#P7000497027000000000000000042C88" class="pcalibre calibre3 pcalibre1">dstM</p></li>
</ul></li>
</ul>
</details>

</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042C89" data-uri="chapter04.xhtml#P7000497027000000000000000042C89">stall and bubble control signals for the pipeline registers and also determines whether the condition code registers should be updated. We can combine the detection conditions of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004474"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.64</span></a> with the actions of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a> to create HCL descriptions for the different pipeline control signals.</p>
<p id="P7000497027000000000000000042C8A" data-uri="chapter04.xhtml#P7000497027000000000000000042C8A" class="pcalibre1 pcalibre calibre2">Pipeline register F must be stalled for either a load/use hazard or a <code id="P7000497027000000000000000042C8B" data-uri="chapter04.xhtml#P7000497027000000000000000042C8B" class="pcalibre1 calibre8 pcalibre">ret</code> instruction:</p>
<pre id="P7000497027000000000000000042C8C" data-uri="chapter04.xhtml#P7000497027000000000000000042C8C" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042C8D" data-uri="chapter04.xhtml#P7000497027000000000000000042C8D" class="calibre10 pcalibre pcalibre1">bool F_stall =
	# Conditions for a load/use hazard
	E_icode in { IMRMOVQ, IPOPQ } &amp;&amp;
	E_dstM in { d_srcA, d_srcB } | |
	# Stalling at fetch while ret passes through pipeline
	IRET in { D_icode, E_icode, M_icode };
</code></pre>
<section id="P7000497027000000000000000004530" data-uri="chapter04.xhtml#P7000497027000000000000000004530" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042C8E" data-uri="chapter04.xhtml#P7000497027000000000000000042C8E" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.39 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004861">493</a>)</h1></header>
<p id="P7000497027000000000000000042C8F" data-uri="chapter04.xhtml#P7000497027000000000000000042C8F" class="pcalibre1 pcalibre calibre2">Write HCL code for the signal D_stall in the PIPE implementation.</p>
</section>
<p id="P7000497027000000000000000042C90" data-uri="chapter04.xhtml#P7000497027000000000000000042C90" class="pcalibre1 pcalibre calibre2">Pipeline register D must be set to bubble for a mispredicted branch or a <code id="P7000497027000000000000000042C91" data-uri="chapter04.xhtml#P7000497027000000000000000042C91" class="pcalibre1 calibre8 pcalibre">ret</code> instruction. As the analysis in the preceding section shows, however, it should  <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004535" title="464" data-uri="chapter04.xhtml#P7000497027000000000000000004535" epub:type="pagebreak"></span>not inject a bubble when there is a load/use hazard in combination with a <code id="P7000497027000000000000000042C92" data-uri="chapter04.xhtml#P7000497027000000000000000042C92" class="pcalibre1 calibre8 pcalibre">ret</code> instruction:</p>
<pre id="P7000497027000000000000000042C93" data-uri="chapter04.xhtml#P7000497027000000000000000042C93" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042C94" data-uri="chapter04.xhtml#P7000497027000000000000000042C94" class="calibre10 pcalibre pcalibre1">bool D_bubble =
	# Mispredicted branch (E_icode == IJXX &amp;&amp; !e_Cnd) ||
	# Stalling at fetch while ret passes through pipeline
	# but not condition for a load/use hazard
	!(E_icode in { IMRMOVQ, IPOPQ } &amp;&amp; E_dstM in { d_srcA, d_srcB }) &amp;&amp; IRET in { D_icode, E_icode, M_icode };
</code></pre>
<section id="P7000497027000000000000000004539" data-uri="chapter04.xhtml#P7000497027000000000000000004539" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042C95" data-uri="chapter04.xhtml#P7000497027000000000000000042C95" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.40 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004861">493</a>)</h1></header>
<p id="P7000497027000000000000000042C96" data-uri="chapter04.xhtml#P7000497027000000000000000042C96" class="pcalibre1 pcalibre calibre2">Write HCL code for the signal E_bubble in the PIPE implementation.</p>
</section>
<section id="P700049702700000000000000000453C" data-uri="chapter04.xhtml#P700049702700000000000000000453C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042C97" data-uri="chapter04.xhtml#P7000497027000000000000000042C97" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.41 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004861">493</a>)</h1></header>
<p id="P7000497027000000000000000042C98" data-uri="chapter04.xhtml#P7000497027000000000000000042C98" class="pcalibre1 pcalibre calibre2">Write HCL code for the signal set_cc in the PIPE implementation. This should only occur for <code id="P7000497027000000000000000042C99" data-uri="chapter04.xhtml#P7000497027000000000000000042C99" class="pcalibre1 calibre8 pcalibre">OPq</code> instructions, and should consider the effects of program exceptions.</p>
</section>
<section id="P7000497027000000000000000004540" data-uri="chapter04.xhtml#P7000497027000000000000000004540" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000042C9A" data-uri="chapter04.xhtml#P7000497027000000000000000042C9A" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.42 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004861">493</a>)</h1></header>
<p id="P7000497027000000000000000042C9B" data-uri="chapter04.xhtml#P7000497027000000000000000042C9B" class="pcalibre1 pcalibre calibre2">Write HCL code for the signals M_bubble and W_stall in the PIPE implementation. The latter signal requires modifying the exception condition listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004474"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.64</span></a>.</p>
</section>
<p id="P7000497027000000000000000042C9C" data-uri="chapter04.xhtml#P7000497027000000000000000042C9C" class="pcalibre1 pcalibre calibre2">This covers all of the special pipeline control signal values. In the complete HCL code for PIPE, all other pipeline control signals are set to zero.</p>
</section>
</section>
<section id="P7000497027000000000000000004544" data-uri="chapter04.xhtml#P7000497027000000000000000004544" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042C9D" data-uri="chapter04.xhtml#P7000497027000000000000000042C9D" epub:type="title"><span class="pcalibre label pcalibre1">4.5.9 </span>Performance Analysis</h1></header>
<p id="P7000497027000000000000000042C9E" data-uri="chapter04.xhtml#P7000497027000000000000000042C9E" class="pcalibre1 pcalibre calibre2">We can see that the conditions requiring special action by the pipeline control logic all cause our pipeline to fall short of the goal of issuing a new instruction on every clock cycle. We can measure this inefficiency by determining how often a bubble gets injected into the pipeline, since these cause unused pipeline cycles. A return instruction generates three bubbles, a load/use hazard generates one, and a mispredicted branch generates two. We can quantify the effect these penalties have on the overall performance by computing an estimate of the average number of clock cycles PIPE would require per instruction it executes, a measure known as the CPI (for "cycles per instruction"). This measure is the reciprocal of the average throughput of the pipeline, but with time measured in clock cycles rather than picoseconds. It is a useful measure of the architectural efficiency of a design.</p>
<p id="P7000497027000000000000000042C9F" data-uri="chapter04.xhtml#P7000497027000000000000000042C9F" class="pcalibre1 pcalibre calibre2">If we ignore the performance implications of exceptions (which, by definition, will only occur rarely), another way to think about CPI is to imagine we run the</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000004548" data-uri="chapter04.xhtml#P7000497027000000000000000004548"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042CA0" data-uri="chapter04.xhtml#P7000497027000000000000000042CA0" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000454A" title="465" data-uri="chapter04.xhtml#P700049702700000000000000000454A" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Testing the design</h1></header>
<p id="P7000497027000000000000000042CA1" data-uri="chapter04.xhtml#P7000497027000000000000000042CA1" class="calibre13 pcalibre pcalibre1">As we have seen, there are many ways to introduce bugs into a design, even for a simple microprocessor. With pipelining, there are many subtle interactions between the instructions at different pipeline stages. We have seen that many of the design challenges involve unusual instructions (such as popping to the stack pointer) or unusual instruction combinations (such as a not-taken jump followed by a <code id="P7000497027000000000000000042CA2" data-uri="chapter04.xhtml#P7000497027000000000000000042CA2" class="pcalibre1 calibre8 pcalibre">ret</code>). We also see that exception handling adds an entirely new dimension to the possible pipeline behaviors. How, then, can we be sure that our design is correct? For hardware manufacturers, this is a dominant concern, since they cannot simply report an error and have users download code patches over the Internet. Even a simple logic design error can have serious consequences, especially as microprocessors are increasingly used to operate systems that are critical to our lives and health, such as automotive antilock braking systems, heart pacemakers, and aircraft control systems.</p>
<p id="P7000497027000000000000000042CA3" data-uri="chapter04.xhtml#P7000497027000000000000000042CA3" class="calibre13 pcalibre pcalibre1">Simply simulating a design while running a number of "typical" programs is not a sufficient means of testing a system. Instead, thorough testing requires devising ways of systematically generating many tests that will exercise as many different instructions and instruction combinations as possible. In creating our Y86-64 processor designs, we also devised a number of testing scripts, each of which generates many different tests, runs simulations of the processor, and compares the resulting register and memory values to those produced by our <span class="smallcaps pcalibre pcalibre1">yis </span>instruction set simulator. Here is a brief description of the scripts:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000042CA4" data-uri="chapter04.xhtml#P7000497027000000000000000042CA4">
<li id="P7000497027000000000000000042CA5" data-uri="chapter04.xhtml#P7000497027000000000000000042CA5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CA6" data-uri="chapter04.xhtml#P7000497027000000000000000042CA6" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">optest. </span>Runs 49 tests of different Y86-64 instructions with different source and destination registers</p></li>
<li id="P7000497027000000000000000042CA7" data-uri="chapter04.xhtml#P7000497027000000000000000042CA7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CA8" data-uri="chapter04.xhtml#P7000497027000000000000000042CA8" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">jtest. </span>Runs 64 tests of the different jump and call instructions, with different combinations of whether or not the branches are taken</p></li>
<li id="P7000497027000000000000000042CA9" data-uri="chapter04.xhtml#P7000497027000000000000000042CA9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CAA" data-uri="chapter04.xhtml#P7000497027000000000000000042CAA" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">erntest. </span>Runs 28 tests of the different conditional move instructions, with different control combinations</p></li>
<li id="P7000497027000000000000000042CAB" data-uri="chapter04.xhtml#P7000497027000000000000000042CAB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CAC" data-uri="chapter04.xhtml#P7000497027000000000000000042CAC" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">htest. </span>Runs 600 tests of different data hazard possibilities, with different combinations of source and destination instructions, and with different numbers of <code id="P7000497027000000000000000042CAD" data-uri="chapter04.xhtml#P7000497027000000000000000042CAD" class="pcalibre1 calibre8 pcalibre">nop</code> instructions between the instruction pairs</p></li>
<li id="P7000497027000000000000000042CAE" data-uri="chapter04.xhtml#P7000497027000000000000000042CAE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CAF" data-uri="chapter04.xhtml#P7000497027000000000000000042CAF" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">ctest. </span>Tests 22 different control combinations, based on an analysis similar to what we did in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a></p></li>
<li id="P7000497027000000000000000042CB0" data-uri="chapter04.xhtml#P7000497027000000000000000042CB0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CB1" data-uri="chapter04.xhtml#P7000497027000000000000000042CB1" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">etest. </span>Tests 12 different combinations where an instruction causes an exception and the instructions following it could alter the programmer-visible state</p></li>
</ul>
<p id="P7000497027000000000000000042CB2" data-uri="chapter04.xhtml#P7000497027000000000000000042CB2" class="pcalibre calibre3 pcalibre1">The key idea of this testing method is that we want to be as systematic as possible, generating tests that create the different conditions that are likely to cause pipeline errors.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042CB3" data-uri="chapter04.xhtml#P7000497027000000000000000042CB3">processor on some benchmark program and observe the operation of the execute stage. On each cycle, the execute stage either (1) processes an instruction and this instruction continues through the remaining stages to completion, or (2) processes a bubble injected due to one of the three special cases. If the stage processes a total of <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> instructions and <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">b</sub></i> bubbles, then the processor has required around <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> + <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">b</sub></i> total clock cycles to execute <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> instructions. We say "around" because we ignore</p>

<aside class="sidebar pcalibre5 pcalibre" id="P700049702700000000000000000455E" data-uri="chapter04.xhtml#P700049702700000000000000000455E"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042CB4" data-uri="chapter04.xhtml#P7000497027000000000000000042CB4" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004560" title="466" data-uri="chapter04.xhtml#P7000497027000000000000000004560" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Formally verifying our design</h1></header>
<p id="P7000497027000000000000000042CB5" data-uri="chapter04.xhtml#P7000497027000000000000000042CB5" class="calibre13 pcalibre pcalibre1">Even when a design passes an extensive set of tests, we cannot be certain that it will operate correctly for all possible programs. The number of possible programs we could test is unimaginably large, even if we only consider tests consisting of short code segments. Newer methods of <i class="calibre5 pcalibre pcalibre1">formal verification</i>, however, hold the promise that we can have tools that rigorously consider all possible behaviors of a system and determine whether or not there are any design errors.</p>
<p id="P7000497027000000000000000042CB6" data-uri="chapter04.xhtml#P7000497027000000000000000042CB6" class="calibre13 pcalibre pcalibre1">We were able to apply formal verification to an earlier version of our Y86-64 processors <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3BA">[13]</a>. We set up a framework to compare the behavior of the pipelined design PIPE to the unpipelined version SEQ. That is, it was able to prove that for an arbitrary machine-language program, the two processors would have identical effects on the programmer-visible state. Of course, our verifier cannot actually run all possible programs, since there are an infinite number of them. Instead, it uses a form of proof by induction, showing a consistency between the two processors on a cycle-by-cycle basis. Carrying out this analysis requires reasoning about the hardware using <i class="calibre5 pcalibre pcalibre1">symbolic methods</i> in which we consider all program values to be arbitrary integers, and we abstract the ALU as a sort of "black box," computing some unspecified function over its arguments. We assume only that the ALUs for SEQ and PIPE compute identical functions.</p>
<p id="P7000497027000000000000000042CB7" data-uri="chapter04.xhtml#P7000497027000000000000000042CB7" class="calibre13 pcalibre pcalibre1">We used the HCL descriptions of the control logic to generate the control logic for our symbolic processor models, and so we could catch any bugs in the HCL code. Being able to show that SEQ and PIPE are identical does not guarantee that either of them faithfully implements the instruction set architecture. However, it would uncover any bug due to an incorrect pipeline design, and this is the major source of design errors.</p>
<p id="P7000497027000000000000000042CB8" data-uri="chapter04.xhtml#P7000497027000000000000000042CB8" class="calibre13 pcalibre pcalibre1">In our experiments, we verified not only a version of PIPE similar to the one we have presented in this chapter but also several variants that we give as homework problems, in which we add more instructions, modify the hardware capabilities, or use different branch prediction strategies. Interestingly, we found only one bug in all of our designs, involving control combination B (described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a>) for our solution to the variant described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000045E1.xhtml#P7000497027000000000000000004674"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.58</span></a>. This exposed a weakness in our testing regime that caused us to add additional cases to the ctest testing script.</p>
<p id="P7000497027000000000000000042CB9" data-uri="chapter04.xhtml#P7000497027000000000000000042CB9" class="pcalibre calibre3 pcalibre1">Formal verification is still in an early stage of development. The tools are often difficult to use, and they do not have the capacity to verify large-scale designs. We were able to verify our processors in part because of their relative simplicity. Even then, it required several weeks of effort and multiple runs of the tools, each requiring up to 8 hours of computer time. This is an active area of research, with some tools becoming commercially available and some in use at companies such as Intel, AMD, and IBM.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042CBA" data-uri="chapter04.xhtml#P7000497027000000000000000042CBA">the cycles required to start the instructions flowing through the pipeline. We can then compute the CPI for this benchmark as follows:</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000042CBB" data-uri="chapter04.xhtml#P7000497027000000000000000042CBB">
<m:math display="block" alttext="" data-uri="" altimg-width="171" altimg-height="35" altimg="../images/ch04-eq2.png"><m:mrow><m:mtext>CPI=</m:mtext><m:mfrac><m:mrow><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub><m:mo>+</m:mo><m:msub><m:mi>C</m:mi><m:mi>b</m:mi></m:msub></m:mrow><m:mrow><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:mfrac><m:mo>=</m:mo><m:mn>1.0</m:mn><m:mo>+</m:mo><m:mfrac><m:mrow><m:msub><m:mi>C</m:mi><m:mi>b</m:mi></m:msub></m:mrow><m:mrow><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:mfrac></m:mrow></m:math>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042CBC" data-uri="chapter04.xhtml#P7000497027000000000000000042CBC">That is, the CPI equals 1.0 plus a penalty term <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">b</sub></i>/<i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> indicating the average number of bubbles injected per instruction executed. Since only three different instruction types can cause a bubble to be injected, we can break this penalty term into three components:</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000004569" data-uri="chapter04.xhtml#P7000497027000000000000000004569"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042CBD" data-uri="chapter04.xhtml#P7000497027000000000000000042CBD" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000456B" title="467" data-uri="chapter04.xhtml#P700049702700000000000000000456B" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Web Aside ARCH:VLOG </span>Verilog implementation of a pipelined Y86-64 processor</h1></header>
<p id="P7000497027000000000000000042CBE" data-uri="chapter04.xhtml#P7000497027000000000000000042CBE" class="calibre13 pcalibre pcalibre1">As we have mentioned, modern logic design involves writing textual representations of hardware designs in a <i class="calibre5 pcalibre pcalibre1">hardware description language.</i> The design can then be tested by both simulation and a variety of formal verification tools. Once we have confidence in the design, we can use <i class="calibre5 pcalibre pcalibre1">logic synthesis</i> tools to translate the design into actual logic circuits.</p>
<p id="P7000497027000000000000000042CBF" data-uri="chapter04.xhtml#P7000497027000000000000000042CBF" class="pcalibre calibre3 pcalibre1">We have developed models of our Y86-64 processor designs in the Verilog hardware description language. These designs combine modules implementing the basic building blocks of the processor, along with control logic generated directly from the HCL descriptions. We have been able to synthesize some of these designs, download the logic circuit descriptions onto field-programmable gate array (FPGA) hardware, and run the processors on actual programs.</p>
</aside>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000042CC0" data-uri="chapter04.xhtml#P7000497027000000000000000042CC0">
<m:math display="block" alttext="" data-uri="" altimg-width="163" altimg-height="14" altimg="../images/ch04-eq3.png"><m:mrow><m:mtext>CPI=1</m:mtext><m:mtext>.0+</m:mtext><m:mi>l</m:mi><m:mi>p</m:mi><m:mtext>+</m:mtext><m:mi>m</m:mi><m:mi>p</m:mi><m:mtext>+</m:mtext><m:mi>r</m:mi><m:mi>p</m:mi></m:mrow></m:math>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042CC1" data-uri="chapter04.xhtml#P7000497027000000000000000042CC1">where <i class="calibre5 pcalibre pcalibre1">lp</i> (for "load penalty") is the average frequency with which bubbles are injected while stalling for load/use hazards, <i class="calibre5 pcalibre pcalibre1">mp</i> (for "mispredicted branch penalty") is the average frequency with which bubbles are injected when canceling instructions due to mispredicted branches, and <i class="calibre5 pcalibre pcalibre1">rp</i> (for "return penalty") is the average frequency with which bubbles are injected while stalling for <code id="P7000497027000000000000000042CC2" data-uri="chapter04.xhtml#P7000497027000000000000000042CC2" class="pcalibre1 calibre8 pcalibre">ret</code> instructions. Each of these penalties indicates the total number of bubbles injected for the stated reason (some portion of <i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">b</sub></i>) divided by the total number of instructions that were executed (<i class="calibre5 pcalibre pcalibre1">C<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>.)</p>
<p id="P7000497027000000000000000042CC3" data-uri="chapter04.xhtml#P7000497027000000000000000042CC3" class="pcalibre1 pcalibre calibre2">To estimate each of these penalties, we need to know how frequently the relevant instructions (load, conditional branch, and return) occur, and for each of these how frequently the particular condition arises. Let us pick the following set of frequencies for our CPI computation (these are comparable to measurements reported in <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3FA">[44]</a> and <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3FE">[46]</a>):</p>
<ul id="P7000497027000000000000000042CC4" data-uri="chapter04.xhtml#P7000497027000000000000000042CC4" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000042CC5" data-uri="chapter04.xhtml#P7000497027000000000000000042CC5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CC6" data-uri="chapter04.xhtml#P7000497027000000000000000042CC6" class="pcalibre calibre3 pcalibre1">Load instructions (<code id="P7000497027000000000000000042CC7" data-uri="chapter04.xhtml#P7000497027000000000000000042CC7" class="pcalibre1 calibre8 pcalibre">mrmovq</code> and <code id="P7000497027000000000000000042CC8" data-uri="chapter04.xhtml#P7000497027000000000000000042CC8" class="pcalibre1 calibre8 pcalibre">popq</code>) account for 25% of all instructions executed. Of these, 20% cause load/use hazards.</p></li>
<li id="P7000497027000000000000000042CC9" data-uri="chapter04.xhtml#P7000497027000000000000000042CC9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CCA" data-uri="chapter04.xhtml#P7000497027000000000000000042CCA" class="pcalibre calibre3 pcalibre1">Conditional branches account for 20% of all instructions executed. Of these, 60% are taken and 40% are not taken.</p></li>
<li id="P7000497027000000000000000042CCB" data-uri="chapter04.xhtml#P7000497027000000000000000042CCB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CCC" data-uri="chapter04.xhtml#P7000497027000000000000000042CCC" class="pcalibre calibre3 pcalibre1">Return instructions account for 2% of all instructions executed.</p></li>
</ul>
<p id="P7000497027000000000000000042CCD" data-uri="chapter04.xhtml#P7000497027000000000000000042CCD" class="pcalibre1 pcalibre calibre2">We can therefore estimate each of our penalties as the product of the frequency of the instruction type, the frequency the condition arises, and the number of bubbles that get injected when the condition occurs:</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000042CCE" data-uri="chapter04.xhtml#P7000497027000000000000000042CCE">
<table class="informaltable pcalibre pcalibre1" id="P7000497027000000000000000042CCF" data-uri="chapter04.xhtml#P7000497027000000000000000042CCF">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1"><th id="P7000497027000000000000000042CD0" data-uri="chapter04.xhtml#P7000497027000000000000000042CD0" class="calibre18 pcalibre pcalibre1">Cause	</th><th id="P7000497027000000000000000042CD1" data-uri="chapter04.xhtml#P7000497027000000000000000042CD1" class="calibre18 pcalibre pcalibre1">Name	</th><th id="P7000497027000000000000000042CD2" data-uri="chapter04.xhtml#P7000497027000000000000000042CD2" class="calibre18 pcalibre pcalibre1">Instruction frequency	</th><th id="P7000497027000000000000000042CD3" data-uri="chapter04.xhtml#P7000497027000000000000000042CD3" class="calibre18 pcalibre pcalibre1">Condition frequency</th><th id="P7000497027000000000000000042CD4" data-uri="chapter04.xhtml#P7000497027000000000000000042CD4" class="calibre18 pcalibre pcalibre1">Bubbles</th><th id="P7000497027000000000000000042CD5" data-uri="chapter04.xhtml#P7000497027000000000000000042CD5" class="calibre18 pcalibre pcalibre1">Product</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042CD6" data-uri="chapter04.xhtml#P7000497027000000000000000042CD6" class="calibre20 pcalibre pcalibre1">Load/use	</td>
<td id="P7000497027000000000000000042CD7" data-uri="chapter04.xhtml#P7000497027000000000000000042CD7" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">lp</i>	</td><td id="P7000497027000000000000000042CD8" data-uri="chapter04.xhtml#P7000497027000000000000000042CD8" class="calibre20 pcalibre pcalibre1">0.25	</td><td id="P7000497027000000000000000042CD9" data-uri="chapter04.xhtml#P7000497027000000000000000042CD9" class="calibre20 pcalibre pcalibre1">0.20	</td><td id="P7000497027000000000000000042CDA" data-uri="chapter04.xhtml#P7000497027000000000000000042CDA" class="calibre20 pcalibre pcalibre1">1	</td><td id="P7000497027000000000000000042CDB" data-uri="chapter04.xhtml#P7000497027000000000000000042CDB" class="calibre20 pcalibre pcalibre1">0.05</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042CDC" data-uri="chapter04.xhtml#P7000497027000000000000000042CDC" class="calibre20 pcalibre pcalibre1">Mispredict	</td><td id="P7000497027000000000000000042CDD" data-uri="chapter04.xhtml#P7000497027000000000000000042CDD" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">mp</i>	</td><td id="P7000497027000000000000000042CDE" data-uri="chapter04.xhtml#P7000497027000000000000000042CDE" class="calibre20 pcalibre pcalibre1">0.20	</td><td id="P7000497027000000000000000042CDF" data-uri="chapter04.xhtml#P7000497027000000000000000042CDF" class="calibre20 pcalibre pcalibre1">0.40	</td><td id="P7000497027000000000000000042CE0" data-uri="chapter04.xhtml#P7000497027000000000000000042CE0" class="calibre20 pcalibre pcalibre1">2	</td><td id="P7000497027000000000000000042CE1" data-uri="chapter04.xhtml#P7000497027000000000000000042CE1" class="calibre20 pcalibre pcalibre1">0.16</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042CE2" data-uri="chapter04.xhtml#P7000497027000000000000000042CE2" class="calibre20 pcalibre pcalibre1">Return	</td><td id="P7000497027000000000000000042CE3" data-uri="chapter04.xhtml#P7000497027000000000000000042CE3" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">rp</i>	</td><td id="P7000497027000000000000000042CE4" data-uri="chapter04.xhtml#P7000497027000000000000000042CE4" class="calibre20 pcalibre pcalibre1">0.02	</td><td id="P7000497027000000000000000042CE5" data-uri="chapter04.xhtml#P7000497027000000000000000042CE5" class="calibre20 pcalibre pcalibre1">1.00	</td><td id="P7000497027000000000000000042CE6" data-uri="chapter04.xhtml#P7000497027000000000000000042CE6" class="calibre20 pcalibre pcalibre1">3	</td><td id="P7000497027000000000000000042CE7" data-uri="chapter04.xhtml#P7000497027000000000000000042CE7" class="calibre20 pcalibre pcalibre1"><span class="wol1 pcalibre pcalibre1">   0.06   </span></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042CE8" data-uri="chapter04.xhtml#P7000497027000000000000000042CE8" class="calibre20 pcalibre pcalibre1">Total penalty</td><td colspan="4" class="calibre20 pcalibre pcalibre1"/>					<td id="P7000497027000000000000000042CE9" data-uri="chapter04.xhtml#P7000497027000000000000000042CE9" class="calibre20 pcalibre pcalibre1">0.27</td></tr>
</tbody>

</table>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042CEA" data-uri="chapter04.xhtml#P7000497027000000000000000042CEA"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004599" title="468" data-uri="chapter04.xhtml#P7000497027000000000000000004599" epub:type="pagebreak"></span>The sum of the three penalties is 0.27, giving a CPI of 1.27.</p>
<p id="P7000497027000000000000000042CEB" data-uri="chapter04.xhtml#P7000497027000000000000000042CEB" class="pcalibre1 pcalibre calibre2">Our goal was to design a pipeline that can issue one instruction per cycle, giving a CPI of 1.0. We did not quite meet this goal, but the overall performance is still quite good. We can also see that any effort to reduce the CPI further should focus on mispredicted branches. They account for 0.16 of our total penalty of 0.27, because conditional branches are common, our prediction strategy often fails, and we cancel two instructions for every misprediction.</p>

<section id="P700049702700000000000000000459B" data-uri="chapter04.xhtml#P700049702700000000000000000459B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042CEC" data-uri="chapter04.xhtml#P7000497027000000000000000042CEC" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.43 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000487C">494</a>)</h1></header>
<p id="P7000497027000000000000000042CED" data-uri="chapter04.xhtml#P7000497027000000000000000042CED" class="pcalibre1 pcalibre calibre2">Suppose we use a branch prediction strategy that achieves a success rate of 65%, such as backward taken, forward not taken (BTFNT), as described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P700049702700000000000000000423A"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.4</span></a>. What would be the impact on CPI, assuming all of the other frequencies are not affected?</p>
</section>
<section id="P700049702700000000000000000459E" data-uri="chapter04.xhtml#P700049702700000000000000000459E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042CEE" data-uri="chapter04.xhtml#P7000497027000000000000000042CEE" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.44 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000487C">494</a>)</h1></header>
<p id="P7000497027000000000000000042CEF" data-uri="chapter04.xhtml#P7000497027000000000000000042CEF" class="pcalibre1 pcalibre calibre2">Let us analyze the relative performance of using conditional data transfers versus conditional control transfers for the programs you wrote for Problems 4.5 and 4.6. Assume that we are using these programs to compute the sum of the absolute values of a very long array, and so the overall performance is determined largely by the number of cycles required by the inner loop. Assume that our jump instructions are predicted as being taken, and that around 50% of the array values are positive.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042CF0" data-uri="chapter04.xhtml#P7000497027000000000000000042CF0">
<li id="P7000497027000000000000000042CF1" data-uri="chapter04.xhtml#P7000497027000000000000000042CF1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CF2" data-uri="chapter04.xhtml#P7000497027000000000000000042CF2" class="pcalibre calibre3 pcalibre1">On average, how many instructions are executed in the inner loops of the two programs?</p></li>
<li id="P7000497027000000000000000042CF3" data-uri="chapter04.xhtml#P7000497027000000000000000042CF3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CF4" data-uri="chapter04.xhtml#P7000497027000000000000000042CF4" class="pcalibre calibre3 pcalibre1">On average, how many bubbles would be injected into the inner loops of the two programs?</p></li>
<li id="P7000497027000000000000000042CF5" data-uri="chapter04.xhtml#P7000497027000000000000000042CF5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042CF6" data-uri="chapter04.xhtml#P7000497027000000000000000042CF6" class="pcalibre calibre3 pcalibre1">What is the average number of clock cycles required per array element for the two programs?</p></li>
</ol>
</section>

</section>
<section id="P70004970270000000000000000045A8" data-uri="chapter04.xhtml#P70004970270000000000000000045A8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042CF7" data-uri="chapter04.xhtml#P7000497027000000000000000042CF7" epub:type="title"><span class="pcalibre label pcalibre1">4.5.10 </span>Unfinished Business</h1></header>
<p id="P7000497027000000000000000042CF8" data-uri="chapter04.xhtml#P7000497027000000000000000042CF8" class="pcalibre1 pcalibre calibre2">We have created a structure for the PIPE pipelined microprocessor, designed the control logic blocks, and implemented pipeline control logic to handle special cases where normal pipeline flow does not suffice. Still, PIPE lacks several key features that would be required in an actual microprocessor design. We highlight a few of these and discuss what would be required to add them.</p>
<section id="P70004970270000000000000000045AB" data-uri="chapter04.xhtml#P70004970270000000000000000045AB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042CF9" data-uri="chapter04.xhtml#P7000497027000000000000000042CF9" epub:type="title">Multicycle Instructions</h1></header>
<p id="P7000497027000000000000000042CFA" data-uri="chapter04.xhtml#P7000497027000000000000000042CFA" class="pcalibre1 pcalibre calibre2">All of the instructions in the Y86-64 instruction set involve simple operations such as adding numbers. These can be processed in a single clock cycle within the execute stage. In a more complete instruction set, we would also need to implement instructions requiring more complex operations such as integer multiplication and <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000045AE" title="469" data-uri="chapter04.xhtml#P70004970270000000000000000045AE" epub:type="pagebreak"></span>division and floating-point operations. In a medium-performance processor such as PIPE, typical execution times for these operations range from 3 or 4 cycles for floating-point addition up to 64 cycles for integer division. To implement these instructions, we require both additional hardware to perform the computations and a mechanism to coordinate the processing of these instructions with the rest of the pipeline.</p>
<p id="P7000497027000000000000000042CFB" data-uri="chapter04.xhtml#P7000497027000000000000000042CFB" class="pcalibre1 pcalibre calibre2">One simple approach to implementing multicycle instructions is to simply expand the capabilities of the execute stage logic with integer and floating-point arithmetic units. An instruction remains in the execute stage for as many clock cycles as it requires, causing the fetch and decode stages to stall. This approach is simple to implement, but the resulting performance is not very good.</p>
<p id="P7000497027000000000000000042CFC" data-uri="chapter04.xhtml#P7000497027000000000000000042CFC" class="pcalibre1 pcalibre calibre2">Better performance can be achieved by handling the more complex operations with special hardware functional units that operate independently of the main pipeline. Typically, there is one functional unit for performing integer multiplication and division, and another for performing floating-point operations. As an instruction enters the decode stage, it can be <i class="calibre5 pcalibre pcalibre1">issued</i> to the special unit. While the unit performs the operation, the pipeline continues processing other instructions. Typically, the floating-point unit is itself pipelined, and thus multiple operations can execute concurrently in the main pipeline and in the different units.</p>
<p id="P7000497027000000000000000042CFD" data-uri="chapter04.xhtml#P7000497027000000000000000042CFD" class="pcalibre1 pcalibre calibre2">The operations of the different units must be synchronized to avoid incorrect behavior. For example, if there are data dependencies between the different operations being handled by different units, the control logic may need to stall one part of the system until the results from an operation handled by some other part of the system have been completed. Often, different forms of forwarding are used to convey results from one part of the system to other parts, just as we saw between the different stages of PIPE. The overall design becomes more complex than we have seen with PIPE, but the same techniques of stalling, forwarding, and pipeline control can be used to make the overall behavior match the sequential ISA model.</p>
</section>
<section id="P70004970270000000000000000045B2" data-uri="chapter04.xhtml#P70004970270000000000000000045B2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042CFE" data-uri="chapter04.xhtml#P7000497027000000000000000042CFE" epub:type="title">Interfacing with the Memory System</h1></header>
<p id="P7000497027000000000000000042CFF" data-uri="chapter04.xhtml#P7000497027000000000000000042CFF" class="pcalibre1 pcalibre calibre2">In our presentation of PIPE, we assumed that both the instruction fetch unit and the data memory could read or write any memory location in one clock cycle. We also ignored the possible hazards caused by self-modifying code where one instruction writes to the region of memory from which later instructions are fetched. Furthermore, we reference memory locations according to their virtual addresses, and these require a translation into physical addresses before the actual read or write operation can be performed. Clearly, it is unrealistic to do all of this processing in a single clock cycle. Even worse, the memory values being accessed may reside on disk, requiring millions of clock cycles to read into the processor memory.</p>
<p id="P7000497027000000000000000042D00" data-uri="chapter04.xhtml#P7000497027000000000000000042D00" class="pcalibre1 pcalibre calibre2">As will be discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapters </span><span class="pcalibre label pcalibre1">6</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">9</span></a>, the memory system of a processor uses a combination of multiple hardware memories and operating system software to manage the virtual memory system. The memory system is organized as a hierarchy, with faster but smaller memories holding a subset of the memory being <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000045B6" title="470" data-uri="chapter04.xhtml#P70004970270000000000000000045B6" epub:type="pagebreak"></span>backed up by slower and larger memories. At the level closest to the processor, the <i class="calibre5 pcalibre pcalibre1">cache</i> memories provide fast access to the most heavily referenced memory locations. A typical processor has two first-level caches—one for reading instructions and one for reading and writing data. Another type of cache memory, known as a <i class="calibre5 pcalibre pcalibre1">translation look-aside buffer</i>, or TLB, provides a fast translation from virtual to physical addresses. Using a combination of TLBs and caches, it is indeed possible to read instructions and read or write data in a single clock cycle most of the time. Thus, our simplified view of memory referencing by our processors is actually quite reasonable.</p>
<p id="P7000497027000000000000000042D01" data-uri="chapter04.xhtml#P7000497027000000000000000042D01" class="pcalibre1 pcalibre calibre2">Although the caches hold the most heavily referenced memory locations, there will be times when a cache <i class="calibre5 pcalibre pcalibre1">miss</i> occurs, where some reference is made to a location that is not held in the cache. In the best case, the missing data can be retrieved from a higher-level cache or from the main memory of the processor, requiring 3 to 20 clock cycles. Meanwhile, the pipeline simply stalls, holding the instruction in the fetch or memory stage until the cache can perform the read or write operation. In terms of our pipeline design, this can be implemented by adding more stall conditions to the pipeline control logic. A cache miss and the consequent synchronization with the pipeline is handled completely by hardware, keeping the time required down to a small number of clock cycles.</p>
<p id="P7000497027000000000000000042D02" data-uri="chapter04.xhtml#P7000497027000000000000000042D02" class="pcalibre1 pcalibre calibre2">In some cases, the memory location being referenced is actually stored in the disk or nonvolatile memory. When this occurs, the hardware signals a <i class="calibre5 pcalibre pcalibre1">page fault</i> exception. Like other exceptions, this will cause the processor to invoke the operating system's exception handler code. This code will then set up a transfer from the disk to the main memory. Once this completes, the operating system will return to the original program, where the instruction causing the page fault will be re-executed. This time, the memory reference will succeed, although it might cause a cache miss. Having the hardware invoke an operating system routine, which then returns control back to the hardware, allows the hardware and system software to cooperate in the handling of page faults. Since accessing a disk can require millions of clock cycles, the several thousand cycles of processing performed by the OS page fault handler has little impact on performance.</p>
<p id="P7000497027000000000000000042D03" data-uri="chapter04.xhtml#P7000497027000000000000000042D03" class="pcalibre1 pcalibre calibre2">From the perspective of the processor, the combination of stalling to handle short-duration cache misses and exception handling to handle long-duration page faults takes care of any unpredictability in memory access times due to the structure of the memory hierarchy.</p>
</section>
</section>
</section></body></html>
