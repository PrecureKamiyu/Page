<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>14.10  Indexing of Spatial and Temporal Data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part269.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part271.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">14.10  <span style=" color: #00AEEF;">Indexing of Spatial and Temporal Data</span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Traditional index structures, such as hash indices and B<span class="s181">+</span>-trees, are not suitable for indexing of spatial data, which are typically of two or more dimensions. Similarly, when tuples have temporal intervals associated with them, and queries may specify time points or time intervals, the traditional index structures may result in poor perfor- mance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">14.10.1 Indexing of Spatial Data</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In this section we provide an overview of techniques for indexing spatial data. Further details can be found in Section 24.4. Spatial data refers to data referring to a point or a region in two or higher dimensional space. For example, the location of restaurants, identiﬁed by a (latitude, longitude) pair, is a form of spatial data. Similarly, the spatial extent of a farm or a lake can be identiﬁed by a polygon, with each corner identiﬁed by a (latitude, longitude) pair.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There are many forms of queries on spatial data, which need to be eﬃciently sup- ported using indices. A query that asks for restaurants at a precisely speciﬁed (latitude, longitude) pair can be answered by creating a B<span class="s181">+</span>-tree on the composite attribute (lati- tude, longitude). However, such a B<span class="s181">+</span>-tree index cannot eﬃciently answer a query that asks for all restaurants that are within a 500-meter radius of a user’s location, which is identiﬁed by a (latitude, longitude) pair. Nor can such an index eﬃciently answer a query that asks for all restaurants that are within a rectangular region of interest. Both of these are forms of <span class="s63">range queries</span>, which retrieve objects within a speciﬁed area. Nor can such an index eﬃciently answer a query that asks for the nearest restaurant to a speciﬁed location; such a query is an example of a <span class="s63">nearest neighbor </span>query.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The goal of spatial indexing is to support diﬀerent forms of spatial queries, with range and nearest neighbor queries being of particular interest, since they are widely used.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To understand how to index spatial data consisting of two or more dimensions, we consider ﬁrst the indexing of points in one-dimensional data. Tree structures, such as binary trees and B<span class="s181">+</span>-trees, operate by successively dividing space into smaller parts. For</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:63pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:64pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2738.png"/></span></p></td></tr><tr style="height:33pt"><td style="width:37pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-left: 252pt;text-indent: 0pt;text-align: left;">3         3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 292pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2739.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 239pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2740.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 273pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2741.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="text-indent: 0pt;text-align: center;">2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 238pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2742.png"/></span></p><p style="padding-left: 364pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2743.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2744.png"/></span></p><p class="s85" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 308pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2745.png"/></span></p><p style="padding-left: 333pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="4" height="4" alt="image" src="Image_2746.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="padding-left: 256pt;text-indent: 0pt;text-align: left;">3   1    3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 207pt;text-indent: 0pt;text-align: left;">Figure 14.29 <span class="s74">Division of space by a k-d tree.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">instance, each internal node of a binary tree partitions a one-dimensional interval in two. Points that lie in the left partition go into the left subtree; points that lie in the right partition go into the right subtree. In a balanced binary tree, the partition is chosen so that approximately one-half of the points stored in the subtree fall in each partition. Similarly, each level of a B<span class="s181">+</span>-tree splits a one-dimensional interval into multiple parts.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We can use that intuition to create tree structures for two-dimensional space as well as in higher-dimensional spaces. A tree structure called a <span class="s63">k-d tree </span>was one of the early structures used for indexing in multiple dimensions. Each level of a k-d tree partitions the space into two. The partitioning is done along one dimension at the node at the top level of the tree, along another dimension in nodes at the next level, and so on, cycling through the dimensions. The partitioning proceeds in such a way that, at each node, approximately one-half of the points stored in the subtree fall on one side and one- half fall on the other. Partitioning stops when a node has less than a given maximum number of points.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 14.29 shows a set of points in two-dimensional space, and a k-d tree repre- sentation of the set of points, where the maximum number of points in a leaf node has been set at 1. Each line in the ﬁgure (other than the outside box) corresponds to a node in the k-d tree. The numbering of the lines in the ﬁgure indicates the level of the tree at which the corresponding node appears.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Rectangular range queries, which ask for points within a speciﬁed rectangular re- gion, can be answered eﬃciently using a k-d tree as follows: Such a query essentially speciﬁes an interval on each dimension. For example, a range query may ask for all points whose <i>x </i>dimension lies between 50 and 80, and <i>y </i>dimension lies between 40 and 70. Recall that each internal node splits space on one dimension, and as in a B<span class="s181">+</span>-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">tree. Range search can be performed by the following recursive procedure, starting at the root:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: -16pt;line-height: 84%;text-align: justify;"><span class="s63">1. </span>Suppose the node is an internal node, and let it be split on a particular dimension, say <i>x</i>, ata point <i>x</i><span class="s145">i</span>. Entries in the left subtree have <i>x </i>values <span class="s83">&lt; </span><i>x</i><span class="s145">i</span>, and those in the</p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">right subtree have <i>x </i>values <span class="s86">≥ </span><i>x</i><span class="s145">i</span>. If the query range contains <i>x</i><span class="s145">i</span>, search is recur-</p><p style="padding-left: 113pt;text-indent: 0pt;line-height: 94%;text-align: justify;">sively performed on both children. If the query range is to the left of <i>x</i><span class="s97">i</span>, search is recursively performed only on the left child, and otherwise it is performed only on the right subtree.</p><p class="s63" style="padding-top: 5pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">2. <span class="p">If the node is a leaf, all entries that are contained in the query range are retrieved.</span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Nearest neighbor search is more complicated, and we shall not describe it here, but nearest neighbor queries can also be answered quite eﬃciently using k-d trees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s63">k-d-B tree </span>extends the k-d tree to allow multiple child nodes for each internal node, just as a B-tree extends a binary tree, to reduce the height of the tree. k-d-B trees are better suited for secondary storage than k-d trees. Range search as outlined above can be easily extended to k-d-B trees, and nearest neighbor queries too can be answered quite eﬃciently using k-d-B trees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There are a number of alternative index structures for spatial data. Instead of di- viding the data one dimension at a time, <span class="s63">quadtrees </span>divide up a two-dimensional space into four quadrants at each node of the tree. Details may be found in Section 24.4.1.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Indexing of regions of space, such as line segments, rectangles, and other polygons, presents new problems. There are extensions of k-d trees and quadtrees for this task. A key idea is that if a line segment or polygon crosses a partitioning line, it is split along the partitioning line and represented in each of the subtrees in which its pieces occur. Multiple occurrences of a line segment or polygon can result in ineﬃciencies in storage, as well as ineﬃciencies in querying.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A storage structure called an <span class="s63">R-tree </span>is useful for indexing of objects spanning re- gions of space, such as line segments, rectangles, and other polygons, in addition to points. An R-tree is a balanced tree structure with the indexed objects stored in leaf nodes, much like a B<span class="s181">+</span>-tree. However, instead of a range of values, a rectangular <span class="s63">bound- ing box </span>is associated with each tree node. The bounding box of a leaf node is the small- est rectangle parallel to the axes that contains all objects stored in the leaf node. The bounding box of internal nodes is, similarly, the smallest rectangle parallel to the axes that contains the bounding boxes of its child nodes. The bounding box of an object (such as a polygon) is deﬁned, similarly, as the smallest rectangle parallel to the axes that contains the object.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Each internal node stores the bounding boxes of the child nodes along with the pointers to the child nodes. Each leaf node stores the indexed objects.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 14.30 shows an example of a set of rectangles (drawn with a solid line) and the bounding boxes (drawn with a dashed line) of the nodes of an R-tree for the set of rectangles. Note that the bounding boxes are shown with extra space inside them, to make them stand out pictorially. In reality, the boxes would be smaller and ﬁt tightly</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="40" alt="image" src="Image_2747.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="224" height="225" alt="image" src="Image_2748.png"/></span></p><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">A</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">B</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">C</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">G</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">H</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">D</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">I</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">E</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">F</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="42" alt="image" src="Image_2749.png"/></span></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:15pt"><td style="width:20pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BB<span class="s360">1</span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 3pt;padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BB<span class="s361">2</span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BB<span class="s361">3</span></p></td><td style="width:10pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:14pt"><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">A</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">B</p></td><td style="width:16pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">C</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:14pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">D</p></td><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">E</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">F</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:15pt"><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">G</p></td><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">H</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">I</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-left: 252pt;text-indent: 0pt;text-align: left;">Figure 14.30 <span class="s74">An R-tree.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">on the objects that they contain; that is, each side of a bounding box <i>B </i>would touch at least one of the objects or bounding boxes that are contained in <i>B</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;line-height: 94%;text-align: justify;">The R-tree itself is at the right side of Figure 14.30. The ﬁgure refers to the coor- dinates of bounding box <i>i </i>as <i>BB</i><span class="s97">i </span>in the ﬁgure. More details about R-trees, including details of how to answer range queries using R-trees, may be found in Section 24.4.2.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Unlike some alternative structures for storing polygons and line segments, such as R<span class="s181">∗</span>-trees and interval trees, R-trees store only one copy of each object, and we can ensure easily that each node is at least half full. However, querying may be slower than with some of the alternatives, since multiple paths have to be searched. However, because of their better storage eﬃciency and their similarity to B-trees, R-trees and their variants have proved popular in database systems that support spatial data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">14.10.2 Indexing Temporal Data</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Temporal data refers to data that has an associated time period, as discussed in Section</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2750.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">7.10. The time period associated with a tuple indicates the period of time for which the tuple is valid. For example, a particular course identiﬁer may have its title changed at some point of time. Thus, a course identiﬁer is associated with a title for a given time interval, after which the same course identiﬁer is associated with a diﬀerent title. This can be modeled by having two or more tuples in the <i>course </i>relation with the same <i>course id</i>, but diﬀerent <i>title </i>values, each with its own valid time interval.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A <span class="s63">time interval </span>has a start time and an end time. Further a time interval indicates whether the interval starts at the start time, or just after the start time, that is, whether the interval is <span class="s63">closed </span>or <span class="s63">open </span>at the start time. Similarly, the time interval indicates whether it is closed or open at the end time. To represent the fact that a tuple is valid currently, until it is next updated, the end time is conceptually set to inﬁnity (which can be represented by a suitably large time, such as midnight of 9999-12-31).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">In general, the valid period for a particular fact may not consist of just one time interval; for example, a student may be registered in a university one academic year, take a leave of absence for the next year, and register again the following year. The valid period for the student’s registration at the university is clearly not a single time interval. However, any valid period can be represented by multiple intervals; thus, a tuple with any valid period can be represented by multiple tuples, each of which has a valid period that is a single time interval. We shall therefore only consider time intervals when modeling temporal data.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Suppose we wish to retrieve the value of a tuple, given a value <i>v </i>for an attribute <i>a</i>, and a point in time <i>t</i><span class="s98">1</span>. We can create an index on the <i>a</i>, and use it to retrieve all tuples with value <i>v </i>for attribute <i>a</i>. While such an index may be adequate if the number of time intervals for that search-key value is small, in general the index may retrieve a number of tuples whose time intervals do not include the time point <i>t</i><span class="s98">1</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">A better solution is to use a spatial index such as an R-tree, with the indexed tuple treated as having two dimensions, one being the indexed attribute <i>a</i>, and the other being the time dimension. In this case, the tuple forms a line segment, with value <i>v </i>for dimension <i>a</i>, and the valid time interval of the tuple as interval in the time dimension. One issue that complicates the use of a spatial index such as an R-tree is that the end time interval may be inﬁnity (perhaps represented by a very large value), whereas spatial indices typically assume that bounding boxes are ﬁnite, and may have poor performance if bounding boxes are very large. This problem can be dealt with as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2751.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2752.png"/></span></p><p style="padding-top: 2pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">All current tuples (i.e., those with end time as inﬁnity, which is perhaps represented by a large time value) are stored in a separate index from those tuples that have a non-inﬁnite end time. The index on current tuples can be a B</span><span class="s181">+</span>-tree index on (<i>a</i>, <i>start time</i>), where <i>a </i>is the indexed attribute and <i>start time </i>is the start time, while the index for non-current tuples would be a spatial index such as an R-tree.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2753.png"/></span></p><p class="s13" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;line-height: 89%;text-align: justify;"><span class="s39">• </span><span class="s40">Lookups for a key value </span>v <span class="p">at a point in time </span>t<span class="s145">i </span><span class="p">would need to search on both indices; the search on the current-tuple index would be for tuples with </span>a <span class="s15">= </span>v<span class="p">, and </span>start ts</p><p class="s86" style="padding-left: 107pt;text-indent: 0pt;line-height: 86%;text-align: justify;">≤ <span class="s13">t</span><span class="s97">i</span><span class="p">, which can be done by a simple range query. Queries with a time range can be handled similarly.</span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Instead of using spatial indices that are designed for multidimensional data, one can use specialized indices, such as the interval B<span class="s181">+</span>-tree, that are designed to index intervals in a single dimension, and provide better complexity guarantees than R-tree indices. However, most database implementations ﬁnd it simpler to use R-tree indices instead of implementing yet another type of index for time intervals.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Recall that with temporal data, more than one tuple may have the same value for a primary key, as long as the tuples with the same primary-key value have non-overlapping time intervals. Temporal indices on the primary key attribute can be used to eﬃciently determine if the temporal primary key constraint is violated when a new tuple is in- serted or the valid time interval of an existing tuple is updated.</p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;"><a name="bookmark286">14.11 </a><span style=" color: #00AEEF;">Summary  </span><span class="s164">677</span><a name="bookmark319">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part269.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part271.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
