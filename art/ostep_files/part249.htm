<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>23.1 Background</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part248.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part250.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 6pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">23.1 Background</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: left;">The VAX-11 minicomputer architecture was introduced in the late 1970’s by <b>Digital Equipment Corporation </b>(<b>DEC</b>). DEC was a massive player in the computer industry during the era of the mini-computer; unfortu- nately, a series of bad decisions and the advent of the PC slowly (but surely) led to their demise [C03]. The architecture was realized in a num- ber of implementations, including the VAX-11/780 and the less powerful VAX-11/750.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The OS for the system was known as VAX/VMS (or just plain VMS), one of whose primary architects was Dave Cutler, who later led the effort to develop Microsoft’s Windows NT [C93]. VMS had the general prob- lem that it would be run on a broad range of machines, including very inexpensive VAXen (yes, that is the proper plural) to extremely high-end and powerful machines in the same architecture family. Thus, the OS had to have mechanisms and policies that worked (and worked well) across this huge range of systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">HE </span>C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>A<span class="s7">VOID </span>T<span class="s7">HE </span>C<span class="s7">URSE </span>O<span class="s7">F </span>G<span class="s7">ENERALITY</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Operating systems often have a problem known as “the curse of gen- erality”, where they are tasked with general support for a broad class of applications and systems. The fundamental result of the curse is that the OS is not likely to support any one installation very well. In the case of VMS, the curse was very real, as the VAX-11 architecture was realized in a number of different implementations. Thus, how can an OS be built so as to run effectively on a wide range of systems?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">245</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">As an additional issue, VMS is an excellent example of software inno- vations used to hide some of the inherent flaws of the architecture. Al- though the OS often relies on the hardware to build efficient abstractions and illusions, sometimes the hardware designers don’t quite get every- thing right; in the VAX hardware, we’ll see a few examples of this, and what the VMS operating system does to build an effective, working sys- tem despite these hardware flaws.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part248.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part250.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
