<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>19.4 TLB Contents: What’s In There?</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part193.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part195.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">19.4 TLB Contents: What’s In There?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Let’s look at the contents of the hardware TLB in more detail. A typical TLB might have 32, 64, or 128 entries and be what is called <b>fully associa- tive</b>. Basically, this just means that any given translation can be anywhere in the TLB, and that the hardware will search the entire TLB in parallel to find the desired translation. A typical TLB entry might look like this:</p><p class="s5" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">VPN <span><img width="1" height="13" alt="image" src="Image_255.png"/></span><span class="s107"> </span>PFN <span><img width="1" height="13" alt="image" src="Image_256.png"/></span><span class="s107"> </span>other bits</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Note that both the VPN and PFN are present in each entry, as a trans- lation could end up in any of these locations (in hardware terms, the TLB is known as a <b>fully-associative </b>cache). The hardware searches the entries in parallel to see if there is a match.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>TLB V<span class="s45">ALID </span>B<span class="s45">IT </span><span class="s4">/</span><span class="s44">= </span>P<span class="s45">AGE </span>T<span class="s45">ABLE </span>V<span class="s45">ALID </span>B<span class="s45">IT</span></p><p style="padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: justify;">A common mistake is to confuse the valid bits found in a TLB with those found in a page table. In a page table, when a page-table entry (PTE) is marked invalid, it means that the page has not been allocated by the process, and should not be accessed by a correctly-working program. The usual response when an invalid page is accessed is to trap to the OS, which will respond by killing the process.</p><p style="padding-top: 3pt;padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: justify;">A TLB valid bit, in contrast, simply refers to whether a TLB entry has a valid translation within it. When a system boots, for example, a common initial state for each TLB entry is to be set to invalid, because no address translations are yet cached there. Once virtual memory is enabled, and once programs start running and accessing their virtual address spaces, the TLB is slowly populated, and thus valid entries soon fill the TLB.</p><p style="padding-top: 3pt;padding-left: 8pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The TLB valid bit is quite useful when performing a context switch too, as we’ll discuss further below. By setting all TLB entries to invalid, the system can ensure that the about-to-be-run process does not accidentally use a virtual-to-physical translation from a previous process.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">More interesting are the “other bits”. For example, the TLB commonly has a <b>valid </b>bit, which says whether the entry has a valid translation or not. Also common are <b>protection </b>bits, which determine how a page can be accessed (as in the page table). For example, code pages might be marked <i>read and execute</i>, whereas heap pages might be marked <i>read and write</i>. There may also be a few other fields, including an <b>address-space identifier</b>, a <b>dirty bit</b>, and so forth; see below for more information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part193.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part195.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
