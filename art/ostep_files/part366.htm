<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>I/O Devices</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part365.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part367.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 255pt;text-indent: 0pt;text-align: left;">I/O Devices</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Before delving into the main content of this part of the book (on persis- tence), we first introduce the concept of an <b>input/output (I/O) device </b>and show how the operating system might interact with such an entity. I/O is quite critical to computer systems, of course; imagine a program without any input (it produces the same result each time); now imagine a pro- gram with no output (what was the purpose of it running?). Clearly, for computer systems to be interesting, both input and output are required. And thus, our general problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: 0pt;line-height: 11pt;text-align: left;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>I<span class="s7">NTEGRATE </span>I/O I<span class="s7">NTO </span>S<span class="s7">YSTEMS</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: left;">How should I/O be integrated into systems? What are the general mechanisms? How can we make them efficient?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part367.htm">36.1 System Architecture</a><a class="toc0" href="part368.htm">36.2 A Canonical Device</a><a class="toc0" href="part369.htm">36.3 The Canonical Protocol</a><a class="toc0" href="part370.htm">36.4 Lowering CPU Overhead With Interrupts</a><a class="toc0" href="part371.htm">36.5 More Efficient Data Movement With DMA</a><a class="toc0" href="part372.htm">36.6 Methods Of Device Interaction</a><a class="toc0" href="part373.htm">36.7 Fitting Into The OS: The Device Driver</a><a class="toc0" href="part374.htm">36.8 Case Study: A Simple IDE Disk Driver</a><a class="toc0" href="part375.htm">36.9 Historical Notes</a><a class="toc0" href="part376.htm">36.10 Summary</a><a class="toc0" href="part377.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part365.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part367.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
