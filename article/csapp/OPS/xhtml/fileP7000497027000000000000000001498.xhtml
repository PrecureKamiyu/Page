<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Homework Problems </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000001498" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000003F7A5" data-uri="chapter02.xhtml#P700049702700000000000000003F7A5" epub:type="title"><span class="pcalibre label pcalibre1">Homework Problems </span></h1></header>
<section id="P700049702700000000000000000149A" data-uri="chapter02.xhtml#P700049702700000000000000000149A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7A6" data-uri="chapter02.xhtml#P700049702700000000000000003F7A6" epub:type="title"><span class="pcalibre label pcalibre1">2.55  ♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7A7" data-uri="chapter02.xhtml#P700049702700000000000000003F7A7">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7A8" data-uri="chapter02.xhtml#P700049702700000000000000003F7A8">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7A9" data-uri="chapter02.xhtml#P700049702700000000000000003F7A9"><p id="P700049702700000000000000003F7AA" data-uri="chapter02.xhtml#P700049702700000000000000003F7AA" class="pcalibre calibre3 pcalibre1">Compile and run the sample code that uses <code id="P700049702700000000000000003F7AB" data-uri="chapter02.xhtml#P700049702700000000000000003F7AB" class="pcalibre1 calibre8 pcalibre">show_bytes</code> (file <code id="P700049702700000000000000003F7AC" data-uri="chapter02.xhtml#P700049702700000000000000003F7AC" class="pcalibre1 calibre8 pcalibre">show-bytes.c</code>) on different machines to which you have access. Determine the byte orderings used by these machines.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000014A2" data-uri="chapter02.xhtml#P70004970270000000000000000014A2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7AD" data-uri="chapter02.xhtml#P700049702700000000000000003F7AD" epub:type="title"><span class="pcalibre label pcalibre1">2.56  ♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7AE" data-uri="chapter02.xhtml#P700049702700000000000000003F7AE">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7AF" data-uri="chapter02.xhtml#P700049702700000000000000003F7AF">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7B0" data-uri="chapter02.xhtml#P700049702700000000000000003F7B0"><p id="P700049702700000000000000003F7B1" data-uri="chapter02.xhtml#P700049702700000000000000003F7B1" class="pcalibre calibre3 pcalibre1">Try running the code for <code id="P700049702700000000000000003F7B2" data-uri="chapter02.xhtml#P700049702700000000000000003F7B2" class="pcalibre1 calibre8 pcalibre">show_bytes</code> for different sample values.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000014A9" data-uri="chapter02.xhtml#P70004970270000000000000000014A9" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7B3" data-uri="chapter02.xhtml#P700049702700000000000000003F7B3" epub:type="title"><span class="pcalibre label pcalibre1">2.57  ♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7B4" data-uri="chapter02.xhtml#P700049702700000000000000003F7B4">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7B5" data-uri="chapter02.xhtml#P700049702700000000000000003F7B5">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7B6" data-uri="chapter02.xhtml#P700049702700000000000000003F7B6"><p id="P700049702700000000000000003F7B7" data-uri="chapter02.xhtml#P700049702700000000000000003F7B7" class="pcalibre calibre3 pcalibre1">Write procedures <code id="P700049702700000000000000003F7B8" data-uri="chapter02.xhtml#P700049702700000000000000003F7B8" class="pcalibre1 calibre8 pcalibre">show_short, show_long</code>, and <code id="P700049702700000000000000003F7B9" data-uri="chapter02.xhtml#P700049702700000000000000003F7B9" class="pcalibre1 calibre8 pcalibre">show_double</code> that print the byte representations of C objects of types <code id="P700049702700000000000000003F7BA" data-uri="chapter02.xhtml#P700049702700000000000000003F7BA" class="pcalibre1 calibre8 pcalibre">short, long,</code> and <code id="P700049702700000000000000003F7BB" data-uri="chapter02.xhtml#P700049702700000000000000003F7BB" class="pcalibre1 calibre8 pcalibre">double,</code> respectively. Try these out on several machines.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000014B3" data-uri="chapter02.xhtml#P70004970270000000000000000014B3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7BC" data-uri="chapter02.xhtml#P700049702700000000000000003F7BC" epub:type="title"><span class="pcalibre label pcalibre1">2.58  ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7BD" data-uri="chapter02.xhtml#P700049702700000000000000003F7BD">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7BE" data-uri="chapter02.xhtml#P700049702700000000000000003F7BE">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7BF" data-uri="chapter02.xhtml#P700049702700000000000000003F7BF"><p id="P700049702700000000000000003F7C0" data-uri="chapter02.xhtml#P700049702700000000000000003F7C0" class="pcalibre calibre3 pcalibre1">Write a procedure <code id="P700049702700000000000000003F7C1" data-uri="chapter02.xhtml#P700049702700000000000000003F7C1" class="pcalibre1 calibre8 pcalibre">is_little_endian</code> that will return 1 when compiled and run on a little-endian machine, and will return 0 when compiled and run on a big-endian machine. This program should run on any machine, regardless of its word size.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000014BA" data-uri="chapter02.xhtml#P70004970270000000000000000014BA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7C2" data-uri="chapter02.xhtml#P700049702700000000000000003F7C2" epub:type="title"><span class="pcalibre label pcalibre1">2.59  ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7C3" data-uri="chapter02.xhtml#P700049702700000000000000003F7C3">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7C4" data-uri="chapter02.xhtml#P700049702700000000000000003F7C4">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7C5" data-uri="chapter02.xhtml#P700049702700000000000000003F7C5"><p id="P700049702700000000000000003F7C6" data-uri="chapter02.xhtml#P700049702700000000000000003F7C6" class="pcalibre calibre3 pcalibre1">Write a C expression that will yield a word consisting of the least significant byte of <code id="P700049702700000000000000003F7C7" data-uri="chapter02.xhtml#P700049702700000000000000003F7C7" class="pcalibre1 calibre8 pcalibre">x</code> and the remaining bytes of <code id="P700049702700000000000000003F7C8" data-uri="chapter02.xhtml#P700049702700000000000000003F7C8" class="pcalibre1 calibre8 pcalibre">y</code>. For operands <code id="P700049702700000000000000003F7C9" data-uri="chapter02.xhtml#P700049702700000000000000003F7C9" class="pcalibre1 calibre8 pcalibre">x = 0x89ABCDEF</code> and <code id="P700049702700000000000000003F7CA" data-uri="chapter02.xhtml#P700049702700000000000000003F7CA" class="pcalibre1 calibre8 pcalibre">y = 0x76543210,</code> this would give <code id="P700049702700000000000000003F7CB" data-uri="chapter02.xhtml#P700049702700000000000000003F7CB" class="pcalibre1 calibre8 pcalibre">0x765432EF</code>.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000014C5" data-uri="chapter02.xhtml#P70004970270000000000000000014C5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7CC" data-uri="chapter02.xhtml#P700049702700000000000000003F7CC" epub:type="title"><span class="pcalibre label pcalibre1">2.60 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F7CD" data-uri="chapter02.xhtml#P700049702700000000000000003F7CD">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F7CE" data-uri="chapter02.xhtml#P700049702700000000000000003F7CE">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F7CF" data-uri="chapter02.xhtml#P700049702700000000000000003F7CF"><p id="P700049702700000000000000003F7D0" data-uri="chapter02.xhtml#P700049702700000000000000003F7D0" class="pcalibre calibre3 pcalibre1">Suppose we number the bytes in a <var class="calibre5 pcalibre pcalibre1">w</var>-bit word from 0 (least significant) to <var class="calibre5 pcalibre pcalibre1">w</var>/8 – 1 (most significant). Write code for the following C function, which will return an unsigned value in which byte <code id="P700049702700000000000000003F7D1" data-uri="chapter02.xhtml#P700049702700000000000000003F7D1" class="pcalibre1 calibre8 pcalibre">i</code> of argument <code id="P700049702700000000000000003F7D2" data-uri="chapter02.xhtml#P700049702700000000000000003F7D2" class="pcalibre1 calibre8 pcalibre">x</code> has been replaced by byte <code id="P700049702700000000000000003F7D3" data-uri="chapter02.xhtml#P700049702700000000000000003F7D3" class="pcalibre1 calibre8 pcalibre">b</code>:</p></div>
<pre id="P700049702700000000000000003F7D4" data-uri="chapter02.xhtml#P700049702700000000000000003F7D4" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F7D5" data-uri="chapter02.xhtml#P700049702700000000000000003F7D5" class="calibre10 pcalibre pcalibre1">
unsigned replace_byte (unsigned x, int i, unsigned char b);
</code></pre>
<p id="P700049702700000000000000003F7D6" data-uri="chapter02.xhtml#P700049702700000000000000003F7D6" class="pcalibre calibre3 pcalibre1">Here are some examples showing how the function should work:</p>
<pre id="P700049702700000000000000003F7D7" data-uri="chapter02.xhtml#P700049702700000000000000003F7D7" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F7D8" data-uri="chapter02.xhtml#P700049702700000000000000003F7D8" class="calibre10 pcalibre pcalibre1">
replace_byte(0x12345678, 2, 0xAB) --&gt; 0x12AB5678
replace_byte(0x12345678, 0, 0xAB) --&gt; 0x123456AB
</code></pre></li>
</ol></section>
<section id="P70004970270000000000000000014D3" data-uri="chapter02.xhtml#P70004970270000000000000000014D3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F7D9" data-uri="chapter02.xhtml#P700049702700000000000000003F7D9" epub:type="title">Bit-Level Integer Coding Rules</h1></header>
<p id="P700049702700000000000000003F7DA" data-uri="chapter02.xhtml#P700049702700000000000000003F7DA" class="pcalibre1 pcalibre calibre2">In several of the following problems, we will artificially restrict what programming constructs you can use to help you gain a better understanding of the bit-level, <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000014D6" title="129" data-uri="chapter02.xhtml#P70004970270000000000000000014D6" epub:type="pagebreak"></span>logic, and arithmetic operations of C. In answering these problems, your code must follow these rules:</p>
<ul id="P700049702700000000000000003F7DB" data-uri="chapter02.xhtml#P700049702700000000000000003F7DB" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000003F7DC" data-uri="chapter02.xhtml#P700049702700000000000000003F7DC" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7DD" data-uri="chapter02.xhtml#P700049702700000000000000003F7DD" class="pcalibre calibre3 pcalibre1">Assumptions</p>
<ul id="P700049702700000000000000003F7DE" data-uri="chapter02.xhtml#P700049702700000000000000003F7DE" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000003F7DF" data-uri="chapter02.xhtml#P700049702700000000000000003F7DF" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7E0" data-uri="chapter02.xhtml#P700049702700000000000000003F7E0" class="pcalibre calibre3 pcalibre1">Integers are represented in two's-complement form.</p></li>
<li id="P700049702700000000000000003F7E1" data-uri="chapter02.xhtml#P700049702700000000000000003F7E1" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7E2" data-uri="chapter02.xhtml#P700049702700000000000000003F7E2" class="pcalibre calibre3 pcalibre1">Right shifts of signed data are performed arithmetically.</p></li>
<li id="P700049702700000000000000003F7E3" data-uri="chapter02.xhtml#P700049702700000000000000003F7E3" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7E4" data-uri="chapter02.xhtml#P700049702700000000000000003F7E4" class="pcalibre calibre3 pcalibre1">Data type <code id="P700049702700000000000000003F7E5" data-uri="chapter02.xhtml#P700049702700000000000000003F7E5" class="pcalibre1 calibre8 pcalibre">int</code> is <var class="calibre5 pcalibre pcalibre1">w</var> bits long. For some of the problems, you will be given a specific value for <var class="calibre5 pcalibre pcalibre1">w</var>, but otherwise your code should work as long as <var class="calibre5 pcalibre pcalibre1">w</var> is a multiple of 8. You can use the expression <code id="P700049702700000000000000003F7E6" data-uri="chapter02.xhtml#P700049702700000000000000003F7E6" class="pcalibre1 calibre8 pcalibre">sizeof(int)&lt;&lt;3</code> to compute <var class="calibre5 pcalibre pcalibre1">w</var>.</p></li>
</ul>
</li>
<li id="P700049702700000000000000003F7E7" data-uri="chapter02.xhtml#P700049702700000000000000003F7E7" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7E8" data-uri="chapter02.xhtml#P700049702700000000000000003F7E8" class="pcalibre calibre3 pcalibre1">Forbidden</p>
<ul id="P700049702700000000000000003F7E9" data-uri="chapter02.xhtml#P700049702700000000000000003F7E9" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000003F7EA" data-uri="chapter02.xhtml#P700049702700000000000000003F7EA" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7EB" data-uri="chapter02.xhtml#P700049702700000000000000003F7EB" class="pcalibre calibre3 pcalibre1">Conditionals <code id="P700049702700000000000000003F7EC" data-uri="chapter02.xhtml#P700049702700000000000000003F7EC" class="pcalibre1 calibre8 pcalibre">(if or ?:),</code> loops, switch statements, function calls, and macro invocations.</p></li>
<li id="P700049702700000000000000003F7ED" data-uri="chapter02.xhtml#P700049702700000000000000003F7ED" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7EE" data-uri="chapter02.xhtml#P700049702700000000000000003F7EE" class="pcalibre calibre3 pcalibre1">Division, modulus, and multiplication.</p></li>
<li id="P700049702700000000000000003F7EF" data-uri="chapter02.xhtml#P700049702700000000000000003F7EF" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7F0" data-uri="chapter02.xhtml#P700049702700000000000000003F7F0" class="pcalibre calibre3 pcalibre1">Relative comparison operators <code id="P700049702700000000000000003F7F1" data-uri="chapter02.xhtml#P700049702700000000000000003F7F1" class="pcalibre1 calibre8 pcalibre">(&lt;, &gt;, &lt;=, and &gt;=)</code>.</p></li>
</ul>
</li>
<li id="P700049702700000000000000003F7F2" data-uri="chapter02.xhtml#P700049702700000000000000003F7F2" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7F3" data-uri="chapter02.xhtml#P700049702700000000000000003F7F3" class="pcalibre calibre3 pcalibre1">Allowed operations</p>
<ul id="P700049702700000000000000003F7F4" data-uri="chapter02.xhtml#P700049702700000000000000003F7F4" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000003F7F5" data-uri="chapter02.xhtml#P700049702700000000000000003F7F5" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7F6" data-uri="chapter02.xhtml#P700049702700000000000000003F7F6" class="pcalibre calibre3 pcalibre1">All bit-level and logic operations.</p></li>
<li id="P700049702700000000000000003F7F7" data-uri="chapter02.xhtml#P700049702700000000000000003F7F7" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7F8" data-uri="chapter02.xhtml#P700049702700000000000000003F7F8" class="pcalibre calibre3 pcalibre1">Left and right shifts, but only with shift amounts between 0 and <var class="calibre5 pcalibre pcalibre1">w</var> – 1.</p></li>
<li id="P700049702700000000000000003F7F9" data-uri="chapter02.xhtml#P700049702700000000000000003F7F9" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7FA" data-uri="chapter02.xhtml#P700049702700000000000000003F7FA" class="pcalibre calibre3 pcalibre1">Addition and subtraction.</p></li>
<li id="P700049702700000000000000003F7FB" data-uri="chapter02.xhtml#P700049702700000000000000003F7FB" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F7FC" data-uri="chapter02.xhtml#P700049702700000000000000003F7FC" class="pcalibre calibre3 pcalibre1">Equality <code id="P700049702700000000000000003F7FD" data-uri="chapter02.xhtml#P700049702700000000000000003F7FD" class="pcalibre1 calibre8 pcalibre">(==)</code> and inequality <code id="P700049702700000000000000003F7FE" data-uri="chapter02.xhtml#P700049702700000000000000003F7FE" class="pcalibre1 calibre8 pcalibre">(!=)</code> tests. (Some of the problems do not allow these.)</p></li>
<li id="P700049702700000000000000003F7FF" data-uri="chapter02.xhtml#P700049702700000000000000003F7FF" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F800" data-uri="chapter02.xhtml#P700049702700000000000000003F800" class="pcalibre calibre3 pcalibre1">Integer constants <code id="P700049702700000000000000003F801" data-uri="chapter02.xhtml#P700049702700000000000000003F801" class="pcalibre1 calibre8 pcalibre">INT_MIN</code> and <code id="P700049702700000000000000003F802" data-uri="chapter02.xhtml#P700049702700000000000000003F802" class="pcalibre1 calibre8 pcalibre">INT_MAX.</code></p></li>
<li id="P700049702700000000000000003F803" data-uri="chapter02.xhtml#P700049702700000000000000003F803" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F804" data-uri="chapter02.xhtml#P700049702700000000000000003F804" class="pcalibre calibre3 pcalibre1">Casting between data types <code id="P700049702700000000000000003F805" data-uri="chapter02.xhtml#P700049702700000000000000003F805" class="pcalibre1 calibre8 pcalibre">int</code> and <code id="P700049702700000000000000003F806" data-uri="chapter02.xhtml#P700049702700000000000000003F806" class="pcalibre1 calibre8 pcalibre">unsigned</code>, either explicitly or implicitly.</p></li>
</ul>
</li>
</ul>
<p id="P700049702700000000000000003F807" data-uri="chapter02.xhtml#P700049702700000000000000003F807" class="pcalibre1 pcalibre calibre2">Even with these rules, you should try to make your code readable by choosing descriptive variable names and using comments to describe the logic behind your solutions. As an example, the following code extracts the most significant byte from integer argument <code id="P700049702700000000000000003F808" data-uri="chapter02.xhtml#P700049702700000000000000003F808" class="pcalibre1 calibre8 pcalibre">x</code>:</p>
<pre id="P700049702700000000000000003F809" data-uri="chapter02.xhtml#P700049702700000000000000003F809" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F80A" data-uri="chapter02.xhtml#P700049702700000000000000003F80A" class="calibre10 pcalibre pcalibre1">
/* Get most significant byte from x */
int get_msb(int x) {
    /* Shift by w-8 */
    int shift_val = (sizeof(int)-1)&lt;&lt;3;
    /* Arithmetic shift */
    int xright = x &gt;&gt; shift_val;
    /* Zero all but LSB */
    return xright &amp; 0xFF;
}
</code></pre>
</section>
<section id="P7000497027000000000000000001507" data-uri="chapter02.xhtml#P7000497027000000000000000001507" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F80B" data-uri="chapter02.xhtml#P700049702700000000000000003F80B" epub:type="title"><span class="pcalibre label pcalibre1">2.61 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F80C" data-uri="chapter02.xhtml#P700049702700000000000000003F80C">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F80D" data-uri="chapter02.xhtml#P700049702700000000000000003F80D">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F80E" data-uri="chapter02.xhtml#P700049702700000000000000003F80E"><p id="P700049702700000000000000003F80F" data-uri="chapter02.xhtml#P700049702700000000000000003F80F" class="pcalibre calibre3 pcalibre1">Write C expressions that evaluate to 1 when the following conditions are true and to 0 when they are false. Assume <code id="P700049702700000000000000003F810" data-uri="chapter02.xhtml#P700049702700000000000000003F810" class="pcalibre1 calibre8 pcalibre">x</code> is of type <code id="P700049702700000000000000003F811" data-uri="chapter02.xhtml#P700049702700000000000000003F811" class="pcalibre1 calibre8 pcalibre">int</code>.</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F812" data-uri="chapter02.xhtml#P700049702700000000000000003F812">
<li id="P7000497027000000000000000001510" data-uri="chapter02.xhtml#P7000497027000000000000000001510" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F813" data-uri="chapter02.xhtml#P700049702700000000000000003F813" class="pcalibre calibre3 pcalibre1">Any bit of <code id="P700049702700000000000000003F814" data-uri="chapter02.xhtml#P700049702700000000000000003F814" class="pcalibre1 calibre8 pcalibre">x</code> equals 1.</p></li>
<li id="P7000497027000000000000000001513" data-uri="chapter02.xhtml#P7000497027000000000000000001513" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F815" data-uri="chapter02.xhtml#P700049702700000000000000003F815" class="pcalibre calibre3 pcalibre1">Any bit of <code id="P700049702700000000000000003F816" data-uri="chapter02.xhtml#P700049702700000000000000003F816" class="pcalibre1 calibre8 pcalibre">x</code> equals 0.</p></li>
<li id="P7000497027000000000000000001516" data-uri="chapter02.xhtml#P7000497027000000000000000001516" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F817" data-uri="chapter02.xhtml#P700049702700000000000000003F817" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001518" title="130" data-uri="chapter02.xhtml#P7000497027000000000000000001518" epub:type="pagebreak"></span>Any bit in the least significant byte of <code id="P700049702700000000000000003F818" data-uri="chapter02.xhtml#P700049702700000000000000003F818" class="pcalibre1 calibre8 pcalibre">x</code> equals 1.</p></li>
<li id="P700049702700000000000000000151A" data-uri="chapter02.xhtml#P700049702700000000000000000151A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F819" data-uri="chapter02.xhtml#P700049702700000000000000003F819" class="pcalibre calibre3 pcalibre1">Any bit in the most significant byte of <code id="P700049702700000000000000003F81A" data-uri="chapter02.xhtml#P700049702700000000000000003F81A" class="pcalibre1 calibre8 pcalibre">x</code> equals 0.</p></li>
</ol>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003F81B" data-uri="chapter02.xhtml#P700049702700000000000000003F81B">Your code should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>), with the additional restriction that you may not use equality <code id="P700049702700000000000000003F81C" data-uri="chapter02.xhtml#P700049702700000000000000003F81C" class="pcalibre1 calibre8 pcalibre">(==)</code> or inequality <code id="P700049702700000000000000003F81D" data-uri="chapter02.xhtml#P700049702700000000000000003F81D" class="pcalibre1 calibre8 pcalibre">(!=)</code> tests.</p>
</li></ol>
</section>
<section id="P7000497027000000000000000001520" data-uri="chapter02.xhtml#P7000497027000000000000000001520" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F81E" data-uri="chapter02.xhtml#P700049702700000000000000003F81E" epub:type="title"><span class="pcalibre label pcalibre1">2.62 ♦♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F81F" data-uri="chapter02.xhtml#P700049702700000000000000003F81F">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F820" data-uri="chapter02.xhtml#P700049702700000000000000003F820">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F821" data-uri="chapter02.xhtml#P700049702700000000000000003F821"><p id="P700049702700000000000000003F822" data-uri="chapter02.xhtml#P700049702700000000000000003F822" class="pcalibre calibre3 pcalibre1">Write a function <code id="P700049702700000000000000003F823" data-uri="chapter02.xhtml#P700049702700000000000000003F823" class="pcalibre1 calibre8 pcalibre">int_shifts_are_arithmetic()</code> that yields 1 when run on a machine that uses arithmetic right shifts for data type <code id="P700049702700000000000000003F824" data-uri="chapter02.xhtml#P700049702700000000000000003F824" class="pcalibre1 calibre8 pcalibre">int</code> and yields <code id="P700049702700000000000000003F825" data-uri="chapter02.xhtml#P700049702700000000000000003F825" class="pcalibre1 calibre8 pcalibre">0</code> otherwise. Your code should work on a machine with any word size. Test your code on several machines.</p>
</div></li></ol>
</section>
<section id="P7000497027000000000000000001529" data-uri="chapter02.xhtml#P7000497027000000000000000001529" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F826" data-uri="chapter02.xhtml#P700049702700000000000000003F826" epub:type="title"><span class="pcalibre label pcalibre1">2.63 ♦♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F827" data-uri="chapter02.xhtml#P700049702700000000000000003F827">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F828" data-uri="chapter02.xhtml#P700049702700000000000000003F828">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F829" data-uri="chapter02.xhtml#P700049702700000000000000003F829"><p id="P700049702700000000000000003F82A" data-uri="chapter02.xhtml#P700049702700000000000000003F82A" class="pcalibre calibre3 pcalibre1">Fill in code for the following C functions. Function <code id="P700049702700000000000000003F82B" data-uri="chapter02.xhtml#P700049702700000000000000003F82B" class="pcalibre1 calibre8 pcalibre">srl</code> performs a logical right shift using an arithmetic right shift (given by value <code id="P700049702700000000000000003F82C" data-uri="chapter02.xhtml#P700049702700000000000000003F82C" class="pcalibre1 calibre8 pcalibre">xsra</code>), followed by other operations not including right shifts or division. Function <code id="P700049702700000000000000003F82D" data-uri="chapter02.xhtml#P700049702700000000000000003F82D" class="pcalibre1 calibre8 pcalibre">sra</code> performs an arithmetic right shift using a logical right shift (given by value <code id="P700049702700000000000000003F82E" data-uri="chapter02.xhtml#P700049702700000000000000003F82E" class="pcalibre1 calibre8 pcalibre">xsrl</code>), followed by other operations not including right shifts or division. You may use the computation <code id="P700049702700000000000000003F82F" data-uri="chapter02.xhtml#P700049702700000000000000003F82F" class="pcalibre1 calibre8 pcalibre">8*sizeof(int)</code> to determine <var class="calibre5 pcalibre pcalibre1">w</var>, the number of bits in data type <code id="P700049702700000000000000003F830" data-uri="chapter02.xhtml#P700049702700000000000000003F830" class="pcalibre1 calibre8 pcalibre">int</code>. The shift amount <code id="P700049702700000000000000003F831" data-uri="chapter02.xhtml#P700049702700000000000000003F831" class="pcalibre1 calibre8 pcalibre">k</code> can range from <code id="P700049702700000000000000003F832" data-uri="chapter02.xhtml#P700049702700000000000000003F832" class="pcalibre1 calibre8 pcalibre">0</code> to <var class="calibre5 pcalibre pcalibre1">w</var> – 1.</p></div>
<pre id="P700049702700000000000000003F833" data-uri="chapter02.xhtml#P700049702700000000000000003F833" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F834" data-uri="chapter02.xhtml#P700049702700000000000000003F834" class="calibre10 pcalibre pcalibre1">
unsigned srl(unsigned x, int k) {
    /* Perform shift arithmetically */
    unsigned xsra = (int) x &gt;&gt; k;
.
.
.
.
.
.
}
int sra(int x, int k) {
    /* Perform shift logically */
    int xsrl = (unsigned) x &gt;&gt; k;
.
.
.
.
.
.
}
</code></pre></li>
</ol>
</section>
<section id="P7000497027000000000000000001539" data-uri="chapter02.xhtml#P7000497027000000000000000001539" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F835" data-uri="chapter02.xhtml#P700049702700000000000000003F835" epub:type="title"><span class="pcalibre label pcalibre1">2.64 ♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F836" data-uri="chapter02.xhtml#P700049702700000000000000003F836">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F837" data-uri="chapter02.xhtml#P700049702700000000000000003F837">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F838" data-uri="chapter02.xhtml#P700049702700000000000000003F838"><p id="P700049702700000000000000003F839" data-uri="chapter02.xhtml#P700049702700000000000000003F839" class="pcalibre calibre3 pcalibre1">Write code to implement the following function:</p></div>
<pre id="P700049702700000000000000003F83A" data-uri="chapter02.xhtml#P700049702700000000000000003F83A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F83B" data-uri="chapter02.xhtml#P700049702700000000000000003F83B" class="calibre10 pcalibre pcalibre1">
/* Return 1 when any odd bit of x equals 1; 0 otherwise.
   Assume w=32 */
int any_odd_one(unsigned x);
</code></pre>
<p id="P700049702700000000000000003F83C" data-uri="chapter02.xhtml#P700049702700000000000000003F83C" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>), except that you may assume that data type <code id="P700049702700000000000000003F83D" data-uri="chapter02.xhtml#P700049702700000000000000003F83D" class="pcalibre1 calibre8 pcalibre">int</code> has <var class="calibre5 pcalibre pcalibre1">w</var> = 32 bits.</p>
</li></ol>
</section>
<section id="P7000497027000000000000000001543" data-uri="chapter02.xhtml#P7000497027000000000000000001543" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F83E" data-uri="chapter02.xhtml#P700049702700000000000000003F83E" epub:type="title"><span class="pcalibre label pcalibre1">2.65 ♦♦♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F83F" data-uri="chapter02.xhtml#P700049702700000000000000003F83F">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F840" data-uri="chapter02.xhtml#P700049702700000000000000003F840">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F841" data-uri="chapter02.xhtml#P700049702700000000000000003F841"><p id="P700049702700000000000000003F842" data-uri="chapter02.xhtml#P700049702700000000000000003F842" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001549" title="131" data-uri="chapter02.xhtml#P7000497027000000000000000001549" epub:type="pagebreak"></span>Write code to implement the following function:</p></div>
<pre id="P700049702700000000000000003F843" data-uri="chapter02.xhtml#P700049702700000000000000003F843" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F844" data-uri="chapter02.xhtml#P700049702700000000000000003F844" class="calibre10 pcalibre pcalibre1">
/* Return 1 when x contains an odd number of 1s; 0 otherwise.
   Assume w=32 */
int odd_ones(unsigned x);
</code></pre>
<p id="P700049702700000000000000003F845" data-uri="chapter02.xhtml#P700049702700000000000000003F845" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>), except that you may assume that data type <code id="P700049702700000000000000003F846" data-uri="chapter02.xhtml#P700049702700000000000000003F846" class="pcalibre1 calibre8 pcalibre">int</code> has <var class="calibre5 pcalibre pcalibre1">w</var> = 32 bits.</p>
<p id="P700049702700000000000000003F847" data-uri="chapter02.xhtml#P700049702700000000000000003F847" class="pcalibre calibre3 pcalibre1">Your code should contain a total of at most 12 arithmetic, bitwise, and logical operations.</p>
</li></ol>
</section>
<section id="P700049702700000000000000000154F" data-uri="chapter02.xhtml#P700049702700000000000000000154F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F848" data-uri="chapter02.xhtml#P700049702700000000000000003F848" epub:type="title"><span class="pcalibre label pcalibre1">2.66 ♦♦♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F849" data-uri="chapter02.xhtml#P700049702700000000000000003F849">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F84A" data-uri="chapter02.xhtml#P700049702700000000000000003F84A">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F84B" data-uri="chapter02.xhtml#P700049702700000000000000003F84B"><p id="P700049702700000000000000003F84C" data-uri="chapter02.xhtml#P700049702700000000000000003F84C" class="pcalibre calibre3 pcalibre1">Write code to implement the following function:</p></div>
<pre id="P700049702700000000000000003F84D" data-uri="chapter02.xhtml#P700049702700000000000000003F84D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F84E" data-uri="chapter02.xhtml#P700049702700000000000000003F84E" class="calibre10 pcalibre pcalibre1">
/*
 * Generate mask indicating leftmost 1 in x. Assume w=32.
 * For example, 0xFF00 -&gt; 0x8000, and 0x6600 -&gt; 0x4000.
 * If x = 0, then return 0.
 */
int leftmost_one(unsigned x);
</code></pre>
<p id="P700049702700000000000000003F84F" data-uri="chapter02.xhtml#P700049702700000000000000003F84F" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>), except that you may assume that data type <code id="P700049702700000000000000003F850" data-uri="chapter02.xhtml#P700049702700000000000000003F850" class="pcalibre1 calibre8 pcalibre">int</code> has <var class="calibre5 pcalibre pcalibre1">w</var> = 32 bits.</p>
<p id="P700049702700000000000000003F851" data-uri="chapter02.xhtml#P700049702700000000000000003F851" class="pcalibre calibre3 pcalibre1">Your code should contain a total of at most 15 arithmetic, bitwise, and logical operations.</p>
<p id="P700049702700000000000000003F852" data-uri="chapter02.xhtml#P700049702700000000000000003F852" class="pcalibre calibre3 pcalibre1"><i class="calibre5 pcalibre pcalibre1">Hint:</i> First transform <code id="P700049702700000000000000003F853" data-uri="chapter02.xhtml#P700049702700000000000000003F853" class="pcalibre1 calibre8 pcalibre">x</code> into a bit vector of the form [0 ... 011 ... 1].</p>
</li></ol>
</section>
<section id="P700049702700000000000000000155C" data-uri="chapter02.xhtml#P700049702700000000000000000155C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F854" data-uri="chapter02.xhtml#P700049702700000000000000003F854" epub:type="title"><span class="pcalibre label pcalibre1">2.67 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F855" data-uri="chapter02.xhtml#P700049702700000000000000003F855">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F856" data-uri="chapter02.xhtml#P700049702700000000000000003F856">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F857" data-uri="chapter02.xhtml#P700049702700000000000000003F857"><p id="P700049702700000000000000003F858" data-uri="chapter02.xhtml#P700049702700000000000000003F858" class="pcalibre calibre3 pcalibre1">You are given the task of writing a procedure <code id="P700049702700000000000000003F859" data-uri="chapter02.xhtml#P700049702700000000000000003F859" class="pcalibre1 calibre8 pcalibre">int_size_is_32()</code> that yields 1 when run on a machine for which an <code id="P700049702700000000000000003F85A" data-uri="chapter02.xhtml#P700049702700000000000000003F85A" class="pcalibre1 calibre8 pcalibre">int</code> is 32 bits, and yields 0 otherwise. You are not allowed to use the <code id="P700049702700000000000000003F85B" data-uri="chapter02.xhtml#P700049702700000000000000003F85B" class="pcalibre1 calibre8 pcalibre">sizeof</code> operator. Here is a first attempt:</p></div>
<pre id="P700049702700000000000000003F85C" data-uri="chapter02.xhtml#P700049702700000000000000003F85C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F85D" data-uri="chapter02.xhtml#P700049702700000000000000003F85D" class="calibre10 pcalibre pcalibre1">
1   /* The following code does not run properly on some machines */
2   int bad_int_size_is_32() {
3       /* Set most significant bit (msb) of 32-bit machine */
4       int set_msb = 1 &lt;&lt; 31;
5       /* Shift past msb of 32-bit word */
6       int beyond_msb = 1 &lt;&lt; 32;
7
8       /* set_msb is nonzero when word size &gt;= 32
9          beyond_msb is zero when word size &lt;= 32 */
10      return set_msb &amp;&amp; !beyond_msb;
11	}
</code></pre>
<p id="P700049702700000000000000003F85E" data-uri="chapter02.xhtml#P700049702700000000000000003F85E" class="pcalibre calibre3 pcalibre1">When compiled and run on a 32-bit SUN SPARC, however, this procedure returns 0. The following compiler message gives us an indication of the problem:</p>
<pre id="P700049702700000000000000003F85F" data-uri="chapter02.xhtml#P700049702700000000000000003F85F" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F860" data-uri="chapter02.xhtml#P700049702700000000000000003F860" class="calibre10 pcalibre pcalibre1">
warning: left shift count &gt;= width of type
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F861" data-uri="chapter02.xhtml#P700049702700000000000000003F861">
<li id="P700049702700000000000000003F862" data-uri="chapter02.xhtml#P700049702700000000000000003F862" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F863" data-uri="chapter02.xhtml#P700049702700000000000000003F863" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000156D" title="132" data-uri="chapter02.xhtml#P700049702700000000000000000156D" epub:type="pagebreak"></span>In what way does our code fail to comply with the C standard?</p></li>
<li id="P700049702700000000000000003F864" data-uri="chapter02.xhtml#P700049702700000000000000003F864" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F865" data-uri="chapter02.xhtml#P700049702700000000000000003F865" class="pcalibre calibre3 pcalibre1">Modify the code to run properly on any machine for which data type <code id="P700049702700000000000000003F866" data-uri="chapter02.xhtml#P700049702700000000000000003F866" class="pcalibre1 calibre8 pcalibre">int</code> is at least 32 bits.</p></li>
<li id="P700049702700000000000000003F867" data-uri="chapter02.xhtml#P700049702700000000000000003F867" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F868" data-uri="chapter02.xhtml#P700049702700000000000000003F868" class="pcalibre calibre3 pcalibre1">Modify the code to run properly on any machine for which data type <code id="P700049702700000000000000003F869" data-uri="chapter02.xhtml#P700049702700000000000000003F869" class="pcalibre1 calibre8 pcalibre">int</code> is at least 16 bits.</p></li>
</ol></li>
</ol></section>
<section id="P7000497027000000000000000001574" data-uri="chapter02.xhtml#P7000497027000000000000000001574" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F86A" data-uri="chapter02.xhtml#P700049702700000000000000003F86A" epub:type="title"><span class="pcalibre label pcalibre1">2.68 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F86B" data-uri="chapter02.xhtml#P700049702700000000000000003F86B">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F86C" data-uri="chapter02.xhtml#P700049702700000000000000003F86C">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F86D" data-uri="chapter02.xhtml#P700049702700000000000000003F86D"><p id="P700049702700000000000000003F86E" data-uri="chapter02.xhtml#P700049702700000000000000003F86E" class="pcalibre calibre3 pcalibre1">Write code for a function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F86F" data-uri="chapter02.xhtml#P700049702700000000000000003F86F" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F870" data-uri="chapter02.xhtml#P700049702700000000000000003F870" class="calibre10 pcalibre pcalibre1">
/*
 * Mask with least signficant n bits set to 1
 * Examples: n = 6 –&gt; 0x3F, n = 17 –&gt; 0x1FFFF
 * Assume 1 &lt;= n &lt;= w
 */
int lower_one_mask(int n);
</code></pre>
<p id="P700049702700000000000000003F871" data-uri="chapter02.xhtml#P700049702700000000000000003F871" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>). Be careful of the case <code id="P700049702700000000000000003F872" data-uri="chapter02.xhtml#P700049702700000000000000003F872" class="pcalibre1 calibre8 pcalibre">n</code> = <var class="calibre5 pcalibre pcalibre1">w</var>.</p></li>
</ol></section>
<section id="P700049702700000000000000000157E" data-uri="chapter02.xhtml#P700049702700000000000000000157E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F873" data-uri="chapter02.xhtml#P700049702700000000000000003F873" epub:type="title"><span class="pcalibre label pcalibre1">2.69 ♦♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F874" data-uri="chapter02.xhtml#P700049702700000000000000003F874">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F875" data-uri="chapter02.xhtml#P700049702700000000000000003F875">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F876" data-uri="chapter02.xhtml#P700049702700000000000000003F876"><p id="P700049702700000000000000003F877" data-uri="chapter02.xhtml#P700049702700000000000000003F877" class="pcalibre calibre3 pcalibre1">Write code for a function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F878" data-uri="chapter02.xhtml#P700049702700000000000000003F878" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F879" data-uri="chapter02.xhtml#P700049702700000000000000003F879" class="calibre10 pcalibre pcalibre1">
/*
 * Do rotating left shift. Assume 0 &lt;= n &lt; w
 * Examples when x = 0x12345678 and w = 32:
 * n=4 -&gt; 0x23456781, n=20 -&gt; 0x67812345
 */
unsigned rotate_left(unsigned x, int n);
</code></pre>
<p id="P700049702700000000000000003F87A" data-uri="chapter02.xhtml#P700049702700000000000000003F87A" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>). Be careful of the case <code id="P700049702700000000000000003F87B" data-uri="chapter02.xhtml#P700049702700000000000000003F87B" class="pcalibre1 calibre8 pcalibre">n</code> = 0.</p></li>
</ol></section>
<section id="P7000497027000000000000000001588" data-uri="chapter02.xhtml#P7000497027000000000000000001588" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F87C" data-uri="chapter02.xhtml#P700049702700000000000000003F87C" epub:type="title"><span class="pcalibre label pcalibre1">2.70 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F87D" data-uri="chapter02.xhtml#P700049702700000000000000003F87D">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F87E" data-uri="chapter02.xhtml#P700049702700000000000000003F87E">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F87F" data-uri="chapter02.xhtml#P700049702700000000000000003F87F"><p id="P700049702700000000000000003F880" data-uri="chapter02.xhtml#P700049702700000000000000003F880" class="pcalibre calibre3 pcalibre1">Write code for the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F881" data-uri="chapter02.xhtml#P700049702700000000000000003F881" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F882" data-uri="chapter02.xhtml#P700049702700000000000000003F882" class="calibre10 pcalibre pcalibre1">
/*
 * Return 1 when x can be represented as an n-bit, 2's-complement
 * number; 0 otherwise
 * Assume 1 &lt;= n &lt;= w
 */
int fits_bits(int x, int n);
</code></pre>
<p id="P700049702700000000000000003F883" data-uri="chapter02.xhtml#P700049702700000000000000003F883" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>).</p>
</li>
</ol></section>
<section id="P7000497027000000000000000001591" data-uri="chapter02.xhtml#P7000497027000000000000000001591" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F884" data-uri="chapter02.xhtml#P700049702700000000000000003F884" epub:type="title"><span class="pcalibre label pcalibre1">2.71  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F885" data-uri="chapter02.xhtml#P700049702700000000000000003F885">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F886" data-uri="chapter02.xhtml#P700049702700000000000000003F886">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F887" data-uri="chapter02.xhtml#P700049702700000000000000003F887"><p id="P700049702700000000000000003F888" data-uri="chapter02.xhtml#P700049702700000000000000003F888" class="pcalibre calibre3 pcalibre1">You just started working for a company that is implementing a set of procedures to operate on a data structure where 4 signed bytes are packed into a 32-bit <code id="P700049702700000000000000003F889" data-uri="chapter02.xhtml#P700049702700000000000000003F889" class="pcalibre1 calibre8 pcalibre">unsigned</code>. Bytes within the word are numbered from 0 (least significant) to 3 <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001598" title="133" data-uri="chapter02.xhtml#P7000497027000000000000000001598" epub:type="pagebreak"></span>(most significant). You have been assigned the task of implementing a function for a machine using two's-complement arithmetic and arithmetic right shifts with the following prototype:</p></div>
<pre id="P700049702700000000000000003F88A" data-uri="chapter02.xhtml#P700049702700000000000000003F88A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F88B" data-uri="chapter02.xhtml#P700049702700000000000000003F88B" class="calibre10 pcalibre pcalibre1">
/* Declaration of data type where 4 bytes are packed
   into an unsigned */
typedef unsigned packed_t;

/* Extract byte from word. Return as signed integer */
int xbyte(packed_t word, int bytenum);
</code></pre>
<p id="P700049702700000000000000003F88C" data-uri="chapter02.xhtml#P700049702700000000000000003F88C" class="pcalibre calibre3 pcalibre1">That is, the function will extract the designated byte and sign extend it to be a 32-bit <code id="P700049702700000000000000003F88D" data-uri="chapter02.xhtml#P700049702700000000000000003F88D" class="pcalibre1 calibre8 pcalibre">int</code>.</p>
<p id="P700049702700000000000000003F88E" data-uri="chapter02.xhtml#P700049702700000000000000003F88E" class="pcalibre calibre3 pcalibre1">Your predecessor (who was fired for incompetence) wrote the following code:</p>
<pre id="P700049702700000000000000003F88F" data-uri="chapter02.xhtml#P700049702700000000000000003F88F" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F890" data-uri="chapter02.xhtml#P700049702700000000000000003F890" class="calibre10 pcalibre pcalibre1">
/* Failed attempt at xbyte */
int xbyte(packed_t word, int bytenum)
{
    return (word &gt;&gt; (bytenum &lt;&lt; 3)) &amp; 0xFF;
}
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F891" data-uri="chapter02.xhtml#P700049702700000000000000003F891">
<li id="P700049702700000000000000003F892" data-uri="chapter02.xhtml#P700049702700000000000000003F892" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F893" data-uri="chapter02.xhtml#P700049702700000000000000003F893" class="pcalibre calibre3 pcalibre1">What is wrong with this code?</p></li>
<li id="P700049702700000000000000003F894" data-uri="chapter02.xhtml#P700049702700000000000000003F894" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F895" data-uri="chapter02.xhtml#P700049702700000000000000003F895" class="pcalibre calibre3 pcalibre1">Give a correct implementation of the function that uses only left and right shifts, along with one subtraction.</p></li>
</ol></li>
</ol>
</section>
<section id="P70004970270000000000000000015A5" data-uri="chapter02.xhtml#P70004970270000000000000000015A5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F896" data-uri="chapter02.xhtml#P700049702700000000000000003F896" epub:type="title"><span class="pcalibre label pcalibre1">2.72  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F897" data-uri="chapter02.xhtml#P700049702700000000000000003F897">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F898" data-uri="chapter02.xhtml#P700049702700000000000000003F898">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F899" data-uri="chapter02.xhtml#P700049702700000000000000003F899"><p id="P700049702700000000000000003F89A" data-uri="chapter02.xhtml#P700049702700000000000000003F89A" class="pcalibre calibre3 pcalibre1">You are given the task of writing a function that will copy an integer <code id="P700049702700000000000000003F89B" data-uri="chapter02.xhtml#P700049702700000000000000003F89B" class="pcalibre1 calibre8 pcalibre">val</code> into a buffer <code id="P700049702700000000000000003F89C" data-uri="chapter02.xhtml#P700049702700000000000000003F89C" class="pcalibre1 calibre8 pcalibre">buf</code>, but it should do so only if enough space is available in the buffer.</p></div>
<p id="P700049702700000000000000003F89D" data-uri="chapter02.xhtml#P700049702700000000000000003F89D" class="pcalibre calibre3 pcalibre1">Here is the code you write:</p>
<pre id="P700049702700000000000000003F89E" data-uri="chapter02.xhtml#P700049702700000000000000003F89E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F89F" data-uri="chapter02.xhtml#P700049702700000000000000003F89F" class="calibre10 pcalibre pcalibre1">
/* Copy integer into buffer if space is available */
/* WARNING: The following code is buggy */
void copy_int(int val, void *buf, int maxbytes) {
	if (maxbytes-sizeof(val) &gt;= 0)
		memcpy(buf, (void *) &amp;val, sizeof(val));
}
</code></pre>
<p id="P700049702700000000000000003F8A0" data-uri="chapter02.xhtml#P700049702700000000000000003F8A0" class="pcalibre calibre3 pcalibre1">This code makes use of the library function <code id="P700049702700000000000000003F8A1" data-uri="chapter02.xhtml#P700049702700000000000000003F8A1" class="pcalibre1 calibre8 pcalibre">memcpy</code>. Although its use is a bit artificial here, where we simply want to copy an <code id="P700049702700000000000000003F8A2" data-uri="chapter02.xhtml#P700049702700000000000000003F8A2" class="pcalibre1 calibre8 pcalibre">int</code>, it illustrates an approach commonly used to copy larger data structures.</p>
<p id="P700049702700000000000000003F8A3" data-uri="chapter02.xhtml#P700049702700000000000000003F8A3" class="pcalibre calibre3 pcalibre1">You carefully test the code and discover that it <i class="calibre5 pcalibre pcalibre1">always</i> copies the value to the buffer, even when <code id="P700049702700000000000000003F8A4" data-uri="chapter02.xhtml#P700049702700000000000000003F8A4" class="pcalibre1 calibre8 pcalibre">maxbytes</code> is too small.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F8A5" data-uri="chapter02.xhtml#P700049702700000000000000003F8A5">
<li id="P700049702700000000000000003F8A6" data-uri="chapter02.xhtml#P700049702700000000000000003F8A6" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8A7" data-uri="chapter02.xhtml#P700049702700000000000000003F8A7" class="pcalibre calibre3 pcalibre1">Explain why the conditional test in the code always succeeds. <i class="calibre5 pcalibre pcalibre1">Hint:</i> The <code id="P700049702700000000000000003F8A8" data-uri="chapter02.xhtml#P700049702700000000000000003F8A8" class="pcalibre1 calibre8 pcalibre">sizeof</code> operator returns a value of type <code id="P700049702700000000000000003F8A9" data-uri="chapter02.xhtml#P700049702700000000000000003F8A9" class="pcalibre1 calibre8 pcalibre">size_t</code>.</p></li>
<li id="P700049702700000000000000003F8AA" data-uri="chapter02.xhtml#P700049702700000000000000003F8AA" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8AB" data-uri="chapter02.xhtml#P700049702700000000000000003F8AB" class="pcalibre calibre3 pcalibre1">Show how you can rewrite the conditional test to make it work properly.</p></li>
</ol></li>
</ol>
</section>
<section id="P70004970270000000000000000015BC" data-uri="chapter02.xhtml#P70004970270000000000000000015BC" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8AC" data-uri="chapter02.xhtml#P700049702700000000000000003F8AC" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000015BE" title="134" data-uri="chapter02.xhtml#P70004970270000000000000000015BE" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">2.73  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8AD" data-uri="chapter02.xhtml#P700049702700000000000000003F8AD">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8AE" data-uri="chapter02.xhtml#P700049702700000000000000003F8AE">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8AF" data-uri="chapter02.xhtml#P700049702700000000000000003F8AF"><p id="P700049702700000000000000003F8B0" data-uri="chapter02.xhtml#P700049702700000000000000003F8B0" class="pcalibre calibre3 pcalibre1">Write code for a function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F8B1" data-uri="chapter02.xhtml#P700049702700000000000000003F8B1" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8B2" data-uri="chapter02.xhtml#P700049702700000000000000003F8B2" class="calibre10 pcalibre pcalibre1">
/* Addition that saturates to TMin or TMax */
int saturating_add(int x, int y);
</code></pre>
<p id="P700049702700000000000000003F8B3" data-uri="chapter02.xhtml#P700049702700000000000000003F8B3" class="pcalibre calibre3 pcalibre1">Instead of overflowing the way normal two's-complement addition does, saturating addition returns <i class="calibre5 pcalibre pcalibre1">TMax</i> when there would be positive overflow, and <i class="calibre5 pcalibre pcalibre1">TMin</i> when there would be negative overflow. Saturating arithmetic is commonly used in programs that perform digital signal processing.</p>
<p id="P700049702700000000000000003F8B4" data-uri="chapter02.xhtml#P700049702700000000000000003F8B4" class="pcalibre calibre3 pcalibre1">Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>).</p>
</li>
</ol>
</section>
<section id="P70004970270000000000000000015C7" data-uri="chapter02.xhtml#P70004970270000000000000000015C7" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8B5" data-uri="chapter02.xhtml#P700049702700000000000000003F8B5" epub:type="title"><span class="pcalibre label pcalibre1">2.74  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8B6" data-uri="chapter02.xhtml#P700049702700000000000000003F8B6">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8B7" data-uri="chapter02.xhtml#P700049702700000000000000003F8B7">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8B8" data-uri="chapter02.xhtml#P700049702700000000000000003F8B8"><p id="P700049702700000000000000003F8B9" data-uri="chapter02.xhtml#P700049702700000000000000003F8B9" class="pcalibre calibre3 pcalibre1">Write a function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F8BA" data-uri="chapter02.xhtml#P700049702700000000000000003F8BA" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8BB" data-uri="chapter02.xhtml#P700049702700000000000000003F8BB" class="calibre10 pcalibre pcalibre1">
/* Determine whether arguments can be subtracted without overflow */
int tsub_ok(int x, int y);
</code></pre>
<p id="P700049702700000000000000003F8BC" data-uri="chapter02.xhtml#P700049702700000000000000003F8BC" class="pcalibre calibre3 pcalibre1">This function should return 1 if the computation <code id="P700049702700000000000000003F8BD" data-uri="chapter02.xhtml#P700049702700000000000000003F8BD" class="pcalibre1 calibre8 pcalibre">x-y</code> does not overflow.</p></li>
</ol></section>
<section id="P70004970270000000000000000015D1" data-uri="chapter02.xhtml#P70004970270000000000000000015D1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8BE" data-uri="chapter02.xhtml#P700049702700000000000000003F8BE" epub:type="title"><span class="pcalibre label pcalibre1">2.75  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8BF" data-uri="chapter02.xhtml#P700049702700000000000000003F8BF">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8C0" data-uri="chapter02.xhtml#P700049702700000000000000003F8C0">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8C1" data-uri="chapter02.xhtml#P700049702700000000000000003F8C1"><p id="P700049702700000000000000003F8C2" data-uri="chapter02.xhtml#P700049702700000000000000003F8C2" class="pcalibre calibre3 pcalibre1">Suppose we want to compute the complete 2<var class="calibre5 pcalibre pcalibre1">w</var>-bit representation of <i class="calibre5 pcalibre pcalibre1">x · y</i>, where both <var class="calibre5 pcalibre pcalibre1">x</var> and <var class="calibre5 pcalibre pcalibre1">y</var> are unsigned, on a machine for which data type <code id="P700049702700000000000000003F8C3" data-uri="chapter02.xhtml#P700049702700000000000000003F8C3" class="pcalibre1 calibre8 pcalibre">unsigned</code> is <var class="calibre5 pcalibre pcalibre1">w</var> bits. The low-order <var class="calibre5 pcalibre pcalibre1">w</var> bits of the product can be computed with the expression <code id="P700049702700000000000000003F8C4" data-uri="chapter02.xhtml#P700049702700000000000000003F8C4" class="pcalibre1 calibre8 pcalibre">x*y</code>, so we only require a procedure with prototype</p></div>
<pre id="P700049702700000000000000003F8C5" data-uri="chapter02.xhtml#P700049702700000000000000003F8C5" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8C6" data-uri="chapter02.xhtml#P700049702700000000000000003F8C6" class="calibre10 pcalibre pcalibre1">
unsigned unsigned_high_prod(unsigned x, unsigned y);
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003F8C7" data-uri="chapter02.xhtml#P700049702700000000000000003F8C7">that computes the high-order <var class="calibre5 pcalibre pcalibre1">w</var> bits of <i class="calibre5 pcalibre pcalibre1">x · y</i> for unsigned variables.</p>
<p id="P700049702700000000000000003F8C8" data-uri="chapter02.xhtml#P700049702700000000000000003F8C8" class="pcalibre calibre3 pcalibre1">We have access to a library function with prototype</p>
<pre id="P700049702700000000000000003F8C9" data-uri="chapter02.xhtml#P700049702700000000000000003F8C9" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8CA" data-uri="chapter02.xhtml#P700049702700000000000000003F8CA" class="calibre10 pcalibre pcalibre1">
int signed_high_prod(int x, int y);
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003F8CB" data-uri="chapter02.xhtml#P700049702700000000000000003F8CB">that computes the high-order <var class="calibre5 pcalibre pcalibre1">w</var> bits of <i class="calibre5 pcalibre pcalibre1">x · y</i> for the case where <var class="calibre5 pcalibre pcalibre1">x</var> and <var class="calibre5 pcalibre pcalibre1">y</var> are in two's-complement form. Write code calling this procedure to implement the function for unsigned arguments. Justify the correctness of your solution.</p>
<p id="P700049702700000000000000003F8CC" data-uri="chapter02.xhtml#P700049702700000000000000003F8CC" class="pcalibre calibre3 pcalibre1"><i class="calibre5 pcalibre pcalibre1">Hint:</i> Look at the relationship between the signed product <i class="calibre5 pcalibre pcalibre1">x · y</i> and the unsigned product <i class="calibre5 pcalibre pcalibre1">x′ · y′</i> in the derivation of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000CB3_split_001.xhtml#P7000497027000000000000000000EFA"><span class="pcalibre label pcalibre1">Equation </span><span class="pcalibre label pcalibre1">2.18</span></a>.</p></li>
</ol></section>
<section id="P70004970270000000000000000015E1" data-uri="chapter02.xhtml#P70004970270000000000000000015E1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8CD" data-uri="chapter02.xhtml#P700049702700000000000000003F8CD" epub:type="title"><span class="pcalibre label pcalibre1">2.76  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8CE" data-uri="chapter02.xhtml#P700049702700000000000000003F8CE">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8CF" data-uri="chapter02.xhtml#P700049702700000000000000003F8CF">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8D0" data-uri="chapter02.xhtml#P700049702700000000000000003F8D0"><p id="P700049702700000000000000003F8D1" data-uri="chapter02.xhtml#P700049702700000000000000003F8D1" class="pcalibre calibre3 pcalibre1">The library function <code id="P700049702700000000000000003F8D2" data-uri="chapter02.xhtml#P700049702700000000000000003F8D2" class="pcalibre1 calibre8 pcalibre">calloc</code> has the following declaration:</p></div>
<pre id="P700049702700000000000000003F8D3" data-uri="chapter02.xhtml#P700049702700000000000000003F8D3" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8D4" data-uri="chapter02.xhtml#P700049702700000000000000003F8D4" class="calibre10 pcalibre pcalibre1">
void *calloc(size_t nmemb, size_t size);
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000003F8D5" data-uri="chapter02.xhtml#P700049702700000000000000003F8D5">According to the library documentation, “The <code id="P700049702700000000000000003F8D6" data-uri="chapter02.xhtml#P700049702700000000000000003F8D6" class="pcalibre1 calibre8 pcalibre">calloc</code> function allocates memory for an array of <code id="P700049702700000000000000003F8D7" data-uri="chapter02.xhtml#P700049702700000000000000003F8D7" class="pcalibre1 calibre8 pcalibre">nmemb</code> elements of <code id="P700049702700000000000000003F8D8" data-uri="chapter02.xhtml#P700049702700000000000000003F8D8" class="pcalibre1 calibre8 pcalibre">size</code> bytes each. The memory is set to zero. If <code id="P700049702700000000000000003F8D9" data-uri="chapter02.xhtml#P700049702700000000000000003F8D9" class="pcalibre1 calibre8 pcalibre">nmemb</code> or <code id="P700049702700000000000000003F8DA" data-uri="chapter02.xhtml#P700049702700000000000000003F8DA" class="pcalibre1 calibre8 pcalibre">size</code> is zero, then <code id="P700049702700000000000000003F8DB" data-uri="chapter02.xhtml#P700049702700000000000000003F8DB" class="pcalibre1 calibre8 pcalibre">calloc</code> returns <code id="P700049702700000000000000003F8DC" data-uri="chapter02.xhtml#P700049702700000000000000003F8DC" class="pcalibre1 calibre8 pcalibre">NULL</code>.”</p>
<p id="P700049702700000000000000003F8DD" data-uri="chapter02.xhtml#P700049702700000000000000003F8DD" class="pcalibre calibre3 pcalibre1">Write an implementation of <code id="P700049702700000000000000003F8DE" data-uri="chapter02.xhtml#P700049702700000000000000003F8DE" class="pcalibre1 calibre8 pcalibre">calloc</code> that performs the allocation by a call to <code id="P700049702700000000000000003F8DF" data-uri="chapter02.xhtml#P700049702700000000000000003F8DF" class="pcalibre1 calibre8 pcalibre">malloc</code> and sets the memory to zero via <code id="P700049702700000000000000003F8E0" data-uri="chapter02.xhtml#P700049702700000000000000003F8E0" class="pcalibre1 calibre8 pcalibre">memset</code>. Your code should not have any vulnerabilities due to arithmetic overflow, and it should work correctly regardless of the number of bits used to represent data of type <code id="P700049702700000000000000003F8E1" data-uri="chapter02.xhtml#P700049702700000000000000003F8E1" class="pcalibre1 calibre8 pcalibre">size_t</code>.</p>
<p id="P700049702700000000000000003F8E2" data-uri="chapter02.xhtml#P700049702700000000000000003F8E2" class="pcalibre calibre3 pcalibre1">As a reference, functions <code id="P700049702700000000000000003F8E3" data-uri="chapter02.xhtml#P700049702700000000000000003F8E3" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P700049702700000000000000003F8E4" data-uri="chapter02.xhtml#P700049702700000000000000003F8E4" class="pcalibre1 calibre8 pcalibre">memset</code> have the following declarations:<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000015FA" title="135" data-uri="chapter02.xhtml#P70004970270000000000000000015FA" epub:type="pagebreak"></span></p>
<pre id="P700049702700000000000000003F8E5" data-uri="chapter02.xhtml#P700049702700000000000000003F8E5" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8E6" data-uri="chapter02.xhtml#P700049702700000000000000003F8E6" class="calibre10 pcalibre pcalibre1">
void *malloc(size_t size);
void *memset(void *s, int c, size_t n);
</code></pre></li>
</ol></section>
<section id="P70004970270000000000000000015FD" data-uri="chapter02.xhtml#P70004970270000000000000000015FD" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8E7" data-uri="chapter02.xhtml#P700049702700000000000000003F8E7" epub:type="title"><span class="pcalibre label pcalibre1">2.77  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8E8" data-uri="chapter02.xhtml#P700049702700000000000000003F8E8">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8E9" data-uri="chapter02.xhtml#P700049702700000000000000003F8E9">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8EA" data-uri="chapter02.xhtml#P700049702700000000000000003F8EA"><p id="P700049702700000000000000003F8EB" data-uri="chapter02.xhtml#P700049702700000000000000003F8EB" class="pcalibre calibre3 pcalibre1">Suppose we are given the task of generating code to multiply integer variable <code id="P700049702700000000000000003F8EC" data-uri="chapter02.xhtml#P700049702700000000000000003F8EC" class="pcalibre1 calibre8 pcalibre">x</code> by various different constant factors <var class="calibre5 pcalibre pcalibre1">K</var>. To be efficient, we want to use only the operations +, –, and ≪. For the following values of <var class="calibre5 pcalibre pcalibre1">K</var>, write C expressions to perform the multiplication using at most three operations per expression.</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F8ED" data-uri="chapter02.xhtml#P700049702700000000000000003F8ED">
<li id="P700049702700000000000000003F8EE" data-uri="chapter02.xhtml#P700049702700000000000000003F8EE" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8EF" data-uri="chapter02.xhtml#P700049702700000000000000003F8EF" class="pcalibre calibre3 pcalibre1"><i class="calibre5 pcalibre pcalibre1">K = 17</i></p></li>
<li id="P700049702700000000000000003F8F0" data-uri="chapter02.xhtml#P700049702700000000000000003F8F0" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8F1" data-uri="chapter02.xhtml#P700049702700000000000000003F8F1" class="pcalibre calibre3 pcalibre1"><i class="calibre5 pcalibre pcalibre1">K = –7</i></p></li>
<li id="P700049702700000000000000003F8F2" data-uri="chapter02.xhtml#P700049702700000000000000003F8F2" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8F3" data-uri="chapter02.xhtml#P700049702700000000000000003F8F3" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">K</var> = 60</p></li>
<li id="P700049702700000000000000003F8F4" data-uri="chapter02.xhtml#P700049702700000000000000003F8F4" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F8F5" data-uri="chapter02.xhtml#P700049702700000000000000003F8F5" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">K</var> = –112</p></li>
</ol>
</li>
</ol></section>
<section id="P700049702700000000000000000160D" data-uri="chapter02.xhtml#P700049702700000000000000000160D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8F6" data-uri="chapter02.xhtml#P700049702700000000000000003F8F6" epub:type="title"><span class="pcalibre label pcalibre1">2.78  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8F7" data-uri="chapter02.xhtml#P700049702700000000000000003F8F7">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F8F8" data-uri="chapter02.xhtml#P700049702700000000000000003F8F8">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F8F9" data-uri="chapter02.xhtml#P700049702700000000000000003F8F9"><p id="P700049702700000000000000003F8FA" data-uri="chapter02.xhtml#P700049702700000000000000003F8FA" class="pcalibre calibre3 pcalibre1">Write code for a function with the following prototype:</p></div>
<pre id="P700049702700000000000000003F8FB" data-uri="chapter02.xhtml#P700049702700000000000000003F8FB" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F8FC" data-uri="chapter02.xhtml#P700049702700000000000000003F8FC" class="calibre10 pcalibre pcalibre1">
/* Divide by power of 2. Assume 0 &lt;= k &lt; w–1 */
int divide_power2(int x, int k);
</code></pre>
<p id="P700049702700000000000000003F8FD" data-uri="chapter02.xhtml#P700049702700000000000000003F8FD" class="pcalibre calibre3 pcalibre1">The function should compute <var class="calibre5 pcalibre pcalibre1">x</var>/2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var></sup> with correct rounding, and it should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>).</p>
</li>
</ol></section>
<section id="P7000497027000000000000000001616" data-uri="chapter02.xhtml#P7000497027000000000000000001616" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F8FE" data-uri="chapter02.xhtml#P700049702700000000000000003F8FE" epub:type="title"><span class="pcalibre label pcalibre1">2.79  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F8FF" data-uri="chapter02.xhtml#P700049702700000000000000003F8FF">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F900" data-uri="chapter02.xhtml#P700049702700000000000000003F900">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F901" data-uri="chapter02.xhtml#P700049702700000000000000003F901"><p id="P700049702700000000000000003F902" data-uri="chapter02.xhtml#P700049702700000000000000003F902" class="pcalibre calibre3 pcalibre1">Write code for a function <code id="P700049702700000000000000003F903" data-uri="chapter02.xhtml#P700049702700000000000000003F903" class="pcalibre1 calibre8 pcalibre">mul3div4</code> that, for integer argument <code id="P700049702700000000000000003F904" data-uri="chapter02.xhtml#P700049702700000000000000003F904" class="pcalibre1 calibre8 pcalibre">x</code>, computes <code id="P700049702700000000000000003F905" data-uri="chapter02.xhtml#P700049702700000000000000003F905" class="pcalibre1 calibre8 pcalibre">3*x/4</code> but follows the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>). Your code should replicate the fact that the computation <code id="P700049702700000000000000003F906" data-uri="chapter02.xhtml#P700049702700000000000000003F906" class="pcalibre1 calibre8 pcalibre">3*x</code> can cause overflow.</p>
</div></li></ol>
</section>
<section id="P7000497027000000000000000001620" data-uri="chapter02.xhtml#P7000497027000000000000000001620" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F907" data-uri="chapter02.xhtml#P700049702700000000000000003F907" epub:type="title"><span class="pcalibre label pcalibre1">2.80  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F908" data-uri="chapter02.xhtml#P700049702700000000000000003F908">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F909" data-uri="chapter02.xhtml#P700049702700000000000000003F909">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F90A" data-uri="chapter02.xhtml#P700049702700000000000000003F90A"><p id="P700049702700000000000000003F90B" data-uri="chapter02.xhtml#P700049702700000000000000003F90B" class="pcalibre calibre3 pcalibre1">Write code for a function <code id="P700049702700000000000000003F90C" data-uri="chapter02.xhtml#P700049702700000000000000003F90C" class="pcalibre1 calibre8 pcalibre">threefourths</code> that, for integer argument <code id="P700049702700000000000000003F90D" data-uri="chapter02.xhtml#P700049702700000000000000003F90D" class="pcalibre1 calibre8 pcalibre">x</code>, computes the value of 
<span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="21" altimg-height="28" altimg="../images/ch02-eq900.png"><m:mrow><m:mfrac><m:mn>3</m:mn><m:mn>4</m:mn></m:mfrac><m:mi>x</m:mi></m:mrow></m:math></span>, rounded toward zero. It should not overflow. Your function should follow the bit-level integer coding rules (page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000001493.xhtml#P7000497027000000000000000001496">128</a>).</p>
</div></li></ol>
</section>
<section id="P7000497027000000000000000001628" data-uri="chapter02.xhtml#P7000497027000000000000000001628" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F90E" data-uri="chapter02.xhtml#P700049702700000000000000003F90E" epub:type="title"><span class="pcalibre label pcalibre1">2.81  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F90F" data-uri="chapter02.xhtml#P700049702700000000000000003F90F">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F910" data-uri="chapter02.xhtml#P700049702700000000000000003F910">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F911" data-uri="chapter02.xhtml#P700049702700000000000000003F911"><p id="P700049702700000000000000003F912" data-uri="chapter02.xhtml#P700049702700000000000000003F912" class="pcalibre calibre3 pcalibre1">Write C expressions to generate the bit patterns that follow, where <i class="calibre5 pcalibre pcalibre1">a<sup class="calibre51 pcalibre pcalibre1">k</sup></i> represents <var class="calibre5 pcalibre pcalibre1">k</var> repetitions of symbol <var class="calibre5 pcalibre pcalibre1">a</var>. Assume a <var class="calibre5 pcalibre pcalibre1">w</var>-bit data type. Your code may contain references to parameters <code id="P700049702700000000000000003F913" data-uri="chapter02.xhtml#P700049702700000000000000003F913" class="pcalibre1 calibre8 pcalibre">j</code> and <code id="P700049702700000000000000003F914" data-uri="chapter02.xhtml#P700049702700000000000000003F914" class="pcalibre1 calibre8 pcalibre">k</code>, representing the values of <var class="calibre5 pcalibre pcalibre1">j</var> and <var class="calibre5 pcalibre pcalibre1">k</var>, but not a parameter representing <var class="calibre5 pcalibre pcalibre1">w</var>.</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F915" data-uri="chapter02.xhtml#P700049702700000000000000003F915">
<li id="P700049702700000000000000003F916" data-uri="chapter02.xhtml#P700049702700000000000000003F916" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F917" data-uri="chapter02.xhtml#P700049702700000000000000003F917" class="pcalibre calibre3 pcalibre1">1<sup class="calibre51 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">w-k</i></sup>0<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var></sup></p></li>
<li id="P700049702700000000000000003F918" data-uri="chapter02.xhtml#P700049702700000000000000003F918" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F919" data-uri="chapter02.xhtml#P700049702700000000000000003F919" class="pcalibre calibre3 pcalibre1">0<sup class="calibre51 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">w-k-j</i></sup>1<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var></sup>0<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">j</var></sup></p></li>
</ol></li>
</ol></section>
<section id="P7000497027000000000000000001635" data-uri="chapter02.xhtml#P7000497027000000000000000001635" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F91A" data-uri="chapter02.xhtml#P700049702700000000000000003F91A" epub:type="title"><span class="pcalibre label pcalibre1">2.82  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F91B" data-uri="chapter02.xhtml#P700049702700000000000000003F91B">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F91C" data-uri="chapter02.xhtml#P700049702700000000000000003F91C">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F91D" data-uri="chapter02.xhtml#P700049702700000000000000003F91D"><p id="P700049702700000000000000003F91E" data-uri="chapter02.xhtml#P700049702700000000000000003F91E" class="pcalibre calibre3 pcalibre1">We are running programs where values of type <code id="P700049702700000000000000003F91F" data-uri="chapter02.xhtml#P700049702700000000000000003F91F" class="pcalibre1 calibre8 pcalibre">int</code> are 32 bits. They are represented in two's complement, and they are right shifted arithmetically. Values of type <code id="P700049702700000000000000003F920" data-uri="chapter02.xhtml#P700049702700000000000000003F920" class="pcalibre1 calibre8 pcalibre">unsigned</code> are also 32 bits.</p></div>
<p id="P700049702700000000000000003F921" data-uri="chapter02.xhtml#P700049702700000000000000003F921" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000163E" title="136" data-uri="chapter02.xhtml#P700049702700000000000000000163E" epub:type="pagebreak"></span>We generate arbitrary values <code id="P700049702700000000000000003F922" data-uri="chapter02.xhtml#P700049702700000000000000003F922" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P700049702700000000000000003F923" data-uri="chapter02.xhtml#P700049702700000000000000003F923" class="pcalibre1 calibre8 pcalibre">y</code>, and convert them to unsigned values as follows:</p>
<pre id="P700049702700000000000000003F924" data-uri="chapter02.xhtml#P700049702700000000000000003F924" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F925" data-uri="chapter02.xhtml#P700049702700000000000000003F925" class="calibre10 pcalibre pcalibre1">
/* Create some arbitrary values */
int x = random();
int y = random();
/* Convert to unsigned */
unsigned ux = (unsigned) x;
unsigned uy = (unsigned) y;
</code></pre>
<p id="P700049702700000000000000003F926" data-uri="chapter02.xhtml#P700049702700000000000000003F926" class="pcalibre calibre3 pcalibre1">For each of the following C expressions, you are to indicate whether or not the expression <i class="calibre5 pcalibre pcalibre1">always</i> yields 1. If it always yields 1, describe the underlying mathematical principles. Otherwise, give an example of arguments that make it yield 0.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F927" data-uri="chapter02.xhtml#P700049702700000000000000003F927">
<li id="P700049702700000000000000003F928" data-uri="chapter02.xhtml#P700049702700000000000000003F928" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F929" data-uri="chapter02.xhtml#P700049702700000000000000003F929" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003F92A" data-uri="chapter02.xhtml#P700049702700000000000000003F92A" class="pcalibre1 calibre8 pcalibre">(x&lt;y) == (-x&gt;-y)</code></p></li>
<li id="P700049702700000000000000003F92B" data-uri="chapter02.xhtml#P700049702700000000000000003F92B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F92C" data-uri="chapter02.xhtml#P700049702700000000000000003F92C" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003F92D" data-uri="chapter02.xhtml#P700049702700000000000000003F92D" class="pcalibre1 calibre8 pcalibre">((x+y)&lt;&lt;4) + y-x == 17*y+15*x</code></p></li>
<li id="P700049702700000000000000003F92E" data-uri="chapter02.xhtml#P700049702700000000000000003F92E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F92F" data-uri="chapter02.xhtml#P700049702700000000000000003F92F" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003F930" data-uri="chapter02.xhtml#P700049702700000000000000003F930" class="pcalibre1 calibre8 pcalibre">~x+~y+1 == ~(x+y)</code></p></li>
<li id="P700049702700000000000000003F931" data-uri="chapter02.xhtml#P700049702700000000000000003F931" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F932" data-uri="chapter02.xhtml#P700049702700000000000000003F932" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003F933" data-uri="chapter02.xhtml#P700049702700000000000000003F933" class="pcalibre1 calibre8 pcalibre">(ux-uy) == -(unsigned)(y-x)</code></p></li>
<li id="P700049702700000000000000003F934" data-uri="chapter02.xhtml#P700049702700000000000000003F934" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F935" data-uri="chapter02.xhtml#P700049702700000000000000003F935" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003F936" data-uri="chapter02.xhtml#P700049702700000000000000003F936" class="pcalibre1 calibre8 pcalibre">((x &gt;&gt; 2) &lt;&lt; 2) &lt;= x</code></p></li>
</ol></li>
</ol></section>
<section id="P7000497027000000000000000001654" data-uri="chapter02.xhtml#P7000497027000000000000000001654" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F937" data-uri="chapter02.xhtml#P700049702700000000000000003F937" epub:type="title"><span class="pcalibre label pcalibre1">2.83  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F938" data-uri="chapter02.xhtml#P700049702700000000000000003F938">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F939" data-uri="chapter02.xhtml#P700049702700000000000000003F939">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F93A" data-uri="chapter02.xhtml#P700049702700000000000000003F93A"><p id="P700049702700000000000000003F93B" data-uri="chapter02.xhtml#P700049702700000000000000003F93B" class="pcalibre calibre3 pcalibre1">Consider numbers having a binary representation consisting of an infinite string of the form 0.<i class="calibre5 pcalibre pcalibre1">y y y y y y</i> ..., where <var class="calibre5 pcalibre pcalibre1">y</var> is a <var class="calibre5 pcalibre pcalibre1">k</var>-bit sequence. For example, the binary representation of <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="8" altimg-height="28" altimg="../images/ch02-eq131.png"><m:mrow><m:mfrac><m:mn>1</m:mn><m:mn>3</m:mn></m:mfrac></m:mrow></m:math></span> is 0.01010101 ... (<var class="calibre5 pcalibre pcalibre1">y</var> = 01), while the representation of <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="8" altimg-height="27" altimg="../images/ch02-eq133.png"><m:mrow><m:mfrac><m:mn>1</m:mn><m:mn>5</m:mn></m:mfrac></m:mrow></m:math></span> is 0.001100110011 ... (<var class="calibre5 pcalibre pcalibre1">y</var> = 0011).</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F93C" data-uri="chapter02.xhtml#P700049702700000000000000003F93C">
<li id="P700049702700000000000000003F93D" data-uri="chapter02.xhtml#P700049702700000000000000003F93D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F93E" data-uri="chapter02.xhtml#P700049702700000000000000003F93E" class="pcalibre calibre3 pcalibre1">Let <var class="calibre5 pcalibre pcalibre1">Y</var> = <i class="calibre5 pcalibre pcalibre1">B2U<sub class="pcalibre1 calibre47 pcalibre">k</sub>(y)</i>, that is, the number having binary representation <var class="calibre5 pcalibre pcalibre1">y</var>. Give a formula in terms of <var class="calibre5 pcalibre pcalibre1">Y</var> and <var class="calibre5 pcalibre pcalibre1">k</var> for the value represented by the infinite string. <i class="calibre5 pcalibre pcalibre1">Hint:</i> Consider the effect of shifting the binary point <var class="calibre5 pcalibre pcalibre1">k</var> positions to the right.</p></li>
<li id="P700049702700000000000000003F93F" data-uri="chapter02.xhtml#P700049702700000000000000003F93F" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F940" data-uri="chapter02.xhtml#P700049702700000000000000003F940" class="pcalibre calibre3 pcalibre1">What is the numeric value of the string for the following values of <var class="calibre5 pcalibre pcalibre1">y</var>?</p>
<ol class="pcalibre1 ol_lower-alpha pcalibre" id="P700049702700000000000000003F941" data-uri="chapter02.xhtml#P700049702700000000000000003F941">
<li id="P700049702700000000000000003F942" data-uri="chapter02.xhtml#P700049702700000000000000003F942" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F943" data-uri="chapter02.xhtml#P700049702700000000000000003F943" class="pcalibre calibre3 pcalibre1">101</p></li>
<li id="P700049702700000000000000003F944" data-uri="chapter02.xhtml#P700049702700000000000000003F944" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F945" data-uri="chapter02.xhtml#P700049702700000000000000003F945" class="pcalibre calibre3 pcalibre1">0110</p></li>
<li id="P700049702700000000000000003F946" data-uri="chapter02.xhtml#P700049702700000000000000003F946" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F947" data-uri="chapter02.xhtml#P700049702700000000000000003F947" class="pcalibre calibre3 pcalibre1">010011</p></li>
</ol></li></ol></li>
</ol></section>
<section id="P7000497027000000000000000001666" data-uri="chapter02.xhtml#P7000497027000000000000000001666" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F948" data-uri="chapter02.xhtml#P700049702700000000000000003F948" epub:type="title"><span class="pcalibre label pcalibre1">2.84  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F949" data-uri="chapter02.xhtml#P700049702700000000000000003F949">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F94A" data-uri="chapter02.xhtml#P700049702700000000000000003F94A">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F94B" data-uri="chapter02.xhtml#P700049702700000000000000003F94B"><p id="P700049702700000000000000003F94C" data-uri="chapter02.xhtml#P700049702700000000000000003F94C" class="pcalibre calibre3 pcalibre1">Fill in the return value for the following procedure, which tests whether its first argument is less than or equal to its second. Assume the function <code id="P700049702700000000000000003F94D" data-uri="chapter02.xhtml#P700049702700000000000000003F94D" class="pcalibre1 calibre8 pcalibre">f2u</code> returns an unsigned 32-bit number having the same bit representation as its floating-point argument. You can assume that neither argument is <i class="calibre5 pcalibre pcalibre1">NaN</i>. The two flavors of zero, +0 and –0, are considered equal.</p></div>
<pre id="P700049702700000000000000003F94E" data-uri="chapter02.xhtml#P700049702700000000000000003F94E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003F94F" data-uri="chapter02.xhtml#P700049702700000000000000003F94F" class="calibre10 pcalibre pcalibre1">
int float_le(float x, float y) {
    unsigned ux = f2u(x);
    unsigned uy = f2u(y);
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000166F" title="137" data-uri="chapter02.xhtml#P700049702700000000000000000166F" epub:type="pagebreak"></span>/* Get the sign bits */
unsigned sx = ux &gt;&gt; 31;
unsigned sy = uy &gt;&gt; 31;

/* Give an expression using only ux, uy, sx, and sy */
return ;
}
</code></pre>
</li>
</ol></section>
<section id="P7000497027000000000000000001670" data-uri="chapter02.xhtml#P7000497027000000000000000001670" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F950" data-uri="chapter02.xhtml#P700049702700000000000000003F950" epub:type="title"><span class="pcalibre label pcalibre1">2.85  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F951" data-uri="chapter02.xhtml#P700049702700000000000000003F951">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F952" data-uri="chapter02.xhtml#P700049702700000000000000003F952">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F953" data-uri="chapter02.xhtml#P700049702700000000000000003F953"><p id="P700049702700000000000000003F954" data-uri="chapter02.xhtml#P700049702700000000000000003F954" class="pcalibre calibre3 pcalibre1">Given a floating-point format with a <var class="calibre5 pcalibre pcalibre1">k</var>-bit exponent and an <var class="calibre5 pcalibre pcalibre1">n</var>-bit fraction, write formulas for the exponent <var class="calibre5 pcalibre pcalibre1">E</var>, the significand <var class="calibre5 pcalibre pcalibre1">M</var>, the fraction <var class="calibre5 pcalibre pcalibre1">f</var>, and the value <var class="calibre5 pcalibre pcalibre1">V</var> for the quantities that follow. In addition, describe the bit representation.</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003F955" data-uri="chapter02.xhtml#P700049702700000000000000003F955">
<li id="P700049702700000000000000003F956" data-uri="chapter02.xhtml#P700049702700000000000000003F956" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F957" data-uri="chapter02.xhtml#P700049702700000000000000003F957" class="pcalibre calibre3 pcalibre1">The number 7.0</p></li>
<li id="P700049702700000000000000003F958" data-uri="chapter02.xhtml#P700049702700000000000000003F958" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F959" data-uri="chapter02.xhtml#P700049702700000000000000003F959" class="pcalibre calibre3 pcalibre1">The largest odd integer that can be represented exactly</p></li>
<li id="P700049702700000000000000003F95A" data-uri="chapter02.xhtml#P700049702700000000000000003F95A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F95B" data-uri="chapter02.xhtml#P700049702700000000000000003F95B" class="pcalibre calibre3 pcalibre1">The reciprocal of the smallest positive normalized value</p></li>
</ol></li>
</ol></section>
<section id="P700049702700000000000000000167D" data-uri="chapter02.xhtml#P700049702700000000000000000167D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F95C" data-uri="chapter02.xhtml#P700049702700000000000000003F95C" epub:type="title"><span class="pcalibre label pcalibre1">2.86  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F95D" data-uri="chapter02.xhtml#P700049702700000000000000003F95D">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F95E" data-uri="chapter02.xhtml#P700049702700000000000000003F95E">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F95F" data-uri="chapter02.xhtml#P700049702700000000000000003F95F"><p id="P700049702700000000000000003F960" data-uri="chapter02.xhtml#P700049702700000000000000003F960" class="pcalibre calibre3 pcalibre1">Intel-compatible processors also support an “extended-precision” floating-point format with an 80-bit word divided into a sign bit, <var class="calibre5 pcalibre pcalibre1">k</var> = 15 exponent bits, a single <i class="calibre5 pcalibre pcalibre1">integer</i> bit, and <var class="calibre5 pcalibre pcalibre1">n</var> = 63 fraction bits. The integer bit is an explicit copy of the implied bit in the IEEE floating-point representation. That is, it equals 1 for normalized values and 0 for denormalized values. Fill in the following table giving the approximate values of some “interesting” numbers in this format:</p></div>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003F961" data-uri="chapter02.xhtml#P700049702700000000000000003F961">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003F962" data-uri="chapter02.xhtml#P700049702700000000000000003F962" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P700049702700000000000000003F963" data-uri="chapter02.xhtml#P700049702700000000000000003F963" class="calibre18 pcalibre pcalibre1">Extended precision</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003F964" data-uri="chapter02.xhtml#P700049702700000000000000003F964" class="calibre18 pcalibre pcalibre1">Description</th>
<th id="P700049702700000000000000003F965" data-uri="chapter02.xhtml#P700049702700000000000000003F965" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P700049702700000000000000003F966" data-uri="chapter02.xhtml#P700049702700000000000000003F966" class="calibre18 pcalibre pcalibre1">Decimal</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F967" data-uri="chapter02.xhtml#P700049702700000000000000003F967" class="calibre20 pcalibre pcalibre1">Smallest positive denormalized</td>
<td id="P700049702700000000000000003F968" data-uri="chapter02.xhtml#P700049702700000000000000003F968" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F969" data-uri="chapter02.xhtml#P700049702700000000000000003F969" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F96A" data-uri="chapter02.xhtml#P700049702700000000000000003F96A" class="calibre20 pcalibre pcalibre1">Smallest positive normalized</td>
<td id="P700049702700000000000000003F96B" data-uri="chapter02.xhtml#P700049702700000000000000003F96B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F96C" data-uri="chapter02.xhtml#P700049702700000000000000003F96C" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F96D" data-uri="chapter02.xhtml#P700049702700000000000000003F96D" class="calibre20 pcalibre pcalibre1">Largest normalized</td>
<td id="P700049702700000000000000003F96E" data-uri="chapter02.xhtml#P700049702700000000000000003F96E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F96F" data-uri="chapter02.xhtml#P700049702700000000000000003F96F" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000003F970" data-uri="chapter02.xhtml#P700049702700000000000000003F970" class="pcalibre calibre3 pcalibre1">This format can be used in C programs compiled for Intel-compatible machines by declaring the data to be of type <code id="P700049702700000000000000003F971" data-uri="chapter02.xhtml#P700049702700000000000000003F971" class="pcalibre1 calibre8 pcalibre">long double</code>. However, it forces the compiler to generate code based on the legacy 8087 floating-point instructions. The resulting program will most likely run much slower than would be the case for data type <code id="P700049702700000000000000003F972" data-uri="chapter02.xhtml#P700049702700000000000000003F972" class="pcalibre1 calibre8 pcalibre">float</code> or <code id="P700049702700000000000000003F973" data-uri="chapter02.xhtml#P700049702700000000000000003F973" class="pcalibre1 calibre8 pcalibre">double</code>.</p></li>
</ol></section>
<section id="P7000497027000000000000000001696" data-uri="chapter02.xhtml#P7000497027000000000000000001696" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F974" data-uri="chapter02.xhtml#P700049702700000000000000003F974" epub:type="title"><span class="pcalibre label pcalibre1">2.87  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F975" data-uri="chapter02.xhtml#P700049702700000000000000003F975">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F976" data-uri="chapter02.xhtml#P700049702700000000000000003F976">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F977" data-uri="chapter02.xhtml#P700049702700000000000000003F977"><p id="P700049702700000000000000003F978" data-uri="chapter02.xhtml#P700049702700000000000000003F978" class="pcalibre calibre3 pcalibre1">The 2008 version of the IEEE floating-point standard, named IEEE 754-2008, includes a 16-bit “half-precision” floating-point format. It was originally devised by computer graphics companies for storing data in which a higher dynamic range is required than can be achieved with 16-bit integers. This format has 1 sign bit, 5 exponent bits (<var class="calibre5 pcalibre pcalibre1">k</var> = 5), and 10 fraction bits (<var class="calibre5 pcalibre pcalibre1">n</var> = 10). The exponent bias is 2<sup class="calibre51 pcalibre pcalibre1">5–1</sup> – 1 = 15.</p></div>
<p id="P700049702700000000000000003F979" data-uri="chapter02.xhtml#P700049702700000000000000003F979" class="pcalibre calibre3 pcalibre1">Fill in the table that follows for each of the numbers given, with the following instructions for each column:</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000003F97A" data-uri="chapter02.xhtml#P700049702700000000000000003F97A">
<li id="P700049702700000000000000003F97B" data-uri="chapter02.xhtml#P700049702700000000000000003F97B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F97C" data-uri="chapter02.xhtml#P700049702700000000000000003F97C" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000016A0" title="138" data-uri="chapter02.xhtml#P70004970270000000000000000016A0" epub:type="pagebreak"></span>Hex: The four hexadecimal digits describing the encoded form.</p></li>
<li id="P700049702700000000000000003F97D" data-uri="chapter02.xhtml#P700049702700000000000000003F97D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F97E" data-uri="chapter02.xhtml#P700049702700000000000000003F97E" class="calibre13 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var>: The value of the significand. This should be a number of the form <var class="calibre5 pcalibre pcalibre1">x</var> or <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="13" altimg-height="25" altimg="../images/ch02-eq237e.png"><m:mrow><m:mfrac><m:mi>x</m:mi><m:mi>y</m:mi></m:mfrac></m:mrow></m:math></span>, where <var class="calibre5 pcalibre pcalibre1">x</var> is an integer and <var class="calibre5 pcalibre pcalibre1">y</var> is an integral power of 2. Examples include 0, <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="17" altimg-height="27" altimg="../images/ch02-eq237a.png"><m:mrow><m:mfrac><m:mrow><m:mn>67</m:mn></m:mrow><m:mrow><m:mn>64</m:mn></m:mrow></m:mfrac></m:mrow></m:math></span>, and <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="27" altimg="../images/ch02-eq237b.png"><m:mrow><m:mfrac><m:mn>1</m:mn><m:mrow><m:mn>256</m:mn></m:mrow></m:mfrac></m:mrow></m:math></span>.</p></li>
<li id="P700049702700000000000000003F97F" data-uri="chapter02.xhtml#P700049702700000000000000003F97F" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F980" data-uri="chapter02.xhtml#P700049702700000000000000003F980" class="calibre13 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">E</var>: The integer value of the exponent.</p></li>
<li id="P700049702700000000000000003F981" data-uri="chapter02.xhtml#P700049702700000000000000003F981" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F982" data-uri="chapter02.xhtml#P700049702700000000000000003F982" class="calibre13 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">V</var>: The numeric value represented. Use the notation <var class="calibre5 pcalibre pcalibre1">x</var> or <var class="calibre5 pcalibre pcalibre1">x</var> × 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">z</var></sup>, where <var class="calibre5 pcalibre pcalibre1">x</var> and <var class="calibre5 pcalibre pcalibre1">z</var> are integers.</p></li>
<li id="P700049702700000000000000003F983" data-uri="chapter02.xhtml#P700049702700000000000000003F983" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F984" data-uri="chapter02.xhtml#P700049702700000000000000003F984" class="calibre13 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var>: The (possibly approximate) numerical value, as is printed using the <code id="P700049702700000000000000003F985" data-uri="chapter02.xhtml#P700049702700000000000000003F985" class="pcalibre1 calibre8 pcalibre">%f</code> formatting specification of <code id="P700049702700000000000000003F986" data-uri="chapter02.xhtml#P700049702700000000000000003F986" class="pcalibre1 calibre8 pcalibre">printf</code>.</p></li>
</ul>
<p id="P700049702700000000000000003F987" data-uri="chapter02.xhtml#P700049702700000000000000003F987" class="pcalibre calibre3 pcalibre1">As an example, to represent the number <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="10" altimg-height="29" altimg="../images/ch02-eq237c.png"><m:mrow><m:mfrac><m:mn>7</m:mn><m:mn>8</m:mn></m:mfrac></m:mrow></m:math></span>, we would have <var class="calibre5 pcalibre pcalibre1">s</var> = 0, <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="62" altimg-height="29" altimg="../images/ch02-eq237d.png"><m:mrow><m:mi>M</m:mi><m:mo>=</m:mo><m:mfrac><m:mn>7</m:mn><m:mn>4</m:mn></m:mfrac></m:mrow></m:math></span> and <var class="calibre5 pcalibre pcalibre1">E</var> = –1. Our number would therefore have an exponent field of 01110<sub class="pcalibre1 calibre47 pcalibre">2</sub> (decimal value 15 – 1 = 14) and a significand field of 1100000000<sub class="pcalibre1 calibre47 pcalibre">2</sub>, giving a hex representation <code id="P700049702700000000000000003F988" data-uri="chapter02.xhtml#P700049702700000000000000003F988" class="pcalibre1 calibre8 pcalibre">3B00</code>. The numerical value is 0.875.</p>
<p id="P700049702700000000000000003F989" data-uri="chapter02.xhtml#P700049702700000000000000003F989" class="pcalibre calibre3 pcalibre1">You need not fill in entries marked —.</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003F98A" data-uri="chapter02.xhtml#P700049702700000000000000003F98A">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003F98B" data-uri="chapter02.xhtml#P700049702700000000000000003F98B" class="calibre18 pcalibre pcalibre1">Description</th>
<th id="P700049702700000000000000003F98C" data-uri="chapter02.xhtml#P700049702700000000000000003F98C" class="calibre18 pcalibre pcalibre1">Hex</th>
<th id="P700049702700000000000000003F98D" data-uri="chapter02.xhtml#P700049702700000000000000003F98D" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var></th>
<th id="P700049702700000000000000003F98E" data-uri="chapter02.xhtml#P700049702700000000000000003F98E" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">E</var></th>
<th id="P700049702700000000000000003F98F" data-uri="chapter02.xhtml#P700049702700000000000000003F98F" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">V</var></th>
<th id="P700049702700000000000000003F990" data-uri="chapter02.xhtml#P700049702700000000000000003F990" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F991" data-uri="chapter02.xhtml#P700049702700000000000000003F991" class="calibre20 pcalibre pcalibre1">–0</td>
<td id="P700049702700000000000000003F992" data-uri="chapter02.xhtml#P700049702700000000000000003F992" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F993" data-uri="chapter02.xhtml#P700049702700000000000000003F993" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F994" data-uri="chapter02.xhtml#P700049702700000000000000003F994" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F995" data-uri="chapter02.xhtml#P700049702700000000000000003F995" class="calibre20 pcalibre pcalibre1">–0</td>
<td id="P700049702700000000000000003F996" data-uri="chapter02.xhtml#P700049702700000000000000003F996" class="calibre20 pcalibre pcalibre1">–0.0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F997" data-uri="chapter02.xhtml#P700049702700000000000000003F997" class="calibre20 pcalibre pcalibre1">Smallest value &gt; 2</td>
<td id="P700049702700000000000000003F998" data-uri="chapter02.xhtml#P700049702700000000000000003F998" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F999" data-uri="chapter02.xhtml#P700049702700000000000000003F999" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F99A" data-uri="chapter02.xhtml#P700049702700000000000000003F99A" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F99B" data-uri="chapter02.xhtml#P700049702700000000000000003F99B" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F99C" data-uri="chapter02.xhtml#P700049702700000000000000003F99C" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F99D" data-uri="chapter02.xhtml#P700049702700000000000000003F99D" class="calibre20 pcalibre pcalibre1">512</td>
<td id="P700049702700000000000000003F99E" data-uri="chapter02.xhtml#P700049702700000000000000003F99E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F99F" data-uri="chapter02.xhtml#P700049702700000000000000003F99F" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A0" data-uri="chapter02.xhtml#P700049702700000000000000003F9A0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A1" data-uri="chapter02.xhtml#P700049702700000000000000003F9A1" class="calibre20 pcalibre pcalibre1">512</td>
<td id="P700049702700000000000000003F9A2" data-uri="chapter02.xhtml#P700049702700000000000000003F9A2" class="calibre20 pcalibre pcalibre1">512.0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9A3" data-uri="chapter02.xhtml#P700049702700000000000000003F9A3" class="calibre20 pcalibre pcalibre1">Largest denormalized</td>
<td id="P700049702700000000000000003F9A4" data-uri="chapter02.xhtml#P700049702700000000000000003F9A4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A5" data-uri="chapter02.xhtml#P700049702700000000000000003F9A5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A6" data-uri="chapter02.xhtml#P700049702700000000000000003F9A6" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A7" data-uri="chapter02.xhtml#P700049702700000000000000003F9A7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9A8" data-uri="chapter02.xhtml#P700049702700000000000000003F9A8" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9A9" data-uri="chapter02.xhtml#P700049702700000000000000003F9A9" class="calibre20 pcalibre pcalibre1">–∞</td>
<td id="P700049702700000000000000003F9AA" data-uri="chapter02.xhtml#P700049702700000000000000003F9AA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9AB" data-uri="chapter02.xhtml#P700049702700000000000000003F9AB" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P700049702700000000000000003F9AC" data-uri="chapter02.xhtml#P700049702700000000000000003F9AC" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P700049702700000000000000003F9AD" data-uri="chapter02.xhtml#P700049702700000000000000003F9AD" class="calibre20 pcalibre pcalibre1">-∞</td>
<td id="P700049702700000000000000003F9AE" data-uri="chapter02.xhtml#P700049702700000000000000003F9AE" class="calibre20 pcalibre pcalibre1">–∞</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9AF" data-uri="chapter02.xhtml#P700049702700000000000000003F9AF" class="calibre20 pcalibre pcalibre1">Number with hex representation <code id="P700049702700000000000000003F9B0" data-uri="chapter02.xhtml#P700049702700000000000000003F9B0" class="calibre10 pcalibre pcalibre1">3BB0</code></td>
<td id="P700049702700000000000000003F9B1" data-uri="chapter02.xhtml#P700049702700000000000000003F9B1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9B2" data-uri="chapter02.xhtml#P700049702700000000000000003F9B2" class="calibre10 pcalibre pcalibre1">3BB0</code></td>
<td id="P700049702700000000000000003F9B3" data-uri="chapter02.xhtml#P700049702700000000000000003F9B3" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9B4" data-uri="chapter02.xhtml#P700049702700000000000000003F9B4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9B5" data-uri="chapter02.xhtml#P700049702700000000000000003F9B5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9B6" data-uri="chapter02.xhtml#P700049702700000000000000003F9B6" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
</li>
</ol></section>
<section id="P70004970270000000000000000016DB" data-uri="chapter02.xhtml#P70004970270000000000000000016DB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F9B7" data-uri="chapter02.xhtml#P700049702700000000000000003F9B7" epub:type="title"><span class="pcalibre label pcalibre1">2.88  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F9B8" data-uri="chapter02.xhtml#P700049702700000000000000003F9B8">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F9B9" data-uri="chapter02.xhtml#P700049702700000000000000003F9B9">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F9BA" data-uri="chapter02.xhtml#P700049702700000000000000003F9BA"><p id="P700049702700000000000000003F9BB" data-uri="chapter02.xhtml#P700049702700000000000000003F9BB" class="pcalibre calibre3 pcalibre1">Consider the following two 9-bit floating-point representations based on the IEEE floating-point format.</p></div>
<ol id="P700049702700000000000000003F9BC" data-uri="chapter02.xhtml#P700049702700000000000000003F9BC" class="calibre72 pcalibre pcalibre1">
<li id="P700049702700000000000000003F9BD" data-uri="chapter02.xhtml#P700049702700000000000000003F9BD" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9BE" data-uri="chapter02.xhtml#P700049702700000000000000003F9BE" class="pcalibre calibre3 pcalibre1">Format A</p>
<ul id="P700049702700000000000000003F9BF" data-uri="chapter02.xhtml#P700049702700000000000000003F9BF" class="calibre79 pcalibre pcalibre1">
<li id="P700049702700000000000000003F9C0" data-uri="chapter02.xhtml#P700049702700000000000000003F9C0" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9C1" data-uri="chapter02.xhtml#P700049702700000000000000003F9C1" class="pcalibre calibre3 pcalibre1">There is 1 sign bit.</p></li>
<li id="P700049702700000000000000003F9C2" data-uri="chapter02.xhtml#P700049702700000000000000003F9C2" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9C3" data-uri="chapter02.xhtml#P700049702700000000000000003F9C3" class="pcalibre calibre3 pcalibre1">There are <var class="calibre5 pcalibre pcalibre1">k</var> = 5 exponent bits. The exponent bias is 15.</p></li>
<li id="P700049702700000000000000003F9C4" data-uri="chapter02.xhtml#P700049702700000000000000003F9C4" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9C5" data-uri="chapter02.xhtml#P700049702700000000000000003F9C5" class="pcalibre calibre3 pcalibre1">There are <var class="calibre5 pcalibre pcalibre1">n</var> = 3 fraction bits.</p></li>
</ul></li>
<li id="P700049702700000000000000003F9C6" data-uri="chapter02.xhtml#P700049702700000000000000003F9C6" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9C7" data-uri="chapter02.xhtml#P700049702700000000000000003F9C7" class="pcalibre calibre3 pcalibre1">Format B</p>
<ul id="P700049702700000000000000003F9C8" data-uri="chapter02.xhtml#P700049702700000000000000003F9C8" class="calibre79 pcalibre pcalibre1">
<li id="P700049702700000000000000003F9C9" data-uri="chapter02.xhtml#P700049702700000000000000003F9C9" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9CA" data-uri="chapter02.xhtml#P700049702700000000000000003F9CA" class="pcalibre calibre3 pcalibre1">There is 1 sign bit.</p></li>
<li id="P700049702700000000000000003F9CB" data-uri="chapter02.xhtml#P700049702700000000000000003F9CB" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9CC" data-uri="chapter02.xhtml#P700049702700000000000000003F9CC" class="pcalibre calibre3 pcalibre1">There are <var class="calibre5 pcalibre pcalibre1">k</var> = 4 exponent bits. The exponent bias is 7.</p></li>
<li id="P700049702700000000000000003F9CD" data-uri="chapter02.xhtml#P700049702700000000000000003F9CD" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003F9CE" data-uri="chapter02.xhtml#P700049702700000000000000003F9CE" class="pcalibre calibre3 pcalibre1">There are <var class="calibre5 pcalibre pcalibre1">n</var> = 4 fraction bits.</p></li>
</ul></li></ol>
<p id="P700049702700000000000000003F9CF" data-uri="chapter02.xhtml#P700049702700000000000000003F9CF" class="pcalibre calibre3 pcalibre1">In the following table, you are given some bit patterns in format A, and your task is to convert them to the closest value in format B. If rounding is necessary you should <i class="calibre5 pcalibre pcalibre1">round toward</i> +∞. In addition, give the values of numbers given by the format A and format B bit patterns. Give these as whole numbers (e.g., 17) or as fractions (e.g., 17/64 or 17/2<sup class="calibre51 pcalibre pcalibre1">6</sup>).<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000016F5" title="139" data-uri="chapter02.xhtml#P70004970270000000000000000016F5" epub:type="pagebreak"></span></p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003F9D0" data-uri="chapter02.xhtml#P700049702700000000000000003F9D0">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P700049702700000000000000003F9D1" data-uri="chapter02.xhtml#P700049702700000000000000003F9D1" class="calibre18 pcalibre pcalibre1">Format A</th>
<th colspan="2" id="P700049702700000000000000003F9D2" data-uri="chapter02.xhtml#P700049702700000000000000003F9D2" class="calibre18 pcalibre pcalibre1">Format B</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003F9D3" data-uri="chapter02.xhtml#P700049702700000000000000003F9D3" class="calibre18 pcalibre pcalibre1">Bits</th>
<th id="P700049702700000000000000003F9D4" data-uri="chapter02.xhtml#P700049702700000000000000003F9D4" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P700049702700000000000000003F9D5" data-uri="chapter02.xhtml#P700049702700000000000000003F9D5" class="calibre18 pcalibre pcalibre1">Bits</th>
<th id="P700049702700000000000000003F9D6" data-uri="chapter02.xhtml#P700049702700000000000000003F9D6" class="calibre18 pcalibre pcalibre1">Value</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9D7" data-uri="chapter02.xhtml#P700049702700000000000000003F9D7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9D8" data-uri="chapter02.xhtml#P700049702700000000000000003F9D8" class="calibre10 pcalibre pcalibre1">1 01111 001</code></td>
<td id="P700049702700000000000000003F9D9" data-uri="chapter02.xhtml#P700049702700000000000000003F9D9" class="calibre20 pcalibre pcalibre1"><span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="19" altimg-height="26" altimg="../images/ch02-eq238.png"><m:mrow><m:mfrac><m:mrow><m:mo>−</m:mo><m:mn>9</m:mn></m:mrow><m:mn>8</m:mn></m:mfrac></m:mrow></m:math></span></td>
<td id="P700049702700000000000000003F9DA" data-uri="chapter02.xhtml#P700049702700000000000000003F9DA" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9DB" data-uri="chapter02.xhtml#P700049702700000000000000003F9DB" class="calibre10 pcalibre pcalibre1">1 0111 0010</code></td>
<td id="P700049702700000000000000003F9DC" data-uri="chapter02.xhtml#P700049702700000000000000003F9DC" class="calibre20 pcalibre pcalibre1"><span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="20" altimg-height="26" altimg="../images/ch02-eq239.png"><m:mrow><m:mfrac><m:mrow><m:mo>−</m:mo><m:mn>9</m:mn></m:mrow><m:mn>8</m:mn></m:mfrac></m:mrow></m:math></span></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9DD" data-uri="chapter02.xhtml#P700049702700000000000000003F9DD" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9DE" data-uri="chapter02.xhtml#P700049702700000000000000003F9DE" class="calibre10 pcalibre pcalibre1">0 10110 011</code></td>
<td id="P700049702700000000000000003F9DF" data-uri="chapter02.xhtml#P700049702700000000000000003F9DF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9E0" data-uri="chapter02.xhtml#P700049702700000000000000003F9E0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9E1" data-uri="chapter02.xhtml#P700049702700000000000000003F9E1" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9E2" data-uri="chapter02.xhtml#P700049702700000000000000003F9E2" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9E3" data-uri="chapter02.xhtml#P700049702700000000000000003F9E3" class="calibre10 pcalibre pcalibre1">1 00111 010</code></td>
<td id="P700049702700000000000000003F9E4" data-uri="chapter02.xhtml#P700049702700000000000000003F9E4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9E5" data-uri="chapter02.xhtml#P700049702700000000000000003F9E5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9E6" data-uri="chapter02.xhtml#P700049702700000000000000003F9E6" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9E7" data-uri="chapter02.xhtml#P700049702700000000000000003F9E7" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9E8" data-uri="chapter02.xhtml#P700049702700000000000000003F9E8" class="calibre10 pcalibre pcalibre1">0 00000 111</code></td>
<td id="P700049702700000000000000003F9E9" data-uri="chapter02.xhtml#P700049702700000000000000003F9E9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9EA" data-uri="chapter02.xhtml#P700049702700000000000000003F9EA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9EB" data-uri="chapter02.xhtml#P700049702700000000000000003F9EB" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9EC" data-uri="chapter02.xhtml#P700049702700000000000000003F9EC" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9ED" data-uri="chapter02.xhtml#P700049702700000000000000003F9ED" class="calibre10 pcalibre pcalibre1">1 11100 000</code></td>
<td id="P700049702700000000000000003F9EE" data-uri="chapter02.xhtml#P700049702700000000000000003F9EE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9EF" data-uri="chapter02.xhtml#P700049702700000000000000003F9EF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9F0" data-uri="chapter02.xhtml#P700049702700000000000000003F9F0" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003F9F1" data-uri="chapter02.xhtml#P700049702700000000000000003F9F1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003F9F2" data-uri="chapter02.xhtml#P700049702700000000000000003F9F2" class="calibre10 pcalibre pcalibre1">0 10111 100</code></td>
<td id="P700049702700000000000000003F9F3" data-uri="chapter02.xhtml#P700049702700000000000000003F9F3" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9F4" data-uri="chapter02.xhtml#P700049702700000000000000003F9F4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003F9F5" data-uri="chapter02.xhtml#P700049702700000000000000003F9F5" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></li>
</ol>
</section>
<section id="P700049702700000000000000000171C" data-uri="chapter02.xhtml#P700049702700000000000000000171C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003F9F6" data-uri="chapter02.xhtml#P700049702700000000000000003F9F6" epub:type="title"><span class="pcalibre label pcalibre1">2.89  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003F9F7" data-uri="chapter02.xhtml#P700049702700000000000000003F9F7">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003F9F8" data-uri="chapter02.xhtml#P700049702700000000000000003F9F8">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003F9F9" data-uri="chapter02.xhtml#P700049702700000000000000003F9F9"><p id="P700049702700000000000000003F9FA" data-uri="chapter02.xhtml#P700049702700000000000000003F9FA" class="pcalibre calibre3 pcalibre1">We are running programs on a machine where values of type <code id="P700049702700000000000000003F9FB" data-uri="chapter02.xhtml#P700049702700000000000000003F9FB" class="pcalibre1 calibre8 pcalibre">int</code> have a 32-bit two's-complement representation. Values of type <code id="P700049702700000000000000003F9FC" data-uri="chapter02.xhtml#P700049702700000000000000003F9FC" class="pcalibre1 calibre8 pcalibre">float</code> use the 32-bit IEEE format, and values of type <code id="P700049702700000000000000003F9FD" data-uri="chapter02.xhtml#P700049702700000000000000003F9FD" class="pcalibre1 calibre8 pcalibre">double</code> use the 64-bit IEEE format.</p></div>
<p id="P700049702700000000000000003F9FE" data-uri="chapter02.xhtml#P700049702700000000000000003F9FE" class="pcalibre calibre3 pcalibre1">We generate arbitrary integer values <code id="P700049702700000000000000003F9FF" data-uri="chapter02.xhtml#P700049702700000000000000003F9FF" class="pcalibre1 calibre8 pcalibre">x</code>, <code id="P700049702700000000000000003FA00" data-uri="chapter02.xhtml#P700049702700000000000000003FA00" class="pcalibre1 calibre8 pcalibre">y</code>, and <code id="P700049702700000000000000003FA01" data-uri="chapter02.xhtml#P700049702700000000000000003FA01" class="pcalibre1 calibre8 pcalibre">z</code>, and convert them to values of type <code id="P700049702700000000000000003FA02" data-uri="chapter02.xhtml#P700049702700000000000000003FA02" class="pcalibre1 calibre8 pcalibre">double as</code> follows:</p>
<pre id="P700049702700000000000000003FA03" data-uri="chapter02.xhtml#P700049702700000000000000003FA03" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA04" data-uri="chapter02.xhtml#P700049702700000000000000003FA04" class="calibre10 pcalibre pcalibre1">
/* Create some arbitrary values */
int x = random();
int y = random();
int z = random();
/* Convert to double */
double dx = (double) x;
double dy = (double) y;
double dz = (double) z;
</code></pre>
<p id="P700049702700000000000000003FA05" data-uri="chapter02.xhtml#P700049702700000000000000003FA05" class="pcalibre calibre3 pcalibre1">For each of the following C expressions, you are to indicate whether or not the expression <i class="calibre5 pcalibre pcalibre1">always</i> yields 1. If it always yields 1, describe the underlying mathematical principles. Otherwise, give an example of arguments that make it yield 0. Note that you cannot use an IA32 machine running <span class="smallcaps pcalibre pcalibre1">gcc </span>to test your answers, since it would use the 80-bit extended-precision representation for both <code id="P700049702700000000000000003FA06" data-uri="chapter02.xhtml#P700049702700000000000000003FA06" class="pcalibre1 calibre8 pcalibre">float</code> and <code id="P700049702700000000000000003FA07" data-uri="chapter02.xhtml#P700049702700000000000000003FA07" class="pcalibre1 calibre8 pcalibre">double</code>.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003FA08" data-uri="chapter02.xhtml#P700049702700000000000000003FA08">
<li id="P700049702700000000000000003FA09" data-uri="chapter02.xhtml#P700049702700000000000000003FA09" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA0A" data-uri="chapter02.xhtml#P700049702700000000000000003FA0A" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003FA0B" data-uri="chapter02.xhtml#P700049702700000000000000003FA0B" class="pcalibre1 calibre8 pcalibre">(float) x == (float) dx</code></p></li>
<li id="P700049702700000000000000003FA0C" data-uri="chapter02.xhtml#P700049702700000000000000003FA0C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA0D" data-uri="chapter02.xhtml#P700049702700000000000000003FA0D" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003FA0E" data-uri="chapter02.xhtml#P700049702700000000000000003FA0E" class="pcalibre1 calibre8 pcalibre">dx — dy == (double) (x-y)</code></p></li>
<li id="P700049702700000000000000003FA0F" data-uri="chapter02.xhtml#P700049702700000000000000003FA0F" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA10" data-uri="chapter02.xhtml#P700049702700000000000000003FA10" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003FA11" data-uri="chapter02.xhtml#P700049702700000000000000003FA11" class="pcalibre1 calibre8 pcalibre">(dx + dy) + dz == dx + (dy + dz)</code></p></li>
<li id="P700049702700000000000000003FA12" data-uri="chapter02.xhtml#P700049702700000000000000003FA12" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA13" data-uri="chapter02.xhtml#P700049702700000000000000003FA13" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003FA14" data-uri="chapter02.xhtml#P700049702700000000000000003FA14" class="pcalibre1 calibre8 pcalibre">(dx * dy) * dz == dx * (dy * dz)</code></p></li>
<li id="P700049702700000000000000003FA15" data-uri="chapter02.xhtml#P700049702700000000000000003FA15" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA16" data-uri="chapter02.xhtml#P700049702700000000000000003FA16" class="pcalibre calibre3 pcalibre1"><code id="P700049702700000000000000003FA17" data-uri="chapter02.xhtml#P700049702700000000000000003FA17" class="pcalibre1 calibre8 pcalibre">dx / dx == dz / dz</code></p></li>
</ol></li>
</ol></section>
<section id="P700049702700000000000000000173F" data-uri="chapter02.xhtml#P700049702700000000000000000173F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA18" data-uri="chapter02.xhtml#P700049702700000000000000003FA18" epub:type="title"><span class="pcalibre label pcalibre1">2.90  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA19" data-uri="chapter02.xhtml#P700049702700000000000000003FA19">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA1A" data-uri="chapter02.xhtml#P700049702700000000000000003FA1A">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA1B" data-uri="chapter02.xhtml#P700049702700000000000000003FA1B"><p id="P700049702700000000000000003FA1C" data-uri="chapter02.xhtml#P700049702700000000000000003FA1C" class="pcalibre calibre3 pcalibre1">You have been assigned the task of writing a C function to compute a floating-point representation of 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var></sup>. You decide that the best way to do this is to directly construct the IEEE single-precision representation of the result. When <var class="calibre5 pcalibre pcalibre1">x</var> is too small, your routine will return 0.0. When <var class="calibre5 pcalibre pcalibre1">x</var> is too large, it will return +∞. Fill in the blank portions of the code that follows to compute the correct result. Assume the <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001745" title="140" data-uri="chapter02.xhtml#P7000497027000000000000000001745" epub:type="pagebreak"></span>function <code id="P700049702700000000000000003FA1D" data-uri="chapter02.xhtml#P700049702700000000000000003FA1D" class="pcalibre1 calibre8 pcalibre">u2f</code> returns a floating-point value having an identical bit representation as its unsigned argument.</p></div>
<pre id="P700049702700000000000000003FA1E" data-uri="chapter02.xhtml#P700049702700000000000000003FA1E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA1F" data-uri="chapter02.xhtml#P700049702700000000000000003FA1F" class="calibre10 pcalibre pcalibre1">
float fpwr2(int x)
{
	/* Result exponent and fraction */
	unsigned exp, frac;
	unsigned u;
	if (x &lt; _________){
		/* Too small. Return 0.0 */
		exp = _________;
		frac = _________;
	} else if (x &lt; _________){
		/* Denormalized result */
		exp = _________;
		frac = _________;
	} else if (x &lt; _________){
		/* Normalized result. */
		exp = _________;
		frac = _________;
	} else {
		/* Too big. Return +oo */
		exp = _________;
		frac = _________;
	}
	/* Pack exp and frac into 32 bits */
	u = exp &lt;&lt; 23 | frac;
	/* Return as float */
	return u2f(u);
}
</code></pre>
</li>
</ol></section>
<section id="P7000497027000000000000000001749" data-uri="chapter02.xhtml#P7000497027000000000000000001749" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA20" data-uri="chapter02.xhtml#P700049702700000000000000003FA20" epub:type="title"><span class="pcalibre label pcalibre1">2.91  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA21" data-uri="chapter02.xhtml#P700049702700000000000000003FA21">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA22" data-uri="chapter02.xhtml#P700049702700000000000000003FA22">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA23" data-uri="chapter02.xhtml#P700049702700000000000000003FA23"><p id="P700049702700000000000000003FA24" data-uri="chapter02.xhtml#P700049702700000000000000003FA24" class="pcalibre calibre3 pcalibre1">Around 250 B.C., the Greek mathematician Archimedes proved that <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="108" altimg-height="28" altimg="../images/ch02-eq240.png"><m:mrow><m:mfrac><m:mrow><m:mn>223</m:mn></m:mrow><m:mrow><m:mn>71</m:mn></m:mrow></m:mfrac><m:mo>&lt;</m:mo><m:mi>π</m:mi><m:mo>&lt;</m:mo><m:mfrac><m:mrow><m:mn>22</m:mn></m:mrow><m:mn>7</m:mn></m:mfrac></m:mrow></m:math></span>. Had he had access to a computer and the standard library <code id="P700049702700000000000000003FA25" data-uri="chapter02.xhtml#P700049702700000000000000003FA25" class="pcalibre1 calibre8 pcalibre">&lt;math.h&gt;</code>, he would have been able to determine that the single-precision floating-point approximation of <i class="calibre5 pcalibre pcalibre1">π</i> has the hexadecimal representation <code id="P700049702700000000000000003FA26" data-uri="chapter02.xhtml#P700049702700000000000000003FA26" class="pcalibre1 calibre8 pcalibre">0x40490FDB</code>. Of course, all of these are just approximations, since <i class="calibre5 pcalibre pcalibre1">π</i> is not rational.</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003FA27" data-uri="chapter02.xhtml#P700049702700000000000000003FA27">
<li id="P700049702700000000000000003FA28" data-uri="chapter02.xhtml#P700049702700000000000000003FA28" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA29" data-uri="chapter02.xhtml#P700049702700000000000000003FA29" class="pcalibre calibre3 pcalibre1">What is the fractional binary number denoted by this floating-point value?</p></li>
<li id="P700049702700000000000000003FA2A" data-uri="chapter02.xhtml#P700049702700000000000000003FA2A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA2B" data-uri="chapter02.xhtml#P700049702700000000000000003FA2B" class="pcalibre calibre3 pcalibre1">What is the fractional binary representation of <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="17" altimg-height="28" altimg="../images/ch02-eq241.png"><m:mrow><m:mfrac><m:mrow><m:mn>22</m:mn></m:mrow><m:mn>7</m:mn></m:mfrac></m:mrow></m:math></span>? <i class="calibre5 pcalibre pcalibre1">Hint:</i> See <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000001654"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">2.83</span></a>.</p></li>
<li id="P700049702700000000000000003FA2C" data-uri="chapter02.xhtml#P700049702700000000000000003FA2C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003FA2D" data-uri="chapter02.xhtml#P700049702700000000000000003FA2D" class="pcalibre calibre3 pcalibre1">At what bit position (relative to the binary point) do these two approximations to <i class="calibre5 pcalibre pcalibre1">π</i> diverge?</p></li>
</ol>
</li></ol>
</section>
<section id="P7000497027000000000000000001758" data-uri="chapter02.xhtml#P7000497027000000000000000001758" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA2E" data-uri="chapter02.xhtml#P700049702700000000000000003FA2E" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000175A" title="141" data-uri="chapter02.xhtml#P700049702700000000000000000175A" epub:type="pagebreak"></span>Bit-Level Floating-Point Coding Rules</h1></header>
<p id="P700049702700000000000000003FA2F" data-uri="chapter02.xhtml#P700049702700000000000000003FA2F" class="pcalibre1 pcalibre calibre2">In the following problems, you will write code to implement floating-point functions, operating directly on bit-level representations of floating-point numbers. Your code should exactly replicate the conventions for IEEE floating-point operations, including using round-to-even mode when rounding is required.</p>
<p id="P700049702700000000000000003FA30" data-uri="chapter02.xhtml#P700049702700000000000000003FA30" class="pcalibre1 pcalibre calibre2">To this end, we define data type <code id="P700049702700000000000000003FA31" data-uri="chapter02.xhtml#P700049702700000000000000003FA31" class="pcalibre1 calibre8 pcalibre">float_bits</code> to be equivalent to <code id="P700049702700000000000000003FA32" data-uri="chapter02.xhtml#P700049702700000000000000003FA32" class="pcalibre1 calibre8 pcalibre">un-signed:</code></p>
<pre id="P700049702700000000000000003FA33" data-uri="chapter02.xhtml#P700049702700000000000000003FA33" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA34" data-uri="chapter02.xhtml#P700049702700000000000000003FA34" class="calibre10 pcalibre pcalibre1">
/* Access bit-level representation floating-point number */
typedef unsigned float_bits;
</code></pre>
<p id="P700049702700000000000000003FA35" data-uri="chapter02.xhtml#P700049702700000000000000003FA35" class="pcalibre1 pcalibre calibre2">Rather than using data type <code id="P700049702700000000000000003FA36" data-uri="chapter02.xhtml#P700049702700000000000000003FA36" class="pcalibre1 calibre8 pcalibre">float</code> in your code, you will use <code id="P700049702700000000000000003FA37" data-uri="chapter02.xhtml#P700049702700000000000000003FA37" class="pcalibre1 calibre8 pcalibre">float_bits</code>. You may use both <code id="P700049702700000000000000003FA38" data-uri="chapter02.xhtml#P700049702700000000000000003FA38" class="pcalibre1 calibre8 pcalibre">int</code> and <code id="P700049702700000000000000003FA39" data-uri="chapter02.xhtml#P700049702700000000000000003FA39" class="pcalibre1 calibre8 pcalibre">unsigned</code> data types, including unsigned and integer constants and operations. You may not use any unions, structs, or arrays. Most significantly, you may not use any floating-point data types, operations, or constants. Instead, your code should perform the bit manipulations that implement the specified floating-point operations.</p>
<p id="P700049702700000000000000003FA3A" data-uri="chapter02.xhtml#P700049702700000000000000003FA3A" class="pcalibre1 pcalibre calibre2">The following function illustrates the use of these coding rules. For argument <var class="calibre5 pcalibre pcalibre1">f</var>, it returns ±0 if <var class="calibre5 pcalibre pcalibre1">f</var> is denormalized (preserving the sign of <var class="calibre5 pcalibre pcalibre1">f</var>), and returns <var class="calibre5 pcalibre pcalibre1">f</var> otherwise.</p>
<pre id="P700049702700000000000000003FA3B" data-uri="chapter02.xhtml#P700049702700000000000000003FA3B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA3C" data-uri="chapter02.xhtml#P700049702700000000000000003FA3C" class="calibre10 pcalibre pcalibre1">
/* If f is denorm, return 0. Otherwise, return f */
float_bits float_denorm_zero(float_bits f) {
    /* Decompose bit representation into parts */
    unsigned sign = f&gt;&gt;31;
    unsigned exp = f&gt;&gt;23 &amp; 0xFF;
    unsigned frac = f &amp; 0x7FFFFF;
    if (exp == 0) {
        /* Denormalized. Set fraction to 0 */
        frac = 0;
    }
    /* Reassemble bits */
    return (sign &lt;&lt; 31) | (exp &lt;&lt; 23) | frac;
}
</code></pre>
</section>
<section id="P7000497027000000000000000001769" data-uri="chapter02.xhtml#P7000497027000000000000000001769" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA3D" data-uri="chapter02.xhtml#P700049702700000000000000003FA3D" epub:type="title"><span class="pcalibre label pcalibre1">2.92 ♦♦</span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA3E" data-uri="chapter02.xhtml#P700049702700000000000000003FA3E">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA3F" data-uri="chapter02.xhtml#P700049702700000000000000003FA3F">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA40" data-uri="chapter02.xhtml#P700049702700000000000000003FA40"><p id="P700049702700000000000000003FA41" data-uri="chapter02.xhtml#P700049702700000000000000003FA41" class="pcalibre calibre3 pcalibre1">Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA42" data-uri="chapter02.xhtml#P700049702700000000000000003FA42" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA43" data-uri="chapter02.xhtml#P700049702700000000000000003FA43" class="calibre10 pcalibre pcalibre1">
/* Compute –f. If f is NaN, then return f. */
float_bits float_negate(float_bits f);
</code></pre>
<p id="P700049702700000000000000003FA44" data-uri="chapter02.xhtml#P700049702700000000000000003FA44" class="pcalibre calibre3 pcalibre1">For floating-point number <var class="calibre5 pcalibre pcalibre1">f</var>, this function computes –<var class="calibre5 pcalibre pcalibre1">f</var>. If <var class="calibre5 pcalibre pcalibre1">f</var> is <i class="calibre5 pcalibre pcalibre1">NaN</i>, your function should simply return <var class="calibre5 pcalibre pcalibre1">f</var>.</p>
<p id="P700049702700000000000000003FA45" data-uri="chapter02.xhtml#P700049702700000000000000003FA45" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA46" data-uri="chapter02.xhtml#P700049702700000000000000003FA46" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p></li>
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000001774" data-uri="chapter02.xhtml#P7000497027000000000000000001774"><div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA47" data-uri="chapter02.xhtml#P700049702700000000000000003FA47"><p id="P700049702700000000000000003FA48" data-uri="chapter02.xhtml#P700049702700000000000000003FA48" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001777" title="142" data-uri="chapter02.xhtml#P7000497027000000000000000001777" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">2.93  </span>Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA49" data-uri="chapter02.xhtml#P700049702700000000000000003FA49" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA4A" data-uri="chapter02.xhtml#P700049702700000000000000003FA4A" class="calibre10 pcalibre pcalibre1">
/* Compute |f|. If f is NaN, then return f. */
float_bits float_absval(float_bits f);
</code></pre>
<p id="P700049702700000000000000003FA4B" data-uri="chapter02.xhtml#P700049702700000000000000003FA4B" class="pcalibre calibre3 pcalibre1">For floating-point number <var class="calibre5 pcalibre pcalibre1">f</var>, this function computes |<var class="calibre5 pcalibre pcalibre1">f</var>|. If <var class="calibre5 pcalibre pcalibre1">f</var> is <i class="calibre5 pcalibre pcalibre1">NaN</i>, your function should simply return <var class="calibre5 pcalibre pcalibre1">f</var>.</p>
<p id="P700049702700000000000000003FA4C" data-uri="chapter02.xhtml#P700049702700000000000000003FA4C" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA4D" data-uri="chapter02.xhtml#P700049702700000000000000003FA4D" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p></li>
</ol></section>
<section id="P700049702700000000000000000177D" data-uri="chapter02.xhtml#P700049702700000000000000000177D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA4E" data-uri="chapter02.xhtml#P700049702700000000000000003FA4E" epub:type="title"><span class="pcalibre label pcalibre1">2.94  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA4F" data-uri="chapter02.xhtml#P700049702700000000000000003FA4F">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA50" data-uri="chapter02.xhtml#P700049702700000000000000003FA50">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA51" data-uri="chapter02.xhtml#P700049702700000000000000003FA51"><p id="P700049702700000000000000003FA52" data-uri="chapter02.xhtml#P700049702700000000000000003FA52" class="pcalibre calibre3 pcalibre1">Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA53" data-uri="chapter02.xhtml#P700049702700000000000000003FA53" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA54" data-uri="chapter02.xhtml#P700049702700000000000000003FA54" class="calibre10 pcalibre pcalibre1">
/* Compute 2*f. If f is NaN, then return f. */
float_bits float_twice(float_bits f);
</code></pre>
<p id="P700049702700000000000000003FA55" data-uri="chapter02.xhtml#P700049702700000000000000003FA55" class="pcalibre calibre3 pcalibre1">For floating-point number <var class="calibre5 pcalibre pcalibre1">f</var>, this function computes 2.0 · <var class="calibre5 pcalibre pcalibre1">f</var>. If <var class="calibre5 pcalibre pcalibre1">f</var> is <i class="calibre5 pcalibre pcalibre1">NaN</i>, your function should simply return <var class="calibre5 pcalibre pcalibre1">f</var>.</p>
<p id="P700049702700000000000000003FA56" data-uri="chapter02.xhtml#P700049702700000000000000003FA56" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA57" data-uri="chapter02.xhtml#P700049702700000000000000003FA57" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p>
</li>
</ol></section>
<section id="P7000497027000000000000000001788" data-uri="chapter02.xhtml#P7000497027000000000000000001788" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA58" data-uri="chapter02.xhtml#P700049702700000000000000003FA58" epub:type="title"><span class="pcalibre label pcalibre1">2.95  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA59" data-uri="chapter02.xhtml#P700049702700000000000000003FA59">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA5A" data-uri="chapter02.xhtml#P700049702700000000000000003FA5A">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA5B" data-uri="chapter02.xhtml#P700049702700000000000000003FA5B"><p id="P700049702700000000000000003FA5C" data-uri="chapter02.xhtml#P700049702700000000000000003FA5C" class="pcalibre calibre3 pcalibre1">Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA5D" data-uri="chapter02.xhtml#P700049702700000000000000003FA5D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA5E" data-uri="chapter02.xhtml#P700049702700000000000000003FA5E" class="calibre10 pcalibre pcalibre1">
/* Compute 0.5*f. If f is NaN, then return f. */
float_bits float_half(float_bits f);
</code></pre>
<p id="P700049702700000000000000003FA5F" data-uri="chapter02.xhtml#P700049702700000000000000003FA5F" class="pcalibre calibre3 pcalibre1">For floating-point number <var class="calibre5 pcalibre pcalibre1">f</var>, this function computes 0.5 · <var class="calibre5 pcalibre pcalibre1">f</var>. If <var class="calibre5 pcalibre pcalibre1">f</var> is <i class="calibre5 pcalibre pcalibre1">NaN</i>, your function should simply return <var class="calibre5 pcalibre pcalibre1">f</var>.</p>
<p id="P700049702700000000000000003FA60" data-uri="chapter02.xhtml#P700049702700000000000000003FA60" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA61" data-uri="chapter02.xhtml#P700049702700000000000000003FA61" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p>
</li>
</ol>
</section>
<section id="P7000497027000000000000000001793" data-uri="chapter02.xhtml#P7000497027000000000000000001793" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA62" data-uri="chapter02.xhtml#P700049702700000000000000003FA62" epub:type="title"><span class="pcalibre label pcalibre1">2.96  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA63" data-uri="chapter02.xhtml#P700049702700000000000000003FA63">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA64" data-uri="chapter02.xhtml#P700049702700000000000000003FA64">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA65" data-uri="chapter02.xhtml#P700049702700000000000000003FA65"><p id="P700049702700000000000000003FA66" data-uri="chapter02.xhtml#P700049702700000000000000003FA66" class="pcalibre calibre3 pcalibre1">Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA67" data-uri="chapter02.xhtml#P700049702700000000000000003FA67" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA68" data-uri="chapter02.xhtml#P700049702700000000000000003FA68" class="calibre10 pcalibre pcalibre1">
/*
 * Compute (int) f.
 * If conversion causes overflow or f is NaN, return 0x80000000
 */
int float_f2i(float_bits f);
</code></pre>
<p id="P700049702700000000000000003FA69" data-uri="chapter02.xhtml#P700049702700000000000000003FA69" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000179C" title="143" data-uri="chapter02.xhtml#P700049702700000000000000000179C" epub:type="pagebreak"></span>For floating-point number <var class="calibre5 pcalibre pcalibre1">f</var>, this function computes (<code id="P700049702700000000000000003FA6A" data-uri="chapter02.xhtml#P700049702700000000000000003FA6A" class="pcalibre1 calibre8 pcalibre">int</code>) <var class="calibre5 pcalibre pcalibre1">f</var>. Your function should round toward zero. If <var class="calibre5 pcalibre pcalibre1">f</var> cannot be represented as an integer (e.g., it is out of range, or it is <i class="calibre5 pcalibre pcalibre1">NaN</i>), then the function should return <code id="P700049702700000000000000003FA6B" data-uri="chapter02.xhtml#P700049702700000000000000003FA6B" class="pcalibre1 calibre8 pcalibre">0x80000000</code>.</p>
<p id="P700049702700000000000000003FA6C" data-uri="chapter02.xhtml#P700049702700000000000000003FA6C" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA6D" data-uri="chapter02.xhtml#P700049702700000000000000003FA6D" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p></li>
</ol></section>
<section id="P70004970270000000000000000017A1" data-uri="chapter02.xhtml#P70004970270000000000000000017A1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003FA6E" data-uri="chapter02.xhtml#P700049702700000000000000003FA6E" epub:type="title"><span class="pcalibre label pcalibre1">2.97  </span></h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003FA6F" data-uri="chapter02.xhtml#P700049702700000000000000003FA6F">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003FA70" data-uri="chapter02.xhtml#P700049702700000000000000003FA70">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003FA71" data-uri="chapter02.xhtml#P700049702700000000000000003FA71"><p id="P700049702700000000000000003FA72" data-uri="chapter02.xhtml#P700049702700000000000000003FA72" class="pcalibre calibre3 pcalibre1">Following the bit-level floating-point coding rules, implement the function with the following prototype:</p></div>
<pre id="P700049702700000000000000003FA73" data-uri="chapter02.xhtml#P700049702700000000000000003FA73" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003FA74" data-uri="chapter02.xhtml#P700049702700000000000000003FA74" class="calibre10 pcalibre pcalibre1">
/* Compute (float) i */
float_bits float_i2f(int i);
</code></pre>
<p id="P700049702700000000000000003FA75" data-uri="chapter02.xhtml#P700049702700000000000000003FA75" class="pcalibre calibre3 pcalibre1">For argument <code id="P700049702700000000000000003FA76" data-uri="chapter02.xhtml#P700049702700000000000000003FA76" class="pcalibre1 calibre8 pcalibre">i</code>, this function computes the bit-level representation of <code id="P700049702700000000000000003FA77" data-uri="chapter02.xhtml#P700049702700000000000000003FA77" class="pcalibre1 calibre8 pcalibre">(float) i</code>.</p>
<p id="P700049702700000000000000003FA78" data-uri="chapter02.xhtml#P700049702700000000000000003FA78" class="pcalibre calibre3 pcalibre1">Test your function by evaluating it for all 2<sup class="calibre51 pcalibre pcalibre1">32</sup> values of argument <code id="P700049702700000000000000003FA79" data-uri="chapter02.xhtml#P700049702700000000000000003FA79" class="pcalibre1 calibre8 pcalibre">f</code> and comparing the result to what would be obtained using your machine's floating-point operations.</p></li>
</ol>
</section>
</section></body></html>
