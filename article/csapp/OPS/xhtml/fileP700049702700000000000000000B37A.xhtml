<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Part I Program Structure and Execution</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre pcalibre pcalibre1">
<section class="pcalibre halftitlepage pcalibre1" id="P700049702700000000000000000B37A" epub:type="part"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000048D16" data-uri="part01.xhtml#P7000497027000000000000000048D16" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000B37C" title="29" data-uri="part01.xhtml#P700049702700000000000000000B37C" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Part </span><span class="pcalibre label pcalibre1">I </span>Program Structure and Execution</h1></header>
<section class="pcalibre halftitlepage pcalibre1" id="d9e9176">
<p id="P7000497027000000000000000048D17" data-uri="part01.xhtml#P7000497027000000000000000048D17" class="pcalibre1 pcalibre calibre2">Our exploration of computer systems starts by studying the computer itself, comprising a processor and a memory subsystem. At the core, we require ways to represent basic data types, such as approximations to integer and real arithmetic. From there, we can consider how machine-level instructions manipulate data and how a compiler translates C programs into these instructions. Next, we study several methods of implementing a processor to gain a better understanding of how hardware resources are used to execute instructions. Once we understand compilers and machine-level code, we can examine how to maximize program performance by writing C programs that, when compiled, achieve the maximum possible performance. We conclude with the design of the memory subsystem, one of the most complex components of a modern computer system.</p>
<p id="P7000497027000000000000000048D18" data-uri="part01.xhtml#P7000497027000000000000000048D18" class="pcalibre1 pcalibre calibre2">This part of the book will give you a deep understanding of how application programs are represented and executed. You will gain skills that help you write programs that are secure, reliable, and make the best use of the computing resources.<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000B37F" title="30" data-uri="part01.xhtml#P700049702700000000000000000B37F" epub:type="pagebreak"></span></p>



<!--EOF:P7000497027000000000000000000279-->







<!--EOF:P7000497027000000000000000001DCE-->







<!--EOF:P7000497027000000000000000003A76-->







<!--EOF:P7000497027000000000000000004893-->







<!--EOF:P7000497027000000000000000005190-->




</section>
</section></body></html>
