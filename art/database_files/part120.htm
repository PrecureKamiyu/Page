<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>5.3   Triggers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part119.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part121.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">5.3   <span style=" color: #00AEEF;">Triggers</span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A <span class="s63">trigger </span>is a statement that the system executes automatically as a side eﬀect of a modiﬁcation to the database. To deﬁne a trigger, we must:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">Specify when a trigger is to be executed. This is broken up into an </span>event <span class="p">that causes the trigger to be checked and a </span>condition <span class="p">that must be satisﬁed for trigger execution to proceed.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">• <span class="s40">Specify the </span><span class="s13">actions </span><span class="p">to be taken when the trigger executes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Once we enter a trigger into the database, the database system takes on the responsibil- ity of executing it whenever the speciﬁed event occurs and the corresponding condition is satisﬁed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">5.3.1 Need for Triggers</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Triggers can be used to implement certain integrity constraints that cannot be speci- ﬁed using the constraint mechanism of <span class="s44">SQL</span>. Triggers are also useful mechanisms for alerting humans or for starting certain tasks automatically when certain conditions are met. As an illustration, we could design a trigger that, whenever a tuple is inserted into the <i>takes </i>relation, updates the tuple in the <i>student </i>relation for the student taking the course by adding the number of credits for the course to the student’s total credits. As another example, suppose a warehouse wishes to maintain a minimum inventory of each item; when the inventory level of an item falls below the minimum level, an order can be placed automatically. On an update of the inventory level of an item, the trigger compares the current inventory level with the minimum inventory level for the item, and if the level is at or below the minimum, a new order is created.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Note that triggers cannot usually perform updates outside the database, and hence, in the inventory replenishment example, we cannot use a trigger to place an order in the external world. Instead, we add an order to a relation holding reorders. We must create a separate permanently running system process that periodically scans that relation and places orders. Some database systems provide built-in support for sending email from <span class="s44">SQL </span>queries and triggers using this approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1018.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 142pt;text-indent: 0pt;text-align: left;">create trigger <i>timeslot check1 </i>after insert on <i>section</i></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">referencing new row as <i>nrow</i></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">for each row</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1020.png"/></span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">when <span class="p">(</span><i>nrow.time slot id </i>not in <span class="p">(</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1022.png"/></span></p><p class="s46" style="padding-left: 181pt;text-indent: 0pt;text-align: left;">select <i>time slot id</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1024.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1026.png"/></span></p><p class="s13" style="padding-left: 181pt;text-indent: 0pt;text-align: left;"><b>from </b>time slot<span class="p">)) /* </span>time slot id <span class="p">not present in </span>time slot <span class="p">*/</span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">begin</p><p class="s46" style="padding-left: 142pt;text-indent: 9pt;text-align: left;">rollback end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1027.png"/></span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">create trigger <i>timeslot check2 </i>after delete on <i>timeslot</i></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">referencing old row as <i>orow</i></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">for each row</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1028.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1029.png"/></span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">when <span class="p">(</span><i>orow.time slot id </i>not in <span class="p">(</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1030.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1031.png"/></span></p><p class="s46" style="padding-left: 181pt;text-indent: 0pt;text-align: left;">select <i>time slot id</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1032.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1033.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1035.png"/></span></p><p class="s13" style="padding-left: 181pt;text-indent: 0pt;text-align: left;"><b>from </b>time slot<span class="p">) /* last tuple for </span>time slot id <span class="p">deleted from </span>time slot <span class="p">*/</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1036.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1037.png"/></span></p><p class="s46" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">and <i>orow.time slot id </i>in <span class="p">(</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1038.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1039.png"/></span></p><p class="s46" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">select <i>time slot id</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1040.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1041.png"/></span></p><p class="s13" style="padding-left: 181pt;text-indent: 0pt;text-align: left;"><b>from </b>section<span class="p">)) /* and </span>time slot id <span class="p">still referenced from </span>section<span class="p">*/</span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">begin</p><p class="s46" style="padding-left: 142pt;text-indent: 9pt;text-align: left;">rollback end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1042.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 177pt;text-indent: 0pt;text-align: left;">Figure 5.9 <span class="s74">Using triggers to maintain referential integrity.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">5.3.2 Triggers in SQL</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We now consider how to implement triggers in <span class="s44">SQL</span>. The syntax we present here is de- ﬁned by the <span class="s44">SQL </span>standard, but most databases implement nonstandard versions of this syntax. Although the syntax we present here may not be supported on such systems, the concepts we describe are applicable across implementations. We discuss nonstan- dard trigger implementations in Note 5.3 on page 212. In each system, trigger syntax is based upon that system’s syntax for coding functions and procedures.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1044.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1045.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1046.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 5.9 shows how triggers can be used to ensure referential integrity on the <i>time slot id </i>attribute of the <i>section </i>relation. The ﬁrst trigger deﬁnition in the ﬁgure speciﬁes that the trigger is initiated <i>after </i>any insert on the relation <i>section </i>and it ensures that the <i>time slot id </i>value being inserted is valid. <span class="s44">SQL </span>bf insert statement could insert multiple tuples of the relation, and the <b>for each row </b>clause in the trigger code would then explic- itly iterate over each inserted row. The <b>referencing new row as </b>clause creates a variable <i>nrow </i>(called a <b>transition variable</b>) that stores the value of the row being inserted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <b>when </b>statement speciﬁes a condition. The system executes the rest of the trig- ger body only for tuples that satisfy the condition. The <b>begin atomic </b><span class="s15">… </span><b>end </b>clause can serve to collect multiple <span class="s44">SQL </span>statements into a single compound statement. In our ex- ample, though, there is only one statement, which rolls back the transaction that caused the trigger to get executed. Thus, any transaction that violates the referential integrity constraint gets rolled back, ensuring the data in the database satisﬁes the constraint.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1047.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1049.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1050.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1051.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1052.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1053.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It is not suﬃcient to check referential integrity on inserts alone; we also need to consider updates of <i>section</i>, as well as deletes and updates to the referenced table <i>time slot</i>. The second trigger deﬁnition in Figure 5.9 considers the case of deletes to <i>time slot</i>. This trigger checks that the <i>time slot id </i>of the tuple being deleted is either still present in <i>time slot</i>, or that no tuple in <i>section </i>contains that particular <i>time slot id </i>value; otherwise, referential integrity would be violated.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1054.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To ensure referential integrity, we would also have to create triggers to handle up- dates to <i>section </i>and <i>time slot</i>; we describe next how triggers can be executed on updates, but we leave the deﬁnition of these triggers as an exercise to the reader.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For updates, the trigger can specify attributes whose update causes the trigger to execute; updates to other attributes would not cause it to be executed. For example, to specify that a trigger executes after an update to the <i>grade </i>attribute of the <i>takes </i>relation, we write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">after update of <i>takes </i>on <i>grade</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <b>referencing old row as </b>clause can be used to create a variable storing the old value of an updated or deleted row. The <b>referencing new row as </b>clause can be used with updates in addition to inserts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1055.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 5.10 shows how a trigger can be used to keep the <i>tot cred </i>attribute value of <i>student </i>tuples up-to-date when the <i>grade </i>attribute is updated for a tuple in the <i>takes </i>relation. The trigger is executed only when the <i>grade </i>attribute is updated from a value that is either null or ’F’ to a grade that indicates the course is successfully completed. The <b>update </b>statement is normal <span class="s44">SQL </span>syntax except for the use of the variable <i>nrow</i>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A more realistic implementation of this example trigger would also handle grade corrections that change a successful completion grade to a failing grade and handle insertions into the <i>takes </i>relation where the <i>grade </i>indicates successful completion. We leave these as an exercise for the reader.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As another example of the use of a trigger, the action on <b>delete </b>of a <i>student </i>tuple could be to check if the student has any entries in the <i>takes </i>relation, and if so, to delete them.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Many database systems support a variety of other triggering events, such as when a user (application) logs on to the database (that is, opens a connection), the system shuts down, or changes are made to system settings.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Triggers can be activated <b>before </b>the event (<b>insert</b>, <b>delete</b>, or <b>update</b>) instead of <b>after </b>the event. Triggers that execute before an event can serve as extra constraints that can prevent invalid updates, inserts, or deletes. Instead of letting the invalid action proceed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1056.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 183pt;text-indent: 0pt;text-align: left;">create trigger <i>credits earned </i>after update of <i>takes </i>on <i>grade</i></p><p class="s46" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">referencing new row as <i>nrow </i>referencing old row as <i>orow </i>for each row</p><p class="s46" style="padding-top: 1pt;padding-left: 193pt;text-indent: -9pt;line-height: 69%;text-align: left;">when <i>nrow.grade </i><span class="s83">&lt;&gt; </span><span class="p">’F’ </span>and <i>nrow.grade </i>is not null and <span class="p">(</span><i>orow.grade </i><span class="s15">= </span><span class="p">’F’ </span>or <i>orow.grade </i>is null<span class="p">)</span></p><p class="s46" style="padding-top: 1pt;padding-left: 193pt;text-indent: -9pt;text-align: left;">begin atomic update <i>student</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1057.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1058.png"/></span></p><p class="s13" style="padding-left: 193pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><b>set </b>tot cred<span class="s15">= </span>tot cred<span class="p">+</span></p><p style="padding-left: 222pt;text-indent: 0pt;text-align: left;">(<b>select </b><i>credits</i></p><p class="s46" style="padding-left: 225pt;text-indent: 0pt;text-align: left;">from <i>course</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1059.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1060.png"/></span></p><p class="s13" style="padding-left: 225pt;text-indent: 0pt;text-align: left;"><b>where </b>course<span class="p">.</span>course id<span class="s15">= </span>nrow.course id<span class="p">)</span></p><p class="s13" style="padding-left: 193pt;text-indent: 0pt;text-align: left;"><b>where </b>student.id <span class="p">= </span>nrow.id<span class="p">;</span></p><p class="s46" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1061.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1062.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 174pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.10 </span>Using a trigger to maintain <span class="s91">credits earned </span>values.</p><p style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">and cause an error, the trigger might take action to correct the problem so that the <b>update</b>, <b>insert</b>, or <b>delete </b>becomes valid. For example, if we attempt to insert an instructor into a department whose name does not appear in the <i>department </i>relation, the trigger could insert a tuple into the <i>department </i>relation for that department name before the insertion generates a foreign-key violation. As another example, suppose the value of an inserted grade is blank, presumably to indicate the absence of a grade. We can deﬁne a trigger that replaces the value with the <b>null </b>value. The <b>set </b>statement can be used to carry out such modiﬁcations. An example of such a trigger appears in Figure 5.11.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Instead of carrying out an action for each aﬀected row, we can carry out a single action for the entire <span class="s44">SQL </span>statement that caused the insert, delete, or update. To do so, we use the <b>for each statement </b>clause instead of the <b>for each row </b>clause. The clauses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1063.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 215pt;text-indent: 0pt;text-align: left;">create trigger <i>setnull </i>before update of <i>takes</i></p><p class="s46" style="padding-left: 215pt;text-indent: 0pt;text-align: left;">referencing new row as <i>nrow</i></p><p class="s46" style="padding-left: 215pt;text-indent: 0pt;text-align: left;">for each row</p><p style="padding-left: 215pt;text-indent: 0pt;text-align: left;"><b>when </b>(<i>nrow.grade </i><span class="s15">= </span>’ ’)</p><p class="s46" style="padding-left: 215pt;text-indent: 0pt;text-align: left;">begin atomic</p><p class="s46" style="padding-left: 215pt;text-indent: 9pt;text-align: left;">set <i>nrow.grade </i><span class="s15">= </span>null<span class="p">; </span>end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1064.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 170pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.11 </span>Example of using <span class="s146">set </span>to change an inserted value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><b>referencing old table as </b>or <b>referencing new table as </b>can then be used to refer to temporary tables (called <i>transition tables</i>) containing all the aﬀected rows. Transition tables cannot be used with <b>before </b>triggers, but they can be used with <b>after </b>triggers, regardless of whether they are statement triggers or row triggers. A single <span class="s44">SQL </span>statement can then be used to carry out multiple actions on the basis of the transition tables.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1065.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1066.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1067.png"/></span></p><p class="s46" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="p">Triggers can be disabled or enabled; by default they are enabled when they are created, but they can be disabled by using </span>alter trigger <i>trigger name </i>disable <span class="p">(some databases use alternative syntax such as </span>disable trigger <i>trigger name</i><span class="p">). A trigger that has been disabled can be enabled again. A trigger can instead be dropped, which re- moves it permanently, by using the command </span>drop trigger <i>trigger name</i><span class="p">.</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Returning to our inventory-replenishment example from Section 5.3.1, suppose we have the following relations:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 107pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>inventory <span class="p">(</span>item, level<span class="p">), which notes the current amount of the item in the ware- house.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>minlevel <span class="p">(</span>item, level<span class="p">), which notes the minimum amount of the item to be main- tained.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>reorder <span class="p">(</span>item, amount<span class="p">), which notes the amount of the item to be ordered when its level falls below the minimum.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>orders <span class="p">(</span>item, amount<span class="p">), which notes the amount of the item to be ordered.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">To place a reorder when inventory falls below a speciﬁed minimum, we can use the trigger shown in Figure 5.12. Note that we have been careful to place an order only when the amount falls from above the minimum level to below the minimum level. If we check only that the new value after an update is below the minimum level, we may place an order erroneously when the item has already been reordered.</p><p class="s42" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">SQL<span class="s43">-based database systems use triggers widely, although before </span>SQL:1999 <span class="s43">they were not part of the </span>SQL <span class="s43">standard. Unfortunately, as a result, each database system implemented its own syntax for triggers, leading to incompatibilities. The </span>SQL:1999 <span class="s43">syntax for triggers that we use here is similar, but not identical, to the syntax in the </span>IBM DB2 <span class="s43">and Oracle database systems. See Note 5.3 on page 212.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">5.3.3 When Not to Use Triggers</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">There are many good uses for triggers, such as those we have just seen in Section 5.3.2, but some uses are best handled by alternative techniques. For example, we could imple- ment the <b>on delete cascade </b>feature of a foreign-key constraint by using a trigger instead of using the cascade feature. Not only would this be more work to implement, but also it would be much harder for a database user to understand the set of constraints implemented in the database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 192pt;text-indent: 0pt;text-align: left;">create trigger <i>reorder </i>after update of <i>level </i>on <i>inventory</i></p><p class="s46" style="padding-left: 192pt;text-indent: 0pt;text-align: left;">referencing old row as <i>orow</i><span class="p">, </span>new row as <i>nrow</i></p><p class="s46" style="padding-left: 192pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for each row</p><p class="s46" style="padding-left: 192pt;text-indent: 0pt;line-height: 17pt;text-align: left;">when <i>nrow.level </i><span class="s83">&lt;</span><span class="s15">= </span><span class="p">(</span>select <i>level</i></p><p class="s46" style="padding-left: 280pt;text-indent: 0pt;line-height: 10pt;text-align: left;">from <i>minlevel</i></p><p class="s13" style="padding-left: 280pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><b>where </b>minlevel.item <span class="p">= </span>orow.item<span class="p">)</span></p><p class="s46" style="padding-left: 192pt;text-indent: 0pt;line-height: 17pt;text-align: left;">and <i>orow.level </i><span class="s83">&gt; </span><span class="p">(</span>select <i>level</i></p><p class="s46" style="padding-left: 280pt;text-indent: 0pt;line-height: 10pt;text-align: left;">from <i>minlevel</i></p><p class="s13" style="padding-left: 280pt;text-indent: 0pt;text-align: left;"><b>where </b>minlevel.item <span class="p">= </span>orow.item<span class="p">)</span></p><p class="s46" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">begin atomic</p><p class="s46" style="padding-left: 213pt;text-indent: 0pt;text-align: left;">insert into <i>orders</i></p><p style="padding-left: 236pt;text-indent: 0pt;text-align: left;">(<b>select </b><i>item, amount</i></p><p class="s46" style="padding-left: 238pt;text-indent: 0pt;text-align: left;">from <i>reorder</i></p><p class="s13" style="padding-left: 238pt;text-indent: 0pt;text-align: left;"><b>where </b>reorder.item <span class="s15">= </span>orow.item<span class="p">);</span></p><p class="s46" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">end<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1068.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 185pt;text-indent: 0pt;text-align: left;">Figure 5.12 <span class="s74">Example of trigger for reordering an item.</span></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">As another example, triggers can be used to maintain materialized views. For in- stance, if we wished to support very fast access to the total number of students regis- tered for each course section, we could do this by creating a relation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1069.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1070.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1071.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1072.png"/></span></p><p class="s13" style="padding-left: 119pt;text-indent: 47pt;line-height: 202%;text-align: left;">section registration<span class="p">(</span>course id<span class="p">, </span>sec id<span class="p">, </span>semester<span class="p">, </span>year<span class="p">, </span>total students<span class="p">) deﬁned by the query</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1073.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1074.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1075.png"/></span></p><p style="padding-left: 169pt;text-indent: 0pt;text-align: left;"><b>select </b><i>course id</i>, <i>sec id</i>, <i>semester</i>, <i>year</i>, <b>count</b>(<span class="s69">ID</span>) <b>as </b><i>total students</i></p><p class="s46" style="padding-left: 169pt;text-indent: 0pt;text-align: left;">from <i>takes</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1076.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1077.png"/></span></p><p class="s13" style="padding-left: 169pt;text-indent: 0pt;text-align: left;"><b>group by </b>course id<span class="p">, </span>sec id<span class="p">, </span>semester<span class="p">, </span>year<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1078.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1079.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The value of <i>total students </i>for each course must be maintained up-to-date by triggers on insert, delete, or update of the <i>takes </i>relation. Such maintenance may require inser- tion, update or deletion of tuples from <i>section registration</i>, and triggers must be written accordingly.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">However, many database systems now support materialized views, which are auto- matically maintained by the database system (see Section 4.2.3). As a result, there is no need to write trigger code for maintaining such materialized views.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Triggers have been used for maintaining copies, or replicas, of databases. A collec- tion of triggers on insert, delete, or update can be created on each relation to record the changes in relations called <b>change </b>or <b>delta </b>relations. A separate process copies over the changes to the replica of the database. Modern database systems, however, provide</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="493" height="529" alt="image" src="Image_1080.png"/></span></p><p class="s73" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">Note 5.3 <span class="s146">NONSTANDARD TRIGGER SYNTAX</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: justify;">Although the trigger syntax we describe here is part of the <span class="s44">SQL </span>standard, and is supported by <span class="s44">IBM DB2</span>, most other database systems have nonstandard syntax for specifying triggers and may not implement all features in the <span class="s44">SQL </span>standard. We outline a few of the diﬀerences below; see the respective system manuals for further details.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">For example, in the Oracle syntax, unlike the <span class="s44">SQL </span>standard syntax, the keyword <b>row </b>does not appear in the <b>referencing </b>statement. The keyword <b>atomic </b>does not appear after <b>begin</b>. The reference to <i>nrow </i>in the <b>select </b>statement nested in the <b>update </b>statement must begin with a colon (:) to inform the system that the variable <i>nrow </i>is deﬁned externally from the <span class="s44">SQL </span>statement. Further, subqueries are not allowed in the <b>when </b>and <b>if </b>clauses. It is possible to work around this problem by moving complex predicates from the <b>when </b>clause into a separate query that saves the result into a local variable, and then reference that variable in an <b>if </b>clause, and the body of the trigger then moves into the corresponding <b>then </b>clause. Further, in Oracle, triggers are not allowed to execute a transaction rollback directly; however, they can instead use a function called <span class="s49">raise application error </span>to not only roll back the transaction but also return an error message to the user/application that performed the update.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">As another example, in Microsoft <span class="s44">SQL S</span>erver the keyword <b>on </b>is used instead of <b>after</b>. The <b>referencing </b>clause is omitted, and old and new rows are referenced by the tuple variables <b>deleted </b>and <b>inserted</b>. Further, the <b>for each row </b>clause is omitted, and <b>when </b>is replaced by <b>if</b>. The <b>before </b>speciﬁcation is not supported, but an <b>instead of </b>speciﬁcation is supported.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">In <span class="s44">P</span>ostgre<span class="s44">SQL</span>, triggers do not have a body, but instead invoke a procedure for each row, which can access variables <b>new </b>and <b>old </b>containing the old and new values of the row. Instead of performing a rollback, the trigger can raise an exception with an associated error message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">built-in facilities for database replication, making triggers unnecessary for replication in most cases. Replicated databases are discussed in detail in Chapter 23.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Another problem with triggers lies in unintended execution of the triggered action when data are loaded from a backup copy,<span class="s76">5</span> or when database updates at a site are replicated on a backup site. In such cases, the triggered action has already been exe- cuted, and typically it should not be executed again. When loading data, triggers can be disabled explicitly. For backup replica systems that may have to take over from the pri- mary system, triggers would have to be disabled initially and enabled when the backup</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1081.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">5<span class="s78">We discuss database backup and recovery from failures in detail in Chapter 19.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:252.964pt" cellspacing="0"><tr style="height:17pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;text-align: center;"><a name="bookmark72">course id</a><a name="bookmark112">&zwnj;</a></p></td><td style="width:51pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">prereq id</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 3pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BIO-301</p></td><td style="width:51pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 3pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BIO-101</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BIO-399</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 3pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">BIO-101</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-190</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-101</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 11pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-315</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 9pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-190</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 11pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-319</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-101</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 11pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-319</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-315</p></td></tr><tr style="height:14pt"><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-347</p></td><td style="width:51pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 10pt;text-indent: 0pt;line-height: 12pt;text-align: center;">CS-319</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1082.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1083.png"/></span></p><p class="s74" style="padding-top: 4pt;padding-left: 205pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 5.13 </span>An instance of the <span class="s91">prereq </span>relation.</p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">site takes over processing from the primary system. As an alternative, some database systems allow triggers to be speciﬁed as <b>not for replication</b>, which ensures that they are not executed on the backup site during database replication. Other database systems provide a system variable that denotes that the database is a replica on which database actions are being replayed; the trigger body should check this variable and exit if it is true. Both solutions remove the need for explicit disabling and enabling of triggers.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Triggers should be written with great care, since a trigger error detected at runtime causes the failure of the action statement that set oﬀ the trigger. Furthermore, the action of one trigger can set oﬀ another trigger. In the worst case, this could even lead to an inﬁnite chain of triggering. For example, suppose an insert trigger on a relation has an action that causes another (new) insert on the same relation. The insert action then triggers yet another insert action, and so on ad inﬁnitum. Some database systems limit the length of such chains of triggers (for example, to 16 or 32) and consider longer chains of triggering an error. Other systems ﬂag as an error any trigger that attempts to reference the relation whose modiﬁcation caused the trigger to execute in the ﬁrst place.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Triggers can serve a very useful purpose, but they are best avoided when alterna- tives exist. Many trigger applications can be substituted by appropriate use of stored procedures, which we discussed in Section 5.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part119.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part121.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
