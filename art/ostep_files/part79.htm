<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>8.1 MLFQ: Basic Rules</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part78.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part80.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">8.1 MLFQ: Basic Rules</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To build such a scheduler, in this chapter we will describe the basic algorithms behind a multi-level feedback queue; although the specifics of many implemented MLFQs differ [E95], most approaches are similar.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In our treatment, the MLFQ has a number of distinct <b>queues</b>, each assigned a different <b>priority level</b>. At any given time, a job that is ready to run is on a single queue. MLFQ uses priorities to decide which job should run at a given time: a job with higher priority (i.e., a job on a higher queue) is chosen to run.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Of course, more than one job may be on a given queue, and thus have the <i>same </i>priority. In this case, we will just use round-robin scheduling among those jobs.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Thus, the key to MLFQ scheduling lies in how the scheduler sets pri- orities. Rather than giving a fixed priority to each job, MLFQ <i>varies </i>the priority of a job based on its <i>observed behavior</i>. If, for example, a job repeat- edly relinquishes the CPU while waiting for input from the keyboard, MLFQ will keep its priority high, as this is how an interactive process might behave. If, instead, a job uses the CPU intensively for long periods of time, MLFQ will reduce its priority. In this way, MLFQ will try to <i>learn </i>about processes as they run, and thus use the <i>history </i>of the job to predict its <i>future </i>behavior.</p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Thus, we arrive at the first two basic rules for MLFQ:</p><p style="padding-top: 1pt;padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="s4">• </span><b>Rule 1: </b>If Priority(A) <span class="s43">&gt; </span>Priority(B), A runs (B doesn’t).</p><p style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="s4">• </span><b>Rule 2: </b>If Priority(A) <span class="s44">= </span>Priority(B), A &amp; B run in RR.</p><p style="padding-top: 6pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">If we were to put forth a picture of what the queues might look like at a given instant, we might see something like the following (Figure <span style=" color: #00AEEF;">8.1</span>). In the figure, two jobs (A and B) are at the highest priority level, while job C is in the middle and Job D is at the lowest priority. Given our current knowledge of how MLFQ works, the scheduler would just alternate time slices between A and B because they are the highest priority jobs in the system; poor jobs C and D would never even get to run – an outrage!</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Of course, just showing a static snapshot of some queues does not re- ally give you an idea of how MLFQ works. What we need is to under-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="95" height="24" alt="image" src="Image_054.png"/></span></p><p class="s67" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 9pt;text-align: left;">B</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-top: 3pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">[High Priority] <span class="s68">Q8</span></p><p class="s67" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">Q7</p><p style="text-indent: 0pt;text-align: left;"><span><img width="48" height="24" alt="image" src="Image_055.png"/></span></p><p class="s67" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">C</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 7pt;padding-left: 158pt;text-indent: 0pt;line-height: 181%;text-align: justify;">Q6 Q5 Q4</p><p style="text-indent: 0pt;text-align: left;"><span><img width="48" height="24" alt="image" src="Image_056.png"/></span></p><p class="s67" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">D</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-left: 158pt;text-indent: 0pt;line-height: 181%;text-align: center;">Q3 Q2</p><p class="s47" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">[Low Priority] <span class="s68">Q1</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">Figure 8.1: <b>MLFQ Example</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">stand how job priority <i>changes </i>over time. And that, in a surprise only to those who are reading a chapter from this book for the first time, is exactly what we will do next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part78.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part80.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
