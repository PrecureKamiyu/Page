<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>20.7  Cloud-Based Services</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part374.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part376.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">20.7  <span style=" color: #00AEEF;">Cloud-Based Services</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Traditionally, enterprises purchased and ran servers that execute the database as well as the applications. There is a high cost to maintaining servers, including setting up server room infrastructure dealing with all kinds of failures such as air conditioning and power failures, not to mention failures of CPUs, disks, and other components of the servers. Further, if there is a sudden increase in demand, it is very diﬃcult to add infrastructure to service the demand, and if demand falls, the infrastructure may lie idle.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In contrast, in the <span class="s63">cloud computing </span>model, applications of an enterprise are ex- ecuted on an infrastructure that is managed by another company, typically at a data center that hosts a large number of machines used by many diﬀerent enterprises/users. The service provider may provide not just hardware, but also support platforms such as databases, and application software.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A variety of vendors oﬀer cloud services; these include major vendors such as Amazon, Microsoft, <span class="s44">IBM</span>, and Google, and a number of smaller vendors. One of the pioneers of cloud services, Amazon, originally built a large computing infrastructure purely for its internal use; then, seeing a business opportunity, it oﬀered computing infrastructure as a service to other users. Cloud services became very popular within just a few years.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s467" style="padding-top: 8pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Platform-as-a-Service</p><p class="s85" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Data storage, Database, Application server, ...</p><p style="padding-left: 235pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s467" style="padding-top: 7pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">Infrastructure-as-a-Service</p><p class="s85" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Containers Virtual Machines</p><p class="s85" style="padding-left: 26pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Servers   Storage</p><p style="padding-left: 235pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="156" alt="image" src="Image_3134.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s467" style="padding-left: 40pt;text-indent: 0pt;text-align: center;">internet</p><p style="text-indent: 0pt;text-align: left;"/><p class="s467" style="padding-top: 9pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">Software-as-a-Service</p><p class="s85" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">Enterprise applications, email, shared documents, ...</p><p style="text-indent: 0pt;text-align: left;"/><p class="s467" style="padding-top: 9pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Cloud Clients</p><p class="s85" style="padding-top: 6pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Web browsers, mobile apps, ...</p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 226pt;text-indent: 0pt;text-align: left;">Figure 20.10 <span class="s74">Cloud service models.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">20.7.1 Cloud Service Models</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">There are several ways in which cloud computing can be utilized, which are summa- rized in Figure 20.10. These include infrastructure-as-a-service, platform-as-a-service, and software-as-a-service models.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">In the </span><span class="s63">infrastructure-as-a-service </span><span class="p">model, an enterprise rents computing facilities; for example, an enterprise may rent one or more physical machines, along with disk storage space.</span></p><p style="padding-left: 139pt;text-indent: 14pt;text-align: justify;">More frequently, cloud computing providers provide an abstraction of a <span class="s63">virtual machine </span>(<span class="s64">VM</span>), which appears to the user to be a real machine. These machines are not “real” machines, but rather are simulated by software that allows a single</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: justify;">real computer to simulate several independent computers. <i>Containers </i>are a lower cost alternative to <span class="s44">VM</span>s and are described later in this section. Multiple <span class="s44">VM</span>s can run on a single server machine, and multiple containers can run on a single <span class="s44">VM </span>or server.</p><p style="padding-left: 107pt;text-indent: 17pt;text-align: justify;">By running a very large data center with many machines, cloud-service providers can exploit economies of scale and deliver computing power at much lower cost than an enterprise can do using its own infrastructure.</p><p style="padding-left: 107pt;text-indent: 14pt;text-align: justify;">Another major advantage of cloud computing is that the cloud-service provider usually has a large number of machines, with spare capacity, and thus an enterprise can rent more (virtual) machines as needed to meet demand and release them at times of light load. The ability to expand or contract capacity at short notice is often referred to as <span class="s63">elasticity</span>.</p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">The above beneﬁts of on-demand elastic provisioning of server systems have led to the widespread adoption of infrastructure-as-service platforms, especially by companies that anticipate rapid growth in their computing usage. However, due to the potential security risks of storing data outside the enterprise, the use of cloud computing is still limited in high-security enterprise needs, such as banking.</p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">In the infrastructure-as-service model, the client enterprise runs its own soft- ware, including database systems, on virtual machines provided by the cloud- service provider; the client has to install the database system and deal with main- tenance issues such as backup and restore.</p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">In the </span><span class="s63">platform-as-a-service </span>model, the service provider not only provides comput- ing infrastructure, but it also deploys and manages platforms, such as data storage, databases, and application servers, that are used by application software. The client has to install and maintain application software, such as <i>enterprise resource plan- ning </i>(<i>ERP</i>) systems, which run on such platform-provided services as application servers, database services, or data storage services.</p><p class="s50" style="padding-top: 10pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s63">Cloud-based data storage </span><span class="p">platforms provide a service that applications can use to store and retrieve data. The service provider takes care of provisioning suﬃ-</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: justify;">cient amount of storage and computing power to support the load on the data storage platform. Such storage systems could support ﬁles, which are typically large, ranging in size from a few megabytes to thousands of megabytes, support- ing millions of such ﬁles. Or such storage systems could support data items, which are typically small, ranging from hundreds of bytes to a few megabytes, but supporting billions of such data items. Such distributed ﬁle systems and data storage systems are discussed in Section 21.6 and Section 21.7. Database applications using cloud-based storage may run on the same cloud (i.e., the same set of machines), or on another cloud.</p><p style="padding-left: 122pt;text-indent: 14pt;text-align: justify;">One of the main attractions of cloud-based storage is that it can be used by paying a fee without worrying about purchasing, maintaining, and managing the computer systems on which such a service runs. Further, if there is an</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 153pt;text-indent: 0pt;text-align: justify;">increase in demand, the number of servers on which the service runs can be increased by paying a larger fee, without having to actually purchase and deploy more servers. The service provider would of course have to deploy extra servers, but they beneﬁt from economies of scale; the cost of deployment, and especially the time to deployment, are greatly reduced compared to what they would be if the end-users did it on their own.</p><p style="padding-left: 153pt;text-indent: 14pt;text-align: justify;">The fees for cloud-based data storage are typically based on the amount of data stored, and amount of data input to, and the amount of data output from, the data storage system.</p><p class="s50" style="padding-top: 8pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s63">Database-as-a-service </span><span class="p">platforms provide a database that can be accessed and queried by clients. Unlike storage services, database-as-a-service platforms pro-</span></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: justify;">vide database functionality such as querying using <span class="s44">SQL </span>or other query lan- guages, which data storage systems do not provide. Early oﬀerings of database- as-a-service only supported databases that run on a single node, although the node itself can have a substantial number of processors, memory, and storage. More recently, parallel database systems are being oﬀered as a service on the cloud.</p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">In the </span><span class="s63">software-as-a-service </span><span class="p">model, the service provider provides the application software as a service. The client does not need to deal with issues such as software installation or upgrades; these tasks are left to the service provider. The client can directly use interfaces provided by the software-as-a-service provider, such as web interfaces, or mobile app interfaces that provide a front end, with the application software acting as the back end.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The concept of virtual machines was developed in the 1960s to allow an expensive mainframe computer to be shared concurrently by users running diﬀerent operating systems. Although computers are now much cheaper, there is still a cost associated with supplying electrical power to the computers and maintaining them; virtual machines allow this cost to be shared by multiple concurrent users. Virtual machines also ease the task of moving services to new machines: a virtual machine can be shut down on one physical server and restarted on another physical server with very little delay or downtime. This feature is particularly important for quick recovery in the event of hardware failure or upgrade.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Although multiple virtual machines can run on a single real machine, each <span class="s44">VM </span>has a high overhead, since it runs an entire operating system internally. When a single organization wishes to run a number of services, if it creates a separate <span class="s44">VM </span>for each service, the overhead can be very high. If multiple applications are run on one machine (or <span class="s44">VM</span>), two problems often arise: (1) applications conﬂict on network ports by each trying to listen to the same network port, and (2) applications require diﬀerent versions of shared libraries, causing conﬂicts.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s63">Containers </span>solve both these problems; applications run in a container, which has its own <span class="s44">IP </span>address and its own set of shared libraries. Each application can consist of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s465" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">		</p><p style="text-indent: 0pt;text-align: left;"><span><img width="140" height="158" alt="image" src="Image_3135.png"/></span></p><p class="s468" style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">OS Kernel</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">Libraries</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="140" height="158" alt="image" src="Image_3136.png"/></span></p><p class="s468" style="padding-top: 3pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">Hypervisor</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;text-indent: 0pt;text-align: left;">OS Kernel</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;text-indent: 0pt;text-align: left;">OS Kernel</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Libraries</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Libraries</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="140" height="158" alt="image" src="Image_3137.png"/></span></p><p class="s468" style="text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="text-indent: 0pt;text-align: left;">Libraries  Libraries</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="text-indent: 0pt;text-align: left;">App</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">Libraries  Libraries</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s468" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">OS Kernel</p><p style="text-indent: 0pt;text-align: left;"/><p class="s468" style="padding-top: 1pt;padding-left: 101pt;text-indent: -8pt;line-height: 108%;text-align: left;">a) Multiple applications on a single machine</p><p class="s468" style="padding-top: 1pt;padding-left: 32pt;text-indent: -8pt;line-height: 108%;text-align: left;">b) Each application running on its own VM, with multiple VMs running in a machine</p><p class="s468" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">c) Each application running in</p><p class="s468" style="padding-left: 17pt;text-indent: 0pt;line-height: 108%;text-align: left;">its own container, with multiple containers running in a machine</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 20.11 <span class="s74">Application deployment alternatives.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: right;">multiple processes, all running within the same container. The cost of using containers to run applications is much less than the alternative of running each application in its own <span class="s44">VM</span>, since many containers can share the same operating system kernel. Each container appears to have its own ﬁle system, but the ﬁles are all stored in a common underlying ﬁle system across all containers. Processes within a container can interact with each other through the ﬁle system as well as interprocess communication, but they can interact with processes from other containers only via network connections. Figure 20.11 depicts the diﬀerent deployment alternatives for a set of applications.</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Figure 20.11a shows the alternative of multiple applications running in a single ma- chine, sharing libraries and operating-system kernel. Figure 20.11b shows the alterna- tive of running each application in its own <span class="s44">VM</span>, with multiple <span class="s44">VM</span>s running on a single machine. The diﬀerent <span class="s44">VM</span>s running on a single real machine are managed by a soft- ware layer called the <i>hypervisor</i>. Figure 20.11c shows the alternative of using contain- ers, with each container having its own libraries, and multiple containers running on a single machine. Since containers have lower overheads, a single machine can support more containers than <span class="s44">VM</span>s.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Containers provide low-cost support for elasticity, since more containers can be deployed very quickly on existing virtual machines, instead of starting up fresh virtual machines.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Many applications today are built as a collection of multiple <span class="s63">services</span>, each of which runs as a separate process, oﬀering a network <span class="s44">API</span>; that is, the functions provided by the service are invoked by creating a network connection to the process and sending a service request over the network connection. Such an application architecture, which builds an application as a collection of small services, is called a <span class="s63">microservices architec- ture</span>. Containers ﬁt the microservices architecture very well, since they provide a very low overhead mechanism to execute processes supporting each service.</p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;"><a name="bookmark457">20.8 </a><span style=" color: #00AEEF;">Summary  </span><span class="s164">995</span><a name="bookmark504">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s63">Docker </span>is a very widely used container platform, while <span class="s63">Kubernetes </span>is a very popular platform that provides not only containers, but also a microservices platform. Kuber- netes allows applications to specify declaratively their container needs, and it auto- matically deploys and links multiple containers to execute the application. It can also manage a number of pods, which allow multiple containers to share storage (ﬁle sys- tem) and network (<span class="s44">IP </span>address) while allowing containers to retain their own copies of shared libraries. Furthermore, it can manage elasticity by controlling the deployment of additional containers when required. Kubernetes can support application scalability by load-balancing <span class="s44">API </span>requests across a collection of containers that all run copies of the same application. Users of the <span class="s44">API </span>do not need to know what <span class="s44">IP </span>addresses (each corresponding to a container) the service is running on, and they can instead connect to a single <span class="s44">IP </span>address. The load balancer distributes the requests from the common <span class="s44">IP </span>address to a set of containers (each with its own <span class="s44">IP </span>address) running the service.</p><p class="s68" style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">20.7.2 Benefits and Limitations of Cloud Services</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Many enterprises are ﬁnding the model of cloud computing and services beneﬁcial. The cloud model saves client enterprises the need to maintain a large system-support staﬀ and allows new enterprises to begin operation without having to make a large, up- front capital investment in computing systems. Further, as the needs of the enterprise grow, more resources (computing and storage) can be added as required; the cloud- computing vendor generally has very large clusters of computers, making it easy for the vendor to allocate resources on demand.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Users of cloud computing must be willing to accept that their data are held by another organization. This may present a variety of risks in terms of security and legal liability. If the cloud vendor suﬀers a security breach, client data may be divulged, causing the client to face legal challenges from its customers. Yet the client has no direct control over cloud-vendor security. These issues become more complex if the cloud vendor chooses to store data (or replicas of data) in a foreign country. Various legal jurisdictions diﬀer in their privacy laws. So, for example, if a German company’s data are replicated on a server in New York, then the privacy laws of the United States may apply instead of or in addition to those of Germany or the European Union. The cloud vendor might be required to release client data to the U.S. government even though the client never knew that its data would be stored in a location under U.S. jurisdiction. Speciﬁc cloud vendors oﬀer their clients varying degrees of control over how their data are distributed geographically and replicated.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Despite the drawbacks, the beneﬁts of cloud services are great enough that there is a rapidly growing market for such services.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part374.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part376.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
