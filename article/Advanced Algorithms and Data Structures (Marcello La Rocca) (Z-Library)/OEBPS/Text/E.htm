<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>appendix E</title>
    
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-998402"></a><a id="pgfId-998517"></a>appendix E. Recursion</h1>
  </div>

  <p class="body"><a id="pgfId-998526"></a>If you <a id="marker-1005138"></a>are reading this book, you are probably already familiar with loops. As discussed in appendix A, <code class="fm-code-in-text">for</code>, <code class="fm-code-in-text">while</code>, and <code class="fm-code-in-text">do-while</code> loops (and some more, depending on the language) all are examples of iteration.</p>

  <p class="body"><a id="pgfId-998604"></a>Iterative loops are one straightforward way to repeatedly perform similar actions on a series of elements. Usually loops go hand in hand with certain data structures, for example, containers like lists and arrays.</p>

  <p class="body"><a id="pgfId-998677"></a>Loops tend to work well when the data structure has a linear shape; sometimes, though, things are more complicated and a simple loop might not be enough to immediately solve the issue. We will see, for example, how trees and graphs are more challenging than lists. There are workarounds to use loops with these structures as well, but often a different approach works better.</p>

  <p class="body"><a id="pgfId-998815"></a>In the rest of this book, we used pseudo-code to describe algorithms in a language- agnostic way. To better illustrate how recursion works, however, a real programming language works better than pseudo-code. So, for this appendix only, we will use <i class="calibre17">JavaScript</i> in code listings. The choice of JavaScript, out of many possible candidates, is motivated by two characteristics of this language:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-998941"></a>Full read/write closures</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-998958"></a>Functions treated as first class citizens</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-998981"></a>These aspects allow us to illustrate an interesting technique called <i class="calibre17">memoization</i><a id="marker-1005142"></a>, which can be used in specific contexts to improve the performance of recursive algorithms.</p>

  <p class="body"><a id="pgfId-999040"></a>The same results could be obtained analogously in most functional programming languages. There are workarounds in OO languages too; for instance, in <i class="calibre17">Java</i>, <i class="calibre17">memoization</i><a id="marker-1005146"></a> can be obtained through static class fields.</p>

  <h2 class="fm-head" id="heading_id_3"><a id="pgfId-999112"></a>E.1  Simple recursion</h2>

  <p class="body"><a id="pgfId-999127"></a>The <a id="marker-1005150"></a>simplest case of recursion is when a function calls itself at a given point of its flow. The most used (and abused) examples of recursion are computing the factorial of a number and Fibonacci’s numbers.</p>

  <p class="body"><a id="pgfId-999216"></a>Listing E.1 shows a possible JavaScript implementation of a function computing Fibonacci’s numbers.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1008820"></a>Listing E.1 Fibonacci numbers, JavaScript</p>
  <pre class="programlisting"><b class="calibre21">function</b> fibonacci(n) {
    <b class="calibre21">if</b> (n &lt; 0) {
      <b class="calibre21">throw new</b> Error(‘n can not be negative’);
    } <b class="calibre21">else</b> if (n === 0 || n === 1) {
      <b class="calibre21">return</b> 1; // Base case
    } <b class="calibre21">else</b> {
      <b class="calibre21">return</b> fibonacci(n-1) + fibonacci(n-2);
    }
}</pre>

  <h3 class="fm-head2" id="heading_id_4"><a id="pgfId-999421"></a>E.1.1  Pitfalls</h3>

  <p class="body"><a id="pgfId-999433"></a>Recursion is not free of risks. First, we need to make sure to define a base case that is <i class="calibre17">always</i> possible to reach. In the example in listing E.1, if we forgot to check that the argument <code class="fm-code-in-text">n</code> is non-negative, <code class="fm-code-in-text">fibonacci(-1)</code> would go through every single negative integer number that can be stored in JavaScript before hitting the base case for <code class="fm-code-in-text">n === 0</code>. But more likely, it would throw an <code class="fm-code-in-text">Error: Maximum call stack size exceeded</code> long before getting anywhere near the base case.</p>

  <p class="body"><a id="pgfId-999618"></a>Of course, even using a loop, you’d need to get stopping conditions right; otherwise, you might end up with an infinite loop.</p>

  <p class="body"><a id="pgfId-999672"></a>Even with that extra check, we are not safe yet. In weakly typed languages such as JavaScript, <i class="calibre17">type-coercion</i><a id="marker-1005154"></a> will try to convert arguments passed to our function to numbers.</p>

  <p class="body"><a id="pgfId-999745"></a>Try to call <code class="fm-code-in-text">fibonacci(‘a’)</code> or <code class="fm-code-in-text">fibonacci(true)</code> instead. The method described previously doesn’t check that <code class="fm-code-in-text">n</code> has the proper type; <code class="fm-code-in-text">‘a’ - 1</code> returns <code class="fm-code-in-text">NaN</code>,<code class="fm-code-in-text"><a class="calibre14" href="#pgfId-1005279"><sup class="footnotenumber4">1</sup></a></code> as well as <code class="fm-code-in-text">NaN - 1</code>. Since <code class="fm-code-in-text">NaN</code> is not lower than 0, not equal to 0 or 1, the result is a (theoretically) infinite recursion call stack, that ends up once again in an <code class="fm-code-in-text">Error</code>.</p>

  <p class="body"><a id="pgfId-999888"></a>Another possible downside is a waste of resources. If you look closely at listing E.1, you can understand why this is not the best use case for recursion. For instance, try to track down the recursive calls we make when we call <code class="fm-code-in-text">fibonacci(4)</code>:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-999980"></a><code class="fm-code-in-text">fibonacci(4)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-999994"></a>  <code class="fm-code-in-text">fibonacci(3)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000010"></a>     <code class="fm-code-in-text">fibonacci(2)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000026"></a>        <code class="fm-code-in-text">fibonacci(1)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000042"></a>        <code class="fm-code-in-text">fibonacci(0)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000058"></a>     <code class="fm-code-in-text">fibonacci(1)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000073"></a>   <code class="fm-code-in-text">fibonacci(2)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1000088"></a>     <code class="fm-code-in-text">fibonacci(1)</code></p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-1000103"></a>     <code class="fm-code-in-text">fibonacci(0)</code></p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-1000118"></a>Indentation here is purely stylistic and meant to help you keep track of the hierarchy of the calls.</p>

  <p class="body"><a id="pgfId-1000160"></a>If you try with <code class="fm-code-in-text">fibonacci(5)</code>, it will be even more apparent that we compute the same value multiple times (at the cost of several function calls).</p>

  <p class="body"><a id="pgfId-1000223"></a>Computing sub-problems twice (or multiple times) is usually <i class="calibre17">a smell</i>, suggesting a different solution could be more efficient; and, in fact, in these cases usually <i class="calibre17">dynamic programming</i><a id="marker-1005162"></a> could provide a better alternative.</p>

  <p class="body"><a id="pgfId-1000301"></a>In JavaScript, a similar approach to keep track of the result of recursive calls on sub-problems is <b class="strong">memoization</b><a id="marker-1005166"></a>. With <i class="calibre17">memoization</i>, before making a recursive call, we check if we have cached the value, as shown in the implementation in listing E.2.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1008869"></a>Listing E.2 Fibonacci using memoization</p>
  <pre class="programlisting"><b class="calibre21">const</b> fibonacci = (() =&gt; {                  <span class="fm-combinumeral">❶</span>
  <b class="calibre21">let</b>  cache = [1, 1];                       <span class="fm-combinumeral">❷</span>
  <b class="calibre21">const</b> get = (n) =&gt; {                      <span class="fm-combinumeral">❸</span>
    <b class="calibre21">if</b> (n &gt;= cache.length) {
      cache[n] = fibonacci(n);              <span class="fm-combinumeral">❹</span>
    }
    <b class="calibre21">return</b> cache[n];
  };
  <b class="calibre21">return</b> (n) =&gt; {                           <span class="fm-combinumeral">❺</span>
    <b class="calibre21">if</b> (n &lt; 0) {
      <b class="calibre21">throw new</b>  Error(‘n can not be negative’);
    } <b class="calibre21">else</b>  if (n &gt; 1) {
      <b class="calibre21">return</b> get(n - 1) + get(n - 2);       <span class="fm-combinumeral">❻</span>
    }
    <b class="calibre21">return</b> 1;                               <span class="fm-combinumeral">❼</span>
  };
})();                                       <span class="fm-combinumeral">❽</span></pre>

  <p class="fm-code-annotation"><a id="pgfId-1012364"></a><span class="fm-combinumeral">❶</span> We use IIFE to create a closure for memoization.</p>

  <p class="fm-code-annotation"><a id="pgfId-1012390"></a><span class="fm-combinumeral">❷</span> This is our “history.” Initialized with return values for <code class="fm-code-in-text2">1</code> and 0.</p>

  <p class="fm-code-annotation"><a id="pgfId-1012407"></a><span class="fm-combinumeral">❸</span> This function (defined using lambda notation<a id="marker-1012412"></a>) takes care of memoization.</p>

  <p class="fm-code-annotation"><a id="pgfId-1012425"></a><span class="fm-combinumeral">❹</span> Updates history with a true recursive call</p>

  <p class="fm-code-annotation"><a id="pgfId-1012442"></a><span class="fm-combinumeral">❺</span> We return a function (which will be assigned to <code class="fm-code-in-text2">const fibonacci</code><a id="marker-1012447"></a>), effectively computing the <code class="fm-code-in-text2">n</code>-th Fibonacci number, for input <code class="fm-code-in-text2">n</code>.</p>

  <p class="fm-code-annotation"><a id="pgfId-1012460"></a><span class="fm-combinumeral">❻</span> Computes <code class="fm-code-in-text2">f(n)</code><a id="marker-1012464"></a> by retrieving values for <code class="fm-code-in-text2">n-1</code> and <code class="fm-code-in-text2">n-2</code></p>

  <p class="fm-code-annotation"><a id="pgfId-1012478"></a><span class="fm-combinumeral">❼</span> Covers the case <code class="fm-code-in-text2">n === 1 || n === 0</code></p>

  <p class="fm-code-annotation"><a id="pgfId-1012495"></a><span class="fm-combinumeral">❽</span> Executes the IIFE so the result of the function call is assigned to the constant on the first line</p>

  <p class="body"><a id="pgfId-1000965"></a>Both using naïve recursion and memoization can lead to space issues and out-of-memory exceptions (more on this in a few sections).</p>

  <h3 class="fm-head2" id="heading_id_5"><a id="pgfId-1001012"></a>E.1.2  Good recursion</h3>

  <p class="body"><a id="pgfId-1001027"></a>The previous example shows that just using recursion didn’t really improve the situation compared to an iterative algorithm. As a matter of fact, there are cases where recursion is the right choice, usually because either the very nature of the problem or its definition is recursive. Usually it’s more a matter of clarity, of writing clean code, than it is of performance. In a couple of sections, however, we’ll see how <i class="calibre17">tail recursion</i><a id="marker-1005182"></a> combines both (at least in modern programming languages).</p>

  <p class="body"><a id="pgfId-1001205"></a>But for now, let’s take a look at an elegant solution for the preorder traversal of a binary tree, shown in listing E.3.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1008958"></a>Listing E.3 Binary tree preorder traversal</p>
  <pre class="programlisting"><b class="calibre21">function</b> preorder(node) {                                  
  <b class="calibre21">if</b> (node === <b class="calibre21">undefined</b> || node === null) {               
    console.log("leaf");
  } <b class="calibre21">else</b>  {
    console.log(node.value);
    preorder(node.left);        <span class="fm-combinumeral">❶</span>
    preorder(node.right);       <span class="fm-combinumeral">❷</span>
  }
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1012258"></a><span class="fm-combinumeral">❶</span> Recursive traversal of the left child</p>

  <p class="fm-code-annotation"><a id="pgfId-1012279"></a><span class="fm-combinumeral">❷</span> Recursive traversal of the right child</p>

  <div class="fm-sidebar-block">
    <p class="fm-sidebar-title"><a class="calibre14" id="pgfId-1013109"></a>Tree traversal</p>

    <p class="fm-sidebar-text"><a id="pgfId-1013110"></a>Preorder traversal is a way of enumerating the keys stored in a tree. It creates a list starting with the key stored in the root, and then it recursively traverses its children’s subtrees. When it gets to any node, it first adds the node’s key to the list, and then goes to the children (in case of a binary tree, it starts from the left child, and then, only when that subtree is entirely traversed, goes to the right one).</p>

    <p class="fm-sidebar-text"><a id="pgfId-1013111"></a>Other common traversals are inorder (the order is left subtree-&gt;node’s key-&gt;right subtree) and postorder (left subtree -&gt; right subtree -&gt; node’s key).</p>
  </div>

  <p class="body"><a id="pgfId-1001694"></a>Of course, you can perform any action on the nodes, in addition to printing them. And yes, you can do the same with loops, as shown in listing E.4.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009049"></a>Listing E.4 Binary tree preorder traversal, iterative version</p>
  <pre class="programlisting"><b class="calibre21">function</b> preorderIterative(node) {                                  
  <b class="calibre21">if</b> (node === <b class="calibre21">undefined</b> || node === null) {
    <b class="calibre21">return</b>;
  }
  <b class="calibre21">let</b>  nodeStack = [node];           <span class="fm-combinumeral">❶</span>
  <b class="calibre21">while</b>  (nodeStack.length &gt; 0) {
    node = nodeStack.pop();
    <b class="calibre21">if</b> (node === undefined) {
      console.log("leaf");
    } <b class="calibre21">else</b>  {
      console.log(node.value);
      nodeStack.push(node.right);   <span class="fm-combinumeral">❷</span>
      nodeStack.push(node.left);
    }
  }
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1012149"></a><span class="fm-combinumeral">❶</span> We have to use an explicit stack to simulate the behavior of recursive calls (see the next section).</p>

  <p class="fm-code-annotation"><a id="pgfId-1012170"></a><span class="fm-combinumeral">❷</span> Pushing a node on the stack is equivalent to a recursive call in iterative terms.</p>

  <p class="body"><a id="pgfId-1002076"></a>The two methods are equivalent, but look at how elegant the first one is. Try to write both versions for post-order binary tree traversal, and you’ll also realize that the iterative one is harder to get <a id="marker-1010472"></a>right.</p>

  <h2 class="fm-head" id="heading_id_6"><a id="pgfId-1002160"></a>E.2  Tail recursion</h2>

  <p class="body"><a id="pgfId-1002175"></a>Every <a id="marker-1005190"></a>time we make a function call, we create a new entry in the program stack, a so-called <i class="calibre17">stack frame</i><a id="marker-1005194"></a>. The stack frame consists of a few fields that are needed by our program or virtual machine to execute the called function, and then, when it’s done, resume the execution of the caller function.</p>

  <p class="body"><a id="pgfId-1002295"></a>A (non-exhaustive) list of these fields includes</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-1002316"></a>The <i class="calibre15">program counter</i><a class="calibre14" id="marker-1005198"></a> (a pointer to the next instruction in the caller function to run after the new function finishes)</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1002368"></a>All the arguments passed to the called function</p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1002395"></a>All the local variables</p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-1002414"></a>A placeholder for the return value of the called function</p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-1002444"></a>Recursive calls are no exception, with the caveat that the first call to a recursive function might not return before the base case is hit. This means the call chain can get extremely long.</p>

  <p class="body"><a id="pgfId-1002521"></a>Take, for example, the factorial function<a id="marker-1005202"></a>, shown in listing E.5.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009083"></a>Listing E.5 Factorial function, JavaScript</p>
  <pre class="programlisting"><b class="calibre21">function</b> factorial(n) {
  <b class="calibre21">if</b> (n &lt; 0) {
    <b class="calibre21">throw new</b>  Error(‘n can not be negative’);
  } <b class="calibre21">else</b>  if (n === 0) {
    <b class="calibre21">return</b> 1;                <span class="fm-combinumeral">❶</span>
  }
  <b class="calibre21">let</b>  f = factorial(n - 1);  <span class="fm-combinumeral">❷</span>
  <b class="calibre21">return</b> n * f;
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1012045"></a><span class="fm-combinumeral">❶</span> Base case</p>

  <p class="fm-code-annotation"><a id="pgfId-1012066"></a><span class="fm-combinumeral">❷</span> Recursive call to <code class="fm-code-in-text2">factorial</code><a id="marker-1012070"></a>. We are using an explicit variable to make a point (see below).</p>

  <p class="body"><a id="pgfId-1002730"></a>A call to factorial with a positive integer <code class="fm-code-in-text">n</code> will require the creation of <code class="fm-code-in-text">n</code> stack frames. In figure E.1 we sketched the stack frame for a call to <code class="fm-code-in-text">factorial(3)</code>, where you can see three new stack frames are created. Since the stack area in memory is fixed and limited (and small compared to the heap<a id="marker-1005210"></a>), this is a recipe for disaster. Try to call this method with a sufficiently large value, and you are going to cause a segmentation fault<a id="marker-1005214"></a>.</p>

  <p class="fm-figure"><img alt="" class="calibre23" src="../Images/appE_F5.png"/></p>

  <p class="fm-figure-caption"><a id="pgfId-1013142"></a>Figure E.1 Example of a stack frame for a call to <code class="fm-code-in-text">factorial(3)</code>. Take the first definition of factorial as a reference.</p>

  <p class="body"><a id="pgfId-1002967"></a>A <i class="calibre17">segmentation fault</i>,<a id="marker-1005218"></a> aka <i class="calibre17">access violation</i>,<a id="marker-1005222"></a> is a failure condition, raised by hardware with memory protection, notifying an operating system that some software has attempted to access a restricted area of memory that had not been assigned to the software.</p>

  <p class="body"><a id="pgfId-1003056"></a>Luckily for us, modern compilers have a way to optimize certain kinds of recursive calls. A <i class="calibre17">tail call</i> is a function call that is performed as the last operation of a function. A function is <i class="calibre17">tail-recursive</i><a id="marker-1005226"></a> if its recursive call(s) are in <i class="calibre17">tail position</i>. For more details about tail calls and recursion, see this excellent post on the 2ality blog.<a href="#pgfId-1005299"><sup class="footnotenumber">2</sup></a></p>

  <p class="body"><a id="pgfId-1003189"></a>Most compilers optimize tail calls, by shortcutting the stack frame creation. With tail recursion, compilers can go even further, by rewriting the chain calls as a loop.</p>

  <p class="body"><a id="pgfId-1003250"></a>As for our example, in the case of JavaScript, support for tail call optimization was introduced with <code class="fm-code-in-text">ES2015</code>.</p>

  <p class="body"><a id="pgfId-1003294"></a>To make sure the compiler can optimize the machine code generated for our factorial function, however, we need to slightly change it to make sure the recursive call is the last operation before returning.</p>

  <p class="body"><a id="pgfId-1003369"></a>For some functions, however, this is particularly tricky. For instance, consider the factorial function: listing E.6 refactors it in such a way that it looks tail-recursive, but it’s actually not! The last operation performed, in fact, is multiplying <code class="fm-code-in-text">n</code> by the result of the recursive call. No tail-call optimization can be applied in this case.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009122"></a>Listing E.6 Factorial function, refactored</p>
  <pre class="programlisting"><b class="calibre21">function</b> factorial(n) {
  <b class="calibre21">if</b> (n &lt; 0) {
    <b class="calibre21">throw new</b>  Error(‘n can not be negative’);
  } <b class="calibre21">else</b>  if (n === 0) {
    <b class="calibre21">return</b> 1;                     <span class="fm-combinumeral">❶</span>
  }
  
  <b class="calibre21">return</b> n * factorial(n-1);      <span class="fm-combinumeral">❷</span>
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1011941"></a><span class="fm-combinumeral">❶</span> Base case</p>

  <p class="fm-code-annotation"><a id="pgfId-1011962"></a><span class="fm-combinumeral">❷</span> The recursive call is not the last instruction in this function; the multiplication is.</p>

  <p class="body"><a id="pgfId-1003707"></a>It seems like a dead end, but we shouldn’t despair yet; <i class="calibre17">everything is not lost</i>. Listing E.7 shows how we can rewrite even a factorial as a tail-recursive method by adding an extra argument, an accumulator that keeps track of the multiplications already performed, allowing us to perform those operations before the final recursive call.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009153"></a>Listing E.7 Factorial function, tail-recursive</p>
  <pre class="programlisting"><b class="calibre21">function</b> factorial(n, acc=1) {                <span class="fm-combinumeral">❶</span>
  <b class="calibre21">if</b> (n &lt; 0) {
    <b class="calibre21">throw new</b>  Error(‘n can not be negative’);
  } <b class="calibre21">else</b>  if (n === 0) {
    <b class="calibre21">return</b> acc;                               <span class="fm-combinumeral">❷</span>
  }
  
  <b class="calibre21">return</b> factorial(n - 1, n * acc);           <span class="fm-combinumeral">❸</span>
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1011753"></a><span class="fm-combinumeral">❶</span> The method now takes two arguments, the usual <code class="fm-code-in-text2">n</code>, and an accumulator whose default value is <code class="fm-code-in-text2">1</code> (so that calling <code class="fm-code-in-text2">factorial(n)</code> is equivalent to <code class="fm-code-in-text2">factorial(n,1)</code>).</p>

  <p class="fm-code-annotation"><a id="pgfId-1011777"></a><span class="fm-combinumeral">❷</span> Base case: we return the accumulator with the total product from previous calls.</p>

  <p class="fm-code-annotation"><a id="pgfId-1011794"></a><span class="fm-combinumeral">❸</span> Now, finally, the recursive call is the last instruction in this function, as the multiplication is performed when the arguments are evaluated, before the recursive call.</p>

  <p class="body"><a id="pgfId-1004160"></a>What the compiler will do to optimize the tail call is simply translate it into a loop. In fact, tail recursion can always be easily written as a simple loop. For example, see listing E.8, where we use a <code class="fm-code-in-text">while</code> loop to compute <a id="marker-1005230"></a>factorial.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009187"></a>Listing E.8 Factorial function, iterative version</p>
  <pre class="programlisting"><b class="calibre21">function</b> factorial(n) {
  <b class="calibre21">let</b>  acc = 1;          <span class="fm-combinumeral">❶</span>
  <b class="calibre21">if</b> (n &lt; 0) {
    <b class="calibre21">throw new</b>  Error(‘n can not be negative’);
  }
 
  <b class="calibre21">while</b>  (n &gt; 1) {       <span class="fm-combinumeral">❷</span>
    acc *= n--;
  }
  <b class="calibre21">return</b> acc;
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1011636"></a><span class="fm-combinumeral">❶</span> Initializes the accumulator (base case)</p>

  <p class="fm-code-annotation"><a id="pgfId-1011664"></a><span class="fm-combinumeral">❷</span> Simulates tail recursion with a loop</p>

  <h2 class="fm-head" id="heading_id_7"><a id="pgfId-1004491"></a>E.3  Mutual recursion</h2>

  <p class="body"><a id="pgfId-1004506"></a>A <a id="marker-1005234"></a><a id="marker-1005238"></a>function can call itself directly, but also through another function. If two or more functions call themselves in a cycle, then they are mutual recursive.</p>

  <p class="body"><a id="pgfId-1004568"></a>Mutual tail recursion can also be optimized in the same way as tail-call optimization does, but most compilers will only optimize simple tail recursion.</p>

  <p class="body"><a id="pgfId-1004624"></a>Listing E.9 gives an idea of how mutual recursion works.</p>

  <p class="fm-code-listing-caption"><a id="pgfId-1009220"></a>Listing E.9 An example of mutual recursive functions</p>
  <pre class="programlisting"><b class="calibre21">function</b> f(n) {
  <b class="calibre21">return</b> n + g(n-1);      <span class="fm-combinumeral">❶</span>
}
 
<b class="calibre21">function</b> g(n) {
  <b class="calibre21">if</b> (n &lt; 0) {
    <b class="calibre21">return</b> 1;
  } <b class="calibre21">else</b>  if (n === 0) {
    <b class="calibre21">return</b> 2;
  } <b class="calibre21">else</b>  {
    <b class="calibre21">return</b> n * f(n/3);    <span class="fm-combinumeral">❷</span>
  }
}</pre>

  <p class="fm-code-annotation"><a id="pgfId-1011028"></a><span class="fm-combinumeral">❶</span> Function <code class="fm-code-in-text2">f</code> calls <code class="fm-code-in-text2">g</code>.</p>

  <p class="fm-code-annotation"><a id="pgfId-1011029"></a><span class="fm-combinumeral">❷</span> And function <code class="fm-code-in-text2">g</code> calls <code class="fm-code-in-text2">f</code> back.</p>

  <p class="body"><a id="pgfId-1004870"></a>We define a couple of methods, <code class="fm-code-in-text">f</code><a id="marker-1005242"></a> and <code class="fm-code-in-text">g</code><a id="marker-1005246"></a>, where function <code class="fm-code-in-text">f</code> never calls itself directly, and likewise in <code class="fm-code-in-text">g</code> there is no direct recursive call to itself.</p>

  <p class="body"><a id="pgfId-1004936"></a>However, check out the call stack for <code class="fm-code-in-text">f(7)</code>:</p>

  <ul class="calibre19">
    <li class="fm-list-bullet">
      <p class="list"><a class="calibre14" id="pgfId-1004963"></a><code class="fm-code-in-text">f(7)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1004976"></a><code class="fm-code-in-text">g(6)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1004991"></a><code class="fm-code-in-text">f(2)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1005006"></a><code class="fm-code-in-text">g(1)</code></p>
    </li>

    <li class="fm-list-numbered1">
      <p class="list"><a class="calibre14" id="pgfId-1005021"></a><code class="fm-code-in-text">f(0.3333)</code></p>
    </li>

    <li class="fm-list-numbered-last">
      <p class="list"><a class="calibre14" id="pgfId-1005035"></a><code class="fm-code-in-text">g(-0.6666)</code></p>
    </li>
  </ul>

  <p class="body"><a id="pgfId-1005049"></a>A single call to <code class="fm-code-in-text">f</code> generates a chain of calls where the two functions alternate. Needless to say, mutual recursion is even trickier to track <a id="marker-1005266"></a><a id="marker-1005270"></a>and <a id="marker-1005274"></a>optimize</p>
  <hr class="calibre22"/>

  <p class="fm-footnote"><sup class="footnotenumber">1.</sup> <a id="pgfId-1005279"></a>NaN is a special value in JavaScript, standing for <i class="calibre17">not a number</i>, and returned when there are issues parsing numbers or operating on numbers.</p>

  <p class="fm-footnote"><sup class="footnotenumber">2.</sup> <a id="pgfId-1005299"></a>See <span class="fm-hyperlink"><a href="http://mng.bz/2ejm">http://mng.bz/2ejm</a></span>.</p>
</body>
</html>
