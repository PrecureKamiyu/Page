<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>5.8 Loop Unrolling</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000004C94" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000433DE" data-uri="chapter05.xhtml#P70004970270000000000000000433DE" epub:type="title"><span class="pcalibre label pcalibre1">5.8 </span>Loop Unrolling</h1></header>
<p id="P70004970270000000000000000433DF" data-uri="chapter05.xhtml#P70004970270000000000000000433DF" class="pcalibre1 pcalibre calibre2">Loop unrolling is a program transformation that reduces the number of iterations for a loop by increasing the number of elements computed on each iteration. We saw an example of this with the function <code id="P70004970270000000000000000433E0" data-uri="chapter05.xhtml#P70004970270000000000000000433E0" class="pcalibre1 calibre8 pcalibre">psum2</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004949"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.1</span></a>), where each iteration computes two elements of the prefix sum, thereby halving the total number of iterations required. Loop unrolling can improve performance in two ways. First, it reduces the number of operations that do not contribute directly to the program result, such as loop indexing and conditional branching. Second, it exposes ways in which we can further transform the code to reduce the number of operations in the critical paths of the overall computation. In this section, we will examine simple loop unrolling, without any further transformations.</p>
<p id="P70004970270000000000000000433E1" data-uri="chapter05.xhtml#P70004970270000000000000000433E1" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004C9D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.16</span></a> shows a version of our combining code using what we will refer to as "2 × 1 loop unrolling." The first loop steps through the array two elements at a time. That is, the loop index <code id="P70004970270000000000000000433E2" data-uri="chapter05.xhtml#P70004970270000000000000000433E2" class="pcalibre1 calibre8 pcalibre">i</code> is incremented by 2 on each iteration, and the combining operation is applied to array elements <var class="calibre5 pcalibre pcalibre1">i</var> and <var class="calibre5 pcalibre pcalibre1">i</var> + 1 in a single iteration.</p>
<p id="P70004970270000000000000000433E3" data-uri="chapter05.xhtml#P70004970270000000000000000433E3" class="pcalibre1 pcalibre calibre2">In general, the vector length will not be a multiple of 2. We want our code to work correctly for arbitrary vector lengths. We account for this requirement in two ways. First, we make sure the first loop does not overrun the array bounds. For a vector of length <var class="calibre5 pcalibre pcalibre1">n</var>, we set the loop limit to be <var class="calibre5 pcalibre pcalibre1">n</var> − 1. We are then assured that the loop will only be executed when the loop index <var class="calibre5 pcalibre pcalibre1">i</var> satisfies <var class="calibre5 pcalibre pcalibre1">i</var> &lt; <var class="calibre5 pcalibre pcalibre1">n</var> − 1, and hence the maximum array index <var class="calibre5 pcalibre pcalibre1">i</var> + 1 will satisfy <var class="calibre5 pcalibre pcalibre1">i</var> + 1 &lt; (<var class="calibre5 pcalibre pcalibre1">n</var> − 1) + 1 = <var class="calibre5 pcalibre pcalibre1">n</var>.</p>
<p id="P70004970270000000000000000433E4" data-uri="chapter05.xhtml#P70004970270000000000000000433E4" class="pcalibre1 pcalibre calibre2">We can generalize this idea to unroll a loop by any factor <var class="calibre5 pcalibre pcalibre1">k</var>, yielding <var class="calibre5 pcalibre pcalibre1">k</var> × 1 <i class="calibre5 pcalibre pcalibre1">loop unrolling.</i> To do so, we set the upper limit to be <var class="calibre5 pcalibre pcalibre1">n</var> − <var class="calibre5 pcalibre pcalibre1">k</var> + 1 and within the loop apply the combining operation to elements <var class="calibre5 pcalibre pcalibre1">i</var> through <var class="calibre5 pcalibre pcalibre1">i</var> + <var class="calibre5 pcalibre pcalibre1">k</var> − 1. Loop index <code id="P70004970270000000000000000433E5" data-uri="chapter05.xhtml#P70004970270000000000000000433E5" class="pcalibre1 calibre8 pcalibre">i</code> is incremented by <var class="calibre5 pcalibre pcalibre1">k</var> in each iteration. The maximum array index <var class="calibre5 pcalibre pcalibre1">i</var> + <var class="calibre5 pcalibre pcalibre1">k</var> − 1 will then be less than <var class="calibre5 pcalibre pcalibre1">n</var>. We include the second loop to step through the final few elements of the vector one at a time. The body of this loop will be executed between 0 and <var class="calibre5 pcalibre pcalibre1">k</var> − 1 times. For <var class="calibre5 pcalibre pcalibre1">k</var> = 2, we could use a simple conditional statement</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004C9D" data-uri="chapter05.xhtml#P7000497027000000000000000004C9D">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004C9E" title="532" data-uri="chapter05.xhtml#P7000497027000000000000000004C9E" epub:type="pagebreak"></span>
<pre id="P70004970270000000000000000433E6" data-uri="chapter05.xhtml#P70004970270000000000000000433E6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000433E7" data-uri="chapter05.xhtml#P70004970270000000000000000433E7" class="calibre10 pcalibre pcalibre1">
1	/* 2 x 1 loop unrolling */
2	void combine5(vec_ptr v, data_t *dest)
3	{
4		long i;
5		long length = vec_length(v);
6		long limit = length-1;
7		data_t *data = get_vec_start(v);
8		data_t acc = IDENT; 9
10		/* Combine 2 elements at a time */
11		for (i = 0; i &lt; limit; i+=2) {
12			<code id="P70004970270000000000000000433E8" data-uri="chapter05.xhtml#P70004970270000000000000000433E8" class="pcalibre1 calibre8 pcalibre">acc</code> = (acc OP data[i]) OP data[i+1];
13		}
14	
15		/* Finish any remaining elements */
16		for (;i &lt; length; i++) {
17			acc = acc OP data[i];
18		}
19		*dest = acc;
20	}
</code></pre>
<figcaption id="P70004970270000000000000000433E9" data-uri="chapter05.xhtml#P70004970270000000000000000433E9" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000433EA" data-uri="chapter05.xhtml#P70004970270000000000000000433EA" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.16 </span>Applying 2 × 1 loop unrolling.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000433EB" data-uri="chapter05.xhtml#P70004970270000000000000000433EB"><p id="P70004970270000000000000000433EC" data-uri="chapter05.xhtml#P70004970270000000000000000433EC" class="pcalibre calibre3 pcalibre1">This transformation can reduce the effect of loop overhead.</p></div></figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000433ED" data-uri="chapter05.xhtml#P70004970270000000000000000433ED">to optionally add a final iteration, as we did with the function <code id="P70004970270000000000000000433EE" data-uri="chapter05.xhtml#P70004970270000000000000000433EE" class="pcalibre1 calibre8 pcalibre">psum2</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004949"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.1</span></a>). For <var class="calibre5 pcalibre pcalibre1">k</var> &gt; 2, the finishing cases are better expressed with a loop, and so we adopt this programming convention for <var class="calibre5 pcalibre pcalibre1">k</var> = 2 as well. We refer to this transformation as "<var class="calibre5 pcalibre pcalibre1">k</var> × 1 loop unrolling," since we unroll by a factor of <var class="calibre5 pcalibre pcalibre1">k</var> but accumulate values in a single variable <code id="P70004970270000000000000000433EF" data-uri="chapter05.xhtml#P70004970270000000000000000433EF" class="pcalibre1 calibre8 pcalibre">acc</code>.</p>
<section id="P7000497027000000000000000004CA9" data-uri="chapter05.xhtml#P7000497027000000000000000004CA9" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000433F0" data-uri="chapter05.xhtml#P70004970270000000000000000433F0" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">5.7 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000050E4.xhtml#P7000497027000000000000000005127">575</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000433F1" data-uri="chapter05.xhtml#P70004970270000000000000000433F1">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000433F2" data-uri="chapter05.xhtml#P70004970270000000000000000433F2">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000433F3" data-uri="chapter05.xhtml#P70004970270000000000000000433F3"><p id="P70004970270000000000000000433F4" data-uri="chapter05.xhtml#P70004970270000000000000000433F4" class="pcalibre calibre3 pcalibre1">Modify the code for <code id="P70004970270000000000000000433F5" data-uri="chapter05.xhtml#P70004970270000000000000000433F5" class="pcalibre1 calibre8 pcalibre">combine5</code> to unroll the loop by a factor <var class="calibre5 pcalibre pcalibre1">k</var> = 5.</p></div></li>
</ol>
</section>
<p id="P70004970270000000000000000433F6" data-uri="chapter05.xhtml#P70004970270000000000000000433F6" class="pcalibre1 pcalibre calibre2">When we measure the performance of unrolled code for unrolling factors <var class="calibre5 pcalibre pcalibre1">k</var> = 2 (<code id="P70004970270000000000000000433F7" data-uri="chapter05.xhtml#P70004970270000000000000000433F7" class="pcalibre1 calibre8 pcalibre">combine5</code>) and <var class="calibre5 pcalibre pcalibre1">k</var> = 3, we get the following results:</p>
<table id="P70004970270000000000000000433F8" data-uri="chapter05.xhtml#P70004970270000000000000000433F8" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000433F9" data-uri="chapter05.xhtml#P70004970270000000000000000433F9" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000433FA" data-uri="chapter05.xhtml#P70004970270000000000000000433FA" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000433FB" data-uri="chapter05.xhtml#P70004970270000000000000000433FB" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P70004970270000000000000000433FC" data-uri="chapter05.xhtml#P70004970270000000000000000433FC" class="calibre18 pcalibre pcalibre1">Integer</th>
<th colspan="2" id="P70004970270000000000000000433FD" data-uri="chapter05.xhtml#P70004970270000000000000000433FD" class="calibre18 pcalibre pcalibre1">Floating point</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000433FE" data-uri="chapter05.xhtml#P70004970270000000000000000433FE" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P70004970270000000000000000433FF" data-uri="chapter05.xhtml#P70004970270000000000000000433FF" class="calibre18 pcalibre pcalibre1">Page</th>
<th id="P7000497027000000000000000043400" data-uri="chapter05.xhtml#P7000497027000000000000000043400" class="calibre18 pcalibre pcalibre1">Method</th>
<th id="P7000497027000000000000000043401" data-uri="chapter05.xhtml#P7000497027000000000000000043401" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043402" data-uri="chapter05.xhtml#P7000497027000000000000000043402" class="calibre18 pcalibre pcalibre1">*</th>
<th id="P7000497027000000000000000043403" data-uri="chapter05.xhtml#P7000497027000000000000000043403" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043404" data-uri="chapter05.xhtml#P7000497027000000000000000043404" class="calibre18 pcalibre pcalibre1">*</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043405" data-uri="chapter05.xhtml#P7000497027000000000000000043405" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043406" data-uri="chapter05.xhtml#P7000497027000000000000000043406" class="calibre10 pcalibre pcalibre1">combine4</code></td>
<td id="P7000497027000000000000000043407" data-uri="chapter05.xhtml#P7000497027000000000000000043407" class="calibre20 pcalibre pcalibre1">515</td>
<td id="P7000497027000000000000000043408" data-uri="chapter05.xhtml#P7000497027000000000000000043408" class="calibre20 pcalibre pcalibre1">No unrolling</td>
<td id="P7000497027000000000000000043409" data-uri="chapter05.xhtml#P7000497027000000000000000043409" class="calibre20 pcalibre pcalibre1">1.27</td>
<td id="P700049702700000000000000004340A" data-uri="chapter05.xhtml#P700049702700000000000000004340A" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P700049702700000000000000004340B" data-uri="chapter05.xhtml#P700049702700000000000000004340B" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P700049702700000000000000004340C" data-uri="chapter05.xhtml#P700049702700000000000000004340C" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004340D" data-uri="chapter05.xhtml#P700049702700000000000000004340D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004340E" data-uri="chapter05.xhtml#P700049702700000000000000004340E" class="calibre10 pcalibre pcalibre1">combine5</code></td>
<td id="P700049702700000000000000004340F" data-uri="chapter05.xhtml#P700049702700000000000000004340F" class="calibre20 pcalibre pcalibre1">532</td>
<td id="P7000497027000000000000000043410" data-uri="chapter05.xhtml#P7000497027000000000000000043410" class="calibre20 pcalibre pcalibre1">2 × 1 unrolling</td>
<td id="P7000497027000000000000000043411" data-uri="chapter05.xhtml#P7000497027000000000000000043411" class="calibre20 pcalibre pcalibre1">1.01</td>
<td id="P7000497027000000000000000043412" data-uri="chapter05.xhtml#P7000497027000000000000000043412" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043413" data-uri="chapter05.xhtml#P7000497027000000000000000043413" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043414" data-uri="chapter05.xhtml#P7000497027000000000000000043414" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000043415" data-uri="chapter05.xhtml#P7000497027000000000000000043415" class="calibre20 pcalibre pcalibre1">3 × 1 unrolling</td>
<td id="P7000497027000000000000000043416" data-uri="chapter05.xhtml#P7000497027000000000000000043416" class="calibre20 pcalibre pcalibre1">1.01</td>
<td id="P7000497027000000000000000043417" data-uri="chapter05.xhtml#P7000497027000000000000000043417" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043418" data-uri="chapter05.xhtml#P7000497027000000000000000043418" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043419" data-uri="chapter05.xhtml#P7000497027000000000000000043419" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td colspan="2" id="P700049702700000000000000004341A" data-uri="chapter05.xhtml#P700049702700000000000000004341A" class="calibre20 pcalibre pcalibre1">Latency bound</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004341B" data-uri="chapter05.xhtml#P700049702700000000000000004341B" class="calibre20 pcalibre pcalibre1">1.00</td>
<td id="P700049702700000000000000004341C" data-uri="chapter05.xhtml#P700049702700000000000000004341C" class="calibre20 pcalibre pcalibre1">3.00</td>
<td id="P700049702700000000000000004341D" data-uri="chapter05.xhtml#P700049702700000000000000004341D" class="calibre20 pcalibre pcalibre1">3.00</td>
<td id="P700049702700000000000000004341E" data-uri="chapter05.xhtml#P700049702700000000000000004341E" class="calibre20 pcalibre pcalibre1">5.00</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td colspan="2" id="P700049702700000000000000004341F" data-uri="chapter05.xhtml#P700049702700000000000000004341F" class="calibre20 pcalibre pcalibre1">Throughput bound</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000043420" data-uri="chapter05.xhtml#P7000497027000000000000000043420" class="calibre20 pcalibre pcalibre1">0.50</td>
<td id="P7000497027000000000000000043421" data-uri="chapter05.xhtml#P7000497027000000000000000043421" class="calibre20 pcalibre pcalibre1">1.00</td>
<td id="P7000497027000000000000000043422" data-uri="chapter05.xhtml#P7000497027000000000000000043422" class="calibre20 pcalibre pcalibre1">1.00</td>
<td id="P7000497027000000000000000043423" data-uri="chapter05.xhtml#P7000497027000000000000000043423" class="calibre20 pcalibre pcalibre1">0.50</td>
</tr>
</tbody>
</table>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004CDE" data-uri="chapter05.xhtml#P7000497027000000000000000004CDE">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004CDF" title="533" data-uri="chapter05.xhtml#P7000497027000000000000000004CDF" epub:type="pagebreak"></span>
<img alt="A graph depicts CPE versus unrolling factor k." id="P7000497027000000000000000043424" data-uri="P700049702700000000000000000B716" src="../images/p533-1.png" class="calibre175 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000043425" data-uri="chapter05.xhtml#P7000497027000000000000000043425" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043426" data-uri="chapter05.xhtml#P7000497027000000000000000043426" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">5.17 </span>CPE performance for different degrees of <var class="calibre5 pcalibre pcalibre1">k</var> × 1 loop unrolling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000043427" data-uri="chapter05.xhtml#P7000497027000000000000000043427"><p id="P7000497027000000000000000043428" data-uri="chapter05.xhtml#P7000497027000000000000000043428" class="pcalibre calibre3 pcalibre1">Only integer addition improves with this transformation.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002370B" data-uri="chapter05.xhtml#P700049702700000000000000002370B">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000043429" data-uri="chapter05.xhtml#P7000497027000000000000000043429" class="pcalibre calibre3 pcalibre1">A graph of CPE versus unrolling factor k has four lines: double * horizontal at 5 CPE, double + and long * each horizontal at CPE 3, and long +  from around 1.5 CPE at 1 unrolling factor k and then horizontal at CPE 1 for unrolling factor k 2 and greater.</p>
</details>

</figcaption></figure>
<p id="P700049702700000000000000004342A" data-uri="chapter05.xhtml#P700049702700000000000000004342A" class="pcalibre1 pcalibre calibre2">We see that the CPE for integer addition improves, achieving the latency bound of 1.00. This result can be attributed to the benefits of reducing loop overhead operations. By reducing the number of overhead operations relative to the number of additions required to compute the vector sum, we can reach the point where the 1-cycle latency of integer addition becomes the performance-limiting factor. On the other hand, none of the other cases improve—they are already at their latency bounds. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004CDE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.17</span></a> shows CPE measurements when unrolling the loop by up to a factor of 10. We see that the trends we observed for unrolling by 2 and 3 continue—none go below their latency bounds.</p>
<p id="P700049702700000000000000004342B" data-uri="chapter05.xhtml#P700049702700000000000000004342B" class="pcalibre1 pcalibre calibre2">To understand why <var class="calibre5 pcalibre pcalibre1">k</var> × 1 unrolling cannot improve performance beyond the latency bound, let us examine the machine-level code for the inner loop of <code id="P700049702700000000000000004342C" data-uri="chapter05.xhtml#P700049702700000000000000004342C" class="pcalibre1 calibre8 pcalibre">combine5</code>, having <var class="calibre5 pcalibre pcalibre1">k</var> = 2. The following code gets generated when type <code id="P700049702700000000000000004342D" data-uri="chapter05.xhtml#P700049702700000000000000004342D" class="pcalibre1 calibre8 pcalibre">data_t</code> is double, and the operation is multiplication:</p>
<pre id="P700049702700000000000000004342E" data-uri="chapter05.xhtml#P700049702700000000000000004342E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004342F" data-uri="chapter05.xhtml#P700049702700000000000000004342F" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of combine5. data_t = double, OP = *</i>
	<i class="calibre5 pcalibre pcalibre1">i in %rdx, data %rax, limit in %rbx, acc in %xmm0</i>
1	.L35:					<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	  vmulsd (%rax,%rdx,8), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">Multiply acc by data[i]</i>
3	  vmulsd 8(%rax,%rdx,8), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">Multiply acc by data[i+1]</i>
4	  addq $2, %rdx				  <i class="calibre5 pcalibre pcalibre1">Increment i by 2</i>
5	  cmpq %rdx, %rbp			  <i class="calibre5 pcalibre pcalibre1">Compare to limit:i</i>
6	  jg .L35				  <i class="calibre5 pcalibre pcalibre1">If &gt;, goto</i> <b class="calibre4 pcalibre pcalibre1">loop</b>
</code></pre>
<p id="P7000497027000000000000000043430" data-uri="chapter05.xhtml#P7000497027000000000000000043430" class="pcalibre1 pcalibre calibre2">We can see that <span class="smallcaps pcalibre pcalibre1">gcc </span>uses a more direct translation of the array referencing seen in the C code, compared to the pointer-based code generated for <code id="P7000497027000000000000000043431" data-uri="chapter05.xhtml#P7000497027000000000000000043431" class="pcalibre1 calibre8 pcalibre">combine4</code>.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P700049702700000000000000000518A" epub:type="noteref" href="#P700049702700000000000000000518A">2</a> Loop index <code id="P7000497027000000000000000043432" data-uri="chapter05.xhtml#P7000497027000000000000000043432" class="pcalibre1 calibre8 pcalibre">i</code> is held in register <code id="P7000497027000000000000000043433" data-uri="chapter05.xhtml#P7000497027000000000000000043433" class="pcalibre1 calibre8 pcalibre">%rdx</code>, and the address of data is held in register <code id="P7000497027000000000000000043434" data-uri="chapter05.xhtml#P7000497027000000000000000043434" class="pcalibre1 calibre8 pcalibre">%rax</code>. As before, the accumulated value <code id="P7000497027000000000000000043435" data-uri="chapter05.xhtml#P7000497027000000000000000043435" class="pcalibre1 calibre8 pcalibre">acc</code> is held in vector register <code id="P7000497027000000000000000043436" data-uri="chapter05.xhtml#P7000497027000000000000000043436" class="pcalibre1 calibre8 pcalibre">%xmm0</code>. The loop unrolling leads to two <code id="P7000497027000000000000000043437" data-uri="chapter05.xhtml#P7000497027000000000000000043437" class="pcalibre1 calibre8 pcalibre">vmulsd</code> instructions—one to add <code id="P7000497027000000000000000043438" data-uri="chapter05.xhtml#P7000497027000000000000000043438" class="pcalibre1 calibre8 pcalibre">data[i]</code> to <code id="P7000497027000000000000000043439" data-uri="chapter05.xhtml#P7000497027000000000000000043439" class="pcalibre1 calibre8 pcalibre">acc</code>, and</p><aside class="footnote pcalibre5 pcalibre" id="P700049702700000000000000000518A" data-uri="chapter05.xhtml#P700049702700000000000000000518A" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P700049702700000000000000000518A" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">2. </a></span>The <span class="smallcaps pcalibre pcalibre1">gcc </span>optimizer operates by generating multiple variants of a function and then choosing one that it predicts will yield the best performance and smallest code size. As a consequence, small changes in the source code can yield widely varying forms of machine code. We have found that the choice of pointer-based or array-based code has no impact on the performance of programs running on our reference machine.</p></aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004CF5" data-uri="chapter05.xhtml#P7000497027000000000000000004CF5">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004CF6" title="534" data-uri="chapter05.xhtml#P7000497027000000000000000004CF6" epub:type="pagebreak"></span>
<img alt="A diagram depicts the graphical representation of inner-loop code for combine5." id="P700049702700000000000000004343A" data-uri="P700049702700000000000000000B717" src="../images/p534-1.png" class="calibre176 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000004343B" data-uri="chapter05.xhtml#P700049702700000000000000004343B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004343C" data-uri="chapter05.xhtml#P700049702700000000000000004343C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">5.18 </span>Graphical representation of inner-loop code for <code id="P700049702700000000000000004343D" data-uri="chapter05.xhtml#P700049702700000000000000004343D" class="pcalibre1 calibre8 pcalibre">combine5</code>.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004343E" data-uri="chapter05.xhtml#P700049702700000000000000004343E"><p id="P700049702700000000000000004343F" data-uri="chapter05.xhtml#P700049702700000000000000004343F" class="pcalibre calibre3 pcalibre1">Each iteration has two <code id="P7000497027000000000000000043440" data-uri="chapter05.xhtml#P7000497027000000000000000043440" class="pcalibre1 calibre8 pcalibre">vmulsd</code> instructions, each of which is translated into a load and a mul operation.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000023724" data-uri="chapter05.xhtml#P7000497027000000000000000023724">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000043441" data-uri="chapter05.xhtml#P7000497027000000000000000043441" class="pcalibre1 pcalibre calibre2">A diagram has two rows of boxes, each with %rax, %rbp, %rdx, and %rmm0, with output from top %rax and %rbp to bottom %rax and %rbp, respectively. A column of boxes includes the seven operations summarized below, from top to bottom:</p>
<ul id="P7000497027000000000000000043442" data-uri="chapter05.xhtml#P7000497027000000000000000043442" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000043443" data-uri="chapter05.xhtml#P7000497027000000000000000043443" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043444" data-uri="chapter05.xhtml#P7000497027000000000000000043444" class="pcalibre calibre3 pcalibre1">First load: receives input from top %rax and %rdx; sends output to mul below</p></li>
<li id="P7000497027000000000000000043445" data-uri="chapter05.xhtml#P7000497027000000000000000043445" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043446" data-uri="chapter05.xhtml#P7000497027000000000000000043446" class="pcalibre calibre3 pcalibre1">First mul: receives input from load, with the two together representing vmulsd (%rax, %rdx, 8), %rmm0, %rmm0; receives input from top %rmm0 and sends output to second mul below</p></li>
<li id="P7000497027000000000000000043447" data-uri="chapter05.xhtml#P7000497027000000000000000043447" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043448" data-uri="chapter05.xhtml#P7000497027000000000000000043448" class="pcalibre calibre3 pcalibre1">Second load: receives input from top %rax and %rdx; sends output to mul below</p></li>
<li id="P7000497027000000000000000043449" data-uri="chapter05.xhtml#P7000497027000000000000000043449" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004344A" data-uri="chapter05.xhtml#P700049702700000000000000004344A" class="pcalibre calibre3 pcalibre1">Second mul: receives input from second load, with the two together representing vmulsd 8(%rax, %rdx, 8), %rmm0, %rmm0; receives input from mul above and sends output to bottom %rmm0</p></li>
<li id="P700049702700000000000000004344B" data-uri="chapter05.xhtml#P700049702700000000000000004344B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004344C" data-uri="chapter05.xhtml#P700049702700000000000000004344C" class="pcalibre calibre3 pcalibre1">add (addq $2, %rdx): receives input from top %rdx and sends output to bottom %rdx</p></li>
<li id="P700049702700000000000000004344D" data-uri="chapter05.xhtml#P700049702700000000000000004344D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004344E" data-uri="chapter05.xhtml#P700049702700000000000000004344E" class="pcalibre calibre3 pcalibre1">cmp (cmpq %rdx, %rbp): receives input from add above and top %rbp; sends output to jg below</p></li>
<li id="P700049702700000000000000004344F" data-uri="chapter05.xhtml#P700049702700000000000000004344F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043450" data-uri="chapter05.xhtml#P7000497027000000000000000043450" class="pcalibre calibre3 pcalibre1">jg (jg loop): receives input from cmp above and top %rbp</p></li>
</ul>
</details>
</figcaption></figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004CFE" data-uri="chapter05.xhtml#P7000497027000000000000000004CFE">
<img alt="A diagram depicts two data-flow graphs for combine5." id="P7000497027000000000000000043451" data-uri="P700049702700000000000000000B718" src="../images/p534-2.png" class="calibre177 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000043452" data-uri="chapter05.xhtml#P7000497027000000000000000043452" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043453" data-uri="chapter05.xhtml#P7000497027000000000000000043453" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">5.19 </span>Abstracting <code id="P7000497027000000000000000043454" data-uri="chapter05.xhtml#P7000497027000000000000000043454" class="pcalibre1 calibre8 pcalibre">combine5</code> operations as a data-flow graph.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000043455" data-uri="chapter05.xhtml#P7000497027000000000000000043455"><p id="P7000497027000000000000000043456" data-uri="chapter05.xhtml#P7000497027000000000000000043456" class="pcalibre calibre3 pcalibre1">We rearrange, simplify, and abstract the representation of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004CF5"><span class="pcalibre label pcalibre1">Figure </span><span class="number pcalibre pcalibre1">5.18</span></a> to show the data dependencies between successive iterations (a). We see that each iteration must perform two multiplications in sequence (b).</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002373B" data-uri="chapter05.xhtml#P700049702700000000000000002373B">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<ol class="pcalibre1 pcalibre ol_lower-alpha1" id="P7000497027000000000000000043457" data-uri="chapter05.xhtml#P7000497027000000000000000043457">
<li id="P7000497027000000000000000043458" data-uri="chapter05.xhtml#P7000497027000000000000000043458" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043459" data-uri="chapter05.xhtml#P7000497027000000000000000043459" class="pcalibre calibre3 pcalibre1">Data flows from top %rmm0 to first mul then second mul to bottom %rmm0; from top %rax to each load, each to each mul then %rmm0; from top %rbp to cmp to jg; from top %rdx to each load and add, from which data is sent to bottom %rdx and to cmp.</p></li>
<li id="P700049702700000000000000004345A" data-uri="chapter05.xhtml#P700049702700000000000000004345A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004345B" data-uri="chapter05.xhtml#P700049702700000000000000004345B" class="pcalibre calibre3 pcalibre1">Data flows from top %rmm0 and %rdx to those below, with the first load and mul within data [i] and bottom load and mul, as well as add, within data [i+1].</p></li>
</ol>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004345C" data-uri="chapter05.xhtml#P700049702700000000000000004345C">the second to add <code id="P700049702700000000000000004345D" data-uri="chapter05.xhtml#P700049702700000000000000004345D" class="pcalibre1 calibre8 pcalibre">data[i+1]</code> to <code id="P700049702700000000000000004345E" data-uri="chapter05.xhtml#P700049702700000000000000004345E" class="pcalibre1 calibre8 pcalibre">acc</code>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004CF5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.18</span></a> shows a graphical representation of this code. The <code id="P700049702700000000000000004345F" data-uri="chapter05.xhtml#P700049702700000000000000004345F" class="pcalibre1 calibre8 pcalibre">vmulsd</code> instructions each get translated into two operations: one to load an array element from memory and one to multiply this value by the accumulated value. We see here that register <code id="P7000497027000000000000000043460" data-uri="chapter05.xhtml#P7000497027000000000000000043460" class="pcalibre1 calibre8 pcalibre">%xmm0</code> gets read and written twice in each execution of the loop. We can rearrange, simplify, and abstract this graph, following the process shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004CFE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.19(a)</span></a>, to obtain the template shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004CFE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.19(b)</span></a>. We then replicate this template <var class="calibre5 pcalibre pcalibre1">n</var>/2 times to show the computation for a vector of length <var class="calibre5 pcalibre pcalibre1">n</var>, obtaining the data-flow representation</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004D0A" data-uri="chapter05.xhtml#P7000497027000000000000000004D0A">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004D0B" title="535" data-uri="chapter05.xhtml#P7000497027000000000000000004D0B" epub:type="pagebreak"></span>
<img alt="A diagram shows a critical path extending through mul operations in three groups: data[0] and data[1], data[2] and data[3], ad data[n minus 2] and data[n minus 1]." id="P7000497027000000000000000043461" data-uri="P700049702700000000000000000B719" src="../images/p535-1.png" class="pcalibre1 pcalibre calibre178"/>
<figcaption id="P7000497027000000000000000043462" data-uri="chapter05.xhtml#P7000497027000000000000000043462" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043463" data-uri="chapter05.xhtml#P7000497027000000000000000043463" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">5.20 </span>Data-flow representation of <code id="P7000497027000000000000000043464" data-uri="chapter05.xhtml#P7000497027000000000000000043464" class="pcalibre1 calibre8 pcalibre">combine5</code> operating on a vector of length <var class="calibre5 pcalibre pcalibre1">n</var>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000043465" data-uri="chapter05.xhtml#P7000497027000000000000000043465"><p id="P7000497027000000000000000043466" data-uri="chapter05.xhtml#P7000497027000000000000000043466" class="pcalibre calibre3 pcalibre1">Even though the loop has been unrolled by a factor of 2, there are still <var class="calibre5 pcalibre pcalibre1">n</var> mul operations along the critical path.</p></div></figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043467" data-uri="chapter05.xhtml#P7000497027000000000000000043467">shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004D0A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.20</span></a>. We see here that there is still a critical path of <var class="calibre5 pcalibre pcalibre1">n</var> mul operations in this graph—there are half as many iterations, but each iteration has two multiplication operations in sequence. Since the critical path was the limiting factor for the performance of the code without loop unrolling, it remains so with <var class="calibre5 pcalibre pcalibre1">k</var> × 1 loop unrolling.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000004D13" data-uri="chapter05.xhtml#P7000497027000000000000000004D13"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000043468" data-uri="chapter05.xhtml#P7000497027000000000000000043468" epub:type="title"><span class="pcalibre label1 pcalibre1">Aside </span>Getting the compiler to unroll loops</h1></header>
<p id="P7000497027000000000000000043469" data-uri="chapter05.xhtml#P7000497027000000000000000043469" class="pcalibre calibre3 pcalibre1">Loop unrolling can easily be performed by a compiler. Many compilers do this as part of their collection of optimizations. <span class="smallcaps pcalibre pcalibre1">gcc </span>will perform some forms of loop unrolling when invoked with optimization level 3 or higher.</p>
</aside>
</section></body></html>
