<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Scalable Counting</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part300.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part302.htm">下一个 &gt;</a></p><p class="s32" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Scalable Counting</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Amazingly, researchers have studied how to build more scalable coun- ters for years [MS04]. Even more amazing is the fact that scalable coun- ters matter, as recent work in operating system performance analysis has shown [B+10]; without scalable counting, some workloads running on</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:121.468pt" cellspacing="0"><tr style="height:9pt"><td style="width:28pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">Time</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s138" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">L<span class="s139">1</span></p></td><td style="width:21pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s138" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">L<span class="s139">2</span></p></td><td style="width:22pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s138" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">L<span class="s139">3</span></p></td><td style="width:30pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s138" style="padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">L<span class="s139">4</span></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s140" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">G</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">0</p></td><td style="width:30pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:30pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">1</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">2</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">2</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">3</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">2</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">3</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">4</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">3</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">3</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">2</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 6pt;text-align: right;">5</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 6pt;text-align: center;">4</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 6pt;text-align: center;">1</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 6pt;text-align: center;">3</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 6pt;text-align: center;">3</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">0</p></td></tr><tr style="height:8pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: right;">6</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 7pt;text-align: center;">5 <span class="s141">→ </span>0</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">1</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">3</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: center;">4</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s142" style="padding-left: 5pt;text-indent: 0pt;line-height: 7pt;text-align: left;">5 (from <span class="s138">L</span><span class="s139">1</span>)</p></td></tr><tr style="height:9pt"><td style="width:28pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">7</p></td><td style="width:30pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s70" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p></td><td style="width:21pt"><p class="s70" style="text-indent: 0pt;line-height: 8pt;text-align: center;">2</p></td><td style="width:22pt"><p class="s70" style="text-indent: 0pt;line-height: 8pt;text-align: center;">4</p></td><td style="width:30pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s70" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">5 <span class="s141">→ </span>0</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s142" style="padding-left: 5pt;text-indent: 0pt;line-height: 8pt;text-align: left;">10 (from <span class="s138">L</span><span class="s139">4 </span>)</p></td></tr></table><p style="padding-top: 5pt;padding-left: 132pt;text-indent: 0pt;text-align: justify;">Table 29.1: <b>Tracing the Sloppy Counters</b></p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Linux suffer from serious scalability problems on multicore machines.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Though many techniques have been developed to attack this problem, we’ll now describe one particular approach. The idea, introduced in re- cent research [B+10], is known as a <b>sloppy counter</b>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The sloppy counter works by representing a single logical counter via numerous <i>local </i>physical counters, one per CPU core, as well as a single <i>global </i>counter. Specifically, on a machine with four CPUs, there are four local counters and one global one. In addition to these counters, there are also locks: one for each local counter, and one for the global counter.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The basic idea of sloppy counting is as follows. When a thread running on a given core wishes to increment the counter, it increments its local counter; access to this local counter is synchronized via the corresponding local lock. Because each CPU has its own local counter, threads across CPUs can update local counters without contention, and thus counter updates are scalable.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">However, to keep the global counter up to date (in case a thread wishes to read its value), the local values are periodically transferred to the global counter, by acquiring the global lock and incrementing it by the local counter’s value; the local counter is then reset to zero.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: left;">How often this local-to-global transfer occurs is determined by a thresh- old, which we call <span class="s43">S </span>here (for sloppiness). The smaller <span class="s43">S </span>is, the more the counter behaves like the non-scalable counter above; the bigger <span class="s43">S </span>is, the more scalable the counter, but the further off the global value might be from the actual count. One could simply acquire all the local locks and the global lock (in a specified order, to avoid deadlock) to get an exact value, but that is not scalable.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To make this clear, let’s look at an example (Table <span style=" color: #00AEEF;">29.1</span>). In this exam- ple, the threshold <span class="s43">S </span>is set to <span class="s44">5</span>, and there are threads on each of four CPUs <span class="s61">updating their local counters </span><span class="s57">L</span><span class="s62">1 </span><span class="s61">... </span><span class="s57">L</span><span class="s62">4 </span><span class="s61">. The global counter value (</span><span class="s57">G</span><span class="s61">) is </span>also shown in the trace, with time increasing downward. At each time step, a local counter may be incremented; if the local value reaches the threshold <span class="s43">S</span>, the local value is transferred to the global counter and the local counter is reset.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The lower line in Figure <span style=" color: #00AEEF;">29.3 </span>(labeled <i>sloppy</i>) shows the performance of sloppy counters with a threshold <span class="s43">S </span>of <span class="s44">1024</span>. Performance is excellent; the time taken to update the counter four million times on four processors is hardly higher than the time taken to update it one million times on one processor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;text-align: left;"><span class="s37">1  </span>typedef struct <span class="s75">&nbsp;</span>counter_t {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2     <span class="s38">int     global;     // global count</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3     <span class="s38">pthread_mutex_t glock;     // global lock</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4     <span class="s38">int     local[NUMCPUS];  // local count (per cpu)</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5     <span class="s38">pthread_mutex_t llock[NUMCPUS];  // ... and locks</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6     <span class="s38">int     threshold;    // update frequency</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7  <span class="s38">} counter_t;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">8</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">9  <span class="s38">// init: record threshold, init locks, init values</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10  <span class="s38">//   of all local counts and global count</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">11  </span>void init(counter_t <span class="s39">*</span>c, int threshold) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">12    <span class="s38">c-&gt;threshold = threshold;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">13</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">14    <span class="s38">c-&gt;global = 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15    <span class="s38">pthread_mutex_init(&amp;c-&gt;glock, NULL);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">16</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">17    <span class="s38">int i;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">18     <span class="s38">for (i = 0; i &lt; NUMCPUS; i++) {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19       <span class="s38">c-&gt;local[i] = 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20       <span class="s38">pthread_mutex_init(&amp;c-&gt;llock[i], NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">21    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">22  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">23</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">24  <span class="s38">// update: usually, just grab local lock and update local amount</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">25  <span class="s38">//    once local count has risen by ’threshold’, grab global</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">26  <span class="s38">//    lock and transfer local values to it</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">27  </span>void update(counter_t <span class="s39">*</span>c, int threadID, int amt) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">28    <span class="s38">pthread_mutex_lock(&amp;c-&gt;llock[threadID]);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">29     <span class="s38">c-&gt;local[threadID] += amt;       // assumes amt &gt; 0</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">30     <span class="s38">if (c-&gt;local[threadID] &gt;= c-&gt;threshold) { // transfer to global</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">31       <span class="s38">pthread_mutex_lock(&amp;c-&gt;glock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">32       <span class="s38">c-&gt;global += c-&gt;local[threadID];</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">33       <span class="s38">pthread_mutex_unlock(&amp;c-&gt;glock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">34       <span class="s38">c-&gt;local[threadID] = 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">35    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">36    <span class="s38">pthread_mutex_unlock(&amp;c-&gt;llock[threadID]);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">37  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">38</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">39  <span class="s38">// get: just return global amount (which may not be perfect)</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">40  </span>int get(counter_t <span class="s39">*</span>c) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">41    <span class="s38">pthread_mutex_lock(&amp;c-&gt;glock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">42    <span class="s38">int val = c-&gt;global;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">43    <span class="s38">pthread_mutex_unlock(&amp;c-&gt;glock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">44    <span class="s38">return val; // only approximate!</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">45  <span class="s38">}</span></p><p style="padding-left: 93pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 29.4: <b>Sloppy Counter Implementation</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Figure <span style=" color: #00AEEF;">29.5 </span>shows the importance of the threshold value <span class="s43">S</span>, with four threads each incrementing the counter 1 million times on four CPUs. If <span class="s43">S </span>is low, performance is poor (but the global count is always quite accurate); if <span class="s43">S </span>is high, performance is excellent, but the global count lags (by the number of CPUs multiplied by <span class="s43">S</span>). This accuracy/performance trade-off is what sloppy counters enables.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">A rough version of such a sloppy counter is found in Figure <span style=" color: #00AEEF;">29.4</span>. Read it, or better yet, run it yourself in some experiments to better understand how it works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="198" height="141" alt="image" src="Image_376.png"/></span></p><p class="s47" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;text-align: center;">15</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Time (seconds)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-left: 53pt;text-indent: 0pt;text-align: center;">10</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="text-indent: 0pt;text-align: center;">5</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s47" style="padding-left: 72pt;text-indent: 0pt;line-height: 8pt;text-align: center;">1  2  4  8  16 32 64 128 256 5121024</p><p class="s47" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">Sloppiness</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 137pt;text-indent: 0pt;text-align: left;">Figure 29.5: <b>Scaling Sloppy Counters</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part300.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part302.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
