<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Interlude: Process API</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part42.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part44.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 3pt;padding-left: 185pt;text-indent: 0pt;text-align: left;">Interlude: Process API</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">A<span class="s7">SIDE</span>: <b>I</b><span class="s45">NTERLUDES</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Interludes will cover more practical aspects of systems, including a par- ticular focus on operating system APIs and how to use them. If you don’t like practical things, you could skip these interludes. But you should like practical things, because, well, they are generally useful in real life; com- panies, for example, don’t usually hire you for your non-practical skills.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In this interlude, we discuss process creation in U<span class="s7">NIX </span>systems. U<span class="s7">NIX </span>presents one of the most intriguing ways to create a new process with a pair of system calls: <span class="s41">fork() </span>and <span class="s41">exec()</span>. A third routine, <span class="s41">wait()</span>, can be used by a process wishing to wait for a process it has created to complete. We now present these interfaces in more detail, with a few simple examples to motivate us. And thus, our problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>C<span class="s7">REATE </span>A<span class="s7">ND </span>C<span class="s7">ONTROL </span>P<span class="s7">ROCESSES</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">What interfaces should the OS present for process creation and con- trol? How should these interfaces be designed to enable ease of use as well as utility?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part44.htm">5.1 The fork() System Call</a><a class="toc0" href="part45.htm">5.2  Adding wait() System Call</a><a class="toc0" href="part46.htm">5.3 Finally, the exec() System Call</a><a class="toc0" href="part47.htm">5.4 Why? Motivating the API</a><a class="toc0" href="part48.htm">5.5 Other Parts of the API</a><a class="toc0" href="part49.htm">5.6 Summary</a><a class="toc0" href="part50.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part42.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part44.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
