<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>14.1  Basic Concepts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part260.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part262.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">14.1  <span style=" color: #00AEEF;">Basic Concepts</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">An index for a ﬁle in a database system works in much the same way as the index in this textbook. If we want to learn about a particular topic (speciﬁed by a word or a phrase) in this textbook, we can search for the topic in the index at the back of the book, ﬁnd the pages where it occurs, and then read the pages to ﬁnd the information for which we are looking. The words in the index are in sorted order, making it easy to ﬁnd the word we want. Moreover, the index is much smaller than the book, further reducing the eﬀort needed.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Database-system indices play the same role as book indices in libraries. For exam- ple, to retrieve a <i>student </i>record given an <span class="s69">ID</span>, the database system would look up an index to ﬁnd on which disk block<span class="s76">1</span> the corresponding record resides, and then fetch the disk block, to get the appropriate <i>student </i>record.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Indices are critical for eﬃcient processing of queries in databases. Without indices, every query would end up reading the entire contents of every relation that it uses; doing so would be unreasonably expensive for queries that only fetch a few records, for example, a single <i>student </i>record, or the records in the <i>takes </i>relation corresponding to a single student.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2608.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">1<span class="s78">As in earlier chapters, we use the term </span><span class="s111">disk </span><span class="s80">to refer to persistent storage devices, such as magnetic disks and solid-state drives.</span></p><p class="s20" style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">623</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Implementing an index on the <i>student </i>relation by keeping a sorted list of students’ <span class="s69">ID </span>would not work well on very large databases, since (i) the index would itself be very big, (ii) even though keeping the index sorted reduces the search time, ﬁnding a student can still be rather time-consuming, and (iii) updating a sorted list as students are added or removed from the database can be very expensive. Instead, more sophisticated indexing techniques are used in database systems. We shall discuss several of these techniques in this chapter.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">There are two basic kinds of indices:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">• <span class="s46">Ordered indices</span><span class="p">. Based on a sorted ordering of the values.</span></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><b>Hash indices</b>. Based on a uniform distribution of values across a range of buckets. The bucket to which a value is assigned is determined by a function, called a <i>hash function</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We shall consider several techniques for ordered indexing. No one technique is the best. Rather, each technique is best suited to particular database applications. Each technique must be evaluated on the basis of these factors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Access types</span><span class="p">: The types of access that are supported eﬃciently. Access types can include ﬁnding records with a speciﬁed attribute value and ﬁnding records whose attribute values fall in a speciﬁed range.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Access time</span><span class="p">: The time it takes to ﬁnd a particular data item, or set of items, using the technique in question.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Insertion time</span><span class="p">: The time it takes to insert a new data item. This value includes the time it takes to ﬁnd the correct place to insert the new data item, as well as the time it takes to update the index structure.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Deletion time</span><span class="p">: The time it takes to delete a data item. This value includes the time it takes to ﬁnd the item to be deleted, as well as the time it takes to update the index structure.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Space overhead</span><span class="p">: The additional space occupied by an index structure. Provided that the amount of additional space is moderate, it is usually worthwhile to sacriﬁce the space to achieve improved performance.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We often want to have more than one index for a ﬁle. For example, we may wish to search for a book by author, by subject, or by title.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">An attribute or set of attributes used to look up records in a ﬁle is called a <span class="s63">search key</span>. Note that this deﬁnition of <i>key </i>diﬀers from that used in <i>primary key</i>, <i>candidate key</i>, and <i>superkey</i>. This duplicate meaning for <i>key </i>is (unfortunately) well established in practice. Using our notion of a search key, we see that if there are several indices on a ﬁle, there are several search keys.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="229" alt="image" src="Image_2609.png"/></span></p><p class="s42" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">10101  Srinivasan  Comp. Sci.  65000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">12121  Wu     Finance    90000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">15151  Mozart   Music     40000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">22222  Einstein   Physics    95000</p><p class="s42" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">32343  El Said   History    60000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">33456  Gold     Physics    87000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">45565  Katz     Comp. Sci.   75000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">58583  Caliﬁeri   History    62000</p><p class="s42" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">76543  Singh    Finance    80000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">76766  Crick    Biology    72000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">83821  Brandt   Comp. Sci.   92000</p><p class="s42" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">98345  Kim     Elec. Eng.   80000</p><p style="text-indent: 0pt;text-align: left;"/><p class="s74" style="padding-top: 4pt;padding-left: 201pt;text-indent: 0pt;text-align: left;"><a name="bookmark277"><span class="s73">Figure 14.1 </span></a>Sequential file for <span class="s91">instructor </span>records.<a name="bookmark310">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part260.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part262.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
