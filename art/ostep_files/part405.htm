<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>38.6 RAID Level 4: Saving Space With Parity</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part404.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part406.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">38.6 RAID Level 4: Saving Space With Parity</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">We now present a different method of adding redundancy to a disk ar- ray known as <b>parity</b>. Parity-based approaches attempt to use less capac- ity and thus overcome the huge space penalty paid by mirrored systems. They do so at a cost, however: performance.</p><p style="padding-left: 80pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">In a five-disk RAID-4 system, we might observe the following layout:</p><p class="s5" style="padding-left: 3pt;text-indent: 0pt;line-height: 117%;text-align: justify;">P0 P1 P2 P3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s5" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">Disk 0  Disk 1  Disk 2  Disk 3  Disk 4</p><p style="padding-left: 127pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="228" height="0" alt="image" src="Image_562.png"/></span></p><p class="s5" style="padding-left: 43pt;text-indent: 0pt;text-align: center;">0    1    2    3</p><p class="s5" style="padding-top: 1pt;padding-left: 43pt;text-indent: 0pt;text-align: center;">4    5    6    7</p><p class="s5" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: center;">8    9    10    11</p><p class="s5" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: center;">12    13    14    15</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">As you can see, for each stripe of data, we have added a single <b>par- ity </b>block that stores the redundant information for that stripe of blocks. For example, parity block P1 has redundant information that it calculated from blocks 4, 5, 6, and 7.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To compute parity, we need to use a mathematical function that en- ables us to withstand the loss of any one block from our stripe. It turns out the simple function <b>XOR </b>does the trick quite nicely. For a given set of bits, the XOR of all of those bits returns a 0 if there are an even number of 1’s in the bits, and a 1 if there are an odd number of 1’s. For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:135.268pt" cellspacing="0"><tr style="height:9pt"><td style="width:22pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C0</p></td><td style="width:21pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C1</p></td><td style="width:22pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: right;">C2</p></td><td style="width:21pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">C3</p></td><td style="width:69pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="text-indent: 0pt;line-height: 8pt;text-align: center;">P</p></td></tr><tr style="height:10pt"><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0</p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-right: 8pt;text-indent: 0pt;line-height: 9pt;text-align: right;">1</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="text-indent: 0pt;line-height: 9pt;text-align: center;">1</p></td><td style="width:69pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">XOR(0,0,1,1) = 0</p></td></tr><tr style="height:9pt"><td style="width:22pt"><p class="s108" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p></td><td style="width:21pt"><p class="s108" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p></td><td style="width:22pt"><p class="s108" style="padding-right: 8pt;text-indent: 0pt;line-height: 8pt;text-align: right;">0</p></td><td style="width:21pt"><p class="s108" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p></td><td style="width:69pt"><p class="s108" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">XOR(0,1,0,0) = 1</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In the first row (0,0,1,1), there are two 1’s (C2, C3), and thus XOR of all of those values will be 0 (P); similarly, in the second row there is only</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">one 1 (C1), and thus the XOR must be 1 (P). You can remember this in a very simple way: that the number of 1’s in any row must be an even (not odd) number; that is the <b>invariant </b>that the RAID must maintain in order for parity to be correct.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">From the example above, you might also be able to guess how parity information can be used to recover from a failure. Imagine the column la- beled C2 is lost. To figure out what values must have been in the column, we simply have to read in all the other values in that row (including the XOR’d parity bit) and <b>reconstruct </b>the right answer. Specifically, assume the first row’s value in column C2 is lost (it is a 1); by reading the other values in that row (0 from C0, 0 from C1, 1 from C3, and 0 from the parity column P), we get the values 0, 0, 1, and 0. Because we know that XOR keeps an even number of 1’s in each row, we know what the missing data must be: a 1. And that is how reconstruction works in a XOR-based par- ity scheme! Note also how we compute the reconstructed value: we just XOR the data bits and the parity bits together, in the same way that we calculated the parity in the first place.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now you might be wondering: we are talking about XORing all of these bits, and yet above we know that the RAID places 4KB (or larger) blocks on each disk; how do we apply XOR to a bunch of blocks to com- pute the parity? It turns out this is easy as well. Simply perform a bitwise XOR across each bit of the data blocks; put the result of each bitwise XOR into the corresponding bit slot in the parity block. For example, if we had blocks of size 4 bits (yes, this is still quite a bit smaller than a 4KB block, but you get the picture), they might look something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:97.468pt" cellspacing="0"><tr style="height:9pt"><td style="width:35pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Block0</p></td><td style="width:36pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Block1</p></td><td style="width:35pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Block2</p></td><td style="width:36pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Block3</p></td><td style="width:33pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">Parity</p></td></tr><tr style="height:10pt"><td style="width:35pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">10</p></td><td style="width:35pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">11</p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">10</p></td><td style="width:33pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">11</p></td></tr><tr style="height:9pt"><td style="width:35pt"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">10</p></td><td style="width:36pt"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">01</p></td><td style="width:35pt"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">00</p></td><td style="width:36pt"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">01</p></td><td style="width:33pt"><p class="s108" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 8pt;text-align: center;">10</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As you can see from the figure, the parity is computed for each bit of each block and the result placed in the parity block.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part406.htm">RAID-4 Analysis</a><a class="toc1" href="part407.htm">Table 38.5: Example: Writes To 4, 13, And Respective Parity Blocks</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part404.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part406.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
