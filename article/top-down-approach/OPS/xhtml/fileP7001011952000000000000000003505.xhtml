<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>9.4 Protocols for Real-Time Conversational Applications</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000003505" class="level1"><header><h1 class="title" id="P700101195200000000000000000BBBD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBD" epub:type="title"><span class="number">9.4</span> Protocols for Real-Time Conversational Applications</h1></header>
<p id="P700101195200000000000000000BBBE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBE">Real-time conversational applications, including VoIP and video conferencing, are compelling and very popular. It is therefore not surprising that standards bodies, such as the IETF and ITU, have been busy for many years (and continue to be busy!) at hammering out standards for this class of applications. With the appropriate standards in place for real-time conversational applications, independent companies are creating new products that interoperate with each other. In this section we examine RTP and SIP for real-time conversational applications. Both standards are enjoying widespread implementation in industry products.</p>
<section id="P7001011952000000000000000003508" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003508" class="level2"><header><h1 class="title" id="P700101195200000000000000000BBBF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBF" epub:type="title"><span class="number">9.4.1</span> RTP</h1></header>
<p id="P700101195200000000000000000BBC0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC0">In the previous section, we learned that the sender side of a VoIP application appends header fields to the audio chunks before passing them to the transport layer. These header fields include sequence numbers and timestamps. Since most multimedia networking applications can make use of sequence numbers and timestamps, it is convenient to have a standardized packet structure that includes fields for audio/video data, sequence number, and timestamp, as well as other potentially useful fields. RTP, defined in RFC 3550, is such a standard. RTP can be used for transporting common formats such as PCM, ACC, and MP3 for sound and MPEG and H.263 for video. It can also be used for transporting proprietary sound and video formats. Today, RTP enjoys widespread implementation in many products and research prototypes. It is also complementary to other important real-time interactive protocols, such as SIP.</p>
<p id="P700101195200000000000000000BBC1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC1">In this section, we provide an introduction to RTP. We also encourage you to visit Henning Schulzrinne’s RTP site <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BF5" data-foobar="7">[Schulzrinne-RTP 2012]</a>, which provides a wealth of information on the subject. Also, you may want to visit the RAT site [RAT 2012], which documents VoIP application that uses RTP.</p>
<section id="P700101195200000000000000000350C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000350C" class="level3"><header><h1 class="title" id="P700101195200000000000000000BBC2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC2" epub:type="title">RTP Basics</h1></header>
<p id="P700101195200000000000000000BBC3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC3">RTP typically runs on top of UDP. The sending side encapsulates a media chunk within an RTP packet, then encapsulates the packet in a UDP segment, and then <span class="pagebreak" title="701" id="P700101195200000000000000000350F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000350F" epub:type="pagebreak" role="doc-pagebreak"></span>hands the segment to IP. The receiving side extracts the RTP packet from the UDP segment, then extracts the media chunk from the RTP packet, and then passes the chunk to the media player for decoding and rendering.</p>
<p id="P700101195200000000000000000BBC4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC4">As an example, consider the use of RTP to transport voice. Suppose the voice source is PCM-encoded (that is, sampled, quantized, and digitized) at 64 kbps. Further suppose that the application collects the encoded data in 20-msec chunks, that is, 160 bytes in a chunk. The sending side precedes each chunk of the audio data with an <span class="keyword" id="P7001011952000000000000000003511" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003511"><b>RTP header</b></span> that includes the type of audio encoding, a sequence number, and a timestamp. The RTP header is normally 12 bytes. The audio chunk along with the RTP header form the <span class="keyword" id="P7001011952000000000000000003512" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003512"><b>RTP packet</b></span>. The RTP packet is then sent into the UDP socket interface. At the receiver side, the application receives the RTP packet from its socket interface. The application extracts the audio chunk from the RTP packet and uses the header fields of the RTP packet to properly decode and play back the audio chunk.</p>
<p id="P700101195200000000000000000BBC5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC5">If an application incorporates RTP—instead of a proprietary scheme to provide payload type, sequence numbers, or timestamps—then the application will more easily interoperate with other networked multimedia applications. For example, if two different companies develop VoIP software and they both incorporate RTP into their product, there may be some hope that a user using one of the VoIP products will be able to communicate with a user using the other VoIP product. In <a class="xref" href="#P700101195200000000000000000355C" data-foobar="1"><span class="label">Section</span> <span class="number">9.4.2</span></a>, we’ll see that RTP is often used in conjunction with SIP, an important standard for Internet telephony.</p>
<p id="P700101195200000000000000000BBC6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC6">It should be emphasized that RTP does not provide any mechanism to ensure timely delivery of data or provide other quality-of-service (QoS) guarantees; it does not even guarantee delivery of packets or prevent out-of-order delivery of packets. Indeed, RTP encapsulation is seen only at the end systems. Routers do not distinguish between IP datagrams that carry RTP packets and IP datagrams that don’t.</p>
<p id="P700101195200000000000000000BBC7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC7">RTP allows each source (for example, a camera or a microphone) to be assigned its own independent RTP stream of packets. For example, for a video conference between two participants, four RTP streams could be opened—two streams for transmitting the audio (one in each direction) and two streams for transmitting the video (again, one in each direction). However, many popular encoding techniques—including MPEG 1 and MPEG 2—bundle the audio and video into a single stream during the encoding process. When the audio and video are bundled by the encoder, then only one RTP stream is generated in each direction.</p>
<p id="P700101195200000000000000000BBC8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBC8">RTP packets are not limited to unicast applications. They can also be sent over one-to-many and many-to-many multicast trees. For a many-to-many multicast session, all of the session’s senders and sources typically use the same multicast group for sending their RTP streams. RTP multicast streams belonging together, such as audio and video streams emanating from multiple senders in a video conference application, belong to an <span class="keyword" id="P7001011952000000000000000003517" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003517"><b>RTP session</b></span>.<span class="pagebreak" title="702" id="P7001011952000000000000000003518" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003518" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000003519" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003519">
<img alt="" height="52" width="670" id="P700101195200000000000000000BBC9" data-uri="P7001011952000000000000000005639" src="../images/4055109008.png"></img>
<figcaption id="P700101195200000000000000000BBCA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCA"><header><h1 class="title" id="P700101195200000000000000000BBCB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCB" epub:type="title"><span class="label">Figure </span><span class="number">9.8</span> RTP header fields</h1></header>
</figcaption>
</figure>
</section>
<section id="P700101195200000000000000000351D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000351D" class="level3"><header><h1 class="title" id="P700101195200000000000000000BBCC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCC" epub:type="title">RTP Packet Header Fields</h1></header>
<p id="P700101195200000000000000000BBCD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCD">As shown in <a class="xref" href="#P7001011952000000000000000003519" data-foobar="1"><span class="label">Figure</span> <span class="number">9.8</span></a>, the four main RTP packet header fields are the payload type, sequence number, timestamp, and source identifier fields.</p>
<p id="P700101195200000000000000000BBCE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCE">The payload type field in the RTP packet is 7 bits long. For an audio stream, the payload type field is used to indicate the type of audio encoding (for example, PCM, adaptive delta modulation, linear predictive encoding) that is being used. If a sender decides to change the encoding in the middle of a session, the sender can inform the receiver of the change through this payload type field. The sender may want to change the encoding in order to increase the audio quality or to decrease the RTP stream bit rate. <a class="xref" href="#P700101195200000000000000000352A" data-foobar="1"><span class="label">Table</span> <span class="number">9.2</span></a> lists some of the audio payload types currently supported by RTP.</p>
<p id="P700101195200000000000000000BBCF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBCF">For a video stream, the payload type is used to indicate the type of video encoding (for example, motion JPEG, MPEG 1, MPEG 2, H.261). Again, the sender can change video encoding on the fly during a session. <a class="xref" href="#P700101195200000000000000000354E" data-foobar="1"><span class="label">Table</span> <span class="number">9.3</span></a> lists some of the video payload types currently supported by RTP. The other important fields are the following:</p>
<ul id="P700101195200000000000000000BBD0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD0">
<li id="P700101195200000000000000000BBD1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD1"><p id="P700101195200000000000000000BBD2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD2"><span class="leadin">Sequence number field.</span> The sequence number field is 16 bits long. The sequence number increments by one for each RTP packet sent, and may be used by the receiver to detect packet loss and to restore packet sequence. For example, if the receiver side of the application receives a stream of RTP packets with a gap between sequence numbers 86 and 89, then the receiver knows that packets 87 and 88 are missing. The receiver can then attempt to conceal the lost data.</p></li>
<li id="P700101195200000000000000000BBD3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD3"><p id="P700101195200000000000000000BBD4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD4"><span class="leadin">Timestamp field.</span> The timestamp field is 32 bits long. It reflects the sampling instant of the first byte in the RTP data packet. As we saw in the preceding section, the receiver can use timestamps to remove packet jitter introduced in the network and to provide synchronous playout at the receiver. The timestamp is derived from a sampling clock at the sender. As an example, for audio the timestamp clock increments by one for each sampling period (for example, each 125 μsec for an 8 kHz sampling clock); if the audio application generates chunks consisting of 160 encoded samples, then the timestamp increases by 160 for each RTP packet when the source is active. The timestamp clock continues to increase at a constant rate even if the source is inactive.</p></li>
<li id="P700101195200000000000000000BBD5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD5"><p id="P700101195200000000000000000BBD6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD6"><span class="leadin">Synchronization source identifier (SSRC).</span> The SSRC field is 32 bits long. It identifies the source of the RTP stream. Typically, each stream in an RTP session has a distinct SSRC. The SSRC is not the IP address of the sender, but instead is a number that the source assigns randomly when the new stream is started. The probability that two streams get assigned the same SSRC is very small. Should this happen, the two sources pick a new SSRC value.<span class="pagebreak" title="703" id="P7001011952000000000000000003529" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003529" epub:type="pagebreak" role="doc-pagebreak"></span></p></li>
</ul>
<figure id="P700101195200000000000000000352A" class="table" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000352A">
<figcaption id="P700101195200000000000000000BBD7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD7"><header><h1 class="title" id="P700101195200000000000000000BBD8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD8" epub:type="title"><span class="label">Table </span><span class="number">9.2</span> Audio payload types supported by RTP</h1></header></figcaption>
<table id="P700101195200000000000000000BBD9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBD9">
<thead>
<tr>
<th id="P700101195200000000000000000BBDA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDA">Payload-Type Number</th>
<th id="P700101195200000000000000000BBDB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDB">Audio Format</th>
<th id="P700101195200000000000000000BBDC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDC">Sampling Rate</th>
<th id="P700101195200000000000000000BBDD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDD">Rate</th>
</tr>
</thead>
<tbody>
<tr>
<td id="P700101195200000000000000000BBDE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDE"><b>0</b></td>
<td id="P700101195200000000000000000BBDF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBDF">PCM μ-law</td>
<td id="P700101195200000000000000000BBE0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE0">8 kHz</td>
<td id="P700101195200000000000000000BBE1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE1">64 kbps</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBE2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE2"><b>1</b></td>
<td id="P700101195200000000000000000BBE3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE3">1016</td>
<td id="P700101195200000000000000000BBE4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE4">8 kHz</td>
<td id="P700101195200000000000000000BBE5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE5">4.8 kbps</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBE6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE6"><b>3</b></td>
<td id="P700101195200000000000000000BBE7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE7">GSM</td>
<td id="P700101195200000000000000000BBE8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE8">8 kHz</td>
<td id="P700101195200000000000000000BBE9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBE9">13 kbps</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBEA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBEA"><b>7</b></td>
<td id="P700101195200000000000000000BBEB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBEB">LPC</td>
<td id="P700101195200000000000000000BBEC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBEC">8 kHz</td>
<td id="P700101195200000000000000000BBED" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBED">2.4 kbps</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBEE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBEE"><b>9</b></td>
<td id="P700101195200000000000000000BBEF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBEF">G.722</td>
<td id="P700101195200000000000000000BBF0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF0">16 kHz</td>
<td id="P700101195200000000000000000BBF1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF1">48–64 kbps</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBF2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF2"><b>14</b></td>
<td id="P700101195200000000000000000BBF3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF3">MPEG Audio</td>
<td id="P700101195200000000000000000BBF4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF4">90 kHz</td>
<td id="P700101195200000000000000000BBF5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF5">—</td>
</tr>
<tr>
<td id="P700101195200000000000000000BBF6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF6"><b>15</b></td>
<td id="P700101195200000000000000000BBF7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF7">G.728</td>
<td id="P700101195200000000000000000BBF8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF8">8 kHz</td>
<td id="P700101195200000000000000000BBF9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBF9">16 kbps</td>
</tr>
</tbody>
</table>
</figure>
<figure id="P700101195200000000000000000354E" class="table" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000354E">
<figcaption id="P700101195200000000000000000BBFA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFA"><header><h1 class="title" id="P700101195200000000000000000BBFB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFB" epub:type="title"><span class="label">Table </span><span class="number">9.3</span> Some video payload types supported by RTP</h1></header></figcaption>
<table id="P700101195200000000000000000BBFC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFC">
<thead>
<tr>
<th id="P700101195200000000000000000BBFD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFD">Payload-Type Number</th>
<th id="P700101195200000000000000000BBFE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFE">Video Format</th>
</tr>
</thead>
<tbody>
<tr>
<td id="P700101195200000000000000000BBFF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBFF"><b>26</b></td>
<td id="P700101195200000000000000000BC00" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC00">Motion JPEG</td>
</tr>
<tr>
<td id="P700101195200000000000000000BC01" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC01"><b>31</b></td>
<td id="P700101195200000000000000000BC02" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC02">H.261</td>
</tr>
<tr>
<td id="P700101195200000000000000000BC03" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC03"><b>32</b></td>
<td id="P700101195200000000000000000BC04" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC04">MPEG 1 video</td>
</tr>
<tr>
<td id="P700101195200000000000000000BC05" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC05"><b>33</b></td>
<td id="P700101195200000000000000000BC06" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC06">MPEG 2 video</td>
</tr>
</tbody>
</table>
</figure>
</section>
</section>
<section id="P700101195200000000000000000355C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000355C" class="level2"><header><h1 class="title" id="P700101195200000000000000000BC07" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC07" epub:type="title"><span class="number">9.4.2</span> SIP</h1></header>
<p id="P700101195200000000000000000BC08" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC08">The Session Initiation Protocol (SIP), defined in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B68" data-foobar="7">[RFC 3261</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BB9" data-foobar="7">RFC 5411]</a>, is an open and lightweight protocol that does the following:</p>
<ul id="P700101195200000000000000000BC09" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC09">
<li id="P700101195200000000000000000BC0A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0A"><p id="P700101195200000000000000000BC0B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0B">It provides mechanisms for establishing calls between a caller and a callee over an IP network. It allows the caller to notify the callee that it wants to start a call. It allows the participants to agree on media encodings. It also allows participants to end calls.</p></li>
<li id="P700101195200000000000000000BC0C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0C"><p id="P700101195200000000000000000BC0D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0D">It provides mechanisms for the caller to determine the current IP address of the callee. Users do not have a single, fixed IP address because they may be assigned addresses dynamically (using DHCP) and because they may have multiple IP devices, each with a different IP address.</p></li>
<li id="P700101195200000000000000000BC0E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0E"><p id="P700101195200000000000000000BC0F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC0F">It provides mechanisms for call management, such as adding new media streams during the call, changing the encoding during the call, inviting new participants during the call, call transfer, and call holding.</p></li>
</ul>
<section id="P7001011952000000000000000003566" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003566" class="level3"><header><h1 class="title" id="P700101195200000000000000000BC10" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC10" epub:type="title"><span class="pagebreak" title="704" id="P7001011952000000000000000003568" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003568" epub:type="pagebreak" role="doc-pagebreak"></span>Setting Up a Call to a Known IP Address</h1></header>
<p id="P700101195200000000000000000BC11" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC11">To understand the essence of SIP, it is best to take a look at a concrete example. In this example, Alice is at her PC and she wants to call Bob, who is also working at his PC. Alice’s and Bob’s PCs are both equipped with SIP-based software for making and receiving phone calls. In this initial example, we’ll assume that Alice knows the IP address of Bob’s PC. <a class="xref" href="#P700101195200000000000000000356B" data-foobar="1"><span class="label">Figure</span> <span class="number">9.9</span></a> illustrates the SIP call-establishment process.</p>
<p id="P700101195200000000000000000BC12" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC12">In <a class="xref" href="#P700101195200000000000000000356B" data-foobar="1"><span class="label">Figure</span> <span class="number">9.9</span></a>, we see that an SIP session begins when Alice sends Bob an INVITE message, which resembles an HTTP request message. This INVITE message is sent over UDP to the well-known port 5060 for SIP. (SIP messages can also be sent over TCP.) The INVITE message includes an identifier for Bob (bob@193.64.210.89), an indication of Alice’s current IP address, an indication that Alice desires to receive audio, which is to be encoded in format AVP 0 (PCM encoded μ-law) and</p>
<figure id="P700101195200000000000000000356B" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000356B">
<img alt="SIP call establishment when Alice knows Bob's IP address." height="655" width="676" aria-describedby="P700101195200000000000000000356F" id="P700101195200000000000000000BC13" data-uri="P700101195200000000000000000563A" src="../images/4055109009.png"></img>
<figcaption id="P700101195200000000000000000BC14" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC14"><header><h1 class="title" id="P700101195200000000000000000BC15" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC15" epub:type="title"><span class="label">Figure </span><span class="number">9.9</span> SIP call establishment when Alice knows Bob’s IP address</h1></header>

</figcaption>
</figure><div class="longdesc" id="P700101195200000000000000000356F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000356F" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109009.xhtml#la_4055109009"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000BC21" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC21"><span class="pagebreak" title="705" id="P700101195200000000000000000357C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000357C" epub:type="pagebreak" role="doc-pagebreak"></span>encapsulated in RTP, and an indication that she wants to receive the RTP packets on port 38060. After receiving Alice’s INVITE message, Bob sends an SIP response message, which resembles an HTTP response message. This response SIP message is also sent to the SIP port 5060. Bob’s response includes a 200 OK as well as an indication of his IP address, his desired encoding and packetization for reception, and his port number to which the audio packets should be sent. Note that in this example Alice and Bob are going to use different audio-encoding mechanisms: Alice is asked to encode her audio with GSM whereas Bob is asked to encode his audio with PCM μ-law. After receiving Bob’s response, Alice sends Bob an SIP acknowledgment message. After this SIP transaction, Bob and Alice can talk. (For visual convenience, <a class="xref" href="#P700101195200000000000000000356B" data-foobar="1"><span class="label">Figure</span> <span class="number">9.9</span></a> shows Alice talking after Bob, but in truth they would normally talk at the same time.) Bob will encode and packetize the audio as requested and send the audio packets to port number 38060 at IP address 167.180.112.24. Alice will also encode and packetize the audio as requested and send the audio packets to port number 48753 at IP address 193.64.210.89.</p>
<p id="P700101195200000000000000000BC22" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC22">From this simple example, we have learned a number of key characteristics of SIP. First, SIP is an out-of-band protocol: The SIP messages are sent and received in sockets that are different from those used for sending and receiving the media data. Second, the SIP messages themselves are ASCII-readable and resemble HTTP messages. Third, SIP requires all messages to be acknowledged, so it can run over UDP or TCP.</p>
<p id="P700101195200000000000000000BC23" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC23">In this example, let’s consider what would happen if Bob does not have a PCM μ-law codec for encoding audio. In this case, instead of responding with 200 OK, Bob would likely respond with a 606 Not Acceptable and list in the message all the codecs he can use. Alice would then choose one of the listed codecs and send another INVITE message, this time advertising the chosen codec. Bob could also simply reject the call by sending one of many possible rejection reply codes. (There are many such codes, including “busy,” “gone,” “payment required,” and “forbidden.”)</p>
</section>
<section id="P700101195200000000000000000357F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000357F" class="level3"><header><h1 class="title" id="P700101195200000000000000000BC24" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC24" epub:type="title">SIP Addresses</h1></header>
<p id="P700101195200000000000000000BC25" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC25">In the previous example, Bob’s SIP address is sip:bob@193.64.210.89. However, we expect many—if not most—SIP addresses to resemble e-mail addresses. For example, Bob’s address might be <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a>. When Alice’s SIP device sends an INVITE message, the message would include this e-mail-like address; the SIP infrastructure would then route the message to the IP device that Bob is currently using (as we’ll discuss below). Other possible forms for the SIP address could be Bob’s legacy phone number or simply Bob’s first/middle/last name (assuming it is unique).</p>
<p id="P700101195200000000000000000BC26" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC26">An interesting feature of SIP addresses is that they can be included in Web pages, just as people’s e-mail addresses are included in Web pages with the mailto URL. For example, suppose Bob has a personal homepage, and he wants to provide a means for visitors to the homepage to call him. He could then simply include the <span class="pagebreak" title="706" id="P7001011952000000000000000003583" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003583" epub:type="pagebreak" role="doc-pagebreak"></span>URL <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a>. When the visitor clicks on the URL, the SIP application in the visitor’s device is launched and an INVITE message is sent to Bob.</p>
</section>
<section id="P7001011952000000000000000003584" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003584" class="level3"><header><h1 class="title" id="P700101195200000000000000000BC27" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC27" epub:type="title">SIP Messages</h1></header>
<p id="P700101195200000000000000000BC28" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC28">In this short introduction to SIP, we’ll not cover all SIP message types and headers. Instead, we’ll take a brief look at the SIP INVITE message, along with a few common header lines. Let us again suppose that Alice wants to initiate a VoIP call to Bob, and this time Alice knows only Bob’s SIP address, <a class="email" href="mailto:bob@domain.com">bob@domain.com</a>, and does not know the IP address of the device that Bob is currently using. Then her message might look something like this:</p>
<pre id="P700101195200000000000000000BC29" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC29"><code id="P700101195200000000000000000BC2A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2A">INVITE <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a> SIP/2.0
Via: SIP/2.0/UDP 167.180.112.24
From: <a class="email" href="mailto:sip:alice@hereway.com">sip:alice@hereway.com</a>
To: <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a>
Call-ID: <a class="email" href="mailto:a2e3a@pigeon.hereway.com">a2e3a@pigeon.hereway.com</a>
Content-Type: application/sdp
Content-Length: 885

c=IN IP4 167.180.112.24
m=audio 38060 RTP/AVP 0</code></pre>
<p id="P700101195200000000000000000BC2B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2B">The INVITE line includes the SIP version, as does an HTTP request message. Whenever an SIP message passes through an SIP device (including the device that originates the message), it attaches a Via header, which indicates the IP address of the device. (We’ll see soon that the typical INVITE message passes through many SIP devices before reaching the callee’s SIP application.) Similar to an e-mail message, the SIP message includes a From header line and a To header line. The message includes a Call-ID, which uniquely identifies the call (similar to the message-ID in e-mail). It includes a Content-Type header line, which defines the format used to describe the content contained in the SIP message. It also includes a Content-Length header line, which provides the length in bytes of the content in the message. Finally, after a carriage return and line feed, the message contains the content. In this case, the content provides information about Alice’s IP address and how Alice wants to receive the audio.</p>
</section>
<section id="P700101195200000000000000000358A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000358A" class="level3"><header><h1 class="title" id="P700101195200000000000000000BC2C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2C" epub:type="title">Name Translation and User Location</h1></header>
<p id="P700101195200000000000000000BC2D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2D">In the example in <a class="xref" href="#P700101195200000000000000000356B" data-foobar="1"><span class="label">Figure</span> <span class="number">9.9</span></a>, we assumed that Alice’s SIP device knew the IP address where Bob could be contacted. But this assumption is quite unrealistic, not only because IP addresses are often dynamically assigned with DHCP, but also because Bob may have multiple IP devices (for example, different devices for his home, work, and car). So now let us suppose that Alice knows only Bob’s e-mail address, <span class="pagebreak" title="707" id="P700101195200000000000000000358D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000358D" epub:type="pagebreak" role="doc-pagebreak"></span><a class="email" href="mailto:bob@domain.com">bob@domain.com</a>, and that this same address is used for SIP-based calls. In this case, Alice needs to obtain the IP address of the device that the user <a class="email" href="mailto:bob@domain.com">bob@domain.com</a> is currently using. To find this out, Alice creates an INVITE message that begins with INVITE <a class="email" href="mailto:bob@domain.com">bob@domain.com</a> SIP/2.0 and sends this message to an <span class="keyword" id="P700101195200000000000000000358E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000358E"><b>SIP proxy</b></span>. The proxy will respond with an SIP reply that might include the IP address of the device that <a class="email" href="mailto:bob@domain.com">bob@domain.com</a> is currently using. Alternatively, the reply might include the IP address of Bob’s voicemail box, or it might include a URL of a Web page (that says “Bob is sleeping. Leave me alone!”). Also, the result returned by the proxy might depend on the caller: If the call is from Bob’s wife, he might accept the call and supply his IP address; if the call is from Bob’s mother-in-law, he might respond with the URL that points to the I-am-sleeping Web page!</p>
<p id="P700101195200000000000000000BC2E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2E">Now, you are probably wondering, how can the proxy server determine the current IP address for <a class="email" href="mailto:bob@domain.com">bob@domain.com</a>? To answer this question, we need to say a few words about another SIP device, the <span class="keyword" id="P7001011952000000000000000003590" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003590"><b>SIP registrar</b></span>. Every SIP user has an associated registrar. Whenever a user launches an SIP application on a device, the application sends an SIP register message to the registrar, informing the registrar of its current IP address. For example, when Bob launches his SIP application on his PDA, the application would send a message along the lines of:</p>
<pre id="P700101195200000000000000000BC2F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC2F"><code id="P700101195200000000000000000BC30" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC30">REGISTER sip:domain.com SIP/2.0
Via: SIP/2.0/UDP 193.64.210.89
From: <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a>
To: <a class="email" href="mailto:sip:bob@domain.com">sip:bob@domain.com</a>
Expires: 3600</code></pre>
<p id="P700101195200000000000000000BC31" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC31">Bob’s registrar keeps track of Bob’s current IP address. Whenever Bob switches to a new SIP device, the new device sends a new register message, indicating the new IP address. Also, if Bob remains at the same device for an extended period of time, the device will send refresh register messages, indicating that the most recently sent IP address is still valid. (In the example above, refresh messages need to be sent every 3600 seconds to maintain the address at the registrar server.) It is worth noting that the registrar is analogous to a DNS authoritative name server: The DNS server translates fixed host names to fixed IP addresses; the SIP registrar translates fixed human identifiers (for example, <a class="email" href="mailto:bob@domain.com">bob@domain.com</a>) to dynamic IP addresses. Often SIP registrars and SIP proxies are run on the same host.</p>
<p id="P700101195200000000000000000BC32" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC32">Now let’s examine how Alice’s SIP proxy server obtains Bob’s current IP address. From the preceding discussion we see that the proxy server simply needs to forward Alice’s INVITE message to Bob’s registrar/proxy. The registrar/proxy could then forward the message to Bob’s current SIP device. Finally, Bob, having now received Alice’s INVITE message, could send an SIP response to Alice.</p>
<p id="P700101195200000000000000000BC33" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC33">As an example, consider <a class="xref" href="#P7001011952000000000000000003597" data-foobar="1"><span class="label">Figure</span> <span class="number">9.10</span></a>, in which <a class="email" href="mailto:jim@umass.edu">jim@umass.edu</a>, currently working on 217.123.56.89, wants to initiate a Voice-over-IP (VoIP) session with <a class="email" href="mailto:keith@upenn.edu">keith@upenn.edu</a>, currently working on 197.87.54.21. The following steps are taken:<span class="pagebreak" title="708" id="P7001011952000000000000000003596" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003596" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000003597" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003597">
<img alt="Session initiation, involving SIP proxies and registrars." height="523" width="459" aria-describedby="P700101195200000000000000000359B" id="P700101195200000000000000000BC34" data-uri="P700101195200000000000000000563B" src="../images/4055109010.png"></img>
<figcaption id="P700101195200000000000000000BC35" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC35"><header><h1 class="title" id="P700101195200000000000000000BC36" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC36" epub:type="title"><span class="label">Figure </span><span class="number">9.10</span> Session initiation, involving SIP proxies and registrars</h1></header>

</figcaption>
</figure><div class="longdesc" id="P700101195200000000000000000359B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000359B" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109010.xhtml#la_4055109010"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000BC39" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC39">(1) Jim sends an INVITE message to the umass SIP proxy. (2) The proxy does a DNS lookup on the SIP registrar upenn.edu (not shown in diagram) and then forwards the message to the registrar server. (3) Because <a class="email" href="mailto:keith@upenn.edu">keith@upenn.edu</a> is no longer registered at the upenn registrar, the upenn registrar sends a redirect response, indicating that it should try <a class="email" href="mailto:keith@nyu.edu">keith@nyu.edu</a>. (4) The umass proxy sends an INVITE message to the NYU SIP registrar. (5) The NYU registrar knows the IP address of <a class="email" href="mailto:keith@upenn.edu">keith@upenn.edu</a> and forwards the INVITE message to the host 197.87.54.21, which is running Keith’s SIP client. (6–8) An SIP response is sent back through registrars/proxies to the SIP client on 217.123.56.89. (9) Media is sent directly between the two clients. (There is also an SIP acknowledgment message, which is not shown.)</p>
<p id="P700101195200000000000000000BC3A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BC3A">Our discussion of SIP has focused on call initiation for voice calls. SIP, being a signaling protocol for initiating and ending calls in general, can be used for video conference calls as well as for text-based sessions. In fact, SIP has become a fundamental component in many instant messaging applications. Readers desiring to learn more about SIP are encouraged to visit Henning Schulzrinne’s SIP Web site <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BF7" data-foobar="7">[Schulzrinne-SIP 2016]</a>. In particular, on this site you will find open source software for SIP clients and servers <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C12" data-foobar="7">[SIP Software 2016]</a>.</p>
</section>
</section>
</section></body></html>