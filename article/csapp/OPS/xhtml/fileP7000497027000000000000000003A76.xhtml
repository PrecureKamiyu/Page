<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Chapter 4 Processor Architecture</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000003A76" epub:type="chapter"><header class="calibre24 pcalibre pcalibre1"><h1 class="title4 pcalibre pcalibre1" id="P7000497027000000000000000041C35" data-uri="chapter04.xhtml#P7000497027000000000000000041C35" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003A78" title="351" data-uri="chapter04.xhtml#P7000497027000000000000000003A78" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre number1 pcalibre1">4 </span>Processor Architecture</h1></header>
<section class="pcalibre halftitlepage pcalibre1" id="d9e83652">
<nav class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000041C36" data-uri="chapter04.xhtml#P7000497027000000000000000041C36" epub:type="toc">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000041C37" data-uri="chapter04.xhtml#P7000497027000000000000000041C37">

<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000041C38" data-uri="chapter04.xhtml#P7000497027000000000000000041C38">
<li id="P7000497027000000000000000041C39" data-uri="chapter04.xhtml#P7000497027000000000000000041C39" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000041C3A" data-uri="chapter04.xhtml#P7000497027000000000000000041C3A" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003AB0"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.1 </span>The Y86-64 Instruction Set Architecture </span><span class="pcalibre pcalibre1" epub:type="pagebreak">355</span></a></p></li>
<li id="P7000497027000000000000000041C3B" data-uri="chapter04.xhtml#P7000497027000000000000000041C3B" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000041C3C" data-uri="chapter04.xhtml#P7000497027000000000000000041C3C" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003C81"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.2 </span>Logic Design and the Hardware Control Language HCL </span><span class="pcalibre pcalibre1" epub:type="pagebreak">372</span></a></p></li>
<li id="P7000497027000000000000000041C3D" data-uri="chapter04.xhtml#P7000497027000000000000000041C3D" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000041C3E" data-uri="chapter04.xhtml#P7000497027000000000000000041C3E" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D54"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.3 </span>Sequential Y86-64 Implementations </span><span class="pcalibre pcalibre1" epub:type="pagebreak">384</span></a></p></li>
<li id="P7000497027000000000000000041C3F" data-uri="chapter04.xhtml#P7000497027000000000000000041C3F" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000041C40" data-uri="chapter04.xhtml#P7000497027000000000000000041C40" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004152.xhtml#P7000497027000000000000000004152"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.4 </span>General Principles of Pipelining </span><span class="pcalibre pcalibre1" epub:type="pagebreak">412</span></a></p></li>
<li id="P7000497027000000000000000041C41" data-uri="chapter04.xhtml#P7000497027000000000000000041C41" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000041C42" data-uri="chapter04.xhtml#P7000497027000000000000000041C42" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000041EB"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.5 </span>Pipelined Y86-64 Implementations </span><span class="pcalibre pcalibre1" epub:type="pagebreak">421</span></a></p></li>
</ol>
</div>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000041C43" data-uri="chapter04.xhtml#P7000497027000000000000000041C43">
<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000041C44" data-uri="chapter04.xhtml#P7000497027000000000000000041C44">
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000041C45" data-uri="chapter04.xhtml#P7000497027000000000000000041C45"><p id="P7000497027000000000000000041C46" data-uri="chapter04.xhtml#P7000497027000000000000000041C46" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000045BA.xhtml#P70004970270000000000000000045BA"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">4.6 </span><span class="pcalibre label pcalibre1">Summary</span> </span><span class="pcalibre pcalibre1" epub:type="pagebreak">470</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000041C47" data-uri="chapter04.xhtml#P7000497027000000000000000041C47"><p id="P7000497027000000000000000041C48" data-uri="chapter04.xhtml#P7000497027000000000000000041C48" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000045DE.xhtml#P70004970270000000000000000045DE"><span class="pcalibre pcalibre1" epub:type="title">Bibliographic Notes </span><span class="pcalibre pcalibre1" epub:type="pagebreak">473</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000041C49" data-uri="chapter04.xhtml#P7000497027000000000000000041C49"><p id="P7000497027000000000000000041C4A" data-uri="chapter04.xhtml#P7000497027000000000000000041C4A" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000045E1.xhtml#P70004970270000000000000000045E1"><span class="pcalibre pcalibre1" epub:type="title">Homework Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">473</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000041C4B" data-uri="chapter04.xhtml#P7000497027000000000000000041C4B"><p id="P7000497027000000000000000041C4C" data-uri="chapter04.xhtml#P7000497027000000000000000041C4C" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000046A4.xhtml#P70004970270000000000000000046A4"><span class="pcalibre pcalibre1" epub:type="title">Solutions to Practice Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">480</span></a></p></li>
</ol>
</div>
</nav>

<section id="P7000497027000000000000000041C4D" data-uri="chapter04.xhtml#P7000497027000000000000000041C4D" epub:type="introduction" class="introduction pcalibre pcalibre1">
<p id="P7000497027000000000000000041C4E" data-uri="chapter04.xhtml#P7000497027000000000000000041C4E" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003A93" title="352" data-uri="chapter04.xhtml#P7000497027000000000000000003A93" epub:type="pagebreak"></span>Modern microprocessors are among the most complex systems ever created by humans. A single silicon chip, roughly the size of a fingernail, can contain several high-performance processors, large cache memories, and the logic required to interface them to external devices. In terms of performance, the processors implemented on a single chip today dwarf the room-size supercomputers that cost over $10 million just 20 years ago. Even the embedded processors found in everyday appliances such as cell phones, navigation systems, and programmable thermostats are far more powerful than the early developers of computers could ever have envisioned.</p>
<p id="P7000497027000000000000000041C4F" data-uri="chapter04.xhtml#P7000497027000000000000000041C4F" class="pcalibre1 pcalibre calibre2">So far, we have only viewed computer systems down to the level of machine-language programs. We have seen that a processor must execute a sequence of instructions, where each instruction performs some primitive operation, such as adding two numbers. An instruction is encoded in binary form as a sequence of 1 or more bytes. The instructions supported by a particular processor and their byte-level encodings are known as its <i class="calibre5 pcalibre pcalibre1">instruction set architecture</i> (ISA). Different "families" of processors, such as Intel IA32 and x86-64, IBM/Freescale Power, and the ARM processor family, have different ISAs. A program compiled for one type of machine will not run on another. On the other hand, there are many different models of processors within a single family. Each manufacturer produces processors of ever-growing performance and complexity, but the different models remain compatible at the ISA level. Popular families, such as x86-64, have processors supplied by multiple manufacturers. Thus, the ISA provides a conceptual layer of abstraction between compiler writers, who need only know what instructions are permitted and how they are encoded, and processor designers, who must build machines that execute those instructions.</p>
<p id="P7000497027000000000000000041C50" data-uri="chapter04.xhtml#P7000497027000000000000000041C50" class="pcalibre1 pcalibre calibre2">In this chapter, we take a brief look at the design of processor hardware. We study the way a hardware system can execute the instructions of a particular ISA. This view will give you a better understanding of how computers work and the technological challenges faced by computer manufacturers. One important concept is that the actual way a modern processor operates can be quite different from the model of computation implied by the ISA. The ISA model would seem to imply <i class="calibre5 pcalibre pcalibre1">sequential</i> instruction execution, where each instruction is fetched and executed to completion before the next one begins. By executing different parts of multiple instructions simultaneously, the processor can achieve higher performance than if it executed just one instruction at a time. Special mechanisms are used to make sure the processor computes the same results as it would with sequential execution. This idea of using clever tricks to improve performance while maintaining the functionality of a simpler and more abstract model is well known in computer science. Examples include the use of caching in Web browsers and information retrieval data structures such as balanced binary trees and hash tables.</p>
<p id="P7000497027000000000000000041C51" data-uri="chapter04.xhtml#P7000497027000000000000000041C51" class="pcalibre1 pcalibre calibre2">Chances are you will never design your own processor. This is a task for experts working at fewer than 100 companies worldwide. Why, then, should you learn about processor design?</p>
<ul id="P7000497027000000000000000041C52" data-uri="chapter04.xhtml#P7000497027000000000000000041C52" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000041C53" data-uri="chapter04.xhtml#P7000497027000000000000000041C53" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041C54" data-uri="chapter04.xhtml#P7000497027000000000000000041C54" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">It is intellectually interesting and important. </span>There is an intrinsic value in learning how things work. It is especially interesting to learn the inner workings of</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003A9A" data-uri="chapter04.xhtml#P7000497027000000000000000003A9A"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title7 pcalibre pcalibre1" id="P7000497027000000000000000041C55" data-uri="chapter04.xhtml#P7000497027000000000000000041C55" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003A9C" title="353" data-uri="chapter04.xhtml#P7000497027000000000000000003A9C" epub:type="pagebreak"></span><span class="label3 pcalibre pcalibre1">Aside </span>The progress of computer technology</h1></header>
<p id="P7000497027000000000000000041C56" data-uri="chapter04.xhtml#P7000497027000000000000000041C56" class="pcalibre calibre3 pcalibre1">To get a sense of how much computer technology has improved over the past four decades, consider the following two processors.</p>
<p id="P7000497027000000000000000041C57" data-uri="chapter04.xhtml#P7000497027000000000000000041C57" class="pcalibre1 calibre32 pcalibre">The first Cray 1 supercomputer was delivered to Los Alamos National Laboratory in 1976. It was the fastest computer in the world, able to perform as many as 250 million arithmetic operations per second. It came with 8 megabytes of random access memory, the maximum configuration allowed by the hardware. The machine was also very large—it weighed 5,000 kg, consumed 115 kilowatts, and cost $9 million. In total, around 80 of them were manufactured.</p>
<p id="P7000497027000000000000000041C58" data-uri="chapter04.xhtml#P7000497027000000000000000041C58" class="pcalibre1 calibre32 pcalibre">The Apple ARM A7 microprocessor chip, introduced in 2013 to power the iPhone 5S, contains two CPUs, each of which can perform several billion arithmetic operations per second, and 1 gigabyte of random access memory. The entire phone weighs just 112 grams, consumes around 1 watt, and costs less than $800. Over 9 million units were sold in the first weekend of its introduction. In addition to being a powerful computer, it can be used to take pictures, to place phone calls, and to provide driving directions, features never considered for the Cray 1.</p>
<p id="P7000497027000000000000000041C59" data-uri="chapter04.xhtml#P7000497027000000000000000041C59" class="pcalibre1 calibre32 pcalibre">These two systems, spaced just 37 years apart, demonstrate the tremendous progress of semiconductor technology. Whereas the Cray l's CPU was constructed using around 100,000 semiconductor chips, each containing less than 20 transistors, the Apple A7 has over 1 billion transistors on its single chip. The Cray 1's 8-megabyte memory required 8,192 chips, whereas the iPhone's gigabyte memory is contained in a single chip.</p>
</aside>
<p class="pcalibre calibre3 pcalibre1" id="P7000497027000000000000000041C5A" data-uri="chapter04.xhtml#P7000497027000000000000000041C5A">a system that is such a part of the daily lives of computer scientists and engineers and yet remains a mystery to many. Processor design embodies many of the principles of good engineering practice. It requires creating a simple and regular structure to perform a complex task.</p></li>
<li id="P7000497027000000000000000041C5B" data-uri="chapter04.xhtml#P7000497027000000000000000041C5B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041C5C" data-uri="chapter04.xhtml#P7000497027000000000000000041C5C" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Understanding how the processor works aids in understanding how the overall computer system works. </span>In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a>, we will look at the memory system and the techniques used to create an image of a very large memory with a very fast access time. Seeing the processor side of the processor-memory interface will make this presentation more complete.</p></li>
<li id="P7000497027000000000000000041C5D" data-uri="chapter04.xhtml#P7000497027000000000000000041C5D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041C5E" data-uri="chapter04.xhtml#P7000497027000000000000000041C5E" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Although few people design processors, many design hardware systems that contain processors. </span>This has become commonplace as processors are embedded into real-world systems such as automobiles and appliances. Embedded-system designers must understand how processors work, because these systems are generally designed and programmed at a lower level of abstraction than is the case for desktop and server-based systems.</p></li>
<li id="P7000497027000000000000000041C5F" data-uri="chapter04.xhtml#P7000497027000000000000000041C5F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041C60" data-uri="chapter04.xhtml#P7000497027000000000000000041C60" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">You just might work on a processor design. </span>Although the number of companies producing microprocessors is small, the design teams working on those processors are already large and growing. There can be over 1,000 people involved in the different aspects of a major processor design.</p></li>
</ul>
<p id="P7000497027000000000000000041C61" data-uri="chapter04.xhtml#P7000497027000000000000000041C61" class="pcalibre1 pcalibre calibre2">In this chapter, we start by defining a simple instruction set that we use as a running example for our processor implementations. We call this the "Y86-64" <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003AA9" title="354" data-uri="chapter04.xhtml#P7000497027000000000000000003AA9" epub:type="pagebreak"></span>instruction set, because it was inspired by the x86-64 instruction set. Compared with x86-64, the Y86-64 instruction set has fewer data types, instructions, and addressing modes. It also has a simple byte-level encoding, making the machine code less compact than the comparable x86-64 code, but also much easier to design the CPU's decoding logic. Even though the Y86-64 instruction set is very simple, it is sufficiently complete to allow us to write programs manipulating integer data. Designing a processor to implement Y86-64 requires us to deal with many of the challenges faced by processor designers.</p>
<p id="P7000497027000000000000000041C62" data-uri="chapter04.xhtml#P7000497027000000000000000041C62" class="pcalibre1 pcalibre calibre2">We then provide some background on digital hardware design. We describe the basic building blocks used in a processor and how they are connected together and operated. This presentation builds on our discussion of Boolean algebra and bit-level operations from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000279.xhtml#P7000497027000000000000000000279"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">2</span></a>. We also introduce a simple language, HCL (for "hardware control language"), to describe the control portions of hardware systems. We will later use this language to describe our processor designs. Even if you already have some background in logic design, read this section to understand our particular notation.</p>
<p id="P7000497027000000000000000041C63" data-uri="chapter04.xhtml#P7000497027000000000000000041C63" class="pcalibre1 pcalibre calibre2">As a first step in designing a processor, we present a functionally correct, but somewhat impractical, Y86-64 processor based on <i class="calibre5 pcalibre pcalibre1">sequential</i> operation. This processor executes a complete Y86-64 instruction on every clock cycle. The clock must run slowly enough to allow an entire series of actions to complete within one cycle. Such a processor could be implemented, but its performance would be well below what could be achieved for this much hardware.</p>
<p id="P7000497027000000000000000041C64" data-uri="chapter04.xhtml#P7000497027000000000000000041C64" class="pcalibre1 pcalibre calibre2">With the sequential design as a basis, we then apply a series of transformations to create a <i class="calibre5 pcalibre pcalibre1">pipelined</i> processor. This processor breaks the execution of each instruction into five steps, each of which is handled by a separate section or <i class="calibre5 pcalibre pcalibre1">stage</i> of the hardware. Instructions progress through the stages of the pipeline, with one instruction entering the pipeline on each clock cycle. As a result, the processor can be executing the different steps of up to five instructions simultaneously. Making this processor preserve the sequential behavior of the Y86-64 ISA requires handling a variety of <i class="calibre5 pcalibre pcalibre1">hazard</i> conditions, where the location or operands of one instruction depend on those of other instructions that are still in the pipeline.</p>
<p id="P7000497027000000000000000041C65" data-uri="chapter04.xhtml#P7000497027000000000000000041C65" class="pcalibre1 pcalibre calibre2">We have devised a variety of tools for studying and experimenting with our processor designs. These include an assembler for Y86-64, a simulator for running Y86-64 programs on your machine, and simulators for two sequential and one pipelined processor design. The control logic for these designs is described by files in HCL notation. By editing these files and recompiling the simulator, you can alter and extend the simulator's behavior. A number of exercises are provided that involve implementing new instructions and modifying how the machine processes instructions. Testing code is provided to help you evaluate the correctness of your modifications. These exercises will greatly aid your understanding of the material and will give you an appreciation for the many different design alternatives faced by processor designers.</p>
<p id="P7000497027000000000000000041C66" data-uri="chapter04.xhtml#P7000497027000000000000000041C66" class="pcalibre1 pcalibre calibre2">Web Aside <span class="smallcaps pcalibre pcalibre1">arch:vlog </span>on page 467 presents a representation of our pipelined Y86-64 processor in the Verilog hardware description language. This involves creating modules for the basic hardware building blocks and for the overall processor structure. We automatically translate the HCL description of the control <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003AAF" title="355" data-uri="chapter04.xhtml#P7000497027000000000000000003AAF" epub:type="pagebreak"></span>logic into Verilog. By first debugging the HCL description with our simulators, we eliminate many of the tricky bugs that would otherwise show up in the hardware design. Given a Verilog description, there are commercial and open-source tools to support simulation and <i class="calibre5 pcalibre pcalibre1">logic synthesis</i>, generating actual circuit designs for the microprocessors. So, although much of the effort we expend here is to create pictorial and textual descriptions of a system, much as one would when writing software, the fact that these designs can be automatically synthesized demonstrates that we are indeed creating a system that can be realized as hardware.</p>
</section>

</section>
<!--EOF:P7000497027000000000000000003AB0-->
<!--EOF:P7000497027000000000000000003C81-->
<!--EOF:P7000497027000000000000000003D54-->
<!--EOF:P7000497027000000000000000004152-->
<!--EOF:P70004970270000000000000000041EB-->


<!--EOF:P70004970270000000000000000045BA-->
<!--EOF:P70004970270000000000000000045DE-->
<!--EOF:P70004970270000000000000000045E1-->
<!--EOF:P70004970270000000000000000046A4-->

</section></body></html>
