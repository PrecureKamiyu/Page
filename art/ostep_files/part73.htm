<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.8 No More Oracle</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part72.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part74.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">7.8 No More Oracle</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">With a basic approach to I/O in place, we come to our final assump- tion: that the scheduler knows the length of each job. As we said before, this is likely the worst assumption we could make. In fact, in a general- purpose OS (like the ones we care about), the OS usually knows very little about the length of each job. Thus, how can we build an approach that be- haves like SJF/STCF without such <i>a priori </i>knowledge? Further, how can we incorporate some of the ideas we have seen with the RR scheduler so that response time is also quite good?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part72.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part74.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
