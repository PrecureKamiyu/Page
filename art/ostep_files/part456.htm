<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>41.4 Policies: How To Allocate Files and Directories</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part455.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part457.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">41.4 Policies: How To Allocate Files and Directories</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">With this group structure in place, FFS now has to decide how to place files and directories and associated metadata on disk to improve perfor- mance. The basic mantra is simple: <i>keep related stuff together </i>(and its corol- lary, keep unrelated stuff far apart).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Thus, to obey the mantra, FFS has to decide what is “related” and place it within the same block group; conversely, unrelated items should be placed into different block groups. To achieve this end, FFS makes use of a few simple placement heuristics.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The first is the placement of directories. FFS employs a simple ap- proach: find the cylinder group with a low number of allocated directo- ries (because we want to balance directories across groups) and a high number of free inodes (because we want to subsequently be able to allo- cate a bunch of files), and put the directory data and inode in that group. Of course, other heuristics could be used here (e.g., taking into account the number of free data blocks).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">For files, FFS does two things. First, it makes sure (in the general case) to allocate the data blocks of a file in the same group as its inode, thus preventing long seeks between inode and data (as in the old file sys- tem). Second, it places all files that are in the same directory in the cylin- der group of the directory they are in. Thus, if a user creates four files,</p><p class="s41" style="padding-left: 68pt;text-indent: 0pt;line-height: 88%;text-align: justify;">/dir1/1.txt<span class="p">, </span>/dir1/2.txt<span class="p">, </span>/dir1/3.txt<span class="p">, and </span>/dir99/4.txt<span class="p">, FFS would try to place the first three near one another (same group) and the fourth far away (in some other group).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;line-height: 9pt;text-align: center;">FFS Locality</p><p style="text-indent: 0pt;text-align: left;"><span><img width="214" height="213" alt="image" src="Image_596.png"/></span></p><p class="s48" style="text-indent: 0pt;line-height: 70%;text-align: left;">Trace Random</p><p style="text-indent: 0pt;text-align: left;"/><p class="s48" style="padding-left: 90pt;text-indent: 0pt;line-height: 9pt;text-align: left;">100%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">80%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Cumulative Frequency</p><p style="text-indent: 0pt;text-align: left;"/><p class="s48" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">60%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">40%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 94pt;text-indent: 0pt;text-align: left;">20%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-left: 39pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0%</p><p class="s48" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0   2   4   6   8   10</p><p class="s48" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">Path Difference</p><p style="padding-top: 4pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">Figure 41.1: <b>FFS Locality For SEER Traces</b></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">It should be noted that these heuristics are not based on extensive studies of file-system traffic or anything particularly nuanced; rather, they are based on good old-fashioned common sense (isn’t that what CS stands for after all?). Files in a directory <i>are </i>often accessed together (imagine compiling a bunch of files and then linking them into a single executable). Because they are, FFS will often improve performance, making sure that seeks between related files are short.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part455.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part457.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
