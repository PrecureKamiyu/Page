<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>2.3 Electronic Mail in the Internet</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link></head><body epub:type="bodymatter">
<section id="P7001011952000000000000000000B88" class="level1"><header><h1 class="title" id="P7001011952000000000000000009C45" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C45" epub:type="title"><span class="number">2.3</span> Electronic Mail in the Internet</h1></header>
<p id="P7001011952000000000000000009C46" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C46">Electronic mail has been around since the beginning of the Internet. It was the most popular application when the Internet was in its infancy <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C03" data-foobar="7">[Segaller 1998]</a>, and has become more elaborate and powerful over the years. It remains one of the Internet’s most important and utilized applications.</p>
<p id="P7001011952000000000000000009C47" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C47">As with ordinary postal mail, e-mail is an asynchronous communication medium—people send and read messages when it is convenient for them, without having to coordinate with other people’s schedules. In contrast with postal mail, electronic mail is fast, easy to distribute, and inexpensive. Modern e-mail has many powerful features, including messages with attachments, hyperlinks, HTML-formatted text, and embedded photos.</p>
<p id="P7001011952000000000000000009C48" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C48">In this section, we examine the application-layer protocols that are at the heart of Internet e-mail. But before we jump into an in-depth discussion of these protocols, let’s take a high-level view of the Internet mail system and its key components.</p>
<p id="P7001011952000000000000000009C49" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C49"><a class="xref" href="#P7001011952000000000000000000B94" data-foobar="1"><span class="label">Figure</span> <span class="number">2.14</span></a> presents a high-level view of the Internet mail system. We see from this diagram that it has three major components: <span class="keyword" id="P7001011952000000000000000000B8E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B8E"><b>user agents</b></span>, <span class="keyword" id="P7001011952000000000000000000B8F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B8F"><b>mail servers</b></span>, and the <span class="keyword" id="P7001011952000000000000000000B90" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B90"><b>Simple Mail Transfer Protocol (SMTP)</b></span>. We now describe each of these components in the context of a sender, Alice, sending an e-mail message to a recipient, Bob. User agents allow users to read, reply to, forward, save, and compose messages. Microsoft Outlook and Apple Mail are examples of user agents for e-mail. When Alice is finished composing her message, her user agent sends the message to her mail server, where the message is placed in the mail server’s outgoing message queue. When Bob wants to read a message, his user agent retrieves the message from his mailbox in his mail server.</p>
<p id="P7001011952000000000000000009C4A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C4A">Mail servers form the core of the e-mail infrastructure. Each recipient, such as Bob, has a <span class="keyword" id="P7001011952000000000000000000B92" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B92"><b>mailbox</b></span> located in one of the mail servers. Bob’s mailbox manages and<span class="pagebreak" title="117" id="P7001011952000000000000000000B93" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B93" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000B94" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B94">
<img alt="Illustration of an e-mail system." height="620" width="706" aria-describedby="P7001011952000000000000000000B98" id="P7001011952000000000000000009C4B" data-uri="P700101195200000000000000000552C" src="../images/4055102014.png"></img>
<figcaption id="P7001011952000000000000000009C4C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C4C"><header><h1 class="title" id="P7001011952000000000000000009C4D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C4D" epub:type="title"><span class="label">Figure </span><span class="number">2.14</span> A high-level view of the Internet e-mail system</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000B98" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B98" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102014.xhtml#la_4055102014"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009C50" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C50">maintains the messages that have been sent to him. A typical message starts its journey in the sender’s user agent, travels to the sender’s mail server, and travels to the recipient’s mail server, where it is deposited in the recipient’s mailbox. When Bob wants to access the messages in his mailbox, the mail server containing his mailbox authenticates Bob (with usernames and passwords). Alice’s mail server must also deal with failures in Bob’s mail server. If Alice’s server cannot deliver mail to Bob’s server, Alice’s server holds the message in a <span class="keyword" id="P7001011952000000000000000000B9C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B9C"><b>message queue</b></span> and attempts to transfer the message later. Reattempts are often done every 30 minutes or so; if there is no success after several days, the server removes the message and notifies the sender (Alice) with an e-mail message.</p>
<p id="P7001011952000000000000000009C51" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C51">SMTP is the principal application-layer protocol for Internet electronic mail. It uses the reliable data transfer service of TCP to transfer mail from the sender’s mail server to the recipient’s mail server. As with most application-layer protocols, SMTP <span class="pagebreak" title="118" id="P7001011952000000000000000000B9E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B9E" epub:type="pagebreak" role="doc-pagebreak"></span>has two sides: a client side, which executes on the sender’s mail server, and a server side, which executes on the recipient’s mail server. Both the client and server sides of SMTP run on every mail server. When a mail server sends mail to other mail servers, it acts as an SMTP client. When a mail server receives mail from other mail servers, it acts as an SMTP server.</p>
<section id="P7001011952000000000000000000B9F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000B9F" class="level2"><header><h1 class="title" id="P7001011952000000000000000009C52" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C52" epub:type="title"><span class="number">2.3.1</span> SMTP</h1></header>
<p id="P7001011952000000000000000009C53" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C53">SMTP, defined in RFC 5321, is at the heart of Internet electronic mail. As mentioned above, SMTP transfers messages from senders’ mail servers to the recipients’ mail servers. SMTP is much older than HTTP. (The original SMTP RFC dates back to 1982, and SMTP was around long before that.) Although SMTP has numerous wonderful qualities, as evidenced by its ubiquity in the Internet, it is nevertheless a legacy technology that possesses certain archaic characteristics. For example, it restricts the body (not just the headers) of all mail messages to simple 7-bit ASCII. This restriction made sense in the early 1980s when transmission capacity was scarce and no one was e-mailing large attachments or large image, audio, or video files. But today, in the multimedia era, the 7-bit ASCII restriction is a bit of a pain—it requires binary multimedia data to be encoded to ASCII before being sent over SMTP; and it requires the corresponding ASCII message to be decoded back to binary after SMTP transport. Recall from <a class="xref" href="fileP7001011952000000000000000000A27.xhtml#P7001011952000000000000000000A27" data-foobar="7"><span class="label">Section</span> <span class="number">2.2</span></a> that HTTP does not require multimedia data to be ASCII encoded before transfer.</p>
<p id="P7001011952000000000000000009C54" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C54">To illustrate the basic operation of SMTP, let’s walk through a common scenario. Suppose Alice wants to send Bob a simple ASCII message.</p>
<ol id="P7001011952000000000000000009C55" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C55">
<li id="P7001011952000000000000000009C56" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C56"><p id="P7001011952000000000000000009C57" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C57">Alice invokes her user agent for e-mail, provides Bob’s e-mail address (for example, <code id="P7001011952000000000000000009C58" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C58"><a class="email" href="mailto:bob@someschool.edu">bob@someschool.edu</a></code>), composes a message, and instructs the user agent to send the message.</p></li>
<li id="P7001011952000000000000000009C59" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C59"><p id="P7001011952000000000000000009C5A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5A">Alice’s user agent sends the message to her mail server, where it is placed in a message queue.</p></li>
<li id="P7001011952000000000000000009C5B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5B"><p id="P7001011952000000000000000009C5C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5C">The client side of SMTP, running on Alice’s mail server, sees the message in the message queue. It opens a TCP connection to an SMTP server, running on Bob’s mail server.</p></li>
<li id="P7001011952000000000000000009C5D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5D"><p id="P7001011952000000000000000009C5E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5E">After some initial SMTP handshaking, the SMTP client sends Alice’s message into the TCP connection.</p></li>
<li id="P7001011952000000000000000009C5F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C5F"><p id="P7001011952000000000000000009C60" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C60">At Bob’s mail server, the server side of SMTP receives the message. Bob’s mail server then places the message in Bob’s mailbox.</p></li>
<li id="P7001011952000000000000000009C61" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C61"><p id="P7001011952000000000000000009C62" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C62">Bob invokes his user agent to read the message at his convenience.</p></li>
</ol>
<p class="continued" id="P7001011952000000000000000009C63" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C63">The scenario is summarized in <a class="xref" href="#P7001011952000000000000000000BB4" data-foobar="1"><span class="label">Figure</span> <span class="number">2.15</span></a>.</p>
<p id="P7001011952000000000000000009C64" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C64">It is important to observe that SMTP does not normally use intermediate mail servers for sending mail, even when the two mail servers are located at opposite ends of the world. If Alice’s server is in Hong Kong and Bob’s server is in St. Louis, the TCP<span class="pagebreak" title="119" id="P7001011952000000000000000000BB3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BB3" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000BB4" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BB4">
<img alt="An illustration of Alice's message to Bob." height="250" width="788" aria-describedby="P7001011952000000000000000000BB8" id="P7001011952000000000000000009C65" data-uri="P700101195200000000000000000552D" src="../images/4055102015.png"></img>
<figcaption id="P7001011952000000000000000009C66" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C66"><header><h1 class="title" id="P7001011952000000000000000009C67" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C67" epub:type="title"><span class="label">Figure </span><span class="number">2.15</span> Alice sends a message to Bob</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000BB8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BB8" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102015.xhtml#la_4055102015"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009C6F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C6F">connection is a direct connection between the Hong Kong and St. Louis servers. In particular, if Bob’s mail server is down, the message remains in Alice’s mail server and waits for a new attempt—the message does not get placed in some intermediate mail server.</p>
<p id="P7001011952000000000000000009C70" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C70">Let’s now take a closer look at how SMTP transfers a message from a sending mail server to a receiving mail server. We will see that the SMTP protocol has many similarities with protocols that are used for face-to-face human interaction. First, the client SMTP (running on the sending mail server host) has TCP establish a connection to port 25 at the server SMTP (running on the receiving mail server host). If the server is down, the client tries again later. Once this connection is established, the server and client perform some application-layer handshaking—just as humans often introduce themselves before transferring information from one to another, SMTP clients and servers introduce themselves before transferring information. During this SMTP handshaking phase, the SMTP client indicates the e-mail address of the sender (the person who generated the message) and the e-mail address of the recipient. Once the SMTP client and server have introduced themselves to each other, the client sends the message. SMTP can count on the reliable data transfer service of TCP to get the message to the server without errors. The client then repeats this process over the same TCP connection if it has other messages to send to the server; otherwise, it instructs TCP to close the connection.</p>
<p id="P7001011952000000000000000009C71" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C71">Let’s next take a look at an example transcript of messages exchanged between an SMTP client (C) and an SMTP server (S). The hostname of the client is <code id="P7001011952000000000000000009C72" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C72"><a class="ulink" href="http://crepes.fr">crepes.fr</a></code> and the hostname of the server is <code id="P7001011952000000000000000009C73" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C73"><span class="url-obsolete">hamburger.edu</span></code>. The ASCII text lines prefaced with <code id="P7001011952000000000000000009C74" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C74">C:</code> are exactly the lines the client sends into its TCP socket, and the ASCII text lines prefaced with <code id="P7001011952000000000000000009C75" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C75">S:</code> are exactly the lines the server sends into its TCP socket. The following transcript begins as soon as the TCP connection is established.</p>
<pre id="P7001011952000000000000000009C76" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C76"><code id="P7001011952000000000000000009C77" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C77">S:  220 hamburger.edu
C:  HELO crepes.fr
<span class="pagebreak" title="120" id="P7001011952000000000000000000BC9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BC9" epub:type="pagebreak" role="doc-pagebreak"></span>S:  250 Hello crepes.fr, pleased to meet you
C:  MAIL FROM: &lt;alice@crepes.fr&gt;
S:  250 alice@crepes.fr ... Sender ok
C:  RCPT TO: &lt;bob@hamburger.edu&gt;
S:  250 bob@hamburger.edu ... Recipient ok
C:  DATA
S:  354 Enter mail, end with ”.” on a line by itself
C:  Do you like ketchup?
C:  How about pickles?
C:  .
S:  250 Message accepted for delivery
C:  QUIT
S:  221 hamburger.edu closing connection</code></pre>
<p class="continued" id="P7001011952000000000000000009C78" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C78">In the example above, the client sends a message (“<code id="P7001011952000000000000000009C79" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C79">Do you like ketchup? How about pickles?</code>”) from mail server <code id="P7001011952000000000000000009C7A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7A"><a class="ulink" href="http://crepes.fr">crepes.fr</a></code> to mail server <code id="P7001011952000000000000000009C7B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7B"><span class="url-obsolete">hamburger.edu</span></code>. As part of the dialogue, the client issued five commands: <code id="P7001011952000000000000000009C7C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7C">HELO</code> (an abbreviation for HELLO), <code id="P7001011952000000000000000009C7D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7D">MAIL FROM</code>, <code id="P7001011952000000000000000009C7E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7E">RCPT TO</code>, <code id="P7001011952000000000000000009C7F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C7F">DATA</code>, and <code id="P7001011952000000000000000009C80" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C80">QUIT</code>. These commands are self-explanatory. The client also sends a line consisting of a single period, which indicates the end of the message to the server. (In ASCII jargon, each message ends with <code id="P7001011952000000000000000009C81" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C81">CRLF.CRLF</code>, where <code id="P7001011952000000000000000009C82" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C82">CR</code> and <code id="P7001011952000000000000000009C83" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C83">LF</code> stand for carriage return and line feed, respectively.) The server issues replies to each command, with each reply having a reply code and some (optional) English-language explanation. We mention here that SMTP uses persistent connections: If the sending mail server has several messages to send to the same receiving mail server, it can send all of the messages over the same TCP connection. For each message, the client begins the process with a new <code id="P7001011952000000000000000009C84" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C84">MAIL FROM: <a class="ulink" href="http://crepes.fr">crepes.fr</a></code>, designates the end of message with an isolated period, and issues <code id="P7001011952000000000000000009C85" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C85">QUIT</code> only after all messages have been sent.</p>
<p id="P7001011952000000000000000009C86" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C86">It is highly recommended that you use Telnet to carry out a direct dialogue with an SMTP server. To do this, issue</p>
<pre id="P7001011952000000000000000009C87" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C87"><code id="P7001011952000000000000000009C88" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C88">telnet serverName 25</code></pre>
<p class="continued" id="P7001011952000000000000000009C89" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C89">where <code id="P7001011952000000000000000009C8A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8A">serverName</code> is the name of a local mail server. When you do this, you are simply establishing a TCP connection between your local host and the mail server. After typing this line, you should immediately receive the <code id="P7001011952000000000000000009C8B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8B">220</code> reply from the server. Then issue the SMTP commands <code id="P7001011952000000000000000009C8C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8C">HELO</code>, <code id="P7001011952000000000000000009C8D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8D">MAIL FROM</code>, <code id="P7001011952000000000000000009C8E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8E">RCPT TO</code>, <code id="P7001011952000000000000000009C8F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C8F">DATA</code>, <code id="P7001011952000000000000000009C90" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C90">CRLF.CRLF</code>, and <code id="P7001011952000000000000000009C91" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C91">QUIT</code> at the appropriate times. It is also highly recommended that you do Programming Assignment 3 at the end of this chapter. In that assignment, you’ll build a simple user agent that implements the client side of SMTP. It will allow you to send an e-mail message to an arbitrary recipient via a local mail server.</p>
</section>
<section id="P7001011952000000000000000000BE4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BE4" class="level2"><header><h1 class="title" id="P7001011952000000000000000009C92" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C92" epub:type="title"><span class="pagebreak" title="121" id="P7001011952000000000000000000BE6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BE6" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">2.3.2</span> Comparison with HTTP</h1></header>
<p id="P7001011952000000000000000009C93" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C93">Let’s now briefly compare SMTP with HTTP. Both protocols are used to transfer files from one host to another: HTTP transfers files (also called objects) from a Web server to a Web client (typically a browser); SMTP transfers files (that is, e-mail messages) from one mail server to another mail server. When transferring the files, both persistent HTTP and SMTP use persistent connections. Thus, the two protocols have common characteristics. However, there are important differences. First, HTTP is mainly a <span class="keyword" id="P7001011952000000000000000000BE8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BE8"><b>pull protocol</b></span>—someone loads information on a Web server and users use HTTP to pull the information from the server at their convenience. In particular, the TCP connection is initiated by the machine that wants to receive the file. On the other hand, SMTP is primarily a <span class="keyword" id="P7001011952000000000000000000BE9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BE9"><b>push protocol</b></span>—the sending mail server pushes the file to the receiving mail server. In particular, the TCP connection is initiated by the machine that wants to send the file.</p>
<p id="P7001011952000000000000000009C94" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C94">A second difference, which we alluded to earlier, is that SMTP requires each message, including the body of each message, to be in 7-bit ASCII format. If the message contains characters that are not 7-bit ASCII (for example, French characters with accents) or contains binary data (such as an image file), then the message has to be encoded into 7-bit ASCII. HTTP data does not impose this restriction.</p>
<p id="P7001011952000000000000000009C95" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C95">A third important difference concerns how a document consisting of text and images (along with possibly other media types) is handled. As we learned in <a class="xref" href="fileP7001011952000000000000000000A27.xhtml#P7001011952000000000000000000A27" data-foobar="7"><span class="label">Section</span> <span class="number">2.2</span></a>, HTTP encapsulates each object in its own HTTP response message. SMTP places all of the message’s objects into one message.</p>
</section>
<section id="P7001011952000000000000000000BEC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BEC" class="level2"><header><h1 class="title" id="P7001011952000000000000000009C96" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C96" epub:type="title"><span class="number">2.3.3</span> Mail Message Formats</h1></header>
<p id="P7001011952000000000000000009C97" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C97">When Alice writes an ordinary snail-mail letter to Bob, she may include all kinds of peripheral header information at the top of the letter, such as Bob’s address, her own return address, and the date. Similarly, when an e-mail message is sent from one person to another, a header containing peripheral information precedes the body of the message itself. This peripheral information is contained in a series of header lines, which are defined in RFC 5322. The header lines and the body of the message are separated by a blank line (that is, by <code id="P7001011952000000000000000009C98" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C98">CRLF</code>). RFC 5322 specifies the exact format for mail header lines as well as their semantic interpretations. As with HTTP, each header line contains readable text, consisting of a keyword followed by a colon followed by a value. Some of the keywords are required and others are optional. Every header must have a <code id="P7001011952000000000000000009C99" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C99">From:</code> header line and a <code id="P7001011952000000000000000009C9A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9A">To:</code> header line; a header may include a <code id="P7001011952000000000000000009C9B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9B">Subject:</code> header line as well as other optional header lines. It is important to note that these header lines are <i>different</i> from the SMTP commands we studied in <a class="xref" href="fileP7001011952000000000000000000C38.xhtml#P7001011952000000000000000000C45" data-foobar="7"><span class="label">Section</span> <span class="number">2.4.1</span></a> (even though they contain some common words such as “<i>from</i>” and “<i>to</i>”). The commands in that section were part of the SMTP handshaking protocol; the header lines examined in this section are part of the mail message itself.</p>
<p id="P7001011952000000000000000009C9C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9C"><span class="pagebreak" title="122" id="P7001011952000000000000000000BF4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BF4" epub:type="pagebreak" role="doc-pagebreak"></span>A typical message header looks like this:</p>
<pre id="P7001011952000000000000000009C9D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9D"><code id="P7001011952000000000000000009C9E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9E">From: alice@crepes.fr
To: bob@hamburger.edu
Subject: Searching for the meaning of life.</code></pre>
<p class="continued" id="P7001011952000000000000000009C9F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009C9F">After the message header, a blank line follows; then the message body (in ASCII) follows. You should use Telnet to send a message to a mail server that contains some header lines, including the <code id="P7001011952000000000000000009CA0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA0">Subject:</code> header line. To do this, issue <code id="P7001011952000000000000000009CA1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA1">telnet serverName 25,</code> as discussed in <a class="xref" href="fileP7001011952000000000000000000C38.xhtml#P7001011952000000000000000000C45" data-foobar="7"><span class="label">Section</span> <span class="number">2.4.1</span></a>.</p>
</section>
<section id="P7001011952000000000000000000BFA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BFA" class="level2"><header><h1 class="title" id="P7001011952000000000000000009CA2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA2" epub:type="title"><span class="number">2.3.4</span> Mail Access Protocols</h1></header>
<p id="P7001011952000000000000000009CA3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA3">Once SMTP delivers the message from Alice’s mail server to Bob’s mail server, the message is placed in Bob’s mailbox. Throughout this discussion we have tacitly assumed that Bob reads his mail by logging onto the server host and then executing a mail reader that runs on that host. Up until the early 1990s this was the standard way of doing things. But today, mail access uses a client-server architecture—the typical user reads e-mail with a client that executes on the user’s end system, for example, on an office PC, a laptop, or a smartphone. By executing a mail client on a local PC, users enjoy a rich set of features, including the ability to view multimedia messages and attachments.</p>
<p id="P7001011952000000000000000009CA4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA4">Given that Bob (the recipient) executes his user agent on his local PC, it is natural to consider placing a mail server on his local PC as well. With this approach, Alice’s mail server would dialogue directly with Bob’s PC. There is a problem with this approach, however. Recall that a mail server manages mailboxes and runs the client and server sides of SMTP. If Bob’s mail server were to reside on his local PC, then Bob’s PC would have to remain always on, and connected to the Internet, in order to receive new mail, which can arrive at any time. This is impractical for many Internet users. Instead, a typical user runs a user agent on the local PC but accesses its mailbox stored on an always-on shared mail server. This mail server is shared with other users and is typically maintained by the user’s ISP (for example, university or company).</p>
<p id="P7001011952000000000000000009CA5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA5">Now let’s consider the path an e-mail message takes when it is sent from Alice to Bob. We just learned that at some point along the path the e-mail message needs to be deposited in Bob’s mail server. This could be done simply by having Alice’s user agent send the message directly to Bob’s mail server. And this could be done with SMTP—indeed, SMTP has been designed for pushing e-mail from one host to another. However, typically the sender’s user agent does not dialogue directly with the recipient’s mail server. Instead, as shown in <a class="xref" href="#P7001011952000000000000000000C00" data-foobar="1"><span class="label">Figure</span> <span class="number">2.16</span></a>, Alice’s user agent uses SMTP to push the e-mail message into her mail server, then Alice’s mail server uses SMTP (as an SMTP client) to relay the e-mail message to Bob’s mail server. Why the two-step procedure? Primarily because without relaying through Alice’s mail server, Alice’s user agent doesn’t have any recourse to an unreachable destination<span class="pagebreak" title="123" id="P7001011952000000000000000000BFF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000BFF" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000C00" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C00">
<img alt="An illustration of e-mail protocols and their communicating entities." height="153" width="785" aria-describedby="P7001011952000000000000000000C04" id="P7001011952000000000000000009CA6" data-uri="P700101195200000000000000000552E" src="../images/4055102016.png"></img>
<figcaption id="P7001011952000000000000000009CA7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA7"><header><h1 class="title" id="P7001011952000000000000000009CA8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CA8" epub:type="title"><span class="label">Figure </span><span class="number">2.16</span> E-mail protocols and their communicating entities</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000C04" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C04" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102016.xhtml#la_4055102016"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009CAA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAA">mail server. By having Alice first deposit the e-mail in her own mail server, Alice’s mail server can repeatedly try to send the message to Bob’s mail server, say every 30 minutes, until Bob’s mail server becomes operational. (And if Alice’s mail server is down, then she has the recourse of complaining to her system administrator!) The SMTP RFC defines how the SMTP commands can be used to relay a message across multiple SMTP servers.</p>
<p id="P7001011952000000000000000009CAB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAB">But there is still one missing piece to the puzzle! How does a recipient like Bob, running a user agent on his local PC, obtain his messages, which are sitting in a mail server within Bob’s ISP? Note that Bob’s user agent can’t use SMTP to obtain the messages because obtaining the messages is a pull operation, whereas SMTP is a push protocol. The puzzle is completed by introducing a special mail access protocol that transfers messages from Bob’s mail server to his local PC. There are currently a number of popular mail access protocols, including <span class="keyword" id="P7001011952000000000000000000C08" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C08"><b>Post Office Protocol—Version 3 (POP3)</b></span>, <span class="keyword" id="P7001011952000000000000000000C09" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C09"><b>Internet Mail Access Protocol (IMAP)</b></span>, and HTTP.</p>
<p id="P7001011952000000000000000009CAC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAC"><a class="xref" href="#P7001011952000000000000000000C00" data-foobar="1"><span class="label">Figure</span> <span class="number">2.16</span></a> provides a summary of the protocols that are used for Internet mail: SMTP is used to transfer mail from the sender’s mail server to the recipient’s mail server; SMTP is also used to transfer mail from the sender’s user agent to the sender’s mail server. A mail access protocol, such as POP3, is used to transfer mail from the recipient’s mail server to the recipient’s user agent.</p>
<section id="P7001011952000000000000000000C0B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C0B" class="level3"><header><h1 class="title" id="P7001011952000000000000000009CAD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAD" epub:type="title">POP3</h1></header>
<p id="P7001011952000000000000000009CAE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAE">POP3 is an extremely simple mail access protocol. It is defined in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B1A" data-foobar="7">[RFC 1939]</a>, which is short and quite readable. Because the protocol is so simple, its functionality is rather limited. POP3 begins when the user agent (the client) opens a TCP connection to the mail server (the server) on port 110. With the TCP connection established, POP3 progresses through three phases: authorization, transaction, and update. During the first phase, authorization, the user agent sends a username and a password (in the clear) to authenticate the user. During the second phase, transaction, the user agent retrieves messages; also during this phase, the user agent can mark messages for deletion, remove deletion marks, and obtain mail statistics. The third phase, update, occurs after the client has issued the <code id="P7001011952000000000000000009CAF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CAF">quit</code> command, ending the POP3 session; at this time, the mail server deletes the messages that were marked for deletion.</p>
<p id="P7001011952000000000000000009CB0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB0"><span class="pagebreak" title="124" id="P7001011952000000000000000000C10" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C10" epub:type="pagebreak" role="doc-pagebreak"></span>In a POP3 transaction, the user agent issues commands, and the server responds to each command with a reply. There are two possible responses: <code id="P7001011952000000000000000009CB1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB1">+OK</code> (sometimes followed by server-to-client data), used by the server to indicate that the previous command was fine; and <code id="P7001011952000000000000000009CB2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB2">-ERR</code>, used by the server to indicate that something was wrong with the previous command.</p>
<p id="P7001011952000000000000000009CB3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB3">The authorization phase has two principal commands: <code id="P7001011952000000000000000009CB4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB4">user</code> <code id="P7001011952000000000000000009CB5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB5">&lt;username&gt;</code> and <code id="P7001011952000000000000000009CB6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB6">pass</code> <code id="P7001011952000000000000000009CB7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB7">&lt;password&gt;</code>. To illustrate these two commands, we suggest that you Telnet directly into a POP3 server, using port 110, and issue these commands. Suppose that <code id="P7001011952000000000000000009CB8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB8">mailServer</code> is the name of your mail server. You will see something like:</p>
<pre id="P7001011952000000000000000009CB9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CB9"><code id="P7001011952000000000000000009CBA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBA">telnet mailServer 110
+OK POP3 server ready
user bob
+OK
pass hungry
+OK user successfully logged on</code></pre>
<p class="continued" id="P7001011952000000000000000009CBB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBB">If you misspell a command, the POP3 server will reply with an <code id="P7001011952000000000000000009CBC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBC">-ERR</code> message.</p>
<p id="P7001011952000000000000000009CBD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBD">Now let’s take a look at the transaction phase. A user agent using POP3 can often be configured (by the user) to “download and delete” or to “download and keep.” The sequence of commands issued by a POP3 user agent depends on which of these two modes the user agent is operating in. In the download-and-delete mode, the user agent will issue the <code id="P7001011952000000000000000009CBE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBE">list</code>, <code id="P7001011952000000000000000009CBF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CBF">retr</code>, and <code id="P7001011952000000000000000009CC0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC0">dele</code> commands. As an example, suppose the user has two messages in his or her mailbox. In the dialogue below, <code id="P7001011952000000000000000009CC1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC1">C:</code> (standing for client) is the user agent and <code id="P7001011952000000000000000009CC2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC2">S:</code> (standing for server) is the mail server. The transaction will look something like:</p>
<pre id="P7001011952000000000000000009CC3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC3"><code id="P7001011952000000000000000009CC4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC4">C: list
S: 1 498
S: 2 912
S: .
C: retr 1
S: (blah blah ...
S: .................
S: ..........blah)
S: .
C: dele 1
C: retr 2
S: (blah blah ...
S: .................
S: ..........blah)
S: .
C: dele 2
<span class="pagebreak" title="125" id="P7001011952000000000000000000C25" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C25" epub:type="pagebreak" role="doc-pagebreak"></span>C: quit
S: +OK POP3 server signing off</code></pre>
<p class="continued" id="P7001011952000000000000000009CC5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC5">The user agent first asks the mail server to list the size of each of the stored messages. The user agent then retrieves and deletes each message from the server. Note that after the authorization phase, the user agent employed only four commands: <code id="P7001011952000000000000000009CC6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC6">list</code>, <code id="P7001011952000000000000000009CC7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC7">retr</code>, <code id="P7001011952000000000000000009CC8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC8">dele</code>, and <code id="P7001011952000000000000000009CC9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CC9">quit</code>. The syntax for these commands is defined in RFC 1939. After processing the <code id="P7001011952000000000000000009CCA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCA">quit</code> command, the POP3 server enters the update phase and removes messages 1 and 2 from the mailbox.</p>
<p id="P7001011952000000000000000009CCB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCB">A problem with this download-and-delete mode is that the recipient, Bob, may be nomadic and may want to access his mail messages from multiple machines, for example, his office PC, his home PC, and his portable computer. The download-and-delete mode partitions Bob’s mail messages over these three machines; in particular, if Bob first reads a message on his office PC, he will not be able to reread the message from his portable at home later in the evening. In the download-and-keep mode, the user agent leaves the messages on the mail server after downloading them. In this case, Bob can reread messages from different machines; he can access a message from work and access it again later in the week from home.</p>
<p id="P7001011952000000000000000009CCC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCC">During a POP3 session between a user agent and the mail server, the POP3 server maintains some state information; in particular, it keeps track of which user messages have been marked deleted. However, the POP3 server does not carry state information across POP3 sessions. This lack of state information across sessions greatly simplifies the implementation of a POP3 server.</p>
</section>
<section id="P7001011952000000000000000000C2E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C2E" class="level3"><header><h1 class="title" id="P7001011952000000000000000009CCD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCD" epub:type="title">IMAP</h1></header>
<p id="P7001011952000000000000000009CCE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCE">With POP3 access, once Bob has downloaded his messages to the local machine, he can create mail folders and move the downloaded messages into the folders. Bob can then delete messages, move messages across folders, and search for messages (by sender name or subject). But this paradigm—namely, folders and messages in the local machine—poses a problem for the nomadic user, who would prefer to maintain a folder hierarchy on a remote server that can be accessed from any computer. This is not possible with POP3—the POP3 protocol does not provide any means for a user to create remote folders and assign messages to folders.</p>
<p id="P7001011952000000000000000009CCF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CCF">To solve this and other problems, the IMAP protocol, defined in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B81" data-foobar="7">[RFC 3501]</a>, was invented. Like POP3, IMAP is a mail access protocol. It has many more features than POP3, but it is also significantly more complex. (And thus the client and server side implementations are significantly more complex.)</p>
<p id="P7001011952000000000000000009CD0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD0">An IMAP server will associate each message with a folder; when a message first arrives at the server, it is associated with the recipient’s INBOX folder. The recipient can then move the message into a new, user-created folder, read the message, delete the message, and so on. The IMAP protocol provides commands to allow users to create folders and move messages from one folder to another. IMAP also provides <span class="pagebreak" title="126" id="P7001011952000000000000000000C33" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C33" epub:type="pagebreak" role="doc-pagebreak"></span>commands that allow users to search remote folders for messages matching specific criteria. Note that, unlike POP3, an IMAP server maintains user state information across IMAP sessions—for example, the names of the folders and which messages are associated with which folders.</p>
<p id="P7001011952000000000000000009CD1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD1">Another important feature of IMAP is that it has commands that permit a user agent to obtain components of messages. For example, a user agent can obtain just the message header of a message or just one part of a multipart MIME message. This feature is useful when there is a low-bandwidth connection (for example, a slow-speed modem link) between the user agent and its mail server. With a low-bandwidth connection, the user may not want to download all of the messages in its mailbox, particularly avoiding long messages that might contain, for example, an audio or video clip.</p>
</section>
<section id="P7001011952000000000000000000C35" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C35" class="level3"><header><h1 class="title" id="P7001011952000000000000000009CD2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD2" epub:type="title">Web-Based E-Mail</h1></header>
<p id="P7001011952000000000000000009CD3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD3">More and more users today are sending and accessing their e-mail through their Web browsers. Hotmail introduced Web-based access in the mid 1990s. Now Web-based e-mail is also provided by Google, Yahoo!, as well as just about every major university and corporation. With this service, the user agent is an ordinary Web browser, and the user communicates with its remote mailbox via HTTP. When a recipient, such as Bob, wants to access a message in his mailbox, the e-mail message is sent from Bob’s mail server to Bob’s browser using the HTTP protocol rather than the POP3 or IMAP protocol. When a sender, such as Alice, wants to send an e-mail message, the e-mail message is sent from her browser to her mail server over HTTP rather than over SMTP. Alice’s mail server, however, still sends messages to, and receives messages from, other mail servers using SMTP.</p>
</section>
</section>
</section></body></html>