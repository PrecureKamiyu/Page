<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Embedding A Free List</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part166.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part168.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">Embedding A Free List</p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Thus far we have treated our simple free list as a conceptual entity; it is just a list describing the free chunks of memory in the heap. But how do we build such a list inside the free space itself?</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In a more typical list, when allocating a new node, you would just call <span class="s41">malloc() </span>when you need space for the node. Unfortunately, within the memory-allocation library, you can’t do this! Instead, you need to build the list <i>inside </i>the free space itself. Don’t worry if this sounds a little weird; it is, but not so weird that you can’t do it!</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Assume we have a 4096-byte chunk of memory to manage (i.e., the heap is 4KB). To manage this as a free list, we first have to initialize said list; initially, the list should have one entry, of size 4096 (minus the header size). Here is the description of a node of the list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 85pt;text-indent: -16pt;text-align: left;">typedef struct <span class="s75">&nbsp; </span>node_t { int     size;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 8pt;text-align: left;">struct <span class="s75">&nbsp;</span>node_t <span class="s39">*</span>next;</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;line-height: 7pt;text-align: left;">} node_t;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Now let’s look at some code that initializes the heap and puts the first element of the free list inside that space. We are assuming that the heap is built within some free space acquired via a call to the system call <span class="s41">mmap()</span>; this is not the only way to build such a heap but serves us well in this example. Here is the code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">// mmap() returns a pointer to a chunk of free space node_t <span class="s39">*</span>head = mmap(NULL, 4096, PROT_READ|PROT_WRITE,</p><p class="s38" style="padding-left: 152pt;text-indent: 0pt;line-height: 7pt;text-align: left;">MAP_ANON|MAP_PRIVATE, -1, 0);</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">head-&gt;size = 4096 - sizeof(node_t); head-&gt;next = NULL;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">After running this code, the status of the list is that it has a single entry, of size 4088. Yes, this is a tiny heap, but it serves as a fine example for us</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_173.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">head</p><p class="s67" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;line-height: 86%;text-align: left;">[virtual address: 16KB] header: size field</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="114" alt="image" src="Image_174.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s97" style="padding-left: 25pt;text-indent: 0pt;text-align: center;">...</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">next:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">4088</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">header: next field (NULL is 0)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">the rest of the 4KB chunk</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">Figure 17.3: <b>A Heap With One Free Chunk</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="23" alt="image" src="Image_175.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">[virtual address: 16KB]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_176.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="183" alt="image" src="Image_177.png"/></span></p><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">next:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">3980</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_178.png"/></span></p><p class="s67" style="padding-left: 63pt;text-indent: 0pt;text-align: left;">ptr</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-top: 6pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">The 100 bytes now allocated</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_179.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">head</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-top: 3pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">The free 3980 byte chunk</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">Figure 17.4: <b>A Heap: After One Allocation</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 88%;text-align: justify;">here. The <span class="s41">head </span>pointer contains the beginning address of this range; let’s assume it is 16KB (though any virtual address would be fine). Visually, the heap thus looks like what you see in Figure <span style=" color: #00AEEF;">17.3</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now, let’s imagine that a chunk of memory is requested, say of size 100 bytes. To service this request, the library will first find a chunk that is large enough to accommodate the request; because there is only one free chunk (size: 4088), this chunk will be chosen. Then, the chunk will be <b>split </b>into two: one chunk big enough to service the request (and header, as described above), and the remaining free chunk. Assuming an 8-byte header (an integer size and an integer magic number), the space in the heap now looks like what you see in Figure <span style=" color: #00AEEF;">17.4</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Thus, upon the request for 100 bytes, the library allocated 108 bytes out of the existing one free chunk, returns a pointer (marked <span class="s41">ptr </span>in the figure above) to it, stashes the header information immediately before the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="23" alt="image" src="Image_180.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 212pt;text-indent: 0pt;text-align: left;">[virtual address: 16KB]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_181.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="92" alt="image" src="Image_182.png"/></span></p><p class="s97" style="padding-top: 8pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 212pt;text-indent: 0pt;text-align: left;">100 bytes still allocated</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_183.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">sptr</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_184.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="92" alt="image" src="Image_185.png"/></span></p><p class="s97" style="padding-top: 8pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-left: 86pt;text-indent: -2pt;line-height: 86%;text-align: left;">100 bytes still allocated (but about to be freed)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_186.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="136" alt="image" src="Image_187.png"/></span></p><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">next:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">3764</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-left: 84pt;text-indent: 0pt;text-align: left;">100-bytes still allocated</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_188.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">head</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 212pt;text-indent: 0pt;text-align: left;">The free 3764-byte chunk</p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="91" height="23" alt="image" src="Image_189.png"/></span></p><p style="padding-top: 6pt;padding-left: 104pt;text-indent: 0pt;text-align: justify;">Figure 17.5: <b>Free Space With Three Chunks Allocated</b></p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;line-height: 88%;text-align: justify;">allocated space for later use upon <span class="s41">free()</span>, and shrinks the one free node in the list to 3980 bytes (4088 minus 108).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Now let’s look at the heap when there are three allocated regions, each of 100 bytes (or 108 including the header). A visualization of this heap is shown in Figure <span style=" color: #00AEEF;">17.5</span>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">As you can see therein, the first 324 bytes of the heap are now allo- cated, and thus we see three headers in that space as well as three 100- byte regions being used by the calling program. The free list remains uninteresting: just a single node (pointed to by <span class="s41">head</span>), but now only 3764 bytes in size after the three splits. But what happens when the calling program returns some memory via <span class="s41">free()</span>?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="23" alt="image" src="Image_190.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">[virtual address: 16KB]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="92" alt="image" src="Image_192.png"/></span></p><p class="s97" style="padding-top: 8pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">next:  16708</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(now a free chunk of memory)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">100-bytes still allocated</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">100 bytes still allocated</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_193.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">head</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_194.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_195.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="45" alt="image" src="Image_196.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_197.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="272" height="307" alt="image" src="Image_198.png"/></span></p><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">The free 3764-byte chunk</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">next:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">3764</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">magic: 1234567</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_199.png"/></span></p><p class="s67" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">sptr</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">Figure 17.6: <b>Free Space With Two Chunks Allocated</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In this example, the application returns the middle chunk of allocated memory, by calling <span class="s41">free(16500) </span>(the value 16500 is arrived upon by adding the start of the memory region, 16384, to the 108 of the previous chunk and the 8 bytes of the header for this chunk). This value is shown in the previous diagram by the pointer <span class="s41">sptr</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The library immediately figures out the size of the free region, and then adds the free chunk back onto the free list. Assuming we insert at the head of the free list, the space now looks like this (Figure <span style=" color: #00AEEF;">17.6</span>).</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">And now we have a list that starts with a small free chunk (100 bytes, pointed to by the head of the list) and a large free chunk (3764 bytes).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="272" height="352" alt="image" src="Image_200.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_201.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_202.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_203.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_204.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="45" alt="image" src="Image_205.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_206.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="23" alt="image" src="Image_207.png"/></span></p><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">[virtual address: 16KB]</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">(now free)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s97" style="text-indent: 0pt;line-height: 18pt;text-align: left;">. . .</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">(now free)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">next:  16384</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">next:  16708</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">next:  16492</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">100</p><p style="text-indent: 0pt;text-align: left;"/><p class="s67" style="text-indent: 0pt;line-height: 8pt;text-align: left;">size:</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s67" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(now free)</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="25" height="7" alt="image" src="Image_208.png"/></span></p><p class="s67" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">head</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:131.936pt" cellspacing="0"><tr style="height:17pt"><td style="width:68pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:17pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p class="s98" style="padding-top: 3pt;padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">size:   3764</p></td></tr><tr style="height:17pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p class="s98" style="padding-top: 3pt;padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">next:    0</p></td></tr><tr style="height:17pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s99" style="padding-top: 7pt;padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 8pt;text-align: center;">. . .</p></td></tr></table><p class="s67" style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 212pt;text-indent: 0pt;text-align: left;">The free 3764-byte chunk</p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="91" height="23" alt="image" src="Image_209.png"/></span></p><p style="padding-top: 6pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">Figure 17.7: <b>A Non-Coalesced Free List</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Our list finally has more than one element on it! And yes, the free space is fragmented, an unfortunate but common occurrence.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">One last example: let’s assume now that the last two in-use chunks are freed. Without coalescing, you might end up with a free list that is highly fragmented (see Figure <span style=" color: #00AEEF;">17.7</span>).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">As you can see from the figure, we now have a big mess! Why? Simple, we forgot to <b>coalesce </b>the list. Although all of the memory is free, it is chopped up into pieces, thus appearing as a fragmented memory despite not being one. The solution is simple: go through the list and <b>merge </b>neighboring chunks; when finished, the heap will be whole again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part166.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part168.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
