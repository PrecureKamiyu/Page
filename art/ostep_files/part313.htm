<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Single Buffer Producer/Consumer Solution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part312.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part314.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Single Buffer Producer/Consumer Solution</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The solution here is once again a small one: use <i>two </i>condition variables, instead of one, in order to properly signal which type of thread should wake up when the state of the system changes. Figure <span style=" color: #00AEEF;">30.8 </span>shows the resulting code.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In the code above, producer threads wait on the condition <b>empty</b>, and signals <b>fill</b>. Conversely, consumer threads wait on <b>fill </b>and signal <b>empty</b>. By doing so, the second problem above is avoided by design: a consumer can never accidentally wake a consumer, and a producer can never acci- dentally wake a producer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part312.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part314.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
