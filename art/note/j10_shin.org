#+TITLE: SHIN Java Chapter 10: Threads

* Threads. First Encounter

  - Note taken on [2023-04-19 Wed 19:37] \\
    The method ~run~ in the thread should not be called manually. Calling
    the run method directly merely executes the task in the same
    thread---no new thread is started.
  - Note taken on [2023-04-19 Wed 19:26] \\
    The note should be read after you finish reading the whole section.
  - Note taken on [2023-04-19 Wed 19:25] \\
    You need to know that there is also a method called ~run~ inside of the thread class. However, one shall not define the ~run~ by
    theire own in order to /decouple/ the task from the thread that execute the task.

What is threads? Threads are seperately executed to enhance the performance. The difference between a thread and a process is that the
threads share the same variables and the memory, which look pretty risky, but on the contrary, the exact feature makes thread light weight. 

On the first encounter, let us meet the class ~bank~. It is a class defined by the author of the book to simulate a bank. Inside a
bank, there are some accounts. What ~transfer~ do is to transfer certain amount of money from one a count to the other.

Okay. We have the following code. 

#+BEGIN_SRC
public interface Runnable {
       void run();
}
#+END_SRC

It is an interface. Yes. An interface. Why ~Runnable~? You need to know that there is always a function named ~run~ to be executed by
the threads. What the interface does is only that the function ~run~ is in you class. Anyway, let us continue. 

#+BEGIN_SRC
Runnable r = () -> {
         // code here.
}
#+END_SRC

You just define a anomynous function using lambda expression. 

#+BEGIN_SRC
var t = new Thread(r);
#+END_SRC

You just pass the ~r~ to a thread, and the thread is called ~t~ now. 

#+BEGIN_SRC
t.start();
#+END_SRC

You just start the thread by calling the function named ~start~ inside the thread. 

* TODO States [0/2]

- [ ] the blocked waiting states
- [ ] runnable state

You should learn some words mentioned in the book:

- /preempt/: The word "preempts" means to take action before someone else can, often by anticipating their actions or intentions. In
  a military context, preemption refers to taking the initiative to attack an enemy before they can launch an attack of their own.
- /relinquish/: The word "relinquish" means to give up, surrender, or release something. It can refer to letting go of control,
  ownership, or responsibility for something or someone. For example, a person may relinquish their rights to a property, relinquish
  their position as the leader of a group, or relinquish custody of a child.
- /deprecated/: The word "deprecated" is used to describe something that has become outdated, no longer in use, or no longer
  supported. It often refers to computer software or programming languages that have been replaced by newer versions or better
  alternatives.
  
There are six states: 

1. New
2. Runnable
3. Blocked
4. Waiting
5. Timed waiting
6. Terminated

When a thread is ~new~-ed, that is to say the thread is initialized, the state of the thread is at /new/. When one calls the
function ~start~, the thread enters the /Runnable/ state. It means that the thread can be runned (of course). 

To understand other states, we need to know what threads should be doing under certain circumstances.

** Blocked and Waiting states

When the thread tries to acquire an intrinsic object lock that is currently held by another thread, it becomes blocked. It is easy
to understand. That is to say threads is requiring something, but the that thing is being occupied, so that the thread can't do
anything.

* TODO Properties [0/2]
- [ ] interrupting threads
- [ ] threads priority


there are some words that you need to know. 

- /squelched/: The word "squelched" typically means to forcefully silence or suppress something, such as an idea or a sound. 
- /propagate/: The word "propagate" generally means to spread or promote an idea, belief, or cause. It can also refer to the process
  of reproducing plants or animals through various means such as seeds, cuttings, or cloning. In the context of computer networking,
  it can refer to the distribution of data across a network.
- /Daemon/: In computing, a daemon (pronounced "demon") is a computer program that runs as a background process rather than being
  under direct control of an interactive user. Daemons are typically started at boot time and run continuously in the background,
  waiting for specific events or conditions to occur so that they can perform their tasks. Examples of daemons include system
  processes such as network services, web servers, and print spoolers. Daemons are often used to provide essential services to other
  programs and users without requiring constant attention or interaction.

** Interrupting Threads

** Daemon Threads

** Thread Names 

** Handlers for Uncaught Exceptions

** Thread Priority




* Synchronization
- /atomic operations/: The "atomic operations" means the operations that are not divisible. A non-atomic operation can be divide
  into multiple atomic operations.

** Race Condition, First Encounter

The main pointer of this section is to understand what is race condition and realize how a simple race condition can occurred. The
book provides an example of multiple threads being runned on the bank system to transfer money simultaneously, so that something
goes wrong, and is that the balance of the accounts (that is to say the total money) has been lowered. 

Why? Because the increment operations in the transfer function is a non-atomic operation, which can be decomposed as (more than)
three operations: 1. load; 2. add; 3. write back. When two increment operations take place simultaneously. In reality, the
three atomic operations being carried out should be in a random order, like ~1 2 1 2 3 3~. 

** Lock Objects 

First thing first: ~Synchronized~ keyword is introduced after lock and condition are introduced, because ~synchronized~ keyword is
based on lock and condition. The author thinks that it is better to introduce lock and condition first. 



