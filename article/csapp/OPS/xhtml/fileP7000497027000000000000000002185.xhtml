<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.5 Arithmetic and Logical Operations</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000002185" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004043A" data-uri="chapter03.xhtml#P700049702700000000000000004043A" epub:type="title"><span class="pcalibre label pcalibre1">3.5 </span>Arithmetic and Logical Operations</h1></header>
<p id="P700049702700000000000000004043B" data-uri="chapter03.xhtml#P700049702700000000000000004043B" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> lists some of the x86-64 integer and logic operations. Most of the operations are given as instruction classes, as they can have different variants with different operand sizes. (Only <code id="P700049702700000000000000004043C" data-uri="chapter03.xhtml#P700049702700000000000000004043C" class="pcalibre1 calibre8 pcalibre">leaq</code> has no other size variants.) For example, the instruction class <span class="smallcaps pcalibre pcalibre1">add </span>consists of four addition instructions: <code id="P700049702700000000000000004043D" data-uri="chapter03.xhtml#P700049702700000000000000004043D" class="pcalibre1 calibre8 pcalibre">addb, addw, addl</code>, and <code id="P700049702700000000000000004043E" data-uri="chapter03.xhtml#P700049702700000000000000004043E" class="pcalibre1 calibre8 pcalibre">addq</code>, adding bytes, words, double words, and quad words, respectively. Indeed, each of the instruction classes shown has instructions for operating on these four different sizes of data. The operations are divided into four groups: load effective address, unary, binary, and shifts. <i class="calibre5 pcalibre pcalibre1">Binary</i> operations have two operands, while <i class="calibre5 pcalibre pcalibre1">unary</i> operations have one operand. These operands are specified using the same notation as described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F3C"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.4</span></a>.</p>
<section id="P700049702700000000000000000218B" data-uri="chapter03.xhtml#P700049702700000000000000000218B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004043F" data-uri="chapter03.xhtml#P700049702700000000000000004043F" epub:type="title"><span class="pcalibre label pcalibre1">3.5.1 </span>Load Effective Address</h1></header>
<p id="P7000497027000000000000000040440" data-uri="chapter03.xhtml#P7000497027000000000000000040440" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">load effective address</i> instruction <code id="P7000497027000000000000000040441" data-uri="chapter03.xhtml#P7000497027000000000000000040441" class="pcalibre1 calibre8 pcalibre">leaq</code> is actually a variant of the <code id="P7000497027000000000000000040442" data-uri="chapter03.xhtml#P7000497027000000000000000040442" class="pcalibre1 calibre8 pcalibre">movq</code> instruction. It has the form of an instruction that reads from memory to a register,<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000021F7" title="192" data-uri="chapter03.xhtml#P70004970270000000000000000021F7" epub:type="pagebreak"></span></p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002190" data-uri="chapter03.xhtml#P7000497027000000000000000002190">

<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000040443" data-uri="chapter03.xhtml#P7000497027000000000000000040443">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P7000497027000000000000000040444" data-uri="chapter03.xhtml#P7000497027000000000000000040444" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P7000497027000000000000000040445" data-uri="chapter03.xhtml#P7000497027000000000000000040445" class="calibre18 pcalibre pcalibre1">Effect</th>
<th id="P7000497027000000000000000040446" data-uri="chapter03.xhtml#P7000497027000000000000000040446" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040447" data-uri="chapter03.xhtml#P7000497027000000000000000040447" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040448" data-uri="chapter03.xhtml#P7000497027000000000000000040448" class="calibre10 pcalibre pcalibre1">leaq</code></td>
<td id="P7000497027000000000000000040449" data-uri="chapter03.xhtml#P7000497027000000000000000040449" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004044A" data-uri="chapter03.xhtml#P700049702700000000000000004044A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← &amp;<var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004044B" data-uri="chapter03.xhtml#P700049702700000000000000004044B" class="calibre20 pcalibre pcalibre1">Load effective address</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004044C" data-uri="chapter03.xhtml#P700049702700000000000000004044C" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">inc </span></td>
<td id="P700049702700000000000000004044D" data-uri="chapter03.xhtml#P700049702700000000000000004044D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004044E" data-uri="chapter03.xhtml#P700049702700000000000000004044E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>+1</td>
<td id="P700049702700000000000000004044F" data-uri="chapter03.xhtml#P700049702700000000000000004044F" class="calibre20 pcalibre pcalibre1">Increment</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040450" data-uri="chapter03.xhtml#P7000497027000000000000000040450" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">dec </span></td>
<td id="P7000497027000000000000000040451" data-uri="chapter03.xhtml#P7000497027000000000000000040451" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040452" data-uri="chapter03.xhtml#P7000497027000000000000000040452" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>-1</td>
<td id="P7000497027000000000000000040453" data-uri="chapter03.xhtml#P7000497027000000000000000040453" class="calibre20 pcalibre pcalibre1">Decrement</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040454" data-uri="chapter03.xhtml#P7000497027000000000000000040454" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">neg </span></td>
<td id="P7000497027000000000000000040455" data-uri="chapter03.xhtml#P7000497027000000000000000040455" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040456" data-uri="chapter03.xhtml#P7000497027000000000000000040456" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← -<var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040457" data-uri="chapter03.xhtml#P7000497027000000000000000040457" class="calibre20 pcalibre pcalibre1">Negate</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040458" data-uri="chapter03.xhtml#P7000497027000000000000000040458" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">not </span></td>
<td id="P7000497027000000000000000040459" data-uri="chapter03.xhtml#P7000497027000000000000000040459" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004045A" data-uri="chapter03.xhtml#P700049702700000000000000004045A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← ~<var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004045B" data-uri="chapter03.xhtml#P700049702700000000000000004045B" class="calibre20 pcalibre pcalibre1">Complement</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004045C" data-uri="chapter03.xhtml#P700049702700000000000000004045C" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">add </span></td>
<td id="P700049702700000000000000004045D" data-uri="chapter03.xhtml#P700049702700000000000000004045D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004045E" data-uri="chapter03.xhtml#P700049702700000000000000004045E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>+<var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004045F" data-uri="chapter03.xhtml#P700049702700000000000000004045F" class="calibre20 pcalibre pcalibre1">Add</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040460" data-uri="chapter03.xhtml#P7000497027000000000000000040460" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">sub </span></td>
<td id="P7000497027000000000000000040461" data-uri="chapter03.xhtml#P7000497027000000000000000040461" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040462" data-uri="chapter03.xhtml#P7000497027000000000000000040462" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>-<var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040463" data-uri="chapter03.xhtml#P7000497027000000000000000040463" class="calibre20 pcalibre pcalibre1">Subtract</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040464" data-uri="chapter03.xhtml#P7000497027000000000000000040464" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">imul </span></td>
<td id="P7000497027000000000000000040465" data-uri="chapter03.xhtml#P7000497027000000000000000040465" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040466" data-uri="chapter03.xhtml#P7000497027000000000000000040466" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>*<var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040467" data-uri="chapter03.xhtml#P7000497027000000000000000040467" class="calibre20 pcalibre pcalibre1">Multiply</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040468" data-uri="chapter03.xhtml#P7000497027000000000000000040468" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">xor </span></td>
<td id="P7000497027000000000000000040469" data-uri="chapter03.xhtml#P7000497027000000000000000040469" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004046A" data-uri="chapter03.xhtml#P700049702700000000000000004046A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ←<var class="calibre5 pcalibre pcalibre1">D</var> ^ <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004046B" data-uri="chapter03.xhtml#P700049702700000000000000004046B" class="calibre20 pcalibre pcalibre1">Exclusive-or</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004046C" data-uri="chapter03.xhtml#P700049702700000000000000004046C" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">or </span></td>
<td id="P700049702700000000000000004046D" data-uri="chapter03.xhtml#P700049702700000000000000004046D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004046E" data-uri="chapter03.xhtml#P700049702700000000000000004046E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var> | <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004046F" data-uri="chapter03.xhtml#P700049702700000000000000004046F" class="calibre20 pcalibre pcalibre1">Or</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040470" data-uri="chapter03.xhtml#P7000497027000000000000000040470" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">and </span></td>
<td id="P7000497027000000000000000040471" data-uri="chapter03.xhtml#P7000497027000000000000000040471" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040472" data-uri="chapter03.xhtml#P7000497027000000000000000040472" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var>&amp;<var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040473" data-uri="chapter03.xhtml#P7000497027000000000000000040473" class="calibre20 pcalibre pcalibre1">And</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040474" data-uri="chapter03.xhtml#P7000497027000000000000000040474" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">sal </span></td>
<td id="P7000497027000000000000000040475" data-uri="chapter03.xhtml#P7000497027000000000000000040475" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040476" data-uri="chapter03.xhtml#P7000497027000000000000000040476" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <i class="calibre5 pcalibre pcalibre1">D &lt;&lt;k</i></td>
<td id="P7000497027000000000000000040477" data-uri="chapter03.xhtml#P7000497027000000000000000040477" class="calibre20 pcalibre pcalibre1">Left shift</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040478" data-uri="chapter03.xhtml#P7000497027000000000000000040478" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">shl </span></td>
<td id="P7000497027000000000000000040479" data-uri="chapter03.xhtml#P7000497027000000000000000040479" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004047A" data-uri="chapter03.xhtml#P700049702700000000000000004047A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var> &lt;&lt; <var class="calibre5 pcalibre pcalibre1">k</var></td>
<td id="P700049702700000000000000004047B" data-uri="chapter03.xhtml#P700049702700000000000000004047B" class="calibre20 pcalibre pcalibre1">Left shift (same as <span class="smallcaps1 pcalibre pcalibre1">sal</span>)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004047C" data-uri="chapter03.xhtml#P700049702700000000000000004047C" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">sar </span></td>
<td id="P700049702700000000000000004047D" data-uri="chapter03.xhtml#P700049702700000000000000004047D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004047E" data-uri="chapter03.xhtml#P700049702700000000000000004047E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var> &gt;&gt;<sub class="calibre59 pcalibre pcalibre1">A</sub> <var class="calibre5 pcalibre pcalibre1">k</var></td>
<td id="P700049702700000000000000004047F" data-uri="chapter03.xhtml#P700049702700000000000000004047F" class="calibre20 pcalibre pcalibre1">Arithmetic right shift</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040480" data-uri="chapter03.xhtml#P7000497027000000000000000040480" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040481" data-uri="chapter03.xhtml#P7000497027000000000000000040481" class="calibre10 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">shr</span></code></td>
<td id="P7000497027000000000000000040482" data-uri="chapter03.xhtml#P7000497027000000000000000040482" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">k</var>, <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040483" data-uri="chapter03.xhtml#P7000497027000000000000000040483" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">D</var> &gt;&gt;<sub class="calibre59 pcalibre pcalibre1">L</sub> <var class="calibre5 pcalibre pcalibre1">k</var></td>
<td id="P7000497027000000000000000040484" data-uri="chapter03.xhtml#P7000497027000000000000000040484" class="calibre20 pcalibre pcalibre1">Logical right shift</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040485" data-uri="chapter03.xhtml#P7000497027000000000000000040485" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040486" data-uri="chapter03.xhtml#P7000497027000000000000000040486" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.10 </span>Integer arithmetic operations.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040487" data-uri="chapter03.xhtml#P7000497027000000000000000040487"><p id="P7000497027000000000000000040488" data-uri="chapter03.xhtml#P7000497027000000000000000040488" class="pcalibre calibre3 pcalibre1">The load effective address (leaq) instruction is commonly used to perform simple arithmetic. The remaining ones are more standard unary or binary operations. We use the notation <code id="P7000497027000000000000000040489" data-uri="chapter03.xhtml#P7000497027000000000000000040489" class="pcalibre1 calibre8 pcalibre">&gt;&gt;<sub class="calibre59 pcalibre pcalibre1">A</sub></code> and <code id="P700049702700000000000000004048A" data-uri="chapter03.xhtml#P700049702700000000000000004048A" class="pcalibre1 calibre8 pcalibre">&gt;&gt;<sub class="calibre59 pcalibre pcalibre1">L</sub></code> to denote arithmetic and logical right shift, respectively. Note the nonintuitive ordering of the operands with ATT-format assembly code.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004048B" data-uri="chapter03.xhtml#P700049702700000000000000004048B">but it does not reference memory at all. Its first operand appears to be a memory reference, but instead of reading from the designated location, the instruction copies the effective address to the destination. We indicate this computation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> using the C address operator &amp;<var class="calibre5 pcalibre pcalibre1">S</var>. This instruction can be used to generate pointers for later memory references. In addition, it can be used to compactly describe common arithmetic operations. For example, if register <code id="P700049702700000000000000004048C" data-uri="chapter03.xhtml#P700049702700000000000000004048C" class="pcalibre1 calibre8 pcalibre">%rdx</code> contains value <var class="calibre5 pcalibre pcalibre1">x</var>, then the instruction <code id="P700049702700000000000000004048D" data-uri="chapter03.xhtml#P700049702700000000000000004048D" class="pcalibre1 calibre8 pcalibre">leaq 7(%rdx,%rdx,4), %rax</code> will set register <code id="P700049702700000000000000004048E" data-uri="chapter03.xhtml#P700049702700000000000000004048E" class="pcalibre1 calibre8 pcalibre">%rax</code> to 5<var class="calibre5 pcalibre pcalibre1">x</var> + 7. Compilers often find clever uses of <code id="P700049702700000000000000004048F" data-uri="chapter03.xhtml#P700049702700000000000000004048F" class="pcalibre1 calibre8 pcalibre">leaq</code> that have nothing to do with effective address computations. The destination operand must be a register.</p>
<section id="P70004970270000000000000000021DE" data-uri="chapter03.xhtml#P70004970270000000000000000021DE" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040490" data-uri="chapter03.xhtml#P7000497027000000000000000040490" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.6 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P70004970270000000000000000034D2">327</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040491" data-uri="chapter03.xhtml#P7000497027000000000000000040491">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040492" data-uri="chapter03.xhtml#P7000497027000000000000000040492">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040493" data-uri="chapter03.xhtml#P7000497027000000000000000040493"><p id="P7000497027000000000000000040494" data-uri="chapter03.xhtml#P7000497027000000000000000040494" class="pcalibre calibre3 pcalibre1">Suppose register <code id="P7000497027000000000000000040495" data-uri="chapter03.xhtml#P7000497027000000000000000040495" class="pcalibre1 calibre8 pcalibre">%rax</code> holds value <var class="calibre5 pcalibre pcalibre1">x</var> and <code id="P7000497027000000000000000040496" data-uri="chapter03.xhtml#P7000497027000000000000000040496" class="pcalibre1 calibre8 pcalibre">%rcx</code> holds value <var class="calibre5 pcalibre pcalibre1">y</var>. Fill in the table below with formulas indicating the value that will be stored in register <code id="P7000497027000000000000000040497" data-uri="chapter03.xhtml#P7000497027000000000000000040497" class="pcalibre1 calibre8 pcalibre">%rdx</code> for each of the given assembly-code instructions:</p>
<table id="P7000497027000000000000000040498" data-uri="chapter03.xhtml#P7000497027000000000000000040498" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040499" data-uri="chapter03.xhtml#P7000497027000000000000000040499" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P700049702700000000000000004049A" data-uri="chapter03.xhtml#P700049702700000000000000004049A" class="calibre18 pcalibre pcalibre1">Result</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004049B" data-uri="chapter03.xhtml#P700049702700000000000000004049B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004049C" data-uri="chapter03.xhtml#P700049702700000000000000004049C" class="calibre10 pcalibre pcalibre1">leaq 6(%rax), %rdx</code></td>
<td id="P700049702700000000000000004049D" data-uri="chapter03.xhtml#P700049702700000000000000004049D" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004049E" data-uri="chapter03.xhtml#P700049702700000000000000004049E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004049F" data-uri="chapter03.xhtml#P700049702700000000000000004049F" class="calibre10 pcalibre pcalibre1">leaq (%rax,%rcx), %rdx</code></td>
<td id="P70004970270000000000000000404A0" data-uri="chapter03.xhtml#P70004970270000000000000000404A0" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404A1" data-uri="chapter03.xhtml#P70004970270000000000000000404A1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404A2" data-uri="chapter03.xhtml#P70004970270000000000000000404A2" class="calibre10 pcalibre pcalibre1">leaq (%rax,%rcx,4), %rdx</code></td>
<td id="P70004970270000000000000000404A3" data-uri="chapter03.xhtml#P70004970270000000000000000404A3" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404A4" data-uri="chapter03.xhtml#P70004970270000000000000000404A4" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404A5" data-uri="chapter03.xhtml#P70004970270000000000000000404A5" class="calibre10 pcalibre pcalibre1">leaq 7(%rax,%rax,8), %rdx</code></td>
<td id="P70004970270000000000000000404A6" data-uri="chapter03.xhtml#P70004970270000000000000000404A6" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404A7" data-uri="chapter03.xhtml#P70004970270000000000000000404A7" class="calibre20 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000021FE" title="193" data-uri="chapter03.xhtml#P70004970270000000000000000021FE" epub:type="pagebreak"></span><code id="P70004970270000000000000000404A8" data-uri="chapter03.xhtml#P70004970270000000000000000404A8" class="calibre10 pcalibre pcalibre1">leaq 0xA(,%rcx,4), %rdx</code></td>
<td id="P70004970270000000000000000404A9" data-uri="chapter03.xhtml#P70004970270000000000000000404A9" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404AA" data-uri="chapter03.xhtml#P70004970270000000000000000404AA" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404AB" data-uri="chapter03.xhtml#P70004970270000000000000000404AB" class="calibre10 pcalibre pcalibre1">leaq 9(%rax, %rcx,2), %rdx</code></td>
<td id="P70004970270000000000000000404AC" data-uri="chapter03.xhtml#P70004970270000000000000000404AC" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></div>
</li>
</ol>
</section>
<p id="P70004970270000000000000000404AD" data-uri="chapter03.xhtml#P70004970270000000000000000404AD" class="pcalibre1 pcalibre calibre2">As an illustration of the use of <code id="P70004970270000000000000000404AE" data-uri="chapter03.xhtml#P70004970270000000000000000404AE" class="pcalibre1 calibre8 pcalibre">leaq</code> in compiled code, consider the following C program:</p>
<pre id="P70004970270000000000000000404AF" data-uri="chapter03.xhtml#P70004970270000000000000000404AF" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000404B0" data-uri="chapter03.xhtml#P70004970270000000000000000404B0" class="calibre10 pcalibre pcalibre1">
long scale(long x, long y, long z) {
    long t = x + 4 * y + 12 * z;
    return t;
}
</code></pre>
<p id="P70004970270000000000000000404B1" data-uri="chapter03.xhtml#P70004970270000000000000000404B1" class="pcalibre1 pcalibre calibre2">When compiled, the arithmetic operations of the function are implemented by a sequence of three <code id="P70004970270000000000000000404B2" data-uri="chapter03.xhtml#P70004970270000000000000000404B2" class="pcalibre1 calibre8 pcalibre">leaq</code> functions, as is documented by the comments on the right-hand side:</p>
<pre id="P70004970270000000000000000404B3" data-uri="chapter03.xhtml#P70004970270000000000000000404B3" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000404B4" data-uri="chapter03.xhtml#P70004970270000000000000000404B4" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long scale(long x, long y, long z)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, z in %rdx</i>
scale:
  leaq	(%rdi,%rsi,4), %rax		<i class="calibre5 pcalibre pcalibre1">x + 4*y</i>
  leaq	(%rdx,%rdx,2), %rdx		<i class="calibre5 pcalibre pcalibre1">z + 2*z = 3*z</i>
  leaq	(%rax,%rdx,4), %rax		<i class="calibre5 pcalibre pcalibre1">(x+4*y) + 4*(3*z) = x + 4*y + 12*z</i>
  ret
</code></pre>
<p id="P70004970270000000000000000404B5" data-uri="chapter03.xhtml#P70004970270000000000000000404B5" class="pcalibre1 pcalibre calibre2">The ability of the <code id="P70004970270000000000000000404B6" data-uri="chapter03.xhtml#P70004970270000000000000000404B6" class="pcalibre1 calibre8 pcalibre">leaq</code> instruction to perform addition and limited forms of multiplication proves useful when compiling simple arithmetic expressions such as this example.</p>
<section id="P7000497027000000000000000002208" data-uri="chapter03.xhtml#P7000497027000000000000000002208" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000404B7" data-uri="chapter03.xhtml#P70004970270000000000000000404B7" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.7 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003508">328</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000404B8" data-uri="chapter03.xhtml#P70004970270000000000000000404B8">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000404B9" data-uri="chapter03.xhtml#P70004970270000000000000000404B9">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000404BA" data-uri="chapter03.xhtml#P70004970270000000000000000404BA"><p id="P70004970270000000000000000404BB" data-uri="chapter03.xhtml#P70004970270000000000000000404BB" class="pcalibre calibre3 pcalibre1">Consider the following code, in which we have omitted the expression being computed:</p>
<pre id="P70004970270000000000000000404BC" data-uri="chapter03.xhtml#P70004970270000000000000000404BC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000404BD" data-uri="chapter03.xhtml#P70004970270000000000000000404BD" class="calibre10 pcalibre pcalibre1">
long scale2(long x, long y, long z) {
  longt= __________;
  return t;
}
</code></pre>
<p id="P70004970270000000000000000404BE" data-uri="chapter03.xhtml#P70004970270000000000000000404BE" class="pcalibre calibre3 pcalibre1">Compiling the actual function with <span class="smallcaps pcalibre pcalibre1">gcc </span>yields the following assembly code:</p>
<pre id="P70004970270000000000000000404BF" data-uri="chapter03.xhtml#P70004970270000000000000000404BF" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000404C0" data-uri="chapter03.xhtml#P70004970270000000000000000404C0" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long scale2(long x, long y, long z)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, z in %rdx</i>
scale2:
  leaq	(%rdi,%rdi,4), %rax
  leaq	(%rax,%rsi,2), %rax
  leaq (%rax,%rdx,8), %rax
  ret
</code></pre>
<p id="P70004970270000000000000000404C1" data-uri="chapter03.xhtml#P70004970270000000000000000404C1" class="pcalibre calibre3 pcalibre1">Fill in the missing expression in the C code.</p>
</div></li>
</ol></section>
</section>
<section id="P7000497027000000000000000002214" data-uri="chapter03.xhtml#P7000497027000000000000000002214" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000404C2" data-uri="chapter03.xhtml#P70004970270000000000000000404C2" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002216" title="194" data-uri="chapter03.xhtml#P7000497027000000000000000002216" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">3.5.2 </span>Unary and Binary Operations</h1></header>
<p id="P70004970270000000000000000404C3" data-uri="chapter03.xhtml#P70004970270000000000000000404C3" class="pcalibre1 pcalibre calibre2">Operations in the second group are unary operations, with the single operand serving as both source and destination. This operand can be either a register or a memory location. For example, the instruction <code id="P70004970270000000000000000404C4" data-uri="chapter03.xhtml#P70004970270000000000000000404C4" class="pcalibre1 calibre8 pcalibre">incq (%rsp)</code> causes the 8-byte element on the top of the stack to be incremented. This syntax is reminiscent of the C increment (++) and decrement (−−) operators.</p>
<p id="P70004970270000000000000000404C5" data-uri="chapter03.xhtml#P70004970270000000000000000404C5" class="pcalibre1 pcalibre calibre2">The third group consists of binary operations, where the second operand is used as both a source and a destination. This syntax is reminiscent of the C assignment operators, such as <code id="P70004970270000000000000000404C6" data-uri="chapter03.xhtml#P70004970270000000000000000404C6" class="pcalibre1 calibre8 pcalibre">x -= y</code>. Observe, however, that the source operand is given first and the destination second. This looks peculiar for noncommutative operations. For example, the instruction <code id="P70004970270000000000000000404C7" data-uri="chapter03.xhtml#P70004970270000000000000000404C7" class="pcalibre1 calibre8 pcalibre">subq %rax,%rdx</code> decrements register <code id="P70004970270000000000000000404C8" data-uri="chapter03.xhtml#P70004970270000000000000000404C8" class="pcalibre1 calibre8 pcalibre">%rdx</code> by the value in <code id="P70004970270000000000000000404C9" data-uri="chapter03.xhtml#P70004970270000000000000000404C9" class="pcalibre1 calibre8 pcalibre">%rax</code>. (It helps to read the instruction as "Subtract <code id="P70004970270000000000000000404CA" data-uri="chapter03.xhtml#P70004970270000000000000000404CA" class="pcalibre1 calibre8 pcalibre">%rax</code> from <code id="P70004970270000000000000000404CB" data-uri="chapter03.xhtml#P70004970270000000000000000404CB" class="pcalibre1 calibre8 pcalibre">%rdx</code>.") The first operand can be either an immediate value, a register, or a memory location. The second can be either a register or a memory location. As with the <span class="smallcaps pcalibre pcalibre1">mov </span>instructions, the two operands cannot both be memory locations. Note that when the second operand is a memory location, the processor must read the value from memory, perform the operation, and then write the result back to memory.</p>
<section id="P7000497027000000000000000002220" data-uri="chapter03.xhtml#P7000497027000000000000000002220" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000404CC" data-uri="chapter03.xhtml#P70004970270000000000000000404CC" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.8 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003508">328</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000404CD" data-uri="chapter03.xhtml#P70004970270000000000000000404CD">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000404CE" data-uri="chapter03.xhtml#P70004970270000000000000000404CE">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000404CF" data-uri="chapter03.xhtml#P70004970270000000000000000404CF"><p id="P70004970270000000000000000404D0" data-uri="chapter03.xhtml#P70004970270000000000000000404D0" class="pcalibre calibre3 pcalibre1">Assume the following values are stored at the indicated memory addresses and registers:</p>
<table id="P70004970270000000000000000404D1" data-uri="chapter03.xhtml#P70004970270000000000000000404D1" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000404D2" data-uri="chapter03.xhtml#P70004970270000000000000000404D2" class="calibre18 pcalibre pcalibre1">Address</th>
<th id="P70004970270000000000000000404D3" data-uri="chapter03.xhtml#P70004970270000000000000000404D3" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P70004970270000000000000000404D4" data-uri="chapter03.xhtml#P70004970270000000000000000404D4" class="calibre18 pcalibre pcalibre1">Register</th>
<th id="P70004970270000000000000000404D5" data-uri="chapter03.xhtml#P70004970270000000000000000404D5" class="calibre18 pcalibre pcalibre1">Value</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404D6" data-uri="chapter03.xhtml#P70004970270000000000000000404D6" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404D7" data-uri="chapter03.xhtml#P70004970270000000000000000404D7" class="calibre10 pcalibre pcalibre1">0x100</code></td>
<td id="P70004970270000000000000000404D8" data-uri="chapter03.xhtml#P70004970270000000000000000404D8" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404D9" data-uri="chapter03.xhtml#P70004970270000000000000000404D9" class="calibre10 pcalibre pcalibre1">0xFF</code></td>
<td id="P70004970270000000000000000404DA" data-uri="chapter03.xhtml#P70004970270000000000000000404DA" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404DB" data-uri="chapter03.xhtml#P70004970270000000000000000404DB" class="calibre10 pcalibre pcalibre1">%rax</code></td>
<td id="P70004970270000000000000000404DC" data-uri="chapter03.xhtml#P70004970270000000000000000404DC" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404DD" data-uri="chapter03.xhtml#P70004970270000000000000000404DD" class="calibre10 pcalibre pcalibre1">0x100</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404DE" data-uri="chapter03.xhtml#P70004970270000000000000000404DE" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404DF" data-uri="chapter03.xhtml#P70004970270000000000000000404DF" class="calibre10 pcalibre pcalibre1">0x108</code></td>
<td id="P70004970270000000000000000404E0" data-uri="chapter03.xhtml#P70004970270000000000000000404E0" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404E1" data-uri="chapter03.xhtml#P70004970270000000000000000404E1" class="calibre10 pcalibre pcalibre1">0xAB</code></td>
<td id="P70004970270000000000000000404E2" data-uri="chapter03.xhtml#P70004970270000000000000000404E2" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404E3" data-uri="chapter03.xhtml#P70004970270000000000000000404E3" class="calibre10 pcalibre pcalibre1">%rcx</code></td>
<td id="P70004970270000000000000000404E4" data-uri="chapter03.xhtml#P70004970270000000000000000404E4" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404E5" data-uri="chapter03.xhtml#P70004970270000000000000000404E5" class="calibre10 pcalibre pcalibre1">0x1</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404E6" data-uri="chapter03.xhtml#P70004970270000000000000000404E6" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404E7" data-uri="chapter03.xhtml#P70004970270000000000000000404E7" class="calibre10 pcalibre pcalibre1">0x110</code></td>
<td id="P70004970270000000000000000404E8" data-uri="chapter03.xhtml#P70004970270000000000000000404E8" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404E9" data-uri="chapter03.xhtml#P70004970270000000000000000404E9" class="calibre10 pcalibre pcalibre1">0x13</code></td>
<td id="P70004970270000000000000000404EA" data-uri="chapter03.xhtml#P70004970270000000000000000404EA" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404EB" data-uri="chapter03.xhtml#P70004970270000000000000000404EB" class="calibre10 pcalibre pcalibre1">%rdx</code></td>
<td id="P70004970270000000000000000404EC" data-uri="chapter03.xhtml#P70004970270000000000000000404EC" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404ED" data-uri="chapter03.xhtml#P70004970270000000000000000404ED" class="calibre10 pcalibre pcalibre1">0x3</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404EE" data-uri="chapter03.xhtml#P70004970270000000000000000404EE" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404EF" data-uri="chapter03.xhtml#P70004970270000000000000000404EF" class="calibre10 pcalibre pcalibre1">0x118</code></td>
<td id="P70004970270000000000000000404F0" data-uri="chapter03.xhtml#P70004970270000000000000000404F0" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404F1" data-uri="chapter03.xhtml#P70004970270000000000000000404F1" class="calibre10 pcalibre pcalibre1">0x11</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000404F2" data-uri="chapter03.xhtml#P70004970270000000000000000404F2" class="pcalibre calibre3 pcalibre1">Fill in the following table showing the effects of the following instructions, in terms of both the register or memory location that will be updated and the resulting value:</p>
<table id="P70004970270000000000000000404F3" data-uri="chapter03.xhtml#P70004970270000000000000000404F3" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000404F4" data-uri="chapter03.xhtml#P70004970270000000000000000404F4" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P70004970270000000000000000404F5" data-uri="chapter03.xhtml#P70004970270000000000000000404F5" class="calibre18 pcalibre pcalibre1">Destination</th>
<th id="P70004970270000000000000000404F6" data-uri="chapter03.xhtml#P70004970270000000000000000404F6" class="calibre18 pcalibre pcalibre1">Value</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404F7" data-uri="chapter03.xhtml#P70004970270000000000000000404F7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404F8" data-uri="chapter03.xhtml#P70004970270000000000000000404F8" class="calibre10 pcalibre pcalibre1">addq %rcx,(%rax)</code></td>
<td id="P70004970270000000000000000404F9" data-uri="chapter03.xhtml#P70004970270000000000000000404F9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P70004970270000000000000000404FA" data-uri="chapter03.xhtml#P70004970270000000000000000404FA" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404FB" data-uri="chapter03.xhtml#P70004970270000000000000000404FB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000404FC" data-uri="chapter03.xhtml#P70004970270000000000000000404FC" class="calibre10 pcalibre pcalibre1">subq %rdx,8(%rax)</code></td>
<td id="P70004970270000000000000000404FD" data-uri="chapter03.xhtml#P70004970270000000000000000404FD" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P70004970270000000000000000404FE" data-uri="chapter03.xhtml#P70004970270000000000000000404FE" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000404FF" data-uri="chapter03.xhtml#P70004970270000000000000000404FF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040500" data-uri="chapter03.xhtml#P7000497027000000000000000040500" class="calibre10 pcalibre pcalibre1">imulq $16,( %rax,%rdx,8)</code></td>
<td id="P7000497027000000000000000040501" data-uri="chapter03.xhtml#P7000497027000000000000000040501" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040502" data-uri="chapter03.xhtml#P7000497027000000000000000040502" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040503" data-uri="chapter03.xhtml#P7000497027000000000000000040503" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040504" data-uri="chapter03.xhtml#P7000497027000000000000000040504" class="calibre10 pcalibre pcalibre1">incq 16(%rax)</code></td>
<td id="P7000497027000000000000000040505" data-uri="chapter03.xhtml#P7000497027000000000000000040505" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040506" data-uri="chapter03.xhtml#P7000497027000000000000000040506" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040507" data-uri="chapter03.xhtml#P7000497027000000000000000040507" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040508" data-uri="chapter03.xhtml#P7000497027000000000000000040508" class="calibre10 pcalibre pcalibre1">decq %rcx</code></td>
<td id="P7000497027000000000000000040509" data-uri="chapter03.xhtml#P7000497027000000000000000040509" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000004050A" data-uri="chapter03.xhtml#P700049702700000000000000004050A" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004050B" data-uri="chapter03.xhtml#P700049702700000000000000004050B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004050C" data-uri="chapter03.xhtml#P700049702700000000000000004050C" class="calibre10 pcalibre pcalibre1">subq %rdx,%rax</code></td>
<td id="P700049702700000000000000004050D" data-uri="chapter03.xhtml#P700049702700000000000000004050D" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000004050E" data-uri="chapter03.xhtml#P700049702700000000000000004050E" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
</div>
</li></ol>
</section>
</section>
<section id="P7000497027000000000000000002264" data-uri="chapter03.xhtml#P7000497027000000000000000002264" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004050F" data-uri="chapter03.xhtml#P700049702700000000000000004050F" epub:type="title"><span class="pcalibre label pcalibre1">3.5.3 </span>Shift Operations</h1></header>
<p id="P7000497027000000000000000040510" data-uri="chapter03.xhtml#P7000497027000000000000000040510" class="pcalibre1 pcalibre calibre2">The final group consists of shift operations, where the shift amount is given first and the value to shift is given second. Both arithmetic and logical right shifts are <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002267" title="195" data-uri="chapter03.xhtml#P7000497027000000000000000002267" epub:type="pagebreak"></span>possible. The different shift instructions can specify the shift amount either as an immediate value or with the single-byte register <code id="P7000497027000000000000000040511" data-uri="chapter03.xhtml#P7000497027000000000000000040511" class="pcalibre1 calibre8 pcalibre">%cl</code>. (These instructions are unusual in only allowing this specific register as the operand.) In principle, having a 1-byte shift amount would make it possible to encode shift amounts ranging up to 2<sup class="calibre51 pcalibre pcalibre1">8</sup> − 1 = 255. With x86-64, a shift instruction operating on data values that are <var class="calibre5 pcalibre pcalibre1">w</var> bits long determines the shift amount from the low-order <var class="calibre5 pcalibre pcalibre1">m</var> bits of register <code id="P7000497027000000000000000040512" data-uri="chapter03.xhtml#P7000497027000000000000000040512" class="pcalibre1 calibre8 pcalibre">%cl</code>, where 2<sup class="calibre51 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">m</var></sup> = <var class="calibre5 pcalibre pcalibre1">w</var>. The higher-order bits are ignored. So, for example, when register <code id="P7000497027000000000000000040513" data-uri="chapter03.xhtml#P7000497027000000000000000040513" class="pcalibre1 calibre8 pcalibre">%cl</code> has hexadecimal value <code id="P7000497027000000000000000040514" data-uri="chapter03.xhtml#P7000497027000000000000000040514" class="pcalibre1 calibre8 pcalibre">0xFF</code>, then instruction <code id="P7000497027000000000000000040515" data-uri="chapter03.xhtml#P7000497027000000000000000040515" class="pcalibre1 calibre8 pcalibre">salb</code> would shift by 7, while <code id="P7000497027000000000000000040516" data-uri="chapter03.xhtml#P7000497027000000000000000040516" class="pcalibre1 calibre8 pcalibre">salw</code> would shift by 15, <code id="P7000497027000000000000000040517" data-uri="chapter03.xhtml#P7000497027000000000000000040517" class="pcalibre1 calibre8 pcalibre">sall</code> would shift by 31, and <code id="P7000497027000000000000000040518" data-uri="chapter03.xhtml#P7000497027000000000000000040518" class="pcalibre1 calibre8 pcalibre">salq</code> would shift by 63.</p>
<p id="P7000497027000000000000000040519" data-uri="chapter03.xhtml#P7000497027000000000000000040519" class="pcalibre1 pcalibre calibre2">As <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> indicates, there are two names for the left shift instruction: <span class="smallcaps pcalibre pcalibre1">sal </span>and <span class="smallcaps pcalibre pcalibre1">shl</span>. Both have the same effect, filling from the right with zeros. The right shift instructions differ in that <span class="smallcaps pcalibre pcalibre1">sar </span>performs an arithmetic shift (fill with copies of the sign bit), whereas <span class="smallcaps pcalibre pcalibre1">shr </span>performs a logical shift (fill with zeros). The destination operand of a shift operation can be either a register or a memory location. We denote the two different right shift operations in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> as <code id="P700049702700000000000000004051A" data-uri="chapter03.xhtml#P700049702700000000000000004051A" class="pcalibre1 calibre8 pcalibre">&gt;&gt;<sub class="calibre59 pcalibre pcalibre1">A</sub></code> (arithmetic) and <code id="P700049702700000000000000004051B" data-uri="chapter03.xhtml#P700049702700000000000000004051B" class="pcalibre1 calibre8 pcalibre">&gt;&gt;<sub class="calibre59 pcalibre pcalibre1">L</sub></code> (logical).</p>
<section id="P7000497027000000000000000002273" data-uri="chapter03.xhtml#P7000497027000000000000000002273" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004051C" data-uri="chapter03.xhtml#P700049702700000000000000004051C" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.9 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003508">328</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004051D" data-uri="chapter03.xhtml#P700049702700000000000000004051D">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004051E" data-uri="chapter03.xhtml#P700049702700000000000000004051E">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004051F" data-uri="chapter03.xhtml#P700049702700000000000000004051F"><p id="P7000497027000000000000000040520" data-uri="chapter03.xhtml#P7000497027000000000000000040520" class="pcalibre calibre3 pcalibre1">Suppose we want to generate assembly code for the following C function:</p>
<pre id="P7000497027000000000000000040521" data-uri="chapter03.xhtml#P7000497027000000000000000040521" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040522" data-uri="chapter03.xhtml#P7000497027000000000000000040522" class="calibre10 pcalibre pcalibre1">
long shift_left4_rightn(long x, long n)
{
  x ≪= 4;
  x ≫= n;
  return x;
}
</code></pre>
<p id="P7000497027000000000000000040523" data-uri="chapter03.xhtml#P7000497027000000000000000040523" class="pcalibre calibre3 pcalibre1">The code that follows is a portion of the assembly code that performs the actual shifts and leaves the final value in register <code id="P7000497027000000000000000040524" data-uri="chapter03.xhtml#P7000497027000000000000000040524" class="pcalibre1 calibre8 pcalibre">%rax.</code> Two key instructions have been omitted. Parameters x and n are stored in registers <code id="P7000497027000000000000000040525" data-uri="chapter03.xhtml#P7000497027000000000000000040525" class="pcalibre1 calibre8 pcalibre">%rdi</code> and <code id="P7000497027000000000000000040526" data-uri="chapter03.xhtml#P7000497027000000000000000040526" class="pcalibre1 calibre8 pcalibre">%rsi</code>, respectively.</p>
<pre id="P7000497027000000000000000040527" data-uri="chapter03.xhtml#P7000497027000000000000000040527" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040528" data-uri="chapter03.xhtml#P7000497027000000000000000040528" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long shift_left4_rightn(long x, long n)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, n in %rsi</i>
shift_left4_rightn:
  movq    %rdi, %rax	<i class="calibre5 pcalibre pcalibre1">Get x</i>
________________	<i class="calibre5 pcalibre pcalibre1">x ≪= 4</i>
  movl    %esi, %ecx    <i class="calibre5 pcalibre pcalibre1">Get n (4 bytes)</i>
________________	<i class="calibre5 pcalibre pcalibre1">x ≫= n</i>
</code></pre>
<p id="P7000497027000000000000000040529" data-uri="chapter03.xhtml#P7000497027000000000000000040529" class="pcalibre calibre3 pcalibre1">Fill in the missing instructions, following the annotations on the right. The right shift should be performed arithmetically.</p>
</div></li></ol>
</section>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002282" data-uri="chapter03.xhtml#P7000497027000000000000000002282">
<ol class="pcalibre1 ol_lower-alpha pcalibre" id="P700049702700000000000000004052A" data-uri="chapter03.xhtml#P700049702700000000000000004052A">
<li id="P700049702700000000000000004052B" data-uri="chapter03.xhtml#P700049702700000000000000004052B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004052C" data-uri="chapter03.xhtml#P700049702700000000000000004052C" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002286" title="196" data-uri="chapter03.xhtml#P7000497027000000000000000002286" epub:type="pagebreak"></span>C code</p>
<pre id="P700049702700000000000000004052D" data-uri="chapter03.xhtml#P700049702700000000000000004052D" class="calibre86 pcalibre pcalibre1"><code id="P700049702700000000000000004052E" data-uri="chapter03.xhtml#P700049702700000000000000004052E" class="calibre10 pcalibre pcalibre1">
long arith(long x, long y, long z)
{
    long t1 = x ^ y;
    long t2 = z * 48;
    long t3 = t1 &amp; 0x0F0F0F0F;
    long t4 = t2 - t3;
    return t4;
}
</code></pre>
</li>
<li id="P700049702700000000000000004052F" data-uri="chapter03.xhtml#P700049702700000000000000004052F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040530" data-uri="chapter03.xhtml#P7000497027000000000000000040530" class="pcalibre calibre3 pcalibre1">Assembly code</p>
<pre id="P7000497027000000000000000040531" data-uri="chapter03.xhtml#P7000497027000000000000000040531" class="calibre86 pcalibre pcalibre1"><code id="P7000497027000000000000000040532" data-uri="chapter03.xhtml#P7000497027000000000000000040532" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long arith(long x, long y, long z)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, z in %rdx</i>
1	arith:
2	  xorq %rsi, %rdi		<i class="calibre5 pcalibre pcalibre1">t1 = x ^ y</i>
3	  leaq (%rdx,%rdx,2), %rax	<i class="calibre5 pcalibre pcalibre1">3*z</i>
4	  salq $4, %rax			<i class="calibre5 pcalibre pcalibre1">t2 = 16 * (3*z) = 48*z</i>
5	  andl $252645135, %edi		<i class="calibre5 pcalibre pcalibre1">t3 = t1 &amp; 0x0F0F0F0F</i>
6	  subq %rdi, %rax		<i class="calibre5 pcalibre pcalibre1">Return t2 - t3</i>
7	  ret
</code></pre></li>
</ol>
<figcaption id="P7000497027000000000000000040533" data-uri="chapter03.xhtml#P7000497027000000000000000040533" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040534" data-uri="chapter03.xhtml#P7000497027000000000000000040534" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.11 </span>C and assembly code for arithmetic function.</h1></header></figcaption>
</figure>
</section>
<section id="P700049702700000000000000000228F" data-uri="chapter03.xhtml#P700049702700000000000000000228F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040535" data-uri="chapter03.xhtml#P7000497027000000000000000040535" epub:type="title"><span class="pcalibre label pcalibre1">3.5.4 </span>Discussion</h1></header>
<p id="P7000497027000000000000000040536" data-uri="chapter03.xhtml#P7000497027000000000000000040536" class="pcalibre1 pcalibre calibre2">We see that most of the instructions shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> can be used for either unsigned or two's-complement arithmetic. Only right shifting requires instructions that differentiate between signed versus unsigned data. This is one of the features that makes two's-complement arithmetic the preferred way to implement signed integer arithmetic.</p>
<p id="P7000497027000000000000000040537" data-uri="chapter03.xhtml#P7000497027000000000000000040537" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002282"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.11</span></a> shows an example of a function that performs arithmetic operations and its translation into assembly code. Arguments <code id="P7000497027000000000000000040538" data-uri="chapter03.xhtml#P7000497027000000000000000040538" class="pcalibre1 calibre8 pcalibre">x, y</code>, and <code id="P7000497027000000000000000040539" data-uri="chapter03.xhtml#P7000497027000000000000000040539" class="pcalibre1 calibre8 pcalibre">z</code> are initially stored in registers <code id="P700049702700000000000000004053A" data-uri="chapter03.xhtml#P700049702700000000000000004053A" class="pcalibre1 calibre8 pcalibre">%rdi, %rsi</code>, and <code id="P700049702700000000000000004053B" data-uri="chapter03.xhtml#P700049702700000000000000004053B" class="pcalibre1 calibre8 pcalibre">%rdx</code>, respectively. The assembly-code instructions correspond closely with the lines of C source code. Line 2 computes the value of <code id="P700049702700000000000000004053C" data-uri="chapter03.xhtml#P700049702700000000000000004053C" class="pcalibre1 calibre8 pcalibre">x^y</code>. Lines 3 and 4 compute the expression <code id="P700049702700000000000000004053D" data-uri="chapter03.xhtml#P700049702700000000000000004053D" class="pcalibre1 calibre8 pcalibre">z*48</code> by a combination of <code id="P700049702700000000000000004053E" data-uri="chapter03.xhtml#P700049702700000000000000004053E" class="pcalibre1 calibre8 pcalibre">leaq</code> and shift instructions. Line 5 computes the <span class="smallcaps pcalibre pcalibre1">and </span>of <code id="P700049702700000000000000004053F" data-uri="chapter03.xhtml#P700049702700000000000000004053F" class="pcalibre1 calibre8 pcalibre">t1</code> and <code id="P7000497027000000000000000040540" data-uri="chapter03.xhtml#P7000497027000000000000000040540" class="pcalibre1 calibre8 pcalibre">0x0F0F0F0F</code>. The final subtraction is computed by line 6. Since the destination of the subtraction is register <code id="P7000497027000000000000000040541" data-uri="chapter03.xhtml#P7000497027000000000000000040541" class="pcalibre1 calibre8 pcalibre">%rax</code>, this will be the value returned by the function.</p>
<p id="P7000497027000000000000000040542" data-uri="chapter03.xhtml#P7000497027000000000000000040542" class="pcalibre1 pcalibre calibre2">In the assembly code of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002282"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.11</span></a>, the sequence of values in register <code id="P7000497027000000000000000040543" data-uri="chapter03.xhtml#P7000497027000000000000000040543" class="pcalibre1 calibre8 pcalibre">%rax</code> corresponds to program values <code id="P7000497027000000000000000040544" data-uri="chapter03.xhtml#P7000497027000000000000000040544" class="pcalibre1 calibre8 pcalibre">3*z, z*48</code>, and <code id="P7000497027000000000000000040545" data-uri="chapter03.xhtml#P7000497027000000000000000040545" class="pcalibre1 calibre8 pcalibre">t4</code> (as the return value). In general, compilers generate code that uses individual registers for multiple program values and moves program values among the registers.</p>
<section id="P70004970270000000000000000022A1" data-uri="chapter03.xhtml#P70004970270000000000000000022A1" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040546" data-uri="chapter03.xhtml#P7000497027000000000000000040546" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.10 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003561">329</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040547" data-uri="chapter03.xhtml#P7000497027000000000000000040547">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040548" data-uri="chapter03.xhtml#P7000497027000000000000000040548">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040549" data-uri="chapter03.xhtml#P7000497027000000000000000040549"><p id="P700049702700000000000000004054A" data-uri="chapter03.xhtml#P700049702700000000000000004054A" class="pcalibre calibre3 pcalibre1">In the following variant of the function of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002282"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.11(a)</span></a>, the expressions have been replaced by blanks:</p>
<pre id="P700049702700000000000000004054B" data-uri="chapter03.xhtml#P700049702700000000000000004054B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004054C" data-uri="chapter03.xhtml#P700049702700000000000000004054C" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000022A9" title="197" data-uri="chapter03.xhtml#P70004970270000000000000000022A9" epub:type="pagebreak"></span>
long arith2(long x, long y, long z)
{
  longt1= __________;
  longt2= __________;
  longt3= __________;
  longt4= __________;
  return t4;
}
</code></pre>
<p id="P700049702700000000000000004054D" data-uri="chapter03.xhtml#P700049702700000000000000004054D" class="pcalibre calibre3 pcalibre1">The portion of the generated assembly code implementing these expressions is as follows:</p>
<pre id="P700049702700000000000000004054E" data-uri="chapter03.xhtml#P700049702700000000000000004054E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004054F" data-uri="chapter03.xhtml#P700049702700000000000000004054F" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long arith2(long x, long y, long z)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, z in %rdx</i>
arith2:
  orq	%rsi, %rdi
  sarq	$3, %rdi
  notq	%rdi
  movq	%rdx, %rax
  subq	%rdi, %rax
  ret
</code></pre>
<p id="P7000497027000000000000000040550" data-uri="chapter03.xhtml#P7000497027000000000000000040550" class="pcalibre calibre3 pcalibre1">Based on this assembly code, fill in the missing portions of the C code.</p>
</div></li></ol>
</section>
<section id="P70004970270000000000000000022AE" data-uri="chapter03.xhtml#P70004970270000000000000000022AE" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040551" data-uri="chapter03.xhtml#P7000497027000000000000000040551" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.11 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003561">329</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040552" data-uri="chapter03.xhtml#P7000497027000000000000000040552">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040553" data-uri="chapter03.xhtml#P7000497027000000000000000040553">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040554" data-uri="chapter03.xhtml#P7000497027000000000000000040554"><p id="P7000497027000000000000000040555" data-uri="chapter03.xhtml#P7000497027000000000000000040555" class="pcalibre calibre3 pcalibre1">It is common to find assembly-code lines of the form</p>
<pre id="P7000497027000000000000000040556" data-uri="chapter03.xhtml#P7000497027000000000000000040556" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040557" data-uri="chapter03.xhtml#P7000497027000000000000000040557" class="calibre10 pcalibre pcalibre1">
xorq %rdx,%rdx
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P7000497027000000000000000040558" data-uri="chapter03.xhtml#P7000497027000000000000000040558">in code that was generated from C where no <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>operations were present.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000040559" data-uri="chapter03.xhtml#P7000497027000000000000000040559">
<li id="P700049702700000000000000004055A" data-uri="chapter03.xhtml#P700049702700000000000000004055A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004055B" data-uri="chapter03.xhtml#P700049702700000000000000004055B" class="pcalibre calibre3 pcalibre1">Explain the effect of this particular <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>instruction and what useful operation it implements.</p></li>
<li id="P700049702700000000000000004055C" data-uri="chapter03.xhtml#P700049702700000000000000004055C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004055D" data-uri="chapter03.xhtml#P700049702700000000000000004055D" class="pcalibre calibre3 pcalibre1">What would be the more straightforward way to express this operation in assembly code?</p></li>
<li id="P700049702700000000000000004055E" data-uri="chapter03.xhtml#P700049702700000000000000004055E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004055F" data-uri="chapter03.xhtml#P700049702700000000000000004055F" class="pcalibre calibre3 pcalibre1">Compare the number of bytes to encode these two different implementations of the same operation.</p></li></ol>
</div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000022BE" data-uri="chapter03.xhtml#P70004970270000000000000000022BE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040560" data-uri="chapter03.xhtml#P7000497027000000000000000040560" epub:type="title"><span class="pcalibre label pcalibre1">3.5.5 </span>Special Arithmetic Operations</h1></header>
<p id="P7000497027000000000000000040561" data-uri="chapter03.xhtml#P7000497027000000000000000040561" class="pcalibre1 pcalibre calibre2">As we saw in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000CB3"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">2.3</span></a>, multiplying two 64-bit signed or unsigned integers can yield a product that requires 128 bits to represent. The x86-64 instruction set provides limited support for operations involving 128-bit (16-byte) numbers. Continuing with the naming convention of word (2 bytes), double word (4 bytes), and quad word (8 bytes), Intel refers to a 16-byte quantity as an <i class="calibre5 pcalibre pcalibre1">oct word</i>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000022C1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.12</span></a></p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000022C1" data-uri="chapter03.xhtml#P70004970270000000000000000022C1">
<table id="P7000497027000000000000000040562" data-uri="chapter03.xhtml#P7000497027000000000000000040562" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040563" data-uri="chapter03.xhtml#P7000497027000000000000000040563" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P70004970270000000000000000022C4" title="198" data-uri="chapter03.xhtml#P70004970270000000000000000022C4" epub:type="pagebreak"></span>Instruction</th>
<th id="P7000497027000000000000000040564" data-uri="chapter03.xhtml#P7000497027000000000000000040564" class="calibre18 pcalibre pcalibre1">Effect</th>
<th id="P7000497027000000000000000040565" data-uri="chapter03.xhtml#P7000497027000000000000000040565" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040566" data-uri="chapter03.xhtml#P7000497027000000000000000040566" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040567" data-uri="chapter03.xhtml#P7000497027000000000000000040567" class="calibre10 pcalibre pcalibre1">imulq</code> <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040568" data-uri="chapter03.xhtml#P7000497027000000000000000040568" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000040569" data-uri="chapter03.xhtml#P7000497027000000000000000040569" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P700049702700000000000000004056A" data-uri="chapter03.xhtml#P700049702700000000000000004056A" class="calibre10 pcalibre pcalibre1">%rax</code>] ← <var class="calibre5 pcalibre pcalibre1">S</var> × R[<code id="P700049702700000000000000004056B" data-uri="chapter03.xhtml#P700049702700000000000000004056B" class="calibre10 pcalibre pcalibre1">%rax</code>]</td>
<td id="P700049702700000000000000004056C" data-uri="chapter03.xhtml#P700049702700000000000000004056C" class="calibre20 pcalibre pcalibre1">Signed full multiply</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004056D" data-uri="chapter03.xhtml#P700049702700000000000000004056D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004056E" data-uri="chapter03.xhtml#P700049702700000000000000004056E" class="calibre10 pcalibre pcalibre1">mulq</code> <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004056F" data-uri="chapter03.xhtml#P700049702700000000000000004056F" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000040570" data-uri="chapter03.xhtml#P7000497027000000000000000040570" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P7000497027000000000000000040571" data-uri="chapter03.xhtml#P7000497027000000000000000040571" class="calibre10 pcalibre pcalibre1">%rax</code>] ← <var class="calibre5 pcalibre pcalibre1">S</var> × R[<code id="P7000497027000000000000000040572" data-uri="chapter03.xhtml#P7000497027000000000000000040572" class="calibre10 pcalibre pcalibre1">%rax</code>]</td>
<td id="P7000497027000000000000000040573" data-uri="chapter03.xhtml#P7000497027000000000000000040573" class="calibre20 pcalibre pcalibre1">Unsigned full multiply</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040574" data-uri="chapter03.xhtml#P7000497027000000000000000040574" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040575" data-uri="chapter03.xhtml#P7000497027000000000000000040575" class="calibre10 pcalibre pcalibre1">cqto</code></td>
<td id="P7000497027000000000000000040576" data-uri="chapter03.xhtml#P7000497027000000000000000040576" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000040577" data-uri="chapter03.xhtml#P7000497027000000000000000040577" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P7000497027000000000000000040578" data-uri="chapter03.xhtml#P7000497027000000000000000040578" class="calibre10 pcalibre pcalibre1">%rax</code>] ← SignExtend(R[<code id="P7000497027000000000000000040579" data-uri="chapter03.xhtml#P7000497027000000000000000040579" class="calibre10 pcalibre pcalibre1">%rax</code>])</td>
<td id="P700049702700000000000000004057A" data-uri="chapter03.xhtml#P700049702700000000000000004057A" class="calibre20 pcalibre pcalibre1">Convert to oct word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004057B" data-uri="chapter03.xhtml#P700049702700000000000000004057B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004057C" data-uri="chapter03.xhtml#P700049702700000000000000004057C" class="calibre10 pcalibre pcalibre1">idivq</code> <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004057D" data-uri="chapter03.xhtml#P700049702700000000000000004057D" class="calibre20 pcalibre pcalibre1">R[<code id="P700049702700000000000000004057E" data-uri="chapter03.xhtml#P700049702700000000000000004057E" class="calibre10 pcalibre pcalibre1">%rdx</code>] ← R[<code id="P700049702700000000000000004057F" data-uri="chapter03.xhtml#P700049702700000000000000004057F" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P7000497027000000000000000040580" data-uri="chapter03.xhtml#P7000497027000000000000000040580" class="calibre10 pcalibre pcalibre1">%rax</code>] mod <var class="calibre5 pcalibre pcalibre1">S</var>;<br class="edition pcalibre pcalibre1"/>R[<code id="P7000497027000000000000000040581" data-uri="chapter03.xhtml#P7000497027000000000000000040581" class="calibre10 pcalibre pcalibre1">%rax</code>] ← R[<code id="P7000497027000000000000000040582" data-uri="chapter03.xhtml#P7000497027000000000000000040582" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P7000497027000000000000000040583" data-uri="chapter03.xhtml#P7000497027000000000000000040583" class="calibre10 pcalibre pcalibre1">%rax</code>] ÷ <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040584" data-uri="chapter03.xhtml#P7000497027000000000000000040584" class="calibre20 pcalibre pcalibre1">Signed divide</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040585" data-uri="chapter03.xhtml#P7000497027000000000000000040585" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040586" data-uri="chapter03.xhtml#P7000497027000000000000000040586" class="calibre10 pcalibre pcalibre1">divq</code> <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P7000497027000000000000000040587" data-uri="chapter03.xhtml#P7000497027000000000000000040587" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000040588" data-uri="chapter03.xhtml#P7000497027000000000000000040588" class="calibre10 pcalibre pcalibre1">%rdx</code>] ← R[<code id="P7000497027000000000000000040589" data-uri="chapter03.xhtml#P7000497027000000000000000040589" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P700049702700000000000000004058A" data-uri="chapter03.xhtml#P700049702700000000000000004058A" class="calibre10 pcalibre pcalibre1">%rax</code>] mod <var class="calibre5 pcalibre pcalibre1">S</var>;<br class="edition pcalibre pcalibre1"/>R[<code id="P700049702700000000000000004058B" data-uri="chapter03.xhtml#P700049702700000000000000004058B" class="calibre10 pcalibre pcalibre1">%rax</code>] ← R[<code id="P700049702700000000000000004058C" data-uri="chapter03.xhtml#P700049702700000000000000004058C" class="calibre10 pcalibre pcalibre1">%rdx</code>]:R[<code id="P700049702700000000000000004058D" data-uri="chapter03.xhtml#P700049702700000000000000004058D" class="calibre10 pcalibre pcalibre1">%rax</code>] ÷ <var class="calibre5 pcalibre pcalibre1">S</var></td>
<td id="P700049702700000000000000004058E" data-uri="chapter03.xhtml#P700049702700000000000000004058E" class="calibre20 pcalibre pcalibre1">Unsigned divide</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004058F" data-uri="chapter03.xhtml#P700049702700000000000000004058F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040590" data-uri="chapter03.xhtml#P7000497027000000000000000040590" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.12 </span>Special arithmetic operations.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040591" data-uri="chapter03.xhtml#P7000497027000000000000000040591"><p id="P7000497027000000000000000040592" data-uri="chapter03.xhtml#P7000497027000000000000000040592" class="pcalibre calibre3 pcalibre1">These operations provide full 128-bit multiplication and division, for both signed and unsigned numbers. The pair of registers <code id="P7000497027000000000000000040593" data-uri="chapter03.xhtml#P7000497027000000000000000040593" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000040594" data-uri="chapter03.xhtml#P7000497027000000000000000040594" class="pcalibre1 calibre8 pcalibre">%rax</code> are viewed as forming a single 128-bit oct word.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040595" data-uri="chapter03.xhtml#P7000497027000000000000000040595">describes instructions that support generating the full 128-bit product of two 64-bit numbers, as well as integer division.</p>
<p id="P7000497027000000000000000040596" data-uri="chapter03.xhtml#P7000497027000000000000000040596" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000040597" data-uri="chapter03.xhtml#P7000497027000000000000000040597" class="pcalibre1 calibre8 pcalibre">imulq</code> instruction has two different forms One form, shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a>, is as a member of the <span class="smallcaps pcalibre pcalibre1">imul </span>instruction class. In this form, it serves as a "two-operand" multiply instruction, generating a 64-bit product from two 64-bit operands. It implements the operations <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="22" altimg="../images/198-1.png"><m:mrow><m:msubsup><m:mo>*</m:mo><m:mrow><m:mn>64</m:mn></m:mrow><m:mtext>u</m:mtext></m:msubsup></m:mrow></m:math></span> and <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="25" altimg-height="23" altimg="../images/198-2.png"><m:mrow><m:msubsup><m:mo>*</m:mo><m:mrow><m:mn>64</m:mn></m:mrow><m:mtext>t</m:mtext></m:msubsup></m:mrow></m:math></span> described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000E9A"><span class="pcalibre label pcalibre1">Sections </span><span class="pcalibre label pcalibre1">2.3.4</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000CB3_split_001.xhtml#P7000497027000000000000000000EA4"><span class="pcalibre label pcalibre1">2.3.5</span></a>. (Recall that when truncating the product to 64 bits, both unsigned multiply and two's-complement multiply have the same bit-level behavior.)</p>
<p id="P7000497027000000000000000040598" data-uri="chapter03.xhtml#P7000497027000000000000000040598" class="pcalibre1 pcalibre calibre2">Additionally, the x86-64 instruction set includes two different "one-operand" multiply instructions to compute the full 128-bit product of two 64-bit values—one for unsigned (<code id="P7000497027000000000000000040599" data-uri="chapter03.xhtml#P7000497027000000000000000040599" class="pcalibre1 calibre8 pcalibre">mulq</code>) and one for two's-complement (<code id="P700049702700000000000000004059A" data-uri="chapter03.xhtml#P700049702700000000000000004059A" class="pcalibre1 calibre8 pcalibre">imulq</code>) multiplication. For both of these instructions, one argument must be in register <code id="P700049702700000000000000004059B" data-uri="chapter03.xhtml#P700049702700000000000000004059B" class="pcalibre1 calibre8 pcalibre">%rax</code>, and the other is given as the instruction source operand. The product is then stored in registers <code id="P700049702700000000000000004059C" data-uri="chapter03.xhtml#P700049702700000000000000004059C" class="pcalibre1 calibre8 pcalibre">%rdx</code> (high-order 64 bits) and <code id="P700049702700000000000000004059D" data-uri="chapter03.xhtml#P700049702700000000000000004059D" class="pcalibre1 calibre8 pcalibre">%rax</code> (low-order 64 bits). Although the name <code id="P700049702700000000000000004059E" data-uri="chapter03.xhtml#P700049702700000000000000004059E" class="pcalibre1 calibre8 pcalibre">imulq</code> is used for two distinct multiplication operations, the assembler can tell which one is intended by counting the number of operands.</p>
<p id="P700049702700000000000000004059F" data-uri="chapter03.xhtml#P700049702700000000000000004059F" class="pcalibre1 pcalibre calibre2">As an example, the following C code demonstrates the generation of a 128-bit product of two unsigned 64-bit numbers x and y:</p>
<pre id="P70004970270000000000000000405A0" data-uri="chapter03.xhtml#P70004970270000000000000000405A0" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405A1" data-uri="chapter03.xhtml#P70004970270000000000000000405A1" class="calibre10 pcalibre pcalibre1">
#include &lt;inttypes.h&gt;

typedef unsigned __int128 uint128_t;

void store_uprod(uint128_t *dest, uint64_t x, uint64_t y) {
   *dest = x * (uint128_t) y;
}
</code></pre>
<p id="P70004970270000000000000000405A2" data-uri="chapter03.xhtml#P70004970270000000000000000405A2" class="pcalibre1 pcalibre calibre2">In this program, we explicitly declare <code id="P70004970270000000000000000405A3" data-uri="chapter03.xhtml#P70004970270000000000000000405A3" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P70004970270000000000000000405A4" data-uri="chapter03.xhtml#P70004970270000000000000000405A4" class="pcalibre1 calibre8 pcalibre">y</code> to be 64-bit numbers, using definitions declared in the file <code id="P70004970270000000000000000405A5" data-uri="chapter03.xhtml#P70004970270000000000000000405A5" class="pcalibre1 calibre8 pcalibre">inttypes.h</code>, as part of an extension of the C standard. Unfortunately, this standard does not make provisions for 128-bit values. Instead, <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002307" title="199" data-uri="chapter03.xhtml#P7000497027000000000000000002307" epub:type="pagebreak"></span>we rely on support provided by <span class="smallcaps pcalibre pcalibre1">gcc </span>for 128-bit integers, declared using the name <code id="P70004970270000000000000000405A6" data-uri="chapter03.xhtml#P70004970270000000000000000405A6" class="pcalibre1 calibre8 pcalibre">__int128</code>. Our code uses a <code id="P70004970270000000000000000405A7" data-uri="chapter03.xhtml#P70004970270000000000000000405A7" class="pcalibre1 calibre8 pcalibre">typedef</code> declaration to define data type <code id="P70004970270000000000000000405A8" data-uri="chapter03.xhtml#P70004970270000000000000000405A8" class="pcalibre1 calibre8 pcalibre">uint128_t</code>, following the naming pattern for other data types found in <code id="P70004970270000000000000000405A9" data-uri="chapter03.xhtml#P70004970270000000000000000405A9" class="pcalibre1 calibre8 pcalibre">inttypes.h.</code> The code specifies that the resulting product should be stored at the 16 bytes designated by pointer <code id="P70004970270000000000000000405AA" data-uri="chapter03.xhtml#P70004970270000000000000000405AA" class="pcalibre1 calibre8 pcalibre">dest</code>.</p>
<p id="P70004970270000000000000000405AB" data-uri="chapter03.xhtml#P70004970270000000000000000405AB" class="pcalibre1 pcalibre calibre2">The assembly code generated by <span class="smallcaps pcalibre pcalibre1">gcc </span>for this function is as follows:</p>
<pre id="P70004970270000000000000000405AC" data-uri="chapter03.xhtml#P70004970270000000000000000405AC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405AD" data-uri="chapter03.xhtml#P70004970270000000000000000405AD" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">void store_uprod(uint128_t *dest, uint64_t x, uint64_t y)</i>
  <i class="calibre5 pcalibre pcalibre1">dest in %rdi, x in %rsi, y in %rdx</i>
1	store_uprod:
2	  movq	%rsi, %rax	<i class="calibre5 pcalibre pcalibre1">Copy x to multiplicand</i>
3	  mulq	%rdx		<i class="calibre5 pcalibre pcalibre1">Multiply by y</i>
4	  movq	%rax, (%rdi)	<i class="calibre5 pcalibre pcalibre1">Store lower 8 bytes at dest</i>
5	  movq	%rdx, 8(%rdi)	<i class="calibre5 pcalibre pcalibre1">Store upper 8 bytes at dest+8</i>
6	  ret
</code></pre>
<p id="P70004970270000000000000000405AE" data-uri="chapter03.xhtml#P70004970270000000000000000405AE" class="pcalibre1 pcalibre calibre2">Observe that storing the product requires two <code id="P70004970270000000000000000405AF" data-uri="chapter03.xhtml#P70004970270000000000000000405AF" class="pcalibre1 calibre8 pcalibre">movq</code> instructions: one for the low-order 8 bytes (line 4), and one for the high-order 8 bytes (line 5). Since the code is generated for a little-endian machine, the high-order bytes are stored at higher addresses, as indicated by the address specification <code id="P70004970270000000000000000405B0" data-uri="chapter03.xhtml#P70004970270000000000000000405B0" class="pcalibre1 calibre8 pcalibre">8(%rdi)</code>.</p>
<p id="P70004970270000000000000000405B1" data-uri="chapter03.xhtml#P70004970270000000000000000405B1" class="pcalibre1 pcalibre calibre2">Our earlier table of arithmetic operations (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a>) does not list any division or modulus operations. These operations are provided by the single-operand divide instructions similar to the single-operand multiply instructions. The signed division instruction <code id="P70004970270000000000000000405B2" data-uri="chapter03.xhtml#P70004970270000000000000000405B2" class="pcalibre1 calibre8 pcalibre">idivl</code> takes as its dividend the 128-bit quantity in registers <code id="P70004970270000000000000000405B3" data-uri="chapter03.xhtml#P70004970270000000000000000405B3" class="pcalibre1 calibre8 pcalibre">%rdx</code> (high-order 64 bits) and <code id="P70004970270000000000000000405B4" data-uri="chapter03.xhtml#P70004970270000000000000000405B4" class="pcalibre1 calibre8 pcalibre">%rax</code> (low-order 64 bits). The divisor is given as the instruction operand. The instruction stores the quotient in register <code id="P70004970270000000000000000405B5" data-uri="chapter03.xhtml#P70004970270000000000000000405B5" class="pcalibre1 calibre8 pcalibre">%rax</code> and the remainder in register <code id="P70004970270000000000000000405B6" data-uri="chapter03.xhtml#P70004970270000000000000000405B6" class="pcalibre1 calibre8 pcalibre">%rdx</code>.</p>
<p id="P70004970270000000000000000405B7" data-uri="chapter03.xhtml#P70004970270000000000000000405B7" class="pcalibre1 pcalibre calibre2">For most applications of 64-bit addition, the dividend is given as a 64-bit value. This value should be stored in register <code id="P70004970270000000000000000405B8" data-uri="chapter03.xhtml#P70004970270000000000000000405B8" class="pcalibre1 calibre8 pcalibre">%rax</code>. The bits of <code id="P70004970270000000000000000405B9" data-uri="chapter03.xhtml#P70004970270000000000000000405B9" class="pcalibre1 calibre8 pcalibre">%rdx</code> should then be set to either all zeros (unsigned arithmetic) or the sign bit of <code id="P70004970270000000000000000405BA" data-uri="chapter03.xhtml#P70004970270000000000000000405BA" class="pcalibre1 calibre8 pcalibre">%rax</code> (signed arithmetic). The latter operation can be performed using the instruction <code id="P70004970270000000000000000405BB" data-uri="chapter03.xhtml#P70004970270000000000000000405BB" class="pcalibre1 calibre8 pcalibre">cqto</code>.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P7000497027000000000000000003A6B" epub:type="noteref" href="#P7000497027000000000000000003A6B"><sup class="pcalibre1 calibre21 pcalibre">2</sup></a> This instruction takes no operands—it implicitly reads the sign bit from <code id="P70004970270000000000000000405BC" data-uri="chapter03.xhtml#P70004970270000000000000000405BC" class="pcalibre1 calibre8 pcalibre">%rax</code> and copies it across all of <code id="P70004970270000000000000000405BD" data-uri="chapter03.xhtml#P70004970270000000000000000405BD" class="pcalibre1 calibre8 pcalibre">%rdx</code>.</p><aside class="footnote pcalibre5 pcalibre" id="P7000497027000000000000000003A6B" data-uri="chapter03.xhtml#P7000497027000000000000000003A6B" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P7000497027000000000000000003A6B" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">2. </a></span>This instruction is called <code id="P7000497027000000000000000041C32" data-uri="chapter03.xhtml#P7000497027000000000000000041C32" class="calibre10 pcalibre pcalibre1">cqo</code> in the Intel documentation, one of the few cases where the ATT-format name for an instruction does not match the Intel name.</p></aside>
<p id="P70004970270000000000000000405BE" data-uri="chapter03.xhtml#P70004970270000000000000000405BE" class="pcalibre1 pcalibre calibre2">As an illustration of the implementation of division with x86-64, the following C function computes the quotient and remainder of two 64-bit, signed numbers:</p>
<pre id="P70004970270000000000000000405BF" data-uri="chapter03.xhtml#P70004970270000000000000000405BF" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405C0" data-uri="chapter03.xhtml#P70004970270000000000000000405C0" class="calibre10 pcalibre pcalibre1">
void remdiv(long x, long y,
  		long *qp, long *rp) {
  	long q = x/y;
  	long r = x%y;
  	*qp = q;
  	*rp = r;
}
</code></pre>
<p id="P70004970270000000000000000405C1" data-uri="chapter03.xhtml#P70004970270000000000000000405C1" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002324" title="200" data-uri="chapter03.xhtml#P7000497027000000000000000002324" epub:type="pagebreak"></span>This compiles to the following assembly code:</p>
<pre id="P70004970270000000000000000405C2" data-uri="chapter03.xhtml#P70004970270000000000000000405C2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405C3" data-uri="chapter03.xhtml#P70004970270000000000000000405C3" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">void remdiv(long x, long y, long *qp, long *rp)</i>
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, qp in %rdx, rp in %rcx</i>
1	remdiv:
2	 movq %rdx, %r8		<i class="calibre5 pcalibre pcalibre1">Copy qp</i>
3	 movq %rdi, %rax	<i class="calibre5 pcalibre pcalibre1">Move x to lower 8 bytes of dividend</i>
4	 cqto			<i class="calibre5 pcalibre pcalibre1">Sign-extend to upper 8 bytes of dividend</i>
5	 idivq %rsi		<i class="calibre5 pcalibre pcalibre1">Divide by y</i>
6	 movq %rax, (%r8)	<i class="calibre5 pcalibre pcalibre1">Store quotient at qp</i>
7	 movq %rdx, (%rcx)	<i class="calibre5 pcalibre pcalibre1">Store remainder at rp</i>
8	 ret
</code></pre>
<p id="P70004970270000000000000000405C4" data-uri="chapter03.xhtml#P70004970270000000000000000405C4" class="pcalibre1 pcalibre calibre2">In this code, argument rp must first be saved in a different register (line 2), since argument register <code id="P70004970270000000000000000405C5" data-uri="chapter03.xhtml#P70004970270000000000000000405C5" class="pcalibre1 calibre8 pcalibre">%rdx</code> is required for the division operation. Lines 3-4 then prepare the dividend by copying and sign-extending <code id="P70004970270000000000000000405C6" data-uri="chapter03.xhtml#P70004970270000000000000000405C6" class="pcalibre1 calibre8 pcalibre">x</code>. Following the division, the quotient in register <code id="P70004970270000000000000000405C7" data-uri="chapter03.xhtml#P70004970270000000000000000405C7" class="pcalibre1 calibre8 pcalibre">%rax</code> gets stored at <code id="P70004970270000000000000000405C8" data-uri="chapter03.xhtml#P70004970270000000000000000405C8" class="pcalibre1 calibre8 pcalibre">qp</code> (line 6), while the remainder in register <code id="P70004970270000000000000000405C9" data-uri="chapter03.xhtml#P70004970270000000000000000405C9" class="pcalibre1 calibre8 pcalibre">%rdx</code> gets stored at <code id="P70004970270000000000000000405CA" data-uri="chapter03.xhtml#P70004970270000000000000000405CA" class="pcalibre1 calibre8 pcalibre">rp</code> (line 7).</p>
<p id="P70004970270000000000000000405CB" data-uri="chapter03.xhtml#P70004970270000000000000000405CB" class="pcalibre1 pcalibre calibre2">Unsigned division makes use of the divq instruction. Typically, register <code id="P70004970270000000000000000405CC" data-uri="chapter03.xhtml#P70004970270000000000000000405CC" class="pcalibre1 calibre8 pcalibre">%rdx</code> is set to zero beforehand.</p>
<section id="P7000497027000000000000000002330" data-uri="chapter03.xhtml#P7000497027000000000000000002330" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000405CD" data-uri="chapter03.xhtml#P70004970270000000000000000405CD" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.12 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003561">329</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000405CE" data-uri="chapter03.xhtml#P70004970270000000000000000405CE">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000405CF" data-uri="chapter03.xhtml#P70004970270000000000000000405CF">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000405D0" data-uri="chapter03.xhtml#P70004970270000000000000000405D0"><p id="P70004970270000000000000000405D1" data-uri="chapter03.xhtml#P70004970270000000000000000405D1" class="pcalibre calibre3 pcalibre1">Consider the following function for computing the quotient and remainder of two unsigned 64-bit numbers:</p>
<pre id="P70004970270000000000000000405D2" data-uri="chapter03.xhtml#P70004970270000000000000000405D2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405D3" data-uri="chapter03.xhtml#P70004970270000000000000000405D3" class="calibre10 pcalibre pcalibre1">
void uremdiv(unsigned long x, unsigned long y,
  		unsigned long *qp, unsigned long *rp) {
  	unsigned long q = x/y;
  	unsigned long r = x%y;
  	*qp = q;
  	*rp = r;
}
</code></pre>
<p id="P70004970270000000000000000405D4" data-uri="chapter03.xhtml#P70004970270000000000000000405D4" class="pcalibre calibre3 pcalibre1">Modify the assembly code shown for signed division to implement this function.</p>
</div></li>
</ol></section>
</section>
</section></body></html>
