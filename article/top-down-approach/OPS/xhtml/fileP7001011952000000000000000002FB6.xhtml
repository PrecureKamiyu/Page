<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>8.5 Securing E-Mail</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000002FB6" class="level1"><header><h1 class="title" id="P700101195200000000000000000B7C2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C2" epub:type="title"><span class="pagebreak" title="626" id="P7001011952000000000000000002FB8" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FB8" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">8.5</span> Securing E-Mail</h1></header>
<p id="P700101195200000000000000000B7C3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C3">In previous sections, we examined fundamental issues in network security, including symmetric key and public key cryptography, end-point authentication, key distribution, message integrity, and digital signatures. We are now going to examine how these tools are being used to provide security in the Internet.</p>
<p id="P700101195200000000000000000B7C4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C4">Interestingly, it is possible to provide security services in any of the top four layers of the Internet protocol stack. When security is provided for a specific application-layer protocol, the application using the protocol will enjoy one or more security services, such as confidentiality, authentication, or integrity. When security is provided for a transport-layer protocol, all applications that use that protocol enjoy the security services of the transport protocol. When security is provided at the network layer on a host-to-host basis, all transport-layer segments (and hence all application-layer data) enjoy the security services of the network layer. When security is provided on a link basis, then the data in all frames traveling over the link receive the security services of the link.</p>
<p id="P700101195200000000000000000B7C5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C5">In <a class="xref" href="#P7001011952000000000000000002FB6" data-foobar="1"><span class="label">Sections</span> <span class="number">8.5</span></a> through <a class="xref" href="fileP70010119520000000000000000030D2.xhtml#P70010119520000000000000000030D2" data-foobar="7"><span class="number">8.8</span></a>, we examine how security tools are being used in the application, transport, network, and link layers. Being consistent with the general structure of this book, we begin at the top of the protocol stack and discuss security at the application layer. Our approach is to use a specific application, e-mail, as a case study for application-layer security. We then move down the protocol stack. We’ll examine the SSL protocol (which provides security at the transport layer), IPsec (which provides security at the network layer), and the security of the IEEE 802.11 wireless LAN protocol.</p>
<p id="P700101195200000000000000000B7C6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C6">You might be wondering why security functionality is being provided at more than one layer in the Internet. Wouldn’t it suffice simply to provide the security functionality at the network layer and be done with it? There are two answers to this question. First, although security at the network layer can offer “blanket coverage” by encrypting all the data in the datagrams (that is, all the transport-layer segments) and by authenticating all the source IP addresses, it can’t provide user-level security. For example, a commerce site cannot rely on IP-layer security to authenticate a customer who is purchasing goods at the commerce site. Thus, there is a need for security functionality at higher layers as well as blanket coverage at lower layers. Second, it is generally easier to deploy new Internet services, including security services, at the higher layers of the protocol stack. While waiting for security to be broadly deployed at the network layer, which is probably still many years in the future, many application developers “just do it” and introduce security functionality into their favorite applications. A classic example is Pretty Good Privacy (PGP), which provides secure e-mail (discussed later in this section). Requiring only client and server application code, PGP was one of the first security technologies to be broadly used in the Internet.</p>
<section id="P7001011952000000000000000002FBD" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FBD" class="level2"><header><h1 class="title" id="P700101195200000000000000000B7C7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C7" epub:type="title"><span class="pagebreak" title="627" id="P7001011952000000000000000002FBF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FBF" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">8.5.1</span> Secure E-Mail</h1></header>
<p id="P700101195200000000000000000B7C8" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C8">We now use the cryptographic principles of <a class="xref" href="fileP7001011952000000000000000002D74.xhtml#P7001011952000000000000000002D74" data-foobar="7"><span class="label">Sections</span> <span class="number">8.2</span></a> through <a class="xref" href="fileP7001011952000000000000000002E7A.xhtml#P7001011952000000000000000002E7A" data-foobar="7"><span class="number">8.3</span></a> to create a secure e-mail system. We create this high-level design in an incremental manner, at each step introducing new security services. When designing a secure e-mail system, let us keep in mind the racy example introduced in <a class="xref" href="fileP7001011952000000000000000002D54.xhtml#P7001011952000000000000000002D54" data-foobar="7"><span class="label">Section</span> <span class="number">8.1</span></a>—the love affair between Alice and Bob. Imagine that Alice wants to send an e-mail message to Bob, and Trudy wants to intrude.</p>
<p id="P700101195200000000000000000B7C9" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7C9">Before plowing ahead and designing a secure e-mail system for Alice and Bob, we should consider which security features would be most desirable for them. First and foremost is <i>confidentiality.</i> As discussed in <a class="xref" href="fileP7001011952000000000000000002D54.xhtml#P7001011952000000000000000002D54" data-foobar="7"><span class="label">Section</span> <span class="number">8.1</span></a>, neither Alice nor Bob wants Trudy to read Alice’s e-mail message. The second feature that Alice and Bob would most likely want to see in the secure e-mail system is <i>sender authentication</i>. In particular, when Bob receives the message “<code id="P700101195200000000000000000B7CA" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7CA">I don’t love you anymore. I never want to see you again. Formerly yours, Alice,</code>” he would naturally want to be sure that the message came from Alice and not from Trudy. Another feature that the two lovers would appreciate is <i>message integrity</i>, that is, assurance that the message Alice sends is not modified while en route to Bob. Finally, the e-mail system should provide <i>receiver authentication</i>; that is, Alice wants to make sure that she is indeed sending the letter to Bob and not to someone else (for example, Trudy) who is impersonating Bob.</p>
<p id="P700101195200000000000000000B7CB" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7CB">So let’s begin by addressing the foremost concern, confidentiality. The most straightforward way to provide confidentiality is for Alice to encrypt the message with symmetric key technology (such as DES or AES) and for Bob to decrypt the message on receipt. As discussed in <a class="xref" href="fileP7001011952000000000000000002D74.xhtml#P7001011952000000000000000002D74" data-foobar="7"><span class="label">Section</span> <span class="number">8.2</span></a>, if the symmetric key is long enough, and if only Alice and Bob have the key, then it is extremely difficult for anyone else (including Trudy) to read the message. Although this approach is straightforward, it has the fundamental difficulty that we discussed in <a class="xref" href="fileP7001011952000000000000000002D74.xhtml#P7001011952000000000000000002D74" data-foobar="7"><span class="label">Section</span> <span class="number">8.2</span></a>—distributing a symmetric key so that only Alice and Bob have copies of it. So we naturally consider an alternative approach—public key cryptography (using, for example, RSA). In the public key approach, Bob makes his public key publicly available (e.g., in a public key server or on his personal Web page), Alice encrypts her message with Bob’s public key, and she sends the encrypted message to Bob’s e-mail address. When Bob receives the message, he simply decrypts it with his private key. Assuming that Alice knows for sure that the public key is Bob’s public key, this approach is an excellent means to provide the desired confidentiality. One problem, however, is that public key encryption is relatively inefficient, particularly for long messages.</p>
<p id="P700101195200000000000000000B7CC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7CC">To overcome the efficiency problem, let’s make use of a session key (discussed in <a class="xref" href="fileP7001011952000000000000000002D74.xhtml#P7001011952000000000000000002DFC" data-foobar="7"><span class="label">Section</span> <span class="number">8.2.2</span></a>). In particular, Alice (1) selects a random symmetric session key, <i>K<sub>S</sub></i>, (2) encrypts her message, <i>m</i>, with the symmetric key, (3) encrypts the symmetric key with Bob’s public key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="32" altimg-height="20" altimg="../images/ch08math125.png"><m:mrow><m:msub><m:mi>K</m:mi><m:mi>B</m:mi></m:msub><m:msup><m:mrow></m:mrow><m:mo>+</m:mo></m:msup></m:mrow></m:math></span>, (4) concatenates the encrypted message and the encrypted symmetric key to form a “package,” and (5) sends the package to Bob’s<span class="pagebreak" title="628" id="P7001011952000000000000000002FC5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FC5" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002FC6" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FC6">
<img alt="Alice used a symmetric session key, KS, to send a secret email to Bob." height="254" width="647" aria-describedby="P7001011952000000000000000002FCA" id="P700101195200000000000000000B7CD" data-uri="P700101195200000000000000000561E" src="../images/4055108019.png"></img>
<figcaption id="P700101195200000000000000000B7CE" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7CE"><header><h1 class="title" id="P700101195200000000000000000B7CF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7CF" epub:type="title"><span class="label">Figure </span> <span class="number">8.19</span> Alice used a symmetric session key, <i>K<sub>S</sub></i>, to send a secret e-mail to Bob</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002FCA" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FCA" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108019.xhtml#la_4055108019"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B7D2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7D2">e-mail address. The steps are illustrated in <a class="xref" href="#P7001011952000000000000000002FC6" data-foobar="1"><span class="label">Figure</span> <span class="number">8.19</span></a>. (In this and the subsequent figures, the circled “<span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="13" altimg-height="12" altimg="../images/ch08math126.png"><m:mo>+</m:mo></m:math></span>” represents concatenation and the circled “<span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="15" altimg-height="3" altimg="../images/ch08math127.png"><m:mo>−</m:mo></m:math></span>” represents deconcatenation.) When Bob receives the package, he (1) uses his private key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="24" altimg-height="16" altimg="../images/ch08math128.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>B</m:mi><m:mo>−</m:mo></m:msubsup></m:mrow></m:math></span>, to obtain the symmetric key, <i>K<sub>S</sub></i>, and (2) uses the symmetric key <i>K<sub>S</sub></i> to decrypt the message <i>m</i>.</p>
<p id="P700101195200000000000000000B7D3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7D3">Having designed a secure e-mail system that provides confidentiality, let’s now design another system that provides both sender authentication and message integrity. We’ll suppose, for the moment, that Alice and Bob are no longer concerned with confidentiality (they want to share their feelings with everyone!), and are concerned only about sender authentication and message integrity. To accomplish this task, we use digital signatures and message digests, as described in <a class="xref" href="fileP7001011952000000000000000002E7A.xhtml#P7001011952000000000000000002E7A" data-foobar="7"><span class="label">Section</span> <span class="number">8.3</span></a>. Specifically, Alice (1) applies a hash function, <i>H</i> (for example, MD5), to her message, <i>m</i>, to obtain a message digest, (2) signs the result of the hash function with her private key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="24" altimg-height="17" altimg="../images/ch08math129.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>A</m:mi><m:mo>−</m:mo></m:msubsup></m:mrow></m:math></span>, to create a digital signature, (3) concatenates the original (unencrypted) message with the signature to create a package, and (4) sends the package to Bob’s e-mail address. When Bob receives the package, he (1) applies Alice’s public key, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="24" altimg-height="20" altimg="../images/ch08math130.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>A</m:mi><m:mo>+</m:mo></m:msubsup></m:mrow></m:math></span>, to the signed message digest and (2) compares the result of this operation with his own hash, <i>H</i>, of the message. The steps are illustrated in <a class="xref" href="#P7001011952000000000000000002FD1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.20</span></a>. As discussed in <a class="xref" href="fileP7001011952000000000000000002E7A.xhtml#P7001011952000000000000000002E7A" data-foobar="7"><span class="label">Section</span> <span class="number">8.3</span></a>, if the two results are the same, Bob can be pretty confident that the message came from Alice and is unaltered.</p>
<p id="P700101195200000000000000000B7D4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7D4">Now let’s consider designing an e-mail system that provides confidentiality, sender authentication, <i>and</i> message integrity. This can be done by combining the procedures in <a class="xref" href="#P7001011952000000000000000002FC6" data-foobar="1"><span class="label">Figures</span> <span class="number">8.19</span></a> and <a class="xref" href="#P7001011952000000000000000002FD1" data-foobar="1"><span class="number">8.20</span></a>. Alice first creates a preliminary package, exactly as in <a class="xref" href="#P7001011952000000000000000002FD1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.20</span></a>, that consists of her original message along with a digitally signed hash of the message. She then treats this preliminary package as a message in itself and sends this new message through the sender steps in <a class="xref" href="#P7001011952000000000000000002FC6" data-foobar="1"><span class="label">Figure</span> <span class="number">8.19</span></a>, creating a new package that is sent to Bob. The steps applied by Alice are shown in <a class="xref" href="#P7001011952000000000000000002FDC" data-foobar="1"><span class="label">Figure</span> <span class="number">8.21</span></a>. When Bob receives the package, he first applies his side of <a class="xref" href="#P7001011952000000000000000002FC6" data-foobar="1"><span class="label">Figure</span> <span class="number">8.19</span></a> and then his<span class="pagebreak" title="629" id="P7001011952000000000000000002FD0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FD0" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002FD1" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FD1">
<img alt="Using hash functions and digital signatures to provide sender authentication and message integrity." height="261" width="762" aria-describedby="P7001011952000000000000000002FD5" id="P700101195200000000000000000B7D5" data-uri="P700101195200000000000000000561F" src="../images/4055108020.png"></img>
<figcaption id="P700101195200000000000000000B7D6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7D6"><header><h1 class="title" id="P700101195200000000000000000B7D7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7D7" epub:type="title"><span class="label">Figure </span> <span class="number">8.20</span> Using hash functions and digital signatures to provide ­sender authentication and message integrity</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002FD5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FD5" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108020.xhtml#la_4055108020"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B7DC" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7DC">side of <a class="xref" href="#P7001011952000000000000000002FD1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.20</span></a>. It should be clear that this design achieves the goal of providing confidentiality, sender authentication, and message integrity. Note that, in this scheme, Alice uses public key cryptography twice: once with her own private key and once with Bob’s public key. Similarly, Bob also uses public key cryptography twice—once with his private key and once with Alice’s public key.</p>
<p id="P700101195200000000000000000B7DD" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7DD">The secure e-mail design outlined in <a class="xref" href="#P7001011952000000000000000002FDC" data-foobar="1"><span class="label">Figure</span> <span class="number">8.21</span></a> probably provides satisfactory security for most e-mail users for most occasions. But there is still one important issue that remains to be addressed. The design in <a class="xref" href="#P7001011952000000000000000002FDC" data-foobar="1"><span class="label">Figure</span> <span class="number">8.21</span></a> requires Alice to obtain Bob’s public key, and requires Bob to obtain Alice’s public key. The distribution of these public keys is a nontrivial problem. For example, Trudy might masquerade as Bob and give Alice her own public key while saying that it is Bob’s public key,</p>
<figure id="P7001011952000000000000000002FDC" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FDC">
<img alt="Alice uses symmetric key cyptography, public key cryptography, a hash function, and a digital signature to provide secrecy, sender authentication, and message integrity." height="272" width="625" aria-describedby="P7001011952000000000000000002FE0" id="P700101195200000000000000000B7DE" data-uri="P7001011952000000000000000005620" src="../images/4055108021.png"></img>
<figcaption id="P700101195200000000000000000B7DF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7DF"><header><h1 class="title" id="P700101195200000000000000000B7E0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E0" epub:type="title"><span class="label">Figure </span> <span class="number">8.21</span> Alice uses symmetric key cyptography, public key ­cryptography, a hash function, and a digital signature to ­provide secrecy, sender authentication, and message integrity</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002FE0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FE0" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055108021.xhtml#la_4055108021"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000B7E2" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E2"><span class="pagebreak" title="630" id="P7001011952000000000000000002FE3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FE3" epub:type="pagebreak" role="doc-pagebreak"></span>enabling her to receive the message meant for Bob. As we learned in <a class="xref" href="fileP7001011952000000000000000002E7A.xhtml#P7001011952000000000000000002E7A" data-foobar="7"><span class="label">Section</span> <span class="number">8.3</span></a>, a popular approach for securely distributing public keys is to <i>certify</i> the public keys using a CA.</p>
</section>
<section id="P7001011952000000000000000002FE4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FE4" class="level2"><header><h1 class="title" id="P700101195200000000000000000B7E3" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E3" epub:type="title"><span class="number">8.5.2</span> PGP</h1></header>
<p id="P700101195200000000000000000B7E4" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E4">Written by Phil Zimmermann in 1991, <span class="keyword" id="P7001011952000000000000000002FE7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FE7">Pretty Good Privacy (PGP)</span> is a nice example of an e-mail encryption scheme <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AAB" data-foobar="7">[PGPI 2016]</a>. Versions of PGP are available in the public domain; for example, you can find the PGP software for your favorite platform as well as lots of interesting reading at the International PGP Home Page <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AAB" data-foobar="7">[PGPI 2016]</a>. The PGP design is, in essence, the same as the design shown in <a class="xref" href="#P7001011952000000000000000002FDC" data-foobar="1"><span class="label">Figure</span> <span class="number">8.21</span></a>. Depending on the version, the PGP software uses MD5 or SHA for calculating the message digest; CAST, triple-DES, or IDEA for symmetric key encryption; and RSA for the public key encryption.</p>
<p id="P700101195200000000000000000B7E5" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E5">When PGP is installed, the software creates a public key pair for the user. The public key can be posted on the user’s Web site or placed in a public key server. The private key is protected by the use of a password. The password has to be entered every time the user accesses the private key. PGP gives the user the option of digitally signing the message, encrypting the message, or both digitally signing and encrypting. <a class="xref" href="#P7001011952000000000000000002FEB" data-foobar="1"><span class="label">Figure</span> <span class="number">8.22</span></a> shows a PGP signed message. This message appears after the MIME header. The encoded data in the message is <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="80" altimg-height="17" altimg="../images/ch08math131.png"><m:mrow><m:msubsup><m:mstyle mathsize="140%" displaystyle="true"><m:mi>K</m:mi></m:mstyle><m:mi>A</m:mi><m:mo>−</m:mo></m:msubsup><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>H</m:mi><m:mrow><m:mo>(</m:mo><m:mi>m</m:mi><m:mo>)</m:mo></m:mrow></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>, that is, the digitally signed message digest. As we discussed above, in order for Bob to verify the integrity of the message, he needs to have access to Alice’s public key.</p>
<p id="P700101195200000000000000000B7E6" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E6"><a class="xref" href="#P7001011952000000000000000002FF1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.23</span></a> shows a secret PGP message. This message also appears after the MIME header. Of course, the plaintext message is not included within the secret e-mail message. When a sender (such as Alice) wants both confidentiality and integrity, PGP contains a message like that of <a class="xref" href="#P7001011952000000000000000002FF1" data-foobar="1"><span class="label">Figure</span> <span class="number">8.23</span></a> within the message of <a class="xref" href="#P7001011952000000000000000002FEB" data-foobar="1"><span class="label">Figure</span> <span class="number">8.22</span></a>.</p>
<p id="P700101195200000000000000000B7E7" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E7">PGP also provides a mechanism for public key certification, but the mechanism is quite different from the more conventional CA. PGP public keys are certified by</p>
<figure id="P7001011952000000000000000002FEB" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FEB">
<img alt="" height="237" width="600" id="P700101195200000000000000000B7E8" data-uri="P7001011952000000000000000005621" src="../images/4055108022.png"></img>
<figcaption id="P700101195200000000000000000B7E9" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7E9"><header><h1 class="title" id="P700101195200000000000000000B7EA" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7EA" epub:type="title"><span class="label">Figure </span> <span class="number">8.22</span> A PGP signed message</h1></header>
</figcaption>
</figure>
<p id="P700101195200000000000000000B7EB" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7EB"><span class="pagebreak" title="631" id="P7001011952000000000000000002FF0" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FF0" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000002FF1" class="figure" data-uri="M08_KURO4140_07_SE_C08.xhtml#P7001011952000000000000000002FF1">
<img alt="" height="141" width="624" id="P700101195200000000000000000B7EC" data-uri="P7001011952000000000000000005622" src="../images/4055108023.png"></img>
<figcaption id="P700101195200000000000000000B7ED" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7ED"><header><h1 class="title" id="P700101195200000000000000000B7EE" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7EE" epub:type="title"><span class="label">Figure </span> <span class="number">8.23</span> A secret PGP message</h1></header>
</figcaption>
</figure>
<p class="continued" id="P700101195200000000000000000B7EF" data-uri="M08_KURO4140_07_SE_C08.xhtml#P700101195200000000000000000B7EF">a <i>web of trust.</i> Alice herself can certify any key/username pair when she believes the pair really belong together. In addition, PGP permits Alice to say that she trusts another user to vouch for the authenticity of more keys. Some PGP users sign each other’s keys by holding key-signing parties. Users physically gather, exchange ­public keys, and certify each other’s keys by signing them with their private keys.</p>
</section>
</section></body></html>