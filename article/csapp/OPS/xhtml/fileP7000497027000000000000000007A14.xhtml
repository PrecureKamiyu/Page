<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.6 Reading File Metadata</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007A14" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000464EF" data-uri="chapter10.xhtml#P70004970270000000000000000464EF" epub:type="title"><span class="pcalibre label pcalibre1">10.6 </span>Reading File Metadata</h1></header>
<p id="P70004970270000000000000000464F0" data-uri="chapter10.xhtml#P70004970270000000000000000464F0" class="pcalibre1 pcalibre calibre2">An application can retrieve information about a file (sometimes called the file's <i class="calibre5 pcalibre pcalibre1">metadata</i>) by calling the <code id="P70004970270000000000000000464F1" data-uri="chapter10.xhtml#P70004970270000000000000000464F1" class="pcalibre1 calibre8 pcalibre">stat</code> and <code id="P70004970270000000000000000464F2" data-uri="chapter10.xhtml#P70004970270000000000000000464F2" class="pcalibre1 calibre8 pcalibre">fstat</code> functions.</p>
<pre id="P70004970270000000000000000464F3" data-uri="chapter10.xhtml#P70004970270000000000000000464F3" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000464F4" data-uri="chapter10.xhtml#P70004970270000000000000000464F4" class="calibre10 pcalibre pcalibre1">
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
int stat(const char *filename, struct stat *buf);
int fstat(int fd, struct stat *buf);
					Returns: 0 if OK, âˆ’1 on error
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000464F5" data-uri="chapter10.xhtml#P70004970270000000000000000464F5">The <code id="P70004970270000000000000000464F6" data-uri="chapter10.xhtml#P70004970270000000000000000464F6" class="pcalibre1 calibre8 pcalibre">stat</code> function takes as input a filename and fills in the members of a <code id="P70004970270000000000000000464F7" data-uri="chapter10.xhtml#P70004970270000000000000000464F7" class="pcalibre1 calibre8 pcalibre">stat</code> structure shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A31"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.9</span></a>. The <code id="P70004970270000000000000000464F8" data-uri="chapter10.xhtml#P70004970270000000000000000464F8" class="pcalibre1 calibre8 pcalibre">fstat</code> function is similar, but it takes a file descriptor instead of a filename. We will need the <code id="P70004970270000000000000000464F9" data-uri="chapter10.xhtml#P70004970270000000000000000464F9" class="pcalibre1 calibre8 pcalibre">st_mode</code> and <code id="P70004970270000000000000000464FA" data-uri="chapter10.xhtml#P70004970270000000000000000464FA" class="pcalibre1 calibre8 pcalibre">st_size</code> members of the <code id="P70004970270000000000000000464FB" data-uri="chapter10.xhtml#P70004970270000000000000000464FB" class="pcalibre1 calibre8 pcalibre">stat</code> structure when we discuss Web servers in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007E82"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">11.5</span></a>. The other members are beyond our scope.</p>
<p id="P70004970270000000000000000464FC" data-uri="chapter10.xhtml#P70004970270000000000000000464FC" class="pcalibre1 pcalibre calibre2">The <code id="P70004970270000000000000000464FD" data-uri="chapter10.xhtml#P70004970270000000000000000464FD" class="pcalibre1 calibre8 pcalibre">st_size</code> member contains the file size in bytes. The <code id="P70004970270000000000000000464FE" data-uri="chapter10.xhtml#P70004970270000000000000000464FE" class="pcalibre1 calibre8 pcalibre">st_mode</code> member encodes both the file permission bits (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000078E1.xhtml#P70004970270000000000000000078FD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.2</span></a>) and the file type (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000078AD.xhtml#P70004970270000000000000000078AD"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">10.2</span></a>). Linux defines macro predicates in <code id="P70004970270000000000000000464FF" data-uri="chapter10.xhtml#P70004970270000000000000000464FF" class="pcalibre1 calibre8 pcalibre">sys/stat.h</code> for determining the file type from the <code id="P7000497027000000000000000046500" data-uri="chapter10.xhtml#P7000497027000000000000000046500" class="pcalibre1 calibre8 pcalibre">st_mode</code> member:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046501" data-uri="chapter10.xhtml#P7000497027000000000000000046501">
<li id="P7000497027000000000000000046502" data-uri="chapter10.xhtml#P7000497027000000000000000046502" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046503" data-uri="chapter10.xhtml#P7000497027000000000000000046503" class="calibre13 pcalibre pcalibre1">S_ISREG(m). Is this a regular file?</p></li>
<li id="P7000497027000000000000000046504" data-uri="chapter10.xhtml#P7000497027000000000000000046504" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046505" data-uri="chapter10.xhtml#P7000497027000000000000000046505" class="calibre13 pcalibre pcalibre1">S_ISDIR(m). Is this a directory file?</p></li>
<li id="P7000497027000000000000000046506" data-uri="chapter10.xhtml#P7000497027000000000000000046506" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046507" data-uri="chapter10.xhtml#P7000497027000000000000000046507" class="calibre13 pcalibre pcalibre1">S_ISSOCK(m). Is this a network socket?</p></li>
</ul>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046508" data-uri="chapter10.xhtml#P7000497027000000000000000046508"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A38"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.10</span></a> shows how we might use these macros and the <code id="P7000497027000000000000000046509" data-uri="chapter10.xhtml#P7000497027000000000000000046509" class="pcalibre1 calibre8 pcalibre">stat</code> function to read and interpret a file's <code id="P700049702700000000000000004650A" data-uri="chapter10.xhtml#P700049702700000000000000004650A" class="pcalibre1 calibre8 pcalibre">st_mode</code> bits.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007A31" data-uri="chapter10.xhtml#P7000497027000000000000000007A31">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007A32" title="904" data-uri="chapter10.xhtml#P7000497027000000000000000007A32" epub:type="pagebreak"></span>
<pre id="P700049702700000000000000004650B" data-uri="chapter10.xhtml#P700049702700000000000000004650B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004650C" data-uri="chapter10.xhtml#P700049702700000000000000004650C" class="calibre10 pcalibre pcalibre1">
/* Metadata returned by the stat and fstat functions */
struct stat {
	dev_t		st_dev;		/* Device */
	ino_t		st_ino;		/* inode */
	mode_t		st_mode;	/* Protection and file type */
	nlink_t		st_nlink;	/* Number of hard links */
	uid_t		st_uid;		/* User ID of owner */
	gid_t		st_gid;		/* Group ID of owner */
	dev_t		st_rdev;	/* Device type (if inode device) */
	off_t		st_size;	/* Total size, in bytes */
	unsigned long	st_blksize;	/* Block size for filesystem I/O */
	unsigned long	st_blocks;	/* Number of blocks allocated */
	time_t		st_atime;	/* Time of last access */
	time_t		st_mtime;	/* Time of last modification */
	time_t		st_ctime;	/* Time of last change */
};
</code></pre>
<figcaption id="P700049702700000000000000004650D" data-uri="chapter10.xhtml#P700049702700000000000000004650D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004650E" data-uri="chapter10.xhtml#P700049702700000000000000004650E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.9 </span>The <code id="P700049702700000000000000004650F" data-uri="chapter10.xhtml#P700049702700000000000000004650F" class="pcalibre1 calibre8 pcalibre">stat</code> structure.</h1></header>
</figcaption>
</figure>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007A38" data-uri="chapter10.xhtml#P7000497027000000000000000007A38">
<pre id="P7000497027000000000000000046510" data-uri="chapter10.xhtml#P7000497027000000000000000046510" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046511" data-uri="chapter10.xhtml#P7000497027000000000000000046511" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main (int argc, char **argv)
4	{
5		struct stat stat;
6		char *type, *readok;
7	
8		Stat(argv[1], &amp;stat);
9		if (S_ISREG(stat.st_mode))	/* Determine file type */
10			type = "regular";
11		else if (S_ISDIR(stat.st_mode))
12			type = "directory";
13		else
14			type = "other";
15		if ((stat.st_mode &amp; S_IRUSR)) /* Check read access */
16			readok = "yes";
17		else
18			readok = "no";
19	
20		printf("type: %s, read: %s\n", type, readok);
21		exit(0);
22	}
</code></pre>
<figcaption id="P7000497027000000000000000046512" data-uri="chapter10.xhtml#P7000497027000000000000000046512" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046513" data-uri="chapter10.xhtml#P7000497027000000000000000046513" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.10 </span>Querying and manipulating a file's <code id="P7000497027000000000000000046514" data-uri="chapter10.xhtml#P7000497027000000000000000046514" class="pcalibre1 calibre8 pcalibre">st_mode</code> bits.</h1></header>
</figcaption>
</figure>
</section></body></html>
