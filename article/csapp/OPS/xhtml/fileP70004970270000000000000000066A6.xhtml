<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>8.1 Exceptions</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000066A6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000044E8C" data-uri="chapter08.xhtml#P7000497027000000000000000044E8C" epub:type="title"><span class="pcalibre label pcalibre1">8.1 </span>Exceptions</h1></header>
<p id="P7000497027000000000000000044E8D" data-uri="chapter08.xhtml#P7000497027000000000000000044E8D" class="pcalibre1 pcalibre calibre2">Exceptions are a form of exceptional control flow that are implemented partly by the hardware and partly by the operating system. Because they are partly implemented in hardware, the details vary from system to system. However, the basic ideas are the same for every system. Our aim in this section is to give you a general understanding of exceptions and exception handling and to help demystify what is often a confusing aspect of modern computer systems.</p>
<p id="P7000497027000000000000000044E8E" data-uri="chapter08.xhtml#P7000497027000000000000000044E8E" class="pcalibre1 pcalibre calibre2">An <i class="calibre5 pcalibre pcalibre1">exception</i> is an abrupt change in the control flow in response to some change in the processor's state. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000066B1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.1</span></a> shows the basic idea.</p>
<p id="P7000497027000000000000000044E8F" data-uri="chapter08.xhtml#P7000497027000000000000000044E8F" class="pcalibre1 pcalibre calibre2">In the figure, the processor is executing some current instruction <var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">curr</sub> when a significant change in the processor's <i class="calibre5 pcalibre pcalibre1">state</i> occurs. The state is encoded in various bits and signals inside the processor. The change in state is known as an <i class="calibre5 pcalibre pcalibre1">event</i>.</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000044E90" data-uri="chapter08.xhtml#P7000497027000000000000000044E90"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000044E91" data-uri="chapter08.xhtml#P7000497027000000000000000044E91" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000066AD" title="724" data-uri="chapter08.xhtml#P70004970270000000000000000066AD" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Hardware versus software exceptions</h1></header>
<p id="P7000497027000000000000000044E92" data-uri="chapter08.xhtml#P7000497027000000000000000044E92" class="pcalibre calibre3 pcalibre1">C++ and Java programmers will have noticed that the term “exception” is also used to describe the application-level ECF mechanism provided by C++ and Java in the form of <code id="P7000497027000000000000000044E93" data-uri="chapter08.xhtml#P7000497027000000000000000044E93" class="pcalibre1 calibre8 pcalibre">catch, throw</code>, and <code id="P7000497027000000000000000044E94" data-uri="chapter08.xhtml#P7000497027000000000000000044E94" class="pcalibre1 calibre8 pcalibre">try</code> statements. If we wanted to be perfectly clear, we might distinguish between “hardware” and “software” exceptions, but this is usually unnecessary because the meaning is clear from the context.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000066B1" data-uri="chapter08.xhtml#P70004970270000000000000000066B1">
<img alt="A diagram illustrates an exception." id="P7000497027000000000000000044E95" data-uri="P700049702700000000000000000B760" src="../images/p724-1.png" class="pcalibre1 calibre239 pcalibre"/>
<figcaption id="P7000497027000000000000000044E96" data-uri="chapter08.xhtml#P7000497027000000000000000044E96" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044E97" data-uri="chapter08.xhtml#P7000497027000000000000000044E97" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.1 </span>Anatomy of an exception.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044E98" data-uri="chapter08.xhtml#P7000497027000000000000000044E98"><p id="P7000497027000000000000000044E99" data-uri="chapter08.xhtml#P7000497027000000000000000044E99" class="pcalibre calibre3 pcalibre1"> A change in the processor's state (an event) triggers an abrupt control transfer (an exception) from the application program to an exception handler. After it finishes processing, the handler either returns control to the interrupted program or aborts.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000251B5" data-uri="chapter08.xhtml#P70004970270000000000000000251B5">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044E9A" data-uri="chapter08.xhtml#P7000497027000000000000000044E9A" class="pcalibre calibre3 pcalibre1">A diagram has an arrow pointing down from Application program to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>, an arrow representing exception pointing right, below exception handler, an arrow pointing down representing exception processing, an arrow representing exception return (optional) pointing below Icurr to I<sub class="pcalibre1 calibre47 pcalibre">next</sub>, and then another arrow pointing down. The event occurs between I<sub class="pcalibre1 calibre47 pcalibre">curr</sub> and I<sub class="pcalibre1 calibre47 pcalibre">next</sub>.</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044E9B" data-uri="chapter08.xhtml#P7000497027000000000000000044E9B">The event might be directly related to the execution of the current instruction. For example, a virtual memory page fault occurs, an arithmetic overflow occurs, or an instruction attempts a divide by zero. On the other hand, the event might be unrelated to the execution of the current instruction. For example, a system timer goes off or an I/O request completes.</p>

<p id="P7000497027000000000000000044E9C" data-uri="chapter08.xhtml#P7000497027000000000000000044E9C" class="pcalibre1 pcalibre calibre2">In any case, when the processor detects that the event has occurred, it makes an indirect procedure call (the exception), through a jump table called an <i class="calibre5 pcalibre pcalibre1">exception table</i>, to an operating system subroutine (the <i class="calibre5 pcalibre pcalibre1">exception handler</i>) that is specifically designed to process this particular kind of event. When the exception handler finishes processing, one of three things happens, depending on the type of event that caused the exception:</p>
<ol id="P7000497027000000000000000044E9D" data-uri="chapter08.xhtml#P7000497027000000000000000044E9D" class="calibre72 pcalibre pcalibre1">
<li id="P7000497027000000000000000044E9E" data-uri="chapter08.xhtml#P7000497027000000000000000044E9E" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044E9F" data-uri="chapter08.xhtml#P7000497027000000000000000044E9F" class="pcalibre calibre3 pcalibre1">The handler returns control to the current instruction <var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">curr</sub>, the instruction that was executing when the event occurred.</p></li>
<li id="P7000497027000000000000000044EA0" data-uri="chapter08.xhtml#P7000497027000000000000000044EA0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EA1" data-uri="chapter08.xhtml#P7000497027000000000000000044EA1" class="pcalibre calibre3 pcalibre1">The handler returns control to <var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">next</sub>, the instruction that would have executed next had the exception not occurred.</p></li>
<li id="P7000497027000000000000000044EA2" data-uri="chapter08.xhtml#P7000497027000000000000000044EA2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EA3" data-uri="chapter08.xhtml#P7000497027000000000000000044EA3" class="pcalibre calibre3 pcalibre1">The handler aborts the interrupted program.</p></li>
</ol>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044EA4" data-uri="chapter08.xhtml#P7000497027000000000000000044EA4"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000066E1"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.1.2</span></a> says more about these possibilities.</p>

<section id="P70004970270000000000000000066C1" data-uri="chapter08.xhtml#P70004970270000000000000000066C1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044EA5" data-uri="chapter08.xhtml#P7000497027000000000000000044EA5" epub:type="title"><span class="pcalibre label pcalibre1">8.1.1  </span>Exception Handling</h1></header>
<p id="P7000497027000000000000000044EA6" data-uri="chapter08.xhtml#P7000497027000000000000000044EA6" class="pcalibre1 pcalibre calibre2">Exceptions can be difficult to understand because handling them involves close cooperation between hardware and software. It is easy to get confused about</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000066C4" data-uri="chapter08.xhtml#P70004970270000000000000000066C4">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000066C5" title="725" data-uri="chapter08.xhtml#P70004970270000000000000000066C5" epub:type="pagebreak"></span><img alt="A diagram shows an exception table with entries 0, 1, 2,…n minus 1, from top to bottom, containing code for exception handler 0 through code for exception handler n minus 1." id="P7000497027000000000000000044EA7" data-uri="P700049702700000000000000000B761" src="../images/p725-1.png" class="calibre240 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044EA8" data-uri="chapter08.xhtml#P7000497027000000000000000044EA8" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044EA9" data-uri="chapter08.xhtml#P7000497027000000000000000044EA9" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.2 </span>Exception table.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000044EAA" data-uri="chapter08.xhtml#P7000497027000000000000000044EAA"><p id="P7000497027000000000000000044EAB" data-uri="chapter08.xhtml#P7000497027000000000000000044EAB" class="pcalibre calibre3 pcalibre1"> The exception table is a jump table where entry <var class="calibre5 pcalibre pcalibre1">k</var> contains the address of the handler code for exception <var class="calibre5 pcalibre pcalibre1">k</var>.</p></div>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000066CB" data-uri="chapter08.xhtml#P70004970270000000000000000066CB">
<img alt="A diagram illustrates generating the address of an exception handler." id="P7000497027000000000000000044EAC" data-uri="P700049702700000000000000000B762" src="../images/p725-2.png" class="calibre241 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044EAD" data-uri="chapter08.xhtml#P7000497027000000000000000044EAD" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044EAE" data-uri="chapter08.xhtml#P7000497027000000000000000044EAE" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.3 </span>Generating the address of an exception handler.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044EAF" data-uri="chapter08.xhtml#P7000497027000000000000000044EAF"><p id="P7000497027000000000000000044EB0" data-uri="chapter08.xhtml#P7000497027000000000000000044EB0" class="pcalibre calibre3 pcalibre1">The exception number is an index into the exception table.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000251CD" data-uri="chapter08.xhtml#P70004970270000000000000000251CD">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044EB1" data-uri="chapter08.xhtml#P7000497027000000000000000044EB1" class="pcalibre calibre3 pcalibre1">A diagram shows an exception table with an arrow pointing to the top of entry 2. The arrow, representing address of entry for exception # k, extends from +, which has arrows from exception table base register and exception number (x 8).</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044EB2" data-uri="chapter08.xhtml#P7000497027000000000000000044EB2">which component performs which task. Let's look at the division of labor between hardware and software in more detail.</p>
<p id="P7000497027000000000000000044EB3" data-uri="chapter08.xhtml#P7000497027000000000000000044EB3" class="pcalibre1 pcalibre calibre2">Each type of possible exception in a system is assigned a unique nonnegative integer <i class="calibre5 pcalibre pcalibre1">exception number</i>. Some of these numbers are assigned by the designers of the processor. Other numbers are assigned by the designers of the operating system <i class="calibre5 pcalibre pcalibre1">kernel</i> (the memory-resident part of the operating system). Examples of the former include divide by zero, page faults, memory access violations, breakpoints, and arithmetic overflows. Examples of the latter include system calls and signals from external I/O devices.</p>
<p id="P7000497027000000000000000044EB4" data-uri="chapter08.xhtml#P7000497027000000000000000044EB4" class="pcalibre1 pcalibre calibre2">At system boot time (when the computer is reset or powered on), the operating system allocates and initializes a jump table called an <i class="calibre5 pcalibre pcalibre1">exception table</i>, so that entry <var class="calibre5 pcalibre pcalibre1">k</var> contains the address of the handler for exception <var class="calibre5 pcalibre pcalibre1">k</var>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000066C4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.2</span></a> shows the format of an exception table.</p>
<p id="P7000497027000000000000000044EB5" data-uri="chapter08.xhtml#P7000497027000000000000000044EB5" class="pcalibre1 pcalibre calibre2">At run time (when the system is executing some program), the processor detects that an event has occurred and determines the corresponding exception number <var class="calibre5 pcalibre pcalibre1">k</var>. The processor then triggers the exception by making an indirect procedure call, through entry <var class="calibre5 pcalibre pcalibre1">k</var> of the exception table, to the corresponding handler. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000066CB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.3</span></a> shows how the processor uses the exception table to form the address of the appropriate exception handler. The exception number is an index into the exception table, whose starting address is contained in a special CPU register called the <i class="calibre5 pcalibre pcalibre1">exception table base register</i>.</p>
<p id="P7000497027000000000000000044EB6" data-uri="chapter08.xhtml#P7000497027000000000000000044EB6" class="pcalibre1 pcalibre calibre2">An exception is akin to a procedure call, but with some important differences:</p>
<ul id="P7000497027000000000000000044EB7" data-uri="chapter08.xhtml#P7000497027000000000000000044EB7" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000044EB8" data-uri="chapter08.xhtml#P7000497027000000000000000044EB8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EB9" data-uri="chapter08.xhtml#P7000497027000000000000000044EB9" class="pcalibre calibre3 pcalibre1">As with a procedure call, the processor pushes a return address on the stack before branching to the handler. However, depending on the class of exception, the return address is either the current instruction (the instruction that <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000066D9" title="726" data-uri="chapter08.xhtml#P70004970270000000000000000066D9" epub:type="pagebreak"></span>was executing when the event occurred) or the next instruction (the instruction that would have executed after the current instruction had the event not occurred).</p></li>
<li id="P7000497027000000000000000044EBA" data-uri="chapter08.xhtml#P7000497027000000000000000044EBA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EBB" data-uri="chapter08.xhtml#P7000497027000000000000000044EBB" class="pcalibre calibre3 pcalibre1">The processor also pushes some additional processor state onto the stack that will be necessary to restart the interrupted program when the handler returns. For example, an x86-64 system pushes the EFLAGS register containing the current condition codes, among other things, onto the stack.</p></li>
<li id="P7000497027000000000000000044EBC" data-uri="chapter08.xhtml#P7000497027000000000000000044EBC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EBD" data-uri="chapter08.xhtml#P7000497027000000000000000044EBD" class="pcalibre calibre3 pcalibre1">When control is being transferred from a user program to the kernel, all of these items are pushed onto the kernel's stack rather than onto the user's stack.</p></li>
<li id="P7000497027000000000000000044EBE" data-uri="chapter08.xhtml#P7000497027000000000000000044EBE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EBF" data-uri="chapter08.xhtml#P7000497027000000000000000044EBF" class="pcalibre calibre3 pcalibre1">Exception handlers run in <i class="calibre5 pcalibre pcalibre1">kernel mode</i> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000067D4.xhtml#P7000497027000000000000000006816"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.2.4</span></a>), which means they have complete access to all system resources.</p></li>
</ul>
<p id="P7000497027000000000000000044EC0" data-uri="chapter08.xhtml#P7000497027000000000000000044EC0" class="pcalibre1 pcalibre calibre2">Once the hardware triggers the exception, the rest of the work is done in software by the exception handler. After the handler has processed the event, it optionally returns to the interrupted program by executing a special “return from interrupt” instruction, which pops the appropriate state back into the processor's control and data registers, restores the state to <i class="calibre5 pcalibre pcalibre1">user mode</i> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000067D4.xhtml#P7000497027000000000000000006816"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.2.4</span></a>) if the exception interrupted a user program, and then returns control to the interrupted program.</p>
</section>

<section id="P70004970270000000000000000066E1" data-uri="chapter08.xhtml#P70004970270000000000000000066E1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044EC1" data-uri="chapter08.xhtml#P7000497027000000000000000044EC1" epub:type="title"><span class="pcalibre label pcalibre1">8.1.2  </span>Classes of Exceptions</h1></header>
<p id="P7000497027000000000000000044EC2" data-uri="chapter08.xhtml#P7000497027000000000000000044EC2" class="pcalibre1 pcalibre calibre2">Exceptions can be divided into four classes: <i class="calibre5 pcalibre pcalibre1">interrupts</i>, <i class="calibre5 pcalibre pcalibre1">traps</i>, <i class="calibre5 pcalibre pcalibre1">faults</i>, and <i class="calibre5 pcalibre pcalibre1">aborts</i>. The table in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000066E8"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.4</span></a> summarizes the attributes of these classes.</p>
<section id="P70004970270000000000000000066E4" data-uri="chapter08.xhtml#P70004970270000000000000000066E4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044EC3" data-uri="chapter08.xhtml#P7000497027000000000000000044EC3" epub:type="title">Interrupts</h1></header>
<p id="P7000497027000000000000000044EC4" data-uri="chapter08.xhtml#P7000497027000000000000000044EC4" class="pcalibre1 pcalibre calibre2"><i class="calibre5 pcalibre pcalibre1">Interrupts</i> occur <i class="calibre5 pcalibre pcalibre1">asynchronously</i> as a result of signals from I/O devices that are external to the processor. Hardware interrupts are asynchronous in the sense that they are not caused by the execution of any particular instruction. Exception handlers for hardware interrupts are often called <i class="calibre5 pcalibre pcalibre1">interrupt handlers</i>.</p>
<p id="P7000497027000000000000000044EC5" data-uri="chapter08.xhtml#P7000497027000000000000000044EC5" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006702"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.5 </span></a>summarizes the processing for an interrupt. I/O devices such as network adapters, disk controllers, and timer chips trigger interrupts by signaling a pin on the processor chip and placing onto the system bus the exception number that identifies the device that caused the interrupt.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000066E8" data-uri="chapter08.xhtml#P70004970270000000000000000066E8">
<table id="P7000497027000000000000000044EC6" data-uri="chapter08.xhtml#P7000497027000000000000000044EC6" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000044EC7" data-uri="chapter08.xhtml#P7000497027000000000000000044EC7" class="calibre18 pcalibre pcalibre1">Class</th><th id="P7000497027000000000000000044EC8" data-uri="chapter08.xhtml#P7000497027000000000000000044EC8" class="calibre18 pcalibre pcalibre1">Cause</th><th id="P7000497027000000000000000044EC9" data-uri="chapter08.xhtml#P7000497027000000000000000044EC9" class="calibre18 pcalibre pcalibre1">Async/sync</th><th id="P7000497027000000000000000044ECA" data-uri="chapter08.xhtml#P7000497027000000000000000044ECA" class="calibre18 pcalibre pcalibre1">Return behavior</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044ECB" data-uri="chapter08.xhtml#P7000497027000000000000000044ECB" class="calibre20 pcalibre pcalibre1">Interrupt</td><td id="P7000497027000000000000000044ECC" data-uri="chapter08.xhtml#P7000497027000000000000000044ECC" class="calibre20 pcalibre pcalibre1">Signal from I/O device</td><td id="P7000497027000000000000000044ECD" data-uri="chapter08.xhtml#P7000497027000000000000000044ECD" class="calibre20 pcalibre pcalibre1">Async</td><td id="P7000497027000000000000000044ECE" data-uri="chapter08.xhtml#P7000497027000000000000000044ECE" class="calibre20 pcalibre pcalibre1">Always returns to next instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044ECF" data-uri="chapter08.xhtml#P7000497027000000000000000044ECF" class="calibre20 pcalibre pcalibre1">Trap</td><td id="P7000497027000000000000000044ED0" data-uri="chapter08.xhtml#P7000497027000000000000000044ED0" class="calibre20 pcalibre pcalibre1">Intentional exception</td><td id="P7000497027000000000000000044ED1" data-uri="chapter08.xhtml#P7000497027000000000000000044ED1" class="calibre20 pcalibre pcalibre1">Sync</td><td id="P7000497027000000000000000044ED2" data-uri="chapter08.xhtml#P7000497027000000000000000044ED2" class="calibre20 pcalibre pcalibre1">Always returns to next instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044ED3" data-uri="chapter08.xhtml#P7000497027000000000000000044ED3" class="calibre20 pcalibre pcalibre1">Fault</td><td id="P7000497027000000000000000044ED4" data-uri="chapter08.xhtml#P7000497027000000000000000044ED4" class="calibre20 pcalibre pcalibre1">Potentially recoverable error</td><td id="P7000497027000000000000000044ED5" data-uri="chapter08.xhtml#P7000497027000000000000000044ED5" class="calibre20 pcalibre pcalibre1">Sync</td><td id="P7000497027000000000000000044ED6" data-uri="chapter08.xhtml#P7000497027000000000000000044ED6" class="calibre20 pcalibre pcalibre1">Might return to current instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044ED7" data-uri="chapter08.xhtml#P7000497027000000000000000044ED7" class="calibre20 pcalibre pcalibre1">Abort</td><td id="P7000497027000000000000000044ED8" data-uri="chapter08.xhtml#P7000497027000000000000000044ED8" class="calibre20 pcalibre pcalibre1">Nonrecoverable error</td><td id="P7000497027000000000000000044ED9" data-uri="chapter08.xhtml#P7000497027000000000000000044ED9" class="calibre20 pcalibre pcalibre1">Sync</td><td id="P7000497027000000000000000044EDA" data-uri="chapter08.xhtml#P7000497027000000000000000044EDA" class="calibre20 pcalibre pcalibre1">Never returns</td></tr>
</tbody>
</table>

<figcaption id="P7000497027000000000000000044EDB" data-uri="chapter08.xhtml#P7000497027000000000000000044EDB" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044EDC" data-uri="chapter08.xhtml#P7000497027000000000000000044EDC" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.4 </span>Classes of exceptions.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000044EDD" data-uri="chapter08.xhtml#P7000497027000000000000000044EDD"><p id="P7000497027000000000000000044EDE" data-uri="chapter08.xhtml#P7000497027000000000000000044EDE" class="pcalibre calibre3 pcalibre1">Asynchronous exceptions occur as a result of events in I/O devices that are external to the processor. Synchronous exceptions occur as a direct result of executing an instruction.</p></div>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006702" data-uri="chapter08.xhtml#P7000497027000000000000000006702">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006703" title="727" data-uri="chapter08.xhtml#P7000497027000000000000000006703" epub:type="pagebreak"></span><img alt="A diagram illustrates steps in interrupt handling." id="P7000497027000000000000000044EDF" data-uri="P700049702700000000000000000B49D" src="../images/727-1.png" class="calibre242 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044EE0" data-uri="chapter08.xhtml#P7000497027000000000000000044EE0" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044EE1" data-uri="chapter08.xhtml#P7000497027000000000000000044EE1" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.5 </span>Interrupt handling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044EE2" data-uri="chapter08.xhtml#P7000497027000000000000000044EE2"><p id="P7000497027000000000000000044EE3" data-uri="chapter08.xhtml#P7000497027000000000000000044EE3" class="pcalibre calibre3 pcalibre1">The interrupt handler returns control to the next instruction in the application program's control flow.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025201" data-uri="chapter08.xhtml#P7000497027000000000000000025201">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044EE4" data-uri="chapter08.xhtml#P7000497027000000000000000044EE4" class="pcalibre1 pcalibre calibre2">Steps in interrupt handling are summarized below.</p>
<ol id="P7000497027000000000000000044EE5" data-uri="chapter08.xhtml#P7000497027000000000000000044EE5" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000044EE6" data-uri="chapter08.xhtml#P7000497027000000000000000044EE6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EE7" data-uri="chapter08.xhtml#P7000497027000000000000000044EE7" class="pcalibre calibre3 pcalibre1">Interrupt pin goes high during execution of current instruction (arrow pointing down to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044EE8" data-uri="chapter08.xhtml#P7000497027000000000000000044EE8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EE9" data-uri="chapter08.xhtml#P7000497027000000000000000044EE9" class="pcalibre calibre3 pcalibre1">Control passes to handler after current instruction finishes (arrow pointing right from I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044EEA" data-uri="chapter08.xhtml#P7000497027000000000000000044EEA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EEB" data-uri="chapter08.xhtml#P7000497027000000000000000044EEB" class="pcalibre calibre3 pcalibre1">Interrupt handler runs (arrow pointing down)</p></li>
<li id="P7000497027000000000000000044EEC" data-uri="chapter08.xhtml#P7000497027000000000000000044EEC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EED" data-uri="chapter08.xhtml#P7000497027000000000000000044EED" class="pcalibre calibre3 pcalibre1">Handler returns to next instruction (arrow back to I<sub class="pcalibre1 calibre47 pcalibre">next</sub>, below I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
</ol>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006709" data-uri="chapter08.xhtml#P7000497027000000000000000006709">
<img alt="A diagram illustrates steps in trap handling." id="P7000497027000000000000000044EEE" data-uri="P700049702700000000000000000B763" src="../images/p727-2.png" class="calibre243 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044EEF" data-uri="chapter08.xhtml#P7000497027000000000000000044EEF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044EF0" data-uri="chapter08.xhtml#P7000497027000000000000000044EF0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.6 </span>Trap handling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044EF1" data-uri="chapter08.xhtml#P7000497027000000000000000044EF1"><p id="P7000497027000000000000000044EF2" data-uri="chapter08.xhtml#P7000497027000000000000000044EF2" class="pcalibre calibre3 pcalibre1">The trap handler returns control to the next instruction in the application program's control flow.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025211" data-uri="chapter08.xhtml#P7000497027000000000000000025211">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044EF3" data-uri="chapter08.xhtml#P7000497027000000000000000044EF3" class="pcalibre1 pcalibre calibre2">Steps in interrupt handling are summarized below.</p>
<ol id="P7000497027000000000000000044EF4" data-uri="chapter08.xhtml#P7000497027000000000000000044EF4" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000044EF5" data-uri="chapter08.xhtml#P7000497027000000000000000044EF5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EF6" data-uri="chapter08.xhtml#P7000497027000000000000000044EF6" class="pcalibre calibre3 pcalibre1">Application makes a system call (arrow pointing down to syscall)</p></li>
<li id="P7000497027000000000000000044EF7" data-uri="chapter08.xhtml#P7000497027000000000000000044EF7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EF8" data-uri="chapter08.xhtml#P7000497027000000000000000044EF8" class="pcalibre calibre3 pcalibre1">Control passes to handler (arrow pointing right from syscall)</p></li>
<li id="P7000497027000000000000000044EF9" data-uri="chapter08.xhtml#P7000497027000000000000000044EF9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EFA" data-uri="chapter08.xhtml#P7000497027000000000000000044EFA" class="pcalibre calibre3 pcalibre1">Trap handler runs (arrow pointing down)</p></li>
<li id="P7000497027000000000000000044EFB" data-uri="chapter08.xhtml#P7000497027000000000000000044EFB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044EFC" data-uri="chapter08.xhtml#P7000497027000000000000000044EFC" class="pcalibre calibre3 pcalibre1">Handler returns to instruction following the syscall (arrow back to I<sub class="pcalibre1 calibre47 pcalibre">next</sub>, below syscall)</p></li>
</ol>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000044EFD" data-uri="chapter08.xhtml#P7000497027000000000000000044EFD" class="pcalibre1 pcalibre calibre2">After the current instruction finishes executing, the processor notices that the interrupt pin has gone high, reads the exception number from the system bus, and then calls the appropriate interrupt handler. When the handler returns, it returns control to the next instruction (i.e., the instruction that would have followed the current instruction in the control flow had the interrupt not occurred). The effect is that the program continues executing as though the interrupt had never happened.</p>
<p id="P7000497027000000000000000044EFE" data-uri="chapter08.xhtml#P7000497027000000000000000044EFE" class="pcalibre1 pcalibre calibre2">The remaining classes of exceptions (traps, faults, and aborts) occur <i class="calibre5 pcalibre pcalibre1">synchronously</i> as a result of executing the current instruction. We refer to this instruction as the <i class="calibre5 pcalibre pcalibre1">faulting instruction</i>.</p>
</section>
<section id="P7000497027000000000000000006711" data-uri="chapter08.xhtml#P7000497027000000000000000006711" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044EFF" data-uri="chapter08.xhtml#P7000497027000000000000000044EFF" epub:type="title">Traps and System Calls</h1></header>
<p id="P7000497027000000000000000044F00" data-uri="chapter08.xhtml#P7000497027000000000000000044F00" class="pcalibre1 pcalibre calibre2"><i class="calibre5 pcalibre pcalibre1">Traps</i> are <i class="calibre5 pcalibre pcalibre1">intentional</i> exceptions that occur as a result of executing an instruction. Like interrupt handlers, trap handlers return control to the next instruction. The most important use of traps is to provide a procedure-like interface between user programs and the kernel, known as a <i class="calibre5 pcalibre pcalibre1">system call</i>.</p>
<p id="P7000497027000000000000000044F01" data-uri="chapter08.xhtml#P7000497027000000000000000044F01" class="pcalibre1 pcalibre calibre2">User programs often need to request services from the kernel such as reading a file (<code id="P7000497027000000000000000044F02" data-uri="chapter08.xhtml#P7000497027000000000000000044F02" class="pcalibre1 calibre8 pcalibre">read</code>), creating a new process (<code id="P7000497027000000000000000044F03" data-uri="chapter08.xhtml#P7000497027000000000000000044F03" class="pcalibre1 calibre8 pcalibre">fork</code>), loading a new program (<code id="P7000497027000000000000000044F04" data-uri="chapter08.xhtml#P7000497027000000000000000044F04" class="pcalibre1 calibre8 pcalibre">execve</code>), and terminating the current process (<code id="P7000497027000000000000000044F05" data-uri="chapter08.xhtml#P7000497027000000000000000044F05" class="pcalibre1 calibre8 pcalibre">exit</code>). To allow controlled access to such kernel services, processors provide a special <code id="P7000497027000000000000000044F06" data-uri="chapter08.xhtml#P7000497027000000000000000044F06" class="pcalibre1 calibre8 pcalibre">syscall</code> <var class="calibre5 pcalibre pcalibre1">n</var> instruction that user programs can execute when they want to request service <var class="calibre5 pcalibre pcalibre1">n</var>. Executing the <code id="P7000497027000000000000000044F07" data-uri="chapter08.xhtml#P7000497027000000000000000044F07" class="pcalibre1 calibre8 pcalibre">syscall</code> instruction causes a trap to an exception handler that decodes the argument and calls the appropriate kernel routine. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006709"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.6</span></a> summarizes the processing for a system call.</p>
<p id="P7000497027000000000000000044F08" data-uri="chapter08.xhtml#P7000497027000000000000000044F08" class="pcalibre1 pcalibre calibre2">From a programmer's perspective, a system call is identical to a regular function call. However, their implementations are quite different. Regular functions</p>

<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000671C" data-uri="chapter08.xhtml#P700049702700000000000000000671C">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000671D" title="728" data-uri="chapter08.xhtml#P700049702700000000000000000671D" epub:type="pagebreak"></span><img alt="A diagram illustrates steps in fault handling." id="P7000497027000000000000000044F09" data-uri="P700049702700000000000000000B764" src="../images/p728-1.png" class="pcalibre1 calibre244 pcalibre"/>
<figcaption id="P7000497027000000000000000044F0A" data-uri="chapter08.xhtml#P7000497027000000000000000044F0A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044F0B" data-uri="chapter08.xhtml#P7000497027000000000000000044F0B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.7 </span>Fault handling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044F0C" data-uri="chapter08.xhtml#P7000497027000000000000000044F0C"><p id="P7000497027000000000000000044F0D" data-uri="chapter08.xhtml#P7000497027000000000000000044F0D" class="pcalibre calibre3 pcalibre1">Depending on whether the fault can be repaired or not, the fault handler either re-executes the faulting instruction or aborts.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002522D" data-uri="chapter08.xhtml#P700049702700000000000000002522D">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044F0E" data-uri="chapter08.xhtml#P7000497027000000000000000044F0E" class="pcalibre1 pcalibre calibre2">Steps in fault handling are summarized below.</p>
<ol id="P7000497027000000000000000044F0F" data-uri="chapter08.xhtml#P7000497027000000000000000044F0F" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000044F10" data-uri="chapter08.xhtml#P7000497027000000000000000044F10" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F11" data-uri="chapter08.xhtml#P7000497027000000000000000044F11" class="pcalibre calibre3 pcalibre1">Current instruction causes a fault (arrow pointing down to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044F12" data-uri="chapter08.xhtml#P7000497027000000000000000044F12" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F13" data-uri="chapter08.xhtml#P7000497027000000000000000044F13" class="pcalibre calibre3 pcalibre1">Control passes to handler (arrow pointing right from I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044F14" data-uri="chapter08.xhtml#P7000497027000000000000000044F14" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F15" data-uri="chapter08.xhtml#P7000497027000000000000000044F15" class="pcalibre calibre3 pcalibre1">Fault handler runs (arrow pointing down)</p></li>
<li id="P7000497027000000000000000044F16" data-uri="chapter08.xhtml#P7000497027000000000000000044F16" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F17" data-uri="chapter08.xhtml#P7000497027000000000000000044F17" class="pcalibre calibre3 pcalibre1">Handler either re-executes current instruction (arrow pointing back to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>) or aborts (arrow pointing right to abort)</p></li>
</ol>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006723" data-uri="chapter08.xhtml#P7000497027000000000000000006723">
<img alt="A diagram illustrates steps in abort handling." id="P7000497027000000000000000044F18" data-uri="P700049702700000000000000000B765" src="../images/p728-2.png" class="calibre245 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044F19" data-uri="chapter08.xhtml#P7000497027000000000000000044F19" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044F1A" data-uri="chapter08.xhtml#P7000497027000000000000000044F1A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.8 </span>Abort handling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044F1B" data-uri="chapter08.xhtml#P7000497027000000000000000044F1B"><p id="P7000497027000000000000000044F1C" data-uri="chapter08.xhtml#P7000497027000000000000000044F1C" class="pcalibre calibre3 pcalibre1">The abort handler passes control to a kernel <code id="P7000497027000000000000000044F1D" data-uri="chapter08.xhtml#P7000497027000000000000000044F1D" class="pcalibre1 calibre8 pcalibre">abort</code> routine that terminates the application program.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002523E" data-uri="chapter08.xhtml#P700049702700000000000000002523E">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044F1E" data-uri="chapter08.xhtml#P7000497027000000000000000044F1E" class="pcalibre1 pcalibre calibre2">Steps in fault handling are summarized below.</p>
<ol id="P7000497027000000000000000044F1F" data-uri="chapter08.xhtml#P7000497027000000000000000044F1F" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000044F20" data-uri="chapter08.xhtml#P7000497027000000000000000044F20" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F21" data-uri="chapter08.xhtml#P7000497027000000000000000044F21" class="pcalibre calibre3 pcalibre1">Fatal hardware error occurs (arrow pointing down to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044F22" data-uri="chapter08.xhtml#P7000497027000000000000000044F22" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F23" data-uri="chapter08.xhtml#P7000497027000000000000000044F23" class="pcalibre calibre3 pcalibre1">Control passes to handler (arrow pointing right from I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000044F24" data-uri="chapter08.xhtml#P7000497027000000000000000044F24" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F25" data-uri="chapter08.xhtml#P7000497027000000000000000044F25" class="pcalibre calibre3 pcalibre1">Abort handler runs (arrow pointing down)</p></li>
<li id="P7000497027000000000000000044F26" data-uri="chapter08.xhtml#P7000497027000000000000000044F26" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F27" data-uri="chapter08.xhtml#P7000497027000000000000000044F27" class="pcalibre calibre3 pcalibre1">Handler returns to abort routine (arrow pointing right to abort)</p></li>
</ol>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044F28" data-uri="chapter08.xhtml#P7000497027000000000000000044F28">run in <i class="calibre5 pcalibre pcalibre1">user mode</i>, which restricts the types of instructions they can execute, and they access the same stack as the calling function. A system call runs in <i class="calibre5 pcalibre pcalibre1">kernel mode</i>, which allows it to execute privileged instructions and access a stack defined in the kernel. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000067D4.xhtml#P7000497027000000000000000006816"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.2.4</span></a> discusses user and kernel modes in more detail.</p>
</section>
<section id="P700049702700000000000000000672B" data-uri="chapter08.xhtml#P700049702700000000000000000672B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044F29" data-uri="chapter08.xhtml#P7000497027000000000000000044F29" epub:type="title">Faults</h1></header>
<p id="P7000497027000000000000000044F2A" data-uri="chapter08.xhtml#P7000497027000000000000000044F2A" class="pcalibre1 pcalibre calibre2">Faults result from error conditions that a handler might be able to correct. When a fault occurs, the processor transfers control to the fault handler. If the handler is able to correct the error condition, it returns control to the faulting instruction, thereby re-executing it. Otherwise, the handler returns to an <code id="P7000497027000000000000000044F2B" data-uri="chapter08.xhtml#P7000497027000000000000000044F2B" class="pcalibre1 calibre8 pcalibre">abort</code> routine in the kernel that terminates the application program that caused the fault. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000671C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.7 </span></a>summarizes the processing for a fault.</p>
<p id="P7000497027000000000000000044F2C" data-uri="chapter08.xhtml#P7000497027000000000000000044F2C" class="pcalibre1 pcalibre calibre2">A classic example of a fault is the page fault exception, which occurs when an instruction references a virtual address whose corresponding page is not resident in memory and must therefore be retrieved from disk. As we will see in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">9</span></a>, a page is a contiguous block (typically 4 KB) of virtual memory. The page fault handler loads the appropriate page from disk and then returns control to the instruction that caused the fault. When the instruction executes again, the appropriate page is now resident in memory and the instruction is able to run to completion without faulting.</p>
</section>
<section id="P7000497027000000000000000006730" data-uri="chapter08.xhtml#P7000497027000000000000000006730" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044F2D" data-uri="chapter08.xhtml#P7000497027000000000000000044F2D" epub:type="title">Aborts</h1></header>
<p id="P7000497027000000000000000044F2E" data-uri="chapter08.xhtml#P7000497027000000000000000044F2E" class="pcalibre1 pcalibre calibre2">Aborts result from unrecoverable fatal errors, typically hardware errors such as parity errors that occur when DRAM or SRAM bits are corrupted. Abort handlers never return control to the application program. As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006723"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.8</span></a>, the handler returns control to an <code id="P7000497027000000000000000044F2F" data-uri="chapter08.xhtml#P7000497027000000000000000044F2F" class="pcalibre1 calibre8 pcalibre">abort</code> routine that terminates the application program.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006734" data-uri="chapter08.xhtml#P7000497027000000000000000006734">
<table id="P7000497027000000000000000044F30" data-uri="chapter08.xhtml#P7000497027000000000000000044F30" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000044F31" data-uri="chapter08.xhtml#P7000497027000000000000000044F31" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000006737" title="729" data-uri="chapter08.xhtml#P7000497027000000000000000006737" epub:type="pagebreak"></span>Exception number</th><th id="P7000497027000000000000000044F32" data-uri="chapter08.xhtml#P7000497027000000000000000044F32" class="calibre18 pcalibre pcalibre1">Description</th><th id="P7000497027000000000000000044F33" data-uri="chapter08.xhtml#P7000497027000000000000000044F33" class="calibre18 pcalibre pcalibre1">Exception class</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F34" data-uri="chapter08.xhtml#P7000497027000000000000000044F34" class="calibre20 pcalibre pcalibre1">0</td><td id="P7000497027000000000000000044F35" data-uri="chapter08.xhtml#P7000497027000000000000000044F35" class="calibre20 pcalibre pcalibre1">Divide error</td><td id="P7000497027000000000000000044F36" data-uri="chapter08.xhtml#P7000497027000000000000000044F36" class="calibre20 pcalibre pcalibre1">Fault</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F37" data-uri="chapter08.xhtml#P7000497027000000000000000044F37" class="calibre20 pcalibre pcalibre1">13</td><td id="P7000497027000000000000000044F38" data-uri="chapter08.xhtml#P7000497027000000000000000044F38" class="calibre20 pcalibre pcalibre1">General protection fault</td><td id="P7000497027000000000000000044F39" data-uri="chapter08.xhtml#P7000497027000000000000000044F39" class="calibre20 pcalibre pcalibre1">Fault</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F3A" data-uri="chapter08.xhtml#P7000497027000000000000000044F3A" class="calibre20 pcalibre pcalibre1">14</td><td id="P7000497027000000000000000044F3B" data-uri="chapter08.xhtml#P7000497027000000000000000044F3B" class="calibre20 pcalibre pcalibre1">Page fault</td><td id="P7000497027000000000000000044F3C" data-uri="chapter08.xhtml#P7000497027000000000000000044F3C" class="calibre20 pcalibre pcalibre1">Fault</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F3D" data-uri="chapter08.xhtml#P7000497027000000000000000044F3D" class="calibre20 pcalibre pcalibre1">18</td><td id="P7000497027000000000000000044F3E" data-uri="chapter08.xhtml#P7000497027000000000000000044F3E" class="calibre20 pcalibre pcalibre1">Machine check</td><td id="P7000497027000000000000000044F3F" data-uri="chapter08.xhtml#P7000497027000000000000000044F3F" class="calibre20 pcalibre pcalibre1">Abort</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F40" data-uri="chapter08.xhtml#P7000497027000000000000000044F40" class="calibre20 pcalibre pcalibre1">32-255</td><td id="P7000497027000000000000000044F41" data-uri="chapter08.xhtml#P7000497027000000000000000044F41" class="calibre20 pcalibre pcalibre1">OS-defined exceptions</td><td id="P7000497027000000000000000044F42" data-uri="chapter08.xhtml#P7000497027000000000000000044F42" class="calibre20 pcalibre pcalibre1">Interrupt or trap</td></tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000044F43" data-uri="chapter08.xhtml#P7000497027000000000000000044F43" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044F44" data-uri="chapter08.xhtml#P7000497027000000000000000044F44" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.9 </span>Examples of exceptions in x86-64 systems.</h1></header>

</figcaption>
</figure>
</section>
</section>



<section id="P700049702700000000000000000674B" data-uri="chapter08.xhtml#P700049702700000000000000000674B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000044F45" data-uri="chapter08.xhtml#P7000497027000000000000000044F45" epub:type="title"><span class="pcalibre label pcalibre1">8.1.3  </span>Exceptions in Linux/x86-64 Systems</h1></header>
<p id="P7000497027000000000000000044F46" data-uri="chapter08.xhtml#P7000497027000000000000000044F46" class="pcalibre1 pcalibre calibre2">To help make things more concrete, let's look at some of the exceptions defined for x86-64 systems. There are up to 256 different exception types [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B406">50</a>]. Numbers in the range from 0 to 31 correspond to exceptions that are defined by the Intel architects and thus are identical for any x86-64 system. Numbers in the range from 32 to 255 correspond to interrupts and traps that are defined by the operating system. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006734"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.9 </span></a>shows a few examples.</p>

<section id="P700049702700000000000000000674E" data-uri="chapter08.xhtml#P700049702700000000000000000674E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044F47" data-uri="chapter08.xhtml#P7000497027000000000000000044F47" epub:type="title">Linux/x86-64 Faults and Aborts</h1></header>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000044F48" data-uri="chapter08.xhtml#P7000497027000000000000000044F48">
<li id="P7000497027000000000000000044F49" data-uri="chapter08.xhtml#P7000497027000000000000000044F49" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F4A" data-uri="chapter08.xhtml#P7000497027000000000000000044F4A" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Divide error. </span>A divide error (exception 0) occurs when an application attempts to divide by zero or when the result of a divide instruction is too big for the destination operand. Unix does not attempt to recover from divide errors, opting instead to abort the program. Linux shells typically report divide errors as “Floating exceptions.”</p></li>
<li id="P7000497027000000000000000044F4B" data-uri="chapter08.xhtml#P7000497027000000000000000044F4B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F4C" data-uri="chapter08.xhtml#P7000497027000000000000000044F4C" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">General protection fault. </span>The infamous general protection fault (exception 13) occurs for many reasons, usually because a program references an undefined area of virtual memory or because the program attempts to write to a read-only text segment. Linux does not attempt to recover from this fault. Linux shells typically report general protection faults as “Segmentation faults.”</p></li>
<li id="P7000497027000000000000000044F4D" data-uri="chapter08.xhtml#P7000497027000000000000000044F4D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F4E" data-uri="chapter08.xhtml#P7000497027000000000000000044F4E" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Page fault. </span>A page fault (exception 14) is an example of an exception where the faulting instruction is restarted. The handler maps the appropriate page of virtual memory on disk into a page of physical memory and then restarts the faulting instruction. We will see how page faults work in detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">9</span></a>.</p></li>
<li id="P7000497027000000000000000044F4F" data-uri="chapter08.xhtml#P7000497027000000000000000044F4F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044F50" data-uri="chapter08.xhtml#P7000497027000000000000000044F50" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Machine check. </span>A machine check (exception 18) occurs as a result of a fatal hardware error that is detected during the execution of the faulting instruction. Machine check handlers never return control to the application program.</p></li>
</ul>
</section>

<section id="P7000497027000000000000000006759" data-uri="chapter08.xhtml#P7000497027000000000000000006759" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000044F51" data-uri="chapter08.xhtml#P7000497027000000000000000044F51" epub:type="title">Linux/x86-64 System Calls</h1></header>
<p id="P7000497027000000000000000044F52" data-uri="chapter08.xhtml#P7000497027000000000000000044F52" class="pcalibre1 pcalibre calibre2">Linux provides hundreds of system calls that application programs use when they want to request services from the kernel, such as reading a file, writing a file, and</p>

<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000675C" data-uri="chapter08.xhtml#P700049702700000000000000000675C">

<table id="P7000497027000000000000000044F53" data-uri="chapter08.xhtml#P7000497027000000000000000044F53" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000044F54" data-uri="chapter08.xhtml#P7000497027000000000000000044F54" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000675F" title="730" data-uri="chapter08.xhtml#P700049702700000000000000000675F" epub:type="pagebreak"></span>
Number</th><th id="P7000497027000000000000000044F55" data-uri="chapter08.xhtml#P7000497027000000000000000044F55" class="calibre18 pcalibre pcalibre1">Name</th><th id="P7000497027000000000000000044F56" data-uri="chapter08.xhtml#P7000497027000000000000000044F56" class="calibre18 pcalibre pcalibre1">Description</th><th id="P7000497027000000000000000044F57" data-uri="chapter08.xhtml#P7000497027000000000000000044F57" class="calibre18 pcalibre pcalibre1">Number</th><th id="P7000497027000000000000000044F58" data-uri="chapter08.xhtml#P7000497027000000000000000044F58" class="calibre18 pcalibre pcalibre1">Name</th><th id="P7000497027000000000000000044F59" data-uri="chapter08.xhtml#P7000497027000000000000000044F59" class="calibre18 pcalibre pcalibre1">Description</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F5A" data-uri="chapter08.xhtml#P7000497027000000000000000044F5A" class="calibre20 pcalibre pcalibre1">0</td><td id="P7000497027000000000000000044F5B" data-uri="chapter08.xhtml#P7000497027000000000000000044F5B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F5C" data-uri="chapter08.xhtml#P7000497027000000000000000044F5C" class="calibre10 pcalibre pcalibre1">read</code></td><td id="P7000497027000000000000000044F5D" data-uri="chapter08.xhtml#P7000497027000000000000000044F5D" class="calibre20 pcalibre pcalibre1">Read file</td><td id="P7000497027000000000000000044F5E" data-uri="chapter08.xhtml#P7000497027000000000000000044F5E" class="calibre20 pcalibre pcalibre1">33</td><td id="P7000497027000000000000000044F5F" data-uri="chapter08.xhtml#P7000497027000000000000000044F5F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F60" data-uri="chapter08.xhtml#P7000497027000000000000000044F60" class="calibre10 pcalibre pcalibre1">pause</code></td><td id="P7000497027000000000000000044F61" data-uri="chapter08.xhtml#P7000497027000000000000000044F61" class="calibre20 pcalibre pcalibre1">Suspend process until signal arrives</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F62" data-uri="chapter08.xhtml#P7000497027000000000000000044F62" class="calibre20 pcalibre pcalibre1">1</td><td id="P7000497027000000000000000044F63" data-uri="chapter08.xhtml#P7000497027000000000000000044F63" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F64" data-uri="chapter08.xhtml#P7000497027000000000000000044F64" class="calibre10 pcalibre pcalibre1">write</code></td><td id="P7000497027000000000000000044F65" data-uri="chapter08.xhtml#P7000497027000000000000000044F65" class="calibre20 pcalibre pcalibre1">Write file</td><td id="P7000497027000000000000000044F66" data-uri="chapter08.xhtml#P7000497027000000000000000044F66" class="calibre20 pcalibre pcalibre1">37</td><td id="P7000497027000000000000000044F67" data-uri="chapter08.xhtml#P7000497027000000000000000044F67" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F68" data-uri="chapter08.xhtml#P7000497027000000000000000044F68" class="calibre10 pcalibre pcalibre1">alarm</code></td><td id="P7000497027000000000000000044F69" data-uri="chapter08.xhtml#P7000497027000000000000000044F69" class="calibre20 pcalibre pcalibre1">Schedule delivery of alarm signal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F6A" data-uri="chapter08.xhtml#P7000497027000000000000000044F6A" class="calibre20 pcalibre pcalibre1">2</td><td id="P7000497027000000000000000044F6B" data-uri="chapter08.xhtml#P7000497027000000000000000044F6B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F6C" data-uri="chapter08.xhtml#P7000497027000000000000000044F6C" class="calibre10 pcalibre pcalibre1">open</code></td><td id="P7000497027000000000000000044F6D" data-uri="chapter08.xhtml#P7000497027000000000000000044F6D" class="calibre20 pcalibre pcalibre1">Open file</td><td id="P7000497027000000000000000044F6E" data-uri="chapter08.xhtml#P7000497027000000000000000044F6E" class="calibre20 pcalibre pcalibre1">39</td><td id="P7000497027000000000000000044F6F" data-uri="chapter08.xhtml#P7000497027000000000000000044F6F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F70" data-uri="chapter08.xhtml#P7000497027000000000000000044F70" class="calibre10 pcalibre pcalibre1">getpid</code></td><td id="P7000497027000000000000000044F71" data-uri="chapter08.xhtml#P7000497027000000000000000044F71" class="calibre20 pcalibre pcalibre1">Get process ID</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F72" data-uri="chapter08.xhtml#P7000497027000000000000000044F72" class="calibre20 pcalibre pcalibre1">3</td><td id="P7000497027000000000000000044F73" data-uri="chapter08.xhtml#P7000497027000000000000000044F73" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F74" data-uri="chapter08.xhtml#P7000497027000000000000000044F74" class="calibre10 pcalibre pcalibre1">close</code></td><td id="P7000497027000000000000000044F75" data-uri="chapter08.xhtml#P7000497027000000000000000044F75" class="calibre20 pcalibre pcalibre1">Close file</td><td id="P7000497027000000000000000044F76" data-uri="chapter08.xhtml#P7000497027000000000000000044F76" class="calibre20 pcalibre pcalibre1">57</td><td id="P7000497027000000000000000044F77" data-uri="chapter08.xhtml#P7000497027000000000000000044F77" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F78" data-uri="chapter08.xhtml#P7000497027000000000000000044F78" class="calibre10 pcalibre pcalibre1">fork</code></td><td id="P7000497027000000000000000044F79" data-uri="chapter08.xhtml#P7000497027000000000000000044F79" class="calibre20 pcalibre pcalibre1">Create process</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F7A" data-uri="chapter08.xhtml#P7000497027000000000000000044F7A" class="calibre20 pcalibre pcalibre1">4</td><td id="P7000497027000000000000000044F7B" data-uri="chapter08.xhtml#P7000497027000000000000000044F7B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F7C" data-uri="chapter08.xhtml#P7000497027000000000000000044F7C" class="calibre10 pcalibre pcalibre1">stat</code></td><td id="P7000497027000000000000000044F7D" data-uri="chapter08.xhtml#P7000497027000000000000000044F7D" class="calibre20 pcalibre pcalibre1">Get info about file</td><td id="P7000497027000000000000000044F7E" data-uri="chapter08.xhtml#P7000497027000000000000000044F7E" class="calibre20 pcalibre pcalibre1">59</td><td id="P7000497027000000000000000044F7F" data-uri="chapter08.xhtml#P7000497027000000000000000044F7F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F80" data-uri="chapter08.xhtml#P7000497027000000000000000044F80" class="calibre10 pcalibre pcalibre1">execve</code></td><td id="P7000497027000000000000000044F81" data-uri="chapter08.xhtml#P7000497027000000000000000044F81" class="calibre20 pcalibre pcalibre1">Execute a program</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F82" data-uri="chapter08.xhtml#P7000497027000000000000000044F82" class="calibre20 pcalibre pcalibre1">9</td><td id="P7000497027000000000000000044F83" data-uri="chapter08.xhtml#P7000497027000000000000000044F83" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F84" data-uri="chapter08.xhtml#P7000497027000000000000000044F84" class="calibre10 pcalibre pcalibre1">mmap</code></td><td id="P7000497027000000000000000044F85" data-uri="chapter08.xhtml#P7000497027000000000000000044F85" class="calibre20 pcalibre pcalibre1">Map memory page to file</td><td id="P7000497027000000000000000044F86" data-uri="chapter08.xhtml#P7000497027000000000000000044F86" class="calibre20 pcalibre pcalibre1">60</td><td id="P7000497027000000000000000044F87" data-uri="chapter08.xhtml#P7000497027000000000000000044F87" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F88" data-uri="chapter08.xhtml#P7000497027000000000000000044F88" class="calibre10 pcalibre pcalibre1">_exit</code></td><td id="P7000497027000000000000000044F89" data-uri="chapter08.xhtml#P7000497027000000000000000044F89" class="calibre20 pcalibre pcalibre1">Terminate process</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F8A" data-uri="chapter08.xhtml#P7000497027000000000000000044F8A" class="calibre20 pcalibre pcalibre1">12</td><td id="P7000497027000000000000000044F8B" data-uri="chapter08.xhtml#P7000497027000000000000000044F8B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F8C" data-uri="chapter08.xhtml#P7000497027000000000000000044F8C" class="calibre10 pcalibre pcalibre1">brk</code></td><td id="P7000497027000000000000000044F8D" data-uri="chapter08.xhtml#P7000497027000000000000000044F8D" class="calibre20 pcalibre pcalibre1">Reset the top of the heap</td><td id="P7000497027000000000000000044F8E" data-uri="chapter08.xhtml#P7000497027000000000000000044F8E" class="calibre20 pcalibre pcalibre1">61</td><td id="P7000497027000000000000000044F8F" data-uri="chapter08.xhtml#P7000497027000000000000000044F8F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F90" data-uri="chapter08.xhtml#P7000497027000000000000000044F90" class="calibre10 pcalibre pcalibre1">wait4</code></td><td id="P7000497027000000000000000044F91" data-uri="chapter08.xhtml#P7000497027000000000000000044F91" class="calibre20 pcalibre pcalibre1">Wait for a process to terminate</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000044F92" data-uri="chapter08.xhtml#P7000497027000000000000000044F92" class="calibre20 pcalibre pcalibre1">32</td><td id="P7000497027000000000000000044F93" data-uri="chapter08.xhtml#P7000497027000000000000000044F93" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F94" data-uri="chapter08.xhtml#P7000497027000000000000000044F94" class="calibre10 pcalibre pcalibre1">dup2</code></td><td id="P7000497027000000000000000044F95" data-uri="chapter08.xhtml#P7000497027000000000000000044F95" class="calibre20 pcalibre pcalibre1">Copy file descriptor</td><td id="P7000497027000000000000000044F96" data-uri="chapter08.xhtml#P7000497027000000000000000044F96" class="calibre20 pcalibre pcalibre1">62</td><td id="P7000497027000000000000000044F97" data-uri="chapter08.xhtml#P7000497027000000000000000044F97" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000044F98" data-uri="chapter08.xhtml#P7000497027000000000000000044F98" class="calibre10 pcalibre pcalibre1">kill</code></td><td id="P7000497027000000000000000044F99" data-uri="chapter08.xhtml#P7000497027000000000000000044F99" class="calibre20 pcalibre pcalibre1">Send signal to a process</td></tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000044F9A" data-uri="chapter08.xhtml#P7000497027000000000000000044F9A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044F9B" data-uri="chapter08.xhtml#P7000497027000000000000000044F9B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.10 </span>Examples of popular system calls in Linux x86-64 systems.</h1></header>

</figcaption>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044F9C" data-uri="chapter08.xhtml#P7000497027000000000000000044F9C">creating a new process. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000675C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.10 </span></a>lists some popular Linux system calls. Each system call has a unique integer number that corresponds to an offset in a jump table in the kernel. (Notice that this jump table is not the same as the exception table.)</p>
<p id="P7000497027000000000000000044F9D" data-uri="chapter08.xhtml#P7000497027000000000000000044F9D" class="pcalibre1 pcalibre calibre2">C programs can invoke any system call directly by using the <code id="P7000497027000000000000000044F9E" data-uri="chapter08.xhtml#P7000497027000000000000000044F9E" class="pcalibre1 calibre8 pcalibre">syscall</code> function. However, this is rarely necessary in practice. The C standard library provides a set of convenient wrapper functions for most system calls. The wrapper functions package up the arguments, trap to the kernel with the appropriate system call instruction, and then pass the return status of the system call back to the calling program. Throughout this text, we will refer to system calls and their associated wrapper functions interchangeably as <i class="calibre5 pcalibre pcalibre1">system-level functions</i>.</p>
<p id="P7000497027000000000000000044F9F" data-uri="chapter08.xhtml#P7000497027000000000000000044F9F" class="pcalibre1 pcalibre calibre2">System calls are provided on x86-64 systems via a trapping instruction called <code id="P7000497027000000000000000044FA0" data-uri="chapter08.xhtml#P7000497027000000000000000044FA0" class="pcalibre1 calibre8 pcalibre">syscall</code>. It is quite interesting to study how programs can use this instruction to invoke Linux system calls directly. All arguments to Linux system calls are passed through general-purpose registers rather than the stack. By convention, register <code id="P7000497027000000000000000044FA1" data-uri="chapter08.xhtml#P7000497027000000000000000044FA1" class="pcalibre1 calibre8 pcalibre">%rax</code> contains the syscall number, with up to six arguments in <code id="P7000497027000000000000000044FA2" data-uri="chapter08.xhtml#P7000497027000000000000000044FA2" class="pcalibre1 calibre8 pcalibre">%rdi, %rsi, %rdx, %r10, %r8</code>, and <code id="P7000497027000000000000000044FA3" data-uri="chapter08.xhtml#P7000497027000000000000000044FA3" class="pcalibre1 calibre8 pcalibre">%r9</code>. The first argument is in <code id="P7000497027000000000000000044FA4" data-uri="chapter08.xhtml#P7000497027000000000000000044FA4" class="pcalibre1 calibre8 pcalibre">%rdi</code>, the second in <code id="P7000497027000000000000000044FA5" data-uri="chapter08.xhtml#P7000497027000000000000000044FA5" class="pcalibre1 calibre8 pcalibre">%rsi</code>, and so on. On return from the system call, registers <code id="P7000497027000000000000000044FA6" data-uri="chapter08.xhtml#P7000497027000000000000000044FA6" class="pcalibre1 calibre8 pcalibre">%rcx</code> and <code id="P7000497027000000000000000044FA7" data-uri="chapter08.xhtml#P7000497027000000000000000044FA7" class="pcalibre1 calibre8 pcalibre">%r11</code> are destroyed, and <code id="P7000497027000000000000000044FA8" data-uri="chapter08.xhtml#P7000497027000000000000000044FA8" class="pcalibre1 calibre8 pcalibre">%rax</code> contains the return value. A negative return value between -4,095 and -1 indicates an error corresponding to negative <code id="P7000497027000000000000000044FA9" data-uri="chapter08.xhtml#P7000497027000000000000000044FA9" class="pcalibre1 calibre8 pcalibre">errno</code>.</p>
<p id="P7000497027000000000000000044FAA" data-uri="chapter08.xhtml#P7000497027000000000000000044FAA" class="pcalibre1 pcalibre calibre2">For example, consider the following version of the familiar <code id="P7000497027000000000000000044FAB" data-uri="chapter08.xhtml#P7000497027000000000000000044FAB" class="pcalibre1 calibre8 pcalibre">hello</code> program, written using the <code id="P7000497027000000000000000044FAC" data-uri="chapter08.xhtml#P7000497027000000000000000044FAC" class="pcalibre1 calibre8 pcalibre">write</code> system-level function (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007939.xhtml#P7000497027000000000000000007939"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">10.4</span></a>) instead of <code id="P7000497027000000000000000044FAD" data-uri="chapter08.xhtml#P7000497027000000000000000044FAD" class="pcalibre1 calibre8 pcalibre">printf</code>:</p>
<pre id="P7000497027000000000000000044FAE" data-uri="chapter08.xhtml#P7000497027000000000000000044FAE" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000044FAF" data-uri="chapter08.xhtml#P7000497027000000000000000044FAF" class="calibre10 pcalibre pcalibre1">
1	int main()
2	{
3	write(1, "hello, world\n", 13);
4	_exit(0);
5	}</code>
</pre>
<p id="P7000497027000000000000000044FB0" data-uri="chapter08.xhtml#P7000497027000000000000000044FB0" class="pcalibre1 pcalibre calibre2">The first argument to <code id="P7000497027000000000000000044FB1" data-uri="chapter08.xhtml#P7000497027000000000000000044FB1" class="pcalibre1 calibre8 pcalibre">write</code> sends the output to <code id="P7000497027000000000000000044FB2" data-uri="chapter08.xhtml#P7000497027000000000000000044FB2" class="pcalibre1 calibre8 pcalibre">stdout</code>. The second argument is the sequence of bytes to write, and the third argument gives the number of bytes to write.</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000044FB3" data-uri="chapter08.xhtml#P7000497027000000000000000044FB3"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000044FB4" data-uri="chapter08.xhtml#P7000497027000000000000000044FB4" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000067C0" title="731" data-uri="chapter08.xhtml#P70004970270000000000000000067C0" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>A note on terminology</h1></header>
<p id="P7000497027000000000000000044FB5" data-uri="chapter08.xhtml#P7000497027000000000000000044FB5" class="pcalibre calibre3 pcalibre1">The terminology for the various classes of exceptions varies from system to system. Processor ISA specifications often distinguish between asynchronous “interrupts” and synchronous “exceptions” yet provide no umbrella term to refer to these very similar concepts. To avoid having to constantly refer to “exceptions and interrupts” and “exceptions or interrupts,” we use the word “exception” as the general term and distinguish between asynchronous exceptions (interrupts) and synchronous exceptions (traps, faults, and aborts) only when it is appropriate. As we have noted, the basic ideas are the same for every system, but you should be aware that some manufacturers' manuals use the word “exception” to refer only to those changes in control flow caused by synchronous events.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000067C2" data-uri="chapter08.xhtml#P70004970270000000000000000067C2">
<p id="P7000497027000000000000000044FB6" data-uri="chapter08.xhtml#P7000497027000000000000000044FB6" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/hello-asm64.sa</i></p>
<pre id="P7000497027000000000000000044FB7" data-uri="chapter08.xhtml#P7000497027000000000000000044FB7" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000044FB8" data-uri="chapter08.xhtml#P7000497027000000000000000044FB8" class="calibre10 pcalibre pcalibre1">
1	.section .data
2	string:
3		.ascii "hello, world\n"
4	string_end:
5		.equ len, string_end - string
6	.section .text
7	.globl main
8	main:
<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">First, call write(1, "hello, world\n", 13</i>)</b>
9		movq $1, %rax		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">write is system call 1</i></b>
10		movq $1, %rdi		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Arg1: stdout has descriptor 1</i></b>
11		movq $string, %rsi	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Arg2: hello world string</i></b>
12		movq $len, %rdx		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Arg3: string length</i></b>
13		syscall			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Make the system call</i></b>
<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Next, call _exit(0</i>)</b>
14	movq $60, %rax			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">_exit is system call 60</i></b>
15	movq $0, %rdi			<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Arg1: exit status is 0</i></b>
16	syscall				<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Make the system call</i></b>
</code></pre>
<p id="P7000497027000000000000000044FB9" data-uri="chapter08.xhtml#P7000497027000000000000000044FB9" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/hello-asm64.sa</i></p>
<figcaption id="P7000497027000000000000000044FBA" data-uri="chapter08.xhtml#P7000497027000000000000000044FBA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044FBB" data-uri="chapter08.xhtml#P7000497027000000000000000044FBB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.11 </span>Implementing the <code id="P7000497027000000000000000044FBC" data-uri="chapter08.xhtml#P7000497027000000000000000044FBC" class="pcalibre1 calibre8 pcalibre">hello</code> program directly with Linux system calls.</h1></header>
</figcaption>
</figure>

<p id="P7000497027000000000000000044FBD" data-uri="chapter08.xhtml#P7000497027000000000000000044FBD" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000067C2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.11</span></a> shows an assembly-language version of <code id="P7000497027000000000000000044FBE" data-uri="chapter08.xhtml#P7000497027000000000000000044FBE" class="pcalibre1 calibre8 pcalibre">hello</code> that uses the <code id="P7000497027000000000000000044FBF" data-uri="chapter08.xhtml#P7000497027000000000000000044FBF" class="pcalibre1 calibre8 pcalibre">syscall</code> instruction to invoke the <code id="P7000497027000000000000000044FC0" data-uri="chapter08.xhtml#P7000497027000000000000000044FC0" class="pcalibre1 calibre8 pcalibre">write</code> and <code id="P7000497027000000000000000044FC1" data-uri="chapter08.xhtml#P7000497027000000000000000044FC1" class="pcalibre1 calibre8 pcalibre">exit</code> system calls directly. Lines 9-13 invoke the <code id="P7000497027000000000000000044FC2" data-uri="chapter08.xhtml#P7000497027000000000000000044FC2" class="pcalibre1 calibre8 pcalibre">write</code> function. First, line 9 stores the number of the <code id="P7000497027000000000000000044FC3" data-uri="chapter08.xhtml#P7000497027000000000000000044FC3" class="pcalibre1 calibre8 pcalibre">write</code> system call in <code id="P7000497027000000000000000044FC4" data-uri="chapter08.xhtml#P7000497027000000000000000044FC4" class="pcalibre1 calibre8 pcalibre">%rax</code>, and lines 10-12 set up the argument list. Then, line 13 uses the <code id="P7000497027000000000000000044FC5" data-uri="chapter08.xhtml#P7000497027000000000000000044FC5" class="pcalibre1 calibre8 pcalibre">syscall</code> instruction to invoke the system call. Similarly, lines 14-16 invoke the <code id="P7000497027000000000000000044FC6" data-uri="chapter08.xhtml#P7000497027000000000000000044FC6" class="pcalibre1 calibre8 pcalibre">_exit</code> system call.</p>
</section>
</section>
</section></body></html>
