<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>31.2 Binary Semaphores (Locks)</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part319.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part321.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 6pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">31.2 Binary Semaphores (Locks)</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We are now ready to use a semaphore. Our first use will be one with which we are already familiar: using a semaphore as a lock. See Figure</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_413.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_414.png"/></span></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 88%;text-align: justify;"><span style=" color: #00AEEF;">31.3 </span>for a code snippet; therein, you’ll see that we simply surround the critical section of interest with a <span class="s41">sem wait()</span>/<span class="s41">sem post() </span>pair. Criti- cal to making this work, though, is the initial value of the semaphore <span class="s41">m </span>(initialized to <span class="s41">X </span>in the figure). What should <span class="s41">X </span>be?</p><p class="s6" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">... (Try thinking about it before going on) ...</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_415.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_416.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Looking back at definition of the <span class="s41">sem wait() </span>and <span class="s41">sem post() </span>rou- tines above, we can see that the initial value should be 1.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_417.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_418.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">To make this clear, let’s imagine a scenario with two threads. The first thread (Thread 0) calls <span class="s41">sem wait()</span>; it will first decrement the value of the semaphore, changing it to 0. Then, it will wait only if the value is <i>not </i>greater than or equal to 0; because the value is 0, the calling thread will simply return and continue; Thread 0 is now free to enter the critical section. If no other thread tries to acquire the lock while Thread 0 is inside the critical section, when it calls <span class="s41">sem post()</span>, it will simply restore the value of the semaphore to 1 (and not wake any waiting thread, because there are none). Table <span style=" color: #00AEEF;">31.1 </span>shows a trace of this scenario.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_419.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_420.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_421.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_422.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">A more interesting case arises when Thread 0 “holds the lock” (i.e., it has called <span class="s41">sem wait() </span>but not yet called <span class="s41">sem post()</span>), and another thread (Thread 1) tries to enter the critical section by calling <span class="s41">sem wait()</span>. In this case, Thread 1 will decrement the value of the semaphore to -1, and thus wait (putting itself to sleep and relinquishing the processor). When Thread 0 runs again, it will eventually call <span class="s41">sem post()</span>, incrementing the value of the semaphore back to zero, and then wake the waiting thread (Thread 1), which will then be able to acquire the lock for itself. When Thread 1 finishes, it will again increment the value of the semaphore, restoring it to 1 again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">Value of Semaphore  Thread 0       Thread 1</p><p style="padding-left: 77pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="287" height="1" alt="image" src="Image_423.png"/></span></p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 8pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_424.png"/></span></p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 10pt;text-align: left;">1      call <span class="s15">sem wait()</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_425.png"/></span></p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0      <span class="s15">sem wait() </span>returns</p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0      <span class="s15">(crit sect)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_426.png"/></span></p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0      call <span class="s15">sem post()</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_427.png"/></span></p><p class="s5" style="padding-left: 118pt;text-indent: 0pt;line-height: 10pt;text-align: left;">1      <span class="s15">sem post() </span>returns</p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">Table 31.1: <b>Thread Trace: Single Thread Using A Semaphore</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="369" height="213" alt="image" src="Image_428.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_429.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_430.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_431.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_432.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_433.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_434.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_435.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_436.png"/></span></p><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">Value</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">-1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">-1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">-1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">-1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">-1</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">0</p><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: center;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Thread 0</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 7pt;text-align: left;">call <span class="s38">sem wait()</span></p><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">sem wait() <span class="s12">returns</span></p><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">(crit sect: begin)</p><p class="s17" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Interrupt; Switch<span class="s148">→</span>T1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">State</p><p class="s12" style="text-indent: 0pt;line-height: 92%;text-align: center;">Running Running Running Running Ready Ready Ready Ready Running Running Running Running Running Running Ready Ready Ready Ready Ready</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Thread 1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="text-indent: 0pt;line-height: 8pt;text-align: left;">call <span class="s38">sem wait()</span></p><p class="s38" style="text-indent: 4pt;line-height: 92%;text-align: left;">decrement sem (sem<span class="s149">&lt;</span>0)<span class="s148">→</span>sleep <span class="s17">Switch</span><span class="s148">→</span><span class="s17">T0</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;text-align: left;">(crit sect: end) <span class="s12">call </span>sem post() increment sem wake(T1)</p><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">sem post() <span class="s12">returns</span></p><p class="s17" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Interrupt; Switch<span class="s148">→</span>T1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">sem wait() <span class="s12">returns</span></p><p class="s38" style="text-indent: 0pt;line-height: 8pt;text-align: left;">(crit sect)</p><p class="s12" style="text-indent: 0pt;line-height: 91%;text-align: left;">call <span class="s38">sem post() sem post() </span>returns</p><p style="text-indent: 0pt;text-align: left;"/><p class="s36" style="text-indent: 0pt;line-height: 7pt;text-align: center;">State</p><p class="s12" style="text-indent: 0pt;line-height: 92%;text-align: center;">Ready Ready Ready Ready Running Running Running Sleeping Sleeping Sleeping Sleeping Sleeping Ready Ready Running Running Running Running Running</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 5pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Table 31.2: <b>Thread Trace: Two Threads Using A Semaphore</b></p><p style="padding-top: 8pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Table <span style=" color: #00AEEF;">31.2 </span>shows a trace of this example. In addition to thread actions, the table shows the <b>scheduler state </b>of each thread: Running, Ready (i.e., runnable but not running), and Sleeping. Note in particular that Thread 1 goes into the sleeping state when it tries to acquire the already-held lock; only when Thread 0 runs again can Thread 1 be awoken and potentially run again.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">If you want to work through your own example, try a scenario where multiple threads queue up waiting for a lock. What would the value of the semaphore be during such a trace?</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Thus we are able to use semaphores as locks. Because locks only have two states (held and not held), this usage is sometimes known as a <b>binary semaphore </b>and in fact can be implemented in a more simplified manner than discussed here; we instead use the generalized semaphore as a lock.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part319.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part321.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
