<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>8.5 Signals</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006A2D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000045248" data-uri="chapter08.xhtml#P7000497027000000000000000045248" epub:type="title"><span class="pcalibre label pcalibre1">8.5 </span>Signals</h1></header>
<p id="P7000497027000000000000000045249" data-uri="chapter08.xhtml#P7000497027000000000000000045249" class="pcalibre1 pcalibre calibre2">To this point in our study of exceptional control flow, we have seen how hardware and software cooperate to provide the fundamental low-level exception mechanism. We have also seen how the operating system uses exceptions to support a form of exceptional control flow known as the process context switch. In this section, we will study a higher-level software form of exceptional control flow, known as a Linux signal, that allows processes and the kernel to interrupt other processes.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006A30" data-uri="chapter08.xhtml#P7000497027000000000000000006A30">

<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000004524A" data-uri="chapter08.xhtml#P700049702700000000000000004524A">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004524B" data-uri="chapter08.xhtml#P700049702700000000000000004524B" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000006A33" title="757" data-uri="chapter08.xhtml#P7000497027000000000000000006A33" epub:type="pagebreak"></span>Number	</th><th id="P700049702700000000000000004524C" data-uri="chapter08.xhtml#P700049702700000000000000004524C" class="calibre18 pcalibre pcalibre1">Name	</th><th id="P700049702700000000000000004524D" data-uri="chapter08.xhtml#P700049702700000000000000004524D" class="calibre18 pcalibre pcalibre1">Default action	</th><th id="P700049702700000000000000004524E" data-uri="chapter08.xhtml#P700049702700000000000000004524E" class="calibre18 pcalibre pcalibre1">Corresponding event</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004524F" data-uri="chapter08.xhtml#P700049702700000000000000004524F" class="calibre20 pcalibre pcalibre1">1</td><td id="P7000497027000000000000000045250" data-uri="chapter08.xhtml#P7000497027000000000000000045250" class="calibre20 pcalibre pcalibre1">SIGHUP</td><td id="P7000497027000000000000000045251" data-uri="chapter08.xhtml#P7000497027000000000000000045251" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P7000497027000000000000000045252" data-uri="chapter08.xhtml#P7000497027000000000000000045252" class="calibre20 pcalibre pcalibre1">Terminal line hangup</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045253" data-uri="chapter08.xhtml#P7000497027000000000000000045253" class="calibre20 pcalibre pcalibre1">2</td><td id="P7000497027000000000000000045254" data-uri="chapter08.xhtml#P7000497027000000000000000045254" class="calibre20 pcalibre pcalibre1">SIGINT</td><td id="P7000497027000000000000000045255" data-uri="chapter08.xhtml#P7000497027000000000000000045255" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P7000497027000000000000000045256" data-uri="chapter08.xhtml#P7000497027000000000000000045256" class="calibre20 pcalibre pcalibre1">Interrupt from keyboard</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045257" data-uri="chapter08.xhtml#P7000497027000000000000000045257" class="calibre20 pcalibre pcalibre1">3</td><td id="P7000497027000000000000000045258" data-uri="chapter08.xhtml#P7000497027000000000000000045258" class="calibre20 pcalibre pcalibre1">SIGQUIT</td><td id="P7000497027000000000000000045259" data-uri="chapter08.xhtml#P7000497027000000000000000045259" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004525A" data-uri="chapter08.xhtml#P700049702700000000000000004525A" class="calibre20 pcalibre pcalibre1">Quit from keyboard</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004525B" data-uri="chapter08.xhtml#P700049702700000000000000004525B" class="calibre20 pcalibre pcalibre1">4</td><td id="P700049702700000000000000004525C" data-uri="chapter08.xhtml#P700049702700000000000000004525C" class="calibre20 pcalibre pcalibre1">SIGILL</td><td id="P700049702700000000000000004525D" data-uri="chapter08.xhtml#P700049702700000000000000004525D" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004525E" data-uri="chapter08.xhtml#P700049702700000000000000004525E" class="calibre20 pcalibre pcalibre1">Illegal instruction</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004525F" data-uri="chapter08.xhtml#P700049702700000000000000004525F" class="calibre20 pcalibre pcalibre1">5</td><td id="P7000497027000000000000000045260" data-uri="chapter08.xhtml#P7000497027000000000000000045260" class="calibre20 pcalibre pcalibre1">SIGTRAP</td><td id="P7000497027000000000000000045261" data-uri="chapter08.xhtml#P7000497027000000000000000045261" class="calibre20 pcalibre pcalibre1">Terminate and dump core<sup class="pcalibre1 calibre21 pcalibre">a</sup></td><td id="P7000497027000000000000000045262" data-uri="chapter08.xhtml#P7000497027000000000000000045262" class="calibre20 pcalibre pcalibre1">Trace trap</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045263" data-uri="chapter08.xhtml#P7000497027000000000000000045263" class="calibre20 pcalibre pcalibre1">6</td><td id="P7000497027000000000000000045264" data-uri="chapter08.xhtml#P7000497027000000000000000045264" class="calibre20 pcalibre pcalibre1">SIGABRT</td><td id="P7000497027000000000000000045265" data-uri="chapter08.xhtml#P7000497027000000000000000045265" class="calibre20 pcalibre pcalibre1">Terminate and dump core<sup class="pcalibre1 calibre21 pcalibre">a</sup></td><td id="P7000497027000000000000000045266" data-uri="chapter08.xhtml#P7000497027000000000000000045266" class="calibre20 pcalibre pcalibre1">Abort signal from abort function</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045267" data-uri="chapter08.xhtml#P7000497027000000000000000045267" class="calibre20 pcalibre pcalibre1">7</td><td id="P7000497027000000000000000045268" data-uri="chapter08.xhtml#P7000497027000000000000000045268" class="calibre20 pcalibre pcalibre1">SIGBUS</td><td id="P7000497027000000000000000045269" data-uri="chapter08.xhtml#P7000497027000000000000000045269" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004526A" data-uri="chapter08.xhtml#P700049702700000000000000004526A" class="calibre20 pcalibre pcalibre1">Bus error</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004526B" data-uri="chapter08.xhtml#P700049702700000000000000004526B" class="calibre20 pcalibre pcalibre1">8</td><td id="P700049702700000000000000004526C" data-uri="chapter08.xhtml#P700049702700000000000000004526C" class="calibre20 pcalibre pcalibre1">SIGFPE</td><td id="P700049702700000000000000004526D" data-uri="chapter08.xhtml#P700049702700000000000000004526D" class="calibre20 pcalibre pcalibre1">Terminate and dump core<sup class="pcalibre1 calibre21 pcalibre">a</sup></td><td id="P700049702700000000000000004526E" data-uri="chapter08.xhtml#P700049702700000000000000004526E" class="calibre20 pcalibre pcalibre1">Floating-point exception</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004526F" data-uri="chapter08.xhtml#P700049702700000000000000004526F" class="calibre20 pcalibre pcalibre1">9</td><td id="P7000497027000000000000000045270" data-uri="chapter08.xhtml#P7000497027000000000000000045270" class="calibre20 pcalibre pcalibre1">SIGKILL</td><td id="P7000497027000000000000000045271" data-uri="chapter08.xhtml#P7000497027000000000000000045271" class="calibre20 pcalibre pcalibre1">Terminate<sup class="pcalibre1 calibre21 pcalibre">b</sup></td><td id="P7000497027000000000000000045272" data-uri="chapter08.xhtml#P7000497027000000000000000045272" class="calibre20 pcalibre pcalibre1">Kill program</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045273" data-uri="chapter08.xhtml#P7000497027000000000000000045273" class="calibre20 pcalibre pcalibre1">10</td><td id="P7000497027000000000000000045274" data-uri="chapter08.xhtml#P7000497027000000000000000045274" class="calibre20 pcalibre pcalibre1">SIGUSR1</td><td id="P7000497027000000000000000045275" data-uri="chapter08.xhtml#P7000497027000000000000000045275" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P7000497027000000000000000045276" data-uri="chapter08.xhtml#P7000497027000000000000000045276" class="calibre20 pcalibre pcalibre1">User-defined signal 1</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045277" data-uri="chapter08.xhtml#P7000497027000000000000000045277" class="calibre20 pcalibre pcalibre1">11</td><td id="P7000497027000000000000000045278" data-uri="chapter08.xhtml#P7000497027000000000000000045278" class="calibre20 pcalibre pcalibre1">SIGSEGV</td><td id="P7000497027000000000000000045279" data-uri="chapter08.xhtml#P7000497027000000000000000045279" class="calibre20 pcalibre pcalibre1">Terminate and dump core<sup class="pcalibre1 calibre21 pcalibre">a</sup></td><td id="P700049702700000000000000004527A" data-uri="chapter08.xhtml#P700049702700000000000000004527A" class="calibre20 pcalibre pcalibre1">Invalid memory reference (seg fault)</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004527B" data-uri="chapter08.xhtml#P700049702700000000000000004527B" class="calibre20 pcalibre pcalibre1">12</td><td id="P700049702700000000000000004527C" data-uri="chapter08.xhtml#P700049702700000000000000004527C" class="calibre20 pcalibre pcalibre1">SIGUSR2</td><td id="P700049702700000000000000004527D" data-uri="chapter08.xhtml#P700049702700000000000000004527D" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004527E" data-uri="chapter08.xhtml#P700049702700000000000000004527E" class="calibre20 pcalibre pcalibre1">User-defined signal 2</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004527F" data-uri="chapter08.xhtml#P700049702700000000000000004527F" class="calibre20 pcalibre pcalibre1">13</td><td id="P7000497027000000000000000045280" data-uri="chapter08.xhtml#P7000497027000000000000000045280" class="calibre20 pcalibre pcalibre1">SIGPIPE</td><td id="P7000497027000000000000000045281" data-uri="chapter08.xhtml#P7000497027000000000000000045281" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P7000497027000000000000000045282" data-uri="chapter08.xhtml#P7000497027000000000000000045282" class="calibre20 pcalibre pcalibre1">Wrote to a pipe with no reader</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045283" data-uri="chapter08.xhtml#P7000497027000000000000000045283" class="calibre20 pcalibre pcalibre1">14</td><td id="P7000497027000000000000000045284" data-uri="chapter08.xhtml#P7000497027000000000000000045284" class="calibre20 pcalibre pcalibre1">SIGALRM</td><td id="P7000497027000000000000000045285" data-uri="chapter08.xhtml#P7000497027000000000000000045285" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P7000497027000000000000000045286" data-uri="chapter08.xhtml#P7000497027000000000000000045286" class="calibre20 pcalibre pcalibre1">Timer signal from alarm function</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045287" data-uri="chapter08.xhtml#P7000497027000000000000000045287" class="calibre20 pcalibre pcalibre1">15</td><td id="P7000497027000000000000000045288" data-uri="chapter08.xhtml#P7000497027000000000000000045288" class="calibre20 pcalibre pcalibre1">SIGTERM</td><td id="P7000497027000000000000000045289" data-uri="chapter08.xhtml#P7000497027000000000000000045289" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004528A" data-uri="chapter08.xhtml#P700049702700000000000000004528A" class="calibre20 pcalibre pcalibre1">Software termination signal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004528B" data-uri="chapter08.xhtml#P700049702700000000000000004528B" class="calibre20 pcalibre pcalibre1">16</td><td id="P700049702700000000000000004528C" data-uri="chapter08.xhtml#P700049702700000000000000004528C" class="calibre20 pcalibre pcalibre1">SIGSTKFLT</td><td id="P700049702700000000000000004528D" data-uri="chapter08.xhtml#P700049702700000000000000004528D" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P700049702700000000000000004528E" data-uri="chapter08.xhtml#P700049702700000000000000004528E" class="calibre20 pcalibre pcalibre1">Stack fault on coprocessor</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004528F" data-uri="chapter08.xhtml#P700049702700000000000000004528F" class="calibre20 pcalibre pcalibre1">17</td><td id="P7000497027000000000000000045290" data-uri="chapter08.xhtml#P7000497027000000000000000045290" class="calibre20 pcalibre pcalibre1">SIGCHLD</td><td id="P7000497027000000000000000045291" data-uri="chapter08.xhtml#P7000497027000000000000000045291" class="calibre20 pcalibre pcalibre1">Ignore</td><td id="P7000497027000000000000000045292" data-uri="chapter08.xhtml#P7000497027000000000000000045292" class="calibre20 pcalibre pcalibre1">A child process has stopped or terminated</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045293" data-uri="chapter08.xhtml#P7000497027000000000000000045293" class="calibre20 pcalibre pcalibre1">18</td><td id="P7000497027000000000000000045294" data-uri="chapter08.xhtml#P7000497027000000000000000045294" class="calibre20 pcalibre pcalibre1">SIGCONT</td><td id="P7000497027000000000000000045295" data-uri="chapter08.xhtml#P7000497027000000000000000045295" class="calibre20 pcalibre pcalibre1">Ignore</td><td id="P7000497027000000000000000045296" data-uri="chapter08.xhtml#P7000497027000000000000000045296" class="calibre20 pcalibre pcalibre1">Continue process if stopped</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045297" data-uri="chapter08.xhtml#P7000497027000000000000000045297" class="calibre20 pcalibre pcalibre1">19</td><td id="P7000497027000000000000000045298" data-uri="chapter08.xhtml#P7000497027000000000000000045298" class="calibre20 pcalibre pcalibre1">SIGSTOP</td><td id="P7000497027000000000000000045299" data-uri="chapter08.xhtml#P7000497027000000000000000045299" class="calibre20 pcalibre pcalibre1">Stop until next SIGCONT<sup class="pcalibre1 calibre21 pcalibre">b</sup></td><td id="P700049702700000000000000004529A" data-uri="chapter08.xhtml#P700049702700000000000000004529A" class="calibre20 pcalibre pcalibre1">Stop signal not from terminal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004529B" data-uri="chapter08.xhtml#P700049702700000000000000004529B" class="calibre20 pcalibre pcalibre1">20</td><td id="P700049702700000000000000004529C" data-uri="chapter08.xhtml#P700049702700000000000000004529C" class="calibre20 pcalibre pcalibre1">SIGTSTP</td><td id="P700049702700000000000000004529D" data-uri="chapter08.xhtml#P700049702700000000000000004529D" class="calibre20 pcalibre pcalibre1">Stop until next SIGCONT</td><td id="P700049702700000000000000004529E" data-uri="chapter08.xhtml#P700049702700000000000000004529E" class="calibre20 pcalibre pcalibre1">Stop signal from terminal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004529F" data-uri="chapter08.xhtml#P700049702700000000000000004529F" class="calibre20 pcalibre pcalibre1">21</td><td id="P70004970270000000000000000452A0" data-uri="chapter08.xhtml#P70004970270000000000000000452A0" class="calibre20 pcalibre pcalibre1">SIGTTIN</td><td id="P70004970270000000000000000452A1" data-uri="chapter08.xhtml#P70004970270000000000000000452A1" class="calibre20 pcalibre pcalibre1">Stop until next SIGCONT</td><td id="P70004970270000000000000000452A2" data-uri="chapter08.xhtml#P70004970270000000000000000452A2" class="calibre20 pcalibre pcalibre1">Background process read from terminal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452A3" data-uri="chapter08.xhtml#P70004970270000000000000000452A3" class="calibre20 pcalibre pcalibre1">22</td><td id="P70004970270000000000000000452A4" data-uri="chapter08.xhtml#P70004970270000000000000000452A4" class="calibre20 pcalibre pcalibre1">SIGTTOU</td><td id="P70004970270000000000000000452A5" data-uri="chapter08.xhtml#P70004970270000000000000000452A5" class="calibre20 pcalibre pcalibre1">Stop until next SIGCONT</td><td id="P70004970270000000000000000452A6" data-uri="chapter08.xhtml#P70004970270000000000000000452A6" class="calibre20 pcalibre pcalibre1">Background process wrote to terminal</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452A7" data-uri="chapter08.xhtml#P70004970270000000000000000452A7" class="calibre20 pcalibre pcalibre1">23</td><td id="P70004970270000000000000000452A8" data-uri="chapter08.xhtml#P70004970270000000000000000452A8" class="calibre20 pcalibre pcalibre1">SIGURG</td><td id="P70004970270000000000000000452A9" data-uri="chapter08.xhtml#P70004970270000000000000000452A9" class="calibre20 pcalibre pcalibre1">Ignore</td><td id="P70004970270000000000000000452AA" data-uri="chapter08.xhtml#P70004970270000000000000000452AA" class="calibre20 pcalibre pcalibre1">Urgent condition on socket</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452AB" data-uri="chapter08.xhtml#P70004970270000000000000000452AB" class="calibre20 pcalibre pcalibre1">24</td><td id="P70004970270000000000000000452AC" data-uri="chapter08.xhtml#P70004970270000000000000000452AC" class="calibre20 pcalibre pcalibre1">SIGXCPU</td><td id="P70004970270000000000000000452AD" data-uri="chapter08.xhtml#P70004970270000000000000000452AD" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452AE" data-uri="chapter08.xhtml#P70004970270000000000000000452AE" class="calibre20 pcalibre pcalibre1">CPU time limit exceeded</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452AF" data-uri="chapter08.xhtml#P70004970270000000000000000452AF" class="calibre20 pcalibre pcalibre1">25</td><td id="P70004970270000000000000000452B0" data-uri="chapter08.xhtml#P70004970270000000000000000452B0" class="calibre20 pcalibre pcalibre1">SIGXFSZ</td><td id="P70004970270000000000000000452B1" data-uri="chapter08.xhtml#P70004970270000000000000000452B1" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452B2" data-uri="chapter08.xhtml#P70004970270000000000000000452B2" class="calibre20 pcalibre pcalibre1">File size limit exceeded</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452B3" data-uri="chapter08.xhtml#P70004970270000000000000000452B3" class="calibre20 pcalibre pcalibre1">26</td><td id="P70004970270000000000000000452B4" data-uri="chapter08.xhtml#P70004970270000000000000000452B4" class="calibre20 pcalibre pcalibre1">SIGVTALRM</td><td id="P70004970270000000000000000452B5" data-uri="chapter08.xhtml#P70004970270000000000000000452B5" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452B6" data-uri="chapter08.xhtml#P70004970270000000000000000452B6" class="calibre20 pcalibre pcalibre1">Virtual timer expired</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452B7" data-uri="chapter08.xhtml#P70004970270000000000000000452B7" class="calibre20 pcalibre pcalibre1">27</td><td id="P70004970270000000000000000452B8" data-uri="chapter08.xhtml#P70004970270000000000000000452B8" class="calibre20 pcalibre pcalibre1">SIGPROF</td><td id="P70004970270000000000000000452B9" data-uri="chapter08.xhtml#P70004970270000000000000000452B9" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452BA" data-uri="chapter08.xhtml#P70004970270000000000000000452BA" class="calibre20 pcalibre pcalibre1">Profiling timer expired</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452BB" data-uri="chapter08.xhtml#P70004970270000000000000000452BB" class="calibre20 pcalibre pcalibre1">28</td><td id="P70004970270000000000000000452BC" data-uri="chapter08.xhtml#P70004970270000000000000000452BC" class="calibre20 pcalibre pcalibre1">SIGWINCH</td><td id="P70004970270000000000000000452BD" data-uri="chapter08.xhtml#P70004970270000000000000000452BD" class="calibre20 pcalibre pcalibre1">Ignore</td><td id="P70004970270000000000000000452BE" data-uri="chapter08.xhtml#P70004970270000000000000000452BE" class="calibre20 pcalibre pcalibre1">Window size changed</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452BF" data-uri="chapter08.xhtml#P70004970270000000000000000452BF" class="calibre20 pcalibre pcalibre1">29</td><td id="P70004970270000000000000000452C0" data-uri="chapter08.xhtml#P70004970270000000000000000452C0" class="calibre20 pcalibre pcalibre1">SIGIO</td><td id="P70004970270000000000000000452C1" data-uri="chapter08.xhtml#P70004970270000000000000000452C1" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452C2" data-uri="chapter08.xhtml#P70004970270000000000000000452C2" class="calibre20 pcalibre pcalibre1">I/O now possible on a descriptor</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000452C3" data-uri="chapter08.xhtml#P70004970270000000000000000452C3" class="calibre20 pcalibre pcalibre1">30</td><td id="P70004970270000000000000000452C4" data-uri="chapter08.xhtml#P70004970270000000000000000452C4" class="calibre20 pcalibre pcalibre1">SIGPWR</td><td id="P70004970270000000000000000452C5" data-uri="chapter08.xhtml#P70004970270000000000000000452C5" class="calibre20 pcalibre pcalibre1">Terminate</td><td id="P70004970270000000000000000452C6" data-uri="chapter08.xhtml#P70004970270000000000000000452C6" class="calibre20 pcalibre pcalibre1">Power failure</td></tr>
</tbody>
</table>

<figcaption id="P70004970270000000000000000452C7" data-uri="chapter08.xhtml#P70004970270000000000000000452C7" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000452C8" data-uri="chapter08.xhtml#P70004970270000000000000000452C8" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.26 </span>Linux signals.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000452C9" data-uri="chapter08.xhtml#P70004970270000000000000000452C9"><p id="P70004970270000000000000000452CA" data-uri="chapter08.xhtml#P70004970270000000000000000452CA" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Notes: </span>(a) Years ago, main memory was implemented with a technology known as <i class="calibre5 pcalibre pcalibre1">core memory.</i> “Dumping core” is a historical term that means writing an image of the code and data memory segments to disk, (b) This signal can be neither caught nor ignored.</p></div>
<div class="pcalibre source pcalibre1" id="P70004970270000000000000000452CB" data-uri="chapter08.xhtml#P70004970270000000000000000452CB"><p id="P70004970270000000000000000452CC" data-uri="chapter08.xhtml#P70004970270000000000000000452CC" class="calibre54 pcalibre pcalibre1">(<span class="pcalibre label pcalibre1">Source:</span> <code id="P70004970270000000000000000452CD" data-uri="chapter08.xhtml#P70004970270000000000000000452CD" class="pcalibre1 pcalibre calibre74">man 7 signal</code>. Data from the Linux Foundation.)</p></div>

</figcaption>
</figure>
<p id="P70004970270000000000000000452CE" data-uri="chapter08.xhtml#P70004970270000000000000000452CE" class="pcalibre1 pcalibre calibre2">A <i class="calibre5 pcalibre pcalibre1">signal</i> is a small message that notifies a process that an event of some type has occurred in the system. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006A30"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.26 </span></a>shows the 30 different types of signals that are supported on Linux systems.</p>
<p id="P70004970270000000000000000452CF" data-uri="chapter08.xhtml#P70004970270000000000000000452CF" class="pcalibre1 pcalibre calibre2">Each signal type corresponds to some kind of system event. Low-level hardware exceptions are processed by the kernel's exception handlers and would not normally be visible to user processes. Signals provide a mechanism for exposing <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006AB8" title="758" data-uri="chapter08.xhtml#P7000497027000000000000000006AB8" epub:type="pagebreak"></span>the occurrence of such exceptions to user processes. For example, if a process attempts to divide by zero, then the kernel sends it a SIGFPE signal (number 8). If a process executes an illegal instruction, the kernel sends it a SIGILL signal (number 4). If a process makes an illegal memory reference, the kernel sends it a SIGSEGV signal (number 11). Other signals correspond to higher-level software events in the kernel or in other user processes. For example, if you type Ctrl+C (i.e., press the Ctrl key and the ‘c’ key at the same time) while a process is running in the foreground, then the kernel sends a SIGINT (number 2) to each process in the foreground process group. A process can forcibly terminate another process by sending it a SIGKILL signal (number 9). When a child process terminates or stops, the kernel sends a SIGCHLD signal (number 17) to the parent.</p>
<section id="P7000497027000000000000000006AB9" data-uri="chapter08.xhtml#P7000497027000000000000000006AB9" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000452D0" data-uri="chapter08.xhtml#P70004970270000000000000000452D0" epub:type="title"><span class="pcalibre label pcalibre1">8.5.1  </span>Signal Terminology</h1></header>
<p id="P70004970270000000000000000452D1" data-uri="chapter08.xhtml#P70004970270000000000000000452D1" class="pcalibre1 pcalibre calibre2">The transfer of a signal to a destination process occurs in two distinct steps:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000452D2" data-uri="chapter08.xhtml#P70004970270000000000000000452D2">
<li id="P70004970270000000000000000452D3" data-uri="chapter08.xhtml#P70004970270000000000000000452D3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452D4" data-uri="chapter08.xhtml#P70004970270000000000000000452D4" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Sending a signal. </span>The kernel <i class="calibre5 pcalibre pcalibre1">sends (delivers)</i> a signal to a destination process by updating some state in the context of the destination process. The signal is delivered for one of two reasons: (1) The kernel has detected a system event such as a divide-by-zero error or the termination of a child process. (2) A process has invoked the <code id="P70004970270000000000000000452D5" data-uri="chapter08.xhtml#P70004970270000000000000000452D5" class="pcalibre1 calibre8 pcalibre">kill</code> function (discussed in the next section) to explicitly request the kernel to send a signal to the destination process. A process can send a signal to itself.</p></li>
<li id="P70004970270000000000000000452D6" data-uri="chapter08.xhtml#P70004970270000000000000000452D6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452D7" data-uri="chapter08.xhtml#P70004970270000000000000000452D7" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Receiving a signal. </span>A destination process <i class="calibre5 pcalibre pcalibre1">receives</i> a signal when it is forced by the kernel to react in some way to the delivery of the signal. The process can either ignore the signal, terminate, or <i class="calibre5 pcalibre pcalibre1">catch</i> the signal by executing a user-level function called a <i class="calibre5 pcalibre pcalibre1">signal handler.</i> <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006AC3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.27</span></a> shows the basic idea of a handler catching a signal.</p></li>
</ul>
<p id="P70004970270000000000000000452D8" data-uri="chapter08.xhtml#P70004970270000000000000000452D8" class="pcalibre1 pcalibre calibre2">A signal that has been sent but not yet received is called <i class="calibre5 pcalibre pcalibre1">spending signal.</i> At any point in time, there can be at most one pending signal of a particular type. If a process has a pending signal of type <var class="calibre5 pcalibre pcalibre1">k</var>, then any subsequent signals of type <var class="calibre5 pcalibre pcalibre1">k</var> sent to that process are <i class="calibre5 pcalibre pcalibre1">not</i> queued; they are simply discarded. A process can selectively <i class="calibre5 pcalibre pcalibre1">block</i> the receipt of certain signals. When a signal is blocked, it can be</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006AC3" data-uri="chapter08.xhtml#P7000497027000000000000000006AC3">
<img alt="A diagram illustrates steps in signal handling." id="P70004970270000000000000000452D9" data-uri="P700049702700000000000000000B771" src="../images/p758-1.png" class="calibre254 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000452DA" data-uri="chapter08.xhtml#P70004970270000000000000000452DA" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000452DB" data-uri="chapter08.xhtml#P70004970270000000000000000452DB" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.27 </span>Signal handling.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000452DC" data-uri="chapter08.xhtml#P70004970270000000000000000452DC"><p id="P70004970270000000000000000452DD" data-uri="chapter08.xhtml#P70004970270000000000000000452DD" class="pcalibre calibre3 pcalibre1">Receipt of a signal triggers a control transfer to a signal handler. After it finishes processing, the handler returns control to the interrupted program.</p></div>

<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025606" data-uri="chapter08.xhtml#P7000497027000000000000000025606">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000452DE" data-uri="chapter08.xhtml#P70004970270000000000000000452DE" class="pcalibre1 pcalibre calibre2">Steps in interrupt handling are summarized below.</p>
<ol id="P70004970270000000000000000452DF" data-uri="chapter08.xhtml#P70004970270000000000000000452DF" class="pcalibre1 pcalibre calibre45">
<li id="P70004970270000000000000000452E0" data-uri="chapter08.xhtml#P70004970270000000000000000452E0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452E1" data-uri="chapter08.xhtml#P70004970270000000000000000452E1" class="pcalibre calibre3 pcalibre1">Signal received by process (arrow pointing down to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P70004970270000000000000000452E2" data-uri="chapter08.xhtml#P70004970270000000000000000452E2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452E3" data-uri="chapter08.xhtml#P70004970270000000000000000452E3" class="pcalibre calibre3 pcalibre1">Control passes to signal handler (arrow pointing right from I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P70004970270000000000000000452E4" data-uri="chapter08.xhtml#P70004970270000000000000000452E4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452E5" data-uri="chapter08.xhtml#P70004970270000000000000000452E5" class="pcalibre calibre3 pcalibre1">Signal handler runs (arrow pointing down)</p></li>
<li id="P70004970270000000000000000452E6" data-uri="chapter08.xhtml#P70004970270000000000000000452E6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000452E7" data-uri="chapter08.xhtml#P70004970270000000000000000452E7" class="pcalibre calibre3 pcalibre1">Signal handler returns to next instruction (arrow back to I<sub class="pcalibre1 calibre47 pcalibre">next</sub>, below I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
</ol>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000452E8" data-uri="chapter08.xhtml#P70004970270000000000000000452E8"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006ACA" title="759" data-uri="chapter08.xhtml#P7000497027000000000000000006ACA" epub:type="pagebreak"></span>delivered, but the resulting pending signal will not be received until the process unblocks the signal.</p>
<p id="P70004970270000000000000000452E9" data-uri="chapter08.xhtml#P70004970270000000000000000452E9" class="pcalibre1 pcalibre calibre2">A pending signal is received at most once. For each process, the kernel maintains the set of pending signals in the <code id="P70004970270000000000000000452EA" data-uri="chapter08.xhtml#P70004970270000000000000000452EA" class="pcalibre1 calibre8 pcalibre">pending</code> bit vector, and the set of blocked signals in the <code id="P70004970270000000000000000452EB" data-uri="chapter08.xhtml#P70004970270000000000000000452EB" class="pcalibre1 calibre8 pcalibre">blocked</code> bit vector.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P7000497027000000000000000006FED" epub:type="noteref" href="#P7000497027000000000000000006FED">1</a> The kernel sets bit <var class="calibre5 pcalibre pcalibre1">k</var> in <code id="P70004970270000000000000000452EC" data-uri="chapter08.xhtml#P70004970270000000000000000452EC" class="pcalibre1 calibre8 pcalibre">pending</code> whenever a signal of type <var class="calibre5 pcalibre pcalibre1">k</var> is delivered and clears bit <var class="calibre5 pcalibre pcalibre1">k</var> in <code id="P70004970270000000000000000452ED" data-uri="chapter08.xhtml#P70004970270000000000000000452ED" class="pcalibre1 calibre8 pcalibre">pending</code> whenever a signal of type <var class="calibre5 pcalibre pcalibre1">k</var> is received.</p><aside class="footnote pcalibre5 pcalibre" id="P7000497027000000000000000006FED" data-uri="chapter08.xhtml#P7000497027000000000000000006FED" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P7000497027000000000000000006FED" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">1. </a></span>Also known as the <i class="calibre5 pcalibre pcalibre1">signal mask.</i></p></aside>
</section>

<section id="P7000497027000000000000000006AD0" data-uri="chapter08.xhtml#P7000497027000000000000000006AD0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000452EE" data-uri="chapter08.xhtml#P70004970270000000000000000452EE" epub:type="title"><span class="pcalibre label pcalibre1">8.5.2  </span>Sending Signals</h1></header>
<p id="P70004970270000000000000000452EF" data-uri="chapter08.xhtml#P70004970270000000000000000452EF" class="pcalibre1 pcalibre calibre2">Unix systems provide a number of mechanisms for sending signals to processes. All of the mechanisms rely on the notion of a <i class="calibre5 pcalibre pcalibre1">process group.</i></p>
<section id="P7000497027000000000000000006AD3" data-uri="chapter08.xhtml#P7000497027000000000000000006AD3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000452F0" data-uri="chapter08.xhtml#P70004970270000000000000000452F0" epub:type="title">Process Groups</h1></header>
<p id="P70004970270000000000000000452F1" data-uri="chapter08.xhtml#P70004970270000000000000000452F1" class="pcalibre1 pcalibre calibre2">Every process belongs to exactly one <i class="calibre5 pcalibre pcalibre1">process group</i>, which is identified by a positive <i class="calibre5 pcalibre pcalibre1">integer process group ID.</i> The <code id="P70004970270000000000000000452F2" data-uri="chapter08.xhtml#P70004970270000000000000000452F2" class="pcalibre1 calibre8 pcalibre">getpgrp</code> function returns the process group ID of the current process.</p>
<pre id="P70004970270000000000000000452F3" data-uri="chapter08.xhtml#P70004970270000000000000000452F3" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000452F4" data-uri="chapter08.xhtml#P70004970270000000000000000452F4" class="calibre10 pcalibre pcalibre1">
#include &lt;unistd.h&gt;
pid_t getpgrp(void);
				Returns: process group ID of calling process
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000452F5" data-uri="chapter08.xhtml#P70004970270000000000000000452F5">By default, a child process belongs to the same process group as its parent. A process can change the process group of itself or another process by using the <code id="P70004970270000000000000000452F6" data-uri="chapter08.xhtml#P70004970270000000000000000452F6" class="pcalibre1 calibre8 pcalibre">setpgid</code> function:</p>
<pre id="P70004970270000000000000000452F7" data-uri="chapter08.xhtml#P70004970270000000000000000452F7" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000452F8" data-uri="chapter08.xhtml#P70004970270000000000000000452F8" class="calibre10 pcalibre pcalibre1">
#include &lt;unistd.h&gt;
int setpgid(pid_t pid, pid_t pgid);
				Returns: 0 on success, -1 on error
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000452F9" data-uri="chapter08.xhtml#P70004970270000000000000000452F9">The <code id="P70004970270000000000000000452FA" data-uri="chapter08.xhtml#P70004970270000000000000000452FA" class="pcalibre1 calibre8 pcalibre">setpgid</code> function changes the process group of process <code id="P70004970270000000000000000452FB" data-uri="chapter08.xhtml#P70004970270000000000000000452FB" class="pcalibre1 calibre8 pcalibre">pid</code> to <code id="P70004970270000000000000000452FC" data-uri="chapter08.xhtml#P70004970270000000000000000452FC" class="pcalibre1 calibre8 pcalibre">pgid</code>. If <code id="P70004970270000000000000000452FD" data-uri="chapter08.xhtml#P70004970270000000000000000452FD" class="pcalibre1 calibre8 pcalibre">pid</code> is zero, the PID of the current process is used. If <code id="P70004970270000000000000000452FE" data-uri="chapter08.xhtml#P70004970270000000000000000452FE" class="pcalibre1 calibre8 pcalibre">pgid</code> is zero, the PID of the process specified by <code id="P70004970270000000000000000452FF" data-uri="chapter08.xhtml#P70004970270000000000000000452FF" class="pcalibre1 calibre8 pcalibre">pid</code> is used for the process group ID. For example, if process 15213 is the calling process, then</p>
<pre id="P7000497027000000000000000045300" data-uri="chapter08.xhtml#P7000497027000000000000000045300" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045301" data-uri="chapter08.xhtml#P7000497027000000000000000045301" class="calibre10 pcalibre pcalibre1">setpgid(0, 0);</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045302" data-uri="chapter08.xhtml#P7000497027000000000000000045302">creates a new process group whose process group ID is 15213, and adds process 15213 to this new group.</p>
</section>

<section id="P7000497027000000000000000006AE7" data-uri="chapter08.xhtml#P7000497027000000000000000006AE7" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045303" data-uri="chapter08.xhtml#P7000497027000000000000000045303" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006AE9" title="760" data-uri="chapter08.xhtml#P7000497027000000000000000006AE9" epub:type="pagebreak"></span>Sending Signals with the <code id="P7000497027000000000000000045304" data-uri="chapter08.xhtml#P7000497027000000000000000045304" class="calibre55 pcalibre pcalibre1">/bin/kill</code> Program</h1></header>
<p id="P7000497027000000000000000045305" data-uri="chapter08.xhtml#P7000497027000000000000000045305" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000045306" data-uri="chapter08.xhtml#P7000497027000000000000000045306" class="pcalibre1 calibre8 pcalibre">/bin/kill</code> program sends an arbitrary signal to another process. For example, the command</p>
<pre id="P7000497027000000000000000045307" data-uri="chapter08.xhtml#P7000497027000000000000000045307" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045308" data-uri="chapter08.xhtml#P7000497027000000000000000045308" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">/bin/kill -9 15213</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045309" data-uri="chapter08.xhtml#P7000497027000000000000000045309">sends signal 9 (SIGKILL) to process 15213. A negative PID causes the signal to be sent to every process in process group PID. For example, the command</p>
<pre id="P700049702700000000000000004530A" data-uri="chapter08.xhtml#P700049702700000000000000004530A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004530B" data-uri="chapter08.xhtml#P700049702700000000000000004530B" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">/bin/kill -9 -15213</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004530C" data-uri="chapter08.xhtml#P700049702700000000000000004530C">sends a SIGKILL signal to every process in process group 15213. Note that we use the complete path <code id="P700049702700000000000000004530D" data-uri="chapter08.xhtml#P700049702700000000000000004530D" class="pcalibre1 calibre8 pcalibre">/bin/kill</code> here because some Unix shells have their own built-in <code id="P700049702700000000000000004530E" data-uri="chapter08.xhtml#P700049702700000000000000004530E" class="pcalibre1 calibre8 pcalibre">kill</code> command.</p>
</section>
<section id="P7000497027000000000000000006AF5" data-uri="chapter08.xhtml#P7000497027000000000000000006AF5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004530F" data-uri="chapter08.xhtml#P700049702700000000000000004530F" epub:type="title">Sending Signals from the Keyboard</h1></header>
<p id="P7000497027000000000000000045310" data-uri="chapter08.xhtml#P7000497027000000000000000045310" class="pcalibre1 pcalibre calibre2">Unix shells use the abstraction of a <i class="calibre5 pcalibre pcalibre1">job</i> to represent the processes that are created as a result of evaluating a single command line. At any point in time, there is at most one foreground job and zero or more background jobs. For example, typing</p>
<pre id="P7000497027000000000000000045311" data-uri="chapter08.xhtml#P7000497027000000000000000045311" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045312" data-uri="chapter08.xhtml#P7000497027000000000000000045312" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">ls</i> / <i class="calibre5 pcalibre pcalibre1">sort</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045313" data-uri="chapter08.xhtml#P7000497027000000000000000045313">creates a foreground job consisting of two processes connected by a Unix pipe: one running the <code id="P7000497027000000000000000045314" data-uri="chapter08.xhtml#P7000497027000000000000000045314" class="pcalibre1 calibre8 pcalibre">ls</code> program, the other running the <code id="P7000497027000000000000000045315" data-uri="chapter08.xhtml#P7000497027000000000000000045315" class="pcalibre1 calibre8 pcalibre">sort</code> program. The shell creates a separate process group for each job. Typically, the process group ID is taken from one of the parent processes in the job. For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006AFD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.28</span></a> shows a shell with one foreground job and two background jobs. The parent process in the foreground job has a PID of 20 and a process group ID of 20. The parent process has created two children, each of which are also members of process group 20.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006AFD" data-uri="chapter08.xhtml#P7000497027000000000000000006AFD">
<img alt="A diagram illustrates foreground and background process groups." id="P7000497027000000000000000045316" data-uri="P700049702700000000000000000B772" src="../images/p760-1.png" class="calibre255 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045317" data-uri="chapter08.xhtml#P7000497027000000000000000045317" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045318" data-uri="chapter08.xhtml#P7000497027000000000000000045318" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.28 </span>Foreground and background process groups.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025642" data-uri="chapter08.xhtml#P7000497027000000000000000025642">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045319" data-uri="chapter08.xhtml#P7000497027000000000000000045319" class="pcalibre1 pcalibre calibre2">A diagram shows lines from Shell (pid = 10, pgid = 10) leading to three boxes below:</p>
<ul id="P700049702700000000000000004531A" data-uri="chapter08.xhtml#P700049702700000000000000004531A" class="pcalibre calibre31 pcalibre1">
<li id="P700049702700000000000000004531B" data-uri="chapter08.xhtml#P700049702700000000000000004531B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004531C" data-uri="chapter08.xhtml#P700049702700000000000000004531C" class="pcalibre calibre3 pcalibre1">Foreground process group 20: a circle representing Foreground job (pid = 20, pgid = 20) leads to two circles representing child, one with pid = 21, pgid = 20, and the other pid = 22 and pgid = 20.</p></li>
<li id="P700049702700000000000000004531D" data-uri="chapter08.xhtml#P700049702700000000000000004531D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004531E" data-uri="chapter08.xhtml#P700049702700000000000000004531E" class="pcalibre calibre3 pcalibre1">Background process group 32: a circle representing Background job #1 (pid = 32, pgid = 32)</p></li>
<li id="P700049702700000000000000004531F" data-uri="chapter08.xhtml#P700049702700000000000000004531F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045320" data-uri="chapter08.xhtml#P7000497027000000000000000045320" class="pcalibre calibre3 pcalibre1">Background process group 40: a circle representing Background job #2 (pid = 40, pgid = 40)</p></li>
</ul>
</details>
</figcaption>
</figure>

<p id="P7000497027000000000000000045321" data-uri="chapter08.xhtml#P7000497027000000000000000045321" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006B02" title="761" data-uri="chapter08.xhtml#P7000497027000000000000000006B02" epub:type="pagebreak"></span>Typing Ctrl+C at the keyboard causes the kernel to send a SIGINT signal to every process in the foreground process group. In the default case, the result is to terminate the foreground job. Similarly, typing Ctrl+Z causes the kernel to send a SIGTSTP signal to every process in the foreground process group. In the default case, the result is to stop (suspend) the foreground job.</p>
</section>
<section id="P7000497027000000000000000006B03" data-uri="chapter08.xhtml#P7000497027000000000000000006B03" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045322" data-uri="chapter08.xhtml#P7000497027000000000000000045322" epub:type="title">Sending Signals with the <code id="P7000497027000000000000000045323" data-uri="chapter08.xhtml#P7000497027000000000000000045323" class="calibre55 pcalibre pcalibre1">kill</code> Function</h1></header>
<p id="P7000497027000000000000000045324" data-uri="chapter08.xhtml#P7000497027000000000000000045324" class="pcalibre1 pcalibre calibre2">Processes send signals to other processes (including themselves) by calling the <code id="P7000497027000000000000000045325" data-uri="chapter08.xhtml#P7000497027000000000000000045325" class="pcalibre1 calibre8 pcalibre">kill</code> function.</p>
<pre id="P7000497027000000000000000045326" data-uri="chapter08.xhtml#P7000497027000000000000000045326" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045327" data-uri="chapter08.xhtml#P7000497027000000000000000045327" class="calibre10 pcalibre pcalibre1">
#include &lt;sys/types.h&gt;
#include &lt;signal.h&gt;
int kill(pid_t pid, int sig);
				Returns: 0 if OK, -1 on error
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045328" data-uri="chapter08.xhtml#P7000497027000000000000000045328">If <code id="P7000497027000000000000000045329" data-uri="chapter08.xhtml#P7000497027000000000000000045329" class="pcalibre1 calibre8 pcalibre">pid</code> is greater than zero, then the <code id="P700049702700000000000000004532A" data-uri="chapter08.xhtml#P700049702700000000000000004532A" class="pcalibre1 calibre8 pcalibre">kill</code> function sends signal number <code id="P700049702700000000000000004532B" data-uri="chapter08.xhtml#P700049702700000000000000004532B" class="pcalibre1 calibre8 pcalibre">sig</code> to process <code id="P700049702700000000000000004532C" data-uri="chapter08.xhtml#P700049702700000000000000004532C" class="pcalibre1 calibre8 pcalibre">pid</code>. If <code id="P700049702700000000000000004532D" data-uri="chapter08.xhtml#P700049702700000000000000004532D" class="pcalibre1 calibre8 pcalibre">pid</code> is equal to zero, then <code id="P700049702700000000000000004532E" data-uri="chapter08.xhtml#P700049702700000000000000004532E" class="pcalibre1 calibre8 pcalibre">kill</code> sends signal <code id="P700049702700000000000000004532F" data-uri="chapter08.xhtml#P700049702700000000000000004532F" class="pcalibre1 calibre8 pcalibre">sig</code> to every process in the process group of the calling process, including the calling process itself. If <code id="P7000497027000000000000000045330" data-uri="chapter08.xhtml#P7000497027000000000000000045330" class="pcalibre1 calibre8 pcalibre">pid</code> is less than zero, then <code id="P7000497027000000000000000045331" data-uri="chapter08.xhtml#P7000497027000000000000000045331" class="pcalibre1 calibre8 pcalibre">kill</code> sends signal <code id="P7000497027000000000000000045332" data-uri="chapter08.xhtml#P7000497027000000000000000045332" class="pcalibre1 calibre8 pcalibre">sig</code> to every process in process group <code id="P7000497027000000000000000045333" data-uri="chapter08.xhtml#P7000497027000000000000000045333" class="pcalibre1 calibre8 pcalibre">|pid|</code> (the absolute value of <code id="P7000497027000000000000000045334" data-uri="chapter08.xhtml#P7000497027000000000000000045334" class="pcalibre1 calibre8 pcalibre">pid</code>). <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006B18"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.29</span></a> shows an example of a parent that uses the <code id="P7000497027000000000000000045335" data-uri="chapter08.xhtml#P7000497027000000000000000045335" class="pcalibre1 calibre8 pcalibre">kill</code> function to send a SIGKILL signal to its child.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006B18" data-uri="chapter08.xhtml#P7000497027000000000000000006B18">
<p id="P7000497027000000000000000045336" data-uri="chapter08.xhtml#P7000497027000000000000000045336" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/kill.c</i></p>
<pre id="P7000497027000000000000000045337" data-uri="chapter08.xhtml#P7000497027000000000000000045337" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045338" data-uri="chapter08.xhtml#P7000497027000000000000000045338" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main()
4	{
5		pid_t pid;
6	
7		/* Child sleeps until SIGKILL signal received, then dies */
8		if ((pid = Fork()) == 0) {
9			Pause(); /* Wait for a signal to arrive */
10			printf("control should never reach here!\n");
11			exit(0);
12		}
13	
14		/* Parent sends a SIGKILL signal to a child */
15		Kill(pid, SIGKILL);
16		exit(0);
17	}
</code>
</pre>
<p id="P7000497027000000000000000045339" data-uri="chapter08.xhtml#P7000497027000000000000000045339" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/kill.c</i></p>
<figcaption id="P700049702700000000000000004533A" data-uri="chapter08.xhtml#P700049702700000000000000004533A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004533B" data-uri="chapter08.xhtml#P700049702700000000000000004533B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.29 </span>Using the <code id="P700049702700000000000000004533C" data-uri="chapter08.xhtml#P700049702700000000000000004533C" class="pcalibre1 calibre8 pcalibre">kill</code> function to send a signal to a child.</h1></header>

</figcaption>
</figure>
</section>

<section id="P7000497027000000000000000006B20" data-uri="chapter08.xhtml#P7000497027000000000000000006B20" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004533D" data-uri="chapter08.xhtml#P700049702700000000000000004533D" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006B22" title="762" data-uri="chapter08.xhtml#P7000497027000000000000000006B22" epub:type="pagebreak"></span>Sending Signals with the <code id="P700049702700000000000000004533E" data-uri="chapter08.xhtml#P700049702700000000000000004533E" class="calibre55 pcalibre pcalibre1">alarm</code> Function</h1></header>
<p id="P700049702700000000000000004533F" data-uri="chapter08.xhtml#P700049702700000000000000004533F" class="pcalibre1 pcalibre calibre2">A process can send SIGALRM signals to itself by calling the <code id="P7000497027000000000000000045340" data-uri="chapter08.xhtml#P7000497027000000000000000045340" class="pcalibre1 calibre8 pcalibre">alarm</code> function.</p>
<pre id="P7000497027000000000000000045341" data-uri="chapter08.xhtml#P7000497027000000000000000045341" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045342" data-uri="chapter08.xhtml#P7000497027000000000000000045342" class="calibre10 pcalibre pcalibre1">
#include &lt;unistd.h&gt;
unsigned int alarm(unsigned int secs);
				Returns: remaining seconds of previous alarm, or 0 if no previous alarm
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045343" data-uri="chapter08.xhtml#P7000497027000000000000000045343">The <code id="P7000497027000000000000000045344" data-uri="chapter08.xhtml#P7000497027000000000000000045344" class="pcalibre1 calibre8 pcalibre">alarm</code> function arranges for the kernel to send a SIGALRM signal to the calling process in <code id="P7000497027000000000000000045345" data-uri="chapter08.xhtml#P7000497027000000000000000045345" class="pcalibre1 calibre8 pcalibre">secs</code> seconds. If <code id="P7000497027000000000000000045346" data-uri="chapter08.xhtml#P7000497027000000000000000045346" class="pcalibre1 calibre8 pcalibre">secs</code> is 0, then no new alarm is scheduled. In any event, the call to <code id="P7000497027000000000000000045347" data-uri="chapter08.xhtml#P7000497027000000000000000045347" class="pcalibre1 calibre8 pcalibre">alarm</code> cancels any pending alarms and returns the number of seconds remaining until any pending alarm was due to be delivered (had not this call to <code id="P7000497027000000000000000045348" data-uri="chapter08.xhtml#P7000497027000000000000000045348" class="pcalibre1 calibre8 pcalibre">alarm</code> canceled it), or 0 if there were no pending alarms.</p>
</section>
</section>

<section id="P7000497027000000000000000006B2E" data-uri="chapter08.xhtml#P7000497027000000000000000006B2E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000045349" data-uri="chapter08.xhtml#P7000497027000000000000000045349" epub:type="title"><span class="pcalibre label pcalibre1">8.5.3  </span>Receiving Signals</h1></header>
<p id="P700049702700000000000000004534A" data-uri="chapter08.xhtml#P700049702700000000000000004534A" class="pcalibre1 pcalibre calibre2">When the kernel switches a process <var class="calibre5 pcalibre pcalibre1">p</var> from kernel mode to user mode (e.g., returning from a system call or completing a context switch), it checks the set of unblocked pending signals (<code id="P700049702700000000000000004534B" data-uri="chapter08.xhtml#P700049702700000000000000004534B" class="pcalibre1 calibre8 pcalibre">pending &amp; ~blocked</code>) for <i class="calibre5 pcalibre pcalibre1">p.</i> If this set is empty (the usual case), then the kernel passes control to the next instruction (<var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">next</sub>) in the logical control flow of <i class="calibre5 pcalibre pcalibre1">p.</i> However, if the set is nonempty, then the kernel chooses some signal <var class="calibre5 pcalibre pcalibre1">k</var> in the set (typically the smallest <var class="calibre5 pcalibre pcalibre1">k</var>) and forces <var class="calibre5 pcalibre pcalibre1">p</var> to <i class="calibre5 pcalibre pcalibre1">receive</i> signal <i class="calibre5 pcalibre pcalibre1">k.</i> The receipt of the signal triggers some <i class="calibre5 pcalibre pcalibre1">action</i> by the process. Once the process completes the action, then control passes back to the next instruction (<var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">next</sub>) in the logical control flow of <i class="calibre5 pcalibre pcalibre1">p.</i> Each signal type has a predefined <i class="calibre5 pcalibre pcalibre1">default action</i>, which is one of the following:</p>
<ul id="P700049702700000000000000004534C" data-uri="chapter08.xhtml#P700049702700000000000000004534C" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000004534D" data-uri="chapter08.xhtml#P700049702700000000000000004534D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004534E" data-uri="chapter08.xhtml#P700049702700000000000000004534E" class="pcalibre calibre3 pcalibre1">The process terminates.</p></li>
<li id="P700049702700000000000000004534F" data-uri="chapter08.xhtml#P700049702700000000000000004534F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045350" data-uri="chapter08.xhtml#P7000497027000000000000000045350" class="pcalibre calibre3 pcalibre1">The process terminates and dumps core.</p></li>
<li id="P7000497027000000000000000045351" data-uri="chapter08.xhtml#P7000497027000000000000000045351" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045352" data-uri="chapter08.xhtml#P7000497027000000000000000045352" class="pcalibre calibre3 pcalibre1">The process stops (suspends) until restarted by a SIGCONT signal.</p></li>
<li id="P7000497027000000000000000045353" data-uri="chapter08.xhtml#P7000497027000000000000000045353" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045354" data-uri="chapter08.xhtml#P7000497027000000000000000045354" class="pcalibre calibre3 pcalibre1">The process ignores the signal.</p></li>
</ul>
<p id="P7000497027000000000000000045355" data-uri="chapter08.xhtml#P7000497027000000000000000045355" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006A30"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.26 </span></a>shows the default actions associated with each type of signal. For example, the default action for the receipt of a SIGKILL is to terminate the receiving process. On the other hand, the default action for the receipt of a SIGCHLD is to ignore the signal. A process can modify the default action associated with a signal by using the <code id="P7000497027000000000000000045356" data-uri="chapter08.xhtml#P7000497027000000000000000045356" class="pcalibre1 calibre8 pcalibre">signal</code> function. The only exceptions are SIGSTOP and SIGKILL, whose default actions cannot be changed.</p>
<pre id="P7000497027000000000000000045357" data-uri="chapter08.xhtml#P7000497027000000000000000045357" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045358" data-uri="chapter08.xhtml#P7000497027000000000000000045358" class="calibre10 pcalibre pcalibre1">
#include &lt;signal.h&gt;
typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
				Returns: pointer to previous handler if OK, SIG_ERR on error (does not set errno)
</code>
</pre>

<p id="P7000497027000000000000000045359" data-uri="chapter08.xhtml#P7000497027000000000000000045359" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006B40" title="763" data-uri="chapter08.xhtml#P7000497027000000000000000006B40" epub:type="pagebreak"></span>The <code id="P700049702700000000000000004535A" data-uri="chapter08.xhtml#P700049702700000000000000004535A" class="pcalibre1 calibre8 pcalibre">signal</code> function can change the action associated with a signal <code id="P700049702700000000000000004535B" data-uri="chapter08.xhtml#P700049702700000000000000004535B" class="pcalibre1 calibre8 pcalibre">signum</code> in one of three ways:</p>
<ul id="P700049702700000000000000004535C" data-uri="chapter08.xhtml#P700049702700000000000000004535C" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000004535D" data-uri="chapter08.xhtml#P700049702700000000000000004535D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004535E" data-uri="chapter08.xhtml#P700049702700000000000000004535E" class="pcalibre calibre3 pcalibre1">If <code id="P700049702700000000000000004535F" data-uri="chapter08.xhtml#P700049702700000000000000004535F" class="pcalibre1 calibre8 pcalibre">handler</code> is SIG_IGN, then signals of type <code id="P7000497027000000000000000045360" data-uri="chapter08.xhtml#P7000497027000000000000000045360" class="pcalibre1 calibre8 pcalibre">signum</code> are ignored.</p></li>
<li id="P7000497027000000000000000045361" data-uri="chapter08.xhtml#P7000497027000000000000000045361" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045362" data-uri="chapter08.xhtml#P7000497027000000000000000045362" class="pcalibre calibre3 pcalibre1">If <code id="P7000497027000000000000000045363" data-uri="chapter08.xhtml#P7000497027000000000000000045363" class="pcalibre1 calibre8 pcalibre">handler</code> is SIG_DFL, then the action for signals of type <code id="P7000497027000000000000000045364" data-uri="chapter08.xhtml#P7000497027000000000000000045364" class="pcalibre1 calibre8 pcalibre">signum</code> reverts to the default action.</p></li>
<li id="P7000497027000000000000000045365" data-uri="chapter08.xhtml#P7000497027000000000000000045365" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045366" data-uri="chapter08.xhtml#P7000497027000000000000000045366" class="pcalibre calibre3 pcalibre1">Otherwise, <code id="P7000497027000000000000000045367" data-uri="chapter08.xhtml#P7000497027000000000000000045367" class="pcalibre1 calibre8 pcalibre">handler</code> is the address of a user-defined function, called a <i class="calibre5 pcalibre pcalibre1">signal handler</i>, that will be called whenever the process receives a signal of type <code id="P7000497027000000000000000045368" data-uri="chapter08.xhtml#P7000497027000000000000000045368" class="pcalibre1 calibre8 pcalibre">signum</code>. Changing the default action by passing the address of a handler to the <code id="P7000497027000000000000000045369" data-uri="chapter08.xhtml#P7000497027000000000000000045369" class="pcalibre1 calibre8 pcalibre">signal</code> function is known as <i class="calibre5 pcalibre pcalibre1">installing the handler.</i> The invocation of the handler is called <i class="calibre5 pcalibre pcalibre1">catching the signal.</i> The execution of the handler is referred to as <i class="calibre5 pcalibre pcalibre1">handling the signal.</i></p></li>
</ul>
<p id="P700049702700000000000000004536A" data-uri="chapter08.xhtml#P700049702700000000000000004536A" class="pcalibre1 pcalibre calibre2">When a process catches a signal of type <var class="calibre5 pcalibre pcalibre1">k</var>, the handler installed for signal <var class="calibre5 pcalibre pcalibre1">k</var> is invoked with a single integer argument set to <i class="calibre5 pcalibre pcalibre1">k.</i> This argument allows the same handler function to catch different types of signals.</p>
<p id="P700049702700000000000000004536B" data-uri="chapter08.xhtml#P700049702700000000000000004536B" class="pcalibre1 pcalibre calibre2">When the handler executes its <code id="P700049702700000000000000004536C" data-uri="chapter08.xhtml#P700049702700000000000000004536C" class="pcalibre1 calibre8 pcalibre">return</code> statement, control (usually) passes back to the instruction in the control flow where the process was interrupted by the receipt of the signal. We say “usually” because in some systems, interrupted system calls return immediately with an error.</p>
<p id="P700049702700000000000000004536D" data-uri="chapter08.xhtml#P700049702700000000000000004536D" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006B55"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.30</span></a> shows a program that catches the SIGINT signal that is sent whenever the user types Ctrl+C at the keyboard. The default action for SIGINT</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006B55" data-uri="chapter08.xhtml#P7000497027000000000000000006B55">
<p id="P700049702700000000000000004536E" data-uri="chapter08.xhtml#P700049702700000000000000004536E" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/sigint.c</i></p>
<pre id="P700049702700000000000000004536F" data-uri="chapter08.xhtml#P700049702700000000000000004536F" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045370" data-uri="chapter08.xhtml#P7000497027000000000000000045370" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	void sigint_handler(int sig) /* SIGINT handler */
4	{
5		printf("Caught SIGINT!\n");
6		exit(0);
7	}
8	
9	int main()
10	{
11		/* Install the SIGINT handler */
12		if (signal(SIGINT, sigint_handler) == SIG_ERR)
13			unix_error("signal error");
14	
15		pause(); /* Wait for the receipt of a signal */
16	
17		return 0;
18	}
</code>
</pre>
<p id="P7000497027000000000000000045371" data-uri="chapter08.xhtml#P7000497027000000000000000045371" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/sigint.c</i></p>
<figcaption id="P7000497027000000000000000045372" data-uri="chapter08.xhtml#P7000497027000000000000000045372" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045373" data-uri="chapter08.xhtml#P7000497027000000000000000045373" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.30 </span>A program that uses a signal handler to catch a SIGINT signal.</h1></header>

</figcaption>
</figure>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006B5C" data-uri="chapter08.xhtml#P7000497027000000000000000006B5C">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006B5D" title="764" data-uri="chapter08.xhtml#P7000497027000000000000000006B5D" epub:type="pagebreak"></span><img alt="A diagram illustrates steps when handlers are interrupted by other handlers." id="P7000497027000000000000000045374" data-uri="P700049702700000000000000000B773" src="../images/p764-1.png" class="calibre256 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000045375" data-uri="chapter08.xhtml#P7000497027000000000000000045375" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045376" data-uri="chapter08.xhtml#P7000497027000000000000000045376" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.31 </span>Handlers can be interrupted by other handlers.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000256A1" data-uri="chapter08.xhtml#P70004970270000000000000000256A1">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000045377" data-uri="chapter08.xhtml#P7000497027000000000000000045377" class="pcalibre1 pcalibre calibre2">The steps in the diagram are summarized below.</p>
<ol id="P7000497027000000000000000045378" data-uri="chapter08.xhtml#P7000497027000000000000000045378" class="pcalibre1 pcalibre calibre45">
<li id="P7000497027000000000000000045379" data-uri="chapter08.xhtml#P7000497027000000000000000045379" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004537A" data-uri="chapter08.xhtml#P700049702700000000000000004537A" class="pcalibre calibre3 pcalibre1">Program catches signal s (arrow under main program pointing down to I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P700049702700000000000000004537B" data-uri="chapter08.xhtml#P700049702700000000000000004537B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004537C" data-uri="chapter08.xhtml#P700049702700000000000000004537C" class="pcalibre calibre3 pcalibre1">Control passes to handler S (arrow pointing from I<sub class="pcalibre1 calibre47 pcalibre">curr</sub> to under Handler S)</p></li>
<li id="P700049702700000000000000004537D" data-uri="chapter08.xhtml#P700049702700000000000000004537D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004537E" data-uri="chapter08.xhtml#P700049702700000000000000004537E" class="pcalibre calibre3 pcalibre1">Program catches signal t (arrow pointing down)</p></li>
<li id="P700049702700000000000000004537F" data-uri="chapter08.xhtml#P700049702700000000000000004537F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045380" data-uri="chapter08.xhtml#P7000497027000000000000000045380" class="pcalibre calibre3 pcalibre1">Control passes to handler T (arrow from under Handler S to under Handler T, where another arrow points down)</p></li>
<li id="P7000497027000000000000000045381" data-uri="chapter08.xhtml#P7000497027000000000000000045381" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045382" data-uri="chapter08.xhtml#P7000497027000000000000000045382" class="pcalibre calibre3 pcalibre1">Handler T returns to handler S (arrow back to under Handler S, where another arrow points down)</p></li>
<li id="P7000497027000000000000000045383" data-uri="chapter08.xhtml#P7000497027000000000000000045383" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045384" data-uri="chapter08.xhtml#P7000497027000000000000000045384" class="pcalibre calibre3 pcalibre1">Handler S returns to main program (arrow to I<sub class="pcalibre1 calibre47 pcalibre">next</sub> under I<sub class="pcalibre1 calibre47 pcalibre">curr</sub>)</p></li>
<li id="P7000497027000000000000000045385" data-uri="chapter08.xhtml#P7000497027000000000000000045385" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045386" data-uri="chapter08.xhtml#P7000497027000000000000000045386" class="pcalibre calibre3 pcalibre1">Main program resumes (arrow down from I<sub class="pcalibre1 calibre47 pcalibre">next</sub>)</p></li>
</ol>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045387" data-uri="chapter08.xhtml#P7000497027000000000000000045387">is to immediately terminate the process. In this example, we modify the default behavior to catch the signal, print a message, and then terminate the process.</p>
<p id="P7000497027000000000000000045388" data-uri="chapter08.xhtml#P7000497027000000000000000045388" class="pcalibre1 pcalibre calibre2">Signal handlers can be interrupted by other handlers, as shown in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.31</span>. In this example, the main program catches signal <var class="calibre5 pcalibre pcalibre1">s</var>, which interrupts the main program and transfers control to handler <i class="calibre5 pcalibre pcalibre1">S.</i> While <var class="calibre5 pcalibre pcalibre1">S</var> is running, the program catches signal <var class="calibre5 pcalibre pcalibre1">t</var> ≠ <var class="calibre5 pcalibre pcalibre1">s</var>, which interrupts <var class="calibre5 pcalibre pcalibre1">S</var> and transfers control to handler <i class="calibre5 pcalibre pcalibre1">T.</i> When <var class="calibre5 pcalibre pcalibre1">T</var> returns, <var class="calibre5 pcalibre pcalibre1">S</var> resumes where it was interrupted. Eventually, <var class="calibre5 pcalibre pcalibre1">S</var> returns, transferring control back to the main program, which resumes where it left off.</p>
<section id="P7000497027000000000000000006B63" data-uri="chapter08.xhtml#P7000497027000000000000000006B63" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045389" data-uri="chapter08.xhtml#P7000497027000000000000000045389" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">8.7 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FDB">798</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004538A" data-uri="chapter08.xhtml#P700049702700000000000000004538A">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004538B" data-uri="chapter08.xhtml#P700049702700000000000000004538B"><div class="edition pcalibre pcalibre1" id="P700049702700000000000000004538C" data-uri="chapter08.xhtml#P700049702700000000000000004538C"><p id="P700049702700000000000000004538D" data-uri="chapter08.xhtml#P700049702700000000000000004538D" class="pcalibre calibre3 pcalibre1">Write a program called <code id="P700049702700000000000000004538E" data-uri="chapter08.xhtml#P700049702700000000000000004538E" class="pcalibre1 calibre8 pcalibre">snooze</code> that takes a single command-line argument, calls the <code id="P700049702700000000000000004538F" data-uri="chapter08.xhtml#P700049702700000000000000004538F" class="pcalibre1 calibre8 pcalibre">snooze</code> function from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000685D.xhtml#P7000497027000000000000000006993"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">8.5</span></a> with this argument, and then terminates. Write your program so that the user can interrupt the <code id="P7000497027000000000000000045390" data-uri="chapter08.xhtml#P7000497027000000000000000045390" class="pcalibre1 calibre8 pcalibre">snooze</code> function by typing Ctrl+C at the keyboard. For example:</p></div>
<pre id="P7000497027000000000000000045391" data-uri="chapter08.xhtml#P7000497027000000000000000045391" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045392" data-uri="chapter08.xhtml#P7000497027000000000000000045392" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./snooze 5</i>
<i class="calibre5 pcalibre pcalibre1">CTRL+C</i>		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">User hits Crtl+C after 3 seconds</i></b>
Slept for 3 of 5 secs.
linux&gt;
</code>
</pre>
</li>
</ol>
</section>
</section>
<section id="P7000497027000000000000000006B6E" data-uri="chapter08.xhtml#P7000497027000000000000000006B6E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000045393" data-uri="chapter08.xhtml#P7000497027000000000000000045393" epub:type="title"><span class="pcalibre label pcalibre1">8.5.4  </span>Blocking and Unblocking Signals</h1></header>
<p id="P7000497027000000000000000045394" data-uri="chapter08.xhtml#P7000497027000000000000000045394" class="pcalibre1 pcalibre calibre2">Linux provides implicit and explicit mechanisms for blocking signals:</p>

<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000045395" data-uri="chapter08.xhtml#P7000497027000000000000000045395">
<li id="P7000497027000000000000000045396" data-uri="chapter08.xhtml#P7000497027000000000000000045396" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045397" data-uri="chapter08.xhtml#P7000497027000000000000000045397" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Implicit blocking mechanism. </span>By default, the kernel blocks any pending signals of the type currently being processed by a handler. For example, in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.31</span>, suppose the program has caught signal <var class="calibre5 pcalibre pcalibre1">s</var> and is currently running handler <i class="calibre5 pcalibre pcalibre1">S.</i> If another signal <var class="calibre5 pcalibre pcalibre1">s</var> is sent to the process, then <var class="calibre5 pcalibre pcalibre1">s</var> will become pending but will not be received until after handler <var class="calibre5 pcalibre pcalibre1">S</var> returns.</p></li>
<li id="P7000497027000000000000000045398" data-uri="chapter08.xhtml#P7000497027000000000000000045398" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045399" data-uri="chapter08.xhtml#P7000497027000000000000000045399" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Explicit blocking mechanism. </span>Applications can explicitly block and unblock selected signals using the <code id="P700049702700000000000000004539A" data-uri="chapter08.xhtml#P700049702700000000000000004539A" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> function and its helpers.</p></li>
</ul>
<pre id="P700049702700000000000000004539B" data-uri="chapter08.xhtml#P700049702700000000000000004539B" class="calibre9 pcalibre pcalibre1">
<code id="P700049702700000000000000004539C" data-uri="chapter08.xhtml#P700049702700000000000000004539C" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006B79" title="765" data-uri="chapter08.xhtml#P7000497027000000000000000006B79" epub:type="pagebreak"></span>#include &lt;signal.h&gt;

int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signum);
int sigdelset(sigset_t *set, int signum);
				Returns: 0 if OK, -1 on error
int sigismember(const sigset_t *set, int signum);
				Returns: 1 if member, 0 if not, -1 on error
</code>
</pre>
<p id="P700049702700000000000000004539D" data-uri="chapter08.xhtml#P700049702700000000000000004539D" class="pcalibre1 pcalibre calibre2">The <code id="P700049702700000000000000004539E" data-uri="chapter08.xhtml#P700049702700000000000000004539E" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> function changes the set of currently <code id="P700049702700000000000000004539F" data-uri="chapter08.xhtml#P700049702700000000000000004539F" class="pcalibre1 calibre8 pcalibre">blocked</code> signals (the <code id="P70004970270000000000000000453A0" data-uri="chapter08.xhtml#P70004970270000000000000000453A0" class="pcalibre1 calibre8 pcalibre">blocked</code> bit vector described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006AB9"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.5.1</span></a>). The specific behavior depends on the value of <code id="P70004970270000000000000000453A1" data-uri="chapter08.xhtml#P70004970270000000000000000453A1" class="pcalibre1 calibre8 pcalibre">how</code>:</p>
<blockquote id="P70004970270000000000000000453A2" data-uri="chapter08.xhtml#P70004970270000000000000000453A2" class="pcalibre7 pcalibre8 calibre52">
<p id="P70004970270000000000000000453A3" data-uri="chapter08.xhtml#P70004970270000000000000000453A3" class="pcalibre1 pcalibre calibre2">SIG_BLOCK. Add the signals in <code id="P70004970270000000000000000453A4" data-uri="chapter08.xhtml#P70004970270000000000000000453A4" class="calibre10 pcalibre pcalibre1">set</code> to blocked (<code id="P70004970270000000000000000453A5" data-uri="chapter08.xhtml#P70004970270000000000000000453A5" class="calibre10 pcalibre pcalibre1">blocked = blocked	|	set</code>).</p>
<p id="P70004970270000000000000000453A6" data-uri="chapter08.xhtml#P70004970270000000000000000453A6" class="pcalibre1 pcalibre calibre2">SIG_UNBLOCK. Remove the signals in <code id="P70004970270000000000000000453A7" data-uri="chapter08.xhtml#P70004970270000000000000000453A7" class="calibre10 pcalibre pcalibre1">set</code> from <code id="P70004970270000000000000000453A8" data-uri="chapter08.xhtml#P70004970270000000000000000453A8" class="calibre10 pcalibre pcalibre1">blocked (blocked = blocked &amp; -set)</code>.</p>
<p id="P70004970270000000000000000453A9" data-uri="chapter08.xhtml#P70004970270000000000000000453A9" class="pcalibre calibre3 pcalibre1">SIG_SETMASK. <code id="P70004970270000000000000000453AA" data-uri="chapter08.xhtml#P70004970270000000000000000453AA" class="calibre10 pcalibre pcalibre1">blocked = set.</code></p>
</blockquote>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000453AB" data-uri="chapter08.xhtml#P70004970270000000000000000453AB">If <code id="P70004970270000000000000000453AC" data-uri="chapter08.xhtml#P70004970270000000000000000453AC" class="pcalibre1 calibre8 pcalibre">oldset</code> is non-NULL, the previous value of the <code id="P70004970270000000000000000453AD" data-uri="chapter08.xhtml#P70004970270000000000000000453AD" class="pcalibre1 calibre8 pcalibre">blocked</code> bit vector is stored in <code id="P70004970270000000000000000453AE" data-uri="chapter08.xhtml#P70004970270000000000000000453AE" class="pcalibre1 calibre8 pcalibre">oldset</code>.</p>
<p id="P70004970270000000000000000453AF" data-uri="chapter08.xhtml#P70004970270000000000000000453AF" class="pcalibre1 pcalibre calibre2">Signal sets such as <code id="P70004970270000000000000000453B0" data-uri="chapter08.xhtml#P70004970270000000000000000453B0" class="pcalibre1 calibre8 pcalibre">set</code> are manipulated using the following functions: The <code id="P70004970270000000000000000453B1" data-uri="chapter08.xhtml#P70004970270000000000000000453B1" class="pcalibre1 calibre8 pcalibre">sigemptyset</code> initializes <code id="P70004970270000000000000000453B2" data-uri="chapter08.xhtml#P70004970270000000000000000453B2" class="pcalibre1 calibre8 pcalibre">set</code> to the empty set. The <code id="P70004970270000000000000000453B3" data-uri="chapter08.xhtml#P70004970270000000000000000453B3" class="pcalibre1 calibre8 pcalibre">sigfillset</code> function adds every signal to <code id="P70004970270000000000000000453B4" data-uri="chapter08.xhtml#P70004970270000000000000000453B4" class="pcalibre1 calibre8 pcalibre">set</code>. The <code id="P70004970270000000000000000453B5" data-uri="chapter08.xhtml#P70004970270000000000000000453B5" class="pcalibre1 calibre8 pcalibre">sigaddset</code> function adds <code id="P70004970270000000000000000453B6" data-uri="chapter08.xhtml#P70004970270000000000000000453B6" class="pcalibre1 calibre8 pcalibre">signum</code> to <code id="P70004970270000000000000000453B7" data-uri="chapter08.xhtml#P70004970270000000000000000453B7" class="pcalibre1 calibre8 pcalibre">set, sigdelset</code> deletes <code id="P70004970270000000000000000453B8" data-uri="chapter08.xhtml#P70004970270000000000000000453B8" class="pcalibre1 calibre8 pcalibre">signum</code> from <code id="P70004970270000000000000000453B9" data-uri="chapter08.xhtml#P70004970270000000000000000453B9" class="pcalibre1 calibre8 pcalibre">set</code>, and <code id="P70004970270000000000000000453BA" data-uri="chapter08.xhtml#P70004970270000000000000000453BA" class="pcalibre1 calibre8 pcalibre">sigismember</code> returns 1 if <code id="P70004970270000000000000000453BB" data-uri="chapter08.xhtml#P70004970270000000000000000453BB" class="pcalibre1 calibre8 pcalibre">signum</code> is a member of <code id="P70004970270000000000000000453BC" data-uri="chapter08.xhtml#P70004970270000000000000000453BC" class="pcalibre1 calibre8 pcalibre">set</code>, and 0 if not.</p>

<p id="P70004970270000000000000000453BD" data-uri="chapter08.xhtml#P70004970270000000000000000453BD" class="pcalibre1 pcalibre calibre2">For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006B9C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.32</span></a> shows how you would use <code id="P70004970270000000000000000453BE" data-uri="chapter08.xhtml#P70004970270000000000000000453BE" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> to temporarily block the receipt of SIGINT signals.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006B9C" data-uri="chapter08.xhtml#P7000497027000000000000000006B9C">
<pre id="P70004970270000000000000000453BF" data-uri="chapter08.xhtml#P70004970270000000000000000453BF" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000453C0" data-uri="chapter08.xhtml#P70004970270000000000000000453C0" class="calibre10 pcalibre pcalibre1">
1	sigset_t mask, prev_mask;
2	
3	Sigemptyset(&amp;mask);
4	Sigaddset(&amp;mask, SIGINT);
5	
6	/* Block SIGINT and save previous blocked set */
7	Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask);
8	⋮ // <i class="calibre5 pcalibre pcalibre1">Code region that will not be interrupted by SIGINT</i>
9	/* Restore previous blocked set, unblocking SIGINT */
10	Sigprocmask(SIG_SETMASK, &amp;prev_mask, NULL);
11	
</code>
</pre>
<figcaption id="P70004970270000000000000000453C1" data-uri="chapter08.xhtml#P70004970270000000000000000453C1" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000453C2" data-uri="chapter08.xhtml#P70004970270000000000000000453C2" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.32 </span>Temporarily blocking a signal from being received.</h1></header>

</figcaption>
</figure>
</section>

<section id="P7000497027000000000000000006BA1" data-uri="chapter08.xhtml#P7000497027000000000000000006BA1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000453C3" data-uri="chapter08.xhtml#P70004970270000000000000000453C3" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006BA3" title="766" data-uri="chapter08.xhtml#P7000497027000000000000000006BA3" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">8.5.5  </span>Writing Signal Handlers</h1></header>
<p id="P70004970270000000000000000453C4" data-uri="chapter08.xhtml#P70004970270000000000000000453C4" class="pcalibre1 pcalibre calibre2">Signal handling is one of the thornier aspects of Linux system-level programming. Handlers have several attributes that make them difficult to reason about: (1) Handlers run concurrently with the main program and share the same global variables, and thus can interfere with the main program and with other handlers. (2) The rules for how and when signals are received is often counterintuitive. (3) Different systems can have different signal-handling semantics.</p>
<p id="P70004970270000000000000000453C5" data-uri="chapter08.xhtml#P70004970270000000000000000453C5" class="pcalibre1 pcalibre calibre2">In this section, we address these issues and give you some basic guidelines for writing safe, correct, and portable signal handlers.</p>
<section id="P7000497027000000000000000006BA6" data-uri="chapter08.xhtml#P7000497027000000000000000006BA6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000453C6" data-uri="chapter08.xhtml#P70004970270000000000000000453C6" epub:type="title">Safe Signal Handling</h1></header>
<p id="P70004970270000000000000000453C7" data-uri="chapter08.xhtml#P70004970270000000000000000453C7" class="pcalibre1 pcalibre calibre2">Signal handlers are tricky because they can run concurrently with the main program and with each other, as we saw in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.31</span>. If a handler and the main program access the same global data structure concurrently, then the results can be unpredictable and often fatal.</p>
<p id="P70004970270000000000000000453C8" data-uri="chapter08.xhtml#P70004970270000000000000000453C8" class="pcalibre1 pcalibre calibre2">We will explore concurrent programming in detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a>. Our aim here is to give you some conservative guidelines for writing handlers that are safe to run concurrently. If you ignore these guidelines, you run the risk of introducing subtle concurrency errors. With such errors, your program works correctly most of the time. However, when it fails, it fails in unpredictable and unrepeatable ways that are horrendously difficult to debug. Forewarned is forearmed!</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000453C9" data-uri="chapter08.xhtml#P70004970270000000000000000453C9">
<li id="P70004970270000000000000000453CA" data-uri="chapter08.xhtml#P70004970270000000000000000453CA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000453CB" data-uri="chapter08.xhtml#P70004970270000000000000000453CB" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">G0. Keep handlers as simple as possible. </span>The best way to avoid trouble is to keep your handlers as small and simple as possible. For example, the handler might simply set a global flag and return immediately; all processing associated with the receipt of the signal is performed by the main program, which periodically checks (and resets) the flag.</p></li>
<li id="P70004970270000000000000000453CC" data-uri="chapter08.xhtml#P70004970270000000000000000453CC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000453CD" data-uri="chapter08.xhtml#P70004970270000000000000000453CD" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">G1. Call only async-signal-safe functions in your handlers. </span>A function that is <i class="calibre5 pcalibre pcalibre1">async-signal-safe</i>, or simply <i class="calibre5 pcalibre pcalibre1">safe</i>, has the property that it can be safely called from a signal handler, either because it is <i class="calibre5 pcalibre pcalibre1">reentrant</i> (e.g., accesses only local variables; see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008577.xhtml#P70004970270000000000000000085BA"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">12.7.2</span></a>), or because it cannot be interrupted by a signal handler. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006BB5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.33 </span></a>lists the system-level functions that Linux guarantees to be safe. Notice that many popular functions, such as <code id="P70004970270000000000000000453CE" data-uri="chapter08.xhtml#P70004970270000000000000000453CE" class="pcalibre1 calibre8 pcalibre">printf, sprintf, malloc</code>, and <code id="P70004970270000000000000000453CF" data-uri="chapter08.xhtml#P70004970270000000000000000453CF" class="pcalibre1 calibre8 pcalibre">exit</code>, are <i class="calibre5 pcalibre pcalibre1">not</i> on this list.</p>
<p id="P70004970270000000000000000453D0" data-uri="chapter08.xhtml#P70004970270000000000000000453D0" class="calibre15 pcalibre pcalibre1">The only safe way to generate output from a signal handler is to use the <code id="P70004970270000000000000000453D1" data-uri="chapter08.xhtml#P70004970270000000000000000453D1" class="pcalibre1 calibre8 pcalibre">write</code> function (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007899.xhtml#P7000497027000000000000000007899"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">10.1</span></a>). In particular, calling <code id="P70004970270000000000000000453D2" data-uri="chapter08.xhtml#P70004970270000000000000000453D2" class="pcalibre1 calibre8 pcalibre">printf</code> or <code id="P70004970270000000000000000453D3" data-uri="chapter08.xhtml#P70004970270000000000000000453D3" class="pcalibre1 calibre8 pcalibre">sprintf</code> is unsafe. To work around this unfortunate restriction, we have developed some safe functions, called the S<span class="smallcaps pcalibre pcalibre1">io</span> (Safe I/O) package, that you can use to print simple messages from signal handlers.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006BB5" data-uri="chapter08.xhtml#P7000497027000000000000000006BB5">

<table class="pcalibre largetable pcalibre1" id="P70004970270000000000000000453D4" data-uri="chapter08.xhtml#P70004970270000000000000000453D4">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453D5" data-uri="chapter08.xhtml#P70004970270000000000000000453D5" class="calibre20 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006BB8" title="767" data-uri="chapter08.xhtml#P7000497027000000000000000006BB8" epub:type="pagebreak"></span><code id="P70004970270000000000000000453D6" data-uri="chapter08.xhtml#P70004970270000000000000000453D6" class="calibre10 pcalibre pcalibre1">_Exit</code></td><td id="P70004970270000000000000000453D7" data-uri="chapter08.xhtml#P70004970270000000000000000453D7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453D8" data-uri="chapter08.xhtml#P70004970270000000000000000453D8" class="calibre10 pcalibre pcalibre1">fexecve</code></td><td id="P70004970270000000000000000453D9" data-uri="chapter08.xhtml#P70004970270000000000000000453D9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453DA" data-uri="chapter08.xhtml#P70004970270000000000000000453DA" class="calibre10 pcalibre pcalibre1">poll</code></td><td id="P70004970270000000000000000453DB" data-uri="chapter08.xhtml#P70004970270000000000000000453DB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453DC" data-uri="chapter08.xhtml#P70004970270000000000000000453DC" class="calibre10 pcalibre pcalibre1">sigqueue</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453DD" data-uri="chapter08.xhtml#P70004970270000000000000000453DD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453DE" data-uri="chapter08.xhtml#P70004970270000000000000000453DE" class="calibre10 pcalibre pcalibre1">_exit</code></td><td id="P70004970270000000000000000453DF" data-uri="chapter08.xhtml#P70004970270000000000000000453DF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453E0" data-uri="chapter08.xhtml#P70004970270000000000000000453E0" class="calibre10 pcalibre pcalibre1">fork</code></td><td id="P70004970270000000000000000453E1" data-uri="chapter08.xhtml#P70004970270000000000000000453E1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453E2" data-uri="chapter08.xhtml#P70004970270000000000000000453E2" class="calibre10 pcalibre pcalibre1">posix_trace_event</code></td><td id="P70004970270000000000000000453E3" data-uri="chapter08.xhtml#P70004970270000000000000000453E3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453E4" data-uri="chapter08.xhtml#P70004970270000000000000000453E4" class="calibre10 pcalibre pcalibre1">sigset</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453E5" data-uri="chapter08.xhtml#P70004970270000000000000000453E5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453E6" data-uri="chapter08.xhtml#P70004970270000000000000000453E6" class="calibre10 pcalibre pcalibre1">abort</code></td><td id="P70004970270000000000000000453E7" data-uri="chapter08.xhtml#P70004970270000000000000000453E7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453E8" data-uri="chapter08.xhtml#P70004970270000000000000000453E8" class="calibre10 pcalibre pcalibre1">f stat</code></td><td id="P70004970270000000000000000453E9" data-uri="chapter08.xhtml#P70004970270000000000000000453E9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453EA" data-uri="chapter08.xhtml#P70004970270000000000000000453EA" class="calibre10 pcalibre pcalibre1">pselect</code></td><td id="P70004970270000000000000000453EB" data-uri="chapter08.xhtml#P70004970270000000000000000453EB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453EC" data-uri="chapter08.xhtml#P70004970270000000000000000453EC" class="calibre10 pcalibre pcalibre1">sigsuspend</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453ED" data-uri="chapter08.xhtml#P70004970270000000000000000453ED" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453EE" data-uri="chapter08.xhtml#P70004970270000000000000000453EE" class="calibre10 pcalibre pcalibre1">accept</code></td><td id="P70004970270000000000000000453EF" data-uri="chapter08.xhtml#P70004970270000000000000000453EF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453F0" data-uri="chapter08.xhtml#P70004970270000000000000000453F0" class="calibre10 pcalibre pcalibre1">fstatat</code></td><td id="P70004970270000000000000000453F1" data-uri="chapter08.xhtml#P70004970270000000000000000453F1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453F2" data-uri="chapter08.xhtml#P70004970270000000000000000453F2" class="calibre10 pcalibre pcalibre1">raise</code></td><td id="P70004970270000000000000000453F3" data-uri="chapter08.xhtml#P70004970270000000000000000453F3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453F4" data-uri="chapter08.xhtml#P70004970270000000000000000453F4" class="calibre10 pcalibre pcalibre1">sleep</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453F5" data-uri="chapter08.xhtml#P70004970270000000000000000453F5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453F6" data-uri="chapter08.xhtml#P70004970270000000000000000453F6" class="calibre10 pcalibre pcalibre1">access</code></td><td id="P70004970270000000000000000453F7" data-uri="chapter08.xhtml#P70004970270000000000000000453F7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453F8" data-uri="chapter08.xhtml#P70004970270000000000000000453F8" class="calibre10 pcalibre pcalibre1">fsync</code></td><td id="P70004970270000000000000000453F9" data-uri="chapter08.xhtml#P70004970270000000000000000453F9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453FA" data-uri="chapter08.xhtml#P70004970270000000000000000453FA" class="calibre10 pcalibre pcalibre1">read</code></td><td id="P70004970270000000000000000453FB" data-uri="chapter08.xhtml#P70004970270000000000000000453FB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453FC" data-uri="chapter08.xhtml#P70004970270000000000000000453FC" class="calibre10 pcalibre pcalibre1">sockatmark</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000453FD" data-uri="chapter08.xhtml#P70004970270000000000000000453FD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000453FE" data-uri="chapter08.xhtml#P70004970270000000000000000453FE" class="calibre10 pcalibre pcalibre1">aio_error</code></td><td id="P70004970270000000000000000453FF" data-uri="chapter08.xhtml#P70004970270000000000000000453FF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045400" data-uri="chapter08.xhtml#P7000497027000000000000000045400" class="calibre10 pcalibre pcalibre1">ftruncate</code></td><td id="P7000497027000000000000000045401" data-uri="chapter08.xhtml#P7000497027000000000000000045401" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045402" data-uri="chapter08.xhtml#P7000497027000000000000000045402" class="calibre10 pcalibre pcalibre1">readlink</code></td><td id="P7000497027000000000000000045403" data-uri="chapter08.xhtml#P7000497027000000000000000045403" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045404" data-uri="chapter08.xhtml#P7000497027000000000000000045404" class="calibre10 pcalibre pcalibre1">socket</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045405" data-uri="chapter08.xhtml#P7000497027000000000000000045405" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045406" data-uri="chapter08.xhtml#P7000497027000000000000000045406" class="calibre10 pcalibre pcalibre1">aio_return</code></td><td id="P7000497027000000000000000045407" data-uri="chapter08.xhtml#P7000497027000000000000000045407" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045408" data-uri="chapter08.xhtml#P7000497027000000000000000045408" class="calibre10 pcalibre pcalibre1">futimens</code></td><td id="P7000497027000000000000000045409" data-uri="chapter08.xhtml#P7000497027000000000000000045409" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004540A" data-uri="chapter08.xhtml#P700049702700000000000000004540A" class="calibre10 pcalibre pcalibre1">readlinkat</code></td><td id="P700049702700000000000000004540B" data-uri="chapter08.xhtml#P700049702700000000000000004540B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004540C" data-uri="chapter08.xhtml#P700049702700000000000000004540C" class="calibre10 pcalibre pcalibre1">socketpair</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004540D" data-uri="chapter08.xhtml#P700049702700000000000000004540D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004540E" data-uri="chapter08.xhtml#P700049702700000000000000004540E" class="calibre10 pcalibre pcalibre1">aio_suspend</code></td><td id="P700049702700000000000000004540F" data-uri="chapter08.xhtml#P700049702700000000000000004540F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045410" data-uri="chapter08.xhtml#P7000497027000000000000000045410" class="calibre10 pcalibre pcalibre1">getegid</code></td><td id="P7000497027000000000000000045411" data-uri="chapter08.xhtml#P7000497027000000000000000045411" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045412" data-uri="chapter08.xhtml#P7000497027000000000000000045412" class="calibre10 pcalibre pcalibre1">recv</code></td><td id="P7000497027000000000000000045413" data-uri="chapter08.xhtml#P7000497027000000000000000045413" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045414" data-uri="chapter08.xhtml#P7000497027000000000000000045414" class="calibre10 pcalibre pcalibre1">stat</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045415" data-uri="chapter08.xhtml#P7000497027000000000000000045415" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045416" data-uri="chapter08.xhtml#P7000497027000000000000000045416" class="calibre10 pcalibre pcalibre1">alarm</code></td><td id="P7000497027000000000000000045417" data-uri="chapter08.xhtml#P7000497027000000000000000045417" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045418" data-uri="chapter08.xhtml#P7000497027000000000000000045418" class="calibre10 pcalibre pcalibre1">geteuid</code></td><td id="P7000497027000000000000000045419" data-uri="chapter08.xhtml#P7000497027000000000000000045419" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004541A" data-uri="chapter08.xhtml#P700049702700000000000000004541A" class="calibre10 pcalibre pcalibre1">reevfrom</code></td><td id="P700049702700000000000000004541B" data-uri="chapter08.xhtml#P700049702700000000000000004541B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004541C" data-uri="chapter08.xhtml#P700049702700000000000000004541C" class="calibre10 pcalibre pcalibre1">symlink</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004541D" data-uri="chapter08.xhtml#P700049702700000000000000004541D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004541E" data-uri="chapter08.xhtml#P700049702700000000000000004541E" class="calibre10 pcalibre pcalibre1">bind</code></td><td id="P700049702700000000000000004541F" data-uri="chapter08.xhtml#P700049702700000000000000004541F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045420" data-uri="chapter08.xhtml#P7000497027000000000000000045420" class="calibre10 pcalibre pcalibre1">getgid</code></td><td id="P7000497027000000000000000045421" data-uri="chapter08.xhtml#P7000497027000000000000000045421" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045422" data-uri="chapter08.xhtml#P7000497027000000000000000045422" class="calibre10 pcalibre pcalibre1">reevmsg</code></td><td id="P7000497027000000000000000045423" data-uri="chapter08.xhtml#P7000497027000000000000000045423" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045424" data-uri="chapter08.xhtml#P7000497027000000000000000045424" class="calibre10 pcalibre pcalibre1">symlinkat</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045425" data-uri="chapter08.xhtml#P7000497027000000000000000045425" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045426" data-uri="chapter08.xhtml#P7000497027000000000000000045426" class="calibre10 pcalibre pcalibre1">cfgetispeed</code></td><td id="P7000497027000000000000000045427" data-uri="chapter08.xhtml#P7000497027000000000000000045427" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045428" data-uri="chapter08.xhtml#P7000497027000000000000000045428" class="calibre10 pcalibre pcalibre1">getgroups</code></td><td id="P7000497027000000000000000045429" data-uri="chapter08.xhtml#P7000497027000000000000000045429" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004542A" data-uri="chapter08.xhtml#P700049702700000000000000004542A" class="calibre10 pcalibre pcalibre1">rename</code></td><td id="P700049702700000000000000004542B" data-uri="chapter08.xhtml#P700049702700000000000000004542B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004542C" data-uri="chapter08.xhtml#P700049702700000000000000004542C" class="calibre10 pcalibre pcalibre1">tcdrain</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004542D" data-uri="chapter08.xhtml#P700049702700000000000000004542D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004542E" data-uri="chapter08.xhtml#P700049702700000000000000004542E" class="calibre10 pcalibre pcalibre1">cfgetospeed</code></td><td id="P700049702700000000000000004542F" data-uri="chapter08.xhtml#P700049702700000000000000004542F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045430" data-uri="chapter08.xhtml#P7000497027000000000000000045430" class="calibre10 pcalibre pcalibre1">getpeername</code></td><td id="P7000497027000000000000000045431" data-uri="chapter08.xhtml#P7000497027000000000000000045431" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045432" data-uri="chapter08.xhtml#P7000497027000000000000000045432" class="calibre10 pcalibre pcalibre1">renameat</code></td><td id="P7000497027000000000000000045433" data-uri="chapter08.xhtml#P7000497027000000000000000045433" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045434" data-uri="chapter08.xhtml#P7000497027000000000000000045434" class="calibre10 pcalibre pcalibre1">tcflow</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045435" data-uri="chapter08.xhtml#P7000497027000000000000000045435" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045436" data-uri="chapter08.xhtml#P7000497027000000000000000045436" class="calibre10 pcalibre pcalibre1">cfsetispeed</code></td><td id="P7000497027000000000000000045437" data-uri="chapter08.xhtml#P7000497027000000000000000045437" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045438" data-uri="chapter08.xhtml#P7000497027000000000000000045438" class="calibre10 pcalibre pcalibre1">getpgrp</code></td><td id="P7000497027000000000000000045439" data-uri="chapter08.xhtml#P7000497027000000000000000045439" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004543A" data-uri="chapter08.xhtml#P700049702700000000000000004543A" class="calibre10 pcalibre pcalibre1">rmdir</code></td><td id="P700049702700000000000000004543B" data-uri="chapter08.xhtml#P700049702700000000000000004543B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004543C" data-uri="chapter08.xhtml#P700049702700000000000000004543C" class="calibre10 pcalibre pcalibre1">tcflush</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004543D" data-uri="chapter08.xhtml#P700049702700000000000000004543D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004543E" data-uri="chapter08.xhtml#P700049702700000000000000004543E" class="calibre10 pcalibre pcalibre1">cfsetospeed</code></td><td id="P700049702700000000000000004543F" data-uri="chapter08.xhtml#P700049702700000000000000004543F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045440" data-uri="chapter08.xhtml#P7000497027000000000000000045440" class="calibre10 pcalibre pcalibre1">getpid</code></td><td id="P7000497027000000000000000045441" data-uri="chapter08.xhtml#P7000497027000000000000000045441" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045442" data-uri="chapter08.xhtml#P7000497027000000000000000045442" class="calibre10 pcalibre pcalibre1">select</code></td><td id="P7000497027000000000000000045443" data-uri="chapter08.xhtml#P7000497027000000000000000045443" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045444" data-uri="chapter08.xhtml#P7000497027000000000000000045444" class="calibre10 pcalibre pcalibre1">tcgetattr</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045445" data-uri="chapter08.xhtml#P7000497027000000000000000045445" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045446" data-uri="chapter08.xhtml#P7000497027000000000000000045446" class="calibre10 pcalibre pcalibre1">chdir</code></td><td id="P7000497027000000000000000045447" data-uri="chapter08.xhtml#P7000497027000000000000000045447" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045448" data-uri="chapter08.xhtml#P7000497027000000000000000045448" class="calibre10 pcalibre pcalibre1">getppid</code></td><td id="P7000497027000000000000000045449" data-uri="chapter08.xhtml#P7000497027000000000000000045449" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004544A" data-uri="chapter08.xhtml#P700049702700000000000000004544A" class="calibre10 pcalibre pcalibre1">sem_post</code></td><td id="P700049702700000000000000004544B" data-uri="chapter08.xhtml#P700049702700000000000000004544B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004544C" data-uri="chapter08.xhtml#P700049702700000000000000004544C" class="calibre10 pcalibre pcalibre1">tcgetpgrp</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004544D" data-uri="chapter08.xhtml#P700049702700000000000000004544D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004544E" data-uri="chapter08.xhtml#P700049702700000000000000004544E" class="calibre10 pcalibre pcalibre1">chmod</code></td><td id="P700049702700000000000000004544F" data-uri="chapter08.xhtml#P700049702700000000000000004544F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045450" data-uri="chapter08.xhtml#P7000497027000000000000000045450" class="calibre10 pcalibre pcalibre1">getsockname</code></td><td id="P7000497027000000000000000045451" data-uri="chapter08.xhtml#P7000497027000000000000000045451" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045452" data-uri="chapter08.xhtml#P7000497027000000000000000045452" class="calibre10 pcalibre pcalibre1">send</code></td><td id="P7000497027000000000000000045453" data-uri="chapter08.xhtml#P7000497027000000000000000045453" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045454" data-uri="chapter08.xhtml#P7000497027000000000000000045454" class="calibre10 pcalibre pcalibre1">tcsendbreak</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045455" data-uri="chapter08.xhtml#P7000497027000000000000000045455" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045456" data-uri="chapter08.xhtml#P7000497027000000000000000045456" class="calibre10 pcalibre pcalibre1">chown</code></td><td id="P7000497027000000000000000045457" data-uri="chapter08.xhtml#P7000497027000000000000000045457" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045458" data-uri="chapter08.xhtml#P7000497027000000000000000045458" class="calibre10 pcalibre pcalibre1">getsockopt</code></td><td id="P7000497027000000000000000045459" data-uri="chapter08.xhtml#P7000497027000000000000000045459" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004545A" data-uri="chapter08.xhtml#P700049702700000000000000004545A" class="calibre10 pcalibre pcalibre1">sendmsg</code></td><td id="P700049702700000000000000004545B" data-uri="chapter08.xhtml#P700049702700000000000000004545B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004545C" data-uri="chapter08.xhtml#P700049702700000000000000004545C" class="calibre10 pcalibre pcalibre1">tcsetattr</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004545D" data-uri="chapter08.xhtml#P700049702700000000000000004545D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004545E" data-uri="chapter08.xhtml#P700049702700000000000000004545E" class="calibre10 pcalibre pcalibre1">clock_gettime</code></td><td id="P700049702700000000000000004545F" data-uri="chapter08.xhtml#P700049702700000000000000004545F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045460" data-uri="chapter08.xhtml#P7000497027000000000000000045460" class="calibre10 pcalibre pcalibre1">getuid</code></td><td id="P7000497027000000000000000045461" data-uri="chapter08.xhtml#P7000497027000000000000000045461" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045462" data-uri="chapter08.xhtml#P7000497027000000000000000045462" class="calibre10 pcalibre pcalibre1">sendto</code></td><td id="P7000497027000000000000000045463" data-uri="chapter08.xhtml#P7000497027000000000000000045463" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045464" data-uri="chapter08.xhtml#P7000497027000000000000000045464" class="calibre10 pcalibre pcalibre1">tcsetpgrp</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045465" data-uri="chapter08.xhtml#P7000497027000000000000000045465" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045466" data-uri="chapter08.xhtml#P7000497027000000000000000045466" class="calibre10 pcalibre pcalibre1">close</code></td><td id="P7000497027000000000000000045467" data-uri="chapter08.xhtml#P7000497027000000000000000045467" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045468" data-uri="chapter08.xhtml#P7000497027000000000000000045468" class="calibre10 pcalibre pcalibre1">kill</code></td><td id="P7000497027000000000000000045469" data-uri="chapter08.xhtml#P7000497027000000000000000045469" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004546A" data-uri="chapter08.xhtml#P700049702700000000000000004546A" class="calibre10 pcalibre pcalibre1">setgid</code></td><td id="P700049702700000000000000004546B" data-uri="chapter08.xhtml#P700049702700000000000000004546B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004546C" data-uri="chapter08.xhtml#P700049702700000000000000004546C" class="calibre10 pcalibre pcalibre1">time</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004546D" data-uri="chapter08.xhtml#P700049702700000000000000004546D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004546E" data-uri="chapter08.xhtml#P700049702700000000000000004546E" class="calibre10 pcalibre pcalibre1">connect</code></td><td id="P700049702700000000000000004546F" data-uri="chapter08.xhtml#P700049702700000000000000004546F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045470" data-uri="chapter08.xhtml#P7000497027000000000000000045470" class="calibre10 pcalibre pcalibre1">link</code></td><td id="P7000497027000000000000000045471" data-uri="chapter08.xhtml#P7000497027000000000000000045471" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045472" data-uri="chapter08.xhtml#P7000497027000000000000000045472" class="calibre10 pcalibre pcalibre1">setpgid</code></td><td id="P7000497027000000000000000045473" data-uri="chapter08.xhtml#P7000497027000000000000000045473" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045474" data-uri="chapter08.xhtml#P7000497027000000000000000045474" class="calibre10 pcalibre pcalibre1">timer_getoverrun</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045475" data-uri="chapter08.xhtml#P7000497027000000000000000045475" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045476" data-uri="chapter08.xhtml#P7000497027000000000000000045476" class="calibre10 pcalibre pcalibre1">creat</code></td><td id="P7000497027000000000000000045477" data-uri="chapter08.xhtml#P7000497027000000000000000045477" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045478" data-uri="chapter08.xhtml#P7000497027000000000000000045478" class="calibre10 pcalibre pcalibre1">linkat</code></td><td id="P7000497027000000000000000045479" data-uri="chapter08.xhtml#P7000497027000000000000000045479" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004547A" data-uri="chapter08.xhtml#P700049702700000000000000004547A" class="calibre10 pcalibre pcalibre1">setsid</code></td><td id="P700049702700000000000000004547B" data-uri="chapter08.xhtml#P700049702700000000000000004547B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004547C" data-uri="chapter08.xhtml#P700049702700000000000000004547C" class="calibre10 pcalibre pcalibre1">timer_gettime</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004547D" data-uri="chapter08.xhtml#P700049702700000000000000004547D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004547E" data-uri="chapter08.xhtml#P700049702700000000000000004547E" class="calibre10 pcalibre pcalibre1">dup</code></td><td id="P700049702700000000000000004547F" data-uri="chapter08.xhtml#P700049702700000000000000004547F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045480" data-uri="chapter08.xhtml#P7000497027000000000000000045480" class="calibre10 pcalibre pcalibre1">listen</code></td><td id="P7000497027000000000000000045481" data-uri="chapter08.xhtml#P7000497027000000000000000045481" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045482" data-uri="chapter08.xhtml#P7000497027000000000000000045482" class="calibre10 pcalibre pcalibre1">setsockopt</code></td><td id="P7000497027000000000000000045483" data-uri="chapter08.xhtml#P7000497027000000000000000045483" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045484" data-uri="chapter08.xhtml#P7000497027000000000000000045484" class="calibre10 pcalibre pcalibre1">timer_settime</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045485" data-uri="chapter08.xhtml#P7000497027000000000000000045485" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045486" data-uri="chapter08.xhtml#P7000497027000000000000000045486" class="calibre10 pcalibre pcalibre1">dup2</code></td><td id="P7000497027000000000000000045487" data-uri="chapter08.xhtml#P7000497027000000000000000045487" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045488" data-uri="chapter08.xhtml#P7000497027000000000000000045488" class="calibre10 pcalibre pcalibre1">lseek</code></td><td id="P7000497027000000000000000045489" data-uri="chapter08.xhtml#P7000497027000000000000000045489" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004548A" data-uri="chapter08.xhtml#P700049702700000000000000004548A" class="calibre10 pcalibre pcalibre1">setuid</code></td><td id="P700049702700000000000000004548B" data-uri="chapter08.xhtml#P700049702700000000000000004548B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004548C" data-uri="chapter08.xhtml#P700049702700000000000000004548C" class="calibre10 pcalibre pcalibre1">times</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004548D" data-uri="chapter08.xhtml#P700049702700000000000000004548D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004548E" data-uri="chapter08.xhtml#P700049702700000000000000004548E" class="calibre10 pcalibre pcalibre1">execl</code></td><td id="P700049702700000000000000004548F" data-uri="chapter08.xhtml#P700049702700000000000000004548F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045490" data-uri="chapter08.xhtml#P7000497027000000000000000045490" class="calibre10 pcalibre pcalibre1">lstat</code></td><td id="P7000497027000000000000000045491" data-uri="chapter08.xhtml#P7000497027000000000000000045491" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045492" data-uri="chapter08.xhtml#P7000497027000000000000000045492" class="calibre10 pcalibre pcalibre1">shutdown</code></td><td id="P7000497027000000000000000045493" data-uri="chapter08.xhtml#P7000497027000000000000000045493" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045494" data-uri="chapter08.xhtml#P7000497027000000000000000045494" class="calibre10 pcalibre pcalibre1">umask</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000045495" data-uri="chapter08.xhtml#P7000497027000000000000000045495" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045496" data-uri="chapter08.xhtml#P7000497027000000000000000045496" class="calibre10 pcalibre pcalibre1">execle</code></td><td id="P7000497027000000000000000045497" data-uri="chapter08.xhtml#P7000497027000000000000000045497" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000045498" data-uri="chapter08.xhtml#P7000497027000000000000000045498" class="calibre10 pcalibre pcalibre1">mkdir</code></td><td id="P7000497027000000000000000045499" data-uri="chapter08.xhtml#P7000497027000000000000000045499" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004549A" data-uri="chapter08.xhtml#P700049702700000000000000004549A" class="calibre10 pcalibre pcalibre1">sigaction</code></td><td id="P700049702700000000000000004549B" data-uri="chapter08.xhtml#P700049702700000000000000004549B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004549C" data-uri="chapter08.xhtml#P700049702700000000000000004549C" class="calibre10 pcalibre pcalibre1">uname</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004549D" data-uri="chapter08.xhtml#P700049702700000000000000004549D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004549E" data-uri="chapter08.xhtml#P700049702700000000000000004549E" class="calibre10 pcalibre pcalibre1">execv</code></td><td id="P700049702700000000000000004549F" data-uri="chapter08.xhtml#P700049702700000000000000004549F" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454A0" data-uri="chapter08.xhtml#P70004970270000000000000000454A0" class="calibre10 pcalibre pcalibre1">mkdirat</code></td><td id="P70004970270000000000000000454A1" data-uri="chapter08.xhtml#P70004970270000000000000000454A1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454A2" data-uri="chapter08.xhtml#P70004970270000000000000000454A2" class="calibre10 pcalibre pcalibre1">sigaddset</code></td><td id="P70004970270000000000000000454A3" data-uri="chapter08.xhtml#P70004970270000000000000000454A3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454A4" data-uri="chapter08.xhtml#P70004970270000000000000000454A4" class="calibre10 pcalibre pcalibre1">unlink</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454A5" data-uri="chapter08.xhtml#P70004970270000000000000000454A5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454A6" data-uri="chapter08.xhtml#P70004970270000000000000000454A6" class="calibre10 pcalibre pcalibre1">execve</code></td><td id="P70004970270000000000000000454A7" data-uri="chapter08.xhtml#P70004970270000000000000000454A7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454A8" data-uri="chapter08.xhtml#P70004970270000000000000000454A8" class="calibre10 pcalibre pcalibre1">mkfifo</code></td><td id="P70004970270000000000000000454A9" data-uri="chapter08.xhtml#P70004970270000000000000000454A9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454AA" data-uri="chapter08.xhtml#P70004970270000000000000000454AA" class="calibre10 pcalibre pcalibre1">sigdelset</code></td><td id="P70004970270000000000000000454AB" data-uri="chapter08.xhtml#P70004970270000000000000000454AB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454AC" data-uri="chapter08.xhtml#P70004970270000000000000000454AC" class="calibre10 pcalibre pcalibre1">unlinkat</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454AD" data-uri="chapter08.xhtml#P70004970270000000000000000454AD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454AE" data-uri="chapter08.xhtml#P70004970270000000000000000454AE" class="calibre10 pcalibre pcalibre1">faecessat</code></td><td id="P70004970270000000000000000454AF" data-uri="chapter08.xhtml#P70004970270000000000000000454AF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454B0" data-uri="chapter08.xhtml#P70004970270000000000000000454B0" class="calibre10 pcalibre pcalibre1">mkfifoat</code></td><td id="P70004970270000000000000000454B1" data-uri="chapter08.xhtml#P70004970270000000000000000454B1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454B2" data-uri="chapter08.xhtml#P70004970270000000000000000454B2" class="calibre10 pcalibre pcalibre1">sigemptyset</code></td><td id="P70004970270000000000000000454B3" data-uri="chapter08.xhtml#P70004970270000000000000000454B3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454B4" data-uri="chapter08.xhtml#P70004970270000000000000000454B4" class="calibre10 pcalibre pcalibre1">utime</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454B5" data-uri="chapter08.xhtml#P70004970270000000000000000454B5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454B6" data-uri="chapter08.xhtml#P70004970270000000000000000454B6" class="calibre10 pcalibre pcalibre1">fchmod</code></td><td id="P70004970270000000000000000454B7" data-uri="chapter08.xhtml#P70004970270000000000000000454B7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454B8" data-uri="chapter08.xhtml#P70004970270000000000000000454B8" class="calibre10 pcalibre pcalibre1">mknod</code></td><td id="P70004970270000000000000000454B9" data-uri="chapter08.xhtml#P70004970270000000000000000454B9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454BA" data-uri="chapter08.xhtml#P70004970270000000000000000454BA" class="calibre10 pcalibre pcalibre1">sigfillset</code></td><td id="P70004970270000000000000000454BB" data-uri="chapter08.xhtml#P70004970270000000000000000454BB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454BC" data-uri="chapter08.xhtml#P70004970270000000000000000454BC" class="calibre10 pcalibre pcalibre1">utimensat</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454BD" data-uri="chapter08.xhtml#P70004970270000000000000000454BD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454BE" data-uri="chapter08.xhtml#P70004970270000000000000000454BE" class="calibre10 pcalibre pcalibre1">fchmodat</code></td><td id="P70004970270000000000000000454BF" data-uri="chapter08.xhtml#P70004970270000000000000000454BF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454C0" data-uri="chapter08.xhtml#P70004970270000000000000000454C0" class="calibre10 pcalibre pcalibre1">mknodat</code></td><td id="P70004970270000000000000000454C1" data-uri="chapter08.xhtml#P70004970270000000000000000454C1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454C2" data-uri="chapter08.xhtml#P70004970270000000000000000454C2" class="calibre10 pcalibre pcalibre1">sigismember</code></td><td id="P70004970270000000000000000454C3" data-uri="chapter08.xhtml#P70004970270000000000000000454C3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454C4" data-uri="chapter08.xhtml#P70004970270000000000000000454C4" class="calibre10 pcalibre pcalibre1">utimes</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454C5" data-uri="chapter08.xhtml#P70004970270000000000000000454C5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454C6" data-uri="chapter08.xhtml#P70004970270000000000000000454C6" class="calibre10 pcalibre pcalibre1">fchown</code></td><td id="P70004970270000000000000000454C7" data-uri="chapter08.xhtml#P70004970270000000000000000454C7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454C8" data-uri="chapter08.xhtml#P70004970270000000000000000454C8" class="calibre10 pcalibre pcalibre1">open</code></td><td id="P70004970270000000000000000454C9" data-uri="chapter08.xhtml#P70004970270000000000000000454C9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454CA" data-uri="chapter08.xhtml#P70004970270000000000000000454CA" class="calibre10 pcalibre pcalibre1">signal</code></td><td id="P70004970270000000000000000454CB" data-uri="chapter08.xhtml#P70004970270000000000000000454CB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454CC" data-uri="chapter08.xhtml#P70004970270000000000000000454CC" class="calibre10 pcalibre pcalibre1">wait</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454CD" data-uri="chapter08.xhtml#P70004970270000000000000000454CD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454CE" data-uri="chapter08.xhtml#P70004970270000000000000000454CE" class="calibre10 pcalibre pcalibre1">fchownat</code></td><td id="P70004970270000000000000000454CF" data-uri="chapter08.xhtml#P70004970270000000000000000454CF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454D0" data-uri="chapter08.xhtml#P70004970270000000000000000454D0" class="calibre10 pcalibre pcalibre1">openat</code></td><td id="P70004970270000000000000000454D1" data-uri="chapter08.xhtml#P70004970270000000000000000454D1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454D2" data-uri="chapter08.xhtml#P70004970270000000000000000454D2" class="calibre10 pcalibre pcalibre1">sigpause</code></td><td id="P70004970270000000000000000454D3" data-uri="chapter08.xhtml#P70004970270000000000000000454D3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454D4" data-uri="chapter08.xhtml#P70004970270000000000000000454D4" class="calibre10 pcalibre pcalibre1">waitpid</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454D5" data-uri="chapter08.xhtml#P70004970270000000000000000454D5" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454D6" data-uri="chapter08.xhtml#P70004970270000000000000000454D6" class="calibre10 pcalibre pcalibre1">fcntl</code></td><td id="P70004970270000000000000000454D7" data-uri="chapter08.xhtml#P70004970270000000000000000454D7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454D8" data-uri="chapter08.xhtml#P70004970270000000000000000454D8" class="calibre10 pcalibre pcalibre1">pause</code></td><td id="P70004970270000000000000000454D9" data-uri="chapter08.xhtml#P70004970270000000000000000454D9" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454DA" data-uri="chapter08.xhtml#P70004970270000000000000000454DA" class="calibre10 pcalibre pcalibre1">sigpending</code></td><td id="P70004970270000000000000000454DB" data-uri="chapter08.xhtml#P70004970270000000000000000454DB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454DC" data-uri="chapter08.xhtml#P70004970270000000000000000454DC" class="calibre10 pcalibre pcalibre1">write</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P70004970270000000000000000454DD" data-uri="chapter08.xhtml#P70004970270000000000000000454DD" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454DE" data-uri="chapter08.xhtml#P70004970270000000000000000454DE" class="calibre10 pcalibre pcalibre1">fdatasync</code></td><td id="P70004970270000000000000000454DF" data-uri="chapter08.xhtml#P70004970270000000000000000454DF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454E0" data-uri="chapter08.xhtml#P70004970270000000000000000454E0" class="calibre10 pcalibre pcalibre1">pipe</code></td><td id="P70004970270000000000000000454E1" data-uri="chapter08.xhtml#P70004970270000000000000000454E1" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454E2" data-uri="chapter08.xhtml#P70004970270000000000000000454E2" class="calibre10 pcalibre pcalibre1">sigprocmask</code></td><td id="P70004970270000000000000000454E3" data-uri="chapter08.xhtml#P70004970270000000000000000454E3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000454E4" data-uri="chapter08.xhtml#P70004970270000000000000000454E4" class="calibre10 pcalibre pcalibre1"></code></td></tr>
</tbody>
</table>

<figcaption id="P70004970270000000000000000454E5" data-uri="chapter08.xhtml#P70004970270000000000000000454E5" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000454E6" data-uri="chapter08.xhtml#P70004970270000000000000000454E6" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.33 </span>Async-signal-safe functions.</h1></header>
<div class="pcalibre source pcalibre1" id="P70004970270000000000000000454E7" data-uri="chapter08.xhtml#P70004970270000000000000000454E7"><p id="P70004970270000000000000000454E8" data-uri="chapter08.xhtml#P70004970270000000000000000454E8" class="calibre54 pcalibre pcalibre1">(<span class="pcalibre label pcalibre1">Source: </span><code id="P70004970270000000000000000454E9" data-uri="chapter08.xhtml#P70004970270000000000000000454E9" class="pcalibre1 pcalibre calibre74">man 7</code> signal. Data from the Linux Foundation.)</p></div>
</figcaption>
</figure>
<pre id="P70004970270000000000000000454EA" data-uri="chapter08.xhtml#P70004970270000000000000000454EA" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000454EB" data-uri="chapter08.xhtml#P70004970270000000000000000454EB" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006CCF" title="768" data-uri="chapter08.xhtml#P7000497027000000000000000006CCF" epub:type="pagebreak"></span>#include "csapp.h"
ssize_t sio_putl(long v);
ssize_t sio_puts(char s[]);
				Returns: number of bytes transferred if OK, -1 on error
void sio_error (char s []);
				Returns: nothing
</code>
</pre>
<p class="calibre13 pcalibre pcalibre1" id="P70004970270000000000000000454EC" data-uri="chapter08.xhtml#P70004970270000000000000000454EC">The <code id="P70004970270000000000000000454ED" data-uri="chapter08.xhtml#P70004970270000000000000000454ED" class="pcalibre1 calibre8 pcalibre">sio_putl</code> and <code id="P70004970270000000000000000454EE" data-uri="chapter08.xhtml#P70004970270000000000000000454EE" class="pcalibre1 calibre8 pcalibre">sio_puts</code> functions emit a long and a string, respectively, to standard output. The <code id="P70004970270000000000000000454EF" data-uri="chapter08.xhtml#P70004970270000000000000000454EF" class="pcalibre1 calibre8 pcalibre">sio_error</code> function prints an error message and terminates.</p>
<p id="P70004970270000000000000000454F0" data-uri="chapter08.xhtml#P70004970270000000000000000454F0" class="calibre15 pcalibre pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006CE5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.34</span></a> shows the implementation of the S<span class="smallcaps pcalibre pcalibre1">io</span> package, which uses two private reentrant functions from <code id="P70004970270000000000000000454F1" data-uri="chapter08.xhtml#P70004970270000000000000000454F1" class="pcalibre1 calibre8 pcalibre">csapp. c</code>. The <code id="P70004970270000000000000000454F2" data-uri="chapter08.xhtml#P70004970270000000000000000454F2" class="pcalibre1 calibre8 pcalibre">sio_strlen</code> function in line 3 returns the length of string <code id="P70004970270000000000000000454F3" data-uri="chapter08.xhtml#P70004970270000000000000000454F3" class="pcalibre1 calibre8 pcalibre">s</code>. The <code id="P70004970270000000000000000454F4" data-uri="chapter08.xhtml#P70004970270000000000000000454F4" class="pcalibre1 calibre8 pcalibre">sio_ltoa</code> function in line 10, which is based on the <code id="P70004970270000000000000000454F5" data-uri="chapter08.xhtml#P70004970270000000000000000454F5" class="pcalibre1 calibre8 pcalibre">itoa</code> function from [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B41C">61</a>], converts <code id="P70004970270000000000000000454F6" data-uri="chapter08.xhtml#P70004970270000000000000000454F6" class="pcalibre1 calibre8 pcalibre">v</code> to its base <code id="P70004970270000000000000000454F7" data-uri="chapter08.xhtml#P70004970270000000000000000454F7" class="pcalibre1 calibre8 pcalibre">b</code> string representation in <code id="P70004970270000000000000000454F8" data-uri="chapter08.xhtml#P70004970270000000000000000454F8" class="pcalibre1 calibre8 pcalibre">s</code>. The <code id="P70004970270000000000000000454F9" data-uri="chapter08.xhtml#P70004970270000000000000000454F9" class="pcalibre1 calibre8 pcalibre">_exit</code> function in line 17 is an async-signal-safe variant of <code id="P70004970270000000000000000454FA" data-uri="chapter08.xhtml#P70004970270000000000000000454FA" class="pcalibre1 calibre8 pcalibre">exit</code>.</p>
<p id="P70004970270000000000000000454FB" data-uri="chapter08.xhtml#P70004970270000000000000000454FB" class="calibre15 pcalibre pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006CED"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.35 </span></a>shows a safe version of the SIGINT handler from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006B55"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.30</span></a>.</p>
</li>
<li id="P70004970270000000000000000454FC" data-uri="chapter08.xhtml#P70004970270000000000000000454FC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000454FD" data-uri="chapter08.xhtml#P70004970270000000000000000454FD" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><i class="calibre5 pcalibre pcalibre1">G2. Save and restore</i> <code id="P70004970270000000000000000454FE" data-uri="chapter08.xhtml#P70004970270000000000000000454FE" class="pcalibre1 calibre8 pcalibre">errno</code>. </span>Many of the Linux async-signal-safe functions set <code id="P70004970270000000000000000454FF" data-uri="chapter08.xhtml#P70004970270000000000000000454FF" class="pcalibre1 calibre8 pcalibre">errno</code> when they return with an error. Calling such functions inside a handler might interfere with other parts of the program that rely on <code id="P7000497027000000000000000045500" data-uri="chapter08.xhtml#P7000497027000000000000000045500" class="pcalibre1 calibre8 pcalibre">errno</code>.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006CE5" data-uri="chapter08.xhtml#P7000497027000000000000000006CE5">
<p id="P7000497027000000000000000045501" data-uri="chapter08.xhtml#P7000497027000000000000000045501" class="calibre13 pcalibre pcalibre1">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/src/csapp.c</i></p>
<pre id="P7000497027000000000000000045502" data-uri="chapter08.xhtml#P7000497027000000000000000045502" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045503" data-uri="chapter08.xhtml#P7000497027000000000000000045503" class="calibre10 pcalibre pcalibre1">
1	ssize_t sio_puts(char s[]) /* Put string */
2	{
3		return write(STDOUT_FILENO, s, sio_strlen(s));
4	}
5	
6	ssize_t sio_putl(long v) /* Put long */
7	{
8		char s[128];
9	
10		sio_ltoa(v, s, 10); /* Based on K&amp;R itoa() */
11		return sio_puts(s);
12	}
13	
14	void sio_error(char s[]) /* Put error message and exit */
15	{
16		sio_puts(s);
17		_exit(1);
18	}
</code></pre>
<p id="P7000497027000000000000000045504" data-uri="chapter08.xhtml#P7000497027000000000000000045504" class="calibre13 pcalibre pcalibre1">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/src/csapp.c</i></p>
<figcaption id="P7000497027000000000000000045505" data-uri="chapter08.xhtml#P7000497027000000000000000045505" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045506" data-uri="chapter08.xhtml#P7000497027000000000000000045506" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.34 </span>The <code id="P7000497027000000000000000045507" data-uri="chapter08.xhtml#P7000497027000000000000000045507" class="pcalibre1 calibre8 pcalibre">S<span class="smallcaps1 pcalibre pcalibre1">io</span></code> (Safe I/O) package for signal handlers.</h1></header>

</figcaption>
</figure>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006CED" data-uri="chapter08.xhtml#P7000497027000000000000000006CED">
<pre id="P7000497027000000000000000045508" data-uri="chapter08.xhtml#P7000497027000000000000000045508" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045509" data-uri="chapter08.xhtml#P7000497027000000000000000045509" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006CF0" title="769" data-uri="chapter08.xhtml#P7000497027000000000000000006CF0" epub:type="pagebreak"></span><i class="calibre5 pcalibre pcalibre1">code/ecf/sigintsafe.c</i>
1	#include "csapp.h"
2	
3	void sigint_handler(int sig) /* Safe SIGINT handler */
4	{
5		Sio_puts("Caught SIGINT!\n");	/* Safe output */
6		_exit(0);	/* Safe exit */
7	}
<i class="calibre5 pcalibre pcalibre1">code/ecf/sigintsafe.c</i>
</code>
</pre>
<figcaption id="P700049702700000000000000004550A" data-uri="chapter08.xhtml#P700049702700000000000000004550A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004550B" data-uri="chapter08.xhtml#P700049702700000000000000004550B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.35 </span>A safe version of the SICINT handler from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006B55"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.30</span></a>.</h1></header>

</figcaption>
</figure>

<p class="calibre13 pcalibre pcalibre1" id="P700049702700000000000000004550C" data-uri="chapter08.xhtml#P700049702700000000000000004550C">The workaround is to save <code id="P700049702700000000000000004550D" data-uri="chapter08.xhtml#P700049702700000000000000004550D" class="pcalibre1 calibre8 pcalibre">errno</code> to a local variable on entry to the handler and restore it before the handler returns. Note that this is only necessary if the handler returns. It is not necessary if the handler terminates the process by calling <code id="P700049702700000000000000004550E" data-uri="chapter08.xhtml#P700049702700000000000000004550E" class="pcalibre1 calibre8 pcalibre">_exit</code>.</p></li>
<li id="P700049702700000000000000004550F" data-uri="chapter08.xhtml#P700049702700000000000000004550F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045510" data-uri="chapter08.xhtml#P7000497027000000000000000045510" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">G3. Protect accesses to shared global data structures by blocking all signals. </span>If a handler shares a global data structure with the main program or with other handlers, then your handlers and main program should temporarily block all signals while accessing (reading or writing) that data structure. The reason for this rule is that accessing a data structure <var class="calibre5 pcalibre pcalibre1">d</var> from the main program typically requires a sequence of instructions. If this instruction sequence is interrupted by a handler that accesses <var class="calibre5 pcalibre pcalibre1">d</var>, then the handler might find <var class="calibre5 pcalibre pcalibre1">d</var> in an inconsistent state, with unpredictable results. Temporarily blocking signals while you access <var class="calibre5 pcalibre pcalibre1">d</var> guarantees that a handler will not interrupt the instruction sequence.</p></li>
<li id="P7000497027000000000000000045511" data-uri="chapter08.xhtml#P7000497027000000000000000045511" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045512" data-uri="chapter08.xhtml#P7000497027000000000000000045512" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">G4. Declare global variables with <code id="P7000497027000000000000000045513" data-uri="chapter08.xhtml#P7000497027000000000000000045513" class="pcalibre1 calibre8 pcalibre">volatile</code>. </span>Consider a handler and <code id="P7000497027000000000000000045514" data-uri="chapter08.xhtml#P7000497027000000000000000045514" class="pcalibre1 calibre8 pcalibre">main</code> routine that share a global variable <i class="calibre5 pcalibre pcalibre1">g.</i> The handler updates <var class="calibre5 pcalibre pcalibre1">g</var>, and <code id="P7000497027000000000000000045515" data-uri="chapter08.xhtml#P7000497027000000000000000045515" class="pcalibre1 calibre8 pcalibre">main</code> periodically reads <i class="calibre5 pcalibre pcalibre1">g.</i> To an optimizing compiler, it would appear that the value of <var class="calibre5 pcalibre pcalibre1">g</var> never changes in <code id="P7000497027000000000000000045516" data-uri="chapter08.xhtml#P7000497027000000000000000045516" class="pcalibre1 calibre8 pcalibre">main</code>, and thus it would be safe to use a copy of <var class="calibre5 pcalibre pcalibre1">g</var> that is cached in a register to satisfy every reference to <i class="calibre5 pcalibre pcalibre1">g.</i> In this case, the <code id="P7000497027000000000000000045517" data-uri="chapter08.xhtml#P7000497027000000000000000045517" class="pcalibre1 calibre8 pcalibre">main</code> function would never see the updated values from the handler.</p>

<p id="P7000497027000000000000000045518" data-uri="chapter08.xhtml#P7000497027000000000000000045518" class="calibre15 pcalibre pcalibre1">You can tell the compiler not to cache a variable by declaring it with the <code id="P7000497027000000000000000045519" data-uri="chapter08.xhtml#P7000497027000000000000000045519" class="pcalibre1 calibre8 pcalibre">volatile</code> type qualifier. For example:</p>
<pre id="P700049702700000000000000004551A" data-uri="chapter08.xhtml#P700049702700000000000000004551A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004551B" data-uri="chapter08.xhtml#P700049702700000000000000004551B" class="calibre10 pcalibre pcalibre1">volatile int g;</code></pre>
<p class="calibre13 pcalibre pcalibre1" id="P700049702700000000000000004551C" data-uri="chapter08.xhtml#P700049702700000000000000004551C">The <code id="P700049702700000000000000004551D" data-uri="chapter08.xhtml#P700049702700000000000000004551D" class="pcalibre1 calibre8 pcalibre">volatile</code> qualifier forces the compiler to read the value of <code id="P700049702700000000000000004551E" data-uri="chapter08.xhtml#P700049702700000000000000004551E" class="pcalibre1 calibre8 pcalibre">g</code> from memory each time it is referenced in the code. In general, as with any shared data structure, each access to a global variable should be protected by temporarily blocking signals.</p></li>

<li id="P700049702700000000000000004551F" data-uri="chapter08.xhtml#P700049702700000000000000004551F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045520" data-uri="chapter08.xhtml#P7000497027000000000000000045520" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">G5. Declare flags with <code id="P7000497027000000000000000045521" data-uri="chapter08.xhtml#P7000497027000000000000000045521" class="pcalibre1 calibre8 pcalibre">sig_atomic_t</code>. </span>In one common handler design, the handler records the receipt of the signal by writing to a global <i class="calibre5 pcalibre pcalibre1">flag.</i> The main program periodically reads the flag, responds to the signal, and <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D09" title="770" data-uri="chapter08.xhtml#P7000497027000000000000000006D09" epub:type="pagebreak"></span>clears the flag. For flags that are shared in this way, C provides an integer data type, <code id="P7000497027000000000000000045522" data-uri="chapter08.xhtml#P7000497027000000000000000045522" class="pcalibre1 calibre8 pcalibre">sig_atomic_t</code>, for which reads and writes are guaranteed to be <i class="calibre5 pcalibre pcalibre1">atomic</i> (uninterruptible) because they can be implemented with a single instruction:</p>
<pre id="P7000497027000000000000000045523" data-uri="chapter08.xhtml#P7000497027000000000000000045523" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000045524" data-uri="chapter08.xhtml#P7000497027000000000000000045524" class="calibre10 pcalibre pcalibre1">volatile sig_atomic_t flag;</code></pre>
<p id="P7000497027000000000000000045525" data-uri="chapter08.xhtml#P7000497027000000000000000045525" class="calibre13 pcalibre pcalibre1">Since they can't be interrupted, you can safely read from and write to <code id="P7000497027000000000000000045526" data-uri="chapter08.xhtml#P7000497027000000000000000045526" class="pcalibre1 calibre8 pcalibre">sig_atomic_t</code> variables without temporarily blocking signals. Note that the guarantee of atomicity only applies to individual reads and writes. It does not apply to updates such as <code id="P7000497027000000000000000045527" data-uri="chapter08.xhtml#P7000497027000000000000000045527" class="pcalibre1 calibre8 pcalibre">flag++</code> or <code id="P7000497027000000000000000045528" data-uri="chapter08.xhtml#P7000497027000000000000000045528" class="pcalibre1 calibre8 pcalibre">flag = flag + 10</code>, which might require multiple instructions.</p></li>
</ul>
<p id="P7000497027000000000000000045529" data-uri="chapter08.xhtml#P7000497027000000000000000045529" class="pcalibre1 pcalibre calibre2">Keep in mind that the guidelines we have presented are conservative, in the sense that they are not always strictly necessary. For example, if you know that a handler can never modify <code id="P700049702700000000000000004552A" data-uri="chapter08.xhtml#P700049702700000000000000004552A" class="pcalibre1 calibre8 pcalibre">errno</code>, then you don't need to save and restore <code id="P700049702700000000000000004552B" data-uri="chapter08.xhtml#P700049702700000000000000004552B" class="pcalibre1 calibre8 pcalibre">errno</code>. Or if you can prove that no instance of <code id="P700049702700000000000000004552C" data-uri="chapter08.xhtml#P700049702700000000000000004552C" class="pcalibre1 calibre8 pcalibre">printf</code> can ever be interrupted by a handler, then it is safe to call <code id="P700049702700000000000000004552D" data-uri="chapter08.xhtml#P700049702700000000000000004552D" class="pcalibre1 calibre8 pcalibre">printf</code> from the handler. The same holds for accesses to shared global data structures. However, it is very difficult to prove such assertions in general. So we recommend that you take the conservative approach and follow the guidelines by keeping your handlers as simple as possible, calling safe functions, saving and restoring <code id="P700049702700000000000000004552E" data-uri="chapter08.xhtml#P700049702700000000000000004552E" class="pcalibre1 calibre8 pcalibre">errno</code>, protecting accesses to shared data structures, and using <code id="P700049702700000000000000004552F" data-uri="chapter08.xhtml#P700049702700000000000000004552F" class="pcalibre1 calibre8 pcalibre">volatile</code> and <code id="P7000497027000000000000000045530" data-uri="chapter08.xhtml#P7000497027000000000000000045530" class="pcalibre1 calibre8 pcalibre">sig_atomic_t</code>.</p>
</section>
<section id="P7000497027000000000000000006D19" data-uri="chapter08.xhtml#P7000497027000000000000000006D19" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000045531" data-uri="chapter08.xhtml#P7000497027000000000000000045531" epub:type="title">Correct Signal Handling</h1></header>
<p id="P7000497027000000000000000045532" data-uri="chapter08.xhtml#P7000497027000000000000000045532" class="pcalibre1 pcalibre calibre2">One of the nonintuitive aspects of signals is that pending signals are not queued. Because the <code id="P7000497027000000000000000045533" data-uri="chapter08.xhtml#P7000497027000000000000000045533" class="pcalibre1 calibre8 pcalibre">pending</code> bit vector contains exactly one bit for each type of signal, there can be at most one pending signal of any particular type. Thus, if two signals of type <var class="calibre5 pcalibre pcalibre1">k</var> are sent to a destination process while signal <var class="calibre5 pcalibre pcalibre1">k</var> is blocked because the destination process is currently executing a handler for signal <var class="calibre5 pcalibre pcalibre1">k</var>, then the second signal is simply discarded; it is not queued. The key idea is that the existence of a pending signal merely indicates that <i class="calibre5 pcalibre pcalibre1">at least</i> one signal has arrived.</p>
<p id="P7000497027000000000000000045534" data-uri="chapter08.xhtml#P7000497027000000000000000045534" class="pcalibre1 pcalibre calibre2">To see how this affects correctness, let's look at a simple application that is similar in nature to real programs such as shells and Web servers. The basic structure is that a parent process creates some children that run independently for a while and then terminate. The parent must reap the children to avoid leaving zombies in the system. But we also want the parent to be free to do other work while the children are running. So we decide to reap the children with a SIGCHLD handler, instead of explicitly waiting for the children to terminate. (Recall that the kernel sends a SIGCHLD signal to the parent whenever one of its children terminates or stops.)</p>
<p id="P7000497027000000000000000045535" data-uri="chapter08.xhtml#P7000497027000000000000000045535" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D1F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.36 </span></a>shows our first attempt. The parent installs a SIGCHLD handler and then creates three children. In the meantime, the parent waits for a line of input from the terminal and then processes it. This processing is modeled by an infinite loop. When each child terminates, the kernel notifies the parent by sending it a SIGCHLD signal. The parent catches the SIGCHLD, reaps one child,</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006D1F" data-uri="chapter08.xhtml#P7000497027000000000000000006D1F">
<p id="P7000497027000000000000000045536" data-uri="chapter08.xhtml#P7000497027000000000000000045536" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D21" title="771" data-uri="chapter08.xhtml#P7000497027000000000000000006D21" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/signal1. c</i></p>
<pre id="P7000497027000000000000000045537" data-uri="chapter08.xhtml#P7000497027000000000000000045537" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045538" data-uri="chapter08.xhtml#P7000497027000000000000000045538" class="calibre10 pcalibre pcalibre1">
1	/* WARNING: This code is buggy! */
2	
3	void handlerl(int sig)
4	{
5		int olderrno = errno;
6	
7		if ((waitpid(-1, NULL, 0)) &lt; 0)
8			sio_error("waitpid error");
9		Sio_puts("Handler reaped child\n");
10		Sleep(1);
11		errno = olderrno;
12	}
13	
14	int main()
15	{
16		int i, n;
17		char buf [MAXBUF];
18	
19		if (signal(SIGCHLD, handler1) == SIG_ERR)
20			unix_error("signal error");
21	
22		/* Parent creates children */
23		for (i = 0; i &lt; 3; i++) {
24			if (Fork() == 0) {
25				printf ("Hello from child %d\n", (int)getpid());
26				exit(0);
27			}
28		}
29	
30		/* Parent waits for terminal input and then processes it */
31		if ((n = read(STDIN_FILENO, buf, sizeof(buf))) &lt; 0)
32			unix_error("read");
33	
34		printf("Parent processing input\n");
35		while (1)
36			;
37	
38		exit(0);
39	}
</code>
</pre>
<p id="P7000497027000000000000000045539" data-uri="chapter08.xhtml#P7000497027000000000000000045539" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/signal1. c</i></p>

<figcaption id="P700049702700000000000000004553A" data-uri="chapter08.xhtml#P700049702700000000000000004553A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004553B" data-uri="chapter08.xhtml#P700049702700000000000000004553B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.36 </span><code id="P700049702700000000000000004553C" data-uri="chapter08.xhtml#P700049702700000000000000004553C" class="pcalibre1 calibre8 pcalibre">signal1</code>. This program is flawed because it assumes that signals are queued.</h1></header>
</figcaption>
</figure>

<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004553D" data-uri="chapter08.xhtml#P700049702700000000000000004553D"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D29" title="772" data-uri="chapter08.xhtml#P7000497027000000000000000006D29" epub:type="pagebreak"></span>does some additional cleanup work (modeled by the <code id="P700049702700000000000000004553E" data-uri="chapter08.xhtml#P700049702700000000000000004553E" class="pcalibre1 calibre8 pcalibre">sleep</code> statement), and then returns.</p>
<p id="P700049702700000000000000004553F" data-uri="chapter08.xhtml#P700049702700000000000000004553F" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000045540" data-uri="chapter08.xhtml#P7000497027000000000000000045540" class="pcalibre1 calibre8 pcalibre">signal1</code> program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D1F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.36 </span></a>seems fairly straightforward. When we run it on our Linux system, however, we get the following output:</p>
<pre id="P7000497027000000000000000045541" data-uri="chapter08.xhtml#P7000497027000000000000000045541" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045542" data-uri="chapter08.xhtml#P7000497027000000000000000045542" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./signal1</i>
Hello from child 14073
Hello from child 14074
Hello from child 14075
Handler reaped child
Handler reaped child
<i class="calibre5 pcalibre pcalibre1">CR</i>
Parent processing input
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045543" data-uri="chapter08.xhtml#P7000497027000000000000000045543">From the output, we note that although three SIGCHLD signals were sent to the parent, only two of these signals were received, and thus the parent only reaped two children. If we suspend the parent process, we see that, indeed, child process 14075 was never reaped and remains a zombie (indicated by the string <code id="P7000497027000000000000000045544" data-uri="chapter08.xhtml#P7000497027000000000000000045544" class="pcalibre1 calibre8 pcalibre">&lt;def unct&gt;</code> in the output of the <code id="P7000497027000000000000000045545" data-uri="chapter08.xhtml#P7000497027000000000000000045545" class="pcalibre1 calibre8 pcalibre">ps</code> command):</p>

<pre id="P7000497027000000000000000045546" data-uri="chapter08.xhtml#P7000497027000000000000000045546" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045547" data-uri="chapter08.xhtml#P7000497027000000000000000045547" class="calibre10 pcalibre pcalibre1">
<i class="calibre5 pcalibre pcalibre1">Ctrl+Z</i>
Suspended
linux&gt; <i class="calibre5 pcalibre pcalibre1">ps t</i>
PID TTY		STAT	TIME COMMAND
⋮
14072 pts/3	T	0:02./ signal1
14075 pts/3	Z	0:00 [signal1] &lt;defunct&gt;
14076 pts/3	R+	0:00 ps t
</code>
</pre>
<p id="P7000497027000000000000000045548" data-uri="chapter08.xhtml#P7000497027000000000000000045548" class="pcalibre1 pcalibre calibre2">What went wrong? The problem is that our code failed to account for the fact that signals are not queued. Here's what happened: The first signal is received and caught by the parent. While the handler is still processing the first signal, the second signal is delivered and added to the set of pending signals. However, since SIGCHLD signals are blocked by the SIGCHLD handler, the second signal is not received. Shortly thereafter, while the handler is still processing the first signal, the third signal arrives. Since there is already a pending SIGCHLD, this third SIGCHLD signal is discarded. Sometime later, after the handler has returned, the kernel notices that there is a pending SIGCHLD signal and forces the parent to receive the signal. The parent catches the signal and executes the handler a second time. After the handler finishes processing the second signal, there are no more pending SIGCHLD signals, and there never will be, because all knowledge of the third SIGCHLD has been lost. <i class="calibre5 pcalibre pcalibre1">The crucial lesson is that signals cannot be used to count the occurrence of events in other processes.</i></p>
<p id="P7000497027000000000000000045549" data-uri="chapter08.xhtml#P7000497027000000000000000045549" class="pcalibre1 pcalibre calibre2">To fix the problem, we must recall that the existence of a pending signal only implies that at least one signal has been delivered since the last time the process received a signal of that type. So we must modify the SIGCHLD handler to reap</p>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006D36" data-uri="chapter08.xhtml#P7000497027000000000000000006D36">
<p id="P700049702700000000000000004554A" data-uri="chapter08.xhtml#P700049702700000000000000004554A" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D38" title="773" data-uri="chapter08.xhtml#P7000497027000000000000000006D38" epub:type="pagebreak"></span><i class="calibre5 pcalibre pcalibre1">code/ecf/signal2.c</i></p>
<pre id="P700049702700000000000000004554B" data-uri="chapter08.xhtml#P700049702700000000000000004554B" class="calibre9 pcalibre pcalibre1">
<code id="P700049702700000000000000004554C" data-uri="chapter08.xhtml#P700049702700000000000000004554C" class="calibre10 pcalibre pcalibre1">
1	void handler2(int sig)
2	{
3		int olderrno = errno;
4	
5		while (waitpid(-1, NULL, 0) &gt; 0) {
6			Sio_puts("Handler reaped child\n");
7		}
8		if (errno != ECHILD)
9			Sio_error("waitpid error");
10		Sleep(1);
11		errno = olderrno;
12	}
</code>
</pre>
<p id="P700049702700000000000000004554D" data-uri="chapter08.xhtml#P700049702700000000000000004554D" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/signal2.c</i></p>

<figcaption id="P700049702700000000000000004554E" data-uri="chapter08.xhtml#P700049702700000000000000004554E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004554F" data-uri="chapter08.xhtml#P700049702700000000000000004554F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.37 </span>signal2. An improved version of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D1F"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.36 </span></a>that correctly accounts for the fact that signals are not queued.</h1></header>

</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045550" data-uri="chapter08.xhtml#P7000497027000000000000000045550">as many zombie children as possible each time it is invoked. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D36"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.37 </span></a>shows the modified SIGCHLD handler.</p>

<p id="P7000497027000000000000000045551" data-uri="chapter08.xhtml#P7000497027000000000000000045551" class="pcalibre1 pcalibre calibre2">When we run <code id="P7000497027000000000000000045552" data-uri="chapter08.xhtml#P7000497027000000000000000045552" class="pcalibre1 calibre8 pcalibre">signal2</code> on our Linux system, it now correctly reaps all of the zombie children:</p>

<pre id="P7000497027000000000000000045553" data-uri="chapter08.xhtml#P7000497027000000000000000045553" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045554" data-uri="chapter08.xhtml#P7000497027000000000000000045554" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./signal2</i>
Hello from child 15237
Hello from child 15238
Hello from child 15239
Handler reaped child
Handler reaped child
Handler reaped child
<i class="calibre5 pcalibre pcalibre1">CR</i>
Parent processing input
</code>
</pre>


<section id="P7000497027000000000000000006D43" data-uri="chapter08.xhtml#P7000497027000000000000000006D43" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000045555" data-uri="chapter08.xhtml#P7000497027000000000000000045555" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">8.8 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000006F9A.xhtml#P7000497027000000000000000006FE6">799</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000045556" data-uri="chapter08.xhtml#P7000497027000000000000000045556">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000045557" data-uri="chapter08.xhtml#P7000497027000000000000000045557"><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000045558" data-uri="chapter08.xhtml#P7000497027000000000000000045558"><p id="P7000497027000000000000000045559" data-uri="chapter08.xhtml#P7000497027000000000000000045559" class="pcalibre calibre3 pcalibre1">What is the output of the following program?</p></div>
<p id="P700049702700000000000000004555A" data-uri="chapter08.xhtml#P700049702700000000000000004555A" class="pcalibre calibre3 pcalibre1">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/signalprob0.c</i></p>
<pre id="P700049702700000000000000004555B" data-uri="chapter08.xhtml#P700049702700000000000000004555B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004555C" data-uri="chapter08.xhtml#P700049702700000000000000004555C" class="calibre10 pcalibre pcalibre1">
1	volatile long counter = 2;
2	
3	void handler1(int sig)
4	{
5		sigset_t mask, prev_mask;
6	
7		Sigfillset(&amp;mask);
8		Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask); /* Block sigs */
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D4C" title="774" data-uri="chapter08.xhtml#P7000497027000000000000000006D4C" epub:type="pagebreak"></span>9		Sio_putl(--counter);
10		Sigprocmask(SIG_SETMASK, &amp;prev_mask, NULL); /* Restore sigs */
11	
12		_exit(0);
13	}
14
15	int main()
16	{
17		pid_t pid;
18		sigset_t mask, prev_mask;
19	
20		printf ("%ld", counter);
21		fflush(stdout);
22	
23		signal(SIGUSR1, handler1);
24		if ((pid = Fork()) == 0) {
25			while (1) ();
26		}
27		Kill(pid, SIGUSR1);
28		Waitpid(-1, NULL, 0);
29	
30		Sigfillset(&amp;mask);
31		Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask); /* Block sigs */
32		printf ("%ld", ++counter);
33		Sigprocmask(SIG_SETMASK, &amp;prev_mask, NULL); /* Restore sigs */
34	
35		exit(0);
36	}
</code>
</pre>
<p id="P700049702700000000000000004555D" data-uri="chapter08.xhtml#P700049702700000000000000004555D" class="pcalibre calibre3 pcalibre1">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/signalprob0.c</i></p>
</li>
</ol>
</section>
</section>

<section id="P7000497027000000000000000006D4E" data-uri="chapter08.xhtml#P7000497027000000000000000006D4E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004555E" data-uri="chapter08.xhtml#P700049702700000000000000004555E" epub:type="title">Portable Signal Handling</h1></header>
<p id="P700049702700000000000000004555F" data-uri="chapter08.xhtml#P700049702700000000000000004555F" class="pcalibre1 pcalibre calibre2">Another ugly aspect of Unix signal handling is that different systems have different signal-handling semantics. For example:</p>
<ul id="P7000497027000000000000000045560" data-uri="chapter08.xhtml#P7000497027000000000000000045560" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000045561" data-uri="chapter08.xhtml#P7000497027000000000000000045561" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045562" data-uri="chapter08.xhtml#P7000497027000000000000000045562" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">The semantics of the <code id="P7000497027000000000000000045563" data-uri="chapter08.xhtml#P7000497027000000000000000045563" class="pcalibre1 calibre8 pcalibre">signal</code> function varies. </span>Some older Unix systems restore the action for signal <var class="calibre5 pcalibre pcalibre1">k</var> to its default after signal <var class="calibre5 pcalibre pcalibre1">k</var> has been caught by a handler. On these systems, the handler must explicitly reinstall itself, by calling <code id="P7000497027000000000000000045564" data-uri="chapter08.xhtml#P7000497027000000000000000045564" class="pcalibre1 calibre8 pcalibre">signal</code>, each time it runs.</p></li>
<li id="P7000497027000000000000000045565" data-uri="chapter08.xhtml#P7000497027000000000000000045565" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045566" data-uri="chapter08.xhtml#P7000497027000000000000000045566" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">System calls can be interrupted. </span>System calls such as <code id="P7000497027000000000000000045567" data-uri="chapter08.xhtml#P7000497027000000000000000045567" class="pcalibre1 calibre8 pcalibre">read, wait</code>, and <code id="P7000497027000000000000000045568" data-uri="chapter08.xhtml#P7000497027000000000000000045568" class="pcalibre1 calibre8 pcalibre">accept</code> that can potentially block the process for a long period of time are called <i class="calibre5 pcalibre pcalibre1">slow system calls.</i> On some older versions of Unix, slow system calls that are interrupted when a handler catches a signal do not resume when the signal handler returns but instead return immediately to the user with an error condition and <code id="P7000497027000000000000000045569" data-uri="chapter08.xhtml#P7000497027000000000000000045569" class="pcalibre1 calibre8 pcalibre">errno</code> set to EINTR. On these systems, programmers must include code that manually restarts interrupted system calls.</p></li>
</ul>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006D5B" data-uri="chapter08.xhtml#P7000497027000000000000000006D5B">
<p id="P700049702700000000000000004556A" data-uri="chapter08.xhtml#P700049702700000000000000004556A" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D5D" title="775" data-uri="chapter08.xhtml#P7000497027000000000000000006D5D" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/src/csapp.c</i></p>
<pre id="P700049702700000000000000004556B" data-uri="chapter08.xhtml#P700049702700000000000000004556B" class="calibre9 pcalibre pcalibre1">
<code id="P700049702700000000000000004556C" data-uri="chapter08.xhtml#P700049702700000000000000004556C" class="calibre10 pcalibre pcalibre1">
1	handler_t *Signal(int signum, handler_t *handler)
2	{
3		struct sigaction action, old_action;
4	
5		action.sa_handler = handler;
6		sigemptyset(&amp;action.sa_mask); /* Block sigs of type being handled */
7		action.sa_flags = SA_RESTART; /* Restart syscalls if possible */
8	
9		if (sigaction(signum, feaction, &amp;old_action) &lt; 0)
10			unix_error("Signal error");
11		return (old_action.sa_handler);
12	}
</code>
</pre>
<p id="P700049702700000000000000004556D" data-uri="chapter08.xhtml#P700049702700000000000000004556D" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/src/csapp.c</i></p>
<figcaption id="P700049702700000000000000004556E" data-uri="chapter08.xhtml#P700049702700000000000000004556E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004556F" data-uri="chapter08.xhtml#P700049702700000000000000004556F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.38 </span><code id="P7000497027000000000000000045570" data-uri="chapter08.xhtml#P7000497027000000000000000045570" class="pcalibre1 calibre8 pcalibre">Signal.</code> A wrapper for <code id="P7000497027000000000000000045571" data-uri="chapter08.xhtml#P7000497027000000000000000045571" class="pcalibre1 calibre8 pcalibre">sigaction</code> that provides portable signal handling on Posix-compliant systems.</h1></header>


</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045572" data-uri="chapter08.xhtml#P7000497027000000000000000045572">To deal with these issues, the Posix standard defines the <code id="P7000497027000000000000000045573" data-uri="chapter08.xhtml#P7000497027000000000000000045573" class="pcalibre1 calibre8 pcalibre">sigaction</code> function, which allows users to clearly specify the signal-handling semantics they want when they install a handler.</p>
<pre id="P7000497027000000000000000045574" data-uri="chapter08.xhtml#P7000497027000000000000000045574" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045575" data-uri="chapter08.xhtml#P7000497027000000000000000045575" class="calibre10 pcalibre pcalibre1">
#include &lt;signal.h&gt;
int sigaction(int signum, struct sigaction *act,
		struct sigaction *oldact);
					Returns: 0 if OK, -1 on error
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045576" data-uri="chapter08.xhtml#P7000497027000000000000000045576">The <code id="P7000497027000000000000000045577" data-uri="chapter08.xhtml#P7000497027000000000000000045577" class="pcalibre1 calibre8 pcalibre">sigaction</code> function is unwieldy because it requires the user to set the entries of a complicated structure. A cleaner approach, originally proposed by W. Richard Stevens [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B480">110</a>], is to define a wrapper function, called <code id="P7000497027000000000000000045578" data-uri="chapter08.xhtml#P7000497027000000000000000045578" class="pcalibre1 calibre8 pcalibre">Signal</code>, that calls <code id="P7000497027000000000000000045579" data-uri="chapter08.xhtml#P7000497027000000000000000045579" class="pcalibre1 calibre8 pcalibre">sigaction</code> for us. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D5B"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.38 </span></a>shows the definition of <code id="P700049702700000000000000004557A" data-uri="chapter08.xhtml#P700049702700000000000000004557A" class="pcalibre1 calibre8 pcalibre">Signal</code>, which is invoked in the same way as the <code id="P700049702700000000000000004557B" data-uri="chapter08.xhtml#P700049702700000000000000004557B" class="pcalibre1 calibre8 pcalibre">signal</code> function.</p>
<p id="P700049702700000000000000004557C" data-uri="chapter08.xhtml#P700049702700000000000000004557C" class="pcalibre1 pcalibre calibre2">The <code id="P700049702700000000000000004557D" data-uri="chapter08.xhtml#P700049702700000000000000004557D" class="pcalibre1 calibre8 pcalibre">Signal</code> wrapper installs a signal handler with the following signal-handling semantics:</p>
<ul id="P700049702700000000000000004557E" data-uri="chapter08.xhtml#P700049702700000000000000004557E" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000004557F" data-uri="chapter08.xhtml#P700049702700000000000000004557F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045580" data-uri="chapter08.xhtml#P7000497027000000000000000045580" class="pcalibre calibre3 pcalibre1">Only signals of the type currently being processed by the handler are blocked.</p></li>
<li id="P7000497027000000000000000045581" data-uri="chapter08.xhtml#P7000497027000000000000000045581" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045582" data-uri="chapter08.xhtml#P7000497027000000000000000045582" class="pcalibre calibre3 pcalibre1">As with all signal implementations, signals are not queued.</p></li>
<li id="P7000497027000000000000000045583" data-uri="chapter08.xhtml#P7000497027000000000000000045583" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045584" data-uri="chapter08.xhtml#P7000497027000000000000000045584" class="pcalibre calibre3 pcalibre1">Interrupted system calls are automatically restarted whenever possible.</p></li>
<li id="P7000497027000000000000000045585" data-uri="chapter08.xhtml#P7000497027000000000000000045585" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045586" data-uri="chapter08.xhtml#P7000497027000000000000000045586" class="pcalibre calibre3 pcalibre1">Once the signal handler is installed, it remains installed until <code id="P7000497027000000000000000045587" data-uri="chapter08.xhtml#P7000497027000000000000000045587" class="pcalibre1 calibre8 pcalibre">Signal</code> is called with a <code id="P7000497027000000000000000045588" data-uri="chapter08.xhtml#P7000497027000000000000000045588" class="pcalibre1 calibre8 pcalibre">handler</code> argument of either SIG_IGN or SIG_DFL.</p></li>
</ul>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045589" data-uri="chapter08.xhtml#P7000497027000000000000000045589">We will use the <code id="P700049702700000000000000004558A" data-uri="chapter08.xhtml#P700049702700000000000000004558A" class="pcalibre1 calibre8 pcalibre">Signal</code> wrapper in all of our code.</p>
</section>
</section>

<section id="P7000497027000000000000000006D7E" data-uri="chapter08.xhtml#P7000497027000000000000000006D7E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004558B" data-uri="chapter08.xhtml#P700049702700000000000000004558B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D80" title="776" data-uri="chapter08.xhtml#P7000497027000000000000000006D80" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">8.5.6  </span>Synchronizing Flows to Avoid Nasty Concurrency Bugs</h1></header>
<p id="P700049702700000000000000004558C" data-uri="chapter08.xhtml#P700049702700000000000000004558C" class="pcalibre1 pcalibre calibre2">The problem of how to program concurrent flows that read and write the same storage locations has challenged generations of computer scientists. In general, the number of potential interleavings of the flows is exponential in the number of instructions. Some of those interleavings will produce correct answers, and others will not. The fundamental problem is to somehow <i class="calibre5 pcalibre pcalibre1">synchronize</i> the concurrent flows so as to allow the largest set of feasible interleavings such that each of the feasible interleavings produces a correct answer.</p>
<p id="P700049702700000000000000004558D" data-uri="chapter08.xhtml#P700049702700000000000000004558D" class="pcalibre1 pcalibre calibre2">Concurrent programming is a deep and important problem that we will discuss in more detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a>. However, we can use what you've learned about exceptional control flow in this chapter to give you a sense of the interesting intellectual challenges associated with concurrency. For example, consider the program in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.39</span>, which captures the structure of a typical Unix shell. The parent keeps track of its current children using entries in a global job list, with one entry per job. The <code id="P700049702700000000000000004558E" data-uri="chapter08.xhtml#P700049702700000000000000004558E" class="pcalibre1 calibre8 pcalibre">addjob</code> and <code id="P700049702700000000000000004558F" data-uri="chapter08.xhtml#P700049702700000000000000004558F" class="pcalibre1 calibre8 pcalibre">deletejob</code> functions add and remove entries from the job list.</p>
<p id="P7000497027000000000000000045590" data-uri="chapter08.xhtml#P7000497027000000000000000045590" class="pcalibre1 pcalibre calibre2">After the parent creates a new child process, it adds the child to the job list. When the parent reaps a terminated (zombie) child in the SIGCHLD signal handler, it deletes the child from the job list.</p>
<p id="P7000497027000000000000000045591" data-uri="chapter08.xhtml#P7000497027000000000000000045591" class="pcalibre1 pcalibre calibre2">At first glance, this code appears to be correct. Unfortunately, the following sequence of events is possible:</p>
<ol id="P7000497027000000000000000045592" data-uri="chapter08.xhtml#P7000497027000000000000000045592" class="calibre72 pcalibre pcalibre1">
<li id="P7000497027000000000000000045593" data-uri="chapter08.xhtml#P7000497027000000000000000045593" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045594" data-uri="chapter08.xhtml#P7000497027000000000000000045594" class="pcalibre calibre3 pcalibre1">The parent executes the <code id="P7000497027000000000000000045595" data-uri="chapter08.xhtml#P7000497027000000000000000045595" class="pcalibre1 calibre8 pcalibre">fork</code> function and the kernel schedules the newly created child to run instead of the parent.</p></li>
<li id="P7000497027000000000000000045596" data-uri="chapter08.xhtml#P7000497027000000000000000045596" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045597" data-uri="chapter08.xhtml#P7000497027000000000000000045597" class="pcalibre calibre3 pcalibre1">Before the parent is able to run again, the child terminates and becomes a zombie, causing the kernel to deliver a SIGCHLD signal to the parent.</p></li>
<li id="P7000497027000000000000000045598" data-uri="chapter08.xhtml#P7000497027000000000000000045598" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045599" data-uri="chapter08.xhtml#P7000497027000000000000000045599" class="pcalibre calibre3 pcalibre1">Later, when the parent becomes runnable again but before it is executed, the kernel notices the pending SIGCHLD and causes it to be received by running the signal handler in the parent.</p></li>
<li id="P700049702700000000000000004559A" data-uri="chapter08.xhtml#P700049702700000000000000004559A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004559B" data-uri="chapter08.xhtml#P700049702700000000000000004559B" class="pcalibre calibre3 pcalibre1">The signal handler reaps the terminated child and calls <code id="P700049702700000000000000004559C" data-uri="chapter08.xhtml#P700049702700000000000000004559C" class="pcalibre1 calibre8 pcalibre">deletejob</code>, which does nothing because the parent has not added the child to the list yet.</p></li>
<li id="P700049702700000000000000004559D" data-uri="chapter08.xhtml#P700049702700000000000000004559D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004559E" data-uri="chapter08.xhtml#P700049702700000000000000004559E" class="pcalibre calibre3 pcalibre1">After the handler completes, the kernel then runs the parent, which returns from <code id="P700049702700000000000000004559F" data-uri="chapter08.xhtml#P700049702700000000000000004559F" class="pcalibre1 calibre8 pcalibre">fork</code> and incorrectly adds the (nonexistent) child to the job list by calling <code id="P70004970270000000000000000455A0" data-uri="chapter08.xhtml#P70004970270000000000000000455A0" class="pcalibre1 calibre8 pcalibre">addj ob.</code></p></li>
</ol>

<p id="P70004970270000000000000000455A1" data-uri="chapter08.xhtml#P70004970270000000000000000455A1" class="pcalibre1 pcalibre calibre2">Thus, for some interleavings of the parent's main routine and signal-handling flows, it is possible for <code id="P70004970270000000000000000455A2" data-uri="chapter08.xhtml#P70004970270000000000000000455A2" class="pcalibre1 calibre8 pcalibre">deletejob</code> to be called before <code id="P70004970270000000000000000455A3" data-uri="chapter08.xhtml#P70004970270000000000000000455A3" class="pcalibre1 calibre8 pcalibre">addjob</code>. This results in an incorrect entry on the job list, for a job that no longer exists and that will never be removed. On the other hand, there are also interleavings where events occur in the correct order. For example, if the kernel happens to schedule the parent to run when the <code id="P70004970270000000000000000455A4" data-uri="chapter08.xhtml#P70004970270000000000000000455A4" class="pcalibre1 calibre8 pcalibre">fork</code> call returns instead of the child, then the parent will correctly add the child to the job list before the child terminates and the signal handler removes the job from the list.</p>
<p id="P70004970270000000000000000455A5" data-uri="chapter08.xhtml#P70004970270000000000000000455A5" class="pcalibre1 pcalibre calibre2">This is an example of a classic synchronization error known as a <i class="calibre5 pcalibre pcalibre1">race.</i> In this case, the race is between the call to <code id="P70004970270000000000000000455A6" data-uri="chapter08.xhtml#P70004970270000000000000000455A6" class="pcalibre1 calibre8 pcalibre">addjob</code> in the main routine and the call to</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006D9C" data-uri="chapter08.xhtml#P7000497027000000000000000006D9C">
<p id="P70004970270000000000000000455A7" data-uri="chapter08.xhtml#P70004970270000000000000000455A7" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006D9E" title="777" data-uri="chapter08.xhtml#P7000497027000000000000000006D9E" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/procmask1.c</i></p>
<pre id="P70004970270000000000000000455A8" data-uri="chapter08.xhtml#P70004970270000000000000000455A8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000455A9" data-uri="chapter08.xhtml#P70004970270000000000000000455A9" class="calibre10 pcalibre pcalibre1">
1	/* WARNING: This code is buggy! */
2	void handler(int sig)
3	{
4		int olderrno = errno;
5		sigset_t mask_all, prev_all;
6		pid_t pid;
7	
8		Sigfillset(&amp;mask_all);
9		while ((pid = waitpid(-1, NULL, 0)) &gt; 0) { /* Reap a zombie child */
10			Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);
11			deletejob(pid); /* Delete the child from the job list */
12			Sigprocmask(SIG_SETMASK, &amp;prev_all, NULL);
13		}
14		if (errno != ECHILD)
15			Sio_error("waitpid error");
16		errno = olderrno;
17	}
18	
19	int main(int argc, char **argv)
20	{
21		int pid;
22		sigset_t mask_all, prev_all;
23	
24		Sigfillset(&amp;mask_all);
25		Signal(SIGCHLD, handler);
26		initjobs(); /* Initialize the job list */
27	
28		while (1) {
29			if ((pid = Fork()) == 0) { /* Child process */
30				Execve("/bin/date", argv, NULL);
31			}
32			Sigprocmask(SIG_BL0CK, &amp;mask_all, &amp;prev_all); /* Parent process */
33			addjob(pid); /* Add the child to the job list */
34			Sigprocmask(SIG_SETMASK, &amp;prev_all, NULL);
35		}
36		exit(0);
37	}
</code>
</pre>
<p id="P70004970270000000000000000455AA" data-uri="chapter08.xhtml#P70004970270000000000000000455AA" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/procmask1.c</i></p>
<figcaption id="P70004970270000000000000000455AB" data-uri="chapter08.xhtml#P70004970270000000000000000455AB" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000455AC" data-uri="chapter08.xhtml#P70004970270000000000000000455AC" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.39 </span>A shell program with a subtle synchronization error.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000455AD" data-uri="chapter08.xhtml#P70004970270000000000000000455AD"><p id="P70004970270000000000000000455AE" data-uri="chapter08.xhtml#P70004970270000000000000000455AE" class="pcalibre calibre3 pcalibre1">If the child terminates before the parent is able to run, then <code id="P70004970270000000000000000455AF" data-uri="chapter08.xhtml#P70004970270000000000000000455AF" class="pcalibre1 calibre8 pcalibre">addjob</code> and <code id="P70004970270000000000000000455B0" data-uri="chapter08.xhtml#P70004970270000000000000000455B0" class="pcalibre1 calibre8 pcalibre">deletejob</code> will be called in the wrong order.</p></div>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000455B1" data-uri="chapter08.xhtml#P70004970270000000000000000455B1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006DA9" title="778" data-uri="chapter08.xhtml#P7000497027000000000000000006DA9" epub:type="pagebreak"></span><code id="P70004970270000000000000000455B2" data-uri="chapter08.xhtml#P70004970270000000000000000455B2" class="pcalibre1 calibre8 pcalibre">deletejob</code> in the handler. If <code id="P70004970270000000000000000455B3" data-uri="chapter08.xhtml#P70004970270000000000000000455B3" class="pcalibre1 calibre8 pcalibre">addjob</code> wins the race, then the answer is correct. If not, the answer is incorrect. Such errors are enormously difficult to debug because it is often impossible to test every interleaving. You might run the code a billion times without a problem, but then the next test results in an interleaving that triggers the race.</p>
<p id="P70004970270000000000000000455B4" data-uri="chapter08.xhtml#P70004970270000000000000000455B4" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006DC9"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.40 </span></a>shows one way to eliminate the race in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.39</span>. By blocking SIGCHLD signals before the call to <code id="P70004970270000000000000000455B5" data-uri="chapter08.xhtml#P70004970270000000000000000455B5" class="pcalibre1 calibre8 pcalibre">fork</code> and then unblocking them only after we have called <code id="P70004970270000000000000000455B6" data-uri="chapter08.xhtml#P70004970270000000000000000455B6" class="pcalibre1 calibre8 pcalibre">addjob</code>, we guarantee that the child will be reaped <i class="calibre5 pcalibre pcalibre1">after</i> it is added to the job list. Notice that children inherit the <code id="P70004970270000000000000000455B7" data-uri="chapter08.xhtml#P70004970270000000000000000455B7" class="pcalibre1 calibre8 pcalibre">blocked</code> set of their parents, so we must be careful to unblock the SIGCHLD signal in the child before calling <code id="P70004970270000000000000000455B8" data-uri="chapter08.xhtml#P70004970270000000000000000455B8" class="pcalibre1 calibre8 pcalibre">execve</code>.</p>
</section>

<section id="P7000497027000000000000000006DB1" data-uri="chapter08.xhtml#P7000497027000000000000000006DB1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000455B9" data-uri="chapter08.xhtml#P70004970270000000000000000455B9" epub:type="title"><span class="pcalibre label pcalibre1">8.5.7  </span>Explicitly Waiting for Signals</h1></header>
<p id="P70004970270000000000000000455BA" data-uri="chapter08.xhtml#P70004970270000000000000000455BA" class="pcalibre1 pcalibre calibre2">Sometimes a main program needs to explicitly wait for a certain signal handler to run. For example, when a Linux shell creates a foreground job, it must wait for the job to terminate and be reaped by the SIGCHLD handler before accepting the next user command.</p>
<p id="P70004970270000000000000000455BB" data-uri="chapter08.xhtml#P70004970270000000000000000455BB" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006DD6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.41 </span></a>shows the basic idea. The parent installs handlers for SIGINT and SIGCHLD and then enters an infinite loop. It blocks SIGCHLD to avoid the race between parent and child that we discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006D7E"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.5.6</span></a>. After creating the child, it resets <code id="P70004970270000000000000000455BC" data-uri="chapter08.xhtml#P70004970270000000000000000455BC" class="pcalibre1 calibre8 pcalibre">pid</code> to zero, unblocks SIGCHLD, and then waits in a spin loop for <code id="P70004970270000000000000000455BD" data-uri="chapter08.xhtml#P70004970270000000000000000455BD" class="pcalibre1 calibre8 pcalibre">pid</code> to become nonzero. After the child terminates, the handler reaps it and assigns its nonzero PID to the global <code id="P70004970270000000000000000455BE" data-uri="chapter08.xhtml#P70004970270000000000000000455BE" class="pcalibre1 calibre8 pcalibre">pid</code> variable. This terminates the spin loop, and the parent continues with additional work before starting the next iteration.</p>
<p id="P70004970270000000000000000455BF" data-uri="chapter08.xhtml#P70004970270000000000000000455BF" class="pcalibre1 pcalibre calibre2">While this code is correct, the spin loop is wasteful of processor resources. We might be tempted to fix this by inserting a <code id="P70004970270000000000000000455C0" data-uri="chapter08.xhtml#P70004970270000000000000000455C0" class="pcalibre1 calibre8 pcalibre">pause</code> in the body of the spin loop:</p>
<pre id="P70004970270000000000000000455C1" data-uri="chapter08.xhtml#P70004970270000000000000000455C1" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000455C2" data-uri="chapter08.xhtml#P70004970270000000000000000455C2" class="calibre10 pcalibre pcalibre1">
while (!pid) /* Race! */
pause ();
</code>
</pre>
<p id="P70004970270000000000000000455C3" data-uri="chapter08.xhtml#P70004970270000000000000000455C3" class="pcalibre1 pcalibre calibre2">Notice that we still need a loop because <code id="P70004970270000000000000000455C4" data-uri="chapter08.xhtml#P70004970270000000000000000455C4" class="pcalibre1 calibre8 pcalibre">pause</code> might be interrupted by the receipt of one or more SIGINT signals. However, this code has a serious race condition: if the SIGCHLD is received after the <code id="P70004970270000000000000000455C5" data-uri="chapter08.xhtml#P70004970270000000000000000455C5" class="pcalibre1 calibre8 pcalibre">while</code> test but before the pause, the <code id="P70004970270000000000000000455C6" data-uri="chapter08.xhtml#P70004970270000000000000000455C6" class="pcalibre1 calibre8 pcalibre">pause</code> will sleep forever.</p>
<p id="P70004970270000000000000000455C7" data-uri="chapter08.xhtml#P70004970270000000000000000455C7" class="pcalibre1 pcalibre calibre2">Another option is to replace the <code id="P70004970270000000000000000455C8" data-uri="chapter08.xhtml#P70004970270000000000000000455C8" class="pcalibre1 calibre8 pcalibre">pause</code> with <code id="P70004970270000000000000000455C9" data-uri="chapter08.xhtml#P70004970270000000000000000455C9" class="pcalibre1 calibre8 pcalibre">sleep</code>:</p>
<pre id="P70004970270000000000000000455CA" data-uri="chapter08.xhtml#P70004970270000000000000000455CA" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000455CB" data-uri="chapter08.xhtml#P70004970270000000000000000455CB" class="calibre10 pcalibre pcalibre1">
while (!pid) /* Too slow! */
sleep(1);
</code>
</pre>
<p id="P70004970270000000000000000455CC" data-uri="chapter08.xhtml#P70004970270000000000000000455CC" class="pcalibre1 pcalibre calibre2">While correct, this code is too slow. If the signal is received after the <code id="P70004970270000000000000000455CD" data-uri="chapter08.xhtml#P70004970270000000000000000455CD" class="pcalibre1 calibre8 pcalibre">while</code> and before the <code id="P70004970270000000000000000455CE" data-uri="chapter08.xhtml#P70004970270000000000000000455CE" class="pcalibre1 calibre8 pcalibre">sleep</code>, the program must wait a (relatively) long time before it can check the loop termination condition again. Using a higher-resolution sleep function such as <code id="P70004970270000000000000000455CF" data-uri="chapter08.xhtml#P70004970270000000000000000455CF" class="pcalibre1 calibre8 pcalibre">nanosleep</code> isn't acceptable, either, because there is no good rule for determining the sleep interval. Make it too small and the loop is too wasteful. Make it too high and the program is too slow.</p>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006DC9" data-uri="chapter08.xhtml#P7000497027000000000000000006DC9">
<p id="P70004970270000000000000000455D0" data-uri="chapter08.xhtml#P70004970270000000000000000455D0" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006DCB" title="779" data-uri="chapter08.xhtml#P7000497027000000000000000006DCB" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/procmask2.c</i></p>
<pre id="P70004970270000000000000000455D1" data-uri="chapter08.xhtml#P70004970270000000000000000455D1" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000455D2" data-uri="chapter08.xhtml#P70004970270000000000000000455D2" class="calibre10 pcalibre pcalibre1">
1	void handler(int sig)
2	{
3		int olderrno = errno;
4		sigset_t mask_all, prev_all;
5		pid_t pid;
6	
7		Sigfillset(&amp;mask_all);
8		while ((pid = waitpid(-1, NULL, 0)) &gt; 0) { /* Reap a zombie child */
9			Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);
10			deletejob(pid); /* Delete the child from the job list */
11			Sigprocmask(SIG_SETMASK, &amp;prev_all, NULL);
12		}
13		if (errno != ECHILD)
14			Sio_error("waitpid error");
15		errno = olderrno; 
16	}
17	
18	int main(int argc, char **argv)
19	{
20		int pid;
21		sigset_t mask_all, mask_one, prev_one;
22	
23		Sigfillset(&amp;mask_all);
24		Sigemptyset(&amp;mask_one);
25		Sigaddset(&amp;mask_one, SIGCHLD);
26		Signal(SIGCHLD, handler);
27		initjobs(); /* Initialize the job list */
28	
29		while (1) {
30			Sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;prev_one); /* Block SIGCHLD */
31			if ((pid = Fork()) == 0) { /* Child process */
32				Sigprocmask(SIG_SETMASK, &amp;prev_one, NULL); /* Unblock SIGCHLD */
33				Execve("/bin/date", argv, NULL);
34			}
35			Sigprocmask(SIG_BLOCK, &amp;mask_all, NULL); /* Parent process */
36			addjob(pid); /* Add the child to the job list */
37			Sigprocmask(SIG_SETMASK, &amp;prev_one, NULL); /* Unblock SIGCHLD */
38		}
39		exit(0);
40	}
</code>
</pre>
<p id="P70004970270000000000000000455D3" data-uri="chapter08.xhtml#P70004970270000000000000000455D3" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/procmask2.c</i></p>
<figcaption id="P70004970270000000000000000455D4" data-uri="chapter08.xhtml#P70004970270000000000000000455D4" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000455D5" data-uri="chapter08.xhtml#P70004970270000000000000000455D5" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.40 </span>Using <code id="P70004970270000000000000000455D6" data-uri="chapter08.xhtml#P70004970270000000000000000455D6" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> to synchronize processes.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000455D7" data-uri="chapter08.xhtml#P70004970270000000000000000455D7"><p id="P70004970270000000000000000455D8" data-uri="chapter08.xhtml#P70004970270000000000000000455D8" class="pcalibre calibre3 pcalibre1">In this example, the parent ensures that <code id="P70004970270000000000000000455D9" data-uri="chapter08.xhtml#P70004970270000000000000000455D9" class="pcalibre1 calibre8 pcalibre">addjob</code> executes before the corresponding <code id="P70004970270000000000000000455DA" data-uri="chapter08.xhtml#P70004970270000000000000000455DA" class="pcalibre1 calibre8 pcalibre">deletejob</code>.
</p></div>
</figcaption>
</figure>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006DD6" data-uri="chapter08.xhtml#P7000497027000000000000000006DD6">
<p id="P70004970270000000000000000455DB" data-uri="chapter08.xhtml#P70004970270000000000000000455DB" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006DD8" title="780" data-uri="chapter08.xhtml#P7000497027000000000000000006DD8" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/waitforsignal.c</i></p>
<pre id="P70004970270000000000000000455DC" data-uri="chapter08.xhtml#P70004970270000000000000000455DC" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000455DD" data-uri="chapter08.xhtml#P70004970270000000000000000455DD" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	volatile sig_atomic_t pid;
4	
5	void sigchld_handler(int s)
6	{
7		int olderrno = errno;
8		pid = waitpid(-1, NULL, 0);
9		errno = olderrno;
10	}
11	
12	void sigint_handler(int s)
13	{
14	}
15	
16	int main(int arge, char **argv)
17	{
18		sigset_t mask, prev;
19	
20		Signal(SIGCHLD, sigchld_handler);
21		Signal(SIGINT, sigintjiandler);
22		Sigemptyset(&amp;mask);
23		Sigaddset(&amp;mask, SIGCHLD);
24	
25		while (1) {
26			Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev); /* Block SIGCHLD */
27			if (Fork() == 0) /* Child */
28				exit(0);
29	
30			/* Parent */
31			pid = 0;
32			Sigprocmask(SIG_SETMASK, &amp;prev, NULL); /* Unblock SIGCHLD */
33	
34			/* Wait for SIGCHLD to be received (wasteful) */
35			while (!pid)
36				;
37	
38			/* Do some work after receiving SIGCHLD */
39			printf(".");
40		}
41		exit(0);
42	}
</code>
</pre>
<p id="P70004970270000000000000000455DE" data-uri="chapter08.xhtml#P70004970270000000000000000455DE" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/waitforsignal.c</i></p>


<figcaption id="P70004970270000000000000000455DF" data-uri="chapter08.xhtml#P70004970270000000000000000455DF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000455E0" data-uri="chapter08.xhtml#P70004970270000000000000000455E0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.41 </span>Waiting for a signal with a spin loop. </h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000455E1" data-uri="chapter08.xhtml#P70004970270000000000000000455E1"><p id="P70004970270000000000000000455E2" data-uri="chapter08.xhtml#P70004970270000000000000000455E2" class="pcalibre calibre3 pcalibre1">This code is correct, but the spin loop is wasteful.</p></div>
</figcaption>
</figure>


<p id="P70004970270000000000000000455E3" data-uri="chapter08.xhtml#P70004970270000000000000000455E3" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006DE1" title="781" data-uri="chapter08.xhtml#P7000497027000000000000000006DE1" epub:type="pagebreak"></span>The proper solution is to use sigsuspend.</p>
<pre id="P70004970270000000000000000455E4" data-uri="chapter08.xhtml#P70004970270000000000000000455E4" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000455E5" data-uri="chapter08.xhtml#P70004970270000000000000000455E5" class="calibre10 pcalibre pcalibre1">
#include &lt;signal.h&gt;
int sigsuspend(const sigset_t *mask);
				Returns: -1
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000455E6" data-uri="chapter08.xhtml#P70004970270000000000000000455E6">The <code id="P70004970270000000000000000455E7" data-uri="chapter08.xhtml#P70004970270000000000000000455E7" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> function temporarily replaces the current blocked set with mask and then suspends the process until the receipt of a signal whose action is either to run a handler or to terminate the process. If the action is to terminate, then the process terminates without returning from <code id="P70004970270000000000000000455E8" data-uri="chapter08.xhtml#P70004970270000000000000000455E8" class="pcalibre1 calibre8 pcalibre">sigsuspend</code>. If the action is to run a handler, then <code id="P70004970270000000000000000455E9" data-uri="chapter08.xhtml#P70004970270000000000000000455E9" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> returns after the handler returns, restoring the blocked set to its state when <code id="P70004970270000000000000000455EA" data-uri="chapter08.xhtml#P70004970270000000000000000455EA" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> was called.</p>
<p id="P70004970270000000000000000455EB" data-uri="chapter08.xhtml#P70004970270000000000000000455EB" class="pcalibre1 pcalibre calibre2">The <code id="P70004970270000000000000000455EC" data-uri="chapter08.xhtml#P70004970270000000000000000455EC" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> function is equivalent to an <i class="calibre5 pcalibre pcalibre1">atomic</i> (uninterruptible) version of the following:</p>
<pre id="P70004970270000000000000000455ED" data-uri="chapter08.xhtml#P70004970270000000000000000455ED" class="calibre9 pcalibre pcalibre1">
<code id="P70004970270000000000000000455EE" data-uri="chapter08.xhtml#P70004970270000000000000000455EE" class="calibre10 pcalibre pcalibre1">
1	sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev);
2	pause();
3	sigprocmask(SIG_SETMASK, &amp;prev, NULL);
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000455EF" data-uri="chapter08.xhtml#P70004970270000000000000000455EF">The atomic property guarantees that the calls to <code id="P70004970270000000000000000455F0" data-uri="chapter08.xhtml#P70004970270000000000000000455F0" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> (line 1) and <code id="P70004970270000000000000000455F1" data-uri="chapter08.xhtml#P70004970270000000000000000455F1" class="pcalibre1 calibre8 pcalibre">pause</code> (line 2) occur together, without being interrupted. This eliminates the potential race where a signal is received after the call to <code id="P70004970270000000000000000455F2" data-uri="chapter08.xhtml#P70004970270000000000000000455F2" class="pcalibre1 calibre8 pcalibre">sigprocmask</code> and before the call to pause.</p>
<p id="P70004970270000000000000000455F3" data-uri="chapter08.xhtml#P70004970270000000000000000455F3" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006DFA.xhtml#P7000497027000000000000000006DFF"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.42 </span></a>shows how we would use <code id="P70004970270000000000000000455F4" data-uri="chapter08.xhtml#P70004970270000000000000000455F4" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> to replace the spin loop in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.41</span>. Before each call to <code id="P70004970270000000000000000455F5" data-uri="chapter08.xhtml#P70004970270000000000000000455F5" class="pcalibre1 calibre8 pcalibre">sigsuspend</code>, SIGCHLD is blocked. The <code id="P70004970270000000000000000455F6" data-uri="chapter08.xhtml#P70004970270000000000000000455F6" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> temporarily unblocks SIGCHLD, and then sleeps until the parent catches a signal. Before returning, it restores the original blocked set, which blocks SIGCHLD again. If the parent caught a SIGINT, then the loop test succeeds and the next iteration calls <code id="P70004970270000000000000000455F7" data-uri="chapter08.xhtml#P70004970270000000000000000455F7" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> again. If the parent caught a SIGCHLD, then the loop test fails and we exit the loop. At this point, SIGCHLD is blocked, and so we can optionally unblock SIGCHLD. This might be useful in a real shell with background jobs that need to be reaped.</p>
<p id="P70004970270000000000000000455F8" data-uri="chapter08.xhtml#P70004970270000000000000000455F8" class="pcalibre1 pcalibre calibre2">The <code id="P70004970270000000000000000455F9" data-uri="chapter08.xhtml#P70004970270000000000000000455F9" class="pcalibre1 calibre8 pcalibre">sigsuspend</code> version is less wasteful than the original spin loop, avoids the race introduced by <code id="P70004970270000000000000000455FA" data-uri="chapter08.xhtml#P70004970270000000000000000455FA" class="pcalibre1 calibre8 pcalibre">pause</code>, and is more efficient than <code id="P70004970270000000000000000455FB" data-uri="chapter08.xhtml#P70004970270000000000000000455FB" class="pcalibre1 calibre8 pcalibre">sleep</code>.</p>
</section>
</section></body></html>
