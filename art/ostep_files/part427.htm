<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>39.11 Reading Directories</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part426.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part428.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">39.11 Reading Directories</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Now that we’ve created a directory, we might wish to read one too. Indeed, that is exactly what the program <span class="s41">ls </span>does. Let’s write our own little tool like <span class="s41">ls </span>and see how it is done.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Instead of just opening a directory as if it were a file, we instead use a new set of calls. Below is an example program that prints the contents of a directory. The program uses three calls, <span class="s41">opendir()</span>, <span class="s41">readdir()</span>, and <span class="s41">closedir()</span>, to get the job done, and you can see how simple the interface is; we just use a simple loop to read one directory entry at a time, and print out the name and inode number of each file in the directory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 5pt;padding-left: 85pt;text-indent: -16pt;line-height: 89%;text-align: left;">int main(int argc, char <span class="s39">*</span>argv[]) { DIR <span class="s39">*</span>dp = opendir(&quot;.&quot;); assert(dp != NULL);</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 8pt;text-align: left;">struct dirent <span class="s39">*</span>d;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 7pt;text-align: left;">while ((d = readdir(dp)) != NULL) {</p><p class="s38" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">printf(&quot;%d %s\n&quot;, (int) d-&gt;d_ino, d-&gt;d_name);</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">}</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">closedir(dp); return 0;</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: left;">The declaration below shows the information available within each directory entry in the <span class="s41">struct dirent </span>data structure:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">struct dirent {</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 9pt;text-align: left;">char    d_name[256]; /<span class="s39">* </span>filename <span class="s39">*</span>/</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 83%;text-align: left;">ino_t    d_ino;   /<span class="s39">* </span>inode number <span class="s39">*</span>/</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 89%;text-align: left;">off_t    d_off;   /<span class="s39">* </span>offset to the next dirent <span class="s39">*</span>/ unsigned short d_reclen;  /<span class="s39">* </span>length of this record <span class="s39">*</span>/ unsigned char d_type;   /<span class="s39">* </span>type of file <span class="s39">*</span>/</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;line-height: 7pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Because directories are light on information (basically, just mapping the name to the inode number, along with a few other details), a program may want to call <span class="s41">stat() </span>on each file to get more information on each, such as its length or other detailed information. Indeed, this is exactly what <span class="s41">ls </span>does when you pass it the <span class="s41">-l </span>flag; try <span class="s41">strace </span>on <span class="s41">ls </span>with and without that flag to see for yourself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part426.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part428.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
