<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>2.4 DNS—The Internet’s Directory Service</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000000C38" class="level1"><header><h1 class="title" id="P7001011952000000000000000009CD4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD4" epub:type="title"><span class="number">2.4</span> DNS—The Internet’s Directory Service</h1></header>
<p id="P7001011952000000000000000009CD5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD5">We human beings can be identified in many ways. For example, we can be identified by the names that appear on our birth certificates. We can be identified by our social security numbers. We can be identified by our driver’s license numbers. Although each of these identifiers can be used to identify people, within a given context one identifier may be more appropriate than another. For example, the computers at the IRS (the infamous tax-collecting agency in the United States) prefer to use fixed-length social security numbers rather than birth certificate names. On the other hand, ordinary people prefer the more mnemonic birth certificate names rather than social security numbers. (Indeed, can you imagine saying, “Hi. My name is 132-67-9875. Please meet my husband, 178-87-1146.”)</p>
<p id="P7001011952000000000000000009CD6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD6">Just as humans can be identified in many ways, so too can Internet hosts. One identifier for a host is its <span class="keyword" id="P7001011952000000000000000000C3C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C3C"><b>hostname</b></span>. Hostnames—such as <code id="P7001011952000000000000000009CD7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD7"><span class="url-obsolete">www.facebook.com</span>, <span class="url-obsolete">www.google.com</span></code>, <code id="P7001011952000000000000000009CD8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD8"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>—are mnemonic and are therefore <span class="pagebreak" title="127" id="P7001011952000000000000000000C3F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C3F" epub:type="pagebreak" role="doc-pagebreak"></span>appreciated by humans. However, hostnames provide little, if any, information about the location within the Internet of the host. (A hostname such as <code id="P7001011952000000000000000009CD9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CD9"><a class="ulink" href="http://www.eurecom.fr">www.eurecom.fr</a></code>, which ends with the country code <code id="P7001011952000000000000000009CDA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDA">.fr</code>, tells us that the host is probably in France, but doesn’t say much more.) Furthermore, because hostnames can consist of variable-length alphanumeric characters, they would be difficult to process by routers. For these reasons, hosts are also identified by so-called <span class="keyword" id="P7001011952000000000000000000C42" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C42"><b>IP addresses</b></span>.</p>
<p id="P7001011952000000000000000009CDB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDB">We discuss IP addresses in some detail in <a class="xref" href="fileP70010119520000000000000000019C1.xhtml#P70010119520000000000000000019C1" data-foobar="7"><span class="label">Chapter</span> <span class="number">4</span></a>, but it is useful to say a few brief words about them now. An IP address consists of four bytes and has a rigid hierarchical structure. An IP address looks like <code id="P7001011952000000000000000009CDC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDC">121.7.106.83</code>, where each period separates one of the bytes expressed in decimal notation from 0 to 255. An IP address is hierarchical because as we scan the address from left to right, we obtain more and more specific information about where the host is located in the Internet (that is, within which network, in the network of networks). Similarly, when we scan a postal address from bottom to top, we obtain more and more specific information about where the addressee is located.</p>
<section id="P7001011952000000000000000000C45" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C45" class="level2"><header><h1 class="title" id="P7001011952000000000000000009CDD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDD" epub:type="title"><span class="number">2.4.1</span> Services Provided by DNS</h1></header>
<p id="P7001011952000000000000000009CDE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDE">We have just seen that there are two ways to identify a host—by a hostname and by an IP address. People prefer the more mnemonic hostname identifier, while routers prefer fixed-length, hierarchically structured IP addresses. In order to reconcile these preferences, we need a directory service that translates hostnames to IP addresses. This is the main task of the Internet’s <b>domain name system (DNS)</b>. The DNS is (1) a distributed database implemented in a hierarchy of <b>DNS servers</b>, and (2) an application-layer protocol that allows hosts to query the distributed database. The DNS servers are often UNIX machines running the Berkeley Internet Name Domain (BIND) software <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000383B" data-foobar="7">[BIND 2016]</a>. The DNS protocol runs over UDP and uses port 53.</p>
<p id="P7001011952000000000000000009CDF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CDF">DNS is commonly employed by other application-layer protocols—including HTTP and SMTP to translate user-supplied hostnames to IP addresses. As an example, consider what happens when a browser (that is, an HTTP client), running on some user’s host, requests the URL <code id="P7001011952000000000000000009CE0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE0"><span class="url-obsolete">www.someschool.edu/index.html</span></code>. In order for the user’s host to be able to send an HTTP request message to the Web server <code id="P7001011952000000000000000009CE1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE1"><span class="url-obsolete">www.someschool.edu</span></code>, the user’s host must first obtain the IP address of <code id="P7001011952000000000000000009CE2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE2"><span class="url-obsolete">www.someschool.edu</span></code>. This is done as follows.</p>
<ol id="P7001011952000000000000000009CE3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE3">
<li id="P7001011952000000000000000009CE4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE4"><p id="P7001011952000000000000000009CE5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE5">The same user machine runs the client side of the DNS application.</p></li>
<li id="P7001011952000000000000000009CE6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE6"><p id="P7001011952000000000000000009CE7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE7">The browser extracts the hostname, <code id="P7001011952000000000000000009CE8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE8"><span class="url-obsolete">www.someschool.edu</span></code>, from the URL and passes the hostname to the client side of the DNS application.</p></li>
<li id="P7001011952000000000000000009CE9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CE9"><p id="P7001011952000000000000000009CEA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CEA">The DNS client sends a query containing the hostname to a DNS server.</p></li>
<li id="P7001011952000000000000000009CEB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CEB"><p id="P7001011952000000000000000009CEC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CEC">The DNS client eventually receives a reply, which includes the IP address for the hostname.</p></li>
<li id="P7001011952000000000000000009CED" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CED"><p id="P7001011952000000000000000009CEE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CEE">Once the browser receives the IP address from DNS, it can initiate a TCP connection to the HTTP server process located at port 80 at that IP address.</p></li>
</ol>
<p class="continued" id="P7001011952000000000000000009CEF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CEF"><span class="pagebreak" title="128" id="P7001011952000000000000000000C59" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C59" epub:type="pagebreak" role="doc-pagebreak"></span>We see from this example that DNS adds an additional delay—sometimes substantial—to the Internet applications that use it. Fortunately, as we discuss below, the desired IP address is often cached in a “nearby” DNS server, which helps to reduce DNS network traffic as well as the average DNS delay.</p>
<p id="P7001011952000000000000000009CF0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF0">DNS provides a few other important services in addition to translating hostnames to IP addresses:</p>
<ul id="P7001011952000000000000000009CF1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF1">
<li id="P7001011952000000000000000009CF2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF2"><p id="P7001011952000000000000000009CF3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF3"><span class="keyword" id="P7001011952000000000000000000C5E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C5E"><b>Host aliasing.</b></span> A host with a complicated hostname can have one or more alias names. For example, a hostname such as <code id="P7001011952000000000000000009CF4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF4"><span class="url-obsolete">relay1.west-coast.enterprise.com</span></code> could have, say, two aliases such as <code id="P7001011952000000000000000009CF5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF5"><a class="ulink" href="http://enterprise.com">enterprise.com</a></code> and <code id="P7001011952000000000000000009CF6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF6"><a class="ulink" href="http://www.enterprise.com">www.enterprise.com</a></code>. In this case, the hostname <code id="P7001011952000000000000000009CF7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF7"><span class="url-obsolete">relay1.west-coast.enterprise.com</span></code> is said to be a <span class="keyword" id="P7001011952000000000000000000C63" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C63"><b>canonical hostname</b></span>. Alias hostnames, when present, are typically more mnemonic than canonical hostnames. DNS can be invoked by an application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host.</p></li>
<li id="P7001011952000000000000000009CF8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF8"><p id="P7001011952000000000000000009CF9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CF9"><span class="keyword" id="P7001011952000000000000000000C66" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C66">Mail server aliasing.</span> For obvious reasons, it is highly desirable that e-mail addresses be mnemonic. For example, if Bob has an account with Yahoo Mail, Bob’s e-mail address might be as simple as <code id="P7001011952000000000000000009CFA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFA"><a class="email" href="mailto:bob@hotmail.com">bob@yahoo.mail</a></code>. However, the hostname of the Yahoo mail server is more complicated and much less mnemonic than simply <code id="P7001011952000000000000000009CFB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFB"><a class="ulink" href="http://hotmail.com">yahoo.com</a></code> (for example, the canonical hostname might be something like <code id="P7001011952000000000000000009CFC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFC"><span class="url-obsolete">relay1.west-coast.yahoo.com</span></code>). DNS can be invoked by a mail application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. In fact, the MX record (see below) permits a company’s mail server and Web server to have identical (aliased) hostnames; for example, a company’s Web server and mail server can both be called <code id="P7001011952000000000000000009CFD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFD"><a class="ulink" href="http://enterprise.com">enterprise.com</a></code>.</p></li>
<li id="P7001011952000000000000000009CFE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFE"><p id="P7001011952000000000000000009CFF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009CFF"><span class="keyword" id="P7001011952000000000000000000C6D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C6D"><b>Load distribution.</b></span> DNS is also used to perform load distribution among replicated servers, such as replicated Web servers. Busy sites, such as <code id="P7001011952000000000000000009D00" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D00"><a class="ulink" href="http://cnn.com">cnn.com</a></code>, are replicated over multiple servers, with each server running on a different end system and each having a different IP address. For replicated Web servers, a <i>set</i> of IP addresses is thus associated with one canonical hostname. The DNS database contains this set of IP addresses. When clients make a DNS query for a name mapped to a set of addresses, the server responds with the entire set of IP addresses, but rotates the ordering of the addresses within each reply. Because a client typically sends its HTTP request message to the IP address that is listed first in the set, DNS rotation distributes the traffic among the replicated servers. DNS rotation is also used for e-mail so that multiple mail servers can have the same alias name. Also, content distribution companies such as Akamai have used DNS in more sophisticated ways <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038CA" data-foobar="7">[Dilley 2002]</a> to provide Web content distribution (see <a class="xref" href="fileP7001011952000000000000000000DC1.xhtml#P7001011952000000000000000000DD5" data-foobar="7"><span class="label">Section</span> <span class="number">2.6.3</span></a>).</p></li>
</ul>
<p id="P7001011952000000000000000009D01" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D01">The DNS is specified in RFC 1034 and RFC 1035, and updated in several additional RFCs. It is a complex system, and we only touch upon key aspects of its</p>
<aside class="sidebar" id="P7001011952000000000000000000C70" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C70"><header><h1 class="title" id="P7001011952000000000000000009D02" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D02" epub:type="title"><span class="pagebreak" title="129" id="P7001011952000000000000000000C72" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C72" epub:type="pagebreak" role="doc-pagebreak"></span><span class="label">PRINCIPLES IN PRACTICE </span></h1></header>
<section id="P7001011952000000000000000000C73" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C73"><header><h1 class="title" id="P7001011952000000000000000009D03" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D03" epub:type="title">DNS: CRITICAL NETWORK FUNCTIONS VIA THE CLIENT-SERVER PARADIGM</h1></header>
<p id="P7001011952000000000000000009D04" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D04">Like HTTP, FTP, and SMTP, the DNS protocol is an application-layer protocol since it (1) runs between communicating end systems using the client-server paradigm and (2) relies on an underlying end-to-end transport protocol to transfer DNS messages between communicating end systems. In another sense, however, the role of the DNS is quite different from Web, file transfer, and e-mail applications. Unlike these applications, the DNS is not an application with which a user directly interacts. Instead, the DNS provides a core Internet function—namely, translating hostnames to their underlying IP addresses, for user applications and other software in the Internet. We noted in <a class="xref" href="fileP70010119520000000000000000004B3.xhtml#P70010119520000000000000000004B3" data-foobar="7"><span class="label">Section</span> <span class="number">1.2</span></a> that much of the complexity in the Internet architecture is located at the “edges” of the network. The DNS, which implements the critical name-to-address translation process using clients and servers located at the edge of the network, is yet another example of that design philosophy.</p>
</section>
</aside>
<p class="continued" id="P7001011952000000000000000009D05" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D05">operation here. The interested reader is referred to these RFCs and the book by Albitz and Liu <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003803" data-foobar="7">[Albitz 1993]</a>; see also the retrospective paper <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A52" data-foobar="7">[Mockapetris 1988]</a>, which provides a nice description of the what and why of DNS, and <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A54" data-foobar="7">[Mockapetris 2005]</a>.</p>
</section>
<section id="P7001011952000000000000000000C77" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C77" class="level2"><header><h1 class="title" id="P7001011952000000000000000009D06" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D06" epub:type="title"><span class="number">2.4.2</span> Overview of How DNS Works</h1></header>
<p id="P7001011952000000000000000009D07" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D07">We now present a high-level overview of how DNS works. Our discussion will focus on the hostname-to-IP-address translation service.</p>
<p id="P7001011952000000000000000009D08" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D08">Suppose that some application (such as a Web browser or a mail reader) running in a user’s host needs to translate a hostname to an IP address. The application will invoke the client side of DNS, specifying the hostname that needs to be translated. (On many UNIX-based machines, <code id="P7001011952000000000000000009D09" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D09">gethostbyname()</code> is the function call that an application calls in order to perform the translation.) DNS in the user’s host then takes over, sending a query message into the network. All DNS query and reply messages are sent within UDP datagrams to port 53. After a delay, ranging from milliseconds to seconds, DNS in the user’s host receives a DNS reply message that provides the desired mapping. This mapping is then passed to the invoking application. Thus, from the perspective of the invoking application in the user’s host, DNS is a black box providing a simple, straightforward translation service. But in fact, the black box that implements the service is complex, consisting of a large number of DNS servers distributed around the globe, as well as an application-layer protocol that specifies how the DNS servers and querying hosts communicate.</p>
<p id="P7001011952000000000000000009D0A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0A">A simple design for DNS would have one DNS server that contains all the mappings. In this centralized design, clients simply direct all queries to the single DNS server, and the DNS server responds directly to the querying clients. Although the <span class="pagebreak" title="130" id="P7001011952000000000000000000C7D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C7D" epub:type="pagebreak" role="doc-pagebreak"></span>simplicity of this design is attractive, it is inappropriate for today’s Internet, with its vast (and growing) number of hosts. The problems with a centralized design include:</p>
<ul id="P7001011952000000000000000009D0B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0B">
<li id="P7001011952000000000000000009D0C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0C"><p id="P7001011952000000000000000009D0D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0D"><span class="leadin">A single point of failure</span>. If the DNS server crashes, so does the entire Internet!</p></li>
<li id="P7001011952000000000000000009D0E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0E"><p id="P7001011952000000000000000009D0F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D0F"><span class="leadin">Traffic volume</span>. A single DNS server would have to handle all DNS queries (for all the HTTP requests and e-mail messages generated from hundreds of millions of hosts).</p></li>
<li id="P7001011952000000000000000009D10" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D10"><p id="P7001011952000000000000000009D11" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D11"><span class="leadin">Distant centralized database</span>. A single DNS server cannot be “close to” all the querying clients. If we put the single DNS server in New York City, then all queries from Australia must travel to the other side of the globe, perhaps over slow and congested links. This can lead to significant delays.</p></li>
<li id="P7001011952000000000000000009D12" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D12"><p id="P7001011952000000000000000009D13" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D13"><span class="leadin">Maintenance</span>. The single DNS server would have to keep records for all Internet hosts. Not only would this centralized database be huge, but it would have to be updated frequently to account for every new host.</p></li>
</ul>
<p id="P7001011952000000000000000009D14" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D14">In summary, a centralized database in a single DNS server simply <i>doesn’t scale.</i> Consequently, the DNS is distributed by design. In fact, the DNS is a wonderful example of how a distributed database can be implemented in the Internet.</p>
<section id="P7001011952000000000000000000C88" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C88" class="level3"><header><h1 class="title" id="P7001011952000000000000000009D15" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D15" epub:type="title">A Distributed, Hierarchical Database</h1></header>
<p id="P7001011952000000000000000009D16" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D16">In order to deal with the issue of scale, the DNS uses a large number of servers, organized in a hierarchical fashion and distributed around the world. No single DNS server has all of the mappings for all of the hosts in the Internet. Instead, the mappings are distributed across the DNS servers. To a first approximation, there are three classes of DNS servers—root DNS servers, top-level domain (TLD) DNS servers, and authoritative DNS servers—organized in a hierarchy as shown in <a class="xref" href="#P7001011952000000000000000000C8C" data-foobar="1"><span class="label">Figure</span> <span class="number">2.17</span></a>. To understand how these three classes of servers interact, suppose a DNS client wants to determine the IP address for the hostname <code id="P7001011952000000000000000009D17" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D17"><a class="ulink" href="http://www.amazon.com">www.amazon.com</a></code>. To a first</p>
<figure id="P7001011952000000000000000000C8C" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C8C">
<img alt="A portion of the hierarchy of DNS servers." height="242" width="669" aria-describedby="P7001011952000000000000000000C90" id="P7001011952000000000000000009D18" data-uri="P700101195200000000000000000552F" src="../images/4055102017.png"></img>
<figcaption id="P7001011952000000000000000009D19" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D19"><header><h1 class="title" id="P7001011952000000000000000009D1A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D1A" epub:type="title"><span class="label">Figure </span><span class="number">2.17</span> Portion of the hierarchy of DNS servers</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000C90" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C90" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102017.xhtml#la_4055102017"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009D1C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D1C"><span class="pagebreak" title="131" id="P7001011952000000000000000000C93" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C93" epub:type="pagebreak" role="doc-pagebreak"></span>approximation, the following events will take place. The client first contacts one of the root servers, which returns IP addresses for TLD servers for the top-level domain <code id="P7001011952000000000000000009D1D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D1D">com</code>. The client then contacts one of these TLD servers, which returns the IP address of an authoritative server for <code id="P7001011952000000000000000009D1E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D1E"><a class="ulink" href="http://amazon.com">amazon.com</a></code>. Finally, the client contacts one of the authoritative servers for <code id="P7001011952000000000000000009D1F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D1F"><a class="ulink" href="http://amazon.com">amazon.com</a></code>, which returns the IP address for the hostname <code id="P7001011952000000000000000009D20" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D20"><a class="ulink" href="http://www.amazon.com">www.amazon.com</a></code>. We’ll soon examine this DNS lookup process in more detail. But let’s first take a closer look at these three classes of DNS servers:</p>
<ul id="P7001011952000000000000000009D21" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D21">
<li id="P7001011952000000000000000009D22" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D22"><p id="P7001011952000000000000000009D23" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D23"><span class="leadin">Root DNS servers.</span> There are over 400 root name servers scattered all over the world. <a class="xref" href="#P7001011952000000000000000000C9F" data-foobar="1"><span class="label">Figure</span> <span class="number">2.18</span></a> shows the countries that have root names servers, with countries having more than ten darkly shaded. These root name servers are managed by 13 different organizations. The full list of root name servers, along with the organizations that manage them and their IP addresses can be found at <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BD6" data-foobar="7">[Root Servers 2016]</a>. Root name servers provide the IP addresses of the TLD servers.</p></li>
<li id="P7001011952000000000000000009D24" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D24"><p id="P7001011952000000000000000009D25" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D25"><span class="leadin">Top-level domain (TLD) servers</span>. For each of the top-level domains — top-level domains such as com, org, net, edu, and gov, and all of the country top-level domains such as uk, fr, ca, and jp — there is TLD server (or server cluster). The company Verisign Global Registry Services maintains the TLD servers for the <code id="P7001011952000000000000000009D26" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D26">com</code> top-level domain, and the company Educause maintains the TLD servers for the <code id="P7001011952000000000000000009D27" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D27">edu</code> top-level domain. The network infrastructure supporting a TLD can be large and complex; see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A8E" data-foobar="7">[Osterweil 2012]</a> for a nice overview of the Verisign network. See <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C49" data-foobar="7">[TLD list 2016]</a> for a list of all top-level domains. TLD servers provide the IP addresses for authoritative DNS servers.</p>
<figure id="P7001011952000000000000000000C9F" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000C9F">
<img alt="" height="402" width="799" id="P7001011952000000000000000009D28" data-uri="P7001011952000000000000000005530" src="../images/4055102018.png"></img>
<figcaption id="P7001011952000000000000000009D29" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D29"><header><h1 class="title" id="P7001011952000000000000000009D2A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2A" epub:type="title"><span class="label">Figure </span><span class="number">2.18</span> DNS root servers in 2016</h1></header>
</figcaption>
</figure>
</li>
<li id="P7001011952000000000000000009D2B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2B"><p id="P7001011952000000000000000009D2C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2C"><span class="pagebreak" title="132" id="P7001011952000000000000000000CA5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CA5" epub:type="pagebreak" role="doc-pagebreak"></span><span class="leadin">Authoritative DNS servers</span>. Every organization with publicly accessible hosts (such as Web servers and mail servers) on the Internet must provide publicly accessible DNS records that map the names of those hosts to IP addresses. An organization’s authoritative DNS server houses these DNS records. An organization can choose to implement its own authoritative DNS server to hold these records; alternatively, the organization can pay to have these records stored in an authoritative DNS server of some service provider. Most universities and large companies implement and maintain their own primary and secondary (backup) authoritative DNS server.</p></li>
</ul>
<p id="P7001011952000000000000000009D2D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2D">The root, TLD, and authoritative DNS servers all belong to the hierarchy of DNS servers, as shown in <a class="xref" href="#P7001011952000000000000000000C8C" data-foobar="1"><span class="label">Figure</span> <span class="number">2.17</span></a>. There is another important type of DNS server called the <span class="keyword" id="P7001011952000000000000000000CA7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CA7"><b>local DNS server</b></span>. A local DNS server does not strictly belong to the hierarchy of servers but is nevertheless central to the DNS architecture. Each ISP—such as a residential ISP or an institutional ISP—has a local DNS server (also called a default name server). When a host connects to an ISP, the ISP provides the host with the IP addresses of one or more of its local DNS servers (typically through DHCP, which is discussed in <a class="xref" href="fileP70010119520000000000000000019C1.xhtml#P70010119520000000000000000019C1" data-foobar="7"><span class="label">Chapter</span> <span class="number">4</span></a>). You can easily determine the IP address of your local DNS server by accessing network status windows in Windows or UNIX. A host’s local DNS server is typically “close to” the host. For an institutional ISP, the local DNS server may be on the same LAN as the host; for a residential ISP, it is typically separated from the host by no more than a few routers. When a host makes a DNS query, the query is sent to the local DNS server, which acts a proxy, forwarding the query into the DNS server hierarchy, as we’ll discuss in more detail below.</p>
<p id="P7001011952000000000000000009D2E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2E">Let’s take a look at a simple example. Suppose the host <code id="P7001011952000000000000000009D2F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D2F"><span class="url-obsolete">cse.nyu.edu</span></code> desires the IP address of <code id="P7001011952000000000000000009D30" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D30"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>. Also suppose that NYU’s ocal DNS server for <code id="P7001011952000000000000000009D31" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D31"><span class="url-obsolete">cse.nyu.edu</span></code> is called <code id="P7001011952000000000000000009D32" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D32"><span class="url-obsolete">dns.nyu.edu</span></code> and that an authoritative DNS server for <code id="P7001011952000000000000000009D33" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D33"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code> is called <code id="P7001011952000000000000000009D34" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D34"><span class="url-obsolete">dns.umass.edu</span></code>. As shown in <a class="xref" href="#P7001011952000000000000000000CB9" data-foobar="1"><span class="label">Figure</span> <span class="number">2.19</span></a>, the host <code id="P7001011952000000000000000009D35" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D35"><span class="url-obsolete">cse.nyu.edu</span></code> first sends a DNS query message to its local DNS server, <code id="P7001011952000000000000000009D36" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D36"><span class="url-obsolete">dns.nyu.edu</span></code>. The query message contains the hostname to be translated, namely, <code id="P7001011952000000000000000009D37" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D37"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>. The local DNS server forwards the query message to a root DNS server. The root DNS server takes note of the edu suffix and returns to the local DNS server a list of IP addresses for TLD servers responsible for <code id="P7001011952000000000000000009D38" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D38">edu</code>. The local DNS server then resends the query message to one of these TLD servers. The TLD server takes note of the <code id="P7001011952000000000000000009D39" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D39"><a class="ulink" href="http://umass.edu">umass.edu</a></code> suffix and responds with the IP address of the authoritative DNS server for the University of Massachusetts, namely, <code id="P7001011952000000000000000009D3A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D3A"><span class="url-obsolete">dns.umass.edu</span></code>. Finally, the local DNS server resends the query message directly to <code id="P7001011952000000000000000009D3B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D3B"><span class="url-obsolete">dns.umass.edu</span></code>, which responds with the IP address of <code id="P7001011952000000000000000009D3C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D3C"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>. Note that in this example, in order to obtain the mapping for one hostname, eight DNS messages were sent: four query messages and four reply messages! We’ll soon see how DNS caching reduces this query traffic.</p>
<p id="P7001011952000000000000000009D3D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D3D">Our previous example assumed that the TLD server knows the authoritative DNS server for the hostname. In general this not always true. Instead, the TLD server<span class="pagebreak" title="133" id="P7001011952000000000000000000CB8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CB8" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000CB9" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CB9">
<img alt="Interactions of the various DNS servers." height="587" width="417" aria-describedby="P7001011952000000000000000000CBD" id="P7001011952000000000000000009D3E" data-uri="P7001011952000000000000000005531" src="../images/4055102019.png"></img>
<figcaption id="P7001011952000000000000000009D3F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D3F"><header><h1 class="title" id="P7001011952000000000000000009D40" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D40" epub:type="title"><span class="label">Figure </span><span class="number">2.19</span> Interaction of the various DNS servers</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000CBD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CBD" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102019.xhtml#la_4055102019"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009D43" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D43">may know only of an intermediate DNS server, which in turn knows the authoritative DNS server for the hostname. For example, suppose again that the University of Massachusetts has a DNS server for the university, called <code id="P7001011952000000000000000009D44" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D44"><span class="url-obsolete">dns.umass.edu</span></code>. Also suppose that each of the departments at the University of Massachusetts has its own DNS server, and that each departmental DNS server is authoritative for all hosts in the department. In this case, when the intermediate DNS server, <code id="P7001011952000000000000000009D45" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D45"><span class="url-obsolete">dns.umass.edu</span></code>, receives a query for a host with a hostname ending with <code id="P7001011952000000000000000009D46" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D46"><a class="ulink" href="http://cs.umass.edu">cs.umass.edu</a></code>, it returns to <code id="P7001011952000000000000000009D47" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D47"><span class="url-obsolete">dns.nyu.edu</span></code> the IP address of <code id="P7001011952000000000000000009D48" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D48"><span class="url-obsolete">dns.cs.umass.edu</span></code>, which is authoritative for all hostnames ending with <code id="P7001011952000000000000000009D49" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D49"><a class="ulink" href="http://cs.umass.edu">cs.umass.edu</a></code>. The local DNS server <code id="P7001011952000000000000000009D4A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4A"><span class="url-obsolete">dns.nyu.edu</span></code> then sends the query to the authoritative DNS server, which returns the desired mapping to the local DNS server, which in turn returns the mapping to the requesting host. In this case, a total of 10 DNS messages are sent!</p>
<p id="P7001011952000000000000000009D4B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4B">The example shown in <a class="xref" href="#P7001011952000000000000000000CB9" data-foobar="1"><span class="label">Figure</span> <span class="number">2.19</span></a> makes use of both <span class="keyword" id="P7001011952000000000000000000CC9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CC9"><b>recursive queries</b></span> and <span class="keyword" id="P7001011952000000000000000000CCA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CCA"><b>iterative queries</b></span>. The query sent from <code id="P7001011952000000000000000009D4C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4C"><span class="url-obsolete">cse.nyu.edu</span></code> to <code id="P7001011952000000000000000009D4D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4D"><span class="url-obsolete">dns.nyu.edu</span></code> <span class="pagebreak" title="134" id="P7001011952000000000000000000CCD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CCD" epub:type="pagebreak" role="doc-pagebreak"></span>is a recursive query, since the query asks <code id="P7001011952000000000000000009D4E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4E">dns.nyu.edu</code> to obtain the mapping on its behalf. But the subsequent three queries are iterative since all of the replies are directly returned to <code id="P7001011952000000000000000009D4F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D4F"><span class="url-obsolete">dns.nyu.edu</span></code>. In theory, any DNS query can be iterative or recursive. For example, <a class="xref" href="#P7001011952000000000000000000CD4" data-foobar="1"><span class="label">Figure</span> <span class="number">2.20</span></a> shows a DNS query chain for which all of the queries are recursive. In practice, the queries typically follow the pattern in <a class="xref" href="#P7001011952000000000000000000CB9" data-foobar="1"><span class="label">Figure</span> <span class="number">2.19</span></a>: The query from the requesting host to the local DNS server is recursive, and the remaining queries are iterative.</p>
</section>
<section id="P7001011952000000000000000000CD0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CD0" class="level3"><header><h1 class="title" id="P7001011952000000000000000009D50" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D50" epub:type="title">DNS Caching</h1></header>
<p id="P7001011952000000000000000009D51" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D51">Our discussion thus far has ignored <span class="keyword" id="P7001011952000000000000000000CD3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CD3"><b>DNS caching</b></span>, a critically important feature of the DNS system. In truth, DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages</p>
<figure id="P7001011952000000000000000000CD4" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CD4">
<img alt="Illustration of a DNS query chain." height="628" width="432" aria-describedby="P7001011952000000000000000000CD8" id="P7001011952000000000000000009D52" data-uri="P7001011952000000000000000005532" src="../images/4055102020.png"></img>
<figcaption id="P7001011952000000000000000009D53" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D53"><header><h1 class="title" id="P7001011952000000000000000009D54" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D54" epub:type="title"><span class="label">Figure </span><span class="number">2.20</span> Recursive queries in DNS</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000CD8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CD8" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102020.xhtml#la_4055102020"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009D57" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D57"><span class="pagebreak" title="135" id="P7001011952000000000000000000CDC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CDC" epub:type="pagebreak" role="doc-pagebreak"></span>ricocheting around the Internet. The idea behind DNS caching is very simple. In a query chain, when a DNS server receives a DNS reply (containing, for example, a mapping from a hostname to an IP address), it can cache the mapping in its local memory. For example, in <a class="xref" href="#P7001011952000000000000000000CB9" data-foobar="1"><span class="label">Figure</span> <span class="number">2.19</span></a>, each time the local DNS server <code id="P7001011952000000000000000009D58" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D58"><span class="url-obsolete">dns.nyu.edu</span></code> receives a reply from some DNS server, it can cache any of the information contained in the reply. If a hostname/IP address pair is cached in a DNS server and another query arrives to the DNS server for the same hostname, the DNS server can provide the desired IP address, even if it is not authoritative for the hostname. Because hosts and mappings between hostnames and IP addresses are by no means permanent, DNS servers discard cached information after a period of time (often set to two days).</p>
<p id="P7001011952000000000000000009D59" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D59">As an example, suppose that a host <code id="P7001011952000000000000000009D5A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5A"><span class="url-obsolete">apricot.nyu.edu</span></code> queries <code id="P7001011952000000000000000009D5B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5B"><span class="url-obsolete">dns.nyu.edu</span></code> for the IP address for the hostname <code id="P7001011952000000000000000009D5C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5C"><a class="ulink" href="http://cnn.com">cnn.com</a></code>. Furthermore, ­suppose that a few hours later, another NYU host, say, <code id="P7001011952000000000000000009D5D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5D"><span class="url-obsolete">kiwi.nyu.edu</span></code>, also queries <code id="P7001011952000000000000000009D5E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5E"><span class="url-obsolete">dns.nyu.edu</span></code> with the same hostname. Because of caching, the local DNS server will be able to immediately return the IP address of <code id="P7001011952000000000000000009D5F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D5F"><a class="ulink" href="http://cnn.com">cnn.com</a></code> to this second requesting host without having to query any other DNS servers. A local DNS server can also cache the IP addresses of TLD servers, thereby allowing the local DNS server to bypass the root DNS servers in a query chain. In fact, because of caching, root servers are bypassed for all but a very small fraction of DNS queries.</p>
</section>
</section>
<section id="P7001011952000000000000000000CE5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CE5" class="level2"><header><h1 class="title" id="P7001011952000000000000000009D60" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D60" epub:type="title"><span class="number">2.4.3</span> DNS Records and Messages</h1></header>
<p id="P7001011952000000000000000009D61" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D61">The DNS servers that together implement the DNS distributed database store <span class="keyword" id="P7001011952000000000000000000CE8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CE8"><b>resource records (RRs)</b></span>, including RRs that provide hostname-to-IP address mappings. Each DNS reply message carries one or more resource records. In this and the following subsection, we provide a brief overview of DNS resource records and messages; more details can be found in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003803" data-foobar="7">[Albitz 1993]</a> or in the DNS RFCs <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AEF" data-foobar="7">[RFC 1034</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AF1" data-foobar="7">RFC 1035]</a>.</p>
<p id="P7001011952000000000000000009D62" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D62">A resource record is a four-tuple that contains the following fields:</p>
<pre id="P7001011952000000000000000009D63" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D63"><code id="P7001011952000000000000000009D64" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D64">(Name, Value, Type, TTL)</code></pre>
<p id="P7001011952000000000000000009D65" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D65"><code id="P7001011952000000000000000009D66" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D66">TTL</code> is the time to live of the resource record; it determines when a resource should be removed from a cache. In the example records given below, we ignore the <code id="P7001011952000000000000000009D67" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D67">TTL</code> field. The meaning of <code id="P7001011952000000000000000009D68" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D68">Name</code> and <code id="P7001011952000000000000000009D69" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D69">Value</code> depend on <code id="P7001011952000000000000000009D6A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6A">Type</code>:</p>
<ul id="P7001011952000000000000000009D6B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6B">
<li id="P7001011952000000000000000009D6C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6C"><p id="P7001011952000000000000000009D6D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6D">If <code id="P7001011952000000000000000009D6E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6E">Type=A</code>, then <code id="P7001011952000000000000000009D6F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D6F">Name</code> is a hostname and <code id="P7001011952000000000000000009D70" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D70">Value</code> is the IP address for the hostname. Thus, a Type A record provides the standard hostname-to-IP address mapping. As an example, <code id="P7001011952000000000000000009D71" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D71">(<a class="ulink" href="http://relay1.bar.foo.com">relay1.bar.foo.com</a>, 145.37.93.126, A)</code> is a Type A record.</p></li>
<li id="P7001011952000000000000000009D72" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D72"><p id="P7001011952000000000000000009D73" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D73"><span class="pagebreak" title="136" id="P7001011952000000000000000000CFB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000CFB" epub:type="pagebreak" role="doc-pagebreak"></span>If <code id="P7001011952000000000000000009D74" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D74">Type=NS</code>, then <code id="P7001011952000000000000000009D75" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D75">Name</code> is a domain (such as <code id="P7001011952000000000000000009D76" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D76"><a class="ulink" href="http://foo.com">foo.com</a></code>) and <code id="P7001011952000000000000000009D77" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D77">Value</code> is the hostname of an authoritative DNS server that knows how to obtain the IP addresses for hosts in the domain. This record is used to route DNS queries further along in the query chain. As an example, <code id="P7001011952000000000000000009D78" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D78">(<a class="ulink" href="http://foo.com">foo.com</a>, <a class="ulink" href="http://dns.foo.com">dns.foo.com</a>, NS)</code> is a Type NS record.</p></li>
<li id="P7001011952000000000000000009D79" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D79"><p id="P7001011952000000000000000009D7A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7A">If <code id="P7001011952000000000000000009D7B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7B">Type=CNAME</code>, then <code id="P7001011952000000000000000009D7C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7C">Value</code> is a canonical hostname for the alias hostname <code id="P7001011952000000000000000009D7D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7D">Name</code>. This record can provide querying hosts the canonical name for a hostname. As an example, <code id="P7001011952000000000000000009D7E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7E">(<a class="ulink" href="http://foo.com">foo.com</a>, <a class="ulink" href="http://relay1.bar.foo.com">relay1.bar.foo.com</a>, CNAME)</code> is a CNAME record.</p></li>
<li id="P7001011952000000000000000009D7F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D7F"><p id="P7001011952000000000000000009D80" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D80">If <code id="P7001011952000000000000000009D81" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D81">Type=MX</code>, then <code id="P7001011952000000000000000009D82" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D82">Value</code> is the canonical name of a mail server that has an alias hostname <code id="P7001011952000000000000000009D83" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D83">Name</code>. As an example, <code id="P7001011952000000000000000009D84" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D84">(<a class="ulink" href="http://foo.com">foo.com</a>, <a class="ulink" href="http://mail.bar.foo.com">mail.bar.foo.com</a>, MX)</code> is an MX record. MX records allow the hostnames of mail servers to have simple aliases. Note that by using the MX record, a company can have the same aliased name for its mail server and for one of its other servers (such as its Web server). To obtain the canonical name for the mail server, a DNS client would query for an MX record; to obtain the canonical name for the other server, the DNS client would query for the CNAME record.</p></li>
</ul>
<p id="P7001011952000000000000000009D85" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D85">If a DNS server is authoritative for a particular hostname, then the DNS server will contain a Type A record for the hostname. (Even if the DNS server is not authoritative, it may contain a Type A record in its cache.) If a server is not authoritative for a hostname, then the server will contain a Type NS record for the domain that includes the hostname; it will also contain a Type A record that provides the IP address of the DNS server in the <code id="P7001011952000000000000000009D86" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D86">Value</code> field of the NS record. As an example, suppose an edu TLD server is not authoritative for the host <code id="P7001011952000000000000000009D87" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D87"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>. Then this server will contain a record for a domain that includes the host <code id="P7001011952000000000000000009D88" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D88"><a class="ulink" href="http://gaia.cs.umass.edu">gaia.cs.umass.edu</a></code>, for example, <code id="P7001011952000000000000000009D89" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D89">(<a class="ulink" href="http://umass.edu">umass.edu</a>, <span class="url-obsolete">dns.umass.edu</span>, NS)</code>. The edu TLD server would also contain a Type A record, which maps the DNS server <code id="P7001011952000000000000000009D8A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8A"><span class="url-obsolete">dns.umass.edu</span></code> to an IP address, for example, <code id="P7001011952000000000000000009D8B" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8B">(<span class="url-obsolete">dns.umass.edu</span>, 128.119.40.111, A)</code>.</p>
<section id="P7001011952000000000000000000D14" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D14" class="level3"><header><h1 class="title" id="P7001011952000000000000000009D8C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8C" epub:type="title">DNS Messages</h1></header>
<p id="P7001011952000000000000000009D8D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8D">Earlier in this section, we referred to DNS query and reply messages. These are the only two kinds of DNS messages. Furthermore, both query and reply messages have the same format, as shown in <a class="xref" href="#P7001011952000000000000000000D1B" data-foobar="1"><span class="label">Figure</span> <span class="number">2.21</span></a>.The semantics of the various fields in a DNS message are as follows:</p>
<ul id="P7001011952000000000000000009D8E" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8E">
<li id="P7001011952000000000000000009D8F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D8F"><p id="P7001011952000000000000000009D90" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D90">The first 12 bytes is the <i>header section</i>, which has a number of fields. The first field is a 16-bit number that identifies the query. This identifier is copied into the reply message to a query, allowing the client to match received replies with sent queries. There are a number of flags in the flag field. A 1-bit query/reply flag indicates whether the message is a query (0) or a reply (1). A 1-bit authoritative flag is<span class="pagebreak" title="137" id="P7001011952000000000000000000D1A" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D1A" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P7001011952000000000000000000D1B" class="figure" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D1B">
<img alt="An illustration of DNS message format." height="400" width="672" aria-describedby="P7001011952000000000000000000D1F" id="P7001011952000000000000000009D91" data-uri="P7001011952000000000000000005533" src="../images/4055102021.png"></img>
<figcaption id="P7001011952000000000000000009D92" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D92"><header><h1 class="title" id="P7001011952000000000000000009D93" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009D93" epub:type="title"><span class="label">Figure </span><span class="number">2.21</span> DNS message format</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000000D1F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D1F" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055102021.xhtml#la_4055102021"><span class="label">Description</span></a></div>
<p class="continued" id="P7001011952000000000000000009DAD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DAD">set in a reply message when a DNS server is an authoritative server for a queried name. A 1-bit recursion-desired flag is set when a client (host or DNS server) desires that the DNS server perform recursion when it doesn’t have the record. A 1-bit recursion-available field is set in a reply if the DNS server supports recursion. In the header, there are also four number-of fields. These fields indicate the number of occurrences of the four types of data sections that follow the header.</p></li>
<li id="P7001011952000000000000000009DAE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DAE"><p id="P7001011952000000000000000009DAF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DAF">The <i>question section</i> contains information about the query that is being made. This section includes (1) a name field that contains the name that is being queried, and (2) a type field that indicates the type of question being asked about the name—for example, a host address associated with a name (Type A) or the mail server for a name (Type MX).</p></li>
<li id="P7001011952000000000000000009DB0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB0"><p id="P7001011952000000000000000009DB1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB1">In a reply from a DNS server, the <i>answer section</i> contains the resource records for the name that was originally queried. Recall that in each resource record there is the <code id="P7001011952000000000000000009DB2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB2">Type</code> (for example, A, NS, CNAME, and MX), the <code id="P7001011952000000000000000009DB3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB3">Value</code>, and the <code id="P7001011952000000000000000009DB4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB4">TTL</code>. A reply can return multiple RRs in the answer, since a hostname can have multiple IP addresses (for example, for replicated Web servers, as discussed earlier in this section).</p></li>
<li id="P7001011952000000000000000009DB5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB5"><p id="P7001011952000000000000000009DB6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB6">The <i>authority section</i> contains records of other authoritative servers.</p></li>
<li id="P7001011952000000000000000009DB7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB7"><p id="P7001011952000000000000000009DB8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB8">The <i>additional section</i> contains other helpful records. For example, the answer field in a reply to an MX query contains a resource record providing the canonical hostname of a mail server. The additional section contains a Type A record providing the IP address for the canonical hostname of the mail server.</p></li>
</ul>
<p id="P7001011952000000000000000009DB9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DB9"><span class="pagebreak" title="138" id="P7001011952000000000000000000D46" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D46" epub:type="pagebreak" role="doc-pagebreak"></span>How would you like to send a DNS query message directly from the host you’re working on to some DNS server? This can easily be done with the <span class="keyword" id="P7001011952000000000000000000D47" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D47"><b>nslookup program</b></span>, which is available from most Windows and UNIX platforms. For example, from a Windows host, open the Command Prompt and invoke the nslookup program by simply typing “nslookup.” After invoking nslookup, you can send a DNS query to any DNS server (root, TLD, or authoritative). After receiving the reply message from the DNS server, nslookup will display the records included in the reply (in a human-readable format). As an alternative to running nslookup from your own host, you can visit one of many Web sites that allow you to remotely employ nslookup. (Just type “nslookup” into a search engine and you’ll be brought to one of these sites.) The DNS Wireshark lab at the end of this chapter will allow you to explore the DNS in much more detail.</p>
</section>
<section id="P7001011952000000000000000000D48" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D48" class="level3"><header><h1 class="title" id="P7001011952000000000000000009DBA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBA" epub:type="title">Inserting Records into the DNS Database</h1></header>
<p id="P7001011952000000000000000009DBB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBB">The discussion above focused on how records are retrieved from the DNS database. You might be wondering how records get into the database in the first place. Let’s look at how this is done in the context of a specific example. Suppose you have just created an exciting new startup company called Network Utopia. The first thing you’ll surely want to do is register the domain name <code id="P7001011952000000000000000009DBC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBC"><a class="ulink" href="http://networkutopia.com">networkutopia.com</a></code> at a registrar. A <span class="keyword" id="P7001011952000000000000000000D4C" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D4C"><b>registrar</b></span> is a commercial entity that verifies the uniqueness of the domain name, enters the domain name into the DNS database (as discussed below), and collects a small fee from you for its services. Prior to 1999, a single registrar, Network Solutions, had a monopoly on domain name registration for <code id="P7001011952000000000000000009DBD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBD">com</code>, <code id="P7001011952000000000000000009DBE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBE">net</code>, and <code id="P7001011952000000000000000009DBF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DBF">org</code> domains. But now there are many registrars competing for customers, and the Internet Corporation for Assigned Names and Numbers (ICANN) accredits the various registrars. A complete list of accredited registrars is available at <code id="P7001011952000000000000000009DC0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC0"><a class="ulink" href="http://www.internic.net">http:/<wbr></wbr>/<wbr></wbr>www.internic.net</a></code>.</p>
<p id="P7001011952000000000000000009DC1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC1">When you register the domain name <code id="P7001011952000000000000000009DC2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC2"><a class="ulink" href="http://networkutopia.com">networkutopia.com</a></code> with some registrar, you also need to provide the registrar with the names and IP addresses of your primary and secondary authoritative DNS servers. Suppose the names and IP addresses are <code id="P7001011952000000000000000009DC3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC3"><a class="ulink" href="http://dns1.networkutopia.com">dns1.networkutopia.com</a></code>, <code id="P7001011952000000000000000009DC4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC4"><a class="ulink" href="http://dns2.networkutopia.com">dns2.networkutopia.com</a></code>, <code id="P7001011952000000000000000009DC5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC5">212.2.212.1,</code> and <code id="P7001011952000000000000000009DC6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC6">212.212.212.2.</code> For each of these two authoritative DNS servers, the registrar would then make sure that a Type NS and a Type A record are entered into the TLD com servers. Specifically, for the primary authoritative server for <code id="P7001011952000000000000000009DC7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC7"><a class="ulink" href="http://networkutopia.com">networkutopia.com</a></code>, the registrar would insert the following two resource records into the DNS system:</p>
<pre id="P7001011952000000000000000009DC8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC8"><code id="P7001011952000000000000000009DC9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DC9">(networkutopia.com, dns1.networkutopia.com, NS)
(dns1.networkutopia.com, 212.212.212.1, A)</code></pre>
<p class="continued" id="P7001011952000000000000000009DCA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCA">You’ll also have to make sure that the Type A resource record for your Web server <code id="P7001011952000000000000000009DCB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCB"><a class="ulink" href="http://www.networkutopia.com">www.networkutopia.com</a></code> and the Type MX resource record for your mail server <code id="P7001011952000000000000000009DCC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCC"><a class="ulink" href="http://mail.networkutopia.com">mail.networkutopia.com</a></code> are entered into your authoritative DNS</p>
<aside class="sidebar" id="P7001011952000000000000000000D5D" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D5D"><header><h1 class="title" id="P7001011952000000000000000009DCD" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCD" epub:type="title"><span class="pagebreak" title="139" id="P7001011952000000000000000000D5F" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D5F" epub:type="pagebreak" role="doc-pagebreak"></span><span class="label">FOCUS ON SECURITY </span></h1></header>
<section id="P7001011952000000000000000000D60" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D60"><header><h1 class="title" id="P7001011952000000000000000009DCE" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCE" epub:type="title">DNS VULNERABILITIES</h1></header>
<p id="P7001011952000000000000000009DCF" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DCF">We have seen that DNS is a critical component of the Internet infrastructure, with many important services—including the Web and e-mail—simply incapable of functioning without it. We therefore naturally ask, how can DNS be attacked? Is DNS a sitting duck, waiting to be knocked out of service, while taking most Internet applications down with it?</p>
<p id="P7001011952000000000000000009DD0" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD0">The first type of attack that comes to mind is a DDoS bandwidth-flooding attack (see <a class="xref" href="fileP700101195200000000000000000071C.xhtml#P700101195200000000000000000071C" data-foobar="7"><span class="label">Section</span> <span class="number">1.6</span></a>) against DNS servers. For example, an attacker could attempt to send to each DNS root server a deluge of packets, so many that the majority of legitimate DNS queries never get answered. Such a large-scale DDoS attack against DNS root servers actually took place on October 21, 2002. In this attack, the attackers leveraged a botnet to send truck loads of ICMP ping messages to each of the 13 DNS root IP addresses. (ICMP messages are discussed in <a class="xref" href="fileP70010119520000000000000000021F0.xhtml#P70010119520000000000000000021F0" data-foobar="7"><span class="label">Section</span> <span class="number">5.6</span></a>. For now, it suffices to know that ICMP packets are special types of IP datagrams.) Fortunately, this large-scale attack caused minimal damage, having little or no impact on users’ Internet experience. The attackers did succeed at directing a deluge of packets at the root servers. But many of the DNS root servers were protected by packet filters, configured to always block all ICMP ping messages directed at the root servers. These protected servers were thus spared and functioned as normal. Furthermore, most local DNS servers cache the IP addresses of top-level-domain servers, allowing the query process to often bypass the DNS root servers.</p>
<p id="P7001011952000000000000000009DD1" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD1">A potentially more effective DDoS attack against DNS would be send a deluge of DNS queries to top-level-domain servers, for example, to all the top-level-domain servers that handle the .com domain. It would be harder to filter DNS queries directed to DNS servers; and top-level-domain servers are not as easily bypassed as are root servers. But the severity of such an attack would be partially mitigated by caching in local DNS servers.</p>
<p id="P7001011952000000000000000009DD2" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD2">DNS could potentially be attacked in other ways. In a man-in-the-middle attack, the attacker intercepts queries from hosts and returns bogus replies. In the DNS poisoning attack, the attacker sends bogus replies to a DNS server, tricking the server into accepting bogus records into its cache. Either of these attacks could be used, for example, to redirect an unsuspecting Web user to the attacker’s Web site. These attacks, however, are difficult to implement, as they require intercepting packets or throttling servers <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C16" data-foobar="7">[Skoudis 2006]</a>.</p>
<p id="P7001011952000000000000000009DD3" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD3">In summary, DNS has demonstrated itself to be surprisingly robust against attacks. To date, there hasn’t been an attack that has successfully impeded the DNS service.</p>
</section>
</aside>
<p class="continued" id="P7001011952000000000000000009DD4" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD4"><span class="pagebreak" title="140" id="P7001011952000000000000000000D68" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000000D68" epub:type="pagebreak" role="doc-pagebreak"></span>servers. (Until recently, the contents of each DNS server were configured statically, for example, from a configuration file created by a system manager. More recently, an UPDATE option has been added to the DNS protocol to allow data to be dynamically added or deleted from the database via DNS messages. <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B26" data-foobar="7">[RFC 2136]</a> and <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B4F" data-foobar="7">[RFC 3007]</a> specify DNS dynamic updates.)</p>
<p id="P7001011952000000000000000009DD5" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD5">Once all of these steps are completed, people will be able to visit your Web site and send e-mail to the employees at your company. Let’s conclude our discussion of DNS by verifying that this statement is true. This verification also helps to solidify what we have learned about DNS. Suppose Alice in Australia wants to view the Web page <code id="P7001011952000000000000000009DD6" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD6"><a class="ulink" href="http://www.networkutopia.com">www.networkutopia.com</a></code>. As discussed earlier, her host will first send a DNS query to her local DNS server. The local DNS server will then contact a TLD <code id="P7001011952000000000000000009DD7" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD7">com</code> server. (The local DNS server will also have to contact a root DNS server if the address of a TLD <code id="P7001011952000000000000000009DD8" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD8">com</code> server is not cached.) This TLD server contains the Type NS and Type A resource records listed above, because the registrar had these resource records inserted into all of the TLD com servers. The TLD com server sends a reply to Alice’s local DNS server, with the reply containing the two resource records. The local DNS server then sends a DNS query to <code id="P7001011952000000000000000009DD9" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DD9">212.212.212.1</code>, asking for the Type A record corresponding to <code id="P7001011952000000000000000009DDA" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDA"><a class="ulink" href="http://www.networkutopia.com">www.networkutopia.com</a></code>. This record provides the IP address of the desired Web server, say, <code id="P7001011952000000000000000009DDB" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDB">212.212.71.4</code>, which the local DNS server passes back to Alice’s host. Alice’s browser can now initiate a TCP connection to the host <code id="P7001011952000000000000000009DDC" data-uri="M02_KURO4140_07_SE_C02.xhtml#P7001011952000000000000000009DDC">212.212.71.4</code> and send an HTTP request over the connection. Whew! There’s a lot more going on than what meets the eye when one surfs the Web!</p>
</section>
</section>
</section></body></html>