<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary Dialogue on Concurrency</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part362.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part364.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">Summary Dialogue on Concurrency</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Professor: <i>So, does your head hurt now?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Student: <i>(taking two Motrin tablets) Well, some. It’s hard to think about all the ways threads can interleave.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Professor: <i>Indeed it is. I am always amazed at how so few line of code, when concurrent execution is involved, can become nearly impossible to understand.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Student: <i>Me too! It’s kind of embarrassing, as a Computer Scientist, not to be able to make sense of five lines of code.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Professor: <i>Oh, don’t feel too badly. If you look through the first papers on con- current algorithms, they are sometimes wrong! And the authors often professors!</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Student: <i>(gasps) Professors can be ... umm... wrong?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Yes, it is true. Though don’t tell anybody – it’s one of our trade secrets.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>I am sworn to secrecy. But if concurrent code is so hard to think about, and so hard to get right, how are we supposed to write correct concurrent code?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Well that is the real question, isn’t it? I think it starts with a few simple things. First, keep it simple! Avoid complex interactions between threads, and use well-known and tried-and-true ways to manage thread interactions.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>Like simple locking, and maybe a producer-consumer queue?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Exactly! Those are common paradigms, and you should be able to produce the working solutions given what you’ve learned. Second, only use con- currency when absolutely needed; avoid it if at all possible. There is nothing worse than premature optimization of a program.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>I see – why add threads if you don’t need them?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Exactly. Third, if you really need parallelism, seek it in other sim- plified forms. For example, the Map-Reduce method for writing parallel data analysis code is an excellent example of achieving parallelism without having to handle any of the horrific complexities of locks, condition variables, and the other nasty things we’ve talked about.</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Map-Reduce, huh? Sounds interesting – I’ll have to read more about it on my own.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Good! You should. In the end, you’ll have to do a lot of that, as what we learn together can only serve as the barest introduction to the wealth of knowledge that is out there. Read, read, and read some more! And then try things out, write some code, and then write some more too. As Gladwell talks about in his book “Outliers”, you need to put roughly 10,000 hours into something in order to become a real expert. You can’t do that all inside of class time!</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Wow, I’m not sure if that is depressing, or uplifting. But I’ll assume the latter, and get to work! Time to write some more concurrent code...</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">Part III</h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part362.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part364.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
