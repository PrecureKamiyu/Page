<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>28.1 Locks: The Basic Idea</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part279.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part281.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">28.1 Locks: The Basic Idea</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As an example, assume our critical section looks like this, the canonical update of a shared variable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">balance = balance + 1;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Of course, other critical sections are possible, such as adding an ele- ment to a linked list or other more complex updates to shared structures, but we’ll just keep to this simple example for now. To use a lock, we add some code around the critical section like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">lock_t mutex; // some globally-allocated lock ’mutex’</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">...</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">lock(&amp;mutex);</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">balance = balance + 1;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">unlock(&amp;mutex);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">A lock is just a variable, and thus to use one, you must declare a <b>lock variable </b>of some kind (such as <span class="s41">mutex </span>above). This lock variable (or just “lock” for short) holds the state of the lock at any instant in time. It is ei- ther <b>available </b>(or <b>unlocked </b>or <b>free</b>) and thus no thread holds the lock, or <b>acquired </b>(or <b>locked </b>or <b>held</b>), and thus exactly one thread holds the lock and presumably is in a critical section. We could store other information</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: center;">291</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">in the data type as well, such as which thread holds the lock, or a queue for ordering lock acquisition, but information like that is hidden from the user of the lock.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The semantics of the <span class="s41">lock() </span>and <span class="s41">unlock() </span>routines are simple. Call- ing the routine <span class="s41">lock() </span>tries to acquire the lock; if no other thread holds the lock (i.e., it is free), the thread will acquire the lock and enter the crit- ical section; this thread is sometimes said to be the <b>owner </b>of the lock. If another thread then calls <span class="s41">lock() </span>on that same lock variable (<span class="s41">mutex </span>in this example), it will not return while the lock is held by another thread; in this way, other threads are prevented from entering the critical section while the first thread that holds the lock is in there.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">Once the owner of the lock calls <span class="s41">unlock()</span>, the lock is now available (free) again. If no other threads are waiting for the lock (i.e., no other thread has called <span class="s41">lock() </span>and is stuck therein), the state of the lock is simply changed to free. If there are waiting threads (stuck in <span class="s41">lock()</span>), one of them will (eventually) notice (or be informed of) this change of the lock’s state, acquire the lock, and enter the critical section.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Locks provide some minimal amount of control over scheduling to programmers. In general, we view threads as entities created by the pro- grammer but scheduled by the OS, in any fashion that the OS chooses. Locks yield some of that control back to the programmer; by putting a lock around a section of code, the programmer can guarantee that no more than a single thread can ever be active within that code. Thus locks help transform the chaos that is traditional OS scheduling into a more controlled activity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part279.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part281.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
