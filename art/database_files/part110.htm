<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.8   Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part109.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part111.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">4.8   <span style=" color: #00AEEF;">Summary</span></p><p class="s39" style="padding-top: 9pt;padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s41">SQL </span><span class="s40">supports several types of joins including natural join, inner and outer joins, and several types of join conditions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-top: 6pt;padding-left: 122pt;text-indent: -8pt;line-height: 76%;text-align: left;">° <span class="s51">Natural join provides a simple way to write queries over multiple relations in which a </span><span class="s46">where </span><span class="p">predicate would otherwise equate attributes with matching</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;">names from each relation. This convenience comes at the risk of query seman- tics changing if a new attribute is added to the schema.</p><p class="s50" style="padding-top: 8pt;padding-left: 122pt;text-indent: -8pt;line-height: 76%;text-align: left;">° <span class="s51">The </span><span class="s46">join-using </span><span class="p">construct provides a simple way to write queries over multiple relations in which equality is desired for some but not necessarily all attributes</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;">with matching names.</p><p class="s46" style="padding-top: 6pt;padding-left: 113pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span class="s50">° </span><span class="s51">The </span>join-on <span class="p">construct provides a way to include a join predicate in the </span>from</p><p style="padding-left: 122pt;text-indent: 0pt;line-height: 11pt;text-align: left;">clause.</p><p class="s50" style="padding-top: 8pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: left;">° <span class="s51">Outer join provides a means to retain tuples that, due to a join predicate (whether a natural join, a join-using, or a join-on), would otherwise not ap-</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;">pear anywhere in the result relation. The retained tuples are padded with null values so as to conform to the result schema.</p><p class="s39" style="padding-top: 9pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">View relations can be deﬁned as relations containing the result of queries. Views are useful for hiding unneeded information and for gathering together information from more than one relation into a single view.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Transactions are sequences of queries and updates that together carry out a task. Transactions can be committed, or rolled back; when a transaction is rolled back, the eﬀects of all updates performed by the transaction are undone.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Integrity constraints ensure that changes made to the database by authorized users do not result in a loss of data consistency.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Referential-integrity constraints ensure that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Domain constraints specify the set of possible values that may be associated with an attribute. Such constraints may also prohibit the use of null values for particular attributes.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Assertions are declarative expressions that state predicates that we require always to be true.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>The <span class="s41">SQL </span>data-deﬁnition language provides support for deﬁning built-in domain types such as <b>date </b><span class="p">and </span><b>time </b><span class="p">as well as user-deﬁned domain types.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Indices are important for eﬃcient processing of queries, as well as for eﬃcient enforcement of integrity constraints. Although not part of the <span class="s41">SQL </span>standard, <span class="s41">SQL </span>commands for creation of indices are supported by most database systems.</p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s41">SQL </span><span class="s40">authorization mechanisms allow one to diﬀerentiate among the users of the database on the type of access they are permitted on various data values in the database.</span></p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Practice Exercises  <span class="s164">175</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s40">Roles enable us to assign a set of privileges to a user according to the role that the user plays in the organization.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part109.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part111.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
