<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.4 An Example</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part97.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part99.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">9.4 An Example</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">To make the dynamics of lottery scheduling more understandable, we now perform a brief study of the completion time of two jobs competing against one another, each with the same number of tickets (100) and same run time (<span class="s43">R</span>, which we will vary).</p><p class="s62" style="text-indent: 0pt;line-height: 6pt;text-align: left;">20</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 41pt;text-indent: 11pt;line-height: 90%;text-align: justify;">In this scenario, we’d like for each job to finish at roughly the same time, but due to the randomness of lottery scheduling, sometimes one job finishes before the other. To quantify this difference, we define a simple <b>unfairness metric</b>, <span class="s43">U </span>which is simply the time the first job com- pletes divided by the time that the second job completes. For example, if <span class="s43">R </span><span class="s44">= 10</span>, and the first job finishes at time 10 (and the second job at 20), <span class="s43">U </span><span class="s44">= </span><span class="s63">10</span><span class="s64"> </span><span class="s44">= 0</span><span class="s43">.</span><span class="s44">5</span>. When both jobs finish at nearly the same time, <span class="s43">U </span>will be quite close to 1. In this scenario, that is our goal: a perfectly fair scheduler would achieve <span class="s43">U </span><span class="s44">= 1</span>.</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">Figure <span style=" color: #00AEEF;">9.2 </span>plots the average unfairness as the length of the two jobs</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">(<span class="s43">R</span>) is varied from 1 to 1000 over thirty trials (results are generated via the simulator provided at the end of the chapter). As you can see from the graph, when the job length is not very long, average unfairness can be quite severe. Only as the jobs run for a significant number of time slices does the lottery scheduler approach the desired outcome.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part97.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part99.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
