* Log for cpu (temp)

This is log. I want it to be dead this time.

** Single Cycle

- Fill the form to design the cpu
- Use verilog to implement the design
- INTERLUDE: don't integrate some modules into modules like ~ID~ or ~IF~ that will cause troubles when you want to implement pipeline
- After finishing the design. Connect them in ~myCPU.v~ file.
- INTERLUDE: modify the signal's name ~switch~ in ~SoC~ file to ~switches~
- Trace
  - use vscode remote to connect to the ssh
  - use git clone to clone your code and the code for test into the machine
    - run ~git clone [addr] [target directory]~ to add file into ~mySoC~
    - run ~git pull~ inside of ~mySoC~ directory to renew your source code
  - copy your code (the instructions specify the codes) into ~mySoC~ directory
  - run ~make~ inside of cdp-test directory
  - after it works, run ~ls bin~ to check the kinds of unit tests for a single instructions
  - INTERLUDE: you should modify the PC module so you can run the first command correctly
  - run ~make run TEST=[inst]~ under cdp-test directory to run the unit tests
  - note run all in the cdp-test will test those optional instructions
- implement interface and bridge in ~mini_RV.v~ file
  It is easy, so you can just copy
- On board
  - remember to annotate the ~`define RUN_TRACE~ before you go on board
  - remember to change the name of ~switch~ to ~switches~ in the ~xdc~ file
  
** Pipeline Design

I am going to finish it within hours

I can do it

- First implement ideal pipeline.
  - that is implement all registers for pipeline
  - first draw a diagram to specify what signal should be used
  - anyway it is a bit complex so you can copy the design
  - and then make instances in the ~myCPU.v~ file. that is a hard work
- Trace
  - don't forget to rewrite the debug signals
- I am very sorry. It seems that we have to deal with the hazard to continue trace test
- Anyway I just copy and done
- Thank you *shirokuma*. Your code is great

** On Board


1. we are provided with a simple to add instructions into the code. Use the ~zip~ file in which there are IROM and DRAM defined
   To use them, you should follow the instruction they gave:
   1. open the project and *delete* the IROM and DRAM IP core
   2. right click the ? icon and *add* the IROM and DRAM it gave
   3. because the IROM and DRAM are with names wrong, you should modify the name of the instance that in the ~miniRV~ file
      Like the IROM (to store instructions) is called ~prgrom~ (bro, is it just a spelling mistake?), so you should change the instance of IROM into the instance of ~prgrom~. Similarly, you should change the instance of DRAM into ~dram~. That should be work
2. how to check the freqency? Idk