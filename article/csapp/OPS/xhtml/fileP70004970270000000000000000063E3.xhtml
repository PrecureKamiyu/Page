<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>7.11 Loading and Linking Shared Libraries from Applications</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000063E3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000044BA4" data-uri="chapter07.xhtml#P7000497027000000000000000044BA4" epub:type="title"><span class="pcalibre label pcalibre1">7.11 </span>Loading and Linking Shared Libraries from Applications</h1></header>
<p id="P7000497027000000000000000044BA5" data-uri="chapter07.xhtml#P7000497027000000000000000044BA5" class="pcalibre1 pcalibre calibre2">Up to this point, we have discussed the scenario in which the dynamic linker loads and links shared libraries when an application is loaded, just before it executes. However, it is also possible for an application to request the dynamic linker to load and link arbitrary shared libraries while the application is running, without having to link in the applications against those libraries at compile time.</p>
<p id="P7000497027000000000000000044BA6" data-uri="chapter07.xhtml#P7000497027000000000000000044BA6" class="pcalibre1 pcalibre calibre2">Dynamic linking is a powerful and useful technique. Here are some examples in the real world:</p>
<ul id="P7000497027000000000000000044BA7" data-uri="chapter07.xhtml#P7000497027000000000000000044BA7" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000044BA8" data-uri="chapter07.xhtml#P7000497027000000000000000044BA8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044BA9" data-uri="chapter07.xhtml#P7000497027000000000000000044BA9" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Distributing software. </span>Developers of Microsoft Windows applications frequently use shared libraries to distribute software updates. They generate a new copy of a shared library, which users can then download and use as a replacement for the current version. The next time they run their application, it will automatically link and load the new shared library.</p></li>
<li id="P7000497027000000000000000044BAA" data-uri="chapter07.xhtml#P7000497027000000000000000044BAA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044BAB" data-uri="chapter07.xhtml#P7000497027000000000000000044BAB" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Building high-performance Web servers. </span>Many Web servers generate <i class="calibre5 pcalibre pcalibre1">dynamic content</i>, such as personalized Web pages, account balances, and banner ads. Early Web servers generated dynamic content by using <code id="P7000497027000000000000000044BAC" data-uri="chapter07.xhtml#P7000497027000000000000000044BAC" class="pcalibre1 calibre8 pcalibre">fork</code> and <code id="P7000497027000000000000000044BAD" data-uri="chapter07.xhtml#P7000497027000000000000000044BAD" class="pcalibre1 calibre8 pcalibre">execve</code> to create a child process and run a "CGI program" in the context of the child. However, modern high-performance Web servers can generate dynamic content using a more efficient and sophisticated approach based on dynamic linking.</p>
<p id="P7000497027000000000000000044BAE" data-uri="chapter07.xhtml#P7000497027000000000000000044BAE" class="pcalibre1 calibre32 pcalibre">The idea is to package each function that generates dynamic content in a shared library. When a request arrives from a Web browser, the server dynamically loads and links the appropriate function and then calls it directly, as opposed to using <code id="P7000497027000000000000000044BAF" data-uri="chapter07.xhtml#P7000497027000000000000000044BAF" class="pcalibre1 calibre8 pcalibre">fork</code> and <code id="P7000497027000000000000000044BB0" data-uri="chapter07.xhtml#P7000497027000000000000000044BB0" class="pcalibre1 calibre8 pcalibre">execve</code> to run the function in the context of a child process. The function remains cached in the server's address space, so subsequent requests can be handled at the cost of a simple function call. This can have a significant impact on the throughput of a busy site. Further, existing functions can be updated and new functions can be added at run time, without stopping the server.</p></li>
</ul>
<p id="P7000497027000000000000000044BB1" data-uri="chapter07.xhtml#P7000497027000000000000000044BB1" class="pcalibre1 pcalibre calibre2">Linux systems provide a simple interface to the dynamic linker that allows application programs to load and link shared libraries at run time.</p>
<pre id="P7000497027000000000000000044BB2" data-uri="chapter07.xhtml#P7000497027000000000000000044BB2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BB3" data-uri="chapter07.xhtml#P7000497027000000000000000044BB3" class="calibre10 pcalibre pcalibre1">#include &lt;dlfcn.h&gt;
void *dlopen(const char *filename, int flag);
				Returns: pointer to handle if OK, NULL on error</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044BB4" data-uri="chapter07.xhtml#P7000497027000000000000000044BB4"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000063F5" title="702" data-uri="chapter07.xhtml#P70004970270000000000000000063F5" epub:type="pagebreak"></span>The <code id="P7000497027000000000000000044BB5" data-uri="chapter07.xhtml#P7000497027000000000000000044BB5" class="pcalibre1 calibre8 pcalibre">dlopen</code> function loads and links the shared library <code id="P7000497027000000000000000044BB6" data-uri="chapter07.xhtml#P7000497027000000000000000044BB6" class="pcalibre1 calibre8 pcalibre">filename</code>. The external symbols in <code id="P7000497027000000000000000044BB7" data-uri="chapter07.xhtml#P7000497027000000000000000044BB7" class="pcalibre1 calibre8 pcalibre">filename</code> are resolved using libraries previously opened with the <code id="P7000497027000000000000000044BB8" data-uri="chapter07.xhtml#P7000497027000000000000000044BB8" class="pcalibre1 calibre8 pcalibre">RTLD_GLOBAL</code> flag. If the current executable was compiled with the <code id="P7000497027000000000000000044BB9" data-uri="chapter07.xhtml#P7000497027000000000000000044BB9" class="pcalibre1 calibre8 pcalibre">-rdynamic</code> flag, then its global symbols are also available for symbol resolution. The <code id="P7000497027000000000000000044BBA" data-uri="chapter07.xhtml#P7000497027000000000000000044BBA" class="pcalibre1 calibre8 pcalibre">flag</code> argument must include either <code id="P7000497027000000000000000044BBB" data-uri="chapter07.xhtml#P7000497027000000000000000044BBB" class="pcalibre1 calibre8 pcalibre">RTLD_NOW</code>, which tells the linker to resolve references to external symbols immediately, or the <code id="P7000497027000000000000000044BBC" data-uri="chapter07.xhtml#P7000497027000000000000000044BBC" class="pcalibre1 calibre8 pcalibre">RTLD_LAZY</code> flag, which instructs the linker to defer symbol resolution until code from the library is executed. Either of these values can be <span class="smallcaps pcalibre pcalibre1">or</span>ed with the <code id="P7000497027000000000000000044BBD" data-uri="chapter07.xhtml#P7000497027000000000000000044BBD" class="pcalibre1 calibre8 pcalibre">RTLD_GLOBAL</code> flag.</p>
<pre id="P7000497027000000000000000044BBE" data-uri="chapter07.xhtml#P7000497027000000000000000044BBE" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BBF" data-uri="chapter07.xhtml#P7000497027000000000000000044BBF" class="calibre10 pcalibre pcalibre1">#include &lt;dlfcn.h&gt;
void *dlsym(void *handle, char *symbol);
				Returns: pointer to symbol if OK, NULL on error</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044BC0" data-uri="chapter07.xhtml#P7000497027000000000000000044BC0">The <code id="P7000497027000000000000000044BC1" data-uri="chapter07.xhtml#P7000497027000000000000000044BC1" class="pcalibre1 calibre8 pcalibre">dlsym</code> function takes a handle to a previously opened shared library and a <code id="P7000497027000000000000000044BC2" data-uri="chapter07.xhtml#P7000497027000000000000000044BC2" class="pcalibre1 calibre8 pcalibre">symbol</code> name and returns the address of the symbol, if it exists, or NULL otherwise.</p>
<pre id="P7000497027000000000000000044BC3" data-uri="chapter07.xhtml#P7000497027000000000000000044BC3" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BC4" data-uri="chapter07.xhtml#P7000497027000000000000000044BC4" class="calibre10 pcalibre pcalibre1">#include &lt;dlfcn.h&gt;
int dlclose (void *handle);
			Returns: 0 if OK, -1 on error</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044BC5" data-uri="chapter07.xhtml#P7000497027000000000000000044BC5">The <code id="P7000497027000000000000000044BC6" data-uri="chapter07.xhtml#P7000497027000000000000000044BC6" class="pcalibre1 calibre8 pcalibre">dlclose</code> function unloads the shared library if no other shared libraries are still using it.</p>
<pre id="P7000497027000000000000000044BC7" data-uri="chapter07.xhtml#P7000497027000000000000000044BC7" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BC8" data-uri="chapter07.xhtml#P7000497027000000000000000044BC8" class="calibre10 pcalibre pcalibre1">#include &lt;dlfcn.h&gt;
const char *dlerror(void);
		Returns: error message if previous call to dlopen, dlsym, or dlclose failed;
								NULL if previous call was OK</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044BC9" data-uri="chapter07.xhtml#P7000497027000000000000000044BC9">The <code id="P7000497027000000000000000044BCA" data-uri="chapter07.xhtml#P7000497027000000000000000044BCA" class="pcalibre1 calibre8 pcalibre">dlerror</code> function returns a string describing the most recent error that occurred as a result of calling <code id="P7000497027000000000000000044BCB" data-uri="chapter07.xhtml#P7000497027000000000000000044BCB" class="pcalibre1 calibre8 pcalibre">dlopen, dlsym</code>, or <code id="P7000497027000000000000000044BCC" data-uri="chapter07.xhtml#P7000497027000000000000000044BCC" class="pcalibre1 calibre8 pcalibre">dlclose</code>, or NULL if no error occurred.</p>
<p id="P7000497027000000000000000044BCD" data-uri="chapter07.xhtml#P7000497027000000000000000044BCD" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006413"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.17</span></a> shows how we would use this interface to dynamically link our <code id="P7000497027000000000000000044BCE" data-uri="chapter07.xhtml#P7000497027000000000000000044BCE" class="pcalibre1 calibre8 pcalibre">libvector.so</code> shared library at run time and then invoke its <code id="P7000497027000000000000000044BCF" data-uri="chapter07.xhtml#P7000497027000000000000000044BCF" class="pcalibre1 calibre8 pcalibre">addvec</code> routine. To compile the program, we would invoke <span class="smallcaps pcalibre pcalibre1">gcc </span>in the following way:</p>
<pre id="P7000497027000000000000000044BD0" data-uri="chapter07.xhtml#P7000497027000000000000000044BD0" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BD1" data-uri="chapter07.xhtml#P7000497027000000000000000044BD1" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -rdynamic -o prog2r dll.c -ldl</i></code></pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006413" data-uri="chapter07.xhtml#P7000497027000000000000000006413">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006414" title="703" data-uri="chapter07.xhtml#P7000497027000000000000000006414" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000044BD2" data-uri="chapter07.xhtml#P7000497027000000000000000044BD2" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/dll.c</i></p>
<pre id="P7000497027000000000000000044BD3" data-uri="chapter07.xhtml#P7000497027000000000000000044BD3" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044BD4" data-uri="chapter07.xhtml#P7000497027000000000000000044BD4" class="calibre10 pcalibre pcalibre1">
1	#include &lt;stdio.h&gt;
2	#include &lt;stdlib.h&gt;
3	#include &lt;dlfcn.h&gt;
4
5	int x[2] = {1, 2};
6	int y[2] = {3, 4};
7	int z[2]; 8
9	int main()
10	{
11		void *handle;
12		void (*addvec)(int *, int *, int *, int);
13		char *error;
14
15		/* Dynamically load the shared library containing addvec() */
16		handle = dlopen("./libvector.so", RTLD_LAZY);
17		if (!handle) {
18			fprintf(stderr, "%sn", dlerror());
19			exit(1);
20		}
21
22		/* Get a pointer to the addvec() function we just loaded */
23		addvec = dlsym(handle, "addvec");
24		if ((error = dlerror()) != NULL) {
25			fprintf(stderr, "%sn", error);
26			exit(1);
27		}
28
29		/* Now we can call addvec() just like any other function */
30		addvec(x, y, z, 2);
31		printf("z = [%d %d]n", z[0], z[1]);
32
33		/* Unload the shared library */
34		if (dlclose(handle) &lt; 0) {
35			fprintf(stderr, "%sn", dlerror());
36			exit(1);
37		}
38		return 0;
39	}
</code></pre>
<p id="P7000497027000000000000000044BD5" data-uri="chapter07.xhtml#P7000497027000000000000000044BD5" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/link/dll.c</i></p>
<figcaption id="P7000497027000000000000000044BD6" data-uri="chapter07.xhtml#P7000497027000000000000000044BD6" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044BD7" data-uri="chapter07.xhtml#P7000497027000000000000000044BD7" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">7.17 </span>Example program 3.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000044BD8" data-uri="chapter07.xhtml#P7000497027000000000000000044BD8"><p id="P7000497027000000000000000044BD9" data-uri="chapter07.xhtml#P7000497027000000000000000044BD9" class="pcalibre calibre3 pcalibre1">Dynamically loads and links the shared library <code id="P7000497027000000000000000044BDA" data-uri="chapter07.xhtml#P7000497027000000000000000044BDA" class="pcalibre1 calibre8 pcalibre">libvector.so</code> at run time.</p></div></figcaption>
</figure>

<aside class="sidebar pcalibre5 pcalibre" id="P700049702700000000000000000641E" data-uri="chapter07.xhtml#P700049702700000000000000000641E"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000044BDB" data-uri="chapter07.xhtml#P7000497027000000000000000044BDB" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006420" title="704" data-uri="chapter07.xhtml#P7000497027000000000000000006420" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Shared libraries and the Java Native Interface</h1></header>
<p id="P7000497027000000000000000044BDC" data-uri="chapter07.xhtml#P7000497027000000000000000044BDC" class="pcalibre calibre3 pcalibre1">Java defines a standard calling convention called <i class="calibre5 pcalibre pcalibre1">Java Native Interface (JNI)</i> that allows "native" C and C++ functions to be called from Java programs. The basic idea of JNI is to compile the native C function, say, <code id="P7000497027000000000000000044BDD" data-uri="chapter07.xhtml#P7000497027000000000000000044BDD" class="pcalibre1 calibre8 pcalibre">foo</code>, into a shared library, say, <code id="P7000497027000000000000000044BDE" data-uri="chapter07.xhtml#P7000497027000000000000000044BDE" class="pcalibre1 calibre8 pcalibre">foo.so</code>. When a running Java program attempts to invoke function <code id="P7000497027000000000000000044BDF" data-uri="chapter07.xhtml#P7000497027000000000000000044BDF" class="pcalibre1 calibre8 pcalibre">foo</code>, the Java interpreter uses the <code id="P7000497027000000000000000044BE0" data-uri="chapter07.xhtml#P7000497027000000000000000044BE0" class="pcalibre1 calibre8 pcalibre">dlopen</code> interface (or something like it) to dynamically link and load <code id="P7000497027000000000000000044BE1" data-uri="chapter07.xhtml#P7000497027000000000000000044BE1" class="pcalibre1 calibre8 pcalibre">foo.so</code> and then call <code id="P7000497027000000000000000044BE2" data-uri="chapter07.xhtml#P7000497027000000000000000044BE2" class="pcalibre1 calibre8 pcalibre">foo</code>.</p>
</aside>
</section></body></html>
