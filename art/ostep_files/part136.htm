<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>14.5 Underlying OS Support</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part135.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part137.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">14.5 Underlying OS Support</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You might have noticed that we haven’t been talking about system calls when discussing <span class="s41">malloc() </span>and <span class="s41">free()</span>. The reason for this is sim- ple: they are not system calls, but rather library calls. Thus the malloc li- brary manages space within your virtual address space, but itself is built on top of some system calls which call into the OS to ask for more mem- ory or release some back to the system.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">One such system call is called <span class="s41">brk</span>, which is used to change the loca- tion of the program’s <b>break</b>: the location of the end of the heap. It takes one argument (the address of the new break), and thus either increases or decreases the size of the heap based on whether the new break is larger or smaller than the current break. An additional call <span class="s41">sbrk </span>is passed an increment but otherwise serves a similar purpose.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Note that you should never directly call either <span class="s41">brk </span>or <span class="s41">sbrk</span>. They are used by the memory-allocation library; if you try to use them, you will likely make something go (horribly) wrong. Stick to <span class="s41">malloc() </span>and <span class="s41">free() </span>instead.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Finally, you can also obtain memory from the operating system via the <span class="s41">mmap() </span>call. By passing in the correct arguments, <span class="s41">mmap() </span>can create an <b>anonymous </b>memory region within your program – a region which is not associated with any particular file but rather with <b>swap space</b>, something we’ll discuss in detail later on in virtual memory. This memory can then also be treated like a heap and managed as such. Read the manual page of <span class="s41">mmap() </span>for more details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part135.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part137.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
