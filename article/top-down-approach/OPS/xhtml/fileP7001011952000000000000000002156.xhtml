<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>5.5 The SDN Control Plane</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link></head><body epub:type="bodymatter">
<section id="P7001011952000000000000000002156" class="level1"><header><h1 class="title" id="P700101195200000000000000000AD50" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD50" epub:type="title"><span class="number">5.5</span> The SDN Control Plane</h1></header>
<p id="P700101195200000000000000000AD51" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD51">In this section, we’ll dive into the SDN control plane—the network-wide logic that controls packet forwarding among a network’s SDN-enabled devices, as well as the configuration and management of these devices and their services. Our study here builds on our earlier discussion of generalized SDN forwarding in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a>, so you might want to first review that section, as well as <a class="xref" href="fileP7001011952000000000000000001EE4.xhtml#P7001011952000000000000000001EE4" data-foobar="7"><span class="label">Section</span> <span class="number">5.1</span></a> of this chapter, before continuing on. As in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a>, we’ll again  adopt the terminology used in the SDN literature and refer to the network’s forwarding devices as “packet switches” (or just switches, with “packet” being understood), since forwarding decisions can be made on the basis of network-layer source/destination addresses, link-layer source/destination addresses, as well as many other values in transport-, network-, and link-layer packet-header fields.</p>
<p id="P700101195200000000000000000AD52" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD52">Four key characteristics of an SDN architecture can be identified <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039FF" data-foobar="7">[Kreutz 2015]</a>:</p>
<ul id="P700101195200000000000000000AD53" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD53">
<li id="P700101195200000000000000000AD54" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD54"><p id="P700101195200000000000000000AD55" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD55"><span class="leadin">Flow-based forwarding.</span> Packet forwarding by SDN-controlled switches can be based on any number of header field values in the transport-layer, network-layer, or link-layer header. We saw in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a> that the OpenFlow1.0 abstraction allows forwarding based on eleven different header field values. This contrasts <span class="pagebreak" title="408" id="P700101195200000000000000000215D" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000215D" epub:type="pagebreak" role="doc-pagebreak"></span>sharply with the traditional approach to router-based forwarding that we studied in <a class="xref" href="fileP7001011952000000000000000001EFF.xhtml#P7001011952000000000000000001EFF" data-foobar="7"><span class="label">Sections</span> <span class="number">5.2</span></a>–<a class="xref" href="fileP70010119520000000000000000020BA.xhtml#P70010119520000000000000000020BA" data-foobar="7"><span class="number">5.4</span></a>, where forwarding of IP datagrams was based solely on a datagram’s destination IP address. Recall from <a class="xref" href="fileP7001011952000000000000000001EE4.xhtml#P7001011952000000000000000001EF6" data-foobar="7"><span class="label">Figure</span> <span class="number">5.2</span></a> that packet forwarding rules are specified in a switch’s flow table; it is the job of the SDN control plane to compute, manage and install flow table entries in all of the network’s switches.</p></li>
<li id="P700101195200000000000000000AD56" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD56"><p id="P700101195200000000000000000AD57" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD57"><span class="leadin">Separation of data plane and control plane.</span> This separation is shown clearly in <a class="xref" href="fileP7001011952000000000000000001EE4.xhtml#P7001011952000000000000000001EF6" data-foobar="7"><span class="label">Figures</span> <span class="number">5.2</span></a> and <a class="xref" href="#P7001011952000000000000000002167" data-foobar="1"><span class="number">5.14</span></a>. The data plane consists of the network’s switches— relatively simple (but fast) devices that execute the “match plus action” rules in their flow tables. The control plane consists of servers and software that determine and manage the switches’ flow tables.</p></li>
<li id="P700101195200000000000000000AD58" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD58"><p id="P700101195200000000000000000AD59" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD59"><span class="leadin">Network control functions: external to data-plane switches.</span> Given that the “S” in SDN is for “software,” it’s perhaps not surprising that the SDN control plane is implemented in software. Unlike traditional routers, however, this software executes on servers that are both distinct and remote from the network’s switches. As shown in <a class="xref" href="#P7001011952000000000000000002167" data-foobar="1"><span class="label">Figure</span> <span class="number">5.14</span></a>, the control plane itself consists of two components—an SDN controller (or network operating system <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003936" data-foobar="7">[Gude 2008]</a>) and a set of network-control applications. The controller maintains accurate network state information (e.g., the state of remote links, switches, and hosts); provides this information to the network-control applications running in the control plane; and provides the means through which these applications can monitor, program, and control the underlying network devices. Although the controller in <a class="xref" href="#P7001011952000000000000000002167" data-foobar="1"><span class="label">Figure</span> <span class="number">5.14</span></a> is shown as a single central server, in practice the controller is only logically centralized; it is typically implemented on several servers that provide coordinated, scalable performance and high availability.</p></li>
<li id="P700101195200000000000000000AD5A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD5A"><p id="P700101195200000000000000000AD5B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD5B"><span class="leadin">A programmable network.</span> The network is programmable through the network-control applications running in the control plane. These applications represent the “brains” of the SDN control plane, using the APIs provided by the SDN controller to specify and control the data plane in the network devices. For example, a routing network-control application might determine the end-end paths between sources and destinations (e.g., by executing Dijkstra’s algorithm using the node-state and link-state information maintained by the SDN controller). Another network application might perform access control, i.e., determine which packets are to be blocked at a switch, as in our third example in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001D2E" data-foobar="7"><span class="label">Section</span> <span class="number">4.4.3</span></a>. Yet another application might forward packets in a manner that performs server load balancing (the second example we considered in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001D2E" data-foobar="7"><span class="label">Section</span> <span class="number">4.4.3</span></a>).</p></li>
</ul>
<p id="P700101195200000000000000000AD5C" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD5C">From this discussion, we can see that SDN represents a significant “unbundling” of network functionality—data plane switches, SDN controllers, and network-control applications are separate entities that may each be provided by different vendors and organizations. This contrasts with the pre-SDN model in which a switch/router (together with its embedded control plane software and protocol implementations) was monolithic, vertically integrated, and sold by a single vendor. This unbundling <span class="pagebreak" title="409" id="P7001011952000000000000000002165" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002165" epub:type="pagebreak" role="doc-pagebreak"></span>of network functionality in SDN has been likened to the earlier evolution from mainframe computers (where hardware, system software, and applications were provided by a single vendor) to personal computers (with their separate hardware, operating systems, and applications). The unbundling of computing hardware, system software, and applications has arguably led to a rich, open ecosystem driven by innovation in all three of these areas; one hope for SDN is that it too will lead to a such rich innovation.</p>
<p id="P700101195200000000000000000AD5D" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD5D">Given our understanding of the SDN architecture of <a class="xref" href="#P7001011952000000000000000002167" data-foobar="1"><span class="label">Figure</span> <span class="number">5.14</span></a>, many questions naturally arise. How and where are the flow tables actually computed? How are these tables updated in response to events at SDN-controlled devices (e.g., an attached link going up/down)? And how are the flow table entries at multiple switches coordinated in such a way as to result in orchestrated and consistent network-wide functionality (e.g., end-to-end paths for forwarding packets from sources to destinations, or coordinated distributed firewalls)? It is the role of the SDN control plane to provide these, and many other, capabilities.</p>
<figure id="P7001011952000000000000000002167" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002167">
<img alt="Components of the SDN architecture: SDN-controlled switches, the SDN controller, network control applications." height="520" width="587" aria-describedby="P700101195200000000000000000216B" id="P700101195200000000000000000AD5E" data-uri="P70010119520000000000000000055B4" src="../images/4055105014.png"></img>
<figcaption id="P700101195200000000000000000AD5F" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD5F"><header><h1 class="title" id="P700101195200000000000000000AD60" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD60" epub:type="title"><span class="label">Figure </span><span class="number">5.14</span> Components of the SDN architecture: SDN-controlled switches, the SDN controller, network-control applications</h1></header>

</figcaption>
</figure><div class="longdesc" id="P700101195200000000000000000216B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000216B" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055105014.xhtml#la_4055105014"><span class="label">Description</span></a></div>
<section id="P7001011952000000000000000002170" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002170" class="level2"><header><h1 class="title" id="P700101195200000000000000000AD65" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD65" epub:type="title"><span class="pagebreak" title="410" id="P7001011952000000000000000002172" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002172" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">5.5.2</span> The SDN Control Plane: SDN Controller and SDN Network-control Applications</h1></header>
<p id="P700101195200000000000000000AD66" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD66">Let’s begin our discussion of the SDN control plane in the abstract, by considering the generic capabilities that the control plane must provide. As we’ll see, this abstract, “first principles” approach will lead us to an overall architecture that reflects how SDN control planes have been implemented in practice.</p>
<p id="P700101195200000000000000000AD67" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD67">As noted above, the SDN control plane divides broadly into two components—the SDN controller and the SDN network-control applications. Let’s explore the controller first. Many SDN controllers have been developed since the earliest SDN controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003936" data-foobar="7">[Gude 2008]</a>; see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039FF" data-foobar="7">[Kreutz 2015]</a> for an extremely thorough and up-to-date survey. <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a> provides a more detailed view of a generic SDN controller. A controller’s functionality can be broadly organized into three layers. Let’s consider these layers in an uncharacteristically bottom-up fashion:</p>
<ul id="P700101195200000000000000000AD68" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD68">
<li id="P700101195200000000000000000AD69" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD69"><p id="P700101195200000000000000000AD6A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD6A"><span class="leadin">A communication layer: communicating between the SDN controller and controlled network devices.</span> Clearly, if an SDN controller is going to control the operation of a remote SDN-enabled switch, host, or other device, a protocol is needed to transfer information between the controller and that device. In addition, a device must be able to communicate locally-observed events to the controller (e.g., a message indicating that an attached link has gone up or down, that a device has just joined the network, or a heartbeat indicating that a device is up and operational). These events provide the SDN controller with an up-to-date view of the network’s state. This protocol constitutes the lowest layer of the controller architecture, as shown in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>. The communication between the controller and the controlled devices cross what has come to be known as the controller’s “southbound” interface. In <a class="xref" href="#P7001011952000000000000000002170" data-foobar="1"><span class="label">Section</span> <span class="number">5.5.2</span></a>, we’ll study OpenFlow—a specific protocol that provides this communication functionality. OpenFlow is implemented in most, if not all, SDN controllers.</p></li>
<li id="P700101195200000000000000000AD6B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD6B"><p id="P700101195200000000000000000AD6C" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD6C"><span class="leadin">A network-wide state-management layer.</span> The ultimate control decisions made by the SDN control plane—e.g., configuring flow tables in all switches to achieve the desired end-end forwarding, to implement load balancing, or to implement a particular firewalling capability—will require that the controller have up-to-date information about state of the networks’ hosts, links, switches, and other SDN-controlled devices. A switch’s flow table contains counters whose values might also be profitably used by network-control applications; these values should thus be available to the applications. Since the ultimate aim of the control plane is to determine flow tables for the various controlled devices, a controller might also maintain a copy of these tables. These pieces of information all constitute examples of the network-wide “state” maintained by the SDN controller.</p></li>
<li id="P700101195200000000000000000AD6D" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD6D"><p id="P700101195200000000000000000AD6E" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD6E"><span class="leadin">The interface to the network-control application layer.</span> The controller interacts with network-control applications through its “northbound” interface. This API<span class="pagebreak" title="411" id="P700101195200000000000000000217C" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000217C" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P700101195200000000000000000217D" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000217D">
<img alt="Components of an SDN controller." height="660" width="581" aria-describedby="P7001011952000000000000000002181" id="P700101195200000000000000000AD6F" data-uri="P70010119520000000000000000055B5" src="../images/4055105015.png"></img>
<figcaption id="P700101195200000000000000000AD70" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD70"><header><h1 class="title" id="P700101195200000000000000000AD71" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD71" epub:type="title"><span class="label">Figure </span><span class="number">5.15</span> Components of an SDN controller</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000002181" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002181" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055105015.xhtml#la_4055105015"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000AD73" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD73">allows network-control applications to read/write network state and flow tables within the state-management layer. Applications can register to be notified when state-change events occur, so that they can take actions in response to network event notifications sent from SDN-controlled devices. Different types of APIs may be provided; we’ll see that two popular SDN controllers communicate with their applications using a REST <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038FC" data-foobar="7">[Fielding 2000]</a> request-response interface.</p></li>
</ul>
<p id="P700101195200000000000000000AD74" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD74">We have noted several times that an SDN controller can be considered to be ­“logically centralized,” i.e., that the controller may be viewed externally (e.g., from the point of view of SDN-controlled devices and external network-control applications) <span class="pagebreak" title="412" id="P7001011952000000000000000002185" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002185" epub:type="pagebreak" role="doc-pagebreak"></span>as a single, monolithic service. However, these services and the databases used to hold state information are implemented in practice by a <i>distributed</i> set of servers for fault tolerance, high availability, or for performance reasons. With controller functions being implemented by a <i>set</i> of servers, the semantics of the controller’s internal operations (e.g., maintaining logical time ordering of events, consistency, consensus, and more) must be considered <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A96" data-foobar="7">[Panda 2013]</a>. Such concerns are common across many different distributed systems; see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A1A" data-foobar="7">[Lamport 1989</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A1E" data-foobar="7">Lampson 1996]</a> for elegant solutions to these challenges. Modern controllers such as OpenDaylight <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A8A" data-foobar="7">[OpenDaylight Lithium 2016]</a> and ONOS <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A85" data-foobar="7">[ONOS 2016]</a> (see sidebar) have placed considerable emphasis on architecting a logically centralized but physically distributed controller platform that provides scalable services and high availability to the controlled devices and network-control applications alike.</p>
<p id="P700101195200000000000000000AD75" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD75">The architecture depicted in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a> closely resembles the architecture of the originally proposed NOX controller in 2008 <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003936" data-foobar="7">[Gude 2008]</a>, as well as that of today’s OpenDaylight <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A8A" data-foobar="7">[OpenDaylight Lithium 2016]</a> and ONOS <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A85" data-foobar="7">[ONOS 2016]</a> SDN controllers (see sidebar). We’ll cover an example of controller operation in <a class="xref" href="#P70010119520000000000000000021A6" data-foobar="1"><span class="label">Section</span> <span class="number">5.5.3</span></a>. First, however, let’s examine the OpenFlow protocol, which lies in the controller’s communication layer.</p>
</section>
<section id="P7001011952000000000000000002187" data-uri="M05_KURO4140_07_SE_C05.xhtml#P7001011952000000000000000002187" class="level2"><header><h1 class="title" id="P700101195200000000000000000AD76" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD76" epub:type="title"><span class="number">5.5.2</span> OpenFlow Protocol</h1></header>
<p id="P700101195200000000000000000AD77" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD77">The OpenFlow protocol <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A88" data-foobar="7">[OpenFlow 2009</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A83" data-foobar="7">ONF 2016]</a> operates between an SDN controller and an SDN-controlled switch or other device implementing the OpenFlow API that we studied earlier in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4.</span></a> The OpenFlow protocol operates over TCP, with a default port number of 6653.</p>
<p id="P700101195200000000000000000AD78" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD78">Among the important messages flowing from the controller to the controlled switch are the following:</p>
<ul id="P700101195200000000000000000AD79" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD79">
<li id="P700101195200000000000000000AD7A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7A"><p id="P700101195200000000000000000AD7B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7B"><span class="leadin">Configuration.</span> This message allows the controller to query and set a switch’s configuration parameters.</p></li>
<li id="P700101195200000000000000000AD7C" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7C"><p id="P700101195200000000000000000AD7D" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7D"><span class="leadin">Modify-State.</span> This message is used by a controller to add/delete or modify entries in the switch’s flow table, and to set switch port properties.</p></li>
<li id="P700101195200000000000000000AD7E" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7E"><p id="P700101195200000000000000000AD7F" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD7F"><span class="leadin">Read-State.</span> This message is used by a controller to collect statistics and counter values from the switch’s flow table and ports.</p></li>
<li id="P700101195200000000000000000AD80" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD80"><p id="P700101195200000000000000000AD81" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD81"><span class="leadin">Send-Packet.</span> This message is used by the controller to send a specific packet out of a specified port at the controlled switch. The message itself contains the packet to be sent in its payload.</p></li>
</ul>
<p id="P700101195200000000000000000AD82" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD82">Among the messages flowing from the SDN-controlled switch to the controller are the following:</p>
<ul id="P700101195200000000000000000AD83" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD83">
<li id="P700101195200000000000000000AD84" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD84"><p id="P700101195200000000000000000AD85" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD85"><span class="leadin">Flow-Removed.</span> This message informs the controller that a flow table entry has been removed, for example by a timeout or as the result of a received <i>modify-state</i> message.</p></li>
<li id="P700101195200000000000000000AD86" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD86"><p id="P700101195200000000000000000AD87" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD87"><span class="pagebreak" title="413" id="P700101195200000000000000000219A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000219A" epub:type="pagebreak" role="doc-pagebreak"></span><span class="leadin">Port-status.</span> This message is used by a switch to inform the controller of a change in port status.</p></li>
<li id="P700101195200000000000000000AD88" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD88"><p id="P700101195200000000000000000AD89" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD89"><span class="leadin">Packet-in.</span> Recall from <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a> that a packet arriving at a switch port and not matching any flow table entry is sent to the controller for additional processing. Matched packets may also be sent to the controller, as an action to be taken on a match. The <i>packet-in</i> message is used to send such packets to the controller.</p></li>
</ul>
<p class="continued" id="P700101195200000000000000000AD8A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8A">Additional OpenFlow messages are defined in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A88" data-foobar="7">[OpenFlow 2009</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A83" data-foobar="7">ONF 2016]</a>.</p>
<aside class="sidebar" id="P700101195200000000000000000219E" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000219E"><header><h1 class="title" id="P700101195200000000000000000AD8B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8B" epub:type="title"><span class="label">Principles in Practice </span></h1></header>
<section id="P70010119520000000000000000021A0" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021A0"><header><h1 class="title" id="P700101195200000000000000000AD8C" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8C" epub:type="title">Google’s Software-Defined Global Network</h1></header>
<p id="P700101195200000000000000000AD8D" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8D">Recall from the case study in <a class="xref" href="fileP7001011952000000000000000000DC1.xhtml#P7001011952000000000000000000DC1" data-foobar="7"><span class="label">Section</span> <span class="number">2.6</span></a> that Google deploys a dedicated wide-area network (WAN) that interconnects its data centers and server clusters (in IXPs and ISPs). This network, called B4, has a Google-designed SDN control plane built on OpenFlow. Google’s network is able to drive WAN links at near 70% utilization over the long run (a two to three fold increase over typical link utilizations) and split application flows among multiple paths based on application priority and existing flow demands <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039BC" data-foobar="7">[Jain 2013]</a>.</p>
<p id="P700101195200000000000000000AD8E" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8E">The Google B4 network is particularly it well-suited for SDN: <i>(i)</i> Google controls all devices from the edge servers in IXPs and ISPs to routers in their network core; <i>(ii)</i> the most bandwidth-intensive applications are large-scale data copies between sites that can defer to higher-priority interactive applications during times of resource congestion; <i>(iii)</i> with only a few dozen data centers being connected, centralized control is feasible.</p>
<p id="P700101195200000000000000000AD8F" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD8F">Google’s B4 network uses custom-built switches, each implementing a slightly extended version of OpenFlow, with a local Open Flow Agent (OFA) that is similar in spirit to the control agent we encountered in <a class="xref" href="fileP7001011952000000000000000001EE4.xhtml#P7001011952000000000000000001EF6" data-foobar="7"><span class="label">Figure</span> <span class="number">5.2</span></a>. Each OFA in turn connects to an Open Flow Controller (OFC) in the network control server (NCS), using a separate “out of band” network, distinct from the network that carries data-center traffic between data centers. The OFC thus provides the services used by the NCS to communicate with its controlled switches, similar in spirit to the lowest layer in the SDN architecture shown in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>. In B4, the OFC also performs state management functions, keeping node and link status in a Network Information Base (NIB). Google’s implementation of the OFC is based on the ONIX SDN controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039F7" data-foobar="7">[Koponen 2010]</a>. Two routing protocols, BGP (for routing between the data centers) and IS-IS (a close relative of OSPF, for routing within a data center), are implemented. Paxos <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003873" data-foobar="7">[Chandra 2007]</a> is used to execute hot replicas of NCS components to protect against failure.</p>
<p id="P700101195200000000000000000AD90" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD90">A traffic engineering network-control application, sitting logically above the set of network control servers, interacts with these servers to provide global, network-wide bandwidth provisioning for groups of application flows. With B4, SDN made an important leap forward into the operational networks of a global network provider. See <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039BC" data-foobar="7">[Jain 2013]</a> for a detailed description of B4.</p>
</section>
</aside>
</section>
<section id="P70010119520000000000000000021A6" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021A6" class="level2"><header><h1 class="title" id="P700101195200000000000000000AD91" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD91" epub:type="title"><span class="pagebreak" title="414" id="P70010119520000000000000000021A8" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021A8" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">5.5.3</span> Data and Control Plane Interaction: An Example</h1></header>
<p id="P700101195200000000000000000AD92" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD92">In order to solidify our understanding of the interaction between SDN-controlled switches and the SDN controller, let’s consider the example shown in <a class="xref" href="#P70010119520000000000000000021B0" data-foobar="1"><span class="label">Figure</span> <span class="number">5.16</span></a>, in which Dijkstra’s algorithm (which we studied in <a class="xref" href="fileP7001011952000000000000000001EFF.xhtml#P7001011952000000000000000001EFF" data-foobar="7"><span class="label">Section</span> <span class="number">5.2</span></a>) is used to determine shortest path routes. The SDN scenario in <a class="xref" href="#P70010119520000000000000000021B0" data-foobar="1"><span class="label">Figure</span> <span class="number">5.16</span></a> has two important differences from the earlier per-router-control scenario of <a class="xref" href="fileP7001011952000000000000000001EFF.xhtml#P7001011952000000000000000001F24" data-foobar="7"><span class="label">Sections</span> <span class="number">5.2.1</span></a> and <a class="xref" href="fileP7001011952000000000000000002092.xhtml#P7001011952000000000000000002092" data-foobar="7"><span class="number">5.3</span></a>, where ­Dijkstra’s algorithm was implemented in each and every router and link-state updates were flooded among all network routers:</p>
<ul id="P700101195200000000000000000AD93" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD93">
<li id="P700101195200000000000000000AD94" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD94"><p id="P700101195200000000000000000AD95" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD95">Dijkstra’s algorithm is executed as a separate application, outside of the packet switches.</p></li>
<li id="P700101195200000000000000000AD96" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD96"><p id="P700101195200000000000000000AD97" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD97">Packet switches send link updates to the SDN controller and not to each other.</p></li>
</ul>
<p id="P700101195200000000000000000AD98" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD98">In this example, let’s assume that the link between switch s1 and s2 goes down; that shortest path routing is implemented, and consequently and that incoming and outgoing flow forwarding rules at s1, s3, and s4 are affected, but that s2’s</p>
<figure id="P70010119520000000000000000021B0" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021B0">
<img alt="SDN controller scenario: link state change." height="577" width="444" aria-describedby="P70010119520000000000000000021B4" id="P700101195200000000000000000AD99" data-uri="P70010119520000000000000000055B6" src="../images/4055105016.png"></img>
<figcaption id="P700101195200000000000000000AD9A" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD9A"><header><h1 class="title" id="P700101195200000000000000000AD9B" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD9B" epub:type="title"><span class="label">Figure </span><span class="number">5.16</span> SDN controller scenario: Link-state change</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000021B4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021B4" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055105016.xhtml#la_4055105016"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000AD9E" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD9E"><span class="pagebreak" title="415" id="P70010119520000000000000000021B8" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021B8" epub:type="pagebreak" role="doc-pagebreak"></span>operation is unchanged. Let’s also assume that OpenFlow is used as the communication layer protocol, and that the control plane performs no other function other than link-state routing.</p>
<ol id="P700101195200000000000000000AD9F" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000AD9F">
<li id="P700101195200000000000000000ADA0" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA0"><p id="P700101195200000000000000000ADA1" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA1">Switch s1, experiencing a link failure between itself and s2, notifies the SDN controller of the link-state change using the OpenFlow <i>port-status</i> message.</p></li>
<li id="P700101195200000000000000000ADA2" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA2"><p id="P700101195200000000000000000ADA3" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA3">The SDN controller receives the OpenFlow message indicating the link-state change, and notifies the link-state manager, which updates a link-state ­database.</p></li>
<li id="P700101195200000000000000000ADA4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA4"><p id="P700101195200000000000000000ADA5" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA5">The network-control application that implements Dijkstra’s link-state routing has previously registered to be notified when link state changes. That application receives the notification of the link-state change.</p></li>
<li id="P700101195200000000000000000ADA6" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA6"><p id="P700101195200000000000000000ADA7" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA7">The link-state routing application interacts with the link-state manager to get updated link state; it might also consult other components in the state-­management layer. It then computes the new least-cost paths.</p></li>
<li id="P700101195200000000000000000ADA8" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA8"><p id="P700101195200000000000000000ADA9" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADA9">The link-state routing application then interacts with the flow table manager, which determines the flow tables to be updated.</p></li>
<li id="P700101195200000000000000000ADAA" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAA"><p id="P700101195200000000000000000ADAB" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAB">The flow table manager then uses the OpenFlow protocol to update flow table entries at affected switches—s1 (which will now route packets destined to s2 via s4), s2 (which will now begin receiving packets from s1 via intermediate switch s4), and s4 (which must now forward packets from s1 destined to s2).</p></li>
</ol>
<p class="continued" id="P700101195200000000000000000ADAC" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAC">This example is simple but illustrates how the SDN control plane provides control-plane services (in this case network-layer routing) that had been previously implemented with per-router control exercised in each and every network router. One can now easily appreciate how an SDN-enabled ISP could easily switch from least-cost path routing to a more hand-tailored approach to routing. Indeed, since the controller can tailor the flow tables as it pleases, it can implement <i>any</i> form of forwarding that it pleases—simply by changing its application-control software. This ease of change should be contrasted to the case of a traditional per-router control plane, where software in all routers (which might be provided to the ISP by multiple independent vendors) must be changed.</p>
</section>
<section id="P70010119520000000000000000021C7" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021C7" class="level2"><header><h1 class="title" id="P700101195200000000000000000ADAD" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAD" epub:type="title"><span class="number">5.5.4</span> SDN: Past and Future</h1></header>
<p id="P700101195200000000000000000ADAE" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAE">Although the intense interest in SDN is a relatively recent phenomenon, the technical roots of SDN, and the separation of the data and control planes in particular, go back considerably further. In 2004, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038EF" data-foobar="7">[Feamster 2004</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A16" data-foobar="7">Lakshman 2004</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B89" data-foobar="7">RFC 3746]</a> all argued for the separation of the network’s data and control planes. <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C5C" data-foobar="7">[van der Merwe 1998]</a> describes a control framework for ATM networks <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003841" data-foobar="7">[Black 1995]</a> with multiple controllers, each controlling a number of ATM switches. The Ethane project <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003860" data-foobar="7">[Casado 2007]</a> pioneered the notion of a network of simple flow-based Ethernet switches with match-plus-action flow tables, a centralized controller that managed flow admission <span class="pagebreak" title="416" id="P70010119520000000000000000021CA" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021CA" epub:type="pagebreak" role="doc-pagebreak"></span>and routing, and the forwarding of unmatched packets from the switch to the controller. A network of more than 300 Ethane switches was operational in 2007. Ethane quickly evolved into the OpenFlow project, and the rest (as the saying goes) is history!</p>
<p id="P700101195200000000000000000ADAF" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADAF">Numerous research efforts are aimed at developing future SDN architectures and capabilities. As we have seen, the SDN revolution is leading to the disruptive replacement of dedicated monolithic switches and routers (with both data and control planes) by simple commodity switching hardware and a sophisticated software control plane. A generalization of SDN known as network functions virtualization (NFV) similarly aims at disruptive replacement of sophisticated middleboxes (such as middleboxes with dedicated hardware and proprietary software for media caching/service) with simple commodity servers, switching, and storage <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003921" data-foobar="7">[Gember-Jacobson 2014]</a>. A second area of important research seeks to extend SDN concepts from the intra-AS setting to the inter-AS setting <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003940" data-foobar="7">[Gupta 2014]</a>.</p>
<aside class="sidebar" id="P70010119520000000000000000021CC" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021CC"><header><h1 class="title" id="P700101195200000000000000000ADB0" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB0" epub:type="title"><span class="label">PRINCIPLES IN PRACTICE </span></h1></header>
<section id="P70010119520000000000000000021CE" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021CE"><header><h1 class="title" id="P700101195200000000000000000ADB1" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB1" epub:type="title">SDN Controller Case Studies: The OpenDaylight and ONOS Controllers</h1></header>
<p id="P700101195200000000000000000ADB2" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB2">In the earliest days of SDN, there was a single SDN protocol (OpenFlow <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A47" data-foobar="7">[McKeown 2008</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A88" data-foobar="7">OpenFlow 2009]</a>) and a single SDN controller (NOX <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003936" data-foobar="7">[Gude 2008]</a>). Since then, the number of SDN controllers in particular has grown significantly <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039FF" data-foobar="7">[Kreutz 2015]</a>. Some SDN controllers are company-specific and proprietary, e.g., ONIX <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039F7" data-foobar="7">[Koponen 2010]</a>, Juniper Networks Contrail <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039C7" data-foobar="7">[Juniper Contrail 2016]</a>, and Google’s controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000039BC" data-foobar="7">[Jain 2013]</a> for its B4 wide-area network. But many more controllers are open-source and implemented in a variety of programming languages <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P70010119520000000000000000038E5" data-foobar="7">[Erickson 2013]</a>. Most recently, the OpenDaylight controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A8A" data-foobar="7">[OpenDaylight Lithium 2016]</a> and the ONOS controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A85" data-foobar="7">[ONOS 2016]</a> have found considerable industry support. They are both open-source and are being developed in partnership with the Linux Foundation.</p>
<section id="P70010119520000000000000000021D1" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021D1"><header><h1 class="title" id="P700101195200000000000000000ADB3" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB3" epub:type="title">The OpenDaylight Controller</h1></header>
<p id="P700101195200000000000000000ADB4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB4"><a class="xref" href="#P70010119520000000000000000021D6" data-foobar="1"><span class="label">Figure</span> <span class="number">5.17</span></a> presents a simplified view of the OpenDaylight Lithium SDN controller platform <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A8A" data-foobar="7">[OpenDaylight Lithium 2016]</a>. ODL’s main set of controller components correspond closely to those we developed in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>.</p>
<p id="P700101195200000000000000000ADB5" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB5"><i>Network-Service Applications</i> are the applications that determine how data-plane forwarding and other services, such as firewalling and load balancing, are accomplished in the controlled switches. Unlike the canonical controller in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>, the ODL controller has <i>two</i> interfaces through which applications may communicate with native controller services and each other: external applications communicate with controller modules using a REST request-response API running over HTTP. Internal applications communicate with each other via the Service Abstraction Layer (SAL). The choice as to whether a controller application is implemented externally or internally is up to the application designer;<span class="pagebreak" title="417" id="P70010119520000000000000000021D5" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021D5" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000021D6" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021D6">
<img alt="Illustration of the OpenDaylight Controller." height="606" width="624" aria-describedby="P70010119520000000000000000021DA" id="P700101195200000000000000000ADB6" data-uri="P70010119520000000000000000055B7" src="../images/4055105017.png"></img>
<figcaption id="P700101195200000000000000000ADB7" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB7"><header><h1 class="title" id="P700101195200000000000000000ADB8" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADB8" epub:type="title"><span class="label">Figure </span><span class="number">5.17</span> The OpenDaylight controller</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000021DA" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021DA" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055105017.xhtml#la_4055105017"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000ADBA" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADBA">the particular configuration of applications shown in <a class="xref" href="#P70010119520000000000000000021D6" data-foobar="1"><span class="label">Figure</span> <span class="number">5.17</span></a> is only meant as an ­example.</p>
<p id="P700101195200000000000000000ADBB" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADBB">ODL’s <i>Basic Network-Service Functions</i> are at the heart of the controller, and they correspond closely to the network-wide state management capabilities that we encountered in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>. The SAL is the controller’s nerve center, allowing controller ­components and applications to invoke each other’s services and to subscribe to events they generate. It also provides a uniform abstract interface to the specific <i>underlying communications protocols</i> in the communication layer, including OpenFlow and SNMP (the Simple Network Management Protocol—a network management protocol that we will cover in <a class="xref" href="fileP7001011952000000000000000002202.xhtml#P7001011952000000000000000002202" data-foobar="7"><span class="label">Section</span> <span class="number">5.7</span></a>). OVSDB is a protocol used to manage data center switching, an important application area for SDN technology. We’ll introduce data center networking in <a class="xref" href="fileP70010119520000000000000000023B1.xhtml#P70010119520000000000000000023B1" data-foobar="7"><span class="label">Chapter</span> <span class="number">6</span></a>.</p>
<figure id="P70010119520000000000000000021DE" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021DE">
<img alt="Illustration of ONOS controller architecture." height="547" width="660" aria-describedby="P70010119520000000000000000021E2" id="P700101195200000000000000000ADBC" data-uri="P70010119520000000000000000055B8" src="../images/4055105018.png"></img>
<figcaption id="P700101195200000000000000000ADBD" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADBD"><header><h1 class="title" id="P700101195200000000000000000ADBE" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADBE" epub:type="title"><span class="label">Figure </span><span class="number">5.18</span> ONOS controller architecture</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000021E2" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021E2" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055105018.xhtml#la_4055105018"><span class="label">Description</span></a></div>
</section>
<section id="P70010119520000000000000000021E4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021E4"><header><h1 class="title" id="P700101195200000000000000000ADC0" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC0" epub:type="title"><span class="pagebreak" title="418" id="P70010119520000000000000000021E6" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021E6" epub:type="pagebreak" role="doc-pagebreak"></span>The ONOS Controller</h1></header>
<p id="P700101195200000000000000000ADC1" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC1"><a class="xref" href="#P70010119520000000000000000021DE" data-foobar="1"><span class="label">Figure</span> <span class="number">5.18</span></a> presents a simplified view of the ONOS controller <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A85" data-foobar="7">ONOS 2016]</a>. Similar to the canonical controller in <a class="xref" href="#P700101195200000000000000000217D" data-foobar="1"><span class="label">Figure</span> <span class="number">5.15</span></a>, three layers can be identified in the ONOS ­controller:</p>
<ul id="P700101195200000000000000000ADC2" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC2">
<li id="P700101195200000000000000000ADC3" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC3"><p id="P700101195200000000000000000ADC4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC4"><span class="leadin">Northbound abstractions and protocols.</span> A unique feature of ONOS is its intent framework, which allows an application to request a high-level service (e.g., to setup a connection between host A and Host B, or conversely to not allow Host A and host B to communicate) without having to know the details of how this service is performed. State information is provided to network-control applications across the northbound API either synchronously (via query) or asynchronously (via listener callbacks, e.g., when network state changes).</p></li>
<li id="P700101195200000000000000000ADC5" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC5"><p id="P700101195200000000000000000ADC6" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC6"><span class="leadin">Distributed core.</span> The state of the network’s links, hosts, and devices is maintained in ONOS’s distributed core. ONOS is deployed as a service on a set of interconnected servers, with each server running an identical copy of the ONOS software; an increased number of servers offers an increased service capacity. The ONOS core <span class="pagebreak" title="419" id="P70010119520000000000000000021ED" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021ED" epub:type="pagebreak" role="doc-pagebreak"></span>provides the mechanisms for service replication and coordination among instances, providing the applications above and the network devices below with the abstraction of logically centralized core services.</p></li>
<li id="P700101195200000000000000000ADC7" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC7"><p id="P700101195200000000000000000ADC8" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC8"><span class="leadin">Southbound abstractions and protocols.</span> The southbound abstractions mask the heterogeneity of the underlying hosts, links, switches, and protocols, allowing the distributed core to be both device and protocol agnostic. Because of this abstraction, the southbound interface below the distributed core is logically higher than in our canonical controller in <a class="xref" href="#P7001011952000000000000000002167" data-foobar="1"><span class="label">Figure</span> <span class="number">5.14</span></a> or the ODL controller in <a class="xref" href="#P70010119520000000000000000021D6" data-foobar="1"><span class="label">Figure</span> <span class="number">5.17</span></a>.</p></li>
</ul>
</section>
</section>
</aside>
</section>
</section></body></html>