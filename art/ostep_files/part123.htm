<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Interlude: Memory API</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part122.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part124.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 184pt;text-indent: 0pt;text-align: left;">Interlude: Memory API</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this interlude, we discuss the memory allocation interfaces in U<span class="s7">NIX </span>systems. The interfaces provided are quite simple, and hence the chapter is short and to the point<span class="s35">1</span>. The main problem we address is this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>A<span class="s7">LLOCATE </span>A<span class="s7">ND </span>M<span class="s7">ANAGE </span>M<span class="s7">EMORY</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In U<span class="s7">NIX</span>/C programs, understanding how to allocate and manage memory is critical in building robust and reliable software. What inter- faces are commonly used? What mistakes should be avoided?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part124.htm">14.1 Types of Memory</a><a class="toc0" href="part125.htm">14.2 The malloc() Call</a><a class="toc0" href="part126.htm">14.3 The free() Call</a><a class="toc0" href="part127.htm">14.4 Common Errors</a><a class="toc1" href="part128.htm">Forgetting To Allocate Memory</a><a class="toc1" href="part129.htm">Not Allocating Enough Memory</a><a class="toc1" href="part130.htm">Forgetting to Initialize Allocated Memory</a><a class="toc1" href="part131.htm">Forgetting To Free Memory</a><a class="toc1" href="part132.htm">Freeing Memory Before You Are Done With It</a><a class="toc1" href="part133.htm">Freeing Memory Repeatedly</a><a class="toc1" href="part134.htm">Calling free() Incorrectly</a><a class="toc1" href="part135.htm">Summary</a><a class="toc0" href="part136.htm">14.5 Underlying OS Support</a><a class="toc0" href="part137.htm">14.6 Other Calls</a><a class="toc0" href="part138.htm">14.7 Summary</a><a class="toc0" href="part139.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part122.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part124.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
