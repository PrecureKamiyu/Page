<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>4.3 Sequential Y86-64 Implementations</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000003D54" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000041F55" data-uri="chapter04.xhtml#P7000497027000000000000000041F55" epub:type="title"><span class="pcalibre label pcalibre1">4.3 </span>Sequential Y86-64 Implementations</h1></header>
<p id="P7000497027000000000000000041F56" data-uri="chapter04.xhtml#P7000497027000000000000000041F56" class="pcalibre1 pcalibre calibre2">Now we have the components required to implement a Y86-64 processor. As a first step, we describe a processor called SEQ (for "sequential" processor). On each clock cycle, SEQ performs all the steps required to process a complete instruction. This would require a very long cycle time, however, and so the clock rate would be unacceptably low. Our purpose in developing SEQ is to provide a first step toward our ultimate goal of implementing an efficient pipelined processor.</p>

<section id="P7000497027000000000000000003D57" data-uri="chapter04.xhtml#P7000497027000000000000000003D57" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000041F57" data-uri="chapter04.xhtml#P7000497027000000000000000041F57" epub:type="title"><span class="pcalibre label pcalibre1">4.3.1 </span>Organizing Processing into Stages</h1></header>
<p id="P7000497027000000000000000041F58" data-uri="chapter04.xhtml#P7000497027000000000000000041F58" class="pcalibre1 pcalibre calibre2">In general, processing an instruction involves a number of operations. We organize them in a particular sequence of stages, attempting to make all instructions follow a uniform sequence, even though the instructions differ greatly in their actions. The detailed processing at each step depends on the particular instruction being executed. Creating this framework will allow us to design a processor that makes best use of the hardware. The following is an informal description of the stages and the operations performed within them:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000041F59" data-uri="chapter04.xhtml#P7000497027000000000000000041F59">
<li id="P7000497027000000000000000041F5A" data-uri="chapter04.xhtml#P7000497027000000000000000041F5A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F5B" data-uri="chapter04.xhtml#P7000497027000000000000000041F5B" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Fetch. </span>The fetch stage reads the bytes of an instruction from memory, using the program counter (PC) as the memory address. From the instruction it extracts the two 4-bit portions of the instruction specifier byte, referred to as icode (the instruction code) and ifun (the instruction function). It possibly fetches a register specifier byte, giving one or both of the register operand specifiers rA and rB. It also possibly fetches an 8-byte constant word valC. It computes valP to be the address of the instruction following the current one in sequential order. That is, valP equals the value of the PC plus the length of the fetched instruction.</p>
</li>
<li id="P7000497027000000000000000041F5C" data-uri="chapter04.xhtml#P7000497027000000000000000041F5C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F5D" data-uri="chapter04.xhtml#P7000497027000000000000000041F5D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003D5F" title="385" data-uri="chapter04.xhtml#P7000497027000000000000000003D5F" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">Decode. </span>The decode stage reads up to two operands from the register file, giving values valA and/or valB. Typically, it reads the registers designated by instruction fields rA and rB, but for some instructions it reads register <code id="P7000497027000000000000000041F5E" data-uri="chapter04.xhtml#P7000497027000000000000000041F5E" class="pcalibre1 calibre8 pcalibre">%rsp</code>.</p></li>
<li id="P7000497027000000000000000041F5F" data-uri="chapter04.xhtml#P7000497027000000000000000041F5F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F60" data-uri="chapter04.xhtml#P7000497027000000000000000041F60" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Execute. </span>In the execute stage, the arithmetic/logic unit (ALU) either performs the operation specified by the instruction (according to the value of ifun), computes the effective address of a memory reference, or increments or decrements the stack pointer. We refer to the resulting value as valE. The condition codes are possibly set. For a conditional move instruction, the stage will evaluate the condition codes and move condition (given by ifun) and enable the updating of the destination register only if the condition holds. Similarly, for a jump instruction, it determines whether or not the branch should be taken.</p></li>
<li id="P7000497027000000000000000041F61" data-uri="chapter04.xhtml#P7000497027000000000000000041F61" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F62" data-uri="chapter04.xhtml#P7000497027000000000000000041F62" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Memory. </span>The memory stage may write data to memory, or it may read data from memory. We refer to the value read as valM.</p></li>
<li id="P7000497027000000000000000041F63" data-uri="chapter04.xhtml#P7000497027000000000000000041F63" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F64" data-uri="chapter04.xhtml#P7000497027000000000000000041F64" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Write back. </span>The write-back stage writes up to two results to the register file.</p></li>
<li id="P7000497027000000000000000041F65" data-uri="chapter04.xhtml#P7000497027000000000000000041F65" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041F66" data-uri="chapter04.xhtml#P7000497027000000000000000041F66" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">PC update. </span>The PC is set to the address of the next instruction.</p></li>
</ul>
<p id="P7000497027000000000000000041F67" data-uri="chapter04.xhtml#P7000497027000000000000000041F67" class="pcalibre1 pcalibre calibre2">The processor loops indefinitely, performing these stages. In our simplified implementation, the processor will stop when any exception occurs—that is, when it executes a <code id="P7000497027000000000000000041F68" data-uri="chapter04.xhtml#P7000497027000000000000000041F68" class="pcalibre1 calibre8 pcalibre">halt</code> or invalid instruction, or it attempts to read or write an invalid address. In a more complete design, the processor would enter an exception-handling mode and begin executing special code determined by the type of exception.</p>
<p id="P7000497027000000000000000041F69" data-uri="chapter04.xhtml#P7000497027000000000000000041F69" class="pcalibre1 pcalibre calibre2">As can be seen by the preceding description, there is a surprising amount of processing required to execute a single instruction. Not only must we perform the stated operation of the instruction, we must also compute addresses, update stack pointers, and determine the next instruction address. Fortunately, the overall flow can be similar for every instruction. Using a very simple and uniform structure is important when designing hardware, since we want to minimize the total amount of hardware and we must ultimately map it onto the two-dimensional surface of an integrated-circuit chip. One way to minimize the complexity is to have the different instructions share as much of the hardware as possible. For example, each of our processor designs contains a single arithmetic/logic unit that is used in different ways depending on the type of instruction being executed. The cost of duplicating blocks of logic in hardware is much higher than the cost of having multiple copies of code in software. It is also more difficult to deal with many special cases and idiosyncrasies in a hardware system than with software.</p>
<p id="P7000497027000000000000000041F6A" data-uri="chapter04.xhtml#P7000497027000000000000000041F6A" class="pcalibre1 pcalibre calibre2">Our challenge is to arrange the computing required for each of the different instructions to fit within this general framework. We will use the code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a> to illustrate the processing of different Y86-64 instructions. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> through <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a> contain tables describing how the different Y86-64 instructions proceed through the stages. It is worth the effort to study these tables carefully. They are in a form that enables a straightforward mapping into the hardware. Each line in these tables describes an assignment to some signal or stored state</p>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003D6D" data-uri="chapter04.xhtml#P7000497027000000000000000003D6D">

<pre id="P7000497027000000000000000041F6B" data-uri="chapter04.xhtml#P7000497027000000000000000041F6B" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000041F6C" data-uri="chapter04.xhtml#P7000497027000000000000000041F6C" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003D70" title="386" data-uri="chapter04.xhtml#P7000497027000000000000000003D70" epub:type="pagebreak"></span>1	0x000: 30f 20900000000000000	|	irmovq $9, %rdx
2	0x00a: 30f31500000000000000	|	irmovq $21, %rbx
3	0x014: 6123			|	subq %rdx, %rbx			# subtract
4	0x016: 30f48000000000000000	|	irmovq $128,%rsp		# <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003DAD"><span class="pcalibre label pcalibre1">Problem </span><span class="number pcalibre pcalibre1">4.13</span></a>
5	0x020: 40436400000000000000	|	rmmovq %rsp, 100(%rbx)		# store
6	0x02a: a02f			|	pushq %rdx			# push
7	0x02c: b00f			|	popq %rax			# <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E52"><span class="pcalibre label pcalibre1">Problem </span><span class="number pcalibre pcalibre1">4.14</span></a>
8	0x02e: 734000000000000000	|	je done				# Not taken
9	0x037: 804100000000000000	|	call proc			# <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003F4A"><span class="pcalibre label pcalibre1">Problem </span><span class="number pcalibre pcalibre1">4.18</span></a>
10	0x040:				| done:
11	0x040: 00			|	halt
12	0x041:				| proc:
13	0x041: 90			|	ret				# Return
14					|
</code></pre>
<figcaption id="P7000497027000000000000000041F6D" data-uri="chapter04.xhtml#P7000497027000000000000000041F6D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000041F6E" data-uri="chapter04.xhtml#P7000497027000000000000000041F6E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.17 </span>Sample Y86-64 instruction sequence.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000041F6F" data-uri="chapter04.xhtml#P7000497027000000000000000041F6F"><p id="P7000497027000000000000000041F70" data-uri="chapter04.xhtml#P7000497027000000000000000041F70" class="pcalibre calibre3 pcalibre1"> We will trace the processing of these instructions through the different stages.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041F71" data-uri="chapter04.xhtml#P7000497027000000000000000041F71">(indicated by the assignment operation ‘←’). These should be read as if they were evaluated in sequence from top to bottom. When we later map the computations to hardware, we will find that we do not need to perform these evaluations in strict sequential order.</p>
<p id="P7000497027000000000000000041F72" data-uri="chapter04.xhtml#P7000497027000000000000000041F72" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D82"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.18</span></a> shows the processing required for instruction types <code id="P7000497027000000000000000041F73" data-uri="chapter04.xhtml#P7000497027000000000000000041F73" class="pcalibre1 calibre8 pcalibre">OPq</code> (integer and logical operations), <code id="P7000497027000000000000000041F74" data-uri="chapter04.xhtml#P7000497027000000000000000041F74" class="pcalibre1 calibre8 pcalibre">rrmovq</code> (register-register move), and <code id="P7000497027000000000000000041F75" data-uri="chapter04.xhtml#P7000497027000000000000000041F75" class="pcalibre1 calibre8 pcalibre">irmovq</code> (immediate-register move). Let us first consider the integer operations. Examining <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.2</span></a>, we can see that we have carefully chosen an encoding of instructions so that the four integer operations (<code id="P7000497027000000000000000041F76" data-uri="chapter04.xhtml#P7000497027000000000000000041F76" class="pcalibre1 calibre8 pcalibre">addq, subq, andq</code>, and <code id="P7000497027000000000000000041F77" data-uri="chapter04.xhtml#P7000497027000000000000000041F77" class="pcalibre1 calibre8 pcalibre">xorq</code>) all have the same value of <code id="P7000497027000000000000000041F78" data-uri="chapter04.xhtml#P7000497027000000000000000041F78" class="pcalibre1 calibre8 pcalibre">icode</code>. We can handle them all by an identical sequence of steps, except that the ALU computation must be set according to the particular instruction operation, encoded in ifun.</p>
<p id="P7000497027000000000000000041F79" data-uri="chapter04.xhtml#P7000497027000000000000000041F79" class="pcalibre1 pcalibre calibre2">The processing of an integer-operation instruction follows the general pattern listed above. In the fetch stage, we do not require a constant word, and so valP is computed as PC + 2. During the decode stage, we read both operands. These are supplied to the ALU in the execute stage, along with the function specifier ifun, so that valE becomes the instruction result. This computation is shown as the expression valB OP valA, where OP indicates the operation specified by ifun. Note the ordering of the two arguments—this order is consistent with the conventions of Y86-64 (and x86-64). For example, the instruction <code id="P7000497027000000000000000041F7A" data-uri="chapter04.xhtml#P7000497027000000000000000041F7A" class="pcalibre1 calibre8 pcalibre">subq %rax, %rdx</code> is supposed to compute the value <code id="P7000497027000000000000000041F7B" data-uri="chapter04.xhtml#P7000497027000000000000000041F7B" class="pcalibre1 calibre8 pcalibre">R[%rdx] - R[%rax]</code>. Nothing happens in the memory stage for these instructions, but valE is written to register rB in the write-back stage, and the PC is set to valP to complete the instruction execution.</p>
<p id="P7000497027000000000000000041F7C" data-uri="chapter04.xhtml#P7000497027000000000000000041F7C" class="pcalibre1 pcalibre calibre2">Executing an <code id="P7000497027000000000000000041F7D" data-uri="chapter04.xhtml#P7000497027000000000000000041F7D" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction proceeds much like an arithmetic operation. We do not need to fetch the second register operand, however. Instead, we set the second ALU input to zero and add this to the first, giving valE = valA, which is</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003D82" data-uri="chapter04.xhtml#P7000497027000000000000000003D82">

<table id="P7000497027000000000000000041F7E" data-uri="chapter04.xhtml#P7000497027000000000000000041F7E" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041F7F" data-uri="chapter04.xhtml#P7000497027000000000000000041F7F" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003D85" title="387" data-uri="chapter04.xhtml#P7000497027000000000000000003D85" epub:type="pagebreak"></span>Stage	</th>
<th id="P7000497027000000000000000041F80" data-uri="chapter04.xhtml#P7000497027000000000000000041F80" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041F81" data-uri="chapter04.xhtml#P7000497027000000000000000041F81" class="calibre10 pcalibre pcalibre1">OPq</code> rA, rB	</th>
<th id="P7000497027000000000000000041F82" data-uri="chapter04.xhtml#P7000497027000000000000000041F82" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041F83" data-uri="chapter04.xhtml#P7000497027000000000000000041F83" class="calibre10 pcalibre pcalibre1">rrmovq</code> rA, rB	</th>
<th id="P7000497027000000000000000041F84" data-uri="chapter04.xhtml#P7000497027000000000000000041F84" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041F85" data-uri="chapter04.xhtml#P7000497027000000000000000041F85" class="calibre10 pcalibre pcalibre1">irmovq</code> V, rB</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041F86" data-uri="chapter04.xhtml#P7000497027000000000000000041F86" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000041F87" data-uri="chapter04.xhtml#P7000497027000000000000000041F87" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>
<td id="P7000497027000000000000000041F88" data-uri="chapter04.xhtml#P7000497027000000000000000041F88" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>
<td id="P7000497027000000000000000041F89" data-uri="chapter04.xhtml#P7000497027000000000000000041F89" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC +1]<br class="edition pcalibre pcalibre1"/>valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000041F8A" data-uri="chapter04.xhtml#P7000497027000000000000000041F8A" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
<td id="P7000497027000000000000000041F8B" data-uri="chapter04.xhtml#P7000497027000000000000000041F8B" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
<td id="P7000497027000000000000000041F8C" data-uri="chapter04.xhtml#P7000497027000000000000000041F8C" class="calibre20 pcalibre pcalibre1">valP ← PC+ 10</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041F8D" data-uri="chapter04.xhtml#P7000497027000000000000000041F8D" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000041F8E" data-uri="chapter04.xhtml#P7000497027000000000000000041F8E" class="calibre20 pcalibre pcalibre1">valA ← R[rA] valB ← R[rB]</td>
<td id="P7000497027000000000000000041F8F" data-uri="chapter04.xhtml#P7000497027000000000000000041F8F" class="calibre20 pcalibre pcalibre1">valA ← R[rA]</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>

<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041F90" data-uri="chapter04.xhtml#P7000497027000000000000000041F90" class="calibre20 pcalibre pcalibre1">
Execute</td>
<td id="P7000497027000000000000000041F91" data-uri="chapter04.xhtml#P7000497027000000000000000041F91" class="calibre20 pcalibre pcalibre1">valE ← valBOPvalA SetCC</td>
<td id="P7000497027000000000000000041F92" data-uri="chapter04.xhtml#P7000497027000000000000000041F92" class="calibre20 pcalibre pcalibre1">valE ← 0 + valA</td>
<td id="P7000497027000000000000000041F93" data-uri="chapter04.xhtml#P7000497027000000000000000041F93" class="calibre20 pcalibre pcalibre1">valE ← 0 + valC</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000041F94" data-uri="chapter04.xhtml#P7000497027000000000000000041F94" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041F95" data-uri="chapter04.xhtml#P7000497027000000000000000041F95" class="calibre20 pcalibre pcalibre1">
Write back</td>
<td id="P7000497027000000000000000041F96" data-uri="chapter04.xhtml#P7000497027000000000000000041F96" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
<td id="P7000497027000000000000000041F97" data-uri="chapter04.xhtml#P7000497027000000000000000041F97" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
<td id="P7000497027000000000000000041F98" data-uri="chapter04.xhtml#P7000497027000000000000000041F98" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041F99" data-uri="chapter04.xhtml#P7000497027000000000000000041F99" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000041F9A" data-uri="chapter04.xhtml#P7000497027000000000000000041F9A" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000041F9B" data-uri="chapter04.xhtml#P7000497027000000000000000041F9B" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000041F9C" data-uri="chapter04.xhtml#P7000497027000000000000000041F9C" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000041F9D" data-uri="chapter04.xhtml#P7000497027000000000000000041F9D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000041F9E" data-uri="chapter04.xhtml#P7000497027000000000000000041F9E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.18 </span>Computations in sequential implementation of Y86-64 instructions <code id="P7000497027000000000000000041F9F" data-uri="chapter04.xhtml#P7000497027000000000000000041F9F" class="pcalibre1 calibre8 pcalibre">OPq, rrmovq</code>, and <code id="P7000497027000000000000000041FA0" data-uri="chapter04.xhtml#P7000497027000000000000000041FA0" class="pcalibre1 calibre8 pcalibre">irmovq</code>. </h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000041FA1" data-uri="chapter04.xhtml#P7000497027000000000000000041FA1"><p id="P7000497027000000000000000041FA2" data-uri="chapter04.xhtml#P7000497027000000000000000041FA2" class="pcalibre1 pcalibre calibre2">These instructions compute a value and store the result in a register. The notation <code id="P7000497027000000000000000041FA3" data-uri="chapter04.xhtml#P7000497027000000000000000041FA3" class="pcalibre1 calibre8 pcalibre">icode</code>: ifun indicates the two components of the instruction byte, while rA : rB indicates the two components of the register specifier byte. The notation M<sub class="pcalibre1 calibre47 pcalibre">1</sub>[<var class="calibre5 pcalibre pcalibre1">x</var>] indicates accessing (either reading or writing) 1 byte at memory location <var class="calibre5 pcalibre pcalibre1">x</var>, while M<sub class="pcalibre1 calibre47 pcalibre">8</sub>[<var class="calibre5 pcalibre pcalibre1">x</var>] indicates accessing 8 bytes.</p><p id="P7000497027000000000000000041FA4" data-uri="chapter04.xhtml#P7000497027000000000000000041FA4" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>

</figure>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041FA5" data-uri="chapter04.xhtml#P7000497027000000000000000041FA5">then written to the register file. Similar processing occurs for <code id="P7000497027000000000000000041FA6" data-uri="chapter04.xhtml#P7000497027000000000000000041FA6" class="pcalibre1 calibre8 pcalibre">irmovq</code>, except that we use constant value valC for the first ALU input. In addition, we must increment the program counter by 10 for <code id="P7000497027000000000000000041FA7" data-uri="chapter04.xhtml#P7000497027000000000000000041FA7" class="pcalibre1 calibre8 pcalibre">irmovq</code> due to the long instruction format. Neither of these instructions changes the condition codes.</p>
<section id="P7000497027000000000000000003DAD" data-uri="chapter04.xhtml#P7000497027000000000000000003DAD" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000041FA8" data-uri="chapter04.xhtml#P7000497027000000000000000041FA8" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.13 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004719">485</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000041FA9" data-uri="chapter04.xhtml#P7000497027000000000000000041FA9">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000041FAA" data-uri="chapter04.xhtml#P7000497027000000000000000041FAA">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000041FAB" data-uri="chapter04.xhtml#P7000497027000000000000000041FAB"><p id="P7000497027000000000000000041FAC" data-uri="chapter04.xhtml#P7000497027000000000000000041FAC" class="pcalibre calibre3 pcalibre1">Fill in the right-hand column of the following table to describe the processing of the <code id="P7000497027000000000000000041FAD" data-uri="chapter04.xhtml#P7000497027000000000000000041FAD" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction on line 4 of the object code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>:</p></div>
</li>
</ol>
<table id="P7000497027000000000000000041FAE" data-uri="chapter04.xhtml#P7000497027000000000000000041FAE" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041FAF" data-uri="chapter04.xhtml#P7000497027000000000000000041FAF" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000041FB0" data-uri="chapter04.xhtml#P7000497027000000000000000041FB0" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000041FB1" data-uri="chapter04.xhtml#P7000497027000000000000000041FB1" class="calibre10 pcalibre pcalibre1">irmovq</code> V, rB</th>
<th id="P7000497027000000000000000041FB2" data-uri="chapter04.xhtml#P7000497027000000000000000041FB2" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000041FB3" data-uri="chapter04.xhtml#P7000497027000000000000000041FB3" class="calibre10 pcalibre pcalibre1">irmovq $128, %rsp</code> </th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FB4" data-uri="chapter04.xhtml#P7000497027000000000000000041FB4" class="calibre20 pcalibre pcalibre1">Fetch </td>
<td id="P7000497027000000000000000041FB5" data-uri="chapter04.xhtml#P7000497027000000000000000041FB5" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]<br class="edition pcalibre pcalibre1"/>
valP ← PC+ 10</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FB6" data-uri="chapter04.xhtml#P7000497027000000000000000041FB6" class="calibre20 pcalibre pcalibre1">
Decode</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FB7" data-uri="chapter04.xhtml#P7000497027000000000000000041FB7" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000041FB8" data-uri="chapter04.xhtml#P7000497027000000000000000041FB8" class="calibre20 pcalibre pcalibre1">valE ← 0 + valC</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003DBF" data-uri="chapter04.xhtml#P7000497027000000000000000003DBF"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000041FB9" data-uri="chapter04.xhtml#P7000497027000000000000000041FB9" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003DC1" title="388" data-uri="chapter04.xhtml#P7000497027000000000000000003DC1" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Tracing the execution of a <code id="P7000497027000000000000000041FBA" data-uri="chapter04.xhtml#P7000497027000000000000000041FBA" class="calibre55 pcalibre pcalibre1">subq</code> instruction</h1></header>
<p id="P7000497027000000000000000041FBB" data-uri="chapter04.xhtml#P7000497027000000000000000041FBB" class="calibre13 pcalibre pcalibre1">As an example, let us follow the processing of the <code id="P7000497027000000000000000041FBC" data-uri="chapter04.xhtml#P7000497027000000000000000041FBC" class="pcalibre1 calibre8 pcalibre">subq</code> instruction on line 3 of the object code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>. We can see that the previous two instructions initialize registers <code id="P7000497027000000000000000041FBD" data-uri="chapter04.xhtml#P7000497027000000000000000041FBD" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000041FBE" data-uri="chapter04.xhtml#P7000497027000000000000000041FBE" class="pcalibre1 calibre8 pcalibre">%rbx</code> to 9 and 21, respectively. We can also see that the instruction is located at address <code id="P7000497027000000000000000041FBF" data-uri="chapter04.xhtml#P7000497027000000000000000041FBF" class="pcalibre1 calibre8 pcalibre">0x014</code> and consists of 2 bytes, having values <code id="P7000497027000000000000000041FC0" data-uri="chapter04.xhtml#P7000497027000000000000000041FC0" class="pcalibre1 calibre8 pcalibre">0x61</code> and <code id="P7000497027000000000000000041FC1" data-uri="chapter04.xhtml#P7000497027000000000000000041FC1" class="pcalibre1 calibre8 pcalibre">0x23</code>. The stages would proceed as shown in the following table, which lists the generic rule for processing an <code id="P7000497027000000000000000041FC2" data-uri="chapter04.xhtml#P7000497027000000000000000041FC2" class="pcalibre1 calibre8 pcalibre">OPq</code> instruction (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D82"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.18</span></a>) on the left, and the computations for this specific instruction on the right.</p>

<table id="P7000497027000000000000000041FC3" data-uri="chapter04.xhtml#P7000497027000000000000000041FC3" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041FC4" data-uri="chapter04.xhtml#P7000497027000000000000000041FC4" class="calibre18 pcalibre pcalibre1">Stage	</th>
<th id="P7000497027000000000000000041FC5" data-uri="chapter04.xhtml#P7000497027000000000000000041FC5" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041FC6" data-uri="chapter04.xhtml#P7000497027000000000000000041FC6" class="calibre10 pcalibre pcalibre1">OPq</code> rA, rB	</th>
<th id="P7000497027000000000000000041FC7" data-uri="chapter04.xhtml#P7000497027000000000000000041FC7" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041FC8" data-uri="chapter04.xhtml#P7000497027000000000000000041FC8" class="calibre10 pcalibre pcalibre1">subq %rdx, %rbx</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FC9" data-uri="chapter04.xhtml#P7000497027000000000000000041FC9" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000041FCA" data-uri="chapter04.xhtml#P7000497027000000000000000041FCA" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← MT.PC + 1]
</td>

<td id="P7000497027000000000000000041FCB" data-uri="chapter04.xhtml#P7000497027000000000000000041FCB" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P7000497027000000000000000041FCC" data-uri="chapter04.xhtml#P7000497027000000000000000041FCC" class="calibre10 pcalibre pcalibre1">0x014</code>] = 6:1<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P7000497027000000000000000041FCD" data-uri="chapter04.xhtml#P7000497027000000000000000041FCD" class="calibre10 pcalibre pcalibre1">0x015</code>] = 2:3</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000041FCE" data-uri="chapter04.xhtml#P7000497027000000000000000041FCE" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
<td id="P7000497027000000000000000041FCF" data-uri="chapter04.xhtml#P7000497027000000000000000041FCF" class="calibre20 pcalibre pcalibre1">valP ← <code id="P7000497027000000000000000041FD0" data-uri="chapter04.xhtml#P7000497027000000000000000041FD0" class="calibre10 pcalibre pcalibre1">0x014 + 2 = 0x016</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FD1" data-uri="chapter04.xhtml#P7000497027000000000000000041FD1" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000041FD2" data-uri="chapter04.xhtml#P7000497027000000000000000041FD2" class="calibre20 pcalibre pcalibre1">valA ← R[rA]<br class="edition pcalibre pcalibre1"/>
valB ← R[rB]
</td>

<td id="P7000497027000000000000000041FD3" data-uri="chapter04.xhtml#P7000497027000000000000000041FD3" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000041FD4" data-uri="chapter04.xhtml#P7000497027000000000000000041FD4" class="calibre10 pcalibre pcalibre1">%rdx</code>] = 9<br class="edition pcalibre pcalibre1"/>
va IB ← R[<code id="P7000497027000000000000000041FD5" data-uri="chapter04.xhtml#P7000497027000000000000000041FD5" class="calibre10 pcalibre pcalibre1">%rbx</code>] = 21</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FD6" data-uri="chapter04.xhtml#P7000497027000000000000000041FD6" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000041FD7" data-uri="chapter04.xhtml#P7000497027000000000000000041FD7" class="calibre20 pcalibre pcalibre1">valE ← valBOPvalA<br class="edition pcalibre pcalibre1"/>SetCC</td>
<td id="P7000497027000000000000000041FD8" data-uri="chapter04.xhtml#P7000497027000000000000000041FD8" class="calibre20 pcalibre pcalibre1">valE ← 21 - 9=12<br class="edition pcalibre pcalibre1"/>
ZF ← 0, SF ← 0, OF ← 0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FD9" data-uri="chapter04.xhtml#P7000497027000000000000000041FD9" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FDA" data-uri="chapter04.xhtml#P7000497027000000000000000041FDA" class="calibre20 pcalibre pcalibre1">Write back</td>
<td id="P7000497027000000000000000041FDB" data-uri="chapter04.xhtml#P7000497027000000000000000041FDB" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
<td id="P7000497027000000000000000041FDC" data-uri="chapter04.xhtml#P7000497027000000000000000041FDC" class="calibre20 pcalibre pcalibre1">R[%rbx] ← valE = 12</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FDD" data-uri="chapter04.xhtml#P7000497027000000000000000041FDD" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000041FDE" data-uri="chapter04.xhtml#P7000497027000000000000000041FDE" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000041FDF" data-uri="chapter04.xhtml#P7000497027000000000000000041FDF" class="calibre20 pcalibre pcalibre1">PC ← valP = <code id="P7000497027000000000000000041FE0" data-uri="chapter04.xhtml#P7000497027000000000000000041FE0" class="calibre10 pcalibre pcalibre1">0x016</code></td>
</tr>
</tbody>
</table>

<p id="P7000497027000000000000000041FE1" data-uri="chapter04.xhtml#P7000497027000000000000000041FE1" class="pcalibre calibre3 pcalibre1">As this trace shows, we achieve the desired effect of setting register <code id="P7000497027000000000000000041FE2" data-uri="chapter04.xhtml#P7000497027000000000000000041FE2" class="pcalibre1 calibre8 pcalibre">%rbx</code> to 12, setting all three condition codes to zero, and incrementing the PC by 2.</p>
</aside>
<table id="P7000497027000000000000000041FE3" data-uri="chapter04.xhtml#P7000497027000000000000000041FE3" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041FE4" data-uri="chapter04.xhtml#P7000497027000000000000000041FE4" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000041FE5" data-uri="chapter04.xhtml#P7000497027000000000000000041FE5" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000041FE6" data-uri="chapter04.xhtml#P7000497027000000000000000041FE6" class="calibre10 pcalibre pcalibre1">irmovq</code>V, rB</th>
<th id="P7000497027000000000000000041FE7" data-uri="chapter04.xhtml#P7000497027000000000000000041FE7" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000041FE8" data-uri="chapter04.xhtml#P7000497027000000000000000041FE8" class="calibre10 pcalibre pcalibre1">irmovq $128, %rsp</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FE9" data-uri="chapter04.xhtml#P7000497027000000000000000041FE9" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FEA" data-uri="chapter04.xhtml#P7000497027000000000000000041FEA" class="calibre20 pcalibre pcalibre1">Writeback</td>
<td id="P7000497027000000000000000041FEB" data-uri="chapter04.xhtml#P7000497027000000000000000041FEB" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FEC" data-uri="chapter04.xhtml#P7000497027000000000000000041FEC" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000041FED" data-uri="chapter04.xhtml#P7000497027000000000000000041FED" class="calibre20 pcalibre pcalibre1">PC ← va IP</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000041FEE" data-uri="chapter04.xhtml#P7000497027000000000000000041FEE" class="pcalibre1 pcalibre calibre2">How does this instruction execution modify the registers and the PC?</p>
</section>

<p id="P7000497027000000000000000041FEF" data-uri="chapter04.xhtml#P7000497027000000000000000041FEF" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003DFA"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.19</span></a> shows the processing required for the memory write and read instructions <code id="P7000497027000000000000000041FF0" data-uri="chapter04.xhtml#P7000497027000000000000000041FF0" class="pcalibre1 calibre8 pcalibre">rmmovq</code> and <code id="P7000497027000000000000000041FF1" data-uri="chapter04.xhtml#P7000497027000000000000000041FF1" class="pcalibre1 calibre8 pcalibre">mrmovq</code>. We see the same basic flow as before, but using the ALU to add valC to valB, giving the effective address (the sum of the displacement and the base register value) for the memory operation. In the memory stage, we either write the register value valA to memory or read valM from memory.</p>




<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003DFA" data-uri="chapter04.xhtml#P7000497027000000000000000003DFA">

<table id="P7000497027000000000000000041FF2" data-uri="chapter04.xhtml#P7000497027000000000000000041FF2" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041FF3" data-uri="chapter04.xhtml#P7000497027000000000000000041FF3" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003DFD" title="389" data-uri="chapter04.xhtml#P7000497027000000000000000003DFD" epub:type="pagebreak"></span>
Stage</th>
<th id="P7000497027000000000000000041FF4" data-uri="chapter04.xhtml#P7000497027000000000000000041FF4" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041FF5" data-uri="chapter04.xhtml#P7000497027000000000000000041FF5" class="calibre10 pcalibre pcalibre1">rmmovq</code> rA, D(rB)</th>
<th id="P7000497027000000000000000041FF6" data-uri="chapter04.xhtml#P7000497027000000000000000041FF6" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000041FF7" data-uri="chapter04.xhtml#P7000497027000000000000000041FF7" class="calibre10 pcalibre pcalibre1">mrmovq</code> D (rB), rA</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FF8" data-uri="chapter04.xhtml#P7000497027000000000000000041FF8" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000041FF9" data-uri="chapter04.xhtml#P7000497027000000000000000041FF9" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]<br class="caption pcalibre pcalibre1"/>
valP ← PC+ 10</td>
<td id="P7000497027000000000000000041FFA" data-uri="chapter04.xhtml#P7000497027000000000000000041FFA" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]<br class="caption pcalibre pcalibre1"/>
valP ← PC+ 10</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FFB" data-uri="chapter04.xhtml#P7000497027000000000000000041FFB" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000041FFC" data-uri="chapter04.xhtml#P7000497027000000000000000041FFC" class="calibre20 pcalibre pcalibre1">valA ← R[rA]<br class="caption pcalibre pcalibre1"/>
valB ← R[rB]</td>


<td id="P7000497027000000000000000041FFD" data-uri="chapter04.xhtml#P7000497027000000000000000041FFD" class="calibre20 pcalibre pcalibre1"><br class="caption pcalibre pcalibre1"/>valB ← R[rB]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041FFE" data-uri="chapter04.xhtml#P7000497027000000000000000041FFE" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000041FFF" data-uri="chapter04.xhtml#P7000497027000000000000000041FFF" class="calibre20 pcalibre pcalibre1">valE ← valB + valC</td>
<td id="P7000497027000000000000000042000" data-uri="chapter04.xhtml#P7000497027000000000000000042000" class="calibre20 pcalibre pcalibre1">valE ← valB + valC</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042001" data-uri="chapter04.xhtml#P7000497027000000000000000042001" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P7000497027000000000000000042002" data-uri="chapter04.xhtml#P7000497027000000000000000042002" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valA</td>
<td id="P7000497027000000000000000042003" data-uri="chapter04.xhtml#P7000497027000000000000000042003" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042004" data-uri="chapter04.xhtml#P7000497027000000000000000042004" class="calibre20 pcalibre pcalibre1">Write back</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042005" data-uri="chapter04.xhtml#P7000497027000000000000000042005" class="calibre20 pcalibre pcalibre1">R[rA] ← valM</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042006" data-uri="chapter04.xhtml#P7000497027000000000000000042006" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000042007" data-uri="chapter04.xhtml#P7000497027000000000000000042007" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000042008" data-uri="chapter04.xhtml#P7000497027000000000000000042008" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
</tr>
</tbody>
</table>

<figcaption id="P7000497027000000000000000042009" data-uri="chapter04.xhtml#P7000497027000000000000000042009" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004200A" data-uri="chapter04.xhtml#P700049702700000000000000004200A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.19 </span>Computations in sequential implementation of Y86-64 instructions <code id="P700049702700000000000000004200B" data-uri="chapter04.xhtml#P700049702700000000000000004200B" class="pcalibre1 calibre8 pcalibre">rmmovq</code> <b class="calibre4 pcalibre pcalibre1">and</b> <code id="P700049702700000000000000004200C" data-uri="chapter04.xhtml#P700049702700000000000000004200C" class="pcalibre1 calibre8 pcalibre">mrmovq</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P700049702700000000000000004200D" data-uri="chapter04.xhtml#P700049702700000000000000004200D"><p id="P700049702700000000000000004200E" data-uri="chapter04.xhtml#P700049702700000000000000004200E" class="pcalibre1 pcalibre calibre2">These instructions read or write memory.
</p><p id="P700049702700000000000000004200F" data-uri="chapter04.xhtml#P700049702700000000000000004200F" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>


<p id="P7000497027000000000000000042010" data-uri="chapter04.xhtml#P7000497027000000000000000042010" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a> shows the steps required to process <code id="P7000497027000000000000000042011" data-uri="chapter04.xhtml#P7000497027000000000000000042011" class="pcalibre1 calibre8 pcalibre">pushq</code> and <code id="P7000497027000000000000000042012" data-uri="chapter04.xhtml#P7000497027000000000000000042012" class="pcalibre1 calibre8 pcalibre">popq</code> instructions. These are among the most difficult Y86-64 instructions to implement, because they involve both accessing memory and incrementing or decrementing the stack pointer. Although the two instructions have similar flows, they have important differences.</p>
<p id="P7000497027000000000000000042013" data-uri="chapter04.xhtml#P7000497027000000000000000042013" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000042014" data-uri="chapter04.xhtml#P7000497027000000000000000042014" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction starts much like our previous instructions, but in the decode stage we use <code id="P7000497027000000000000000042015" data-uri="chapter04.xhtml#P7000497027000000000000000042015" class="pcalibre1 calibre8 pcalibre">%rsp</code> as the identifier for the second register operand, giving the stack pointer as value valB. In the execute stage, we use the ALU to decrement the stack pointer by 8. This decremented value is used for the memory write address and is also stored back to <code id="P7000497027000000000000000042016" data-uri="chapter04.xhtml#P7000497027000000000000000042016" class="pcalibre1 calibre8 pcalibre">%rsp</code> in the write-back stage. By using valE as the address for the write operation, we adhere to the Y86-64 (and x86-64) convention that <code id="P7000497027000000000000000042017" data-uri="chapter04.xhtml#P7000497027000000000000000042017" class="pcalibre1 calibre8 pcalibre">pushq</code> should decrement the stack pointer before writing, even though the actual updating of the stack pointer does not occur until after the memory operation has completed.</p>
<p id="P7000497027000000000000000042018" data-uri="chapter04.xhtml#P7000497027000000000000000042018" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000042019" data-uri="chapter04.xhtml#P7000497027000000000000000042019" class="pcalibre1 calibre8 pcalibre">popq</code> instruction proceeds much like <code id="P700049702700000000000000004201A" data-uri="chapter04.xhtml#P700049702700000000000000004201A" class="pcalibre1 calibre8 pcalibre">pushq</code>, except that we read two copies of the stack pointer in the decode stage. This is clearly redundant, but we will see that having the stack pointer as both valA and valB makes the subsequent flow more similar to that of other instructions, enhancing the overall uniformity of the design. We use the ALU to increment the stack pointer by 8 in the execute stage, but use the unincremented value as the address for the memory operation. In the write-back stage, we update both the stack pointer register with the incremented stack pointer and register rA with the value read from memory. Using the unincremented stack pointer as the memory read address preserves the Y86-64</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003E24" data-uri="chapter04.xhtml#P7000497027000000000000000003E24"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000004201B" data-uri="chapter04.xhtml#P700049702700000000000000004201B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003E26" title="390" data-uri="chapter04.xhtml#P7000497027000000000000000003E26" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Tracing the execution of an <code id="P700049702700000000000000004201C" data-uri="chapter04.xhtml#P700049702700000000000000004201C" class="calibre55 pcalibre pcalibre1">rmmovq</code> instruction</h1></header>
<p id="P700049702700000000000000004201D" data-uri="chapter04.xhtml#P700049702700000000000000004201D" class="calibre13 pcalibre pcalibre1">Let us trace the processing of the <code id="P700049702700000000000000004201E" data-uri="chapter04.xhtml#P700049702700000000000000004201E" class="pcalibre1 calibre8 pcalibre">rmmovq</code> instruction on line 5 of the object code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>. We can see that the previous instruction initialized register <code id="P700049702700000000000000004201F" data-uri="chapter04.xhtml#P700049702700000000000000004201F" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 128, while <code id="P7000497027000000000000000042020" data-uri="chapter04.xhtml#P7000497027000000000000000042020" class="pcalibre1 calibre8 pcalibre">%rbx</code> still holds 12, as computed by the <code id="P7000497027000000000000000042021" data-uri="chapter04.xhtml#P7000497027000000000000000042021" class="pcalibre1 calibre8 pcalibre">subq</code> instruction (line 3). We can also see that the instruction is located at address <code id="P7000497027000000000000000042022" data-uri="chapter04.xhtml#P7000497027000000000000000042022" class="pcalibre1 calibre8 pcalibre">0x020</code> and consists of 10 bytes. The first 2 bytes have values <code id="P7000497027000000000000000042023" data-uri="chapter04.xhtml#P7000497027000000000000000042023" class="pcalibre1 calibre8 pcalibre">0x40</code> and <code id="P7000497027000000000000000042024" data-uri="chapter04.xhtml#P7000497027000000000000000042024" class="pcalibre1 calibre8 pcalibre">0x43</code>, while the final 8 bytes are a byte-reversed version of the number <code id="P7000497027000000000000000042025" data-uri="chapter04.xhtml#P7000497027000000000000000042025" class="pcalibre1 calibre8 pcalibre">0x0000000000000064</code> (decimal 100). The stages would proceed as follows:</p>
<table id="P7000497027000000000000000042026" data-uri="chapter04.xhtml#P7000497027000000000000000042026" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042027" data-uri="chapter04.xhtml#P7000497027000000000000000042027" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042028" data-uri="chapter04.xhtml#P7000497027000000000000000042028" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042029" data-uri="chapter04.xhtml#P7000497027000000000000000042029" class="calibre10 pcalibre pcalibre1">rmmovq</code> rA, D(rB)</th>
<th id="P700049702700000000000000004202A" data-uri="chapter04.xhtml#P700049702700000000000000004202A" class="calibre18 pcalibre pcalibre1">Specific <code id="P700049702700000000000000004202B" data-uri="chapter04.xhtml#P700049702700000000000000004202B" class="calibre10 pcalibre pcalibre1">rmmovq</code> <code id="P700049702700000000000000004202C" data-uri="chapter04.xhtml#P700049702700000000000000004202C" class="calibre10 pcalibre pcalibre1">%rsp</code>, 100(<code id="P700049702700000000000000004202D" data-uri="chapter04.xhtml#P700049702700000000000000004202D" class="calibre10 pcalibre pcalibre1">%rbx</code>)</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004202E" data-uri="chapter04.xhtml#P700049702700000000000000004202E" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P700049702700000000000000004202F" data-uri="chapter04.xhtml#P700049702700000000000000004202F" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]<br class="edition pcalibre pcalibre1"/>
valP ← PC+ 10</td>
<td id="P7000497027000000000000000042030" data-uri="chapter04.xhtml#P7000497027000000000000000042030" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P7000497027000000000000000042031" data-uri="chapter04.xhtml#P7000497027000000000000000042031" class="calibre10 pcalibre pcalibre1">0x020</code>] = 4:0<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P7000497027000000000000000042032" data-uri="chapter04.xhtml#P7000497027000000000000000042032" class="calibre10 pcalibre pcalibre1">0x021</code>] = 4:3<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[<code id="P7000497027000000000000000042033" data-uri="chapter04.xhtml#P7000497027000000000000000042033" class="calibre10 pcalibre pcalibre1">0x022</code>] = 100<br class="edition pcalibre pcalibre1"/>
valP ← <code id="P7000497027000000000000000042034" data-uri="chapter04.xhtml#P7000497027000000000000000042034" class="calibre10 pcalibre pcalibre1">0x020 + 10 = 0x02a</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042035" data-uri="chapter04.xhtml#P7000497027000000000000000042035" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042036" data-uri="chapter04.xhtml#P7000497027000000000000000042036" class="calibre20 pcalibre pcalibre1">valA ← R[rA]<br class="edition pcalibre pcalibre1"/>
valB ← R[rB]</td>
<td id="P7000497027000000000000000042037" data-uri="chapter04.xhtml#P7000497027000000000000000042037" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042038" data-uri="chapter04.xhtml#P7000497027000000000000000042038" class="calibre10 pcalibre pcalibre1">%rsp</code>] = 128<br class="edition pcalibre pcalibre1"/>va IB ← R[<code id="P7000497027000000000000000042039" data-uri="chapter04.xhtml#P7000497027000000000000000042039" class="calibre10 pcalibre pcalibre1">%rbx</code>] = 12</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004203A" data-uri="chapter04.xhtml#P700049702700000000000000004203A" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P700049702700000000000000004203B" data-uri="chapter04.xhtml#P700049702700000000000000004203B" class="calibre20 pcalibre pcalibre1">valE ← valB + valC</td>
<td id="P700049702700000000000000004203C" data-uri="chapter04.xhtml#P700049702700000000000000004203C" class="calibre20 pcalibre pcalibre1">valE ← 12 + 100 = 112</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004203D" data-uri="chapter04.xhtml#P700049702700000000000000004203D" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P700049702700000000000000004203E" data-uri="chapter04.xhtml#P700049702700000000000000004203E" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valA</td>
<td id="P700049702700000000000000004203F" data-uri="chapter04.xhtml#P700049702700000000000000004203F" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[112] ← 128</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042040" data-uri="chapter04.xhtml#P7000497027000000000000000042040" class="calibre20 pcalibre pcalibre1">Write back</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042041" data-uri="chapter04.xhtml#P7000497027000000000000000042041" class="calibre20 pcalibre pcalibre1">
PC update</td>
<td id="P7000497027000000000000000042042" data-uri="chapter04.xhtml#P7000497027000000000000000042042" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000042043" data-uri="chapter04.xhtml#P7000497027000000000000000042043" class="calibre20 pcalibre pcalibre1">PC ← <code id="P7000497027000000000000000042044" data-uri="chapter04.xhtml#P7000497027000000000000000042044" class="calibre10 pcalibre pcalibre1">0x02a</code></td>
</tr>
</tbody>
</table>

<p id="P7000497027000000000000000042045" data-uri="chapter04.xhtml#P7000497027000000000000000042045" class="pcalibre calibre3 pcalibre1">As this trace shows, the instruction has the effect of writing 128 to memory address 112 and incrementing the PC by 10.</p>
</aside>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042046" data-uri="chapter04.xhtml#P7000497027000000000000000042046">(and x86-64) convention that popq should first read memory and then increment the stack pointer.</p>
<section id="P7000497027000000000000000003E52" data-uri="chapter04.xhtml#P7000497027000000000000000003E52" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042047" data-uri="chapter04.xhtml#P7000497027000000000000000042047" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.14 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000474C">486</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000042048" data-uri="chapter04.xhtml#P7000497027000000000000000042048">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000042049" data-uri="chapter04.xhtml#P7000497027000000000000000042049">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004204A" data-uri="chapter04.xhtml#P700049702700000000000000004204A"><p id="P700049702700000000000000004204B" data-uri="chapter04.xhtml#P700049702700000000000000004204B" class="pcalibre calibre3 pcalibre1">Fill in the right-hand column of the following table to describe the processing of the popq instruction on line 7 of the object code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>.</p></div></li>
</ol>

<table id="P700049702700000000000000004204C" data-uri="chapter04.xhtml#P700049702700000000000000004204C" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004204D" data-uri="chapter04.xhtml#P700049702700000000000000004204D" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P700049702700000000000000004204E" data-uri="chapter04.xhtml#P700049702700000000000000004204E" class="calibre18 pcalibre pcalibre1">Generic popq rA</th>
<th id="P700049702700000000000000004204F" data-uri="chapter04.xhtml#P700049702700000000000000004204F" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000042050" data-uri="chapter04.xhtml#P7000497027000000000000000042050" class="calibre10 pcalibre pcalibre1">popq %rax</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042051" data-uri="chapter04.xhtml#P7000497027000000000000000042051" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000042052" data-uri="chapter04.xhtml#P7000497027000000000000000042052" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]
<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]
<br class="edition pcalibre pcalibre1"/>
valP ← PC+ 2</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003E5F" data-uri="chapter04.xhtml#P7000497027000000000000000003E5F">
<table id="P7000497027000000000000000042053" data-uri="chapter04.xhtml#P7000497027000000000000000042053" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042054" data-uri="chapter04.xhtml#P7000497027000000000000000042054" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003E62" title="391" data-uri="chapter04.xhtml#P7000497027000000000000000003E62" epub:type="pagebreak"></span>Stage</th>
<th id="P7000497027000000000000000042055" data-uri="chapter04.xhtml#P7000497027000000000000000042055" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042056" data-uri="chapter04.xhtml#P7000497027000000000000000042056" class="calibre10 pcalibre pcalibre1">pushq</code> rA</th>
<th id="P7000497027000000000000000042057" data-uri="chapter04.xhtml#P7000497027000000000000000042057" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042058" data-uri="chapter04.xhtml#P7000497027000000000000000042058" class="calibre10 pcalibre pcalibre1">popq</code> rA</th>
</tr>
</thead>

<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042059" data-uri="chapter04.xhtml#P7000497027000000000000000042059" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P700049702700000000000000004205A" data-uri="chapter04.xhtml#P700049702700000000000000004205A" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>

<td id="P700049702700000000000000004205B" data-uri="chapter04.xhtml#P700049702700000000000000004205B" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004205C" data-uri="chapter04.xhtml#P700049702700000000000000004205C" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
<td id="P700049702700000000000000004205D" data-uri="chapter04.xhtml#P700049702700000000000000004205D" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004205E" data-uri="chapter04.xhtml#P700049702700000000000000004205E" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P700049702700000000000000004205F" data-uri="chapter04.xhtml#P700049702700000000000000004205F" class="calibre20 pcalibre pcalibre1">valA ← R[rA]<br class="edition pcalibre pcalibre1"/>
valB ← R[<code id="P7000497027000000000000000042060" data-uri="chapter04.xhtml#P7000497027000000000000000042060" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>

<td id="P7000497027000000000000000042061" data-uri="chapter04.xhtml#P7000497027000000000000000042061" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042062" data-uri="chapter04.xhtml#P7000497027000000000000000042062" class="calibre10 pcalibre pcalibre1">%rsp</code>]<br class="edition pcalibre pcalibre1"/>
va IB ← R[<code id="P7000497027000000000000000042063" data-uri="chapter04.xhtml#P7000497027000000000000000042063" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042064" data-uri="chapter04.xhtml#P7000497027000000000000000042064" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000042065" data-uri="chapter04.xhtml#P7000497027000000000000000042065" class="calibre20 pcalibre pcalibre1">valE ← valB+(-8)</td>
<td id="P7000497027000000000000000042066" data-uri="chapter04.xhtml#P7000497027000000000000000042066" class="calibre20 pcalibre pcalibre1">valE ← valB + 8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042067" data-uri="chapter04.xhtml#P7000497027000000000000000042067" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P7000497027000000000000000042068" data-uri="chapter04.xhtml#P7000497027000000000000000042068" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valA</td>
<td id="P7000497027000000000000000042069" data-uri="chapter04.xhtml#P7000497027000000000000000042069" class="calibre20 pcalibre pcalibre1">va IM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valA]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004206A" data-uri="chapter04.xhtml#P700049702700000000000000004206A" class="calibre20 pcalibre pcalibre1">Write back</td>
<td id="P700049702700000000000000004206B" data-uri="chapter04.xhtml#P700049702700000000000000004206B" class="calibre20 pcalibre pcalibre1">R[<code id="P700049702700000000000000004206C" data-uri="chapter04.xhtml#P700049702700000000000000004206C" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
<td id="P700049702700000000000000004206D" data-uri="chapter04.xhtml#P700049702700000000000000004206D" class="calibre20 pcalibre pcalibre1">R[<code id="P700049702700000000000000004206E" data-uri="chapter04.xhtml#P700049702700000000000000004206E" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE <br class="caption pcalibre pcalibre1"/>R[rA] ← valM</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004206F" data-uri="chapter04.xhtml#P700049702700000000000000004206F" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000042070" data-uri="chapter04.xhtml#P7000497027000000000000000042070" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000042071" data-uri="chapter04.xhtml#P7000497027000000000000000042071" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
</tr>
</tbody>
</table>




<figcaption id="P7000497027000000000000000042072" data-uri="chapter04.xhtml#P7000497027000000000000000042072" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042073" data-uri="chapter04.xhtml#P7000497027000000000000000042073" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.20 </span>Computations in sequential implementation of Y86-64 instructions <code id="P7000497027000000000000000042074" data-uri="chapter04.xhtml#P7000497027000000000000000042074" class="pcalibre1 calibre8 pcalibre">pushq</code> <b class="calibre4 pcalibre pcalibre1">and</b> <code id="P7000497027000000000000000042075" data-uri="chapter04.xhtml#P7000497027000000000000000042075" class="pcalibre1 calibre8 pcalibre">popq</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042076" data-uri="chapter04.xhtml#P7000497027000000000000000042076"><p id="P7000497027000000000000000042077" data-uri="chapter04.xhtml#P7000497027000000000000000042077" class="pcalibre1 pcalibre calibre2">These instructions push and pop the stack.
</p><p id="P7000497027000000000000000042078" data-uri="chapter04.xhtml#P7000497027000000000000000042078" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>

<table id="P7000497027000000000000000042079" data-uri="chapter04.xhtml#P7000497027000000000000000042079" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004207A" data-uri="chapter04.xhtml#P700049702700000000000000004207A" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P700049702700000000000000004207B" data-uri="chapter04.xhtml#P700049702700000000000000004207B" class="calibre18 pcalibre pcalibre1">Generic <code id="P700049702700000000000000004207C" data-uri="chapter04.xhtml#P700049702700000000000000004207C" class="calibre10 pcalibre pcalibre1">popq</code> rA</th>
<th id="P700049702700000000000000004207D" data-uri="chapter04.xhtml#P700049702700000000000000004207D" class="calibre18 pcalibre pcalibre1">Specific <code id="P700049702700000000000000004207E" data-uri="chapter04.xhtml#P700049702700000000000000004207E" class="calibre10 pcalibre pcalibre1">popq %rax</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004207F" data-uri="chapter04.xhtml#P700049702700000000000000004207F" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042080" data-uri="chapter04.xhtml#P7000497027000000000000000042080" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042081" data-uri="chapter04.xhtml#P7000497027000000000000000042081" class="calibre10 pcalibre pcalibre1">%rsp</code>]<br class="edition pcalibre pcalibre1"/>
valB ← R[<code id="P7000497027000000000000000042082" data-uri="chapter04.xhtml#P7000497027000000000000000042082" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
<td class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042083" data-uri="chapter04.xhtml#P7000497027000000000000000042083" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000042084" data-uri="chapter04.xhtml#P7000497027000000000000000042084" class="calibre20 pcalibre pcalibre1">valE ← valB + 8</td>
<td class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042085" data-uri="chapter04.xhtml#P7000497027000000000000000042085" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P7000497027000000000000000042086" data-uri="chapter04.xhtml#P7000497027000000000000000042086" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valA]</td>
<td class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042087" data-uri="chapter04.xhtml#P7000497027000000000000000042087" class="calibre20 pcalibre pcalibre1">
Write back</td>
<td id="P7000497027000000000000000042088" data-uri="chapter04.xhtml#P7000497027000000000000000042088" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042089" data-uri="chapter04.xhtml#P7000497027000000000000000042089" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE<br class="edition pcalibre pcalibre1"/>
R[rA] ← valM</td>
<td class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004208A" data-uri="chapter04.xhtml#P700049702700000000000000004208A" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P700049702700000000000000004208B" data-uri="chapter04.xhtml#P700049702700000000000000004208B" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td class="calibre20 pcalibre pcalibre1"/></tr>
</tbody>
</table>

<p id="P700049702700000000000000004208C" data-uri="chapter04.xhtml#P700049702700000000000000004208C" class="pcalibre1 pcalibre calibre2">What effect does this instruction execution have on the registers and the PC?</p>
</section>

<section id="P7000497027000000000000000003E9A" data-uri="chapter04.xhtml#P7000497027000000000000000003E9A" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004208D" data-uri="chapter04.xhtml#P700049702700000000000000004208D" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.15 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000474C">486</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004208E" data-uri="chapter04.xhtml#P700049702700000000000000004208E">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004208F" data-uri="chapter04.xhtml#P700049702700000000000000004208F">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042090" data-uri="chapter04.xhtml#P7000497027000000000000000042090"><p id="P7000497027000000000000000042091" data-uri="chapter04.xhtml#P7000497027000000000000000042091" class="pcalibre calibre3 pcalibre1">What would be the effect of the instruction <code id="P7000497027000000000000000042092" data-uri="chapter04.xhtml#P7000497027000000000000000042092" class="pcalibre1 calibre8 pcalibre">pushq %rsp</code> according to the steps listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a>? Does this conform to the desired behavior for Y86-64, as determined in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C54"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.7</span></a>?</p></div></li></ol>
</section>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003EA1" data-uri="chapter04.xhtml#P7000497027000000000000000003EA1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042093" data-uri="chapter04.xhtml#P7000497027000000000000000042093" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003EA3" title="392" data-uri="chapter04.xhtml#P7000497027000000000000000003EA3" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Tracing the execution of a <code id="P7000497027000000000000000042094" data-uri="chapter04.xhtml#P7000497027000000000000000042094" class="calibre55 pcalibre pcalibre1">pushq</code> instruction</h1></header>
<p id="P7000497027000000000000000042095" data-uri="chapter04.xhtml#P7000497027000000000000000042095" class="calibre13 pcalibre pcalibre1">Let us trace the processing of the <code id="P7000497027000000000000000042096" data-uri="chapter04.xhtml#P7000497027000000000000000042096" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction on line 6 of the object code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>. At this point, we have 9 in register <code id="P7000497027000000000000000042097" data-uri="chapter04.xhtml#P7000497027000000000000000042097" class="pcalibre1 calibre8 pcalibre">%rdx</code> and 128 in register <code id="P7000497027000000000000000042098" data-uri="chapter04.xhtml#P7000497027000000000000000042098" class="pcalibre1 calibre8 pcalibre">%rsp</code>. We can also see that the instruction is located at address <code id="P7000497027000000000000000042099" data-uri="chapter04.xhtml#P7000497027000000000000000042099" class="pcalibre1 calibre8 pcalibre">0x02a</code> and consists of 2 bytes having values <code id="P700049702700000000000000004209A" data-uri="chapter04.xhtml#P700049702700000000000000004209A" class="pcalibre1 calibre8 pcalibre">0xa0</code> and <code id="P700049702700000000000000004209B" data-uri="chapter04.xhtml#P700049702700000000000000004209B" class="pcalibre1 calibre8 pcalibre">0x2f</code>. The stages would proceed as follows:</p>
<table id="P700049702700000000000000004209C" data-uri="chapter04.xhtml#P700049702700000000000000004209C" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004209D" data-uri="chapter04.xhtml#P700049702700000000000000004209D" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P700049702700000000000000004209E" data-uri="chapter04.xhtml#P700049702700000000000000004209E" class="calibre18 pcalibre pcalibre1">Generic <code id="P700049702700000000000000004209F" data-uri="chapter04.xhtml#P700049702700000000000000004209F" class="calibre10 pcalibre pcalibre1">pushq</code> rA</th>
<th id="P70004970270000000000000000420A0" data-uri="chapter04.xhtml#P70004970270000000000000000420A0" class="calibre18 pcalibre pcalibre1">Specific <code id="P70004970270000000000000000420A1" data-uri="chapter04.xhtml#P70004970270000000000000000420A1" class="calibre10 pcalibre pcalibre1">pushq %rdx</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420A2" data-uri="chapter04.xhtml#P70004970270000000000000000420A2" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P70004970270000000000000000420A3" data-uri="chapter04.xhtml#P70004970270000000000000000420A3" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← MT.PC + 1]</td>
<td id="P70004970270000000000000000420A4" data-uri="chapter04.xhtml#P70004970270000000000000000420A4" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P70004970270000000000000000420A5" data-uri="chapter04.xhtml#P70004970270000000000000000420A5" class="calibre10 pcalibre pcalibre1">0x02a] = a:0</code><br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P70004970270000000000000000420A6" data-uri="chapter04.xhtml#P70004970270000000000000000420A6" class="calibre10 pcalibre pcalibre1">0x02b] = 2 : f</code></td>
</tr>

<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000420A7" data-uri="chapter04.xhtml#P70004970270000000000000000420A7" class="calibre20 pcalibre pcalibre1">valP ← PC+ 2</td>
<td id="P70004970270000000000000000420A8" data-uri="chapter04.xhtml#P70004970270000000000000000420A8" class="calibre20 pcalibre pcalibre1">valP ← <code id="P70004970270000000000000000420A9" data-uri="chapter04.xhtml#P70004970270000000000000000420A9" class="calibre10 pcalibre pcalibre1">0x02a + 2 = 0x02c</code></td>
</tr>

<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420AA" data-uri="chapter04.xhtml#P70004970270000000000000000420AA" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P70004970270000000000000000420AB" data-uri="chapter04.xhtml#P70004970270000000000000000420AB" class="calibre20 pcalibre pcalibre1">valA ← R[rA]<br class="edition pcalibre pcalibre1"/>
valB ← R[<code id="P70004970270000000000000000420AC" data-uri="chapter04.xhtml#P70004970270000000000000000420AC" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>

<td id="P70004970270000000000000000420AD" data-uri="chapter04.xhtml#P70004970270000000000000000420AD" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P70004970270000000000000000420AE" data-uri="chapter04.xhtml#P70004970270000000000000000420AE" class="calibre10 pcalibre pcalibre1">%rdx</code>] = 9<br class="edition pcalibre pcalibre1"/>
valB ← R[<code id="P70004970270000000000000000420AF" data-uri="chapter04.xhtml#P70004970270000000000000000420AF" class="calibre10 pcalibre pcalibre1">%rsp</code>] = 128</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420B0" data-uri="chapter04.xhtml#P70004970270000000000000000420B0" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P70004970270000000000000000420B1" data-uri="chapter04.xhtml#P70004970270000000000000000420B1" class="calibre20 pcalibre pcalibre1">valE ← valB + (-8)</td>
<td id="P70004970270000000000000000420B2" data-uri="chapter04.xhtml#P70004970270000000000000000420B2" class="calibre20 pcalibre pcalibre1">valE ← 128+ (-8) = 120</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420B3" data-uri="chapter04.xhtml#P70004970270000000000000000420B3" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P70004970270000000000000000420B4" data-uri="chapter04.xhtml#P70004970270000000000000000420B4" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valA</td>
<td id="P70004970270000000000000000420B5" data-uri="chapter04.xhtml#P70004970270000000000000000420B5" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[120] ← 9</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420B6" data-uri="chapter04.xhtml#P70004970270000000000000000420B6" class="calibre20 pcalibre pcalibre1">Write back</td>
<td id="P70004970270000000000000000420B7" data-uri="chapter04.xhtml#P70004970270000000000000000420B7" class="calibre20 pcalibre pcalibre1">R[<code id="P70004970270000000000000000420B8" data-uri="chapter04.xhtml#P70004970270000000000000000420B8" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
<td id="P70004970270000000000000000420B9" data-uri="chapter04.xhtml#P70004970270000000000000000420B9" class="calibre20 pcalibre pcalibre1">R[<code id="P70004970270000000000000000420BA" data-uri="chapter04.xhtml#P70004970270000000000000000420BA" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← 120</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420BB" data-uri="chapter04.xhtml#P70004970270000000000000000420BB" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P70004970270000000000000000420BC" data-uri="chapter04.xhtml#P70004970270000000000000000420BC" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P70004970270000000000000000420BD" data-uri="chapter04.xhtml#P70004970270000000000000000420BD" class="calibre20 pcalibre pcalibre1">PC ← <code id="P70004970270000000000000000420BE" data-uri="chapter04.xhtml#P70004970270000000000000000420BE" class="calibre10 pcalibre pcalibre1">0x02c</code></td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000420BF" data-uri="chapter04.xhtml#P70004970270000000000000000420BF" class="pcalibre calibre3 pcalibre1">As this trace shows, the instruction has the effect of setting <code id="P70004970270000000000000000420C0" data-uri="chapter04.xhtml#P70004970270000000000000000420C0" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 120, writing 9 to address 120, and incrementing the PC by 2.</p>
</aside>

<section id="P7000497027000000000000000003ED1" data-uri="chapter04.xhtml#P7000497027000000000000000003ED1" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000420C1" data-uri="chapter04.xhtml#P70004970270000000000000000420C1" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.16 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000474C">486</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000420C2" data-uri="chapter04.xhtml#P70004970270000000000000000420C2">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000420C3" data-uri="chapter04.xhtml#P70004970270000000000000000420C3">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000420C4" data-uri="chapter04.xhtml#P70004970270000000000000000420C4">
<p id="P70004970270000000000000000420C5" data-uri="chapter04.xhtml#P70004970270000000000000000420C5" class="pcalibre calibre3 pcalibre1">Assume the two register writes in the write-back stage for <code id="P70004970270000000000000000420C6" data-uri="chapter04.xhtml#P70004970270000000000000000420C6" class="pcalibre1 calibre8 pcalibre">popq</code> occur in the order listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a>. What would be the effect of executing <code id="P70004970270000000000000000420C7" data-uri="chapter04.xhtml#P70004970270000000000000000420C7" class="pcalibre1 calibre8 pcalibre">popq %rsp</code>? Does this conform to the desired behavior for Y86-64, as determined in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C64"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.8</span></a>?</p></div>
</li>
</ol>
</section>

<p id="P70004970270000000000000000420C8" data-uri="chapter04.xhtml#P70004970270000000000000000420C8" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.21</span></a> indicates the processing of our three control transfer instructions: the different jumps, <code id="P70004970270000000000000000420C9" data-uri="chapter04.xhtml#P70004970270000000000000000420C9" class="pcalibre1 calibre8 pcalibre">call</code>, and <code id="P70004970270000000000000000420CA" data-uri="chapter04.xhtml#P70004970270000000000000000420CA" class="pcalibre1 calibre8 pcalibre">ret</code>. We see that we can implement these instructions with the same overall flow as the preceding ones.</p>
<p id="P70004970270000000000000000420CB" data-uri="chapter04.xhtml#P70004970270000000000000000420CB" class="pcalibre1 pcalibre calibre2">As with integer operations, we can process all of the jumps in a uniform manner, since they differ only when determining whether or not to take the branch. A jump instruction proceeds through fetch and decode much like the previous instructions, except that it does not require a register specifier byte. In the execute stage, we check the condition codes and the jump condition to determine whether or not to take the branch, yielding a 1-bit signal <code id="P70004970270000000000000000420CC" data-uri="chapter04.xhtml#P70004970270000000000000000420CC" class="pcalibre1 calibre8 pcalibre">Cnd</code>. During the PC update stage, we test this flag and set the PC to valC (the jump target) if the flag is 1 and to valP (the address of the following instruction) if the flag is 0. Our notation <var class="calibre5 pcalibre pcalibre1">x</var> ? <var class="calibre5 pcalibre pcalibre1">a</var> : <var class="calibre5 pcalibre pcalibre1">b</var> is similar to the conditional expression in C—it yields <var class="calibre5 pcalibre pcalibre1">a</var> when <var class="calibre5 pcalibre pcalibre1">x</var> is 1 and <var class="calibre5 pcalibre pcalibre1">b</var> when <var class="calibre5 pcalibre pcalibre1">x</var> is 0.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003EDE" data-uri="chapter04.xhtml#P7000497027000000000000000003EDE">

<table id="P70004970270000000000000000420CD" data-uri="chapter04.xhtml#P70004970270000000000000000420CD" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000420CE" data-uri="chapter04.xhtml#P70004970270000000000000000420CE" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003EE1" title="393" data-uri="chapter04.xhtml#P7000497027000000000000000003EE1" epub:type="pagebreak"></span>Stage</th>
<th id="P70004970270000000000000000420CF" data-uri="chapter04.xhtml#P70004970270000000000000000420CF" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000420D0" data-uri="chapter04.xhtml#P70004970270000000000000000420D0" class="calibre10 pcalibre pcalibre1">jXX</code> Dest</th>
<th id="P70004970270000000000000000420D1" data-uri="chapter04.xhtml#P70004970270000000000000000420D1" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000420D2" data-uri="chapter04.xhtml#P70004970270000000000000000420D2" class="calibre10 pcalibre pcalibre1">call</code> Dest</th>
<th id="P70004970270000000000000000420D3" data-uri="chapter04.xhtml#P70004970270000000000000000420D3" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000420D4" data-uri="chapter04.xhtml#P70004970270000000000000000420D4" class="calibre10 pcalibre pcalibre1">ret</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420D5" data-uri="chapter04.xhtml#P70004970270000000000000000420D5" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P70004970270000000000000000420D6" data-uri="chapter04.xhtml#P70004970270000000000000000420D6" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 1]<br class="caption pcalibre pcalibre1"/>
valP ← PC+ 9
</td>
<td id="P70004970270000000000000000420D7" data-uri="chapter04.xhtml#P70004970270000000000000000420D7" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 1]<br class="caption pcalibre pcalibre1"/>valP ← PC+ 9</td>

<td id="P70004970270000000000000000420D8" data-uri="chapter04.xhtml#P70004970270000000000000000420D8" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="caption pcalibre pcalibre1"/>
valP ← PC + 1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420D9" data-uri="chapter04.xhtml#P70004970270000000000000000420D9" class="calibre20 pcalibre pcalibre1">Decode</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000420DA" data-uri="chapter04.xhtml#P70004970270000000000000000420DA" class="calibre20 pcalibre pcalibre1"><br class="edition pcalibre pcalibre1"/>valB ← R[<code id="P70004970270000000000000000420DB" data-uri="chapter04.xhtml#P70004970270000000000000000420DB" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
<td id="P70004970270000000000000000420DC" data-uri="chapter04.xhtml#P70004970270000000000000000420DC" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P70004970270000000000000000420DD" data-uri="chapter04.xhtml#P70004970270000000000000000420DD" class="calibre10 pcalibre pcalibre1">%rsp</code>]<br class="edition pcalibre pcalibre1"/>valB ← R[<code id="P70004970270000000000000000420DE" data-uri="chapter04.xhtml#P70004970270000000000000000420DE" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420DF" data-uri="chapter04.xhtml#P70004970270000000000000000420DF" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P70004970270000000000000000420E0" data-uri="chapter04.xhtml#P70004970270000000000000000420E0" class="calibre20 pcalibre pcalibre1"><br class="caption pcalibre pcalibre1"/>Cnd ← Cond(CC, ifun)</td>
<td id="P70004970270000000000000000420E1" data-uri="chapter04.xhtml#P70004970270000000000000000420E1" class="calibre20 pcalibre pcalibre1">valE ← valB + (-8)</td>
<td id="P70004970270000000000000000420E2" data-uri="chapter04.xhtml#P70004970270000000000000000420E2" class="calibre20 pcalibre pcalibre1">valE ← valB + 8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420E3" data-uri="chapter04.xhtml#P70004970270000000000000000420E3" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000420E4" data-uri="chapter04.xhtml#P70004970270000000000000000420E4" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valP</td>
<td id="P70004970270000000000000000420E5" data-uri="chapter04.xhtml#P70004970270000000000000000420E5" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valA]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420E6" data-uri="chapter04.xhtml#P70004970270000000000000000420E6" class="calibre20 pcalibre pcalibre1">Write back</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000420E7" data-uri="chapter04.xhtml#P70004970270000000000000000420E7" class="calibre20 pcalibre pcalibre1">R[<code id="P70004970270000000000000000420E8" data-uri="chapter04.xhtml#P70004970270000000000000000420E8" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
<td id="P70004970270000000000000000420E9" data-uri="chapter04.xhtml#P70004970270000000000000000420E9" class="calibre20 pcalibre pcalibre1">R[<code id="P70004970270000000000000000420EA" data-uri="chapter04.xhtml#P70004970270000000000000000420EA" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000420EB" data-uri="chapter04.xhtml#P70004970270000000000000000420EB" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P70004970270000000000000000420EC" data-uri="chapter04.xhtml#P70004970270000000000000000420EC" class="calibre20 pcalibre pcalibre1">PC ← Cnd?valC:valP</td>
<td id="P70004970270000000000000000420ED" data-uri="chapter04.xhtml#P70004970270000000000000000420ED" class="calibre20 pcalibre pcalibre1">PC ← valC</td>
<td id="P70004970270000000000000000420EE" data-uri="chapter04.xhtml#P70004970270000000000000000420EE" class="calibre20 pcalibre pcalibre1">PC ← valM</td>
</tr>
</tbody>
</table>
<figcaption id="P70004970270000000000000000420EF" data-uri="chapter04.xhtml#P70004970270000000000000000420EF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000420F0" data-uri="chapter04.xhtml#P70004970270000000000000000420F0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.21 </span>Computations in sequential implementation of Y86-64 instructions <code id="P70004970270000000000000000420F1" data-uri="chapter04.xhtml#P70004970270000000000000000420F1" class="pcalibre1 calibre8 pcalibre">jXX, call</code>, and <code id="P70004970270000000000000000420F2" data-uri="chapter04.xhtml#P70004970270000000000000000420F2" class="pcalibre1 calibre8 pcalibre">ret</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000420F3" data-uri="chapter04.xhtml#P70004970270000000000000000420F3"><p id="P70004970270000000000000000420F4" data-uri="chapter04.xhtml#P70004970270000000000000000420F4" class="pcalibre1 pcalibre calibre2"> These instructions cause control transfers.
</p><p id="P70004970270000000000000000420F5" data-uri="chapter04.xhtml#P70004970270000000000000000420F5" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>


<section id="P7000497027000000000000000003F08" data-uri="chapter04.xhtml#P7000497027000000000000000003F08" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000420F6" data-uri="chapter04.xhtml#P70004970270000000000000000420F6" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.17 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P700049702700000000000000000474C">486</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000420F7" data-uri="chapter04.xhtml#P70004970270000000000000000420F7">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000420F8" data-uri="chapter04.xhtml#P70004970270000000000000000420F8">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000420F9" data-uri="chapter04.xhtml#P70004970270000000000000000420F9"><p id="P70004970270000000000000000420FA" data-uri="chapter04.xhtml#P70004970270000000000000000420FA" class="pcalibre calibre3 pcalibre1">We can see by the instruction encodings (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.2</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE"><span class="pcalibre label pcalibre1">4.3</span></a>) that the <code id="P70004970270000000000000000420FB" data-uri="chapter04.xhtml#P70004970270000000000000000420FB" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction is the unconditional version of a more general class of instructions that include the conditional moves. Show how you would modify the steps for the <code id="P70004970270000000000000000420FC" data-uri="chapter04.xhtml#P70004970270000000000000000420FC" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction below to also handle the six conditional move instructions. You may find it useful to see how the implementation of the <code id="P70004970270000000000000000420FD" data-uri="chapter04.xhtml#P70004970270000000000000000420FD" class="pcalibre1 calibre8 pcalibre">jXX</code> instructions (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.21</span></a>) handles conditional behavior.</p></div>
</li>
</ol>
<table id="P70004970270000000000000000420FE" data-uri="chapter04.xhtml#P70004970270000000000000000420FE" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1"><th id="P70004970270000000000000000420FF" data-uri="chapter04.xhtml#P70004970270000000000000000420FF" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042100" data-uri="chapter04.xhtml#P7000497027000000000000000042100" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042101" data-uri="chapter04.xhtml#P7000497027000000000000000042101" class="calibre10 pcalibre pcalibre1">cmovXX</code> rA, rB</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042102" data-uri="chapter04.xhtml#P7000497027000000000000000042102" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000042103" data-uri="chapter04.xhtml#P7000497027000000000000000042103" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>
rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valP ← PC + 2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042104" data-uri="chapter04.xhtml#P7000497027000000000000000042104" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042105" data-uri="chapter04.xhtml#P7000497027000000000000000042105" class="calibre20 pcalibre pcalibre1">valA ← R[rA]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042106" data-uri="chapter04.xhtml#P7000497027000000000000000042106" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000042107" data-uri="chapter04.xhtml#P7000497027000000000000000042107" class="calibre20 pcalibre pcalibre1">valE ← 0 + valA</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042108" data-uri="chapter04.xhtml#P7000497027000000000000000042108" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042109" data-uri="chapter04.xhtml#P7000497027000000000000000042109" class="calibre20 pcalibre pcalibre1">Write back</td>
<td id="P700049702700000000000000004210A" data-uri="chapter04.xhtml#P700049702700000000000000004210A" class="calibre20 pcalibre pcalibre1">
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004210B" data-uri="chapter04.xhtml#P700049702700000000000000004210B" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004210C" data-uri="chapter04.xhtml#P700049702700000000000000004210C" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P700049702700000000000000004210D" data-uri="chapter04.xhtml#P700049702700000000000000004210D" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
</tr>
</tbody>
</table>

</section>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003F21" data-uri="chapter04.xhtml#P7000497027000000000000000003F21"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000004210E" data-uri="chapter04.xhtml#P700049702700000000000000004210E" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003F23" title="394" data-uri="chapter04.xhtml#P7000497027000000000000000003F23" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Tracing the execution of a <code id="P700049702700000000000000004210F" data-uri="chapter04.xhtml#P700049702700000000000000004210F" class="calibre55 pcalibre pcalibre1">je</code> instruction</h1></header>
<p id="P7000497027000000000000000042110" data-uri="chapter04.xhtml#P7000497027000000000000000042110" class="calibre13 pcalibre pcalibre1">Let us trace the processing of the je instruction on line 8 of the object code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>. The condition codes were all set to zero by the <code id="P7000497027000000000000000042111" data-uri="chapter04.xhtml#P7000497027000000000000000042111" class="pcalibre1 calibre8 pcalibre">subq</code> instruction (line 3), and so the branch will not be taken. The instruction is located at address <code id="P7000497027000000000000000042112" data-uri="chapter04.xhtml#P7000497027000000000000000042112" class="pcalibre1 calibre8 pcalibre">0x02e</code> and consists of 9 bytes. The first has value <code id="P7000497027000000000000000042113" data-uri="chapter04.xhtml#P7000497027000000000000000042113" class="pcalibre1 calibre8 pcalibre">0x73</code>, while the remaining 8 bytes are a byte-reversed version of the number <code id="P7000497027000000000000000042114" data-uri="chapter04.xhtml#P7000497027000000000000000042114" class="pcalibre1 calibre8 pcalibre">0x0000000000000040</code>, the jump target. The stages would proceed as follows:</p>
<table id="P7000497027000000000000000042115" data-uri="chapter04.xhtml#P7000497027000000000000000042115" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042116" data-uri="chapter04.xhtml#P7000497027000000000000000042116" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042117" data-uri="chapter04.xhtml#P7000497027000000000000000042117" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042118" data-uri="chapter04.xhtml#P7000497027000000000000000042118" class="calibre10 pcalibre pcalibre1">jXX</code> Dest</th>
<th id="P7000497027000000000000000042119" data-uri="chapter04.xhtml#P7000497027000000000000000042119" class="calibre18 pcalibre pcalibre1">Specific <code id="P700049702700000000000000004211A" data-uri="chapter04.xhtml#P700049702700000000000000004211A" class="calibre10 pcalibre pcalibre1">je 0x040</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004211B" data-uri="chapter04.xhtml#P700049702700000000000000004211B" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P700049702700000000000000004211C" data-uri="chapter04.xhtml#P700049702700000000000000004211C" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td>
<td id="P700049702700000000000000004211D" data-uri="chapter04.xhtml#P700049702700000000000000004211D" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P700049702700000000000000004211E" data-uri="chapter04.xhtml#P700049702700000000000000004211E" class="calibre10 pcalibre pcalibre1">0x02e] = 7:3</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004211F" data-uri="chapter04.xhtml#P700049702700000000000000004211F" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 1]</td>
<td id="P7000497027000000000000000042120" data-uri="chapter04.xhtml#P7000497027000000000000000042120" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub><code id="P7000497027000000000000000042121" data-uri="chapter04.xhtml#P7000497027000000000000000042121" class="calibre10 pcalibre pcalibre1">[0x02f] = 0x040</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042122" data-uri="chapter04.xhtml#P7000497027000000000000000042122" class="calibre20 pcalibre pcalibre1">valP ← PC+ 9</td>
<td id="P7000497027000000000000000042123" data-uri="chapter04.xhtml#P7000497027000000000000000042123" class="calibre20 pcalibre pcalibre1">valP ← <code id="P7000497027000000000000000042124" data-uri="chapter04.xhtml#P7000497027000000000000000042124" class="calibre10 pcalibre pcalibre1">0x02e + 9 = 0x037</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042125" data-uri="chapter04.xhtml#P7000497027000000000000000042125" class="calibre20 pcalibre pcalibre1">Decode</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042126" data-uri="chapter04.xhtml#P7000497027000000000000000042126" class="calibre20 pcalibre pcalibre1">Execute</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042127" data-uri="chapter04.xhtml#P7000497027000000000000000042127" class="calibre20 pcalibre pcalibre1">
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042128" data-uri="chapter04.xhtml#P7000497027000000000000000042128" class="calibre20 pcalibre pcalibre1">Cnd ← Cond(CC, ifun)</td>
<td id="P7000497027000000000000000042129" data-uri="chapter04.xhtml#P7000497027000000000000000042129" class="calibre20 pcalibre pcalibre1">Cnd ← Cond<code id="P700049702700000000000000004212A" data-uri="chapter04.xhtml#P700049702700000000000000004212A" class="calibre10 pcalibre pcalibre1">((0, 0, 0&gt;,3)=0</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004212B" data-uri="chapter04.xhtml#P700049702700000000000000004212B" class="calibre20 pcalibre pcalibre1">Memory</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004212C" data-uri="chapter04.xhtml#P700049702700000000000000004212C" class="calibre20 pcalibre pcalibre1">
Write back</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004212D" data-uri="chapter04.xhtml#P700049702700000000000000004212D" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P700049702700000000000000004212E" data-uri="chapter04.xhtml#P700049702700000000000000004212E" class="calibre20 pcalibre pcalibre1">PC ← Cnd?valC:valP</td>
<td id="P700049702700000000000000004212F" data-uri="chapter04.xhtml#P700049702700000000000000004212F" class="calibre20 pcalibre pcalibre1">PC ← 0 ? <code id="P7000497027000000000000000042130" data-uri="chapter04.xhtml#P7000497027000000000000000042130" class="calibre10 pcalibre pcalibre1">0x040:0x037 = 0x037</code></td>
</tr>
</tbody>
</table>

<p id="P7000497027000000000000000042131" data-uri="chapter04.xhtml#P7000497027000000000000000042131" class="pcalibre calibre3 pcalibre1">As this trace shows, the instruction has the effect of incrementing the PC by 9.</p>
</aside>

<p id="P7000497027000000000000000042132" data-uri="chapter04.xhtml#P7000497027000000000000000042132" class="pcalibre1 pcalibre calibre2">Instructions call and ret bear some similarity to instructions <code id="P7000497027000000000000000042133" data-uri="chapter04.xhtml#P7000497027000000000000000042133" class="pcalibre1 calibre8 pcalibre">pushq</code> and <code id="P7000497027000000000000000042134" data-uri="chapter04.xhtml#P7000497027000000000000000042134" class="pcalibre1 calibre8 pcalibre">popq</code>, except that we push and pop program counter values. With instruction call, we push valP, the address of the instruction that follows the call instruction. During the PC update stage, we set the PC to valC, the call destination. With instruction ret, we assign valM, the value popped from the stack, to the PC in the PC update stage.</p>

<section id="P7000497027000000000000000003F4A" data-uri="chapter04.xhtml#P7000497027000000000000000003F4A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000042135" data-uri="chapter04.xhtml#P7000497027000000000000000042135" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.18 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000046A4.xhtml#P7000497027000000000000000004798">487</a>)</h1></header>
<p id="P7000497027000000000000000042136" data-uri="chapter04.xhtml#P7000497027000000000000000042136" class="pcalibre1 pcalibre calibre2">Fill in the right-hand column of the following table to describe the processing of the call instruction on line 9 of the object code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>:</p>
<table id="P7000497027000000000000000042137" data-uri="chapter04.xhtml#P7000497027000000000000000042137" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042138" data-uri="chapter04.xhtml#P7000497027000000000000000042138" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042139" data-uri="chapter04.xhtml#P7000497027000000000000000042139" class="calibre18 pcalibre pcalibre1">Generic <code id="P700049702700000000000000004213A" data-uri="chapter04.xhtml#P700049702700000000000000004213A" class="calibre10 pcalibre pcalibre1">call</code> Dest</th>
<th id="P700049702700000000000000004213B" data-uri="chapter04.xhtml#P700049702700000000000000004213B" class="calibre18 pcalibre pcalibre1">Specific <code id="P700049702700000000000000004213C" data-uri="chapter04.xhtml#P700049702700000000000000004213C" class="calibre10 pcalibre pcalibre1">call 0x041</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004213D" data-uri="chapter04.xhtml#P700049702700000000000000004213D" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P700049702700000000000000004213E" data-uri="chapter04.xhtml#P700049702700000000000000004213E" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004213F" data-uri="chapter04.xhtml#P700049702700000000000000004213F" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>
valP ← PC+ 9</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>


<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000003F56" data-uri="chapter04.xhtml#P7000497027000000000000000003F56"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042140" data-uri="chapter04.xhtml#P7000497027000000000000000042140" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003F58" title="395" data-uri="chapter04.xhtml#P7000497027000000000000000003F58" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Tracing the execution of a ret instruction</h1></header>
<p id="P7000497027000000000000000042141" data-uri="chapter04.xhtml#P7000497027000000000000000042141" class="calibre13 pcalibre pcalibre1">Let us trace the processing of the ret instruction on line 13 of the object code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D6D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.17</span></a>. The instruction address is <code id="P7000497027000000000000000042142" data-uri="chapter04.xhtml#P7000497027000000000000000042142" class="pcalibre1 calibre8 pcalibre">0x041</code> and is encoded by a single byte <code id="P7000497027000000000000000042143" data-uri="chapter04.xhtml#P7000497027000000000000000042143" class="pcalibre1 calibre8 pcalibre">0x90</code>. The previous call instruction set <code id="P7000497027000000000000000042144" data-uri="chapter04.xhtml#P7000497027000000000000000042144" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 120 and stored the return address <code id="P7000497027000000000000000042145" data-uri="chapter04.xhtml#P7000497027000000000000000042145" class="pcalibre1 calibre8 pcalibre">0x040</code> at memory address 120. The stages would proceed as follows:</p>
<table id="P7000497027000000000000000042146" data-uri="chapter04.xhtml#P7000497027000000000000000042146" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042147" data-uri="chapter04.xhtml#P7000497027000000000000000042147" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042148" data-uri="chapter04.xhtml#P7000497027000000000000000042148" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042149" data-uri="chapter04.xhtml#P7000497027000000000000000042149" class="calibre10 pcalibre pcalibre1">ret</code></th>
<th id="P700049702700000000000000004214A" data-uri="chapter04.xhtml#P700049702700000000000000004214A" class="calibre18 pcalibre pcalibre1">Specific <code id="P700049702700000000000000004214B" data-uri="chapter04.xhtml#P700049702700000000000000004214B" class="calibre10 pcalibre pcalibre1">ret</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P700049702700000000000000004214C" data-uri="chapter04.xhtml#P700049702700000000000000004214C" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P700049702700000000000000004214D" data-uri="chapter04.xhtml#P700049702700000000000000004214D" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td>
<td id="P700049702700000000000000004214E" data-uri="chapter04.xhtml#P700049702700000000000000004214E" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub><code id="P700049702700000000000000004214F" data-uri="chapter04.xhtml#P700049702700000000000000004214F" class="calibre10 pcalibre pcalibre1">[0x041] = 9:0</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042150" data-uri="chapter04.xhtml#P7000497027000000000000000042150" class="calibre20 pcalibre pcalibre1">valP ← PC + 1</td>
<td id="P7000497027000000000000000042151" data-uri="chapter04.xhtml#P7000497027000000000000000042151" class="calibre20 pcalibre pcalibre1">valP ← <code id="P7000497027000000000000000042152" data-uri="chapter04.xhtml#P7000497027000000000000000042152" class="calibre10 pcalibre pcalibre1">0x041+1 = 0x042</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042153" data-uri="chapter04.xhtml#P7000497027000000000000000042153" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042154" data-uri="chapter04.xhtml#P7000497027000000000000000042154" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042155" data-uri="chapter04.xhtml#P7000497027000000000000000042155" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
<td id="P7000497027000000000000000042156" data-uri="chapter04.xhtml#P7000497027000000000000000042156" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042157" data-uri="chapter04.xhtml#P7000497027000000000000000042157" class="calibre10 pcalibre pcalibre1">%rsp</code>] = 120
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042158" data-uri="chapter04.xhtml#P7000497027000000000000000042158" class="calibre20 pcalibre pcalibre1">valB ← R[<code id="P7000497027000000000000000042159" data-uri="chapter04.xhtml#P7000497027000000000000000042159" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
<td id="P700049702700000000000000004215A" data-uri="chapter04.xhtml#P700049702700000000000000004215A" class="calibre20 pcalibre pcalibre1">valB ← R[<code id="P700049702700000000000000004215B" data-uri="chapter04.xhtml#P700049702700000000000000004215B" class="calibre10 pcalibre pcalibre1">%rsp</code>] = 120</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004215C" data-uri="chapter04.xhtml#P700049702700000000000000004215C" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P700049702700000000000000004215D" data-uri="chapter04.xhtml#P700049702700000000000000004215D" class="calibre20 pcalibre pcalibre1">valE ← valB + 8</td>
<td id="P700049702700000000000000004215E" data-uri="chapter04.xhtml#P700049702700000000000000004215E" class="calibre20 pcalibre pcalibre1">valE ← 120 + 8=128</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004215F" data-uri="chapter04.xhtml#P700049702700000000000000004215F" class="calibre20 pcalibre pcalibre1">
Memory</td>
<td id="P7000497027000000000000000042160" data-uri="chapter04.xhtml#P7000497027000000000000000042160" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valA]</td>
<td id="P7000497027000000000000000042161" data-uri="chapter04.xhtml#P7000497027000000000000000042161" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[120] = <code id="P7000497027000000000000000042162" data-uri="chapter04.xhtml#P7000497027000000000000000042162" class="calibre10 pcalibre pcalibre1">0x040</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042163" data-uri="chapter04.xhtml#P7000497027000000000000000042163" class="calibre20 pcalibre pcalibre1">
Write back</td>
<td id="P7000497027000000000000000042164" data-uri="chapter04.xhtml#P7000497027000000000000000042164" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042165" data-uri="chapter04.xhtml#P7000497027000000000000000042165" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
<td id="P7000497027000000000000000042166" data-uri="chapter04.xhtml#P7000497027000000000000000042166" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042167" data-uri="chapter04.xhtml#P7000497027000000000000000042167" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← 128</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042168" data-uri="chapter04.xhtml#P7000497027000000000000000042168" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000042169" data-uri="chapter04.xhtml#P7000497027000000000000000042169" class="calibre20 pcalibre pcalibre1">PC ← valM</td>
<td id="P700049702700000000000000004216A" data-uri="chapter04.xhtml#P700049702700000000000000004216A" class="calibre20 pcalibre pcalibre1">PC ← <code id="P700049702700000000000000004216B" data-uri="chapter04.xhtml#P700049702700000000000000004216B" class="calibre10 pcalibre pcalibre1">0x040</code></td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000004216C" data-uri="chapter04.xhtml#P700049702700000000000000004216C" class="pcalibre calibre3 pcalibre1">As this trace shows, the instruction has the effect of setting the PC to <code id="P700049702700000000000000004216D" data-uri="chapter04.xhtml#P700049702700000000000000004216D" class="pcalibre1 calibre8 pcalibre">0x040</code>, the address of the <code id="P700049702700000000000000004216E" data-uri="chapter04.xhtml#P700049702700000000000000004216E" class="pcalibre1 calibre8 pcalibre">halt</code> instruction. It also sets <code id="P700049702700000000000000004216F" data-uri="chapter04.xhtml#P700049702700000000000000004216F" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 128.</p>
</aside>

<table id="P7000497027000000000000000042170" data-uri="chapter04.xhtml#P7000497027000000000000000042170" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042171" data-uri="chapter04.xhtml#P7000497027000000000000000042171" class="calibre18 pcalibre pcalibre1">Stage</th>
<th id="P7000497027000000000000000042172" data-uri="chapter04.xhtml#P7000497027000000000000000042172" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042173" data-uri="chapter04.xhtml#P7000497027000000000000000042173" class="calibre10 pcalibre pcalibre1">call</code> Dest</th>
<th id="P7000497027000000000000000042174" data-uri="chapter04.xhtml#P7000497027000000000000000042174" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000042175" data-uri="chapter04.xhtml#P7000497027000000000000000042175" class="calibre10 pcalibre pcalibre1">call 0x041</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042176" data-uri="chapter04.xhtml#P7000497027000000000000000042176" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042177" data-uri="chapter04.xhtml#P7000497027000000000000000042177" class="calibre20 pcalibre pcalibre1"><br class="edition pcalibre pcalibre1"/>valB ← R[<code id="P7000497027000000000000000042178" data-uri="chapter04.xhtml#P7000497027000000000000000042178" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042179" data-uri="chapter04.xhtml#P7000497027000000000000000042179" class="calibre20 pcalibre pcalibre1">
Execute</td>
<td id="P700049702700000000000000004217A" data-uri="chapter04.xhtml#P700049702700000000000000004217A" class="calibre20 pcalibre pcalibre1">valE ← valB+(-8)</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004217B" data-uri="chapter04.xhtml#P700049702700000000000000004217B" class="calibre20 pcalibre pcalibre1">
Memory</td>
<td id="P700049702700000000000000004217C" data-uri="chapter04.xhtml#P700049702700000000000000004217C" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valP</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004217D" data-uri="chapter04.xhtml#P700049702700000000000000004217D" class="calibre20 pcalibre pcalibre1">
Write back</td>
<td id="P700049702700000000000000004217E" data-uri="chapter04.xhtml#P700049702700000000000000004217E" class="calibre20 pcalibre pcalibre1">R[<code id="P700049702700000000000000004217F" data-uri="chapter04.xhtml#P700049702700000000000000004217F" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042180" data-uri="chapter04.xhtml#P7000497027000000000000000042180" class="calibre20 pcalibre pcalibre1">
PC update</td>
<td id="P7000497027000000000000000042181" data-uri="chapter04.xhtml#P7000497027000000000000000042181" class="calibre20 pcalibre pcalibre1">PC ← valC</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000042182" data-uri="chapter04.xhtml#P7000497027000000000000000042182" class="pcalibre1 pcalibre calibre2">What effect would this instruction execution have on the registers, the PC, and the memory?</p>
</section>
<p id="P7000497027000000000000000042183" data-uri="chapter04.xhtml#P7000497027000000000000000042183" class="pcalibre1 pcalibre calibre2">We have created a uniform framework that handles all of the different types of Y86-64 instructions. Even though the instructions have widely varying behavior, we can organize the processing into six stages. Our task now is to create a hardware design that implements the stages and connects them together.</p>

</section>

<section id="P7000497027000000000000000003F9C" data-uri="chapter04.xhtml#P7000497027000000000000000003F9C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042184" data-uri="chapter04.xhtml#P7000497027000000000000000042184" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003F9E" title="396" data-uri="chapter04.xhtml#P7000497027000000000000000003F9E" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">4.3.2 </span>SEQ Hardware Structure</h1></header>
<p id="P7000497027000000000000000042185" data-uri="chapter04.xhtml#P7000497027000000000000000042185" class="pcalibre1 pcalibre calibre2">The computations required to implement all of the Y86-64 instructions can be organized as a series of six basic stages: fetch, decode, execute, memory, write back, and PC update. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FAD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.22</span></a> shows an abstract view of a hardware structure that can perform these computations. The program counter is stored in a register, shown in the lower left-hand corner (labeled "PC"). Information then flows along wires (shown grouped together as a heavy gray line), first upward and then around to the right. Processing is performed by <i class="calibre5 pcalibre pcalibre1">hardware units</i> associated with the different stages. The feedback paths coming back down on the right-hand side contain the updated values to write to the register file and the updated program counter. In SEQ, all of the processing by the hardware units occurs within a single clock cycle, as is discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000004004"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.3.3</span></a>. This diagram omits some small blocks of combinational logic as well as all of the control logic needed to operate the different hardware units and to route the appropriate values to the units. We will add this detail later. Our method of drawing processors with the flow going from bottom to top is unconventional. We will explain the reason for this convention when we start designing pipelined processors.</p>
<p id="P7000497027000000000000000042186" data-uri="chapter04.xhtml#P7000497027000000000000000042186" class="pcalibre1 pcalibre calibre2">The hardware units are associated with the different processing stages:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000042187" data-uri="chapter04.xhtml#P7000497027000000000000000042187">
<li id="P7000497027000000000000000042188" data-uri="chapter04.xhtml#P7000497027000000000000000042188" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042189" data-uri="chapter04.xhtml#P7000497027000000000000000042189" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Fetch. </span>Using the program counter register as an address, the instruction memory reads the bytes of an instruction. The PC incrementer computes valP, the incremented program counter.</p></li>
<li id="P700049702700000000000000004218A" data-uri="chapter04.xhtml#P700049702700000000000000004218A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004218B" data-uri="chapter04.xhtml#P700049702700000000000000004218B" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Decode. </span>The register file has two read ports, A and B, via which register values valA and valB are read simultaneously.</p></li>
<li id="P700049702700000000000000004218C" data-uri="chapter04.xhtml#P700049702700000000000000004218C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004218D" data-uri="chapter04.xhtml#P700049702700000000000000004218D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Execute. </span>The execute stage uses the arithmetic/logic (ALU) unit for different purposes according to the instruction type. For integer operations, it performs the specified operation. For other instructions, it serves as an adder to compute an incremented or decremented stack pointer, to compute an effective address, or simply to pass one of its inputs to its outputs by adding zero.</p>
<p id="P700049702700000000000000004218E" data-uri="chapter04.xhtml#P700049702700000000000000004218E" class="calibre15 pcalibre pcalibre1">The condition code register (CC) holds the three condition code bits. New values for the condition codes are computed by the ALU. When executing a conditional move instruction, the decision as to whether or not to update the destination register is computed based on the condition codes and move condition. Similarly, when executing a jump instruction, the branch signal Cnd is computed based on the condition codes and the jump type.</p></li>
<li id="P700049702700000000000000004218F" data-uri="chapter04.xhtml#P700049702700000000000000004218F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042190" data-uri="chapter04.xhtml#P7000497027000000000000000042190" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Memory. </span>The data memory reads or writes a word of memory when executing a memory instruction. The instruction and data memories access the same memory locations, but for different purposes.</p></li>
<li id="P7000497027000000000000000042191" data-uri="chapter04.xhtml#P7000497027000000000000000042191" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042192" data-uri="chapter04.xhtml#P7000497027000000000000000042192" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Write back. </span>The register file has two write ports. Port E is used to write values computed by the ALU, while port M is used to write values read from the data memory.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003FAD" data-uri="chapter04.xhtml#P7000497027000000000000000003FAD">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003FAE" title="397" data-uri="chapter04.xhtml#P7000497027000000000000000003FAE" epub:type="pagebreak"></span><img alt="A diagram illustrates a sequential implementation." id="P7000497027000000000000000042193" data-uri="P700049702700000000000000000B6DA" src="../images/p397-1.png" class="calibre120 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042194" data-uri="chapter04.xhtml#P7000497027000000000000000042194" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042195" data-uri="chapter04.xhtml#P7000497027000000000000000042195" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.22 </span>Abstract view of SEQ, a sequential implementation.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042196" data-uri="chapter04.xhtml#P7000497027000000000000000042196"><p id="P7000497027000000000000000042197" data-uri="chapter04.xhtml#P7000497027000000000000000042197" class="calibre13 pcalibre pcalibre1"> The information processed during execution of an instruction follows a clockwise flow starting with an instruction fetch using the program counter (PC), shown in the lower left-hand corner of the figure.</p><p id="P7000497027000000000000000042198" data-uri="chapter04.xhtml#P7000497027000000000000000042198" class="pcalibre1 calibre32 pcalibre">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022473" data-uri="chapter04.xhtml#P7000497027000000000000000022473">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042199" data-uri="chapter04.xhtml#P7000497027000000000000000042199" class="calibre13 pcalibre pcalibre1">A diagram shows a flow through elements, forming various cycles. The elements are summarized in order below, from bottom to top:</p>
<ul id="P700049702700000000000000004219A" data-uri="chapter04.xhtml#P700049702700000000000000004219A" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000004219B" data-uri="chapter04.xhtml#P700049702700000000000000004219B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004219C" data-uri="chapter04.xhtml#P700049702700000000000000004219C" class="calibre13 pcalibre pcalibre1">PC</p></li>
<li id="P700049702700000000000000004219D" data-uri="chapter04.xhtml#P700049702700000000000000004219D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004219E" data-uri="chapter04.xhtml#P700049702700000000000000004219E" class="calibre13 pcalibre pcalibre1">Fetch: instruction memory (leading to valC) and PC increments (leading to valP)</p></li>
<li id="P700049702700000000000000004219F" data-uri="chapter04.xhtml#P700049702700000000000000004219F" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421A0" data-uri="chapter04.xhtml#P70004970270000000000000000421A0" class="calibre13 pcalibre pcalibre1">Icode, ifun rA, rB</p></li>
<li id="P70004970270000000000000000421A1" data-uri="chapter04.xhtml#P70004970270000000000000000421A1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421A2" data-uri="chapter04.xhtml#P70004970270000000000000000421A2" class="calibre13 pcalibre pcalibre1">Decode: srcA, srcB, dstE, dstM leading to Register file containing M and E and A and B, which lead to valA, valB</p></li>
<li id="P70004970270000000000000000421A3" data-uri="chapter04.xhtml#P70004970270000000000000000421A3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421A4" data-uri="chapter04.xhtml#P70004970270000000000000000421A4" class="calibre13 pcalibre pcalibre1">Execute: aluA, aluB leading to ALU, which leads to valE and CC, which leads to Cnd</p></li>
<li id="P70004970270000000000000000421A5" data-uri="chapter04.xhtml#P70004970270000000000000000421A5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421A6" data-uri="chapter04.xhtml#P70004970270000000000000000421A6" class="calibre13 pcalibre pcalibre1">Memory: Addr, Data to Data Memory to valM</p></li>
<li id="P70004970270000000000000000421A7" data-uri="chapter04.xhtml#P70004970270000000000000000421A7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421A8" data-uri="chapter04.xhtml#P70004970270000000000000000421A8" class="calibre13 pcalibre pcalibre1">Write back: valE, valM looping back to Register file M and E</p></li>
<li id="P70004970270000000000000000421A9" data-uri="chapter04.xhtml#P70004970270000000000000000421A9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421AA" data-uri="chapter04.xhtml#P70004970270000000000000000421AA" class="calibre13 pcalibre pcalibre1">PC update: newPC looping back to PC</p></li>
</ul>
</details>
</figcaption>
</figure>
</li>
<li id="P70004970270000000000000000421AB" data-uri="chapter04.xhtml#P70004970270000000000000000421AB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421AC" data-uri="chapter04.xhtml#P70004970270000000000000000421AC" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003FB6" title="398" data-uri="chapter04.xhtml#P7000497027000000000000000003FB6" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">PC update. </span>The new value of the program counter is selected to be either valP, the address of the next instruction, valC, the destination address specified by a call or jump instruction, or valM, the return address read from memory.</p></li>
</ul>
<p id="P70004970270000000000000000421AD" data-uri="chapter04.xhtml#P70004970270000000000000000421AD" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.23</span></a> gives a more detailed view of the hardware required to implement SEQ (although we will not see the complete details until we examine the individual stages). We see the same set of hardware units as earlier, but now the wires are shown explicitly. In this figure, as well as in our other hardware diagrams, we use the following drawing conventions:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000421AE" data-uri="chapter04.xhtml#P70004970270000000000000000421AE">
<li id="P70004970270000000000000000421AF" data-uri="chapter04.xhtml#P70004970270000000000000000421AF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421B0" data-uri="chapter04.xhtml#P70004970270000000000000000421B0" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Clocked registers are shown as white rectangles. </span>The program counter PC is the only clocked register in SEQ.</p></li>
<li id="P70004970270000000000000000421B1" data-uri="chapter04.xhtml#P70004970270000000000000000421B1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421B2" data-uri="chapter04.xhtml#P70004970270000000000000000421B2" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Hardware units are shown as light blue boxes. </span>These include the memories, the ALU, and so forth. We will use the same basic set of units for all of our processor implementations. We will treat these units as "black boxes" and not go into their detailed designs.</p></li>
<li id="P70004970270000000000000000421B3" data-uri="chapter04.xhtml#P70004970270000000000000000421B3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421B4" data-uri="chapter04.xhtml#P70004970270000000000000000421B4" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Control logic blocks are drawn as gray rounded rectangles. </span>These blocks serve to select from among a set of signal sources or to compute some Boolean function. We will examine these blocks in complete detail, including developing HCL descriptions.</p></li>
<li id="P70004970270000000000000000421B5" data-uri="chapter04.xhtml#P70004970270000000000000000421B5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421B6" data-uri="chapter04.xhtml#P70004970270000000000000000421B6" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Wire names are indicated in white circles. </span>These are simply labels on the wires, not any kind of hardware element.</p></li>
<li id="P70004970270000000000000000421B7" data-uri="chapter04.xhtml#P70004970270000000000000000421B7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421B8" data-uri="chapter04.xhtml#P70004970270000000000000000421B8" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Word-wide data connections are shown as medium lines. </span>Each of these lines actually represents a bundle of 64 wires, connected in parallel, for transferring a word from one part of the hardware to another.</p></li>
<li id="P70004970270000000000000000421B9" data-uri="chapter04.xhtml#P70004970270000000000000000421B9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421BA" data-uri="chapter04.xhtml#P70004970270000000000000000421BA" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Byte and narrower data connections are shown as thin lines. </span>Each of these lines actually represents a bundle of four or eight wires, depending on what type of values must be carried on the wires.</p></li>
<li id="P70004970270000000000000000421BB" data-uri="chapter04.xhtml#P70004970270000000000000000421BB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421BC" data-uri="chapter04.xhtml#P70004970270000000000000000421BC" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Single-bit connections are shown as dotted lines. </span>These represent control values passed between the units and blocks on the chip.</p></li>
</ul>
<p id="P70004970270000000000000000421BD" data-uri="chapter04.xhtml#P70004970270000000000000000421BD" class="pcalibre1 pcalibre calibre2">All of the computations we have shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> through <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a> have the property that each line represents either the computation of a specific value, such as valP, or the activation of some hardware unit, such as the memory. These computations and actions are listed in the second column of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.24</span></a>. In addition to the signals we have already described, this list includes four register ID signals: srcA, the source of valA; srcB, the source of valB; dstE, the register to which valE gets written; and dstM, the register to which valM gets written.</p>
<p id="P70004970270000000000000000421BE" data-uri="chapter04.xhtml#P70004970270000000000000000421BE" class="pcalibre1 pcalibre calibre2">The two right-hand columns of this figure show the computations for the <code id="P70004970270000000000000000421BF" data-uri="chapter04.xhtml#P70004970270000000000000000421BF" class="pcalibre1 calibre8 pcalibre">OPq</code> and <code id="P70004970270000000000000000421C0" data-uri="chapter04.xhtml#P70004970270000000000000000421C0" class="pcalibre1 calibre8 pcalibre">mrmovq</code> instructions to illustrate the values being computed. To map the computations into hardware, we want to implement control logic that will transfer the data between the different hardware units and operate these units in such a way that the specified operations are performed for each of the different instruction types. That is the purpose of the control logic blocks, shown as gray rounded boxes</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003FCB" data-uri="chapter04.xhtml#P7000497027000000000000000003FCB">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003FCC" title="399" data-uri="chapter04.xhtml#P7000497027000000000000000003FCC" epub:type="pagebreak"></span><img alt="A diagram illustrates a hardware sequential implementation." id="P70004970270000000000000000421C1" data-uri="P700049702700000000000000000B6DB" src="../images/p399-1.png" class="calibre121 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000421C2" data-uri="chapter04.xhtml#P70004970270000000000000000421C2" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000421C3" data-uri="chapter04.xhtml#P70004970270000000000000000421C3" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.23 </span>Hardware structure of SEQ, a sequential implementation.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000421C4" data-uri="chapter04.xhtml#P70004970270000000000000000421C4"><p id="P70004970270000000000000000421C5" data-uri="chapter04.xhtml#P70004970270000000000000000421C5" class="pcalibre1 pcalibre calibre2"> Some of the control signals, as well as the register and control word connections, are not shown.</p><p id="P70004970270000000000000000421C6" data-uri="chapter04.xhtml#P70004970270000000000000000421C6" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000224A1" data-uri="chapter04.xhtml#P70004970270000000000000000224A1">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000421C7" data-uri="chapter04.xhtml#P70004970270000000000000000421C7" class="pcalibre1 pcalibre calibre2">A diagram shows a flow through elements, as summarized in order below, from bottom to top:</p>
<ul id="P70004970270000000000000000421C8" data-uri="chapter04.xhtml#P70004970270000000000000000421C8" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000421C9" data-uri="chapter04.xhtml#P70004970270000000000000000421C9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421CA" data-uri="chapter04.xhtml#P70004970270000000000000000421CA" class="pcalibre calibre3 pcalibre1">PC</p></li>
<li id="P70004970270000000000000000421CB" data-uri="chapter04.xhtml#P70004970270000000000000000421CB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421CC" data-uri="chapter04.xhtml#P70004970270000000000000000421CC" class="pcalibre calibre3 pcalibre1">Fetch:</p>
<ul id="P70004970270000000000000000421CD" data-uri="chapter04.xhtml#P70004970270000000000000000421CD" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000421CE" data-uri="chapter04.xhtml#P70004970270000000000000000421CE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421CF" data-uri="chapter04.xhtml#P70004970270000000000000000421CF" class="pcalibre calibre3 pcalibre1">Instruction memory, with instr_valid and Imem_error leading to Stat in PC update, with outputs:</p>
<ul id="P70004970270000000000000000421D0" data-uri="chapter04.xhtml#P70004970270000000000000000421D0" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000421D1" data-uri="chapter04.xhtml#P70004970270000000000000000421D1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421D2" data-uri="chapter04.xhtml#P70004970270000000000000000421D2" class="pcalibre calibre3 pcalibre1">icode, to Stat at PC update and New PC</p></li>
<li id="P70004970270000000000000000421D3" data-uri="chapter04.xhtml#P70004970270000000000000000421D3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421D4" data-uri="chapter04.xhtml#P70004970270000000000000000421D4" class="pcalibre calibre3 pcalibre1">ifun</p></li>
<li id="P70004970270000000000000000421D5" data-uri="chapter04.xhtml#P70004970270000000000000000421D5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421D6" data-uri="chapter04.xhtml#P70004970270000000000000000421D6" class="pcalibre calibre3 pcalibre1">rA</p></li>
<li id="P70004970270000000000000000421D7" data-uri="chapter04.xhtml#P70004970270000000000000000421D7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421D8" data-uri="chapter04.xhtml#P70004970270000000000000000421D8" class="pcalibre calibre3 pcalibre1">rB</p></li>
<li id="P70004970270000000000000000421D9" data-uri="chapter04.xhtml#P70004970270000000000000000421D9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421DA" data-uri="chapter04.xhtml#P70004970270000000000000000421DA" class="pcalibre calibre3 pcalibre1">valC, to New PC and ALU A</p></li>
</ul></li>
<li id="P70004970270000000000000000421DB" data-uri="chapter04.xhtml#P70004970270000000000000000421DB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421DC" data-uri="chapter04.xhtml#P70004970270000000000000000421DC" class="pcalibre calibre3 pcalibre1">PC increment with output valP, to Data in memory and New PC</p></li>
</ul></li>
<li id="P70004970270000000000000000421DD" data-uri="chapter04.xhtml#P70004970270000000000000000421DD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421DE" data-uri="chapter04.xhtml#P70004970270000000000000000421DE" class="pcalibre calibre3 pcalibre1">Decode: Register file with outputs and inputs:</p>
<ul id="P70004970270000000000000000421DF" data-uri="chapter04.xhtml#P70004970270000000000000000421DF" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000421E0" data-uri="chapter04.xhtml#P70004970270000000000000000421E0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421E1" data-uri="chapter04.xhtml#P70004970270000000000000000421E1" class="pcalibre calibre3 pcalibre1">Outputs A and B to valA and valB, respectively</p>
<ul id="P70004970270000000000000000421E2" data-uri="chapter04.xhtml#P70004970270000000000000000421E2" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000421E3" data-uri="chapter04.xhtml#P70004970270000000000000000421E3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421E4" data-uri="chapter04.xhtml#P70004970270000000000000000421E4" class="pcalibre calibre3 pcalibre1">valA to ALU A as well as Addr and Data in memory</p></li>
<li id="P70004970270000000000000000421E5" data-uri="chapter04.xhtml#P70004970270000000000000000421E5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421E6" data-uri="chapter04.xhtml#P70004970270000000000000000421E6" class="pcalibre calibre3 pcalibre1">valB to ALU B</p></li>
</ul></li>
<li id="P70004970270000000000000000421E7" data-uri="chapter04.xhtml#P70004970270000000000000000421E7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421E8" data-uri="chapter04.xhtml#P70004970270000000000000000421E8" class="pcalibre calibre3 pcalibre1">Inputs M and E</p>
<ul id="P70004970270000000000000000421E9" data-uri="chapter04.xhtml#P70004970270000000000000000421E9" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000421EA" data-uri="chapter04.xhtml#P70004970270000000000000000421EA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421EB" data-uri="chapter04.xhtml#P70004970270000000000000000421EB" class="pcalibre calibre3 pcalibre1">M from output valM from Data memory</p></li>
<li id="P70004970270000000000000000421EC" data-uri="chapter04.xhtml#P70004970270000000000000000421EC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421ED" data-uri="chapter04.xhtml#P70004970270000000000000000421ED" class="pcalibre calibre3 pcalibre1">E as write back from output valE from ALU</p></li>
</ul></li></ul></li>
<li id="P70004970270000000000000000421EE" data-uri="chapter04.xhtml#P70004970270000000000000000421EE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421EF" data-uri="chapter04.xhtml#P70004970270000000000000000421EF" class="pcalibre calibre3 pcalibre1">Execute: ALU with inputs and outputs:</p>
<ul id="P70004970270000000000000000421F0" data-uri="chapter04.xhtml#P70004970270000000000000000421F0" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000421F1" data-uri="chapter04.xhtml#P70004970270000000000000000421F1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421F2" data-uri="chapter04.xhtml#P70004970270000000000000000421F2" class="pcalibre calibre3 pcalibre1">Input ALU A from valC and valA</p></li>
<li id="P70004970270000000000000000421F3" data-uri="chapter04.xhtml#P70004970270000000000000000421F3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421F4" data-uri="chapter04.xhtml#P70004970270000000000000000421F4" class="pcalibre calibre3 pcalibre1">Input ALU B from valB</p></li>
<li id="P70004970270000000000000000421F5" data-uri="chapter04.xhtml#P70004970270000000000000000421F5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421F6" data-uri="chapter04.xhtml#P70004970270000000000000000421F6" class="pcalibre calibre3 pcalibre1">Input ALU fun.</p></li>
<li id="P70004970270000000000000000421F7" data-uri="chapter04.xhtml#P70004970270000000000000000421F7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421F8" data-uri="chapter04.xhtml#P70004970270000000000000000421F8" class="pcalibre calibre3 pcalibre1">Output CC to Cnd, to dstE, dstM, srcA, and srcB, each with own outputs</p></li>
<li id="P70004970270000000000000000421F9" data-uri="chapter04.xhtml#P70004970270000000000000000421F9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421FA" data-uri="chapter04.xhtml#P70004970270000000000000000421FA" class="pcalibre calibre3 pcalibre1">Output valE to Addr input to Data memory and to Register file E as write back</p></li>
</ul></li>
<li id="P70004970270000000000000000421FB" data-uri="chapter04.xhtml#P70004970270000000000000000421FB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421FC" data-uri="chapter04.xhtml#P70004970270000000000000000421FC" class="pcalibre calibre3 pcalibre1">Memory: Data memory with inputs and outputs:</p>
<ul id="P70004970270000000000000000421FD" data-uri="chapter04.xhtml#P70004970270000000000000000421FD" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000421FE" data-uri="chapter04.xhtml#P70004970270000000000000000421FE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000421FF" data-uri="chapter04.xhtml#P70004970270000000000000000421FF" class="pcalibre calibre3 pcalibre1">Inputs read and write from Mem. Control</p></li>
<li id="P7000497027000000000000000042200" data-uri="chapter04.xhtml#P7000497027000000000000000042200" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042201" data-uri="chapter04.xhtml#P7000497027000000000000000042201" class="pcalibre calibre3 pcalibre1">Input Addr from valE and valA</p></li>
<li id="P7000497027000000000000000042202" data-uri="chapter04.xhtml#P7000497027000000000000000042202" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042203" data-uri="chapter04.xhtml#P7000497027000000000000000042203" class="pcalibre calibre3 pcalibre1">Input Data from valP and valA</p></li>
<li id="P7000497027000000000000000042204" data-uri="chapter04.xhtml#P7000497027000000000000000042204" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042205" data-uri="chapter04.xhtml#P7000497027000000000000000042205" class="pcalibre calibre3 pcalibre1">Data out to valM, leading to Register file M and New PC</p></li>
<li id="P7000497027000000000000000042206" data-uri="chapter04.xhtml#P7000497027000000000000000042206" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042207" data-uri="chapter04.xhtml#P7000497027000000000000000042207" class="pcalibre calibre3 pcalibre1">Dmem_error to Stat in PC update</p></li></ul></li>
<li id="P7000497027000000000000000042208" data-uri="chapter04.xhtml#P7000497027000000000000000042208" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042209" data-uri="chapter04.xhtml#P7000497027000000000000000042209" class="pcalibre calibre3 pcalibre1">PC update: Stat output from Stat, with inputs from Instruction memory, icode output of Instruction memory, and Data memory.</p></li>
<li id="P700049702700000000000000004220A" data-uri="chapter04.xhtml#P700049702700000000000000004220A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004220B" data-uri="chapter04.xhtml#P700049702700000000000000004220B" class="pcalibre calibre3 pcalibre1">New PC with output newPC looping back to PC</p></li>
</ul>
</details>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003FD2" data-uri="chapter04.xhtml#P7000497027000000000000000003FD2">

<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000004220C" data-uri="chapter04.xhtml#P700049702700000000000000004220C">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004220D" data-uri="chapter04.xhtml#P700049702700000000000000004220D" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003FD5" title="400" data-uri="chapter04.xhtml#P7000497027000000000000000003FD5" epub:type="pagebreak"></span>Stage</th>
<th id="P700049702700000000000000004220E" data-uri="chapter04.xhtml#P700049702700000000000000004220E" class="calibre18 pcalibre pcalibre1">Computation</th>
<th id="P700049702700000000000000004220F" data-uri="chapter04.xhtml#P700049702700000000000000004220F" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042210" data-uri="chapter04.xhtml#P7000497027000000000000000042210" class="calibre10 pcalibre pcalibre1">OPq</code> rA, rB</th>
<th id="P7000497027000000000000000042211" data-uri="chapter04.xhtml#P7000497027000000000000000042211" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042212" data-uri="chapter04.xhtml#P7000497027000000000000000042212" class="calibre10 pcalibre pcalibre1">mrmovq</code> D(rB), rA</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042213" data-uri="chapter04.xhtml#P7000497027000000000000000042213" class="calibre20 pcalibre pcalibre1">Fetch</td>
<td id="P7000497027000000000000000042214" data-uri="chapter04.xhtml#P7000497027000000000000000042214" class="calibre20 pcalibre pcalibre1">icode, ifun</td>
<td id="P7000497027000000000000000042215" data-uri="chapter04.xhtml#P7000497027000000000000000042215" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td>
<td id="P7000497027000000000000000042216" data-uri="chapter04.xhtml#P7000497027000000000000000042216" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">

<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042217" data-uri="chapter04.xhtml#P7000497027000000000000000042217" class="calibre20 pcalibre pcalibre1">rA, rB</td>
<td id="P7000497027000000000000000042218" data-uri="chapter04.xhtml#P7000497027000000000000000042218" class="calibre20 pcalibre pcalibre1">rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>
<td id="P7000497027000000000000000042219" data-uri="chapter04.xhtml#P7000497027000000000000000042219" class="calibre20 pcalibre pcalibre1">rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC +1]
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004221A" data-uri="chapter04.xhtml#P700049702700000000000000004221A" class="calibre20 pcalibre pcalibre1">valC</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004221B" data-uri="chapter04.xhtml#P700049702700000000000000004221B" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004221C" data-uri="chapter04.xhtml#P700049702700000000000000004221C" class="calibre20 pcalibre pcalibre1">valP</td>
<td id="P700049702700000000000000004221D" data-uri="chapter04.xhtml#P700049702700000000000000004221D" class="calibre20 pcalibre pcalibre1">valP ← PC + 2</td>
<td id="P700049702700000000000000004221E" data-uri="chapter04.xhtml#P700049702700000000000000004221E" class="calibre20 pcalibre pcalibre1">valP ← PC+ 10</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004221F" data-uri="chapter04.xhtml#P700049702700000000000000004221F" class="calibre20 pcalibre pcalibre1">Decode</td>
<td id="P7000497027000000000000000042220" data-uri="chapter04.xhtml#P7000497027000000000000000042220" class="calibre20 pcalibre pcalibre1">valA, srcA</td>
<td id="P7000497027000000000000000042221" data-uri="chapter04.xhtml#P7000497027000000000000000042221" class="calibre20 pcalibre pcalibre1">valA ← R[rA]</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042222" data-uri="chapter04.xhtml#P7000497027000000000000000042222" class="calibre20 pcalibre pcalibre1">valB, srcB</td>
<td id="P7000497027000000000000000042223" data-uri="chapter04.xhtml#P7000497027000000000000000042223" class="calibre20 pcalibre pcalibre1">valB ← R[rB]</td>
<td id="P7000497027000000000000000042224" data-uri="chapter04.xhtml#P7000497027000000000000000042224" class="calibre20 pcalibre pcalibre1">valB ← R[rB]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042225" data-uri="chapter04.xhtml#P7000497027000000000000000042225" class="calibre20 pcalibre pcalibre1">Execute</td>
<td id="P7000497027000000000000000042226" data-uri="chapter04.xhtml#P7000497027000000000000000042226" class="calibre20 pcalibre pcalibre1">valE Cond. codes</td>
<td id="P7000497027000000000000000042227" data-uri="chapter04.xhtml#P7000497027000000000000000042227" class="calibre20 pcalibre pcalibre1">valE ← valB OP valA Set CC</td>
<td id="P7000497027000000000000000042228" data-uri="chapter04.xhtml#P7000497027000000000000000042228" class="calibre20 pcalibre pcalibre1">valE ← valB + valC</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042229" data-uri="chapter04.xhtml#P7000497027000000000000000042229" class="calibre20 pcalibre pcalibre1">Memory</td>
<td id="P700049702700000000000000004222A" data-uri="chapter04.xhtml#P700049702700000000000000004222A" class="calibre20 pcalibre pcalibre1">Read/write</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004222B" data-uri="chapter04.xhtml#P700049702700000000000000004222B" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004222C" data-uri="chapter04.xhtml#P700049702700000000000000004222C" class="calibre20 pcalibre pcalibre1">Write back</td>
<td id="P700049702700000000000000004222D" data-uri="chapter04.xhtml#P700049702700000000000000004222D" class="calibre20 pcalibre pcalibre1">E port, dstE</td>
<td id="P700049702700000000000000004222E" data-uri="chapter04.xhtml#P700049702700000000000000004222E" class="calibre20 pcalibre pcalibre1">R[rB] ← valE</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004222F" data-uri="chapter04.xhtml#P700049702700000000000000004222F" class="calibre20 pcalibre pcalibre1">M port, dstM</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042230" data-uri="chapter04.xhtml#P7000497027000000000000000042230" class="calibre20 pcalibre pcalibre1">R[rA] ← valM</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042231" data-uri="chapter04.xhtml#P7000497027000000000000000042231" class="calibre20 pcalibre pcalibre1">PC update</td>
<td id="P7000497027000000000000000042232" data-uri="chapter04.xhtml#P7000497027000000000000000042232" class="calibre20 pcalibre pcalibre1">PC</td>
<td id="P7000497027000000000000000042233" data-uri="chapter04.xhtml#P7000497027000000000000000042233" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
<td id="P7000497027000000000000000042234" data-uri="chapter04.xhtml#P7000497027000000000000000042234" class="calibre20 pcalibre pcalibre1">PC ← valP</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000042235" data-uri="chapter04.xhtml#P7000497027000000000000000042235" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042236" data-uri="chapter04.xhtml#P7000497027000000000000000042236" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.24 </span>Identifying the different computation steps in the sequential implementation.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042237" data-uri="chapter04.xhtml#P7000497027000000000000000042237"><p id="P7000497027000000000000000042238" data-uri="chapter04.xhtml#P7000497027000000000000000042238" class="pcalibre1 pcalibre calibre2"> The second column identifies the value being computed or the operation being performed in the stages of SEQ. The computations for instructions <code id="P7000497027000000000000000042239" data-uri="chapter04.xhtml#P7000497027000000000000000042239" class="pcalibre1 calibre8 pcalibre">OPq</code> and <code id="P700049702700000000000000004223A" data-uri="chapter04.xhtml#P700049702700000000000000004223A" class="pcalibre1 calibre8 pcalibre">mrmovq</code> are shown as examples of the computations.</p><p id="P700049702700000000000000004223B" data-uri="chapter04.xhtml#P700049702700000000000000004223B" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>
</figure>


<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004223C" data-uri="chapter04.xhtml#P700049702700000000000000004223C">in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.23</span></a>. Our task is to proceed through the individual stages and create detailed designs for these blocks.</p>
</section>
<section id="P7000497027000000000000000004004" data-uri="chapter04.xhtml#P7000497027000000000000000004004" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004223D" data-uri="chapter04.xhtml#P700049702700000000000000004223D" epub:type="title"><span class="pcalibre label pcalibre1">4.3.3 </span>SEQ Timing</h1></header>
<p id="P700049702700000000000000004223E" data-uri="chapter04.xhtml#P700049702700000000000000004223E" class="pcalibre1 pcalibre calibre2">In introducing the tables of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> through <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, we stated that they should be read as if they were written in a programming notation, with the assignments performed in sequence from top to bottom. On the other hand, the hardware structure of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.23</span></a> operates in a fundamentally different way, with a single clock transition triggering a flow through combinational logic to execute an entire instruction. Let us see how the hardware can implement the behavior listed in these tables.</p>
<p id="P700049702700000000000000004223F" data-uri="chapter04.xhtml#P700049702700000000000000004223F" class="pcalibre1 pcalibre calibre2">Our implementation of SEQ consists of combinational logic and two forms of memory devices: clocked registers (the program counter and condition code register) and random access memories (the register file, the instruction memory, and the data memory). Combinational logic does not require any sequencing or control—values propagate through a network of logic gates whenever the inputs change. As we have described, we also assume that reading from a random access memory operates much like combinational logic, with the output word generated based on the address input. This is a reasonable assumption for smaller <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004008" title="401" data-uri="chapter04.xhtml#P7000497027000000000000000004008" epub:type="pagebreak"></span>memories (such as the register file), and we can mimic this effect for larger circuits using special clock circuits. Since our instruction memory is only used to read instructions, we can therefore treat this unit as if it were combinational logic.</p>
<p id="P7000497027000000000000000042240" data-uri="chapter04.xhtml#P7000497027000000000000000042240" class="pcalibre1 pcalibre calibre2">We are left with just four hardware units that require an explicit control over their sequencing—the program counter, the condition code register, the data memory, and the register file. These are controlled via a single clock signal that triggers the loading of new values into the registers and the writing of values to the random access memories. The program counter is loaded with a new instruction address every clock cycle. The condition code register is loaded only when an integer operation instruction is executed. The data memory is written only when an <code id="P7000497027000000000000000042241" data-uri="chapter04.xhtml#P7000497027000000000000000042241" class="pcalibre1 calibre8 pcalibre">rmmovq, pushq</code>, or <code id="P7000497027000000000000000042242" data-uri="chapter04.xhtml#P7000497027000000000000000042242" class="pcalibre1 calibre8 pcalibre">call</code> instruction is executed. The two write ports of the register file allow two program registers to be updated on every cycle, but we can use the special register ID <code id="P7000497027000000000000000042243" data-uri="chapter04.xhtml#P7000497027000000000000000042243" class="pcalibre1 calibre8 pcalibre">0xF</code> as a port address to indicate that no write should be performed for this port.</p>
<p id="P7000497027000000000000000042244" data-uri="chapter04.xhtml#P7000497027000000000000000042244" class="pcalibre1 pcalibre calibre2">This clocking of the registers and memories is all that is required to control the sequencing of activities in our processor. Our hardware achieves the same effect as would a sequential execution of the assignments shown in the tables of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EDE"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.18</span></a> through <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FD2"><span class="pcalibre label pcalibre1">4.21</span></a>, even though all of the state updates actually occur simultaneously and only as the clock rises to start the next cycle. This equivalence holds because of the nature of the Y86-64 instruction set, and because we have organized the computations in such a way that our design obeys the following principle:</p>
</section>
</section></body></html>
