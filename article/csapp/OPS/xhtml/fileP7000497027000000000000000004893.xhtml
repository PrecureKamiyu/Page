<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Chapter 5 Optimizing Program Performance</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000004893" epub:type="chapter"><header class="calibre24 pcalibre pcalibre1"><h1 class="title4 pcalibre pcalibre1" id="P7000497027000000000000000042FE6" data-uri="chapter05.xhtml#P7000497027000000000000000042FE6" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004895" title="495" data-uri="chapter05.xhtml#P7000497027000000000000000004895" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre number1 pcalibre1">5 </span>Optimizing Program Performance</h1></header>
<section class="pcalibre halftitlepage pcalibre1" id="d9e105665">
<nav class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000042FE7" data-uri="chapter05.xhtml#P7000497027000000000000000042FE7" epub:type="toc">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042FE8" data-uri="chapter05.xhtml#P7000497027000000000000000042FE8">
<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000042FE9" data-uri="chapter05.xhtml#P7000497027000000000000000042FE9">
<li id="P7000497027000000000000000042FEA" data-uri="chapter05.xhtml#P7000497027000000000000000042FEA" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FEB" data-uri="chapter05.xhtml#P7000497027000000000000000042FEB" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000048D0.xhtml#P70004970270000000000000000048D0"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.1 </span>Capabilities and Limitations of Optimizing Compilers </span><span class="pcalibre pcalibre1" epub:type="pagebreak">498</span></a></p></li>
<li id="P7000497027000000000000000042FEC" data-uri="chapter05.xhtml#P7000497027000000000000000042FEC" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FED" data-uri="chapter05.xhtml#P7000497027000000000000000042FED" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000493B.xhtml#P700049702700000000000000000493B"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.2 </span>Expressing Program Performance </span><span class="pcalibre pcalibre1" epub:type="pagebreak">502</span></a></p></li>
<li id="P7000497027000000000000000042FEE" data-uri="chapter05.xhtml#P7000497027000000000000000042FEE" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FEF" data-uri="chapter05.xhtml#P7000497027000000000000000042FEF" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000496E.xhtml#P700049702700000000000000000496E"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.3 </span>Program Example </span><span class="pcalibre pcalibre1" epub:type="pagebreak">504</span></a></p></li>
<li id="P7000497027000000000000000042FF0" data-uri="chapter05.xhtml#P7000497027000000000000000042FF0" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FF1" data-uri="chapter05.xhtml#P7000497027000000000000000042FF1" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000049CE.xhtml#P70004970270000000000000000049CE"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.4 </span>Eliminating Loop Inefficiencies </span><span class="pcalibre pcalibre1" epub:type="pagebreak">508</span></a></p></li>
<li id="P7000497027000000000000000042FF2" data-uri="chapter05.xhtml#P7000497027000000000000000042FF2" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FF3" data-uri="chapter05.xhtml#P7000497027000000000000000042FF3" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004A83.xhtml#P7000497027000000000000000004A83"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.5 </span>Reducing Procedure Calls </span><span class="pcalibre pcalibre1" epub:type="pagebreak">512</span></a></p></li>
<li id="P7000497027000000000000000042FF4" data-uri="chapter05.xhtml#P7000497027000000000000000042FF4" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FF5" data-uri="chapter05.xhtml#P7000497027000000000000000042FF5" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004AB6.xhtml#P7000497027000000000000000004AB6"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.6 </span>Eliminating Unneeded Memory References </span><span class="pcalibre pcalibre1" epub:type="pagebreak">514</span></a></p></li>
<li id="P7000497027000000000000000042FF6" data-uri="chapter05.xhtml#P7000497027000000000000000042FF6" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FF7" data-uri="chapter05.xhtml#P7000497027000000000000000042FF7" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004B6C"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.7 </span>Understanding Modern Processors </span><span class="pcalibre pcalibre1" epub:type="pagebreak">517</span></a></p></li>
<li id="P7000497027000000000000000042FF8" data-uri="chapter05.xhtml#P7000497027000000000000000042FF8" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FF9" data-uri="chapter05.xhtml#P7000497027000000000000000042FF9" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004C94"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.8 </span>Loop Unrolling </span><span class="pcalibre pcalibre1" epub:type="pagebreak">531</span></a></p></li>
<li id="P7000497027000000000000000042FFA" data-uri="chapter05.xhtml#P7000497027000000000000000042FFA" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FFB" data-uri="chapter05.xhtml#P7000497027000000000000000042FFB" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004D16"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.9 </span>Enhancing Parallelism </span><span class="pcalibre pcalibre1" epub:type="pagebreak">536</span></a></p></li>
<li id="P7000497027000000000000000042FFC" data-uri="chapter05.xhtml#P7000497027000000000000000042FFC" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FFD" data-uri="chapter05.xhtml#P7000497027000000000000000042FFD" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004E68.xhtml#P7000497027000000000000000004E68"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.10 </span>Summary of Results for Optimizing Combining Code </span><span class="pcalibre pcalibre1" epub:type="pagebreak">547</span></a></p></li>
<li id="P7000497027000000000000000042FFE" data-uri="chapter05.xhtml#P7000497027000000000000000042FFE" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000042FFF" data-uri="chapter05.xhtml#P7000497027000000000000000042FFF" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004E9A.xhtml#P7000497027000000000000000004E9A"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.11 </span>Some Limiting Factors </span><span class="pcalibre pcalibre1" epub:type="pagebreak">548</span></a></p></li>
<li id="P7000497027000000000000000043000" data-uri="chapter05.xhtml#P7000497027000000000000000043000" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000043001" data-uri="chapter05.xhtml#P7000497027000000000000000043001" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004F49"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.12 </span>Understanding Memory Performance </span><span class="pcalibre pcalibre1" epub:type="pagebreak">553</span></a></p></li>
<li id="P7000497027000000000000000043002" data-uri="chapter05.xhtml#P7000497027000000000000000043002" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000043003" data-uri="chapter05.xhtml#P7000497027000000000000000043003" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004FF4.xhtml#P7000497027000000000000000004FF4"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.13 </span>Life in the Real World: Performance Improvement Techniques </span><span class="pcalibre pcalibre1" epub:type="pagebreak">561</span></a></p></li>
<li id="P7000497027000000000000000043004" data-uri="chapter05.xhtml#P7000497027000000000000000043004" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000043005" data-uri="chapter05.xhtml#P7000497027000000000000000043005" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000500C.xhtml#P700049702700000000000000000500C"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.14 </span>Identifying and Eliminating Performance Bottlenecks </span><span class="pcalibre pcalibre1" epub:type="pagebreak">562</span></a></p></li>
</ol></div>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000043006" data-uri="chapter05.xhtml#P7000497027000000000000000043006">
<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000043007" data-uri="chapter05.xhtml#P7000497027000000000000000043007">
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000043008" data-uri="chapter05.xhtml#P7000497027000000000000000043008"><p id="P7000497027000000000000000043009" data-uri="chapter05.xhtml#P7000497027000000000000000043009" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005082.xhtml#P7000497027000000000000000005082"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">5.15 </span><span class="pcalibre label pcalibre1">Summary</span> </span><span class="pcalibre pcalibre1" epub:type="pagebreak">568</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P700049702700000000000000004300A" data-uri="chapter05.xhtml#P700049702700000000000000004300A"><p id="P700049702700000000000000004300B" data-uri="chapter05.xhtml#P700049702700000000000000004300B" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000508A.xhtml#P700049702700000000000000000508A"><span class="pcalibre pcalibre1" epub:type="title">Bibliographic Notes </span><span class="pcalibre pcalibre1" epub:type="pagebreak">569</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P700049702700000000000000004300C" data-uri="chapter05.xhtml#P700049702700000000000000004300C"><p id="P700049702700000000000000004300D" data-uri="chapter05.xhtml#P700049702700000000000000004300D" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005090.xhtml#P7000497027000000000000000005090"><span class="pcalibre pcalibre1" epub:type="title">Homework Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">570</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P700049702700000000000000004300E" data-uri="chapter05.xhtml#P700049702700000000000000004300E"><p id="P700049702700000000000000004300F" data-uri="chapter05.xhtml#P700049702700000000000000004300F" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000050E4.xhtml#P70004970270000000000000000050E4"><span class="pcalibre pcalibre1" epub:type="title">Solutions to Practice Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">573</span></a></p></li>
</ol>
</div>
</nav>

<section id="P7000497027000000000000000043010" data-uri="chapter05.xhtml#P7000497027000000000000000043010" epub:type="introduction" class="introduction pcalibre pcalibre1">
<p id="P7000497027000000000000000043011" data-uri="chapter05.xhtml#P7000497027000000000000000043011" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000048C1" title="496" data-uri="chapter05.xhtml#P70004970270000000000000000048C1" epub:type="pagebreak"></span>The primary objective in writing a program must be to make it work correctly under all possible conditions. A program that runs fast but gives incorrect results serves no useful purpose. Programmers must write clear and concise code, not only so that they can make sense of it, but also so that others can read and understand the code during code reviews and when modifications are required later.</p>
<p id="P7000497027000000000000000043012" data-uri="chapter05.xhtml#P7000497027000000000000000043012" class="pcalibre1 pcalibre calibre2">On the other hand, there are many occasions when making a program run fast is also an important consideration. If a program must process video frames or network packets in real time, then a slow-running program will not provide the needed functionality. When a computational task is so demanding that it requires days or weeks to execute, then making it run just 20% faster can have significant impact. In this chapter, we will explore how to make programs run faster via several different types of program optimization.</p>
<p id="P7000497027000000000000000043013" data-uri="chapter05.xhtml#P7000497027000000000000000043013" class="pcalibre1 pcalibre calibre2">Writing an efficient program requires several types of activities. First, we must select an appropriate set of algorithms and data structures. Second, we must write source code that the compiler can effectively optimize to turn into efficient executable code. For this second part, it is important to understand the capabilities and limitations of optimizing compilers. Seemingly minor changes in how a program is written can make large differences in how well a compiler can optimize it. Some programming languages are more easily optimized than others. Some features of C, such as the ability to perform pointer arithmetic and casting, make it challenging for a compiler to optimize. Programmers can often write their programs in ways that make it easier for compilers to generate efficient code. A third technique for dealing with especially demanding computations is to divide a task into portions that can be computed in parallel, on some combination of multiple cores and multiple processors. We will defer this aspect of performance enhancement to <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a>. Even when exploiting parallelism, it is important that each parallel thread execute with maximum performance, and so the material of this chapter remains relevant in any case.</p>
<p id="P7000497027000000000000000043014" data-uri="chapter05.xhtml#P7000497027000000000000000043014" class="pcalibre1 pcalibre calibre2">In approaching program development and optimization, we must consider how the code will be used and what critical factors affect it. In general, programmers must make a trade-off between how easy a program is to implement and maintain, and how fast it runs. At an algorithmic level, a simple insertion sort can be programmed in a matter of minutes, whereas a highly efficient sort routine may take a day or more to implement and optimize. At the coding level, many low-level optimizations tend to reduce code readability and modularity, making the programs more susceptible to bugs and more difficult to modify or extend. For code that will be executed repeatedly in a performance-critical environment, extensive optimization may be appropriate. One challenge is to maintain some degree of elegance and readability in the code despite extensive transformations.</p>
<p id="P7000497027000000000000000043015" data-uri="chapter05.xhtml#P7000497027000000000000000043015" class="pcalibre1 pcalibre calibre2">We describe a number of techniques for improving code performance. Ideally, a compiler would be able to take whatever code we write and generate the most efficient possible machine-level program having the specified behavior. Modern compilers employ sophisticated forms of analysis and optimization, and they keep getting better. Even the best compilers, however, can be thwarted by <i class="calibre5 pcalibre pcalibre1">optimization blockers</i>—aspects of the program's behavior that depend strongly on the execution <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000048C6" title="497" data-uri="chapter05.xhtml#P70004970270000000000000000048C6" epub:type="pagebreak"></span>environment. Programmers must assist the compiler by writing code that can be optimized readily.</p>
<p id="P7000497027000000000000000043016" data-uri="chapter05.xhtml#P7000497027000000000000000043016" class="pcalibre1 pcalibre calibre2">The first step in optimizing a program is to eliminate unnecessary work, making the code perform its intended task as efficiently as possible. This includes eliminating unnecessary function calls, conditional tests, and memory references. These optimizations do not depend on any specific properties of the target machine.</p>
<p id="P7000497027000000000000000043017" data-uri="chapter05.xhtml#P7000497027000000000000000043017" class="pcalibre1 pcalibre calibre2">To maximize the performance of a program, both the programmer and the compiler require a model of the target machine, specifying how instructions are processed and the timing characteristics of the different operations. For example, the compiler must know timing information to be able to decide whether it should use a multiply instruction or some combination of shifts and adds. Modern computers use sophisticated techniques to process a machine-level program, executing many instructions in parallel and possibly in a different order than they appear in the program. Programmers must understand how these processors work to be able to tune their programs for maximum speed. We present a high-level model of such a machine based on recent designs of Intel and AMD processors. We also devise a graphical <i class="calibre5 pcalibre pcalibre1">data-flow</i> notation to visualize the execution of instructions by the processor, with which we can predict program performance.</p>
<p id="P7000497027000000000000000043018" data-uri="chapter05.xhtml#P7000497027000000000000000043018" class="pcalibre1 pcalibre calibre2">With this understanding of processor operation, we can take a second step in program optimization, exploiting the capability of processors to provide <i class="calibre5 pcalibre pcalibre1">instruction-level parallelism</i>, executing multiple instructions simultaneously. We cover several program transformations that reduce the data dependencies between different parts of a computation, increasing the degree of parallelism with which they can be executed.</p>
<p id="P7000497027000000000000000043019" data-uri="chapter05.xhtml#P7000497027000000000000000043019" class="pcalibre1 pcalibre calibre2">We conclude the chapter by discussing issues related to optimizing large programs. We describe the use of code <i class="calibre5 pcalibre pcalibre1">profilers</i>—tools that measure the performance of different parts of a program. This analysis can help find inefficiencies in the code and identify the parts of the program on which we should focus our optimization efforts.</p>
<p id="P700049702700000000000000004301A" data-uri="chapter05.xhtml#P700049702700000000000000004301A" class="pcalibre1 pcalibre calibre2">In this presentation, we make code optimization look like a simple linear process of applying a series of transformations to the code in a particular order. In fact, the task is not nearly so straightforward. A fair amount of trial-and-error experimentation is required. This is especially true as we approach the later optimization stages, where seemingly small changes can cause major changes in performance and some very promising techniques prove ineffective. As we will see in the examples that follow, it can be difficult to explain exactly why a particular code sequence has a particular execution time. Performance can depend on many detailed features of the processor design for which we have relatively little documentation or understanding. This is another reason to try a number of different variations and combinations of techniques.</p>
<p id="P700049702700000000000000004301B" data-uri="chapter05.xhtml#P700049702700000000000000004301B" class="pcalibre1 pcalibre calibre2">Studying the assembly-code representation of a program is one of the most effective means for gaining an understanding of the compiler and how the generated code will run. A good strategy is to start by looking carefully at the code for the inner loops, identifying performance-reducing attributes such as excessive memory references and poor use of registers. Starting with the assembly code, we <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000048CD" title="498" data-uri="chapter05.xhtml#P70004970270000000000000000048CD" epub:type="pagebreak"></span>can also predict what operations will be performed in parallel and how well they will use the processor resources. As we will see, we can often determine the time (or at least a lower bound on the time) required to execute a loop by identifying <i class="calibre5 pcalibre pcalibre1">critical paths</i>, chains of data dependencies that form during repeated executions of a loop. We can then go back and modify the source code to try to steer the compiler toward more efficient implementations.</p>
<p id="P700049702700000000000000004301C" data-uri="chapter05.xhtml#P700049702700000000000000004301C" class="pcalibre1 pcalibre calibre2">Most major compilers, including <span class="smallcaps pcalibre pcalibre1">gcc</span>, are continually being updated and improved, especially in terms of their optimization abilities. One useful strategy is to do only as much rewriting of a program as is required to get it to the point where the compiler can then generate efficient code. By this means, we avoid compromising the readability, modularity, and portability of the code as much as if we had to work with a compiler of only minimal capabilities. Again, it helps to iteratively modify the code and analyze its performance both through measurements and by examining the generated assembly code.</p>
<p id="P700049702700000000000000004301D" data-uri="chapter05.xhtml#P700049702700000000000000004301D" class="pcalibre1 pcalibre calibre2">To novice programmers, it might seem strange to keep modifying the source code in an attempt to coax the compiler into generating efficient code, but this is indeed how many high-performance programs are written. Compared to the alternative of writing code in assembly language, this indirect approach has the advantage that the resulting code will still run on other machines, although perhaps not with peak performance.</p>
</section>

</section>
<!--EOF:P70004970270000000000000000048D0-->
<!--EOF:P700049702700000000000000000493B-->
<!--EOF:P700049702700000000000000000496E-->
<!--EOF:P70004970270000000000000000049CE-->
<!--EOF:P7000497027000000000000000004A83-->
<!--EOF:P7000497027000000000000000004AB6-->
<!--EOF:P7000497027000000000000000004B6C-->
<!--EOF:P7000497027000000000000000004C94-->
<!--EOF:P7000497027000000000000000004D16-->
<!--EOF:P7000497027000000000000000004E68-->
<!--EOF:P7000497027000000000000000004E9A-->
<!--EOF:P7000497027000000000000000004F49-->
<!--EOF:P7000497027000000000000000004FF4-->
<!--EOF:P700049702700000000000000000500C-->

<!--EOF:P7000497027000000000000000005082-->
<!--EOF:P700049702700000000000000000508A-->
<!--EOF:P7000497027000000000000000005090-->
<!--EOF:P70004970270000000000000000050E4-->


</section></body></html>
