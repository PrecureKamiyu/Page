<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>3.8 Summary </title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link></head><body epub:type="bodymatter">
<section id="P7001011952000000000000000001771" class="level1"><header><h1 class="title" id="P700101195200000000000000000A5A1" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A1" epub:type="title"><span class="pagebreak" title="284" id="P7001011952000000000000000001773" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001773" epub:type="pagebreak" role="doc-pagebreak"></span><span class="number">3.8</span> <span class="label">Summary </span></h1></header>
<p id="P700101195200000000000000000A5A2" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A2">We began this chapter by studying the services that a transport-layer protocol can provide to network applications. At one extreme, the transport-layer protocol can be very simple and offer a no-frills service to applications, providing only a multiplexing/demultiplexing function for communicating processes. The Internet’s UDP protocol is an example of such a no-frills transport-layer protocol. At the other extreme, a transport-layer protocol can provide a variety of guarantees to applications, such as reliable delivery of data, delay guarantees, and bandwidth guarantees. Nevertheless, the services that a transport protocol can provide are often constrained by the service model of the underlying network-layer protocol. If the network-layer protocol cannot provide delay or bandwidth guarantees to transport-layer segments, then the transport-layer protocol cannot provide delay or bandwidth guarantees for the messages sent between processes.</p>
<p id="P700101195200000000000000000A5A3" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A3">We learned in <a class="xref" href="fileP700101195200000000000000000120D.xhtml#P700101195200000000000000000120D" data-foobar="7"><span class="label">Section</span> <span class="number">3.4</span></a> that a transport-layer protocol can provide reliable data transfer even if the underlying network layer is unreliable. We saw that providing reliable data transfer has many subtle points, but that the task can be accomplished by carefully combining acknowledgments, timers, retransmissions, and sequence numbers.</p>
<p id="P700101195200000000000000000A5A4" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A4">Although we covered reliable data transfer in this chapter, we should keep in mind that reliable data transfer can be provided by link-, network-, transport-, or application-layer protocols. Any of the upper four layers of the protocol stack can implement acknowledgments, timers, retransmissions, and sequence numbers and provide reliable data transfer to the layer above. In fact, over the years, engineers and computer scientists have independently designed and implemented link-, network-, transport-, and application-layer protocols that provide reliable data transfer (although many of these protocols have quietly disappeared).</p>
<p id="P700101195200000000000000000A5A5" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A5">In <a class="xref" href="fileP7001011952000000000000000001442.xhtml#P7001011952000000000000000001442" data-foobar="7"><span class="label">Section</span> <span class="number">3.5</span></a>, we took a close look at TCP, the Internet’s connection-oriented and reliable transport-layer protocol. We learned that TCP is complex, involving connection management, flow control, and round-trip time estimation, as well as reliable data transfer. In fact, TCP is actually more complex than our description—we intentionally did not discuss a variety of TCP patches, fixes, and improvements that are widely implemented in various versions of TCP. All of this complexity, however, is hidden from the network application. If a client on one host wants to send data reliably to a server on another host, it simply opens a TCP socket to the server and pumps data into that socket. The client-server application is blissfully unaware of TCP’s complexity.</p>
<p id="P700101195200000000000000000A5A6" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A6">In <a class="xref" href="fileP7001011952000000000000000001627.xhtml#P7001011952000000000000000001627" data-foobar="7"><span class="label">Section</span> <span class="number">3.6</span></a>, we examined congestion control from a broad perspective, and in <a class="xref" href="fileP700101195200000000000000000168F.xhtml#P700101195200000000000000000168F" data-foobar="7"><span class="label">Section</span> <span class="number">3.7</span></a>, we showed how TCP implements congestion control. We learned that congestion control is imperative for the well-being of the network. Without congestion control, a network can easily become gridlocked, with little or no data being transported end-to-end. In <a class="xref" href="fileP700101195200000000000000000168F.xhtml#P700101195200000000000000000168F" data-foobar="7"><span class="label">Section</span> <span class="number">3.7</span></a> we learned that TCP implements an end-to-end congestion-control mechanism that additively increases its transmission rate when the TCP connection’s path is judged to be congestion-free, and multiplicatively <span class="pagebreak" title="285" id="P7001011952000000000000000001779" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001779" epub:type="pagebreak" role="doc-pagebreak"></span>decreases its transmission rate when loss occurs. This mechanism also strives to give each TCP connection passing through a congested link an equal share of the link bandwidth. We also examined in some depth the impact of TCP connection establishment and slow start on latency. We observed that in many important scenarios, connection establishment and slow start significantly contribute to end-to-end delay. We emphasize once more that while TCP congestion control has evolved over the years, it remains an area of intensive research and will likely continue to evolve in the upcoming years.</p>
<p id="P700101195200000000000000000A5A7" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A7">Our discussion of specific Internet transport protocols in this chapter has focused on UDP and TCP—the two “work horses” of the Internet transport layer. However, two decades of experience with these two protocols has identified circumstances in which neither is ideally suited. Researchers have thus been busy developing additional transport-layer protocols, several of which are now IETF proposed standards.</p>
<p id="P700101195200000000000000000A5A8" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A8">The Datagram Congestion Control Protocol (DCCP) <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B98" data-foobar="7">[RFC 4340]</a> provides a low-overhead, message-oriented, UDP-like unreliable service, but with an application-selected form of congestion control that is compatible with TCP. If reliable or semi-reliable data transfer is needed by an application, then this would be performed within the application itself, perhaps using the mechanisms we have studied in <a class="xref" href="fileP700101195200000000000000000120D.xhtml#P700101195200000000000000000120D" data-foobar="7"><span class="label">Section</span> <span class="number">3.4</span></a>. DCCP is envisioned for use in applications such as streaming media (see <a class="xref" href="fileP70010119520000000000000000033D7.xhtml#P70010119520000000000000000033D7" data-foobar="7"><span class="label">Chapter</span> <span class="number">9</span></a>) that can exploit the tradeoff between timeliness and reliability of data delivery, but that want to be responsive to network congestion.</p>
<p id="P700101195200000000000000000A5A9" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5A9">Google’s QUIC (Quick UDP Internet Connections) protocol [Iyengar 2016], implemented in Google’s Chromium browser, provides reliability via retransmission as well as error correction, fast-connection setup, and a rate-based congestion control algorithm that aims to be TCP friendly—all implemented as an application-level protocol on top of UDP. In early 2015, Google reported that roughly half of all requests from Chrome to Google servers are served over QUIC.</p>
<p id="P700101195200000000000000000A5AA" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5AA">DCTCP (Data Center TCP) <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000380B" data-foobar="7">[Alizadeh 2010]</a> is a version of TCP designed specifically for data center networks, and uses ECN to better support the mix of short- and long-lived flows that characterize data center workloads.</p>
<p id="P700101195200000000000000000A5AB" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5AB">The Stream Control Transmission Protocol (SCTP) <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BA4" data-foobar="7">[RFC 4960</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B6C" data-foobar="7">RFC 3286]</a> is a reliable, message-oriented protocol that allows several different application-level “streams” to be multiplexed through a single SCTP connection (an approach known as “multi-streaming”). From a reliability standpoint, the different streams within the connection are handled separately, so that packet loss in one stream does not affect the delivery of data in other streams. QUIC provides similar multi-stream semantics. SCTP also allows data to be transferred over two outgoing paths when a host is connected to two or more networks, optional delivery of out-of-order data, and a number of other features. SCTP’s flow- and congestion-control algorithms are essentially the same as in TCP.</p>
<p id="P700101195200000000000000000A5AC" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5AC">The TCP-Friendly Rate Control (TFRC) protocol <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BB5" data-foobar="7">[RFC 5348]</a> is a congestion-control protocol rather than a full-fledged transport-layer protocol. It specifies a <span class="pagebreak" title="286" id="P7001011952000000000000000001780" data-uri="M03_KURO4140_07_SE_C03.xhtml#P7001011952000000000000000001780" epub:type="pagebreak" role="doc-pagebreak"></span>congestion-control mechanism that could be used in another transport protocol such as DCCP (indeed one of the two application-selectable protocols available in DCCP is TFRC). The goal of TFRC is to smooth out the “saw tooth” behavior (see <a class="xref" href="fileP700101195200000000000000000168F.xhtml#P7001011952000000000000000001729" data-foobar="7"><span class="label">Fig­ure</span> <span class="number">3.53</span></a>) in TCP congestion control, while maintaining a long-term sending rate that is “reasonably” close to that of TCP. With a smoother sending rate than TCP, TFRC is well-suited for multimedia applications such as IP telephony or streaming media where such a smooth rate is important. TFRC is an “equation-based” protocol that uses the measured packet loss rate as input to an equation <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A90" data-foobar="7">[Padhye 2000]</a> that estimates what TCP’s throughput would be if a TCP session experiences that loss rate. This rate is then taken as TFRC’s target sending rate.</p>
<p id="P700101195200000000000000000A5AD" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5AD">Only the future will tell whether DCCP, SCTP, QUIC, or TFRC will see widespread deployment. While these protocols clearly provide enhanced capabilities over TCP and UDP, TCP and UDP have proven themselves “good enough” over the years. Whether “better” wins out over “good enough” will depend on a complex mix of technical, social, and business considerations.</p>
<p id="P700101195200000000000000000A5AE" data-uri="M03_KURO4140_07_SE_C03.xhtml#P700101195200000000000000000A5AE">In <a class="xref" href="fileP7001011952000000000000000000458.xhtml#P7001011952000000000000000000458" data-foobar="7"><span class="label">Chapter</span> <span class="number">1</span></a>, we said that a computer network can be partitioned into the “network edge” and the “network core.” The network edge covers everything that happens in the end systems. Having now covered the application layer and the transport layer, our discussion of the network edge is complete. It is time to explore the network core! This journey begins in the next two chapters, where we’ll study the network layer, and continues into <a class="xref" href="fileP70010119520000000000000000023B1.xhtml#P70010119520000000000000000023B1" data-foobar="7"><span class="label">Chapter</span> <span class="number">6</span></a>, where we’ll study the link layer.</p>
</section></body></html>