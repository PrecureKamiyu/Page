#+HTML_HEAD: <link rel = "stylesheet" type="text/css" href ="style_for_org.css"/>
#+OPTIONS: html-style:nil
#+TITLE: Chapter 12: Network

* 网络通信
** IP 

IP 地址是 Internet Protocol Address 的缩写，指的是网络中设备的标识符。
它是一个由 32 位二进制数字组成的地址，在人类可读的形式下被表示为 4 个
十进制数（每个数在 0-255 之间），用点号分隔开来。

IP 地址分为两种类型：IPv4 和 IPv6。IPv4 地址由 32 位二进制数字组成，而
IPv6 地址则由 128 位二进制数字组成。目前，IPv4 地址仍然是互联网上最常
用的地址类型。IPv4 地址共有 4294967296 个，但由于一些保留地址和私有地
址的存在，实际可用的公共 IPv4 地址数量要少得多。

IP 地址的作用是唯一地标识连接到 Internet 上的设备，并且它是 Internet
通信过程中的基本单元。每次从一台计算机向另一台计算机发送数据时，数据包
都会携带源 IP 地址和目标 IP 地址，以确保数据传输到正确的设备上。

本机地址为: 127.0.0.1

** 域名系统 (DNS)

DNS 代表域名系统（Domain Name System），是一个用于将易于记忆的域名转换
为 IP 地址的分布式数据库系统。因为互联网上存在数以亿计的设备和计算机，
用 IP 地址来访问它们是不方便的，而且很难记住众多的数字地址。DNS 解决了
这个问题，它允许我们使用易于记忆的域名，例如 ~www.example.com~ ，而不是记
住其对应的 IP 地址。

当您在浏览器中输入 URL 或域名时，DNS 服务器会将该域名映射到相应的 IP
地址，并将其返回给您的计算机，然后您的计算机可以使用该地址连接到目标服
务器。DNS 系统是一个分层的系统，由许多不同的 DNS 服务器组成，每个 DNS
服务器都存储了一部分域名和 IP 地址的映射关系。当一个 DNS 服务器无法找
到所请求的域名和 IP 地址的映射时，它会向其他 DNS 服务器发送请求，直到
找到匹配的映射为止。

** 网络协议层级

TCP/IP 是一个网络通信协议族，它包含了许多不同的协议，按照功能可以分为四个层级：

1. *应用层* ：应用层协议处理特定应用程序之间的通信，例如 Web 浏览器、电子
   邮件客户端和文件传输协议（FTP）客户端等。常见的应用层协议包括 HTTP、
   SMTP、POP3、FTP 等。

2. *传输层* ：传输层协议负责在源和目标设备之间提供端到端的可靠数据传输服
   务。TCP 是最常用的传输层协议，它提供流控制、拥塞控制和错误检测等功
   能。另一个传输层协议是用户数据报协议（UDP），它提供无连接的数据传输
   服务。

3. *网络层* ：网络层协议负责在互联网上路由数据包，确保它们到达正确的目标。
   IP协议是最常用的网络层协议，它定义了网络地址和路由选择，并将传输层
   的数据封装在 IP 数据包中以进行传输。

4. *链路层(网络接口层)* ：链路层协议负责在物理网络上传输数据帧。它确保
   数据从一个网络节点传输到下一个网络节点，并提供对物理层面的控制和管
   理。常见的链路层协议包括以太网和 Wi-Fi。

总之，TCP/IP 协议族是一个四层网络通信协议体系结构，它包括了应用层、传
输层、网络层和链路层。不同层级的协议协同工作，为数据在网络中的传输提供
了完整的解决方案。

** TCP 和 UDP

TCP 是在传输层的东西. TCP 是最常用的传输层协议，它提供 *流控制、拥塞控
制和错误检测* 等功能。另一个传输层协议是用户数据报协议（UDP），它提供
无连接的数据传输服务.

UDP 是用户数据报协议（User Datagram Protocol）的缩写。它是一种无连接协
议，用于在计算机网络上发送数据包。相对于 TCP 协议，UDP 协议具有更快的
传输速度，但是不保证数据包的 *可靠性和顺序性* 。因此，在某些应用场景中，
如实时音视频传输、在线游戏等，UDP 协议更为适用。

** Socket

Socket（套接字）是一种在计算机网络中进行进程间通信或传输数据的机制。它
提供了一种标准的接口，使得应用程序能够通过网络协议与其他应用程序进行通
信。

Socket 有两个部分组成, 1. _IP地址_; 2. _端口号_.

Socket 通常被用于实现客户端 / 服务器模型，其中服务器监听来自客户端的连
接请求，并向客户端提供服务。客户端则通过 Socket 与服务器建立连接并发送
请求，以获取服务响应。

在编程中，Socket 可以使用各种编程语言和网络库进行实现。常见的 Socket
类型有 TCP Socket 和 UDP Socket。


在局域网中 *多* 台计算机可能共享同一个公网IP地址，这是通过网络地址转换
技术（NAT）实现的。NAT技术允许多台计算机共享同一个公网IP地址，从而节省
了有限的IPv4地址资源。当使用NAT技术时， *路由器* 会在转发数据包时修改
数据包中的源IP地址和源端口号，以便外部网络可以正确地将响应数据发送回路
由器。

当路由器接收到来自外部网络的响应数据时，它会根据之前保存的NAT映射表，
将数据包中的目的IP地址和目的端口号修改为内部网络中计算机的IP地址和端口
号，然后将数据包 *转发* 给内部网络中的计算机。因此，在使用NAT技术时，
外部网络无法直接根据IP地址和端口号确定数据来自或发送给内部网络中的哪台
计算机。只有路由器才能根据NAT映射表确定数据来自或发送给内部网络中的哪
台计算机

** Socket 客户端和服务器

当然可以，以下是一个简单的 Java Socket 客户端和服务器端通信的例子：

Server.java:

#+BEGIN_SRC java
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
    public static void main(String[] args) throws IOException {
        int port = 12345;
        ServerSocket serverSocket = new ServerSocket(port);
        System.out.println("Server started on port " + port);

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("New client connected: " + socket.getInetAddress().getHostAddress());

            ClientHandler clientHandler = new ClientHandler(socket);
            clientHandler.start();
        }
    }
}
#+END_SRC
ClientHandler.java:
#+BEGIN_SRC java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ClientHandler extends Thread {
    private final Socket socket;
    private BufferedReader input;
    private PrintWriter output;

    public ClientHandler(Socket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        try {
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new PrintWriter(socket.getOutputStream(), true);

            String message;
            while ((message = input.readLine()) != null) {
                System.out.println("Received message from client: " + message);
                output.println("Echo: " + message);
            }
        } catch (IOException e) {
            System.err.println("Error handling client: " + e.getMessage());
        } finally {
            try {
                socket.close();
            } catch (IOException e) {
                System.err.println("Error closing socket: " + e.getMessage());
            }
        }
    }
}
#+END_SRC

Client.java:

#+BEGIN_SRC java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {
    public static void main(String[] args) throws IOException {
        String host = "localhost";
        int port = 12345;

        Socket socket = new Socket(host, port);
        System.out.println("Connected to server on " + host + ":" + port);

        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader serverInput = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);

        String message;
        while ((message = input.readLine()) != null) {
            output.println(message);
            System.out.println("Received from server: " + serverInput.readLine());
        }

        socket.close();
    }
}
#+END_SRC

这个例子中，服务器程序在端口 12345 上监听客户端连接请求。每当有一个新
的客户端连接时，它会启动一个新的线程来处理该客户端的请求。客户端程序通
过 IP 地址和端口号连接到服务器，并输入要发送的消息。在服务器程序中，新
的线程接收到客户端发送的消息并将其打印到控制台上，然后将其作为回显发送
给客户端。

** socket 流

~sock.getInputStream();~ 就能够得到一个 input 流, 这是用来从服务器处读
取数据用的. 然后又, ~sock.getOutputStream()~ 能够到的一个 output 流,
用来向 socket 里面写数据的.

我们常用 BufferedReader 来封装这个 input, 使用 PrintWriter 来封装这个
output 流.


如果服务器与客户端断开连接后重连，它们将无法使用原来的Socket实例进行通
信（如果通信会出现IOException异常）。当服务器与客户端之间的连接被断开
时，它们之间的Socket实例将不再有效，如果客户端想要重新连接到服务器，它
需要创建一个新的Socket实例，并使用这个新的实例与服务器建立连接。对于服
务器，此时它接收到一个新的（重连就视为新的）客户端连接，它的
serverSocket.accept方法将返回一个新的Socket实例，这个Socket实例与原来
的Socket实例是完全独立的，没有任何关联

** Socket 的构造法

~ServerSocket~ 的构造法: 

1. ~public ServerSocket (int port);~
   创建绑定到特定端口的服务器端口.
2. ~public ServerSocket (int port, int backlog);~
   利用指定的 ~backlog~ 创建 socket, 并且绑定到本地的端口号上.
3. ~public ServerSocket (int port, int backlog, InetAddress address);~
   使用指定的端口, 侦听 ~backlog~ 和要绑定到本地 IP 地址创建服务器.
4. ~public ServerSocket();~ 创建非绑定服务器 socket.

~Socket~ 的构造法: 

1. ~public Socket(String hostname, int port);~

2. ~public Socket(String hostname, int port);~

3. \(\dots\)

* Volumn Two
** URLとは？
URL 是互联网上最基本的概念之一，经常被用于在浏览器中打开网页或下载文件。
它由许多组件构成，每个组件都有自己的作用。以下是一些常见的 URL 组件：

1. 协议：指定要使用的通信协议，例如 http、https、ftp 等。

2. 主机名：指定将请求发送到哪个服务器。主机名可以是域名（例如
   www.example.com）或 IP 地址（例如 192.168.0.1）。

3. 端口号：对于某些协议（如 http 和 https），需要指定端口号。默认情况
   下，http 使用端口 80，而 https 使用 443。

4. 路径：指定请求的资源在服务器上的位置。路径以斜杠 “/” 开头，后面跟着
   文件夹和文件名。

5. 查询参数：提供关于请求的附加信息。查询参数通常以问号 “?” 开始，后面
   是一系列键值对，键值对之间用 “&” 分隔。

例如，以下是一个包含所有这些组件的 URL 示例：

https://www.example.com:8080/products/index.html?category=electronics&page=1

在这个 URL 中，协议是 https，主机名是 www.exaqmple.com，端口号是 8080，
路径是 /products/index.html，查询参数是 category=electronics 和 page=1。

** 创建 URL 
在 Java 中，可以使用 ~java.net.URL~ 类来创建 ~URL~ 对象。 ~URL~ 类表示
统一资源定位符，它用于标识互联网上的资源。

以下是一个简单的示例，演示如何创建 URL 对象：

#+BEGIN_SRC java
import java.net.*;

public class Main {
  public static void main(String[] args) throws Exception {
    // 创建 URL 对象
    URL url = new URL("https://www.example.com");

    // 输出 URL 的各个部分
    System.out.println("协议：" + url.getProtocol());
    System.out.println("主机名：" + url.getHost());
    System.out.println("端口号：" + url.getPort());
    System.out.println("路径：" + url.getPath());
    System.out.println("查询字符串：" + url.getQuery());
  }
}
#+END_SRC
在上面的示例中，我们首先导入了 ~java.net.*~ 包，然后创建了一个 ~URL~
对象，其参数为指向资源的地址。接下来，我们可以使用 ~getProtocol()~ 、
~getHost()~ 、 ~getPort()~ 等方法获取 URL 的各个部分，并将其输出到控制
台上。

需要注意的是，在创建 URL 对象时，还需要处理可能会抛出 MalformedURLException 异常，例如：

#+BEGIN_SRC java
try {
  URL url = new URL("https://www.example.com");
} catch (MalformedURLException e) {
  // 处理异常
}
#+END_SRC

** URL 通信和 Socket 通信之间的区别

区别主要在于: 

~Socket~ 的通信方式是在 *服务器端运行通信程序*, 不停地监听客户端的连接
请求. *主动地* 等待客户端的请求服务. 而 URL 进行通信的时候, 是被动的等
待客户端请求.

~Socket~ 通信方式是服务器端可以 *同时和多个客户端* 链接, URL 通信方式
却只能和一个客户进行连接.

利用URL进行通信时，会在服务器端常驻一个CGI程序，但它一直处于休眠状态。
只有在客户端要求建立连接时才被激活，然后与用户进行URL通信。一个线程一
个时间只能与一个客户端进行URL通信，通信结束后它才能再与另一个客户端进
行URL通信（但很少这样做，一般线程直接被释放）。所以，在URL通信中，服务
器是被动等待连接通信的到来，URL通信方式服务器只能同时与一个客户端进行
通信（在一个线程中）

多个客户端用URL与一个网站通信时，服务器通常会为每个客户端创建一个单独
的线程来处理它的请求，通信结束后服务器为该客户端创建的线程会被释放。这
样，服务器就可以同时处理多个客户端的请求，且每个线程都是独立的，它们之
间不会相互干扰

URL常用于爬取网页信息 

URL通信可以用来从服务器获取数据，也可以用来向服务器发送数据。例如，当
在网页上填写表单并提交时，你的浏览器通常会通过URL通信向服务器发送数据


---

当我们在浏览器中输入一个 URL 时，我们实际上是在请求服务器上的资源。URL
(Uniform Resource Locator) 是一种用于定位互联网上资源的标识符，它能够
告诉网络客户端需要连接到哪个服务器，请求哪个资源，并以什么协议进行通信。
因此，URL 主要是用于获取互联网上的资源。

与此相反，Socket 是用于应用程序之间的通信的一种机制。它基于网络协议，
提供了一种面向连接的数据传输方式，使得应用程序能够在网络上双向地传输数
据。例如，当您在一个聊天应用程序中发送一条消息时，这条消息将通过
Socket 发送给服务器或其他用户，而不是通过 URL 请求资源。

总的来说，URL 和 Socket 都是用于在网络上进行通信的技术，但它们解决了不
同层面的问题。URL 主要是用于获取互联网上的资源，而 Socket 则提供了更灵
活的双向、面向连接的数据传输方式。

* Volumn Three: 观察者模式

** 动机

一对多的依赖关系

** 定义

一个 ~Subject~ 类, 以及多个 ~Observer~ 类. 前者维护了一个后者的列表,
每当前者有什么状态变化, 其可以调用一个 ~notify~ 的函数, 使得列表里的
~Observer~ 可以做出响应. 以此将依赖关系抽离了出来.