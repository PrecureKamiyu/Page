<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.1 The Abstraction: A Process</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part35.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part37.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">4.1 The Abstraction: A Process</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The abstraction provided by the OS of a running program is something we will call a <b>process</b>. As we said above, a process is simply a running program; at any instant in time, we can summarize a process by taking an inventory of the different pieces of the system it accesses or affects during the course of its execution.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To understand what constitutes a process, we thus have to understand its <b>machine state</b>: what a program can read or update when it is running. At any given time, what parts of the machine are important to the execu- tion of this program?</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">One obvious component of machine state that comprises a process is its <i>memory</i>. Instructions lie in memory; the data that the running pro- gram reads and writes sits in memory as well. Thus the memory that the process can address (called its <b>address space</b>) is part of the process.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Also part of the process’s machine state are <i>registers</i>; many instructions explicitly read or update registers and thus clearly they are important to the execution of the process.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Note that there are some particularly special registers that form part of this machine state. For example, the <b>program counter </b>(<b>PC</b>) (sometimes called the <b>instruction pointer </b>or <b>IP</b>) tells us which instruction of the pro-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: S<span class="s7">EPARATE </span>P<span class="s7">OLICY </span>A<span class="s7">ND </span>M<span class="s7">ECHANISM</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In many operating systems, a common design paradigm is to separate high-level policies from their low-level mechanisms [L+75]. You can think of the mechanism as providing the answer to a <i>how </i>question about a system; for example, <i>how </i>does an operating system perform a context switch? The policy provides the answer to a <i>which </i>question; for example, <i>which </i>process should the operating system run right now? Separating the two allows one easily to change policies without having to rethink the mechanism and is thus a form of <b>modularity</b>, a general software design principle.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">gram is currently being executed; similarly a <b>stack pointer </b>and associated <b>frame pointer </b>are used to manage the stack for function parameters, local variables, and return addresses.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Finally, programs often access persistent storage devices too. Such <i>I/O information </i>might include a list of the files the process currently has open.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part35.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part37.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
