<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>2.1 Information Storage</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000002AD" class="pcalibre halftitlepage pcalibre1">
<section id="P7000497027000000000000000000457" data-uri="chapter02.xhtml#P7000497027000000000000000000457" class="pcalibre halftitlepage pcalibre1">
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000559" data-uri="chapter02.xhtml#P7000497027000000000000000000559"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E920" data-uri="chapter02.xhtml#P700049702700000000000000003E920" epub:type="title"><span class="pcalibre label1 pcalibre1">Aside </span>Generating an ASCII table</h1></header>
<p id="P700049702700000000000000003E921" data-uri="chapter02.xhtml#P700049702700000000000000003E921" class="pcalibre calibre3 pcalibre1">You can display a table showing the ASCII character code by executing the command <code id="P700049702700000000000000003E922" data-uri="chapter02.xhtml#P700049702700000000000000003E922" class="pcalibre1 calibre8 pcalibre">man ascii.</code></p>
</aside>
<section id="P700049702700000000000000000055D" data-uri="chapter02.xhtml#P700049702700000000000000000055D" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E923" data-uri="chapter02.xhtml#P700049702700000000000000003E923" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.5</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001823">144</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E924" data-uri="chapter02.xhtml#P700049702700000000000000003E924">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E925" data-uri="chapter02.xhtml#P700049702700000000000000003E925">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E926" data-uri="chapter02.xhtml#P700049702700000000000000003E926"><p id="P700049702700000000000000003E927" data-uri="chapter02.xhtml#P700049702700000000000000003E927" class="pcalibre calibre3 pcalibre1">Consider the following three calls to <code id="P700049702700000000000000003E928" data-uri="chapter02.xhtml#P700049702700000000000000003E928" class="pcalibre1 calibre8 pcalibre">show_bytes</code>:</p>
<pre id="P700049702700000000000000003E929" data-uri="chapter02.xhtml#P700049702700000000000000003E929" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E92A" data-uri="chapter02.xhtml#P700049702700000000000000003E92A" class="calibre10 pcalibre pcalibre1">
int val = 0x87654321;
byte_pointer valp = (byte_pointer) &amp;val;
show_bytes(valp, 1); /* A. */
show_bytes(valp, 2); /* B. */
show_bytes(valp, 3); /* C. */
</code></pre>
<p id="P700049702700000000000000003E92B" data-uri="chapter02.xhtml#P700049702700000000000000003E92B" class="pcalibre calibre3 pcalibre1">Indicate the values that will be printed by each call on a little-endian machine and on a big-endian machine:</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E92C" data-uri="chapter02.xhtml#P700049702700000000000000003E92C">
<li id="P7000497027000000000000000000568" data-uri="chapter02.xhtml#P7000497027000000000000000000568" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E92D" data-uri="chapter02.xhtml#P700049702700000000000000003E92D" class="pcalibre calibre3 pcalibre1">Little endian:<span class="wol pcalibre pcalibre1">              </span>	Big endian:<span class="wol pcalibre pcalibre1">              </span></p></li>
<li id="P700049702700000000000000000056A" data-uri="chapter02.xhtml#P700049702700000000000000000056A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E92E" data-uri="chapter02.xhtml#P700049702700000000000000003E92E" class="pcalibre calibre3 pcalibre1">Little endian:<span class="wol pcalibre pcalibre1">              </span>	Big endian:<span class="wol pcalibre pcalibre1">              </span></p></li>
<li id="P700049702700000000000000000056C" data-uri="chapter02.xhtml#P700049702700000000000000000056C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E92F" data-uri="chapter02.xhtml#P700049702700000000000000003E92F" class="pcalibre calibre3 pcalibre1">Little endian:<span class="wol pcalibre pcalibre1">              </span>	Big endian:<span class="wol pcalibre pcalibre1">              </span></p></li>
</ol></div></li></ol>
</section>
<section id="P700049702700000000000000000056E" data-uri="chapter02.xhtml#P700049702700000000000000000056E" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E930" data-uri="chapter02.xhtml#P700049702700000000000000003E930" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000570" title="49" data-uri="chapter02.xhtml#P7000497027000000000000000000570" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.6</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001893">145</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E931" data-uri="chapter02.xhtml#P700049702700000000000000003E931">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E932" data-uri="chapter02.xhtml#P700049702700000000000000003E932">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E933" data-uri="chapter02.xhtml#P700049702700000000000000003E933"><p id="P700049702700000000000000003E934" data-uri="chapter02.xhtml#P700049702700000000000000003E934" class="pcalibre calibre3 pcalibre1">Using <code id="P700049702700000000000000003E935" data-uri="chapter02.xhtml#P700049702700000000000000003E935" class="pcalibre1 calibre8 pcalibre">show_int</code> and <code id="P700049702700000000000000003E936" data-uri="chapter02.xhtml#P700049702700000000000000003E936" class="pcalibre1 calibre8 pcalibre">show_float</code>, we determine that the integer 3510593 has hexadecimal representation <code id="P700049702700000000000000003E937" data-uri="chapter02.xhtml#P700049702700000000000000003E937" class="pcalibre1 calibre8 pcalibre">0x00359141</code>, while the floating-point number 3510593.0 has hexadecimal representation <code id="P700049702700000000000000003E938" data-uri="chapter02.xhtml#P700049702700000000000000003E938" class="pcalibre1 calibre8 pcalibre">0x4A564504.</code></p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E939" data-uri="chapter02.xhtml#P700049702700000000000000003E939">
<li id="P700049702700000000000000000057A" data-uri="chapter02.xhtml#P700049702700000000000000000057A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E93A" data-uri="chapter02.xhtml#P700049702700000000000000003E93A" class="pcalibre calibre3 pcalibre1">Write the binary representations of these two hexadecimal values.</p></li>
<li id="P700049702700000000000000000057C" data-uri="chapter02.xhtml#P700049702700000000000000000057C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E93B" data-uri="chapter02.xhtml#P700049702700000000000000003E93B" class="pcalibre calibre3 pcalibre1">Shift these two strings relative to one another to maximize the number of matching bits. How many bits match?</p></li>
<li id="P700049702700000000000000000057E" data-uri="chapter02.xhtml#P700049702700000000000000000057E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E93C" data-uri="chapter02.xhtml#P700049702700000000000000003E93C" class="pcalibre calibre3 pcalibre1">What parts of the strings do not match?</p></li></ol></div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000000580" data-uri="chapter02.xhtml#P7000497027000000000000000000580" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E93D" data-uri="chapter02.xhtml#P700049702700000000000000003E93D" epub:type="title"><span class="pcalibre label pcalibre1">2.1.4 </span>Representing Strings</h1></header>
<p id="P700049702700000000000000003E93E" data-uri="chapter02.xhtml#P700049702700000000000000003E93E" class="pcalibre1 pcalibre calibre2">A string in C is encoded by an array of characters terminated by the null (having value 0) character. Each character is represented by some standard encoding, with the most common being the ASCII character code. Thus, if we run our routine <code id="P700049702700000000000000003E93F" data-uri="chapter02.xhtml#P700049702700000000000000003E93F" class="pcalibre1 calibre8 pcalibre">show_bytes</code> with arguments <code id="P700049702700000000000000003E940" data-uri="chapter02.xhtml#P700049702700000000000000003E940" class="pcalibre1 calibre8 pcalibre">“12345”</code> and <code id="P700049702700000000000000003E941" data-uri="chapter02.xhtml#P700049702700000000000000003E941" class="pcalibre1 calibre8 pcalibre">6</code> (to include the terminating character), we get the result <code id="P700049702700000000000000003E942" data-uri="chapter02.xhtml#P700049702700000000000000003E942" class="pcalibre1 calibre8 pcalibre">31 32 33 34 35 00</code>. Observe that the ASCII code for decimal digit <var class="calibre5 pcalibre pcalibre1">x</var> happens to be <code id="P700049702700000000000000003E943" data-uri="chapter02.xhtml#P700049702700000000000000003E943" class="pcalibre1 calibre8 pcalibre">0x3<var class="calibre5 pcalibre pcalibre1">x</var></code>, and that the terminating byte has the hex representation <code id="P700049702700000000000000003E944" data-uri="chapter02.xhtml#P700049702700000000000000003E944" class="pcalibre1 calibre8 pcalibre">0x00</code>. This same result would be obtained on any system using ASCII as its character code, independent of the byte ordering and word size conventions. As a consequence, text data are more platform independent than binary data.</p>
<section id="P7000497027000000000000000000589" data-uri="chapter02.xhtml#P7000497027000000000000000000589" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E945" data-uri="chapter02.xhtml#P700049702700000000000000003E945" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.7</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001893">145</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E946" data-uri="chapter02.xhtml#P700049702700000000000000003E946">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E947" data-uri="chapter02.xhtml#P700049702700000000000000003E947">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E948" data-uri="chapter02.xhtml#P700049702700000000000000003E948"><p id="P700049702700000000000000003E949" data-uri="chapter02.xhtml#P700049702700000000000000003E949" class="pcalibre calibre3 pcalibre1">What would be printed as a result of the following call to <code id="P700049702700000000000000003E94A" data-uri="chapter02.xhtml#P700049702700000000000000003E94A" class="pcalibre1 calibre8 pcalibre">show_bytes?</code></p>
<pre id="P700049702700000000000000003E94B" data-uri="chapter02.xhtml#P700049702700000000000000003E94B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E94C" data-uri="chapter02.xhtml#P700049702700000000000000003E94C" class="calibre10 pcalibre pcalibre1">
const char *s = “abcdef”;
show_bytes((byte_pointer) s, strlen(s));
</code></pre>
<p id="P700049702700000000000000003E94D" data-uri="chapter02.xhtml#P700049702700000000000000003E94D" class="pcalibre calibre3 pcalibre1">Note that letters <code id="P700049702700000000000000003E94E" data-uri="chapter02.xhtml#P700049702700000000000000003E94E" class="pcalibre1 calibre8 pcalibre">‘a'</code> through <code id="P700049702700000000000000003E94F" data-uri="chapter02.xhtml#P700049702700000000000000003E94F" class="pcalibre1 calibre8 pcalibre">‘z'</code> have ASCII codes <code id="P700049702700000000000000003E950" data-uri="chapter02.xhtml#P700049702700000000000000003E950" class="pcalibre1 calibre8 pcalibre">0x61</code> through <code id="P700049702700000000000000003E951" data-uri="chapter02.xhtml#P700049702700000000000000003E951" class="pcalibre1 calibre8 pcalibre">0x7A</code>.</p></div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000000597" data-uri="chapter02.xhtml#P7000497027000000000000000000597" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E952" data-uri="chapter02.xhtml#P700049702700000000000000003E952" epub:type="title"><span class="pcalibre label pcalibre1">2.1.5 </span>Representing Code</h1></header>
<p id="P700049702700000000000000003E953" data-uri="chapter02.xhtml#P700049702700000000000000003E953" class="pcalibre1 pcalibre calibre2">Consider the following C function:</p>
<pre id="P700049702700000000000000003E954" data-uri="chapter02.xhtml#P700049702700000000000000003E954" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E955" data-uri="chapter02.xhtml#P700049702700000000000000003E955" class="calibre10 pcalibre pcalibre1">
1  int sum(int x, int y) {
2      return x + y;
3  }
</code></pre>
<p id="P700049702700000000000000003E956" data-uri="chapter02.xhtml#P700049702700000000000000003E956" class="pcalibre1 pcalibre calibre2">When compiled on our sample machines, we generate machine code having the following byte representations:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E957" data-uri="chapter02.xhtml#P700049702700000000000000003E957">
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E958" data-uri="chapter02.xhtml#P700049702700000000000000003E958" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Linux 32</b></td>
<td id="P700049702700000000000000003E959" data-uri="chapter02.xhtml#P700049702700000000000000003E959" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E95A" data-uri="chapter02.xhtml#P700049702700000000000000003E95A" class="calibre10 pcalibre pcalibre1">55 89 e5 8b 45 0c 03 45 08 c9 c3</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E95B" data-uri="chapter02.xhtml#P700049702700000000000000003E95B" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Windows</b></td>
<td id="P700049702700000000000000003E95C" data-uri="chapter02.xhtml#P700049702700000000000000003E95C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E95D" data-uri="chapter02.xhtml#P700049702700000000000000003E95D" class="calibre10 pcalibre pcalibre1">55 89 e5 8b 45 0c 03 45 08 5d c3</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E95E" data-uri="chapter02.xhtml#P700049702700000000000000003E95E" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Sun</b></td>
<td id="P700049702700000000000000003E95F" data-uri="chapter02.xhtml#P700049702700000000000000003E95F" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E960" data-uri="chapter02.xhtml#P700049702700000000000000003E960" class="calibre10 pcalibre pcalibre1">81 c3 e0 08 90 02 00 09</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E961" data-uri="chapter02.xhtml#P700049702700000000000000003E961" class="calibre20 pcalibre pcalibre1"><b class="calibre4 pcalibre pcalibre1">Linux 64</b></td>
<td id="P700049702700000000000000003E962" data-uri="chapter02.xhtml#P700049702700000000000000003E962" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E963" data-uri="chapter02.xhtml#P700049702700000000000000003E963" class="calibre10 pcalibre pcalibre1">55 48 89 e5 89 7d fc 89 75 f8 03 45 fc c9 c3</code></td>
</tr>
</tbody>
</table>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000005AA" data-uri="chapter02.xhtml#P70004970270000000000000000005AA"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E964" data-uri="chapter02.xhtml#P700049702700000000000000003E964" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000005AC" title="50" data-uri="chapter02.xhtml#P70004970270000000000000000005AC" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>The Unicode standard for text encoding</h1></header>
<p id="P700049702700000000000000003E965" data-uri="chapter02.xhtml#P700049702700000000000000003E965" class="calibre13 pcalibre pcalibre1">The ASCII character set is suitable for encoding English-language documents, but it does not have much in the way of special characters, such as the French ‘ç'. It is wholly unsuited for encoding documents in languages such as Greek, Russian, and Chinese. Over the years, a variety of methods have been developed to encode text for different languages. The Unicode Consortium has devised the most comprehensive and widely accepted standard for encoding text. The current Unicode standard (version 7.0) has a repertoire of over 100,000 characters supporting a wide range of languages, including the ancient languages of Egypt and Babylon. To their credit, the Unicode Technical Committee rejected a proposal to include a standard writing for Klingon, a fictional civilization from the television series <i class="calibre5 pcalibre pcalibre1">Star Trek.</i></p>
<p id="P700049702700000000000000003E966" data-uri="chapter02.xhtml#P700049702700000000000000003E966" class="calibre13 pcalibre pcalibre1">The base encoding, known as the “Universal Character Set” of Unicode, uses a 32-bit representation of characters. This would seem to require every string of text to consist of 4 bytes per character. However, alternative codings are possible where common characters require just 1 or 2 bytes, while less common ones require more. In particular, the UTF-8 representation encodes each character as a sequence of bytes, such that the standard ASCII characters use the same single-byte encodings as they have in ASCII, implying that all ASCII byte sequences have the same meaning in UTF-8 as they do in ASCII.</p>
<p id="P700049702700000000000000003E967" data-uri="chapter02.xhtml#P700049702700000000000000003E967" class="pcalibre calibre3 pcalibre1">The Java programming language uses Unicode in its representations of strings. Program libraries are also available for C to support Unicode.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E968" data-uri="chapter02.xhtml#P700049702700000000000000003E968">Here we find that the instruction codings are different. Different machine types use different and incompatible instructions and encodings. Even identical processors running different operating systems have differences in their coding conventions and hence are not binary compatible. Binary code is seldom portable across different combinations of machine and operating system.</p>
<p id="P700049702700000000000000003E969" data-uri="chapter02.xhtml#P700049702700000000000000003E969" class="pcalibre1 pcalibre calibre2">A fundamental concept of computer systems is that a program, from the perspective of the machine, is simply a sequence of bytes. The machine has no information about the original source program, except perhaps some auxiliary tables maintained to aid in debugging. We will see this more clearly when we study machine-level programming in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>.</p>
</section>
<section id="P70004970270000000000000000005B2" data-uri="chapter02.xhtml#P70004970270000000000000000005B2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E96A" data-uri="chapter02.xhtml#P700049702700000000000000003E96A" epub:type="title"><span class="pcalibre label pcalibre1">2.1.6 </span>Introduction to Boolean Algebra</h1></header>
<p id="P700049702700000000000000003E96B" data-uri="chapter02.xhtml#P700049702700000000000000003E96B" class="pcalibre1 pcalibre calibre2">Since binary values are at the core of how computers encode, store, and manipulate information, a rich body of mathematical knowledge has evolved around the study of the values 0 and 1. This started with the work of George Boole (1815–1864) around 1850 and thus is known as <i class="calibre5 pcalibre pcalibre1">Boolean algebra</i>. Boole observed that by encoding logic values <span class="smallcaps pcalibre pcalibre1">true </span>and <span class="smallcaps pcalibre pcalibre1">false </span>as binary values 1 and 0, he could formulate an algebra that captures the basic principles of logical reasoning.</p>
<p id="P700049702700000000000000003E96C" data-uri="chapter02.xhtml#P700049702700000000000000003E96C" class="pcalibre1 pcalibre calibre2">The simplest Boolean algebra is defined over the two-element set {0, 1}. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_001.xhtml#P70004970270000000000000000005B6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.7</span></a> defines several operations in this algebra. Our symbols for representing these operations are chosen to match those used by the C bit-level operations,</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000005B6" data-uri="chapter02.xhtml#P70004970270000000000000000005B6">
<img alt="" id="P700049702700000000000000003E96D" data-uri="P700049702700000000000000000B70F" src="../images/p51-1.png" class="calibre57 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000003E96E" data-uri="chapter02.xhtml#P700049702700000000000000003E96E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E96F" data-uri="chapter02.xhtml#P700049702700000000000000003E96F" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000005BA" title="51" data-uri="chapter02.xhtml#P70004970270000000000000000005BA" epub:type="pagebreak"></span><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2.7 </span>Operations of Boolean algebra.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E970" data-uri="chapter02.xhtml#P700049702700000000000000003E970"><p id="P700049702700000000000000003E971" data-uri="chapter02.xhtml#P700049702700000000000000003E971" class="pcalibre calibre3 pcalibre1">Binary values 1 and 0 encode logic values <span class="smallcaps pcalibre pcalibre1">true </span>and <span class="smallcaps pcalibre pcalibre1">false</span>, while operations ~, &amp;, |, and ^ encode logical operations <span class="smallcaps pcalibre pcalibre1">not</span>, <span class="smallcaps pcalibre pcalibre1">and</span>, <span class="smallcaps pcalibre pcalibre1">or</span>, and <span class="smallcaps pcalibre pcalibre1">exclusive</span>-<span class="smallcaps1 pcalibre pcalibre1">or</span>, respectively.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E972" data-uri="chapter02.xhtml#P700049702700000000000000003E972">as will be discussed later. The Boolean operation ~ corresponds to the logical operation <span class="smallcaps pcalibre pcalibre1">not</span>, denoted by the symbol ¬. That is, we say that ¬<var class="calibre5 pcalibre pcalibre1">P</var> is true when <var class="calibre5 pcalibre pcalibre1">P</var> is not true, and vice versa. Correspondingly, ~<var class="calibre5 pcalibre pcalibre1">p</var> equals 1 when <var class="calibre5 pcalibre pcalibre1">p</var> equals 0, and vice versa. Boolean operation <code id="P700049702700000000000000003E973" data-uri="chapter02.xhtml#P700049702700000000000000003E973" class="pcalibre1 calibre8 pcalibre">&amp;</code> corresponds to the logical operation <span class="smallcaps pcalibre pcalibre1">and</span>, denoted by the symbol ∧. We say that <var class="calibre5 pcalibre pcalibre1">P</var> ∧ <var class="calibre5 pcalibre pcalibre1">Q</var> holds when both <var class="calibre5 pcalibre pcalibre1">P</var> is true and <var class="calibre5 pcalibre pcalibre1">Q</var> is true. Correspondingly, <var class="calibre5 pcalibre pcalibre1">p</var> <code id="P700049702700000000000000003E974" data-uri="chapter02.xhtml#P700049702700000000000000003E974" class="pcalibre1 calibre8 pcalibre">&amp;</code> <var class="calibre5 pcalibre pcalibre1">q</var> equals 1 only when <var class="calibre5 pcalibre pcalibre1">p</var> = 1 and <var class="calibre5 pcalibre pcalibre1">q</var> = 1. Boolean operation | corresponds to the logical operation <span class="smallcaps pcalibre pcalibre1">or</span>, denoted by the symbol ∨. We say that <var class="calibre5 pcalibre pcalibre1">P</var> ∨ <var class="calibre5 pcalibre pcalibre1">Q</var> holds when either <var class="calibre5 pcalibre pcalibre1">P</var> is true or <var class="calibre5 pcalibre pcalibre1">Q</var> is true. Correspondingly, <var class="calibre5 pcalibre pcalibre1">p</var> | <var class="calibre5 pcalibre pcalibre1">q</var> equals 1 when either <var class="calibre5 pcalibre pcalibre1">p</var> = 1 or <var class="calibre5 pcalibre pcalibre1">q</var> = 1. Boolean operation ^ corresponds to the logical operation <span class="smallcaps pcalibre pcalibre1">exclusive</span>-<span class="smallcaps pcalibre pcalibre1">or</span>, denoted by the symbol ⊕. We say that <var class="calibre5 pcalibre pcalibre1">P</var> ⊕ <var class="calibre5 pcalibre pcalibre1">Q</var> holds when either <var class="calibre5 pcalibre pcalibre1">P</var> is true or <var class="calibre5 pcalibre pcalibre1">Q</var> is true, but not both. Correspondingly, <var class="calibre5 pcalibre pcalibre1">p</var> ^ <var class="calibre5 pcalibre pcalibre1">q</var> equals 1 when either <var class="calibre5 pcalibre pcalibre1">p</var> = 1 and <var class="calibre5 pcalibre pcalibre1">q</var> = 0, or <var class="calibre5 pcalibre pcalibre1">p</var> = 0 and <var class="calibre5 pcalibre pcalibre1">q</var> = 1.</p>
<p id="P700049702700000000000000003E975" data-uri="chapter02.xhtml#P700049702700000000000000003E975" class="pcalibre1 pcalibre calibre2">Claude Shannon (1916–2001), who later founded the field of information theory, first made the connection between Boolean algebra and digital logic. In his 1937 master's thesis, he showed that Boolean algebra could be applied to the design and analysis of networks of electromechanical relays. Although computer technology has advanced considerably since, Boolean algebra still plays a central role in the design and analysis of digital systems.</p>
<p id="P700049702700000000000000003E976" data-uri="chapter02.xhtml#P700049702700000000000000003E976" class="pcalibre1 pcalibre calibre2">We can extend the four Boolean operations to also operate on <i class="calibre5 pcalibre pcalibre1">bit vectors</i>, strings of zeros and ones of some fixed length <var class="calibre5 pcalibre pcalibre1">w</var>. We define the operations over bit vectors according to their applications to the matching elements of the arguments. Let <var class="calibre5 pcalibre pcalibre1">a</var> and <var class="calibre5 pcalibre pcalibre1">b</var> denote the bit vectors <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="180" altimg-height="21" altimg="../images/ch02-new04.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>a</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>a</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>a</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math> </span>and <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="180" altimg-height="21" altimg="../images/ch02-new05.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>b</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>b</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>b</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, respectively. We define <var class="calibre5 pcalibre pcalibre1">a</var> &amp; <var class="calibre5 pcalibre pcalibre1">b</var> to also be a bit vector of length <var class="calibre5 pcalibre pcalibre1">w</var>, where the <var class="calibre5 pcalibre pcalibre1">i</var>th element equals <i class="calibre5 pcalibre pcalibre1">a<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> &amp; <i class="calibre5 pcalibre pcalibre1">b<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>, for 0 ≤ <var class="calibre5 pcalibre pcalibre1">i</var> &lt; <i class="calibre5 pcalibre pcalibre1">w.</i> The operations |, ^, and ~ are extended to bit vectors in a similar fashion.</p>
<p id="P700049702700000000000000003E977" data-uri="chapter02.xhtml#P700049702700000000000000003E977" class="pcalibre1 pcalibre calibre2">As examples, consider the case where <var class="calibre5 pcalibre pcalibre1">w</var> = 4, and with arguments <var class="calibre5 pcalibre pcalibre1">a</var> = [0110] and <var class="calibre5 pcalibre pcalibre1">b</var> = [1100]. Then the four operations <i class="calibre5 pcalibre pcalibre1">a &amp; b, a</i> | <i class="calibre5 pcalibre pcalibre1">b, a</i> ^ <var class="calibre5 pcalibre pcalibre1">b</var>, and ~<var class="calibre5 pcalibre pcalibre1">b</var> yield</p>
<div class="informalequation pcalibre pcalibre1" id="P700049702700000000000000003E978" data-uri="chapter02.xhtml#P700049702700000000000000003E978"><m:math display="block" alttext="" data-uri="" altimg-width="470" altimg-height="72" altimg="../images/ch02-eq2.png"><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mtable columnalign="left"><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>0110</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mo>&amp;</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>1100</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mover accent="true"><m:mrow><m:mn>0100</m:mn></m:mrow><m:mo stretchy="true">¯</m:mo></m:mover></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:mtd><m:mtd><m:mrow><m:mtable columnalign="left"><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>0110</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mo>|</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>1100</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mover accent="true"><m:mrow><m:mn>1110</m:mn></m:mrow><m:mo stretchy="true">¯</m:mo></m:mover></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:mtd><m:mtd><m:mrow><m:mtable columnalign="left"><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>0110</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mo>^</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>1100</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mover accent="true"><m:mrow><m:mn>1010</m:mn></m:mrow><m:mo stretchy="true">¯</m:mo></m:mover></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:mtd><m:mtd><m:mrow><m:mtable columnalign="left"><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow/></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mo>~</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mn>1100</m:mn></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mrow><m:mover accent="true"><m:mrow><m:mn>0011</m:mn></m:mrow><m:mo stretchy="true">¯</m:mo></m:mover></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math></div>
<section id="P70004970270000000000000000005C4" data-uri="chapter02.xhtml#P70004970270000000000000000005C4" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E979" data-uri="chapter02.xhtml#P700049702700000000000000003E979" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.8</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001893">145</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E97A" data-uri="chapter02.xhtml#P700049702700000000000000003E97A">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E97B" data-uri="chapter02.xhtml#P700049702700000000000000003E97B">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E97C" data-uri="chapter02.xhtml#P700049702700000000000000003E97C"><p id="P700049702700000000000000003E97D" data-uri="chapter02.xhtml#P700049702700000000000000003E97D" class="pcalibre calibre3 pcalibre1">Fill in the following table showing the results of evaluating Boolean operations on bit vectors.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000005CA" data-uri="chapter02.xhtml#P70004970270000000000000000005CA"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E97E" data-uri="chapter02.xhtml#P700049702700000000000000003E97E" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000005CC" title="52" data-uri="chapter02.xhtml#P70004970270000000000000000005CC" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Web Aside DATA:BOOL </span>More on Boolean algebra and Boolean rings</h1></header>
<p id="P700049702700000000000000003E97F" data-uri="chapter02.xhtml#P700049702700000000000000003E97F" class="pcalibre calibre3 pcalibre1">The Boolean operations <code id="P700049702700000000000000003E980" data-uri="chapter02.xhtml#P700049702700000000000000003E980" class="pcalibre1 calibre8 pcalibre">|, &amp;, and ~</code> operating on bit vectors of length <var class="calibre5 pcalibre pcalibre1">w</var> form a <i class="calibre5 pcalibre pcalibre1">Boolean algebra</i>, for any integer <var class="calibre5 pcalibre pcalibre1">w</var> &gt; 0. The simplest is the case where <var class="calibre5 pcalibre pcalibre1">w</var> = 1 and there are just two elements, but for the more general case there are 2<i class="calibre5 pcalibre pcalibre1"><sup class="calibre51 pcalibre pcalibre1">w</sup></i> bit vectors of length <i class="calibre5 pcalibre pcalibre1">w.</i> Boolean algebra has many of the same properties as arithmetic over integers. For example, just as multiplication distributes over addition, written <var class="calibre5 pcalibre pcalibre1">a</var> · (<var class="calibre5 pcalibre pcalibre1">b</var> + <var class="calibre5 pcalibre pcalibre1">c</var>) = (<var class="calibre5 pcalibre pcalibre1">a</var> · <var class="calibre5 pcalibre pcalibre1">b</var>) + (<var class="calibre5 pcalibre pcalibre1">a</var> · <var class="calibre5 pcalibre pcalibre1">c</var>), Boolean operation &amp; distributes over |, written <var class="calibre5 pcalibre pcalibre1">a</var> &amp; (<var class="calibre5 pcalibre pcalibre1">b</var> | <var class="calibre5 pcalibre pcalibre1">c</var>) = (<var class="calibre5 pcalibre pcalibre1">a</var> &amp; <var class="calibre5 pcalibre pcalibre1">b</var>) | (<var class="calibre5 pcalibre pcalibre1">a</var> &amp; <var class="calibre5 pcalibre pcalibre1">c</var>). In addition, however. Boolean operation | distributes over &amp;, and so we can write <var class="calibre5 pcalibre pcalibre1">a</var> | (<var class="calibre5 pcalibre pcalibre1">b</var> &amp; <var class="calibre5 pcalibre pcalibre1">c</var>) = (<var class="calibre5 pcalibre pcalibre1">a</var> | <var class="calibre5 pcalibre pcalibre1">b</var>) &amp; (<var class="calibre5 pcalibre pcalibre1">a</var> | <var class="calibre5 pcalibre pcalibre1">c</var>), whereas we cannot say that <var class="calibre5 pcalibre pcalibre1">a</var> + (<var class="calibre5 pcalibre pcalibre1">b</var> · <var class="calibre5 pcalibre pcalibre1">c</var>) = (<var class="calibre5 pcalibre pcalibre1">a</var> + <var class="calibre5 pcalibre pcalibre1">b</var>) · (<var class="calibre5 pcalibre pcalibre1">a</var> + <var class="calibre5 pcalibre pcalibre1">c</var>) holds for all integers.</p>
<p id="P700049702700000000000000003E981" data-uri="chapter02.xhtml#P700049702700000000000000003E981" class="pcalibre calibre3 pcalibre1">When we consider operations ^, &amp;, and ~ operating on bit vectors of length <var class="calibre5 pcalibre pcalibre1">w</var>, we get a different mathematical form, known as a <i class="calibre5 pcalibre pcalibre1">Boolean ring.</i> Boolean rings have many properties in common with integer arithmetic. For example, one property of integer arithmetic is that every value <var class="calibre5 pcalibre pcalibre1">x</var> has an <i class="calibre5 pcalibre pcalibre1">additive inverse –x</i>, such that <var class="calibre5 pcalibre pcalibre1">x</var> + –<var class="calibre5 pcalibre pcalibre1">x</var> = 0. A similar property holds for Boolean rings, where ^ is the “addition” operation, but in this case each element is its own additive inverse. That is, <var class="calibre5 pcalibre pcalibre1">a</var> ^ <var class="calibre5 pcalibre pcalibre1">a</var> = 0 for any value <var class="calibre5 pcalibre pcalibre1">a</var>, where we use 0 here to represent a bit vector of all zeros. We can see this holds for single bits, since 0 ^ 0 = 1 ^ 1 = 0, and it extends to bit vectors as well. This property holds even when we rearrange terms and combine them in a different order, and so (<var class="calibre5 pcalibre pcalibre1">a</var> ^ <var class="calibre5 pcalibre pcalibre1">b</var>) ^ <var class="calibre5 pcalibre pcalibre1">a</var> = <i class="calibre5 pcalibre pcalibre1">b.</i> This property leads to some interesting results and clever tricks, as we will explore in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018DB"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">2.10</span></a>.</p>
</aside>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E982" data-uri="chapter02.xhtml#P700049702700000000000000003E982">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E983" data-uri="chapter02.xhtml#P700049702700000000000000003E983" class="calibre18 pcalibre pcalibre1">Operation</th>
<th id="P700049702700000000000000003E984" data-uri="chapter02.xhtml#P700049702700000000000000003E984" class="calibre18 pcalibre pcalibre1">Result</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E985" data-uri="chapter02.xhtml#P700049702700000000000000003E985" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">a</var></td>
<td id="P700049702700000000000000003E986" data-uri="chapter02.xhtml#P700049702700000000000000003E986" class="calibre20 pcalibre pcalibre1">[01101001]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E987" data-uri="chapter02.xhtml#P700049702700000000000000003E987" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">b</var></td>
<td id="P700049702700000000000000003E988" data-uri="chapter02.xhtml#P700049702700000000000000003E988" class="calibre20 pcalibre pcalibre1">[01010101]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E989" data-uri="chapter02.xhtml#P700049702700000000000000003E989" class="calibre20 pcalibre pcalibre1">~<var class="calibre5 pcalibre pcalibre1">a</var></td>
<td id="P700049702700000000000000003E98A" data-uri="chapter02.xhtml#P700049702700000000000000003E98A" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E98B" data-uri="chapter02.xhtml#P700049702700000000000000003E98B" class="calibre20 pcalibre pcalibre1">~<var class="calibre5 pcalibre pcalibre1">b</var></td>
<td id="P700049702700000000000000003E98C" data-uri="chapter02.xhtml#P700049702700000000000000003E98C" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E98D" data-uri="chapter02.xhtml#P700049702700000000000000003E98D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">a</var> &amp; <var class="calibre5 pcalibre pcalibre1">b</var></td>
<td id="P700049702700000000000000003E98E" data-uri="chapter02.xhtml#P700049702700000000000000003E98E" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E98F" data-uri="chapter02.xhtml#P700049702700000000000000003E98F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">a</var> | <var class="calibre5 pcalibre pcalibre1">b</var></td>
<td id="P700049702700000000000000003E990" data-uri="chapter02.xhtml#P700049702700000000000000003E990" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E991" data-uri="chapter02.xhtml#P700049702700000000000000003E991" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">a</var> ^ <var class="calibre5 pcalibre pcalibre1">b</var></td>
<td id="P700049702700000000000000003E992" data-uri="chapter02.xhtml#P700049702700000000000000003E992" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<p id="P700049702700000000000000003E993" data-uri="chapter02.xhtml#P700049702700000000000000003E993" class="pcalibre1 pcalibre calibre2">One useful application of bit vectors is to represent finite sets. We can encode any subset <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="187" altimg-height="19" altimg="../images/ch02-new06.png"><m:mrow><m:mi>A</m:mi><m:mo>⊆</m:mo><m:mrow><m:mo>{</m:mo><m:mrow><m:mn>0</m:mn><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>}</m:mo></m:mrow></m:mrow></m:math> </span>with a bit vector <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="153" altimg-height="21" altimg="../images/ch02-new07.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>a</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>a</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:msub><m:mi>a</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, where <i class="calibre5 pcalibre pcalibre1">a<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> = 1 if and only if <var class="calibre5 pcalibre pcalibre1">i</var> ∊ <i class="calibre5 pcalibre pcalibre1">A.</i> For example, recalling that we write <var class="calibre5 pcalibre pcalibre1">a</var><sub class="pcalibre1 calibre47 pcalibre"><var class="calibre5 pcalibre pcalibre1">w</var>–1</sub> on the left and <var class="calibre5 pcalibre pcalibre1">a</var><sub class="pcalibre1 calibre47 pcalibre">0</sub> on the right, bit vector <var class="calibre5 pcalibre pcalibre1">a</var> = [01101001] encodes the set <var class="calibre5 pcalibre pcalibre1">A</var> = {0, 3, 5, 6}, while bit vector <var class="calibre5 pcalibre pcalibre1">b</var> = [01010101] encodes the set <var class="calibre5 pcalibre pcalibre1">B</var> = {0, 2, 4, 6}. With this way of encoding sets, Boolean operations | and &amp; correspond to set union and intersection, respectively, and ~ corresponds to set complement. Continuing our earlier example, the operation <var class="calibre5 pcalibre pcalibre1">a</var> &amp; <var class="calibre5 pcalibre pcalibre1">b</var> yields bit vector [01000001], while <var class="calibre5 pcalibre pcalibre1">A</var> ∩ <var class="calibre5 pcalibre pcalibre1">B</var> = {0, 6}.</p>
<p id="P700049702700000000000000003E994" data-uri="chapter02.xhtml#P700049702700000000000000003E994" class="pcalibre1 pcalibre calibre2">We will see the encoding of sets by bit vectors in a number of practical applications. For example, in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000666E.xhtml#P700049702700000000000000000666E"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">8</span></a>, we will see that there are a number of different <i class="calibre5 pcalibre pcalibre1">signals</i> that can interrupt the execution of a program. We can selectively enable or disable different signals by specifying a bit-vector mask, where a 1 in bit position <var class="calibre5 pcalibre pcalibre1">i</var> indicates that signal <var class="calibre5 pcalibre pcalibre1">i</var> is enabled and a 0 indicates that it is disabled. Thus, the mask represents the set of enabled signals.</p>
<section id="P70004970270000000000000000005E3" data-uri="chapter02.xhtml#P70004970270000000000000000005E3" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E995" data-uri="chapter02.xhtml#P700049702700000000000000003E995" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000005E5" title="53" data-uri="chapter02.xhtml#P70004970270000000000000000005E5" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.9</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018D2">146</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E996" data-uri="chapter02.xhtml#P700049702700000000000000003E996">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E997" data-uri="chapter02.xhtml#P700049702700000000000000003E997">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E998" data-uri="chapter02.xhtml#P700049702700000000000000003E998"><p id="P700049702700000000000000003E999" data-uri="chapter02.xhtml#P700049702700000000000000003E999" class="pcalibre calibre3 pcalibre1">Computers generate color pictures on a video screen or liquid crystal display by mixing three different colors of light: red, green, and blue. Imagine a simple scheme, with three different lights, each of which can be turned on or off, projecting onto a glass screen:</p>
<figure id="P70004970270000000000000000005EA" class="pcalibre5 figure pcalibre" data-uri="chapter02.xhtml#P70004970270000000000000000005EA">
<img alt="A diagram shows an observer on one side of a glass screen with light sources aimed toward them on the other: a green light source aimed directly, a red source aimed from above, and a blue source aimed from below." id="P700049702700000000000000003E99A" data-uri="P700049702700000000000000000B715" src="../images/p53-1.png" class="pcalibre1 calibre58 pcalibre"/>
</figure>
<p id="P700049702700000000000000003E99B" data-uri="chapter02.xhtml#P700049702700000000000000003E99B" class="pcalibre calibre3 pcalibre1">We can then create eight different colors based on the absence (0) or presence (1) of light sources <var class="calibre5 pcalibre pcalibre1">R</var>, <var class="calibre5 pcalibre pcalibre1">G</var>, and <var class="calibre5 pcalibre pcalibre1">B</var>:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E99C" data-uri="chapter02.xhtml#P700049702700000000000000003E99C">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E99D" data-uri="chapter02.xhtml#P700049702700000000000000003E99D" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">R</var></th>
<th id="P700049702700000000000000003E99E" data-uri="chapter02.xhtml#P700049702700000000000000003E99E" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">G</var></th>
<th id="P700049702700000000000000003E99F" data-uri="chapter02.xhtml#P700049702700000000000000003E99F" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">B</var></th>
<th id="P700049702700000000000000003E9A0" data-uri="chapter02.xhtml#P700049702700000000000000003E9A0" class="calibre18 pcalibre pcalibre1">Color</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9A1" data-uri="chapter02.xhtml#P700049702700000000000000003E9A1" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9A2" data-uri="chapter02.xhtml#P700049702700000000000000003E9A2" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9A3" data-uri="chapter02.xhtml#P700049702700000000000000003E9A3" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9A4" data-uri="chapter02.xhtml#P700049702700000000000000003E9A4" class="calibre20 pcalibre pcalibre1">Black</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9A5" data-uri="chapter02.xhtml#P700049702700000000000000003E9A5" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9A6" data-uri="chapter02.xhtml#P700049702700000000000000003E9A6" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9A7" data-uri="chapter02.xhtml#P700049702700000000000000003E9A7" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9A8" data-uri="chapter02.xhtml#P700049702700000000000000003E9A8" class="calibre20 pcalibre pcalibre1">Blue</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9A9" data-uri="chapter02.xhtml#P700049702700000000000000003E9A9" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9AA" data-uri="chapter02.xhtml#P700049702700000000000000003E9AA" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9AB" data-uri="chapter02.xhtml#P700049702700000000000000003E9AB" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9AC" data-uri="chapter02.xhtml#P700049702700000000000000003E9AC" class="calibre20 pcalibre pcalibre1">Green</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9AD" data-uri="chapter02.xhtml#P700049702700000000000000003E9AD" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9AE" data-uri="chapter02.xhtml#P700049702700000000000000003E9AE" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9AF" data-uri="chapter02.xhtml#P700049702700000000000000003E9AF" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9B0" data-uri="chapter02.xhtml#P700049702700000000000000003E9B0" class="calibre20 pcalibre pcalibre1">Cyan</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9B1" data-uri="chapter02.xhtml#P700049702700000000000000003E9B1" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9B2" data-uri="chapter02.xhtml#P700049702700000000000000003E9B2" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9B3" data-uri="chapter02.xhtml#P700049702700000000000000003E9B3" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9B4" data-uri="chapter02.xhtml#P700049702700000000000000003E9B4" class="calibre20 pcalibre pcalibre1">Red</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9B5" data-uri="chapter02.xhtml#P700049702700000000000000003E9B5" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9B6" data-uri="chapter02.xhtml#P700049702700000000000000003E9B6" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9B7" data-uri="chapter02.xhtml#P700049702700000000000000003E9B7" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9B8" data-uri="chapter02.xhtml#P700049702700000000000000003E9B8" class="calibre20 pcalibre pcalibre1">Magenta</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9B9" data-uri="chapter02.xhtml#P700049702700000000000000003E9B9" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9BA" data-uri="chapter02.xhtml#P700049702700000000000000003E9BA" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9BB" data-uri="chapter02.xhtml#P700049702700000000000000003E9BB" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P700049702700000000000000003E9BC" data-uri="chapter02.xhtml#P700049702700000000000000003E9BC" class="calibre20 pcalibre pcalibre1">Yellow</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9BD" data-uri="chapter02.xhtml#P700049702700000000000000003E9BD" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9BE" data-uri="chapter02.xhtml#P700049702700000000000000003E9BE" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9BF" data-uri="chapter02.xhtml#P700049702700000000000000003E9BF" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P700049702700000000000000003E9C0" data-uri="chapter02.xhtml#P700049702700000000000000003E9C0" class="calibre20 pcalibre pcalibre1">White</td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000003E9C1" data-uri="chapter02.xhtml#P700049702700000000000000003E9C1" class="pcalibre calibre3 pcalibre1">Each of these colors can be represented as a bit vector of length 3, and we can apply Boolean operations to them.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E9C2" data-uri="chapter02.xhtml#P700049702700000000000000003E9C2">
<li id="P7000497027000000000000000000614" data-uri="chapter02.xhtml#P7000497027000000000000000000614" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E9C3" data-uri="chapter02.xhtml#P700049702700000000000000003E9C3" class="pcalibre calibre3 pcalibre1">The complement of a color is formed by turning off the lights that are on and turning on the lights that are off. What would be the complement of each of the eight colors listed above?</p></li>
<li id="P7000497027000000000000000000616" data-uri="chapter02.xhtml#P7000497027000000000000000000616" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E9C4" data-uri="chapter02.xhtml#P700049702700000000000000003E9C4" class="pcalibre calibre3 pcalibre1">Describe the effect of applying Boolean operations on the following colors:</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000003E9C5" data-uri="chapter02.xhtml#P700049702700000000000000003E9C5">
<li id="P7000497027000000000000000000619" data-uri="chapter02.xhtml#P7000497027000000000000000000619" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E9C6" data-uri="chapter02.xhtml#P700049702700000000000000003E9C6" class="calibre13 pcalibre pcalibre1">Blue | Green =__________</p></li>
<li id="P700049702700000000000000000061B" data-uri="chapter02.xhtml#P700049702700000000000000000061B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E9C7" data-uri="chapter02.xhtml#P700049702700000000000000003E9C7" class="calibre13 pcalibre pcalibre1">Yellow &amp; Cyan =__________</p></li>
<li id="P700049702700000000000000000061D" data-uri="chapter02.xhtml#P700049702700000000000000000061D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E9C8" data-uri="chapter02.xhtml#P700049702700000000000000003E9C8" class="calibre13 pcalibre pcalibre1">Red ^ Magenta =__________</p></li>
</ul></li>
</ol></div></li></ol>
</section>
</section>
<section id="P700049702700000000000000000061F" data-uri="chapter02.xhtml#P700049702700000000000000000061F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E9C9" data-uri="chapter02.xhtml#P700049702700000000000000003E9C9" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000621" title="54" data-uri="chapter02.xhtml#P7000497027000000000000000000621" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">2.1.7 </span>Bit-Level Operations in C</h1></header>
<p id="P700049702700000000000000003E9CA" data-uri="chapter02.xhtml#P700049702700000000000000003E9CA" class="pcalibre1 pcalibre calibre2">One useful feature of C is that it supports bitwise Boolean operations. In fact, the symbols we have used for the Boolean operations are exactly those used by C: | for <span class="smallcaps pcalibre pcalibre1">or</span>, &amp; for <span class="smallcaps pcalibre pcalibre1">and</span>, ~ for <span class="smallcaps pcalibre pcalibre1">not</span>, and ^ for <span class="smallcaps pcalibre pcalibre1">exclusive</span>-<span class="smallcaps pcalibre pcalibre1">or</span>. These can be applied to any “integral” data type, including all of those listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000002AD_split_000.xhtml#P70004970270000000000000000003FB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2.3</span></a>. Here are some examples of expression evaluation for data type char:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E9CB" data-uri="chapter02.xhtml#P700049702700000000000000003E9CB">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E9CC" data-uri="chapter02.xhtml#P700049702700000000000000003E9CC" class="calibre18 pcalibre pcalibre1">C expression</th>
<th id="P700049702700000000000000003E9CD" data-uri="chapter02.xhtml#P700049702700000000000000003E9CD" class="calibre18 pcalibre pcalibre1">Binary expression</th>
<th id="P700049702700000000000000003E9CE" data-uri="chapter02.xhtml#P700049702700000000000000003E9CE" class="calibre18 pcalibre pcalibre1">Binary result</th>
<th id="P700049702700000000000000003E9CF" data-uri="chapter02.xhtml#P700049702700000000000000003E9CF" class="calibre18 pcalibre pcalibre1">Hexadecimal result</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9D0" data-uri="chapter02.xhtml#P700049702700000000000000003E9D0" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9D1" data-uri="chapter02.xhtml#P700049702700000000000000003E9D1" class="calibre10 pcalibre pcalibre1">~0x41</code></td>
<td id="P700049702700000000000000003E9D2" data-uri="chapter02.xhtml#P700049702700000000000000003E9D2" class="calibre20 pcalibre pcalibre1">~[0100 0001]</td>
<td id="P700049702700000000000000003E9D3" data-uri="chapter02.xhtml#P700049702700000000000000003E9D3" class="calibre20 pcalibre pcalibre1">[1011 1110]</td>
<td id="P700049702700000000000000003E9D4" data-uri="chapter02.xhtml#P700049702700000000000000003E9D4" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9D5" data-uri="chapter02.xhtml#P700049702700000000000000003E9D5" class="calibre10 pcalibre pcalibre1">0xBE</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9D6" data-uri="chapter02.xhtml#P700049702700000000000000003E9D6" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9D7" data-uri="chapter02.xhtml#P700049702700000000000000003E9D7" class="calibre10 pcalibre pcalibre1">~0x00</code></td>
<td id="P700049702700000000000000003E9D8" data-uri="chapter02.xhtml#P700049702700000000000000003E9D8" class="calibre20 pcalibre pcalibre1">~[0000 0000]</td>
<td id="P700049702700000000000000003E9D9" data-uri="chapter02.xhtml#P700049702700000000000000003E9D9" class="calibre20 pcalibre pcalibre1">[1111 1111]</td>
<td id="P700049702700000000000000003E9DA" data-uri="chapter02.xhtml#P700049702700000000000000003E9DA" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9DB" data-uri="chapter02.xhtml#P700049702700000000000000003E9DB" class="calibre10 pcalibre pcalibre1">0xFF</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9DC" data-uri="chapter02.xhtml#P700049702700000000000000003E9DC" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9DD" data-uri="chapter02.xhtml#P700049702700000000000000003E9DD" class="calibre10 pcalibre pcalibre1">0x69 &amp; 0x55</code></td>
<td id="P700049702700000000000000003E9DE" data-uri="chapter02.xhtml#P700049702700000000000000003E9DE" class="calibre20 pcalibre pcalibre1">[0110 1001] &amp; [0101 0101]</td>
<td id="P700049702700000000000000003E9DF" data-uri="chapter02.xhtml#P700049702700000000000000003E9DF" class="calibre20 pcalibre pcalibre1">[0100 0001]</td>
<td id="P700049702700000000000000003E9E0" data-uri="chapter02.xhtml#P700049702700000000000000003E9E0" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9E1" data-uri="chapter02.xhtml#P700049702700000000000000003E9E1" class="calibre10 pcalibre pcalibre1">0x41</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9E2" data-uri="chapter02.xhtml#P700049702700000000000000003E9E2" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9E3" data-uri="chapter02.xhtml#P700049702700000000000000003E9E3" class="calibre10 pcalibre pcalibre1">0x69 | 0x55</code></td>
<td id="P700049702700000000000000003E9E4" data-uri="chapter02.xhtml#P700049702700000000000000003E9E4" class="calibre20 pcalibre pcalibre1">[0110 1001] | [01010101]</td>
<td id="P700049702700000000000000003E9E5" data-uri="chapter02.xhtml#P700049702700000000000000003E9E5" class="calibre20 pcalibre pcalibre1">[0111 1101]</td>
<td id="P700049702700000000000000003E9E6" data-uri="chapter02.xhtml#P700049702700000000000000003E9E6" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003E9E7" data-uri="chapter02.xhtml#P700049702700000000000000003E9E7" class="calibre10 pcalibre pcalibre1">0x7D</code></td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000003E9E8" data-uri="chapter02.xhtml#P700049702700000000000000003E9E8" class="pcalibre1 pcalibre calibre2">As our examples show, the best way to determine the effect of a bit-level expression is to expand the hexadecimal arguments to their binary representations, perform the operations in binary, and then convert back to hexadecimal.</p>
<section id="P7000497027000000000000000000641" data-uri="chapter02.xhtml#P7000497027000000000000000000641" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E9E9" data-uri="chapter02.xhtml#P700049702700000000000000003E9E9" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.10</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018D2">146</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E9EA" data-uri="chapter02.xhtml#P700049702700000000000000003E9EA">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E9EB" data-uri="chapter02.xhtml#P700049702700000000000000003E9EB">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E9EC" data-uri="chapter02.xhtml#P700049702700000000000000003E9EC">
<p id="P700049702700000000000000003E9ED" data-uri="chapter02.xhtml#P700049702700000000000000003E9ED" class="pcalibre calibre3 pcalibre1">As an application of the property that <var class="calibre5 pcalibre pcalibre1">a</var> ^ <var class="calibre5 pcalibre pcalibre1">a</var> = 0 for any bit vector <var class="calibre5 pcalibre pcalibre1">a</var>, consider the following program:</p>
<pre id="P700049702700000000000000003E9EE" data-uri="chapter02.xhtml#P700049702700000000000000003E9EE" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E9EF" data-uri="chapter02.xhtml#P700049702700000000000000003E9EF" class="calibre10 pcalibre pcalibre1">
1  void inplace_swap(int *x, int *y) {
2      *y = *x ^ *y;	/* Step 1 */
3      *x = *x ^ *y;	/* Step 2 */
4      *y = *x ^ *y;	/* Step 3 */
5  }
</code></pre>
<p id="P700049702700000000000000003E9F0" data-uri="chapter02.xhtml#P700049702700000000000000003E9F0" class="pcalibre calibre3 pcalibre1">As the name implies, we claim that the effect of this procedure is to swap the values stored at the locations denoted by pointer variables <code id="P700049702700000000000000003E9F1" data-uri="chapter02.xhtml#P700049702700000000000000003E9F1" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P700049702700000000000000003E9F2" data-uri="chapter02.xhtml#P700049702700000000000000003E9F2" class="pcalibre1 calibre8 pcalibre">y</code>. Note that unlike the usual technique for swapping two values, we do not need a third location to temporarily store one value while we are moving the other. There is no performance advantage to this way of swapping; it is merely an intellectual amusement.</p>
<p id="P700049702700000000000000003E9F3" data-uri="chapter02.xhtml#P700049702700000000000000003E9F3" class="pcalibre calibre3 pcalibre1">Starting with values <var class="calibre5 pcalibre pcalibre1">a</var> and <var class="calibre5 pcalibre pcalibre1">b</var> in the locations pointed to by <code id="P700049702700000000000000003E9F4" data-uri="chapter02.xhtml#P700049702700000000000000003E9F4" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P700049702700000000000000003E9F5" data-uri="chapter02.xhtml#P700049702700000000000000003E9F5" class="pcalibre1 calibre8 pcalibre">y</code>, respectively, fill in the table that follows, giving the values stored at the two locations after each step of the procedure. Use the properties of ^ to show that the desired effect is achieved. Recall that every element is its own additive inverse (that is, <var class="calibre5 pcalibre pcalibre1">a</var> ^ <var class="calibre5 pcalibre pcalibre1">a</var> = 0).</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003E9F6" data-uri="chapter02.xhtml#P700049702700000000000000003E9F6">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003E9F7" data-uri="chapter02.xhtml#P700049702700000000000000003E9F7" class="calibre18 pcalibre pcalibre1">Step</th>
<th id="P700049702700000000000000003E9F8" data-uri="chapter02.xhtml#P700049702700000000000000003E9F8" class="calibre18 pcalibre pcalibre1">*x</th>
<th id="P700049702700000000000000003E9F9" data-uri="chapter02.xhtml#P700049702700000000000000003E9F9" class="calibre18 pcalibre pcalibre1">*y</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9FA" data-uri="chapter02.xhtml#P700049702700000000000000003E9FA" class="calibre20 pcalibre pcalibre1">Initially</td>
<td id="P700049702700000000000000003E9FB" data-uri="chapter02.xhtml#P700049702700000000000000003E9FB" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">a</var></td>
<td id="P700049702700000000000000003E9FC" data-uri="chapter02.xhtml#P700049702700000000000000003E9FC" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">b</var></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003E9FD" data-uri="chapter02.xhtml#P700049702700000000000000003E9FD" class="calibre20 pcalibre pcalibre1">Step 1</td>
<td id="P700049702700000000000000003E9FE" data-uri="chapter02.xhtml#P700049702700000000000000003E9FE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003E9FF" data-uri="chapter02.xhtml#P700049702700000000000000003E9FF" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA00" data-uri="chapter02.xhtml#P700049702700000000000000003EA00" class="calibre20 pcalibre pcalibre1">Step 2</td>
<td id="P700049702700000000000000003EA01" data-uri="chapter02.xhtml#P700049702700000000000000003EA01" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA02" data-uri="chapter02.xhtml#P700049702700000000000000003EA02" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA03" data-uri="chapter02.xhtml#P700049702700000000000000003EA03" class="calibre20 pcalibre pcalibre1">Step 3</td>
<td id="P700049702700000000000000003EA04" data-uri="chapter02.xhtml#P700049702700000000000000003EA04" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA05" data-uri="chapter02.xhtml#P700049702700000000000000003EA05" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<section id="P700049702700000000000000000065F" data-uri="chapter02.xhtml#P700049702700000000000000000065F" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EA06" data-uri="chapter02.xhtml#P700049702700000000000000003EA06" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000661" title="55" data-uri="chapter02.xhtml#P7000497027000000000000000000661" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.11</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018D2">146</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EA07" data-uri="chapter02.xhtml#P700049702700000000000000003EA07">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EA08" data-uri="chapter02.xhtml#P700049702700000000000000003EA08">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EA09" data-uri="chapter02.xhtml#P700049702700000000000000003EA09"><p id="P700049702700000000000000003EA0A" data-uri="chapter02.xhtml#P700049702700000000000000003EA0A" class="pcalibre calibre3 pcalibre1">Armed with the function <code id="P700049702700000000000000003EA0B" data-uri="chapter02.xhtml#P700049702700000000000000003EA0B" class="pcalibre1 calibre8 pcalibre">inplace_swap</code> from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018DB"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">2.10</span></a>, you decide to write code that will reverse the elements of an array by swapping elements from opposite ends of the array, working toward the middle.</p>
<p id="P700049702700000000000000003EA0C" data-uri="chapter02.xhtml#P700049702700000000000000003EA0C" class="pcalibre calibre3 pcalibre1">You arrive at the following function:</p>
<pre id="P700049702700000000000000003EA0D" data-uri="chapter02.xhtml#P700049702700000000000000003EA0D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003EA0E" data-uri="chapter02.xhtml#P700049702700000000000000003EA0E" class="calibre10 pcalibre pcalibre1">
1  void reverse_array(int a[], int cnt) {
2      int first, last;
3      for (first = 0, last = cnt-1;
4          first &lt;= last;
5          first++,last–)
6          inplace_swap(&amp;a[first], &amp;a[last]);
7  }
</code></pre>
<p id="P700049702700000000000000003EA0F" data-uri="chapter02.xhtml#P700049702700000000000000003EA0F" class="pcalibre calibre3 pcalibre1">When you apply your function to an array containing elements 1, 2, 3, and 4, you find the array now has, as expected, elements 4, 3, 2, and 1. When you try it on an array with elements 1, 2, 3, 4, and 5, however, you are surprised to see that the array now has elements 5, 4, 0, 2, and 1. In fact, you discover that the code always works correctly on arrays of even length, but it sets the middle element to 0 whenever the array has odd length.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003EA10" data-uri="chapter02.xhtml#P700049702700000000000000003EA10">
<li id="P700049702700000000000000000066C" data-uri="chapter02.xhtml#P700049702700000000000000000066C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA11" data-uri="chapter02.xhtml#P700049702700000000000000003EA11" class="pcalibre calibre3 pcalibre1">For an array of odd length <code id="P700049702700000000000000003EA12" data-uri="chapter02.xhtml#P700049702700000000000000003EA12" class="pcalibre1 calibre8 pcalibre">cnt = 2<var class="calibre5 pcalibre pcalibre1">k</var> + 1</code>, what are the values of variables first and last in the final iteration of function <code id="P700049702700000000000000003EA13" data-uri="chapter02.xhtml#P700049702700000000000000003EA13" class="pcalibre1 calibre8 pcalibre">reverse_array?</code></p></li>
<li id="P7000497027000000000000000000670" data-uri="chapter02.xhtml#P7000497027000000000000000000670" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA14" data-uri="chapter02.xhtml#P700049702700000000000000003EA14" class="pcalibre calibre3 pcalibre1">Why does this call to function <code id="P700049702700000000000000003EA15" data-uri="chapter02.xhtml#P700049702700000000000000003EA15" class="pcalibre1 calibre8 pcalibre">inplace_swap</code> set the array element to 0?</p></li>
<li id="P7000497027000000000000000000673" data-uri="chapter02.xhtml#P7000497027000000000000000000673" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA16" data-uri="chapter02.xhtml#P700049702700000000000000003EA16" class="pcalibre calibre3 pcalibre1">What simple modification to the code for <code id="P700049702700000000000000003EA17" data-uri="chapter02.xhtml#P700049702700000000000000003EA17" class="pcalibre1 calibre8 pcalibre">reverse_array</code> would eliminate this problem?</p></li></ol></div></li></ol>
</section>
<p id="P700049702700000000000000003EA18" data-uri="chapter02.xhtml#P700049702700000000000000003EA18" class="pcalibre1 pcalibre calibre2">One common use of bit-level operations is to implement <i class="calibre5 pcalibre pcalibre1">masking</i> operations, where a mask is a bit pattern that indicates a selected set of bits within a word. As an example, the mask <code id="P700049702700000000000000003EA19" data-uri="chapter02.xhtml#P700049702700000000000000003EA19" class="pcalibre1 calibre8 pcalibre">0xFF</code> (having ones for the least significant 8 bits) indicates the low-order byte of a word. The bit-level operation <code id="P700049702700000000000000003EA1A" data-uri="chapter02.xhtml#P700049702700000000000000003EA1A" class="pcalibre1 calibre8 pcalibre">x &amp; 0xFF</code> yields a value consisting of the least significant byte of <code id="P700049702700000000000000003EA1B" data-uri="chapter02.xhtml#P700049702700000000000000003EA1B" class="pcalibre1 calibre8 pcalibre">x</code>, but with all other bytes set to 0. For example, with <code id="P700049702700000000000000003EA1C" data-uri="chapter02.xhtml#P700049702700000000000000003EA1C" class="pcalibre1 calibre8 pcalibre">x = 0x89ABCDEF</code>, the expression would yield <code id="P700049702700000000000000003EA1D" data-uri="chapter02.xhtml#P700049702700000000000000003EA1D" class="pcalibre1 calibre8 pcalibre">0x000000EF</code>. The expression <code id="P700049702700000000000000003EA1E" data-uri="chapter02.xhtml#P700049702700000000000000003EA1E" class="pcalibre1 calibre8 pcalibre">~0</code> will yield a mask of all ones, regardless of the size of the data representation. The same mask can be written <code id="P700049702700000000000000003EA1F" data-uri="chapter02.xhtml#P700049702700000000000000003EA1F" class="pcalibre1 calibre8 pcalibre">0xFFFFFFFF</code> when data type <code id="P700049702700000000000000003EA20" data-uri="chapter02.xhtml#P700049702700000000000000003EA20" class="pcalibre1 calibre8 pcalibre">int</code> is 32 bits, but it would not be as portable.</p>
<section id="P700049702700000000000000000067F" data-uri="chapter02.xhtml#P700049702700000000000000000067F" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EA21" data-uri="chapter02.xhtml#P700049702700000000000000003EA21" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.12</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P70004970270000000000000000018D2">146</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EA22" data-uri="chapter02.xhtml#P700049702700000000000000003EA22">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EA23" data-uri="chapter02.xhtml#P700049702700000000000000003EA23">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EA24" data-uri="chapter02.xhtml#P700049702700000000000000003EA24"><p id="P700049702700000000000000003EA25" data-uri="chapter02.xhtml#P700049702700000000000000003EA25" class="pcalibre calibre3 pcalibre1">Write C expressions, in terms of variable <code id="P700049702700000000000000003EA26" data-uri="chapter02.xhtml#P700049702700000000000000003EA26" class="pcalibre1 calibre8 pcalibre">x</code>, for the following values. Your code should work for any word size <var class="calibre5 pcalibre pcalibre1">w</var> ≥ 8. For reference, we show the result of evaluating the expressions for <code id="P700049702700000000000000003EA27" data-uri="chapter02.xhtml#P700049702700000000000000003EA27" class="pcalibre1 calibre8 pcalibre">x = 0x87654321</code>, with <var class="calibre5 pcalibre pcalibre1">w</var> = 32.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003EA28" data-uri="chapter02.xhtml#P700049702700000000000000003EA28">
<li id="P7000497027000000000000000000688" data-uri="chapter02.xhtml#P7000497027000000000000000000688" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA29" data-uri="chapter02.xhtml#P700049702700000000000000003EA29" class="pcalibre calibre3 pcalibre1">The least significant byte of <code id="P700049702700000000000000003EA2A" data-uri="chapter02.xhtml#P700049702700000000000000003EA2A" class="pcalibre1 calibre8 pcalibre">x</code>, with all other bits set to 0. [<code id="P700049702700000000000000003EA2B" data-uri="chapter02.xhtml#P700049702700000000000000003EA2B" class="pcalibre1 calibre8 pcalibre">0x00000021</code>]</p></li>
<li id="P700049702700000000000000000068C" data-uri="chapter02.xhtml#P700049702700000000000000000068C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA2C" data-uri="chapter02.xhtml#P700049702700000000000000003EA2C" class="pcalibre calibre3 pcalibre1">All but the least significant byte of <code id="P700049702700000000000000003EA2D" data-uri="chapter02.xhtml#P700049702700000000000000003EA2D" class="pcalibre1 calibre8 pcalibre">x</code> complemented, with the least significant byte left unchanged. <code id="P700049702700000000000000003EA2E" data-uri="chapter02.xhtml#P700049702700000000000000003EA2E" class="pcalibre1 calibre8 pcalibre">[0x789ABC21]</code></p></li>
<li id="P7000497027000000000000000000690" data-uri="chapter02.xhtml#P7000497027000000000000000000690" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EA2F" data-uri="chapter02.xhtml#P700049702700000000000000003EA2F" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000692" title="56" data-uri="chapter02.xhtml#P7000497027000000000000000000692" epub:type="pagebreak"></span>The least significant byte set to all ones, and all other bytes of <code id="P700049702700000000000000003EA30" data-uri="chapter02.xhtml#P700049702700000000000000003EA30" class="pcalibre1 calibre8 pcalibre">x</code> left unchanged. <code id="P700049702700000000000000003EA31" data-uri="chapter02.xhtml#P700049702700000000000000003EA31" class="pcalibre1 calibre8 pcalibre">[0x876543FF]</code></p></li>
</ol></div></li></ol>
</section>
<section id="P7000497027000000000000000000695" data-uri="chapter02.xhtml#P7000497027000000000000000000695" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EA32" data-uri="chapter02.xhtml#P700049702700000000000000003EA32" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.13</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001909">147</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EA33" data-uri="chapter02.xhtml#P700049702700000000000000003EA33">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EA34" data-uri="chapter02.xhtml#P700049702700000000000000003EA34">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EA35" data-uri="chapter02.xhtml#P700049702700000000000000003EA35"><p id="P700049702700000000000000003EA36" data-uri="chapter02.xhtml#P700049702700000000000000003EA36" class="pcalibre calibre3 pcalibre1">The Digital Equipment VAX computer was a very popular machine from the late 1970s until the late 1980s. Rather than instructions for Boolean operations <span class="smallcaps pcalibre pcalibre1">and </span>and <span class="smallcaps pcalibre pcalibre1">or</span>, it had instructions <code id="P700049702700000000000000003EA37" data-uri="chapter02.xhtml#P700049702700000000000000003EA37" class="pcalibre1 calibre8 pcalibre">bis</code> (bit set) and <code id="P700049702700000000000000003EA38" data-uri="chapter02.xhtml#P700049702700000000000000003EA38" class="pcalibre1 calibre8 pcalibre">bic</code> (bit clear). Both instructions take a data word <code id="P700049702700000000000000003EA39" data-uri="chapter02.xhtml#P700049702700000000000000003EA39" class="pcalibre1 calibre8 pcalibre">x</code> and a mask word <code id="P700049702700000000000000003EA3A" data-uri="chapter02.xhtml#P700049702700000000000000003EA3A" class="pcalibre1 calibre8 pcalibre">m</code>. They generate a result <code id="P700049702700000000000000003EA3B" data-uri="chapter02.xhtml#P700049702700000000000000003EA3B" class="pcalibre1 calibre8 pcalibre">z</code> consisting of the bits of <code id="P700049702700000000000000003EA3C" data-uri="chapter02.xhtml#P700049702700000000000000003EA3C" class="pcalibre1 calibre8 pcalibre">x</code> modified according to the bits of <code id="P700049702700000000000000003EA3D" data-uri="chapter02.xhtml#P700049702700000000000000003EA3D" class="pcalibre1 calibre8 pcalibre">m.</code> With <code id="P700049702700000000000000003EA3E" data-uri="chapter02.xhtml#P700049702700000000000000003EA3E" class="pcalibre1 calibre8 pcalibre">bis</code>, the modification involves setting <code id="P700049702700000000000000003EA3F" data-uri="chapter02.xhtml#P700049702700000000000000003EA3F" class="pcalibre1 calibre8 pcalibre">z</code> to 1 at each bit position where <code id="P700049702700000000000000003EA40" data-uri="chapter02.xhtml#P700049702700000000000000003EA40" class="pcalibre1 calibre8 pcalibre">m</code> is 1. With <code id="P700049702700000000000000003EA41" data-uri="chapter02.xhtml#P700049702700000000000000003EA41" class="pcalibre1 calibre8 pcalibre">bic</code>, the modification involves setting <code id="P700049702700000000000000003EA42" data-uri="chapter02.xhtml#P700049702700000000000000003EA42" class="pcalibre1 calibre8 pcalibre">z</code> to 0 at each bit position where <code id="P700049702700000000000000003EA43" data-uri="chapter02.xhtml#P700049702700000000000000003EA43" class="pcalibre1 calibre8 pcalibre">m</code> is 1.</p>
<p id="P700049702700000000000000003EA44" data-uri="chapter02.xhtml#P700049702700000000000000003EA44" class="pcalibre calibre3 pcalibre1">To see how these operations relate to the C bit-level operations, assume we have functions <code id="P700049702700000000000000003EA45" data-uri="chapter02.xhtml#P700049702700000000000000003EA45" class="pcalibre1 calibre8 pcalibre">bis</code> and <code id="P700049702700000000000000003EA46" data-uri="chapter02.xhtml#P700049702700000000000000003EA46" class="pcalibre1 calibre8 pcalibre">bic</code> implementing the bit set and bit clear operations, and that we want to use these to implement functions computing bitwise operations | and ^, without using any other C operations. Fill in the missing code below. <i class="calibre5 pcalibre pcalibre1">Hint:</i> Write C expressions for the operations <code id="P700049702700000000000000003EA47" data-uri="chapter02.xhtml#P700049702700000000000000003EA47" class="pcalibre1 calibre8 pcalibre">bis</code> and <code id="P700049702700000000000000003EA48" data-uri="chapter02.xhtml#P700049702700000000000000003EA48" class="pcalibre1 calibre8 pcalibre">bic</code>.</p>
<pre id="P700049702700000000000000003EA49" data-uri="chapter02.xhtml#P700049702700000000000000003EA49" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003EA4A" data-uri="chapter02.xhtml#P700049702700000000000000003EA4A" class="calibre10 pcalibre pcalibre1">
/* Declarations of functions implementing operations bis and bic */
int bis(int x, int m);
int bic(int x, int m);

/* Compute x|y using only calls to functions bis and bic */
int bool_or(int x, int y) {
   int result = ___________;
   return result;
}

/* Compute x^y using only calls to functions bis and bic */
int bool_xor(int x, int y) {
   int result = ___________;
   return result;
}
</code></pre>
</div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000006AF" data-uri="chapter02.xhtml#P70004970270000000000000000006AF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003EA4B" data-uri="chapter02.xhtml#P700049702700000000000000003EA4B" epub:type="title"><span class="pcalibre label pcalibre1">2.1.8 </span>Logical Operations in C</h1></header>
<p id="P700049702700000000000000003EA4C" data-uri="chapter02.xhtml#P700049702700000000000000003EA4C" class="pcalibre1 pcalibre calibre2">C also provides a set of <i class="calibre5 pcalibre pcalibre1">logical</i> operators | |, &amp;&amp;, and !, which correspond to the <span class="smallcaps pcalibre pcalibre1">or</span>, <span class="smallcaps pcalibre pcalibre1">and</span>, and <span class="smallcaps pcalibre pcalibre1">not </span>operations of logic. These can easily be confused with the bit-level operations, but their behavior is quite different. The logical operations treat any nonzero argument as representing <span class="smallcaps pcalibre pcalibre1">true </span>and argument 0 as representing <span class="smallcaps pcalibre pcalibre1">false</span>. They return either 1 or 0, indicating a result of either <span class="smallcaps pcalibre pcalibre1">true or false</span>, respectively. Here are some examples of expression evaluation:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003EA4D" data-uri="chapter02.xhtml#P700049702700000000000000003EA4D">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003EA4E" data-uri="chapter02.xhtml#P700049702700000000000000003EA4E" class="calibre18 pcalibre pcalibre1">Expression</th>
<th id="P700049702700000000000000003EA4F" data-uri="chapter02.xhtml#P700049702700000000000000003EA4F" class="calibre18 pcalibre pcalibre1">Result</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA50" data-uri="chapter02.xhtml#P700049702700000000000000003EA50" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA51" data-uri="chapter02.xhtml#P700049702700000000000000003EA51" class="calibre10 pcalibre pcalibre1">!0x41</code></td>
<td id="P700049702700000000000000003EA52" data-uri="chapter02.xhtml#P700049702700000000000000003EA52" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA53" data-uri="chapter02.xhtml#P700049702700000000000000003EA53" class="calibre10 pcalibre pcalibre1">0x00</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA54" data-uri="chapter02.xhtml#P700049702700000000000000003EA54" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA55" data-uri="chapter02.xhtml#P700049702700000000000000003EA55" class="calibre10 pcalibre pcalibre1">!0x00</code></td>
<td id="P700049702700000000000000003EA56" data-uri="chapter02.xhtml#P700049702700000000000000003EA56" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA57" data-uri="chapter02.xhtml#P700049702700000000000000003EA57" class="calibre10 pcalibre pcalibre1">0x01</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA58" data-uri="chapter02.xhtml#P700049702700000000000000003EA58" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA59" data-uri="chapter02.xhtml#P700049702700000000000000003EA59" class="calibre10 pcalibre pcalibre1">!!0x41</code></td>
<td id="P700049702700000000000000003EA5A" data-uri="chapter02.xhtml#P700049702700000000000000003EA5A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA5B" data-uri="chapter02.xhtml#P700049702700000000000000003EA5B" class="calibre10 pcalibre pcalibre1">0x01</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA5C" data-uri="chapter02.xhtml#P700049702700000000000000003EA5C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA5D" data-uri="chapter02.xhtml#P700049702700000000000000003EA5D" class="calibre10 pcalibre pcalibre1">0x69 &amp;&amp; 0x55</code></td>
<td id="P700049702700000000000000003EA5E" data-uri="chapter02.xhtml#P700049702700000000000000003EA5E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA5F" data-uri="chapter02.xhtml#P700049702700000000000000003EA5F" class="calibre10 pcalibre pcalibre1">0x01</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA60" data-uri="chapter02.xhtml#P700049702700000000000000003EA60" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA61" data-uri="chapter02.xhtml#P700049702700000000000000003EA61" class="calibre10 pcalibre pcalibre1">0x69 | | 0x55</code></td>
<td id="P700049702700000000000000003EA62" data-uri="chapter02.xhtml#P700049702700000000000000003EA62" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA63" data-uri="chapter02.xhtml#P700049702700000000000000003EA63" class="calibre10 pcalibre pcalibre1">0x01</code></td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000003EA64" data-uri="chapter02.xhtml#P700049702700000000000000003EA64" class="pcalibre1 pcalibre calibre2">Observe that a bitwise operation will have behavior matching that of its logical counterpart only in the special case in which the arguments are restricted to 0 or 1.</p>
<p id="P700049702700000000000000003EA65" data-uri="chapter02.xhtml#P700049702700000000000000003EA65" class="pcalibre1 pcalibre calibre2">A second important distinction between the logical operators ‘<code id="P700049702700000000000000003EA66" data-uri="chapter02.xhtml#P700049702700000000000000003EA66" class="pcalibre1 calibre8 pcalibre">&amp;&amp;</code>’ and ‘<code id="P700049702700000000000000003EA67" data-uri="chapter02.xhtml#P700049702700000000000000003EA67" class="pcalibre1 calibre8 pcalibre">| |</code>’ versus their bit-level counterparts ‘<code id="P700049702700000000000000003EA68" data-uri="chapter02.xhtml#P700049702700000000000000003EA68" class="pcalibre1 calibre8 pcalibre">&amp;</code>’ and ‘<code id="P700049702700000000000000003EA69" data-uri="chapter02.xhtml#P700049702700000000000000003EA69" class="pcalibre1 calibre8 pcalibre">|</code>’ is that the logical operators do not evaluate their second argument if the result of the expression can be determined by evaluating the first argument. Thus, for example, the expression a <code id="P700049702700000000000000003EA6A" data-uri="chapter02.xhtml#P700049702700000000000000003EA6A" class="pcalibre1 calibre8 pcalibre">&amp;&amp; 5/a</code> will never cause a division by zero, and the expression <code id="P700049702700000000000000003EA6B" data-uri="chapter02.xhtml#P700049702700000000000000003EA6B" class="pcalibre1 calibre8 pcalibre">p &amp;&amp; *p++</code> will never cause the dereferencing of a null pointer.</p>
<section id="P70004970270000000000000000006D1" data-uri="chapter02.xhtml#P70004970270000000000000000006D1" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EA6C" data-uri="chapter02.xhtml#P700049702700000000000000003EA6C" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.14</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P7000497027000000000000000001909">147</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EA6D" data-uri="chapter02.xhtml#P700049702700000000000000003EA6D">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EA6E" data-uri="chapter02.xhtml#P700049702700000000000000003EA6E">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EA6F" data-uri="chapter02.xhtml#P700049702700000000000000003EA6F">
<p id="P700049702700000000000000003EA70" data-uri="chapter02.xhtml#P700049702700000000000000003EA70" class="pcalibre calibre3 pcalibre1">Suppose that <code id="P700049702700000000000000003EA71" data-uri="chapter02.xhtml#P700049702700000000000000003EA71" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P700049702700000000000000003EA72" data-uri="chapter02.xhtml#P700049702700000000000000003EA72" class="pcalibre1 calibre8 pcalibre">y</code> have byte values <code id="P700049702700000000000000003EA73" data-uri="chapter02.xhtml#P700049702700000000000000003EA73" class="pcalibre1 calibre8 pcalibre">0x66</code> and <code id="P700049702700000000000000003EA74" data-uri="chapter02.xhtml#P700049702700000000000000003EA74" class="pcalibre1 calibre8 pcalibre">0x39</code>, respectively. Fill in the following table indicating the byte values of the different C expressions:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003EA75" data-uri="chapter02.xhtml#P700049702700000000000000003EA75">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003EA76" data-uri="chapter02.xhtml#P700049702700000000000000003EA76" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000006DD" title="57" data-uri="chapter02.xhtml#P70004970270000000000000000006DD" epub:type="pagebreak"></span>Expression</th>
<th id="P700049702700000000000000003EA77" data-uri="chapter02.xhtml#P700049702700000000000000003EA77" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P700049702700000000000000003EA78" data-uri="chapter02.xhtml#P700049702700000000000000003EA78" class="calibre18 pcalibre pcalibre1">Expression</th>
<th id="P700049702700000000000000003EA79" data-uri="chapter02.xhtml#P700049702700000000000000003EA79" class="calibre18 pcalibre pcalibre1">Value</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA7A" data-uri="chapter02.xhtml#P700049702700000000000000003EA7A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA7B" data-uri="chapter02.xhtml#P700049702700000000000000003EA7B" class="calibre10 pcalibre pcalibre1">x &amp; y</code></td>
<td id="P700049702700000000000000003EA7C" data-uri="chapter02.xhtml#P700049702700000000000000003EA7C" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA7D" data-uri="chapter02.xhtml#P700049702700000000000000003EA7D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA7E" data-uri="chapter02.xhtml#P700049702700000000000000003EA7E" class="calibre10 pcalibre pcalibre1">x &amp;&amp; y</code></td>
<td id="P700049702700000000000000003EA7F" data-uri="chapter02.xhtml#P700049702700000000000000003EA7F" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA80" data-uri="chapter02.xhtml#P700049702700000000000000003EA80" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA81" data-uri="chapter02.xhtml#P700049702700000000000000003EA81" class="calibre10 pcalibre pcalibre1">x | y</code></td>
<td id="P700049702700000000000000003EA82" data-uri="chapter02.xhtml#P700049702700000000000000003EA82" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA83" data-uri="chapter02.xhtml#P700049702700000000000000003EA83" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA84" data-uri="chapter02.xhtml#P700049702700000000000000003EA84" class="calibre10 pcalibre pcalibre1">x | | y</code></td>
<td id="P700049702700000000000000003EA85" data-uri="chapter02.xhtml#P700049702700000000000000003EA85" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA86" data-uri="chapter02.xhtml#P700049702700000000000000003EA86" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA87" data-uri="chapter02.xhtml#P700049702700000000000000003EA87" class="calibre10 pcalibre pcalibre1">~x | ~y</code></td>
<td id="P700049702700000000000000003EA88" data-uri="chapter02.xhtml#P700049702700000000000000003EA88" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA89" data-uri="chapter02.xhtml#P700049702700000000000000003EA89" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA8A" data-uri="chapter02.xhtml#P700049702700000000000000003EA8A" class="calibre10 pcalibre pcalibre1">!x | | !y</code></td>
<td id="P700049702700000000000000003EA8B" data-uri="chapter02.xhtml#P700049702700000000000000003EA8B" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EA8C" data-uri="chapter02.xhtml#P700049702700000000000000003EA8C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA8D" data-uri="chapter02.xhtml#P700049702700000000000000003EA8D" class="calibre10 pcalibre pcalibre1">x &amp; !y</code></td>
<td id="P700049702700000000000000003EA8E" data-uri="chapter02.xhtml#P700049702700000000000000003EA8E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EA8F" data-uri="chapter02.xhtml#P700049702700000000000000003EA8F" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EA90" data-uri="chapter02.xhtml#P700049702700000000000000003EA90" class="calibre10 pcalibre pcalibre1">x &amp;&amp; ~y</code></td>
<td id="P700049702700000000000000003EA91" data-uri="chapter02.xhtml#P700049702700000000000000003EA91" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<section id="P70004970270000000000000000006F9" data-uri="chapter02.xhtml#P70004970270000000000000000006F9" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EA92" data-uri="chapter02.xhtml#P700049702700000000000000003EA92" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.15</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P700049702700000000000000000192B">148</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EA93" data-uri="chapter02.xhtml#P700049702700000000000000003EA93">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EA94" data-uri="chapter02.xhtml#P700049702700000000000000003EA94">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EA95" data-uri="chapter02.xhtml#P700049702700000000000000003EA95"><p id="P700049702700000000000000003EA96" data-uri="chapter02.xhtml#P700049702700000000000000003EA96" class="pcalibre calibre3 pcalibre1">Using only bit-level and logical operations, write a C expression that is equivalent to <code id="P700049702700000000000000003EA97" data-uri="chapter02.xhtml#P700049702700000000000000003EA97" class="pcalibre1 calibre8 pcalibre">x == y</code>. In other words, it will return 1 when <code id="P700049702700000000000000003EA98" data-uri="chapter02.xhtml#P700049702700000000000000003EA98" class="pcalibre1 calibre8 pcalibre">x</code> and <code id="P700049702700000000000000003EA99" data-uri="chapter02.xhtml#P700049702700000000000000003EA99" class="pcalibre1 calibre8 pcalibre">y</code> are equal and 0 otherwise.</p></div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000000702" data-uri="chapter02.xhtml#P7000497027000000000000000000702" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003EA9A" data-uri="chapter02.xhtml#P700049702700000000000000003EA9A" epub:type="title"><span class="pcalibre label pcalibre1">2.1.9 </span>Shift Operations in C</h1></header>
<p id="P700049702700000000000000003EA9B" data-uri="chapter02.xhtml#P700049702700000000000000003EA9B" class="pcalibre1 pcalibre calibre2">C also provides a set of <i class="calibre5 pcalibre pcalibre1">shift</i> operations for shifting bit patterns to the left and to the right. For an operand <code id="P700049702700000000000000003EA9C" data-uri="chapter02.xhtml#P700049702700000000000000003EA9C" class="pcalibre1 calibre8 pcalibre">x</code> having bit representation <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="180" altimg-height="21" altimg="../images/ch02-new08.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>0</m:mn></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>, the C expression <code id="P700049702700000000000000003EA9D" data-uri="chapter02.xhtml#P700049702700000000000000003EA9D" class="pcalibre1 calibre8 pcalibre">x &lt;&lt; k</code> yields a value with bit representation <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="306" altimg-height="21" altimg="../images/ch02-new09.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mi>k</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mi>k</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mn>0</m:mn></m:msub><m:mo>,</m:mo><m:mn>0</m:mn><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:mn>0</m:mn></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>. That is, <code id="P700049702700000000000000003EA9E" data-uri="chapter02.xhtml#P700049702700000000000000003EA9E" class="pcalibre1 calibre8 pcalibre">x</code> is shifted <var class="calibre5 pcalibre pcalibre1">k</var> bits to the left, dropping off the <var class="calibre5 pcalibre pcalibre1">k</var> most significant bits and filling the right end with <var class="calibre5 pcalibre pcalibre1">k</var> zeros. The shift amount should be a value between 0 and <var class="calibre5 pcalibre pcalibre1">w</var> – 1. Shift operations associate from left to right, so <code id="P700049702700000000000000003EA9F" data-uri="chapter02.xhtml#P700049702700000000000000003EA9F" class="pcalibre1 calibre8 pcalibre">x &lt;&lt; j &lt;&lt; k</code> is equivalent to <code id="P700049702700000000000000003EAA0" data-uri="chapter02.xhtml#P700049702700000000000000003EAA0" class="pcalibre1 calibre8 pcalibre">(x &lt;&lt; j) &lt;&lt; k.</code></p>
<p id="P700049702700000000000000003EAA1" data-uri="chapter02.xhtml#P700049702700000000000000003EAA1" class="pcalibre1 pcalibre calibre2">There is a corresponding right shift operation, written in C as <code id="P700049702700000000000000003EAA2" data-uri="chapter02.xhtml#P700049702700000000000000003EAA2" class="pcalibre1 calibre8 pcalibre">x &gt;&gt; k</code>, but it has a slightly subtle behavior. Generally, machines support two forms of right shift:</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000003EAA3" data-uri="chapter02.xhtml#P700049702700000000000000003EAA3">
<li id="P700049702700000000000000003EAA4" data-uri="chapter02.xhtml#P700049702700000000000000003EAA4" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EAA5" data-uri="chapter02.xhtml#P700049702700000000000000003EAA5" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000070F" title="58" data-uri="chapter02.xhtml#P700049702700000000000000000070F" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">Logical </span>. A logical right shift fills the left end with <var class="calibre5 pcalibre pcalibre1">k</var> zeros, giving a result <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="255" altimg-height="21" altimg="../images/ch02-new10.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:mn>0</m:mn><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:mn>0</m:mn><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:msub><m:mi>x</m:mi><m:mi>k</m:mi></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>.</p></li>
<li id="P700049702700000000000000003EAA6" data-uri="chapter02.xhtml#P700049702700000000000000003EAA6" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003EAA7" data-uri="chapter02.xhtml#P700049702700000000000000003EAA7" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Arithmetic</span>. An arithmetic right shift fills the left end with <var class="calibre5 pcalibre pcalibre1">k</var> repetitions of the most significant bit, giving a result <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="320" altimg-height="21" altimg="../images/ch02-new11.png"><m:mrow><m:mrow><m:mo>[</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mi>x</m:mi><m:mrow><m:mi>w</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:msub><m:mi>x</m:mi><m:mi>k</m:mi></m:msub></m:mrow><m:mo>]</m:mo></m:mrow></m:mrow></m:math></span>. This convention might seem peculiar, but as we will see, it is useful for operating on signed integer data.</p></li>
</ul>
<p id="P700049702700000000000000003EAA8" data-uri="chapter02.xhtml#P700049702700000000000000003EAA8" class="pcalibre1 pcalibre calibre2">As examples, the following table shows the effect of applying the different shift operations to two different values of an 8-bit argument <var class="calibre5 pcalibre pcalibre1">x</var>:</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003EAA9" data-uri="chapter02.xhtml#P700049702700000000000000003EAA9">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003EAAA" data-uri="chapter02.xhtml#P700049702700000000000000003EAAA" class="calibre18 pcalibre pcalibre1">Operation</th>
<th id="P700049702700000000000000003EAAB" data-uri="chapter02.xhtml#P700049702700000000000000003EAAB" class="calibre18 pcalibre pcalibre1">Value 1</th>
<th id="P700049702700000000000000003EAAC" data-uri="chapter02.xhtml#P700049702700000000000000003EAAC" class="calibre18 pcalibre pcalibre1">Value 2</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAAD" data-uri="chapter02.xhtml#P700049702700000000000000003EAAD" class="calibre20 pcalibre pcalibre1">Argument <code id="P700049702700000000000000003EAAE" data-uri="chapter02.xhtml#P700049702700000000000000003EAAE" class="calibre10 pcalibre pcalibre1">x</code></td>
<td id="P700049702700000000000000003EAAF" data-uri="chapter02.xhtml#P700049702700000000000000003EAAF" class="calibre20 pcalibre pcalibre1">[01100011]</td>
<td id="P700049702700000000000000003EAB0" data-uri="chapter02.xhtml#P700049702700000000000000003EAB0" class="calibre20 pcalibre pcalibre1">[10010101]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAB1" data-uri="chapter02.xhtml#P700049702700000000000000003EAB1" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EAB2" data-uri="chapter02.xhtml#P700049702700000000000000003EAB2" class="calibre10 pcalibre pcalibre1">x &lt;&lt; 4</code></td>
<td id="P700049702700000000000000003EAB3" data-uri="chapter02.xhtml#P700049702700000000000000003EAB3" class="calibre20 pcalibre pcalibre1">[0011<i class="calibre5 pcalibre pcalibre1">0000</i>]</td>
<td id="P700049702700000000000000003EAB4" data-uri="chapter02.xhtml#P700049702700000000000000003EAB4" class="calibre20 pcalibre pcalibre1">[0101<i class="calibre5 pcalibre pcalibre1">0000</i>]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAB5" data-uri="chapter02.xhtml#P700049702700000000000000003EAB5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EAB6" data-uri="chapter02.xhtml#P700049702700000000000000003EAB6" class="calibre10 pcalibre pcalibre1">x &gt;&gt; 4 (logical)</code></td>
<td id="P700049702700000000000000003EAB7" data-uri="chapter02.xhtml#P700049702700000000000000003EAB7" class="calibre20 pcalibre pcalibre1">[<i class="calibre5 pcalibre pcalibre1">0000</i>0110]</td>
<td id="P700049702700000000000000003EAB8" data-uri="chapter02.xhtml#P700049702700000000000000003EAB8" class="calibre20 pcalibre pcalibre1">[<i class="calibre5 pcalibre pcalibre1">0000</i>1001]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAB9" data-uri="chapter02.xhtml#P700049702700000000000000003EAB9" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EABA" data-uri="chapter02.xhtml#P700049702700000000000000003EABA" class="calibre10 pcalibre pcalibre1">x &gt;&gt; 4</code> (arithmetic)</td>
<td id="P700049702700000000000000003EABB" data-uri="chapter02.xhtml#P700049702700000000000000003EABB" class="calibre20 pcalibre pcalibre1">[<i class="calibre5 pcalibre pcalibre1">0000</i>0110]</td>
<td id="P700049702700000000000000003EABC" data-uri="chapter02.xhtml#P700049702700000000000000003EABC" class="calibre20 pcalibre pcalibre1">[<i class="calibre5 pcalibre pcalibre1">1111</i>1001]</td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000003EABD" data-uri="chapter02.xhtml#P700049702700000000000000003EABD" class="pcalibre1 pcalibre calibre2">The italicized digits indicate the values that fill the right (left shift) or left (right shift) ends. Observe that all but one entry involves filling with zeros. The exception is the case of shifting [10010101] right arithmetically. Since its most significant bit is 1, this will be used as the fill value.</p>
<p id="P700049702700000000000000003EABE" data-uri="chapter02.xhtml#P700049702700000000000000003EABE" class="pcalibre1 pcalibre calibre2">The C standards do not precisely define which type of right shift should be used with signed numbers—either arithmetic or logical shifts may be used. This unfortunately means that any code assuming one form or the other will potentially encounter portability problems. In practice, however, almost all compiler/machine combinations use arithmetic right shifts for signed data, and many programmers assume this to be the case. For unsigned data, on the other hand, right shifts must be logical.</p>
<p id="P700049702700000000000000003EABF" data-uri="chapter02.xhtml#P700049702700000000000000003EABF" class="pcalibre1 pcalibre calibre2">In contrast to C, Java has a precise definition of how right shifts should be performed. The expression <code id="P700049702700000000000000003EAC0" data-uri="chapter02.xhtml#P700049702700000000000000003EAC0" class="pcalibre1 calibre8 pcalibre">x &gt;&gt; k</code> shifts <code id="P700049702700000000000000003EAC1" data-uri="chapter02.xhtml#P700049702700000000000000003EAC1" class="pcalibre1 calibre8 pcalibre">x</code> arithmetically by <code id="P700049702700000000000000003EAC2" data-uri="chapter02.xhtml#P700049702700000000000000003EAC2" class="pcalibre1 calibre8 pcalibre">k</code> positions, while <code id="P700049702700000000000000003EAC3" data-uri="chapter02.xhtml#P700049702700000000000000003EAC3" class="pcalibre1 calibre8 pcalibre">x &gt;&gt;&gt; k</code> shifts it logically.</p>
<section id="P700049702700000000000000000072E" data-uri="chapter02.xhtml#P700049702700000000000000000072E" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003EAC4" data-uri="chapter02.xhtml#P700049702700000000000000003EAC4" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">2.16</span> (solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000017AE_split_000.xhtml#P700049702700000000000000000192B">148</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003EAC5" data-uri="chapter02.xhtml#P700049702700000000000000003EAC5">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003EAC6" data-uri="chapter02.xhtml#P700049702700000000000000003EAC6">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003EAC7" data-uri="chapter02.xhtml#P700049702700000000000000003EAC7">
<p id="P700049702700000000000000003EAC8" data-uri="chapter02.xhtml#P700049702700000000000000003EAC8" class="pcalibre calibre3 pcalibre1">Fill in the table below showing the effects of the different shift operations on single-byte quantities. The best way to think about shift operations is to work with binary representations. Convert the initial values to binary, perform the shifts, and then convert back to hexadecimal. Each of the answers should be 8 binary digits or 2 hexadecimal digits.</p>
<table class="informaltable pcalibre pcalibre1" id="P700049702700000000000000003EAC9" data-uri="chapter02.xhtml#P700049702700000000000000003EAC9">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P700049702700000000000000003EACA" data-uri="chapter02.xhtml#P700049702700000000000000003EACA" class="calibre18 pcalibre pcalibre1"><code id="P700049702700000000000000003EACB" data-uri="chapter02.xhtml#P700049702700000000000000003EACB" class="calibre10 pcalibre pcalibre1">x</code></th>
<th colspan="2" id="P700049702700000000000000003EACC" data-uri="chapter02.xhtml#P700049702700000000000000003EACC" class="calibre18 pcalibre pcalibre1"><code id="P700049702700000000000000003EACD" data-uri="chapter02.xhtml#P700049702700000000000000003EACD" class="calibre10 pcalibre pcalibre1">x &lt;&lt; 3</code></th>
<th colspan="2" id="P700049702700000000000000003EACE" data-uri="chapter02.xhtml#P700049702700000000000000003EACE" class="calibre18 pcalibre pcalibre1">Logical <code id="P700049702700000000000000003EACF" data-uri="chapter02.xhtml#P700049702700000000000000003EACF" class="calibre10 pcalibre pcalibre1">x &gt;&gt; 2</code></th>
<th colspan="2" id="P700049702700000000000000003EAD0" data-uri="chapter02.xhtml#P700049702700000000000000003EAD0" class="calibre18 pcalibre pcalibre1">Arithmetic <code id="P700049702700000000000000003EAD1" data-uri="chapter02.xhtml#P700049702700000000000000003EAD1" class="calibre10 pcalibre pcalibre1">x &gt;&gt; 2</code></th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000003EAD2" data-uri="chapter02.xhtml#P700049702700000000000000003EAD2" class="calibre18 pcalibre pcalibre1">Hex</th>
<th id="P700049702700000000000000003EAD3" data-uri="chapter02.xhtml#P700049702700000000000000003EAD3" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003EAD4" data-uri="chapter02.xhtml#P700049702700000000000000003EAD4" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003EAD5" data-uri="chapter02.xhtml#P700049702700000000000000003EAD5" class="calibre18 pcalibre pcalibre1">Hex</th>
<th id="P700049702700000000000000003EAD6" data-uri="chapter02.xhtml#P700049702700000000000000003EAD6" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003EAD7" data-uri="chapter02.xhtml#P700049702700000000000000003EAD7" class="calibre18 pcalibre pcalibre1">Hex</th>
<th id="P700049702700000000000000003EAD8" data-uri="chapter02.xhtml#P700049702700000000000000003EAD8" class="calibre18 pcalibre pcalibre1">Binary</th>
<th id="P700049702700000000000000003EAD9" data-uri="chapter02.xhtml#P700049702700000000000000003EAD9" class="calibre18 pcalibre pcalibre1">Hex</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EADA" data-uri="chapter02.xhtml#P700049702700000000000000003EADA" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EADB" data-uri="chapter02.xhtml#P700049702700000000000000003EADB" class="calibre10 pcalibre pcalibre1">0xC3</code></td>
<td id="P700049702700000000000000003EADC" data-uri="chapter02.xhtml#P700049702700000000000000003EADC" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EADD" data-uri="chapter02.xhtml#P700049702700000000000000003EADD" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EADE" data-uri="chapter02.xhtml#P700049702700000000000000003EADE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EADF" data-uri="chapter02.xhtml#P700049702700000000000000003EADF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE0" data-uri="chapter02.xhtml#P700049702700000000000000003EAE0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE1" data-uri="chapter02.xhtml#P700049702700000000000000003EAE1" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE2" data-uri="chapter02.xhtml#P700049702700000000000000003EAE2" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAE3" data-uri="chapter02.xhtml#P700049702700000000000000003EAE3" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EAE4" data-uri="chapter02.xhtml#P700049702700000000000000003EAE4" class="calibre10 pcalibre pcalibre1">0x75</code></td>
<td id="P700049702700000000000000003EAE5" data-uri="chapter02.xhtml#P700049702700000000000000003EAE5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE6" data-uri="chapter02.xhtml#P700049702700000000000000003EAE6" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE7" data-uri="chapter02.xhtml#P700049702700000000000000003EAE7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE8" data-uri="chapter02.xhtml#P700049702700000000000000003EAE8" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAE9" data-uri="chapter02.xhtml#P700049702700000000000000003EAE9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAEA" data-uri="chapter02.xhtml#P700049702700000000000000003EAEA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAEB" data-uri="chapter02.xhtml#P700049702700000000000000003EAEB" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAEC" data-uri="chapter02.xhtml#P700049702700000000000000003EAEC" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EAED" data-uri="chapter02.xhtml#P700049702700000000000000003EAED" class="calibre10 pcalibre pcalibre1">0x87</code></td>
<td id="P700049702700000000000000003EAEE" data-uri="chapter02.xhtml#P700049702700000000000000003EAEE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAEF" data-uri="chapter02.xhtml#P700049702700000000000000003EAEF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF0" data-uri="chapter02.xhtml#P700049702700000000000000003EAF0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF1" data-uri="chapter02.xhtml#P700049702700000000000000003EAF1" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF2" data-uri="chapter02.xhtml#P700049702700000000000000003EAF2" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF3" data-uri="chapter02.xhtml#P700049702700000000000000003EAF3" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF4" data-uri="chapter02.xhtml#P700049702700000000000000003EAF4" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000003EAF5" data-uri="chapter02.xhtml#P700049702700000000000000003EAF5" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000003EAF6" data-uri="chapter02.xhtml#P700049702700000000000000003EAF6" class="calibre10 pcalibre pcalibre1">0x66</code></td>
<td id="P700049702700000000000000003EAF7" data-uri="chapter02.xhtml#P700049702700000000000000003EAF7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF8" data-uri="chapter02.xhtml#P700049702700000000000000003EAF8" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAF9" data-uri="chapter02.xhtml#P700049702700000000000000003EAF9" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAFA" data-uri="chapter02.xhtml#P700049702700000000000000003EAFA" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAFB" data-uri="chapter02.xhtml#P700049702700000000000000003EAFB" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAFC" data-uri="chapter02.xhtml#P700049702700000000000000003EAFC" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P700049702700000000000000003EAFD" data-uri="chapter02.xhtml#P700049702700000000000000003EAFD" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table></div></li></ol>
</section>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000769" data-uri="chapter02.xhtml#P7000497027000000000000000000769"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003EAFE" data-uri="chapter02.xhtml#P700049702700000000000000003EAFE" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000076B" title="59" data-uri="chapter02.xhtml#P700049702700000000000000000076B" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Shifting by <var class="calibre5 pcalibre pcalibre1">k</var>, for large values of <var class="calibre5 pcalibre pcalibre1">k</var></h1></header>
<p id="P700049702700000000000000003EAFF" data-uri="chapter02.xhtml#P700049702700000000000000003EAFF" class="calibre13 pcalibre pcalibre1">For a data type consisting of <var class="calibre5 pcalibre pcalibre1">w</var> bits, what should be the effect of shifting by some value <var class="calibre5 pcalibre pcalibre1">k</var> ≥ <var class="calibre5 pcalibre pcalibre1">w</var>? For example, what should be the effect of computing the following expressions, assuming data type <code id="P700049702700000000000000003EB00" data-uri="chapter02.xhtml#P700049702700000000000000003EB00" class="pcalibre1 calibre8 pcalibre">int</code> has <var class="calibre5 pcalibre pcalibre1">w</var> = 32:</p>
<pre id="P700049702700000000000000003EB01" data-uri="chapter02.xhtml#P700049702700000000000000003EB01" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003EB02" data-uri="chapter02.xhtml#P700049702700000000000000003EB02" class="calibre10 pcalibre pcalibre1">
  int lval = 0xFEDCBA98 &lt;&lt; 32;
  int aval = 0xFEDCBA98 &gt;&gt; 36;
  unsigned uval = 0xFEDCBA98u &gt;&gt; 40;
</code></pre>
<p id="P700049702700000000000000003EB03" data-uri="chapter02.xhtml#P700049702700000000000000003EB03" class="calibre13 pcalibre pcalibre1">The C standards carefully avoid stating what should be done in such a case. On many machines, the shift instructions consider only the lower log<sub class="pcalibre1 calibre47 pcalibre">2</sub> <var class="calibre5 pcalibre pcalibre1">w</var> bits of the shift amount when shifting a <var class="calibre5 pcalibre pcalibre1">w</var>-bit value, and so the shift amount is computed as <var class="calibre5 pcalibre pcalibre1">k</var> mod <var class="calibre5 pcalibre pcalibre1">w</var>. For example, with <var class="calibre5 pcalibre pcalibre1">w</var> = 32, the above three shifts would be computed as if they were by amounts 0, 4, and 8, respectively, giving results</p>
<pre id="P700049702700000000000000003EB04" data-uri="chapter02.xhtml#P700049702700000000000000003EB04" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003EB05" data-uri="chapter02.xhtml#P700049702700000000000000003EB05" class="calibre10 pcalibre pcalibre1">
lval	0xFEDCBA98
aval	0xFFEDCBA9
uval	0x00FEDCBA
</code></pre>
<p class="calibre13 pcalibre pcalibre1" id="P700049702700000000000000003EB06" data-uri="chapter02.xhtml#P700049702700000000000000003EB06">This behavior is not guaranteed for C programs, however, and so shift amounts should be kept less than the word size.</p>
<p id="P700049702700000000000000003EB07" data-uri="chapter02.xhtml#P700049702700000000000000003EB07" class="pcalibre calibre3 pcalibre1">Java, on the other hand, specifically requires that shift amounts should be computed in the modular fashion we have shown.</p>
</aside>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000775" data-uri="chapter02.xhtml#P7000497027000000000000000000775"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003EB08" data-uri="chapter02.xhtml#P700049702700000000000000003EB08" epub:type="title"><span class="pcalibre label1 pcalibre1">Aside </span>Operator precedence issues with shift operations</h1></header>
<p id="P700049702700000000000000003EB09" data-uri="chapter02.xhtml#P700049702700000000000000003EB09" class="calibre13 pcalibre pcalibre1">It might be tempting to write the expression <code id="P700049702700000000000000003EB0A" data-uri="chapter02.xhtml#P700049702700000000000000003EB0A" class="pcalibre1 calibre8 pcalibre">1&lt;&lt;2 + 3&lt;&lt;4</code>, intending it to mean <code id="P700049702700000000000000003EB0B" data-uri="chapter02.xhtml#P700049702700000000000000003EB0B" class="pcalibre1 calibre8 pcalibre">(1&lt;&lt;2) + (3&lt;&lt;4)</code>. However, in C the former expression is equivalent to <code id="P700049702700000000000000003EB0C" data-uri="chapter02.xhtml#P700049702700000000000000003EB0C" class="pcalibre1 calibre8 pcalibre">1 &lt;&lt; (2+3) &lt;&lt; 4</code>, since addition (and subtraction) have higher precedence than shifts. The left-to-right associativity rule then causes this to be parenthesized as <code id="P700049702700000000000000003EB0D" data-uri="chapter02.xhtml#P700049702700000000000000003EB0D" class="pcalibre1 calibre8 pcalibre">(1 &lt;&lt; (2+3)) &lt;&lt; 4</code>, giving value 512, rather than the intended 52.</p>
<p id="P700049702700000000000000003EB0E" data-uri="chapter02.xhtml#P700049702700000000000000003EB0E" class="pcalibre calibre3 pcalibre1">Getting the precedence wrong in C expressions is a common source of program errors, and often these are difficult to spot by inspection. When in doubt, put in parentheses!</p>
</aside>
</section>
</section></body></html>
