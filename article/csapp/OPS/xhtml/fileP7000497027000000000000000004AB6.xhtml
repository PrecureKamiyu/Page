<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>5.6 Eliminating Unneeded Memory References</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000004AB6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004320A" data-uri="chapter05.xhtml#P700049702700000000000000004320A" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004AB8" title="514" data-uri="chapter05.xhtml#P7000497027000000000000000004AB8" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">5.6 </span>Eliminating Unneeded Memory References</h1></header>
<p id="P700049702700000000000000004320B" data-uri="chapter05.xhtml#P700049702700000000000000004320B" class="pcalibre1 pcalibre calibre2">The code for <code id="P700049702700000000000000004320C" data-uri="chapter05.xhtml#P700049702700000000000000004320C" class="pcalibre1 calibre8 pcalibre">combine3</code> accumulates the value being computed by the combining operation at the location designated by the pointer <code id="P700049702700000000000000004320D" data-uri="chapter05.xhtml#P700049702700000000000000004320D" class="pcalibre1 calibre8 pcalibre">dest</code>. This attribute can be seen by examining the assembly code generated for the inner loop of the compiled code. We show here the x86-64 code generated for data type <code id="P700049702700000000000000004320E" data-uri="chapter05.xhtml#P700049702700000000000000004320E" class="pcalibre1 calibre8 pcalibre">double</code> and with multiplication as the combining operation:</p>
<pre id="P700049702700000000000000004320F" data-uri="chapter05.xhtml#P700049702700000000000000004320F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043210" data-uri="chapter05.xhtml#P7000497027000000000000000043210" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of combine3. data_t = double, OP = *</i>
	<i class="calibre5 pcalibre pcalibre1">dest in %rbx, data+i in %rdx, data+length in %rax</i>
1	. L17:				<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	   vmovsd (<code id="P7000497027000000000000000043211" data-uri="chapter05.xhtml#P7000497027000000000000000043211" class="pcalibre1 calibre8 pcalibre">%rbx</code>), %xmm0		  <i class="calibre5 pcalibre pcalibre1">Read product from dest</i>
3	   vmulsd (%rdx), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">Multiply product by data[i]</i>
4	   vmovsd %xmm0, (%rbx)		  <i class="calibre5 pcalibre pcalibre1">Store product at dest</i>
5	   addq $8, %rdx		  <i class="calibre5 pcalibre pcalibre1">Increment data+i</i>
6	   cmpq %rax, %rdx		  <i class="calibre5 pcalibre pcalibre1">Compare to data+length</i>
7	   jne .L17			  <i class="calibre5 pcalibre pcalibre1">If !=, goto</i> loop
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043212" data-uri="chapter05.xhtml#P7000497027000000000000000043212">We see in this loop code that the address corresponding to pointer <code id="P7000497027000000000000000043213" data-uri="chapter05.xhtml#P7000497027000000000000000043213" class="pcalibre1 calibre8 pcalibre">dest</code> is held in register <code id="P7000497027000000000000000043214" data-uri="chapter05.xhtml#P7000497027000000000000000043214" class="pcalibre1 calibre8 pcalibre">%rbx</code>. It has also transformed the code to maintain a pointer to the <var class="calibre5 pcalibre pcalibre1">i</var>th data element in register <code id="P7000497027000000000000000043215" data-uri="chapter05.xhtml#P7000497027000000000000000043215" class="pcalibre1 calibre8 pcalibre">%rdx</code>, shown in the annotations as <code id="P7000497027000000000000000043216" data-uri="chapter05.xhtml#P7000497027000000000000000043216" class="pcalibre1 calibre8 pcalibre">data+i</code>. This pointer is incremented by 8 on every iteration. The loop termination is detected by comparing this pointer to one stored in register <code id="P7000497027000000000000000043217" data-uri="chapter05.xhtml#P7000497027000000000000000043217" class="pcalibre1 calibre8 pcalibre">%rax</code>. We can see that the accumulated value is read from and written to memory on each iteration. This reading and writing is wasteful, since the value read from <code id="P7000497027000000000000000043218" data-uri="chapter05.xhtml#P7000497027000000000000000043218" class="pcalibre1 calibre8 pcalibre">dest</code> at the beginning of each iteration should simply be the value written at the end of the previous iteration.</p>
<p id="P7000497027000000000000000043219" data-uri="chapter05.xhtml#P7000497027000000000000000043219" class="pcalibre1 pcalibre calibre2">We can eliminate this needless reading and writing of memory by rewriting the code in the style of <code id="P700049702700000000000000004321A" data-uri="chapter05.xhtml#P700049702700000000000000004321A" class="pcalibre1 calibre8 pcalibre">combine4</code> in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004AD0"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.10</span></a>. We introduce a temporary variable <code id="P700049702700000000000000004321B" data-uri="chapter05.xhtml#P700049702700000000000000004321B" class="pcalibre1 calibre8 pcalibre">acc</code> that is used in the loop to accumulate the computed value. The result is stored at <code id="P700049702700000000000000004321C" data-uri="chapter05.xhtml#P700049702700000000000000004321C" class="pcalibre1 calibre8 pcalibre">dest</code> only after the loop has been completed. As the assembly code that follows shows, the compiler can now use register <code id="P700049702700000000000000004321D" data-uri="chapter05.xhtml#P700049702700000000000000004321D" class="pcalibre1 calibre8 pcalibre">%xmm0</code> to hold the accumulated value. Compared to the loop in <code id="P700049702700000000000000004321E" data-uri="chapter05.xhtml#P700049702700000000000000004321E" class="pcalibre1 calibre8 pcalibre">combine3</code>, we have reduced the memory operations per iteration from two reads and one write to just a single read.</p>
<pre id="P700049702700000000000000004321F" data-uri="chapter05.xhtml#P700049702700000000000000004321F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043220" data-uri="chapter05.xhtml#P7000497027000000000000000043220" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of combine4. data_t = double, OP = *</i>
	<i class="calibre5 pcalibre pcalibre1">acc in %xmm0, data+i in %rdx, data+length in %rax</i>
1	.L25:				<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	  vmulsd (%rdx), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">Multiply acc by data[i]</i>
3	  addq $8, %rdx			  <i class="calibre5 pcalibre pcalibre1">Increment data+i</i>
4	  cmpq %rax, %rdx		  <i class="calibre5 pcalibre pcalibre1">Compare to data+length</i>
5	  jne .L25			  <i class="calibre5 pcalibre pcalibre1">If !=, goto</i> loop
</code></pre>
<p id="P7000497027000000000000000043221" data-uri="chapter05.xhtml#P7000497027000000000000000043221" class="pcalibre1 pcalibre calibre2">We see a significant improvement in program performance, as shown in the following table:</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004AD0" data-uri="chapter05.xhtml#P7000497027000000000000000004AD0">
<pre id="P7000497027000000000000000043222" data-uri="chapter05.xhtml#P7000497027000000000000000043222" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043223" data-uri="chapter05.xhtml#P7000497027000000000000000043223" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000004AD3" title="515" data-uri="chapter05.xhtml#P7000497027000000000000000004AD3" epub:type="pagebreak"></span>1	/* Accumulate result in local variable */
2	void combine4(vec_ptr v, data_t *dest)
3	{
4		long i;
5		long length = vec_length(v);
6		data_t *data = get_vec_start(v);
7		data_t acc = IDENT;
8	
9		for (i = 0; i &lt; length; i++) {
10			acc = acc OP data[i];
11		}
12		*dest = acc;
13	}
</code></pre>
<figcaption id="P7000497027000000000000000043224" data-uri="chapter05.xhtml#P7000497027000000000000000043224" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043225" data-uri="chapter05.xhtml#P7000497027000000000000000043225" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.10 </span>Accumulating result in temporary.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000043226" data-uri="chapter05.xhtml#P7000497027000000000000000043226"><p id="P7000497027000000000000000043227" data-uri="chapter05.xhtml#P7000497027000000000000000043227" class="pcalibre calibre3 pcalibre1">Holding the accumulated value in local variable <code id="P7000497027000000000000000043228" data-uri="chapter05.xhtml#P7000497027000000000000000043228" class="pcalibre1 calibre8 pcalibre">acc</code> (short for "accumulator") eliminates the need to retrieve it from memory and write back the updated value on every loop iteration.</p></div></figcaption></figure>

<table id="P7000497027000000000000000043229" data-uri="chapter05.xhtml#P7000497027000000000000000043229" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004322A" data-uri="chapter05.xhtml#P700049702700000000000000004322A" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004322B" data-uri="chapter05.xhtml#P700049702700000000000000004322B" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004322C" data-uri="chapter05.xhtml#P700049702700000000000000004322C" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P700049702700000000000000004322D" data-uri="chapter05.xhtml#P700049702700000000000000004322D" class="calibre18 pcalibre pcalibre1">Integer</th>
<th colspan="2" id="P700049702700000000000000004322E" data-uri="chapter05.xhtml#P700049702700000000000000004322E" class="calibre18 pcalibre pcalibre1">Floating point</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004322F" data-uri="chapter05.xhtml#P700049702700000000000000004322F" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P7000497027000000000000000043230" data-uri="chapter05.xhtml#P7000497027000000000000000043230" class="calibre18 pcalibre pcalibre1">Page</th>
<th id="P7000497027000000000000000043231" data-uri="chapter05.xhtml#P7000497027000000000000000043231" class="calibre18 pcalibre pcalibre1">Method</th>
<th id="P7000497027000000000000000043232" data-uri="chapter05.xhtml#P7000497027000000000000000043232" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043233" data-uri="chapter05.xhtml#P7000497027000000000000000043233" class="calibre18 pcalibre pcalibre1">*</th>
<th id="P7000497027000000000000000043234" data-uri="chapter05.xhtml#P7000497027000000000000000043234" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043235" data-uri="chapter05.xhtml#P7000497027000000000000000043235" class="calibre18 pcalibre pcalibre1">*</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043236" data-uri="chapter05.xhtml#P7000497027000000000000000043236" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043237" data-uri="chapter05.xhtml#P7000497027000000000000000043237" class="calibre10 pcalibre pcalibre1">combine3</code></td>
<td id="P7000497027000000000000000043238" data-uri="chapter05.xhtml#P7000497027000000000000000043238" class="calibre20 pcalibre pcalibre1">513</td>
<td id="P7000497027000000000000000043239" data-uri="chapter05.xhtml#P7000497027000000000000000043239" class="calibre20 pcalibre pcalibre1">Direct data access</td>
<td id="P700049702700000000000000004323A" data-uri="chapter05.xhtml#P700049702700000000000000004323A" class="calibre20 pcalibre pcalibre1">7.17</td>
<td id="P700049702700000000000000004323B" data-uri="chapter05.xhtml#P700049702700000000000000004323B" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P700049702700000000000000004323C" data-uri="chapter05.xhtml#P700049702700000000000000004323C" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P700049702700000000000000004323D" data-uri="chapter05.xhtml#P700049702700000000000000004323D" class="calibre20 pcalibre pcalibre1">11.03</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004323E" data-uri="chapter05.xhtml#P700049702700000000000000004323E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004323F" data-uri="chapter05.xhtml#P700049702700000000000000004323F" class="calibre10 pcalibre pcalibre1">combine4</code></td>
<td id="P7000497027000000000000000043240" data-uri="chapter05.xhtml#P7000497027000000000000000043240" class="calibre20 pcalibre pcalibre1">515</td>
<td id="P7000497027000000000000000043241" data-uri="chapter05.xhtml#P7000497027000000000000000043241" class="calibre20 pcalibre pcalibre1">Accumulate in temporary</td>
<td id="P7000497027000000000000000043242" data-uri="chapter05.xhtml#P7000497027000000000000000043242" class="calibre20 pcalibre pcalibre1">1.27</td>
<td id="P7000497027000000000000000043243" data-uri="chapter05.xhtml#P7000497027000000000000000043243" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043244" data-uri="chapter05.xhtml#P7000497027000000000000000043244" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043245" data-uri="chapter05.xhtml#P7000497027000000000000000043245" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
</tbody>
</table>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043246" data-uri="chapter05.xhtml#P7000497027000000000000000043246">All of our times improve by factors ranging from 2.2× to 5.7×, with the integer addition case dropping to just 1.27 clock cycles per element.</p>
<p id="P7000497027000000000000000043247" data-uri="chapter05.xhtml#P7000497027000000000000000043247" class="pcalibre1 pcalibre calibre2">Again, one might think that a compiler should be able to automatically transform the <code id="P7000497027000000000000000043248" data-uri="chapter05.xhtml#P7000497027000000000000000043248" class="pcalibre1 calibre8 pcalibre">combine3</code> code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004A83.xhtml#P7000497027000000000000000004A8A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.9</span></a> to accumulate the value in a register, as it does with the code for <code id="P7000497027000000000000000043249" data-uri="chapter05.xhtml#P7000497027000000000000000043249" class="pcalibre1 calibre8 pcalibre">combine4</code> shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004AD0"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.10</span></a>. In fact, however, the two functions can have different behaviors due to memory aliasing. Consider, for example, the case of integer data with multiplication as the operation and 1 as the identity element. Let <code id="P700049702700000000000000004324A" data-uri="chapter05.xhtml#P700049702700000000000000004324A" class="pcalibre1 calibre8 pcalibre">v</code> = [2, 3, 5] be a vector of three elements and consider the following two function calls:</p>
<pre id="P700049702700000000000000004324B" data-uri="chapter05.xhtml#P700049702700000000000000004324B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004324C" data-uri="chapter05.xhtml#P700049702700000000000000004324C" class="calibre10 pcalibre pcalibre1">
combine3(v, get_vec_start(v) + 2);
combine4(v, get_vec_start(v) + 2);
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004324D" data-uri="chapter05.xhtml#P700049702700000000000000004324D">That is, we create an alias between the last element of the vector and the destination for storing the result. The two functions would then execute as follows:</p>
<table id="P700049702700000000000000004324E" data-uri="chapter05.xhtml#P700049702700000000000000004324E" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004324F" data-uri="chapter05.xhtml#P700049702700000000000000004324F" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P7000497027000000000000000043250" data-uri="chapter05.xhtml#P7000497027000000000000000043250" class="calibre18 pcalibre pcalibre1">Initial</th>
<th id="P7000497027000000000000000043251" data-uri="chapter05.xhtml#P7000497027000000000000000043251" class="calibre18 pcalibre pcalibre1">Before loop</th>
<th id="P7000497027000000000000000043252" data-uri="chapter05.xhtml#P7000497027000000000000000043252" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000043253" data-uri="chapter05.xhtml#P7000497027000000000000000043253" class="calibre10 pcalibre pcalibre1">i</code> =0</th>
<th id="P7000497027000000000000000043254" data-uri="chapter05.xhtml#P7000497027000000000000000043254" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000043255" data-uri="chapter05.xhtml#P7000497027000000000000000043255" class="calibre10 pcalibre pcalibre1">i</code> =1</th>
<th id="P7000497027000000000000000043256" data-uri="chapter05.xhtml#P7000497027000000000000000043256" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000043257" data-uri="chapter05.xhtml#P7000497027000000000000000043257" class="calibre10 pcalibre pcalibre1">i</code> =2</th>
<th id="P7000497027000000000000000043258" data-uri="chapter05.xhtml#P7000497027000000000000000043258" class="calibre18 pcalibre pcalibre1">Final</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043259" data-uri="chapter05.xhtml#P7000497027000000000000000043259" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004325A" data-uri="chapter05.xhtml#P700049702700000000000000004325A" class="calibre10 pcalibre pcalibre1">combine3</code></td>
<td id="P700049702700000000000000004325B" data-uri="chapter05.xhtml#P700049702700000000000000004325B" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P700049702700000000000000004325C" data-uri="chapter05.xhtml#P700049702700000000000000004325C" class="calibre20 pcalibre pcalibre1">[2, 3, 1]</td>
<td id="P700049702700000000000000004325D" data-uri="chapter05.xhtml#P700049702700000000000000004325D" class="calibre20 pcalibre pcalibre1">[2, 3, 2]</td>
<td id="P700049702700000000000000004325E" data-uri="chapter05.xhtml#P700049702700000000000000004325E" class="calibre20 pcalibre pcalibre1">[2, 3, 6]</td>
<td id="P700049702700000000000000004325F" data-uri="chapter05.xhtml#P700049702700000000000000004325F" class="calibre20 pcalibre pcalibre1">[2, 3, 36]</td>
<td id="P7000497027000000000000000043260" data-uri="chapter05.xhtml#P7000497027000000000000000043260" class="calibre20 pcalibre pcalibre1">[2, 3, 36]</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043261" data-uri="chapter05.xhtml#P7000497027000000000000000043261" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043262" data-uri="chapter05.xhtml#P7000497027000000000000000043262" class="calibre10 pcalibre pcalibre1">combine4</code></td>
<td id="P7000497027000000000000000043263" data-uri="chapter05.xhtml#P7000497027000000000000000043263" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P7000497027000000000000000043264" data-uri="chapter05.xhtml#P7000497027000000000000000043264" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P7000497027000000000000000043265" data-uri="chapter05.xhtml#P7000497027000000000000000043265" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P7000497027000000000000000043266" data-uri="chapter05.xhtml#P7000497027000000000000000043266" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P7000497027000000000000000043267" data-uri="chapter05.xhtml#P7000497027000000000000000043267" class="calibre20 pcalibre pcalibre1">[2, 3, 5]</td>
<td id="P7000497027000000000000000043268" data-uri="chapter05.xhtml#P7000497027000000000000000043268" class="calibre20 pcalibre pcalibre1">[2, 3, 30]</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000043269" data-uri="chapter05.xhtml#P7000497027000000000000000043269" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004B1A" title="516" data-uri="chapter05.xhtml#P7000497027000000000000000004B1A" epub:type="pagebreak"></span>As shown previously, <code id="P700049702700000000000000004326A" data-uri="chapter05.xhtml#P700049702700000000000000004326A" class="pcalibre1 calibre8 pcalibre">combine3</code> accumulates its result at the destination, which in this case is the final vector element. This value is therefore set first to 1, then to 2 · 1 = 2, and then to 3 · 2 = 6. On the last iteration, this value is then multiplied by itself to yield a final value of 36. For the case of <code id="P700049702700000000000000004326B" data-uri="chapter05.xhtml#P700049702700000000000000004326B" class="pcalibre1 calibre8 pcalibre">combine4</code>, the vector remains unchanged until the end, when the final element is set to the computed result 1 · 2 · 3 · 5 = 30.</p>
<p id="P700049702700000000000000004326C" data-uri="chapter05.xhtml#P700049702700000000000000004326C" class="pcalibre1 pcalibre calibre2">Of course, our example showing the distinction between <code id="P700049702700000000000000004326D" data-uri="chapter05.xhtml#P700049702700000000000000004326D" class="pcalibre1 calibre8 pcalibre">combine3</code> and <code id="P700049702700000000000000004326E" data-uri="chapter05.xhtml#P700049702700000000000000004326E" class="pcalibre1 calibre8 pcalibre">combine4</code> is highly contrived. One could argue that the behavior of <code id="P700049702700000000000000004326F" data-uri="chapter05.xhtml#P700049702700000000000000004326F" class="pcalibre1 calibre8 pcalibre">combine4</code> more closely matches the intention of the function description. Unfortunately, a compiler cannot make a judgment about the conditions under which a function might be used and what the programmer's intentions might be. Instead, when given <code id="P7000497027000000000000000043270" data-uri="chapter05.xhtml#P7000497027000000000000000043270" class="pcalibre1 calibre8 pcalibre">combine3</code> to compile, the conservative approach is to keep reading and writing memory, even though this is less efficient.</p>
<section id="P7000497027000000000000000004B22" data-uri="chapter05.xhtml#P7000497027000000000000000004B22" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043271" data-uri="chapter05.xhtml#P7000497027000000000000000043271" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">5.4 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000050E4.xhtml#P70004970270000000000000000050F8">574</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000043272" data-uri="chapter05.xhtml#P7000497027000000000000000043272">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000043273" data-uri="chapter05.xhtml#P7000497027000000000000000043273">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000043274" data-uri="chapter05.xhtml#P7000497027000000000000000043274"><p id="P7000497027000000000000000043275" data-uri="chapter05.xhtml#P7000497027000000000000000043275" class="pcalibre calibre3 pcalibre1">When we use <span class="smallcaps pcalibre pcalibre1">gcc </span>to compile <code id="P7000497027000000000000000043276" data-uri="chapter05.xhtml#P7000497027000000000000000043276" class="pcalibre1 calibre8 pcalibre">combine3</code> with command-line option <code id="P7000497027000000000000000043277" data-uri="chapter05.xhtml#P7000497027000000000000000043277" class="pcalibre1 calibre8 pcalibre">−02</code>, we get code with substantially better CPE performance than with <code id="P7000497027000000000000000043278" data-uri="chapter05.xhtml#P7000497027000000000000000043278" class="pcalibre1 calibre8 pcalibre">−01</code>:</p>
<table id="P7000497027000000000000000043279" data-uri="chapter05.xhtml#P7000497027000000000000000043279" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004327A" data-uri="chapter05.xhtml#P700049702700000000000000004327A" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004327B" data-uri="chapter05.xhtml#P700049702700000000000000004327B" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004327C" data-uri="chapter05.xhtml#P700049702700000000000000004327C" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P700049702700000000000000004327D" data-uri="chapter05.xhtml#P700049702700000000000000004327D" class="calibre18 pcalibre pcalibre1">Integer</th>
<th colspan="2" id="P700049702700000000000000004327E" data-uri="chapter05.xhtml#P700049702700000000000000004327E" class="calibre18 pcalibre pcalibre1">Floating point</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004327F" data-uri="chapter05.xhtml#P700049702700000000000000004327F" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P7000497027000000000000000043280" data-uri="chapter05.xhtml#P7000497027000000000000000043280" class="calibre18 pcalibre pcalibre1">Page</th>
<th id="P7000497027000000000000000043281" data-uri="chapter05.xhtml#P7000497027000000000000000043281" class="calibre18 pcalibre pcalibre1">Method</th>
<th id="P7000497027000000000000000043282" data-uri="chapter05.xhtml#P7000497027000000000000000043282" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043283" data-uri="chapter05.xhtml#P7000497027000000000000000043283" class="calibre18 pcalibre pcalibre1">*</th>
<th id="P7000497027000000000000000043284" data-uri="chapter05.xhtml#P7000497027000000000000000043284" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P7000497027000000000000000043285" data-uri="chapter05.xhtml#P7000497027000000000000000043285" class="calibre18 pcalibre pcalibre1">*</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043286" data-uri="chapter05.xhtml#P7000497027000000000000000043286" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043287" data-uri="chapter05.xhtml#P7000497027000000000000000043287" class="calibre10 pcalibre pcalibre1">combine3</code></td>
<td id="P7000497027000000000000000043288" data-uri="chapter05.xhtml#P7000497027000000000000000043288" class="calibre20 pcalibre pcalibre1">513</td>
<td id="P7000497027000000000000000043289" data-uri="chapter05.xhtml#P7000497027000000000000000043289" class="calibre20 pcalibre pcalibre1">Compiled <code id="P700049702700000000000000004328A" data-uri="chapter05.xhtml#P700049702700000000000000004328A" class="calibre10 pcalibre pcalibre1">−01</code></td>
<td id="P700049702700000000000000004328B" data-uri="chapter05.xhtml#P700049702700000000000000004328B" class="calibre20 pcalibre pcalibre1">7.17</td>
<td id="P700049702700000000000000004328C" data-uri="chapter05.xhtml#P700049702700000000000000004328C" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P700049702700000000000000004328D" data-uri="chapter05.xhtml#P700049702700000000000000004328D" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P700049702700000000000000004328E" data-uri="chapter05.xhtml#P700049702700000000000000004328E" class="calibre20 pcalibre pcalibre1">11.03</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004328F" data-uri="chapter05.xhtml#P700049702700000000000000004328F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043290" data-uri="chapter05.xhtml#P7000497027000000000000000043290" class="calibre10 pcalibre pcalibre1">combine3</code></td>
<td id="P7000497027000000000000000043291" data-uri="chapter05.xhtml#P7000497027000000000000000043291" class="calibre20 pcalibre pcalibre1">513</td>
<td id="P7000497027000000000000000043292" data-uri="chapter05.xhtml#P7000497027000000000000000043292" class="calibre20 pcalibre pcalibre1">Compiled <code id="P7000497027000000000000000043293" data-uri="chapter05.xhtml#P7000497027000000000000000043293" class="calibre10 pcalibre pcalibre1">−02</code></td>
<td id="P7000497027000000000000000043294" data-uri="chapter05.xhtml#P7000497027000000000000000043294" class="calibre20 pcalibre pcalibre1">1.60</td>
<td id="P7000497027000000000000000043295" data-uri="chapter05.xhtml#P7000497027000000000000000043295" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043296" data-uri="chapter05.xhtml#P7000497027000000000000000043296" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P7000497027000000000000000043297" data-uri="chapter05.xhtml#P7000497027000000000000000043297" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043298" data-uri="chapter05.xhtml#P7000497027000000000000000043298" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043299" data-uri="chapter05.xhtml#P7000497027000000000000000043299" class="calibre10 pcalibre pcalibre1">combine4</code></td>
<td id="P700049702700000000000000004329A" data-uri="chapter05.xhtml#P700049702700000000000000004329A" class="calibre20 pcalibre pcalibre1">515</td>
<td id="P700049702700000000000000004329B" data-uri="chapter05.xhtml#P700049702700000000000000004329B" class="calibre20 pcalibre pcalibre1">Accumulate in temporary</td>
<td id="P700049702700000000000000004329C" data-uri="chapter05.xhtml#P700049702700000000000000004329C" class="calibre20 pcalibre pcalibre1">1.27</td>
<td id="P700049702700000000000000004329D" data-uri="chapter05.xhtml#P700049702700000000000000004329D" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P700049702700000000000000004329E" data-uri="chapter05.xhtml#P700049702700000000000000004329E" class="calibre20 pcalibre pcalibre1">3.01</td>
<td id="P700049702700000000000000004329F" data-uri="chapter05.xhtml#P700049702700000000000000004329F" class="calibre20 pcalibre pcalibre1">5.01</td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000432A0" data-uri="chapter05.xhtml#P70004970270000000000000000432A0" class="pcalibre calibre3 pcalibre1">We achieve performance comparable to that for <code id="P70004970270000000000000000432A1" data-uri="chapter05.xhtml#P70004970270000000000000000432A1" class="pcalibre1 calibre8 pcalibre">combine4</code>, except for the case of integer sum, but even it improves significantly. On examining the assembly code generated by the compiler, we find an interesting variant for the inner loop:</p>
<pre id="P70004970270000000000000000432A2" data-uri="chapter05.xhtml#P70004970270000000000000000432A2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000432A3" data-uri="chapter05.xhtml#P70004970270000000000000000432A3" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of combine3. data_t = double, OP = *. Compiled −02</i>
	<i class="calibre5 pcalibre pcalibre1">dest in %rbx, data+i in %rdx, data+length in %rax</i>
	<i class="calibre5 pcalibre pcalibre1">Accumulated product in %xmm0</i>
1	.L22:				<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	  vmulsd (%rdx), %xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Multiply product by data[i]</i>
3	  addq $8, %rdx			<i class="calibre5 pcalibre pcalibre1">Increment data+i</i>
4	  cmpq %rax, %rdx		<i class="calibre5 pcalibre pcalibre1">Compare to data+length</i>
5	  vmovsd %xmm0, (%rbx)		<i class="calibre5 pcalibre pcalibre1">Store product at dest</i>
6	  jne .L22			<i class="calibre5 pcalibre pcalibre1">If !=, goto</i> loop
</code></pre>
</div></li>
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000432A4" data-uri="chapter05.xhtml#P70004970270000000000000000432A4">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000432A5" data-uri="chapter05.xhtml#P70004970270000000000000000432A5"><p id="P70004970270000000000000000432A6" data-uri="chapter05.xhtml#P70004970270000000000000000432A6" class="pcalibre calibre3 pcalibre1">We can compare this to the version created with optimization level 1:</p>
<pre id="P70004970270000000000000000432A7" data-uri="chapter05.xhtml#P70004970270000000000000000432A7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000432A8" data-uri="chapter05.xhtml#P70004970270000000000000000432A8" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of combine3. data_t = double, OP = *. Compiled −01</i>
	<i class="calibre5 pcalibre pcalibre1">dest in %rbx, data+i in %rdx, data+length in %rax</i>
1	.L17:				<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	  vmovsd (%rbx), %xmm0		  <i class="calibre5 pcalibre pcalibre1">Read product from dest</i>
3	  vmulsd (%rdx), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">Multiply product by data[i]</i>
4	  vmovsd %xmm0, (%rbx)		  <i class="calibre5 pcalibre pcalibre1">Store product at dest</i>
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004B5B" title="517" data-uri="chapter05.xhtml#P7000497027000000000000000004B5B" epub:type="pagebreak"></span>5	  addq $8, %rdx			  <i class="calibre5 pcalibre pcalibre1">Increment data+i</i>
6	  cmpq %rax, %rdx		  <i class="calibre5 pcalibre pcalibre1">Compare to data+length</i>
7	  jne .L17			  <i class="calibre5 pcalibre pcalibre1">If !=, goto</i> loop
</code></pre>
</div></li>
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000432A9" data-uri="chapter05.xhtml#P70004970270000000000000000432A9">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000432AA" data-uri="chapter05.xhtml#P70004970270000000000000000432AA"><p id="P70004970270000000000000000432AB" data-uri="chapter05.xhtml#P70004970270000000000000000432AB" class="pcalibre calibre3 pcalibre1">We see that, besides some reordering of instructions, the only difference is that the more optimized version does not contain the <code id="P70004970270000000000000000432AC" data-uri="chapter05.xhtml#P70004970270000000000000000432AC" class="pcalibre1 calibre8 pcalibre">vmovsd</code> implementing the read from the location designated by <code id="P70004970270000000000000000432AD" data-uri="chapter05.xhtml#P70004970270000000000000000432AD" class="pcalibre1 calibre8 pcalibre">dest</code> (line 2).</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000432AE" data-uri="chapter05.xhtml#P70004970270000000000000000432AE">
<li id="P70004970270000000000000000432AF" data-uri="chapter05.xhtml#P70004970270000000000000000432AF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000432B0" data-uri="chapter05.xhtml#P70004970270000000000000000432B0" class="pcalibre calibre3 pcalibre1">How does the role of register <code id="P70004970270000000000000000432B1" data-uri="chapter05.xhtml#P70004970270000000000000000432B1" class="pcalibre1 calibre8 pcalibre">%xmm0</code> differ in these two loops?</p></li>
<li id="P70004970270000000000000000432B2" data-uri="chapter05.xhtml#P70004970270000000000000000432B2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000432B3" data-uri="chapter05.xhtml#P70004970270000000000000000432B3" class="pcalibre calibre3 pcalibre1">Will the more optimized version faithfully implement the C code of <code id="P70004970270000000000000000432B4" data-uri="chapter05.xhtml#P70004970270000000000000000432B4" class="pcalibre1 calibre8 pcalibre">combine3</code>, including when there is memory aliasing between <code id="P70004970270000000000000000432B5" data-uri="chapter05.xhtml#P70004970270000000000000000432B5" class="pcalibre1 calibre8 pcalibre">dest</code> and the vector data?</p></li>
<li id="P70004970270000000000000000432B6" data-uri="chapter05.xhtml#P70004970270000000000000000432B6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000432B7" data-uri="chapter05.xhtml#P70004970270000000000000000432B7" class="pcalibre calibre3 pcalibre1">Either explain why this optimization preserves the desired behavior, or give an example where it would produce different results than the less optimized code.</p></li>
</ol></div></li>
</ol>
</section>
<p id="P70004970270000000000000000432B8" data-uri="chapter05.xhtml#P70004970270000000000000000432B8" class="pcalibre1 pcalibre calibre2">With this final transformation, we reached a point where we require just 1.25-5 clock cycles for each element to be computed. This is a considerable improvement over the original 9-11 cycles when we first enabled optimization. We would now like to see just what factors are constraining the performance of our code and how we can improve things even further.</p>
</section></body></html>
