<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>6.8   Extended E-R Features</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part138.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part140.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 10pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">6.8   <span style=" color: #00AEEF;">Extended E-R Features</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Although the basic <span class="s44">E-R </span>concepts can model most database features, some aspects of a database may be more aptly expressed by certain extensions to the basic <span class="s44">E-R </span>model. In this section, we discuss the extended <span class="s44">E-R </span>features of specialization, generalization, higher- and lower-level entity sets, attribute inheritance, and aggregation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To help with the discussions, we shall use a slightly more elaborate database schema for the university. In particular, we shall model the various people within a university by deﬁning an entity set <i>person</i>, with attributes <span class="s69">ID</span>, <i>name</i>, <i>street</i>, and <i>city</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.8.1 Specialization</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">An entity set may include subgroupings of entities that are distinct in some way from other entities in the set. For instance, a subset of entities within an entity set may have attributes that are not shared by all the entities in the entity set. The <span class="s44">E-R </span>model provides a means for representing these distinctive entity groupings.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">As an example, the entity set <i>person </i>may be further classiﬁed as one of the follow-</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">ing:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s13">employee</span><span class="p">.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s13">student</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Each of these person types is described by a set of attributes that includes all the at- tributes of entity set <i>person </i>plus possibly additional attributes. For example, <i>employee </i>entities may be described further by the attribute <i>salary</i>, whereas <i>student </i>entities may</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1706.png"/></span></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">be described further by the attribute <i>tot cred</i>. The process of designating subgroupings within an entity set is called <span class="s63">specialization</span>. The specialization of <i>person </i>allows us to distinguish among person entities according to whether they correspond to employees or students: in general, a person could be an employee, a student, both, or neither.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As another example, suppose the university divides students into two categories: graduate and undergraduate. Graduate students have an oﬃce assigned to them. Un- dergraduate students are assigned to a residential college. Each of these student types is described by a set of attributes that includes all the attributes of the entity set <i>student </i>plus additional attributes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1707.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1708.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1709.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can apply specialization repeatedly to reﬁne a design. The university could create two specializations of <i>student</i>, namely <i>graduate </i>and <i>undergraduate</i>. As we saw earlier, student entities are described by the attributes <span class="s69">ID</span>, <i>name</i>, <i>street, city</i>, and <i>tot cred</i>. The entity set <i>graduate </i>would have all the attributes of <i>student </i>and an additional attribute <i>oﬃce number</i>. The entity set <i>undergraduate </i>would have all the attributes of <i>student</i>, and an additional attribute <i>residential college</i>. As another example, university employees may be further classiﬁed as one of <i>instructor </i>or <i>secretary</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1710.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1711.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1712.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Each of these employee types is described by a set of attributes that includes all the attributes of entity set <i>employee </i>plus additional attributes. For example, <i>instructor </i>enti- ties may be described further by the attribute <i>rank </i>while <i>secretary </i>entities are described by the attribute <i>hours per week</i>. Further, <i>secretary </i>entities may participate in a relation- ship <i>secretary for </i>between the <i>secretary </i>and <i>employee </i>entity sets, which identiﬁes the employees who are assisted by a secretary.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1713.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1714.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1715.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">An entity set may be specialized by more than one distinguishing feature. In our example, the distinguishing feature among employee entities is the job the employee performs. Another, coexistent, specialization could be based on whether the person is a temporary (limited term) employee or a permanent employee, resulting in the entity sets <i>temporary employee </i>and <i>permanent employee</i>. When more than one specialization is formed on an entity set, a particular entity may belong to multiple specializations. For instance, a given employee may be a temporary employee who is a secretary.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In terms of an <span class="s44">E-R </span>diagram, specialization is depicted by a hollow arrow-head point- ing from the specialized entity to the other entity (see Figure 6.18). We refer to this re- lationship as the <span class="s44">ISA </span>relationship, which stands for “is a” and represents, for example, that an instructor “is a” employee.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The way we depict specialization in an <span class="s44">E-R </span>diagram depends on whether an en- tity may belong to multiple specialized entity sets or if it must belong to at most one specialized entity set. The former case (multiple sets permitted) is called <span class="s63">overlapping specialization</span>, while the latter case (at most one permitted) is called <span class="s63">disjoint special- ization</span>. For an overlapping specialization (as is the case for <i>student </i>and <i>employee </i>as specializations of <i>person</i>), two separate arrows are used. For a disjoint specialization (as is the case for <i>instructor </i>and <i>secretary </i>as specializations of <i>employee</i>), a single arrow is used. The specialization relationship may also be referred to as a <span class="s63">superclass-subclass </span>relationship. Higher- and lower-level entity sets are depicted as regular entity sets— that is, as rectangles containing the name of the entity set.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s200" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">rank</p><p class="s200" style="padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">hours_ per_week</p><p class="s258" style="padding-left: 215pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="27" height="38" alt="image" src="Image_1716.png"/></span></p><p class="s69" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">employee</p><p style="text-indent: 0pt;text-align: left;"/><p class="s201" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ID</p><p class="s200" style="padding-left: 4pt;text-indent: 0pt;text-align: justify;">name street city</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">person</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="29" height="38" alt="image" src="Image_1717.png"/></span></p><p class="s69" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">student</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="119" height="50" alt="image" src="Image_1718.png"/></span></p><p class="s69" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">secretary</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">instructor</p><p style="text-indent: 0pt;text-align: left;"/><p class="s200" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">tot_credits</p><p style="text-indent: 0pt;text-align: left;"/><p class="s200" style="padding-left: 3pt;text-indent: 0pt;text-align: left;">salary</p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 203pt;text-indent: 0pt;text-align: left;">Figure 6.18 <span class="s74">Specialization and generalization.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.8.2 Generalization</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The reﬁnement from an initial entity set into successive levels of entity subgroupings represents a <span class="s63">top-down </span>design process in which distinctions are made explicit. The design process may also proceed in a <span class="s63">bottom-up </span>manner, in which multiple entity sets are synthesized into a higher-level entity set on the basis of common features. The database designer may have ﬁrst identiﬁed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1719.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1720.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1721.png"/></span></p><p class="s13" style="padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>instructor <span class="p">entity set with attributes </span>instructor id<span class="p">, </span>instructor name<span class="p">, </span>instructor salary<span class="p">, and </span>rank<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1722.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1723.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1724.png"/></span></p><p class="s13" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span class="s39">• </span>secretary <span class="p">entity set with attributes </span>secretary id<span class="p">, </span>secretary name<span class="p">, </span>secretary salary<span class="p">, and</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1725.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1726.png"/></span></p><p class="s13" style="padding-left: 139pt;text-indent: 0pt;line-height: 13pt;text-align: left;">hours per week<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There are similarities between the <i>instructor </i>entity set and the <i>secretary </i>entity set in the sense that they have several attributes that are conceptually the same across the two entity sets: namely, the identiﬁer, name, and salary attributes. This commonality can be expressed by <span class="s63">generalization</span>, which is a containment relationship that exists between a <i>higher-level </i>entity set and one or more <i>lower-level </i>entity sets. In our example, <i>employee </i>is the higher-level entity set and <i>instructor </i>and <i>secretary </i>are lower-level entity sets. In this case, attributes that are conceptually the same had diﬀerent names in the two lower- level entity sets. To create a generalization, the attributes must be given a common name and represented with the higher-level entity <i>person</i>. We can use the attribute names <span class="s69">ID</span>, <i>name</i>, <i>street</i>, and <i>city</i>, as we saw in the example in Section 6.8.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Higher- and lower-level entity sets also may be designated by the terms <span class="s63">superclass </span>and <span class="s63">subclass</span>, respectively. The <i>person </i>entity set is the superclass of the <i>employee </i>and <i>student </i>subclasses.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For all practical purposes, generalization is a simple inversion of specialization. We apply both processes, in combination, in the course of designing the <span class="s44">E-R </span>schema for an enterprise. In terms of the <span class="s44">E-R </span>diagram itself, we do not distinguish between specialization and generalization. New levels of entity representation are distinguished (specialization) or synthesized (generalization) as the design schema comes to express fully the database application and the user requirements of the database. Diﬀerences in the two approaches may be characterized by their starting point and overall goal.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Specialization stems from a single entity set; it emphasizes diﬀerences among en- tities within the set by creating distinct lower-level entity sets. These lower-level entity sets may have attributes, or may participate in relationships, that do not apply to all the entities in the higher-level entity set. Indeed, the reason a designer applies special- ization is to represent such distinctive features. If <i>student </i>and <i>employee </i>have exactly the same attributes as <i>person </i>entities, and participate in exactly the same relationships as <i>person </i>entities, there would be no need to specialize the <i>person </i>entity set.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Generalization proceeds from the recognition that a number of entity sets share some common features (namely, they are described by the same attributes and partici- pate in the same relationship sets). On the basis of their commonalities, generalization synthesizes these entity sets into a single, higher-level entity set. Generalization is used to emphasize the similarities among lower-level entity sets and to hide the diﬀerences; it also permits an economy of representation in that shared attributes are not repeated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">6.8.3 Attribute Inheritance</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1727.png"/></span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A crucial property of the higher- and lower-level entities created by specialization and generalization is <span class="s63">attribute inheritance</span>. The attributes of the higher-level entity sets are said to be <span class="s63">inherited </span>by the lower-level entity sets. For example, <i>student </i>and <i>employee </i>in- herit the attributes of <i>person</i>. Thus, <i>student </i>is described by its <span class="s69">ID</span>, <i>name</i>, <i>street</i>, and <i>city </i>attributes, and additionally a <i>tot cred </i>attribute; <i>employee </i>is described by its <span class="s69">ID</span>, <i>name</i>, <i>street</i>, and <i>city </i>attributes, and additionally a <i>salary </i>attribute. Attribute inheritance ap- plies through all tiers of lower-level entity sets; thus, <i>instructor </i>and <i>secretary</i>, which are subclasses of <i>employee</i>, inherit the attributes <span class="s69">ID</span>, <i>name</i>, <i>street, </i>and <i>city </i>from <i>person</i>, in addition to inheriting <i>salary </i>from <i>employee</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1728.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1729.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A lower-level entity set (or subclass) also inherits participation in the relationship sets in which its higher-level entity (or superclass) participates. Like attribute inheri- tance, participation inheritance applies through all tiers of lower-level entity sets. For example, suppose the <i>person </i>entity set participates in a relationship <i>person dept </i>with <i>department</i>. Then, the <i>student</i>, <i>employee</i>, <i>instructor </i>and <i>secretary </i>entity sets, which are subclasses of the <i>person </i>entity set, also implicitly participate in the <i>person dept </i>relation- ship with <i>department</i>. These entity sets can participate in any relationships in which the <i>person </i>entity set participates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Whether a given portion of an <span class="s44">E-R </span>model was arrived at by specialization or gen- eralization, the outcome is basically the same:</p><p class="s39" style="padding-top: 10pt;padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s40">A higher-level entity set with attributes and relationships that apply to all of its lower-level entity sets.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s40">Lower-level entity sets with distinctive features that apply only within a particular lower-level entity set.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In what follows, although we often refer to only generalization, the properties that we discuss belong fully to both processes.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 6.18 depicts a <span class="s63">hierarchy </span>of entity sets. In the ﬁgure, <i>employee </i>is a lower-level entity set of <i>person </i>and a higher-level entity set of the <i>instructor </i>and <i>secretary </i>entity sets. In a hierarchy, a given entity set may be involved as a lower-level entity set in only one <span class="s44">ISA </span>relationship; that is, entity sets in this diagram have only <span class="s63">single inheritance</span>. If an entity set is a lower-level entity set in more than one <span class="s44">ISA </span>relationship, then the entity set has <span class="s63">multiple inheritance</span>, and the resulting structure is said to be a <i>lattice</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.8.4 Constraints on Specializations</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">To model an enterprise more accurately, the database designer may choose to place certain constraints on a particular generalization/specialization.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">One type of constraint on specialization which we saw earlier speciﬁes whether a specialization is disjoint or overlapping. Another type of constraint on a specializa- tion/generalization is a <span class="s63">completeness constraint</span>, which speciﬁes whether or not an en- tity in the higher-level entity set must belong to at least one of the lower-level entity sets within the generalization/specialization. This constraint may be one of the following:</p><p class="s63" style="padding-top: 10pt;padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>Total specialization <span class="p">or </span>generalization<span class="p">. Each higher-level entity must belong to a lower-level entity set.</span></p><p class="s63" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span>Partial specialization <span class="p">or </span>generalization<span class="p">. Some higher-level entities may not belong to any lower-level entity set.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Partial specialization is the default. We can specify total specialization in an <span class="s44">E-R </span>dia- gram by adding the keyword “total” in the diagram and drawing a dashed line from the keyword to the corresponding hollow arrowhead to which it applies (for a total spe- cialization), or to the set of hollow arrowheads to which it applies (for an overlapping specialization).</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The specialization of <i>person </i>to <i>student </i>or <i>employee </i>is total if the university does not need to represent any person who is neither a <i>student </i>nor an <i>employee</i>. However, if the university needs to represent such persons, then the specialization would be partial.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The completeness and disjointness constraints, do not depend on each other. Thus, specializations may be partial-overlapping, partial-disjoint, total-overlapping, and total- disjoint.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can see that certain insertion and deletion requirements follow from the con- straints that apply to a given generalization or specialization. For instance, when a total completeness constraint is in place, an entity inserted into a higher-level entity set must also be inserted into at least one of the lower-level entity sets. An entity that is deleted from a higher-level entity set must also be deleted from all the associated lower-level entity sets to which it belongs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">6.8.5 Aggregation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1730.png"/></span></p><p style="padding-top: 6pt;padding-left: 87pt;text-indent: 0pt;text-align: right;">One limitation of the <span class="s44">E-R </span>model is that it cannot express relationships among relation- ships. To illustrate the need for such a construct, consider the ternary relationship <i>proj guide</i>, which we saw earlier, between an <i>instructor</i>, <i>student </i>and <i>project </i>(see Figure 6.6).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1731.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1732.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Now suppose that each instructor guiding a student on a project is required to ﬁle a monthly evaluation report. We model the evaluation report as an entity <i>evaluation</i>, with a primary key <i>evaluation id</i>. One alternative for recording the (<i>student</i>, <i>project</i>, <i>instructor</i>) combination to which an <i>evaluation </i>corresponds is to create a quaternary (4-way) relationship set <i>eval for </i>between <i>instructor</i>, <i>student</i>, <i>project</i>, and <i>evaluation</i>. (A quaternary relationship is required— a binary relationship between <i>student </i>and <i>evalua- tion</i>, for example, would not permit us to represent the (<i>project</i>, <i>instructor</i>) combination to which an <i>evaluation </i>corresponds.) Using the basic <span class="s44">E-R </span>modeling constructs, we ob- tain the <span class="s44">E-R </span>diagram of Figure 6.19. (We have omitted the attributes of the entity sets, for simplicity.)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1733.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1734.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="327" height="203" alt="image" src="Image_1735.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="27" alt="image" src="Image_1736.png"/></span></p><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">proj_ guide</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">eval_ for</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">instructor</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">project</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">student</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It appears that the relationship sets <i>proj guide </i>and <i>eval for </i>can be combined into one single relationship set. Nevertheless, we should not combine them into a single</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="74" height="27" alt="image" src="Image_1737.png"/></span></p><p class="s69" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">evaluation</p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 6.19 <span class="s151">E-R </span><span class="s152">diagram with redundant relationships.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="366" height="241" alt="image" src="Image_1738.png"/></span></p><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">project</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">instructor</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">proj_ guide</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">student</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="text-indent: 0pt;line-height: 11pt;text-align: left;">eval_ for</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="103" height="30" alt="image" src="Image_1739.png"/></span></p><p class="s69" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">evaluation</p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 209pt;text-indent: 0pt;text-align: left;">Figure 6.20 <span class="s151">E-R </span><span class="s152">diagram with aggregation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">relationship, since some <i>instructor</i>, <i>student</i>, <i>project </i>combinations may not have an as- sociated <i>evaluation</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1740.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1741.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1742.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There is redundant information in the resultant ﬁgure, however, since every <i>instruc- tor</i>, <i>student</i>, <i>project </i>combination in <i>eval for </i>must also be in <i>proj guide</i>. If <i>evaluation </i>was modeled as a value rather than an entity, we could instead make <i>evaluation </i>a multi- valued composite attribute of the relationship set <i>proj guide</i>. However, this alternative may not be an option if an <i>evaluation </i>may also be related to other entities; for example, each evaluation report may be associated with a <i>secretary </i>who is responsible for further processing of the evaluation report to make scholarship payments.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1743.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1744.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1745.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1746.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The best way to model a situation such as the one just described is to use aggrega- tion. <span class="s63">Aggregation </span>is an abstraction through which relationships are treated as higher- level entities. Thus, for our example, we regard the relationship set <i>proj guide </i>(relating the entity sets <i>instructor</i>, <i>student</i>, and <i>project</i>) as a higher-level entity set called <i>proj guide</i>. Such an entity set is treated in the same manner as is any other entity set. We can then create a binary relationship <i>eval for </i>between <i>proj guide </i>and <i>evaluation </i>to rep- resent which (<i>student</i>, <i>project</i>, <i>instructor</i>) combination an <i>evaluation </i>is for. Figure 6.20 shows a notation for aggregation commonly used to represent this situation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">6.8.6 Reduction to Relation Schemas</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">We are in a position now to describe how the extended <span class="s44">E-R </span>features can be translated into relation schemas.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">6.8.6.1 Representation of Generalization</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">There are two diﬀerent methods of designing relation schemas for an <span class="s44">E-R </span>diagram that includes generalization. Although we refer to the generalization in Figure 6.18 in this discussion, we simplify it by including only the ﬁrst tier of lower-level entity sets— that is, <i>employee </i>and <i>student</i>. We assume that <span class="s69">ID </span>is the primary key of <i>person</i>.</p><p style="padding-top: 7pt;padding-left: 113pt;text-indent: -16pt;text-align: justify;"><span class="s63">1. </span>Create a schema for the higher-level entity set. For each lower-level entity set, create a schema that includes an attribute for each of the attributes of that entity set plus one for each attribute of the primary key of the higher-level entity set. Thus, for the <span class="s44">E-R </span>diagram of Figure 6.18 (ignoring the <i>instructor </i>and <i>secretary </i>entity sets) we have three schemas:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 226pt;text-indent: 0pt;text-align: left;"><i>person </i>(<span class="s99">ID</span>, <i>name, street, city</i>) <i>employee </i>(<span class="s99">ID</span>, <i>salary</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1747.png"/></span></p><p style="padding-left: 226pt;text-indent: 0pt;text-align: left;"><i>student </i>(<span class="s99">ID</span>, <i>tot cred</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">The primary-key attributes of the higher-level entity set become primary-key at- tributes of the higher-level entity set as well as all lower-level entity sets. These can be seen underlined in the preceding example.</p><p style="padding-left: 113pt;text-indent: 15pt;text-align: justify;">In addition, we create foreign-key constraints on the lower-level entity sets, with their primary-key attributes referencing the primary key of the relation cre- ated from the higher-level entity set. In the preceding example, the <span class="s69">ID </span>attribute of <i>employee </i>would reference the primary key of <i>person</i>, and similarly for <i>student</i>.</p><p style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;"><span class="s63">2. </span>An alternative representation is possible, if the generalization is disjoint and com- plete— that is, if no entity is a member of two lower-level entity sets directly below a higher-level entity set, and if every entity in the higher-level entity set is also a member of one of the lower-level entity sets. Here, we do not create a schema for the higher-level entity set. Instead, for each lower-level entity set, we create a schema that includes an attribute for each of the attributes of that entity set plus one for <i>each </i>attribute of the higher-level entity set. Then, for the <span class="s44">E-R </span>diagram of Figure 6.18, we have two schemas:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1748.png"/></span></p><p style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><i>employee </i>(<span class="s99">ID</span>, <i>name</i>, <i>street</i>, <i>city</i>, <i>salary</i>) <i>student </i>(<span class="s99">ID</span>, <i>name</i>, <i>street</i>, <i>city</i>, <i>tot cred</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">Both these schemas have <span class="s69">ID</span>, which is the primary-key attribute of the higher-level entity set <i>person</i>, as their primary key.</p><p style="padding-top: 7pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">One drawback of the second method lies in deﬁning foreign-key constraints. To illustrate the problem, suppose we have a relationship set <i>R </i>involving entity set <i>person</i>. With the ﬁrst method, when we create a relation schema <i>R </i>from the relationship set, we also deﬁne a foreign-key constraint on <i>R</i>, referencing the schema <i>person</i>. Unfortu- nately, with the second method, we do not have a single relation to which a foreign-key</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark127">constraint on </a><i>R </i>can refer. To avoid this problem, we need to create a relation schema<a name="bookmark156">&zwnj;</a></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">person <span class="p">containing at least the primary-key attributes of the </span>person <span class="p">entity.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If the second method were used for an overlapping generalization, some values would be stored multiple times, unnecessarily. For instance, if a person is both an employee and a student, values for <i>street </i>and <i>city </i>would be stored twice.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If the generalization were disjoint but not complete— that is, if some person is nei- ther an employee nor a student— then an extra schema</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 245pt;text-indent: 0pt;text-align: left;"><i>person </i>(<span class="s99">ID</span>, <i>name, street, city</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">would be required to represent such people. However, the problem with foreign-key constraints mentioned above would remain. As an attempt to work around the problem, suppose employees and students are additionally represented in the <i>person </i>relation. Unfortunately, name, street, and city information would then be stored redundantly in the <i>person </i>relation and the <i>student </i>relation for students, and similarly in the <i>person </i>relation and the <i>employee </i>relation for employees. That suggests storing name, street, and city information only in the <i>person </i>relation and removing that information from <i>student </i>and <i>employee</i>. If we do that, the result is exactly the ﬁrst method we presented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">6.8.6.2 Representation of Aggregation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1749.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1750.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1751.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1752.png"/></span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Designing schemas for an <span class="s44">E-R </span>diagram containing aggregation is straightforward. Con- sider Figure 6.20. The schema for the relationship set <i>eval for </i>between the aggregation of <i>proj guide </i>and the entity set <i>evaluation </i>includes an attribute for each attribute in the primary keys of the entity set <i>evaluation </i>and the relationship set <i>proj guide</i>. It also includes an attribute for any descriptive attributes, if they exist, of the relationship set <i>eval for</i>. We then transform the relationship sets and entity sets within the aggregated entity set following the rules we have already deﬁned.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The rules we saw earlier for creating primary-key and foreign-key constraints on relationship sets can be applied to relationship sets involving aggregations as well, with the aggregation treated like any other entity set. The primary key of the aggregation is the primary key of its deﬁning relationship set. No separate relation is required to represent the aggregation; the relation created from the deﬁning relationship is used instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part138.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part140.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
