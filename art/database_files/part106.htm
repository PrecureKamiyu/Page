<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.4   Integrity Constraints</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part105.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part107.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">4.4   <span style=" color: #00AEEF;">Integrity Constraints</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s63">Integrity constraints </span>ensure that changes made to the database by authorized users do not result in a loss of data consistency. Thus, integrity constraints guard against accidental damage to the database. This is in contrast to <i>security constraints</i>, which guard against access to the database by unauthorized users.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">Examples of integrity constraints are:</p><p class="s39" style="padding-top: 9pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">An instructor name cannot be </span><span class="s13">null</span><span class="p">.</span></p><p class="s40" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>No two instructors can have the same instructor <span class="s41">ID</span>.</p><p class="s13" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s40">Every department name in the </span>course <span class="p">relation must have a matching department name in the </span>department <span class="p">relation.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">• <span class="s40">The budget of a department must be greater than $0.00.</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">In general, an integrity constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus, most database systems allow one to specify only those integrity constraints that can be tested with minimal overhead.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We have already seen some forms of integrity constraints in Section 3.2.2. We study some more forms of integrity constraints in this section. In Chapter 7, we study another form of integrity constraint, called <b>functional dependencies</b>, that is used primarily in the process of schema design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_720.png"/></span></p><p class="s78" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;"><span class="s77">7</span>Oracle does automatically commit <span class="s153">DDL </span>statements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Integrity constraints are usually identiﬁed as part of the database schema design process and declared as part of the <b>create table </b>command used to create relations. However, integrity constraints can also be added to an existing relation by using the command <b>alter table </b><i>table-name </i><b>add </b><i>constraint</i>, where <i>constraint </i>can be any constraint on the relation. When such a command is executed, the system ﬁrst ensures that the re- lation satisﬁes the speciﬁed constraint. If it does, the constraint is added to the relation; if not, the command is rejected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.4.1 Constraints on a Single Relation</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">We described in Section 3.2 how to deﬁne tables using the <b>create table </b>command. The <b>create table </b>command may also include integrity-constraint statements. In addition to the primary-key constraint, there are a number of other ones that can be included in the <b>create table </b>command. The allowed integrity constraints include</p><p class="s39" style="padding-top: 10pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s46">not null</span></p><p class="s39" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">• <span class="s46">unique</span></p><p style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><b>check</b>(<span class="s83">&lt;</span>predicate<span class="s83">&gt;</span>)</p><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;text-align: center;">We cover each of these types of constraints in the following sections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.4.2 Not Null Constraint</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">As we discussed in Chapter 3, the null value is a member of all domains, and as a result it is a legal value for every attribute in <span class="s44">SQL </span>by default. For certain attributes, however, null values may be inappropriate. Consider a tuple in the <i>student </i>relation where <i>name </i>is <i>null</i>. Such a tuple gives student information for an unknown student; thus, it does not contain useful information. Similarly, we would not want the department budget to be <i>null</i>. In cases such as this, we wish to forbid null values, and we can do so by restricting the domain of the attributes <i>name </i>and <i>budget </i>to exclude null values, by declaring it as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 208pt;text-indent: 0pt;text-align: left;"><i>name </i>varchar<span class="p">(20) </span>not null</p><p class="s46" style="padding-left: 208pt;text-indent: 0pt;text-align: left;"><i>budget </i>numeric<span class="p">(12,2) </span>not null</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <b>not null </b>constraint prohibits the insertion of a null value for the attribute, and is an example of a <span class="s63">domain constraint</span>. Any database modiﬁcation that would cause a null to be inserted in an attribute declared to be <b>not null </b>generates an error diagnostic.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_721.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There are many situations where we want to avoid null values. In particular, <span class="s44">SQL </span>prohibits null values in the primary key of a relation schema. Thus, in our university example, in the <i>department </i>relation, if the attribute <i>dept name </i>is declared as the primary key for <i>department</i>, it cannot take a null value. As a result it would not need to be declared explicitly to be <b>not null</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">4.4.3 Unique Constraint</p><p class="s42" style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">SQL <span class="s43">also supports an integrity constraint:</span></p><p class="s150" style="text-indent: 0pt;line-height: 6pt;text-align: left;">1  2    <i>m</i></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 119pt;text-indent: 133pt;line-height: 28pt;text-align: left;"><b>unique </b>(<i>A</i><span class="s145">j </span>, <i>A</i><span class="s145">j </span>, <span class="s15">… </span>, <i>A</i><span class="s145">j </span>) The <span class="s63">unique </span>speciﬁcation says that attributes <i>A</i><span class="s97">j </span>, <i>A</i><span class="s97">j </span>, <span class="s15">… </span>, <i>A</i><span class="s97">j</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">form a superkey; that is, no</p><p class="s150" style="padding-left: 317pt;text-indent: 0pt;line-height: 1pt;text-align: left;">1  2     <i>m</i></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">two tuples in the relation can be equal on all the listed attributes. However, attributes</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">declared as unique are permitted to be <i>null </i>unless they have explicitly been declared to be <b>not null</b>. Recall that a null value does not equal any other value. (The treatment of nulls here is the same as that of the <b>unique </b>construct deﬁned in Section 3.8.4.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.4.4 The Check Clause</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">When applied to a relation declaration, the clause <b>check</b>(<i>P</i>) speciﬁes a predicate <i>P </i>that must be satisﬁed by every tuple in a relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A common use of the <span class="s63">check </span>clause is to ensure that attribute values satisfy speci- ﬁed conditions, in eﬀect creating a powerful type system. For instance, a clause <b>check </b>(<i>budget </i>&gt; 0) in the <b>create table </b>command for relation <i>department </i>would ensure that the value of <b>budget </b>is nonnegative.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">As another example, consider the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 172pt;text-indent: 0pt;text-align: left;">create table <i>section</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_722.png"/></span></p><p style="padding-left: 185pt;text-indent: 0pt;text-align: left;">(<i>course id  </i><b>varchar </b>(8),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_723.png"/></span></p><p class="s13" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">sec id    <b>varchar </b><span class="p">(8),</span></p><p class="s13" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">semester   <b>varchar </b><span class="p">(6),</span></p><p class="s13" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">year    <b>numeric </b><span class="p">(4,0),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_724.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_725.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_726.png"/></span></p><p class="s13" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">building   <b>varchar </b><span class="p">(15), </span>room number <b>varchar </b><span class="p">(7), </span>time slot id  <b>varchar </b><span class="p">(4),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_727.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_728.png"/></span></p><p style="padding-left: 188pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<i>course id</i>, <i>sec id</i>, <i>semester</i>, <i>year</i>),</p><p class="s46" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">check <span class="p">(</span><i>semester </i>in <span class="p">(&#39;Fall&#39;, &#39;Winter&#39;, &#39;Spring&#39;, &#39;Summer&#39;)));</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Here, we use the <b>check </b>clause to simulate an enumerated type by specifying that <i>semester </i>must be one of &#39;Fall&#39;, &#39;Winter&#39;, &#39;Spring&#39;, or &#39;Summer&#39;. Thus, the <b>check </b>clause permits attribute domains to be restricted in powerful ways that most programming- language type systems do not permit.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Null values present an interesting special case in the evaluation of a <b>check </b>clause. A <b>check </b>clause is satisﬁed if it is not false, so clauses that evaluate to <b>unknown </b>are not violations. If null values are not desired, a separate <b>not null </b>constraint (see Section 4.4.2) must be speciﬁed.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A <b>check </b>clause may appear on its own, as shown above, or as part of the declaration of an attribute. In Figure 4.9, we show the <b>check </b>constraint for the <i>semester </i>attribute</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_729.png"/></span></p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -13pt;text-align: left;"><b>create table </b>classroom <span class="p">(</span>building   <b>varchar </b><span class="p">(15), </span>room number <b>varchar </b><span class="p">(7),</span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">capacity   <b>numeric </b><span class="p">(4,0),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_730.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<i>building</i>, <i>room number</i>));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">create table <i>department</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_731.png"/></span></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">(<i>dept name  </i><b>varchar </b>(20),</p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">building   <b>varchar </b><span class="p">(15),</span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><i>budget   </i><b>numeric </b>(12,2) <b>check </b>(<i>budget </i>&gt; 0),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_732.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<i>dept name</i>));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">create table <i>course</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_733.png"/></span></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">(<i>course id  </i><b>varchar </b>(8),</p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">title    <b>varchar </b><span class="p">(50),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_734.png"/></span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">dept name  <b>varchar </b><span class="p">(20),</span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><i>credits   </i><b>numeric </b>(2,0) <b>check </b>(<i>credits </i>&gt; 0),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_735.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<i>course id</i>),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_736.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>dept name</i>) <b>references </b><i>department</i>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">create table <i>instructor</i></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">(<span class="s69">ID     </span><b>varchar </b>(5),</p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><i>name    </i>varchar <span class="p">(20) </span>not null<span class="p">,</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_737.png"/></span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">dept name  <b>varchar </b><span class="p">(20),</span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><i>salary    </i><b>numeric </b>(8,2) <b>check </b>(<i>salary </i>&gt; 29000),</p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<span class="s69">ID</span>),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_738.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>dept name</i>) <b>references </b><i>department</i>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 126pt;text-indent: 0pt;text-align: left;">create table <i>section</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_739.png"/></span></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">(<i>course id  </i><b>varchar </b>(8),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_740.png"/></span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">sec id    <b>varchar </b><span class="p">(8),</span></p><p class="s46" style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><i>semester   </i>varchar <span class="p">(6) </span>check <span class="p">(</span><i>semester </i>in</p><p style="padding-left: 142pt;text-indent: 118pt;text-align: justify;">(’Fall’, ’Winter’, ’Spring’, ’Summer’)), <i>year    </i><b>numeric </b>(4,0) <b>check </b>(<i>year </i>&gt; 1759 and <i>year </i>&lt; 2100), <i>building   </i><b>varchar </b>(15),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_741.png"/></span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">room number <b>varchar </b><span class="p">(7),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_742.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_743.png"/></span></p><p class="s13" style="padding-left: 142pt;text-indent: 0pt;text-align: left;">time slot id  <b>varchar </b><span class="p">(4),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_744.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_745.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<i>course id</i>, <i>sec id</i>, <i>semester</i>, <i>year</i>),</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_746.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>course id</i>) <b>references </b><i>course</i>,</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_747.png"/></span></p><p style="padding-left: 142pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>building</i>, <i>room number</i>) <b>references </b><i>classroom</i>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 127pt;text-indent: 0pt;text-align: left;">Figure 4.9 <span class="s151">SQL </span><span class="s152">data definition for part of the university database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">as part of the declaration of <i>semester</i>. The placement of a <b>check </b>clause is a matter of coding style. Typically, constraints on the value of a single attribute are listed with that attribute, while more complex <b>check </b>clauses are listed separately at the end of a <b>create table </b>statement.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The predicate in the <b>check </b>clause can, according to the <span class="s44">SQL </span>standard, be an ar- bitrary predicate that can include a subquery. However, currently none of the widely used database products allows the predicate to contain a subquery.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.4.5 Referential Integrity</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Often, we wish to ensure that a value that appears in one relation (the <i>referencing </i>rela- tion) for a given set of attributes also appears for a certain set of attributes in another relation (the <i>referenced </i>relation). As we saw earlier, in Section 2.3, such conditions are called <i>referential integrity constraints</i>, and <i>foreign keys </i>are a form of a referential in- tegrity constraint where the referenced attributes form a primary key of the referenced relation.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Foreign keys can be speciﬁed as part of the <span class="s44">SQL </span><b>create table </b>statement by using the <b>foreign key </b>clause, as we saw in Section 3.2.2. We illustrate foreign-key declarations by using the <span class="s44">SQL DDL </span>deﬁnition of part of our university database, shown in Figure 4.9.</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The deﬁnition of the <i>course </i>table has a declaration</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_748.png"/></span></p><p style="padding-top: 6pt;padding-left: 168pt;text-indent: 0pt;text-align: justify;">“<b>foreign key </b>(<i>dept name</i>) <b>references </b><i>department</i>”.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">This foreign-key declaration speciﬁes that for each course tuple, the department name speciﬁed in the tuple must exist in the <i>department </i>relation. Without this constraint, it is possible for a course to specify a nonexistent department name.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">By default, in <span class="s44">SQL </span>a foreign key references the primary-key attributes of the ref- erenced table. <span class="s44">SQL </span>also supports a version of the <b>references </b>clause where a list of at- tributes of the referenced relation can be speciﬁed explicitly.<span class="s76">8</span> For example, the foreign key declaration for the <i>course </i>relation can be speciﬁed as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_749.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_750.png"/></span></p><p style="padding-top: 4pt;padding-left: 179pt;text-indent: 0pt;text-align: justify;"><b>foreign key </b>(<i>dept name</i>) <b>references </b><i>department</i>(<i>dept name</i>)</p><p style="padding-top: 5pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">The speciﬁed list of attributes must, however, be declared as a superkey of the referenced relation, using either a <b>primary key </b>constraint or a <b>unique </b>constraint. A more general form of a referential-integrity constraint, where the referenced columns need not be a candidate key, cannot be directly speciﬁed in <span class="s44">SQL</span>. The <span class="s44">SQL </span>standard speciﬁes other constructs that can be used to implement such constraints, which are described in Section 4.4.8; however, these alternative constructs are not supported by any of the widely used database systems.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Note that the foreign key must reference a compatible set of attributes, that is, the number of attributes must be the same and the data types of corresponding attributes must be compatible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_751.png"/></span></p><p class="s78" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s77">8</span>Some systems, notably <span class="s153">M</span>y<span class="s153">SQL</span>, do not support the default and require that the attributes of the referenced relations be speciﬁed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can use the following as part of a table deﬁnition to declare that an attribute forms a foreign key:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_752.png"/></span></p><p class="s46" style="padding-left: 186pt;text-indent: 0pt;text-align: left;"><i>dept name </i>varchar<span class="p">(20) </span>references <i>department</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the violation (i.e., the transaction performing the update action is rolled back). However, a <b>foreign key </b>clause can specify that if a delete or update action on the referenced relation violates the constraint, then, instead of rejecting the action, the system must take steps to change the tuple in the referencing relation to restore the constraint. Consider this deﬁnition of an integrity constraint on the relation <i>course</i>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 167pt;text-indent: 0pt;text-align: left;">create table <i>course</i></p><p style="padding-left: 182pt;text-indent: 0pt;text-align: left;">( <span class="s15">…</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_753.png"/></span></p><p style="padding-left: 182pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>dept name</i>) <b>references </b><i>department</i></p><p class="s46" style="padding-left: 244pt;text-indent: -6pt;text-align: center;">on delete cascade on update cascade<span class="p">,</span></p><p class="s15" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">… <span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_754.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_755.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Because of the clause <b>on delete cascade </b>associated with the foreign-key declaration, if a delete of a tuple in <i>department </i>results in this referential-integrity constraint being vio- lated, the system does not reject the delete. Instead, the delete “<span class="s63">cascades</span>” to the <i>course </i>relation, deleting the tuple that refers to the department that was deleted. Similarly, the system does not reject an update to a ﬁeld referenced by the constraint if it violates the constraint; instead, the system updates the ﬁeld <i>dept name </i>in the referencing tuples in <i>course </i>to the new value as well. <span class="s44">SQL </span>also allows the <b>foreign key </b>clause to specify actions other than <b>cascade</b>, if the constraint is violated: The referencing ﬁeld (here, <i>dept name</i>) can be set to <i>null </i>(by using <b>set null </b>in place of <b>cascade</b>), or to the default value for the domain (by using <b>set default</b>).</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">If there is a chain of foreign-key dependencies across multiple relations, a deletion or update at one end of the chain can propagate across the entire chain. An interesting case where the <b>foreign key </b>constraint on a relation references the same relation appears in Exercise 4.9. If a cascading update or delete causes a constraint violation that cannot be handled by a further cascading operation, the system aborts the transaction. As a result, all the changes caused by the transaction and its cascading actions are undone. Null values complicate the semantics of referential-integrity constraints in <span class="s44">SQL</span>. Attributes of foreign keys are allowed to be <i>null</i>, provided that they have not otherwise been declared to be <b>not null</b>. If all the columns of a foreign key are nonnull in a given tuple, the usual deﬁnition of foreign-key constraints is used for that tuple. If any of the foreign-key columns is <i>null</i>, the tuple is deﬁned automatically to satisfy the constraint. This deﬁnition may not always be the right choice, so <span class="s44">SQL </span>also provides constructs that allow you to change the behavior with null values; we do not discuss the constructs here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">4.4.6 Assigning Names to Constraints</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">It is possible for us to assign a name to integrity constraints. Such names are useful if we want to drop a constraint that was deﬁned previously.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To name a constraint, we precede the constraint with the keyword <b>constraint </b>and the name we wish to assign it. So, for example, if we wish to assign the name <i>minsalary </i>to the <b>check </b>constraint on the <i>salary </i>attribute of <i>instructor </i>(see Figure 4.9), we would modify the declaration for <i>salary </i>to:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 119pt;text-indent: 41pt;line-height: 150%;text-align: left;"><i>salary </i>numeric<span class="p">(8,2), </span>constraint <i>minsalary </i>check <span class="p">(</span><i>salary </i><span class="s83">&gt; </span><span class="p">29000), Later, if we decide we no longer want this constraint, we can write:</span></p><p class="s46" style="padding-top: 9pt;padding-left: 203pt;text-indent: 0pt;text-align: left;">alter table <i>instructor </i>drop constraint <i>minsalary</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_756.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Lacking a name, we would need ﬁrst to use system-speciﬁc features to identify the system-assigned name for the constraint. Not all systems support this, but, for example, in Oracle, the system table <i>user constraints </i>contains this information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">4.4.7 Integrity Constraint Violation During a Transaction</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Transactions may consist of several steps, and integrity constraints may be violated temporarily after one step, but a later step may remove the violation. For instance, suppose we have a relation <i>person </i>with primary key <i>name</i>, and an attribute <i>spouse</i>, and suppose that <i>spouse </i>is a foreign key on <i>person</i>. That is, the constraint says that the <i>spouse </i>attribute must contain a name that is present in the <i>person </i>table. Suppose we wish to note the fact that John and Mary are married to each other by inserting two tuples, one for John and one for Mary, in the preceding relation, with the spouse attributes set to Mary and John, respectively. The insertion of the ﬁrst tuple would violate the foreign-key constraint, regardless of which of the two tuples is inserted ﬁrst. After the second tuple is inserted, the foreign-key constraint would hold again.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To handle such situations, the <span class="s44">SQL </span>standard allows a clause <b>initially deferred </b>to be added to a constraint speciﬁcation; the constraint would then be checked at the end of a transaction and not at intermediate steps. A constraint can alternatively be speciﬁed as <b>deferrable</b>, which means it is checked immediately by default but can be deferred when desired. For constraints declared as deferrable, executing a statement <b>set constraints </b><i>constraint-list </i><b>deferred </b>as part of a transaction causes the checking of the speciﬁed constraints to be deferred to the end of that transaction. Constraints that are to appear in a constraint list must have names assigned. The default behavior is to check constraints immediately, and many database implementations do not support deferred constraint checking.</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: right;">We can work around the problem in the preceding example in another way, if the</p><p class="s13" style="padding-left: 87pt;text-indent: 0pt;text-align: right;">spouse <span class="p">attribute can be set to </span>null<span class="p">: We set the spouse attributes to </span>null <span class="p">when inserting the</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">tuples for John and Mary, and we update them later. However, this technique requires more programming eﬀort, and it does not work if the attributes cannot be set to <i>null</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.4.8 Complex Check Conditions and Assertions</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">There are additional constructs in the <span class="s44">SQL </span>standard for specifying integrity constraints that are not currently supported by most systems. We discuss some of these in this section.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As deﬁned by the <span class="s44">SQL </span>standard, the predicate in the <b>check </b>clause can be an ar- bitrary predicate that can include a subquery. If a database implementation supports subqueries in the <b>check </b>clause, we could specify the following referential-integrity con- straint on the relation <i>section</i>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_757.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_758.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_759.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_760.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_761.png"/></span></p><p class="s46" style="padding-left: 56pt;text-indent: 0pt;text-align: center;">check <span class="p">(</span><i>time slot id </i>in <span class="p">(</span>select <i>time slot id </i>from <i>time slot</i><span class="p">))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_762.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_763.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_764.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_765.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_766.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <b>check </b>condition veriﬁes that the <i>time slot id </i>in each tuple in the <i>section </i>relation is actually the identiﬁer of a time slot in the <i>time slot </i>relation. Thus, the condition has to be checked not only when a tuple is inserted or modiﬁed in <i>section</i>, but also when the relation <i>time slot </i>changes (in this case, when a tuple is deleted or modiﬁed in relation <i>time slot</i>).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_767.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_768.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_769.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_770.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: right;">Another natural constraint on our university schema would be to require that every section has at least one instructor teaching the section. In an attempt to enforce this, we may try to declare that the attributes (<i>course id</i>, <i>sec id</i>, <i>semester</i>, <i>year</i>) of the <i>section </i>relation form a foreign key referencing the corresponding attributes of the <i>teaches </i>rela- tion. Unfortunately, these attributes do not form a candidate key of the relation <i>teaches</i>. A check constraint similar to that for the <i>time slot </i>attribute can be used to enforce this constraint, if check constraints with subqueries were supported by a database system. Complex <b>check </b>conditions can be useful when we want to ensure the integrity of data, but they may be costly to test. In our example, the predicate in the <b>check </b>clause would not only have to be evaluated when a modiﬁcation is made to the <i>section </i>relation, but it may have to be checked if a modiﬁcation is made to the <i>time slot </i>relation because</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">that relation is referenced in the subquery.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">An <span class="s63">assertion </span>is a predicate expressing a condition that we wish the database always to satisfy. Consider the following constraints, which can be expressed using assertions.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_771.png"/></span></p><p class="s13" style="padding-top: 10pt;padding-left: 107pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s40">For each tuple in the </span>student <span class="p">relation, the value of the attribute </span>tot cred <span class="p">must equal the sum of credits of courses that the student has completed successfully.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: left;">• <span class="s40">An instructor cannot teach in two diﬀerent classrooms in a semester in the same time slot.</span><span class="s179">9</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_772.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">9<span class="s78">We assume that lectures are not displayed remotely in a second classroom! An alternative constraint that speciﬁes that “an instructor cannot teach two courses in a given semester in the same time slot” may not hold since courses are sometimes cross-listed; that is, the same course is given two identiﬁers and titles.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_773.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_774.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_775.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 140pt;text-indent: 0pt;text-align: left;"><a name="bookmark62">create assertion </a><i>credits earned constraint </i>check<a name="bookmark103">&zwnj;</a></p><p style="padding-left: 140pt;text-indent: 0pt;text-align: left;">(<b>not exists </b>(<b>select </b><span class="s42">ID</span></p><p class="s46" style="padding-left: 187pt;text-indent: 0pt;line-height: 11pt;text-align: left;">from <i>student</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_776.png"/></span></p><p style="padding-left: 187pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><b>where </b><i>tot cred </i><span class="s83">&lt;&gt; </span>(<b>select coalesce</b>(<b>sum</b>(<i>credits</i>), 0)</p><p class="s46" style="padding-left: 271pt;text-indent: 0pt;line-height: 10pt;text-align: left;">from <i>takes </i>natural join <i>course</i></p><p style="padding-left: 271pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><b>where </b><i>student</i>.<span class="s69">ID</span>= <i>takes</i>.<span class="s69">ID</span></p><p class="s46" style="padding-left: 299pt;text-indent: 0pt;line-height: 20pt;text-align: left;">and <i>grade </i>is not null and <i>grade</i><span class="s83">&lt;&gt; </span><span class="p">’F’ )))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_777.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 228pt;text-indent: 0pt;text-align: left;">Figure 4.10 <span class="s74">An assertion example.</span></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">An assertion in <span class="s44">SQL </span>takes the form:</p><p class="s83" style="padding-top: 10pt;padding-left: 186pt;text-indent: 0pt;text-align: justify;"><span class="s46">create assertion </span>&lt;<span class="p">assertion-name</span>&gt; <span class="s46">check </span>&lt;<span class="p">predicate</span>&gt;<span class="p">;</span></p><p style="padding-top: 7pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">In Figure 4.10, we show how the ﬁrst example of constraints can be written in <span class="s44">SQL</span>. Since <span class="s44">SQL </span>does not provide a “for all <i>X </i>, <i>P</i>(<i>X </i>)” construct (where <i>P </i>is a predicate), we are forced to implement the constraint by an equivalent construct, “not exists <i>X </i>such that not <i>P</i>(<i>X </i>)”, that can be expressed in <span class="s44">SQL</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We leave the speciﬁcation of the second constraint as an exercise. Although these two constraints can be expressed using <b>check </b>predicates, using an assertion may be more natural, especially for the second constraint.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When an assertion is created, the system tests it for validity. If the assertion is valid, then any future modiﬁcation to the database is allowed only if it does not cause that assertion to be violated. This testing may introduce a signiﬁcant amount of overhead if complex assertions have been made. Hence, assertions should be used with great care. The high overhead of testing and maintaining assertions has led some system developers to omit support for general assertions, or to provide specialized forms of assertion that are easier to test.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_778.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_779.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Currently, none of the widely used database systems supports either subqueries in the <b>check </b>clause predicate or the <b>create assertion </b>construct. However, equivalent func- tionality can be implemented using triggers, which are described in Section 5.3, if they are supported by the database system. Section 5.3 also describes how the referential integrity constraint on <i>time slot id </i>can be implemented using triggers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part105.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part107.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
