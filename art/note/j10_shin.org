#+TITLE: SHIN Java Chapter 10: Threads
#+AUTHOR: Your Dearest Grandpa
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style_for_org.css" />
#+OPTIONS: html-style:nil

* Threads. First Encounter

  - Note taken on [2023-04-19 Wed 19:37] \\
    The method ~run~ in the thread should not be called manually. Calling
    the run method directly merely executes the task in the same
    thread---no new thread is started.
  - Note taken on [2023-04-19 Wed 19:26] \\
    The note should be read after you finish reading the whole section.
  - Note taken on [2023-04-19 Wed 19:25] \\
    You need to know that there is also a method called ~run~ inside of the thread class. However, one shall not define the ~run~ by
    theire own in order to /decouple/ the task from the thread that execute the task.

What is a thread? Threads are designed to be seperately executed to enhance performance. The difference between threads and
processes is that threads share same variables and memory, which might look pretty risky, but on the contrary, the exact feature
makes threads light weight.

On the first encounter, let us meet the class ~bank~. It is a class defined by the author of the book to simulate a bank. Inside a
bank, there are some accounts. What ~transfer~ do is to transfer certain amount of money from one a count to the other.

Okay. We have the following code. 

#+BEGIN_SRC
public interface Runnable {
       void run();
}
#+END_SRC

It is an interface. Yes. An interface. Why ~Runnable~? You need to know that there is always a function named ~run~ to be executed by
the threads. What the interface does is only that the function ~run~ is in you class. Anyway, let us continue. 

#+BEGIN_SRC
Runnable r = () -> {
         // code here.
}
#+END_SRC

You just define a anomynous function using lambda expression. 

#+BEGIN_SRC
var t = new Thread(r);
#+END_SRC

You just pass the ~r~ to a thread, and the thread is called ~t~ now. 

#+BEGIN_SRC
t.start();
#+END_SRC

You just start the thread by calling the function named ~start~ inside the thread. 

* TODO States [0/2]

- [ ] the blocked waiting states
- [ ] runnable state

You should learn some words mentioned in the book:

- /preempt/: The word "preempts" means to take action before someone else can, often by anticipating their actions or intentions. In
  a military context, preemption refers to taking the initiative to attack an enemy before they can launch an attack of their own.
- /relinquish/: The word "relinquish" means to give up, surrender, or release something. It can refer to letting go of control,
  ownership, or responsibility for something or someone. For example, a person may relinquish their rights to a property, relinquish
  their position as the leader of a group, or relinquish custody of a child.
- /deprecated/: The word "deprecated" is used to describe something that has become outdated, no longer in use, or no longer
  supported. It often refers to computer software or programming languages that have been replaced by newer versions or better
  alternatives.
  
There are six states: 

1. New
2. Runnable
3. Blocked
4. Waiting
5. Timed waiting
6. Terminated

When a thread is ~new~-ed, that is to say the thread is initialized, the state of the thread is at /new/. When one calls the
function ~start~, the thread enters the /Runnable/ state. It means that the thread can be runned (of course). 

To understand other states, we need to know what threads should be doing under certain circumstances.

** Blocked and Waiting states

When the thread tries to acquire an intrinsic object lock that is currently held by another thread, it becomes blocked. It is easy
to understand. That is to say threads is requiring something, but the that thing is being occupied, so that the thread can't do
anything.

** Runnable State

* TODO Properties [0/2]
- [ ] interrupting threads
- [ ] threads priority


there are some words that you need to know. 

- /squelched/: The word "squelched" typically means to forcefully silence or suppress something, such as an idea or a sound. 
- /propagate/: The word "propagate" generally means to spread or promote an idea, belief, or cause. It can also refer to the process
  of reproducing plants or animals through various means such as seeds, cuttings, or cloning. In the context of computer networking,
  it can refer to the distribution of data across a network.

** Interrupting Threads


** Daemon Threads
- /Daemon/: In computing, a daemon (pronounced "demon") is a computer program that runs as a background process rather than being
  under direct control of an interactive user. Daemons are typically started at boot time and run continuously in the background,
  waiting for specific events or conditions to occur so that they can perform their tasks. Examples of daemons include system
  processes such as network services, web servers, and print spoolers. Daemons are often used to provide essential services to other
  programs and users without requiring constant attention or interaction.

** Thread Names 

threads have names. You can use a method of the thread to change its name. 

** Handlers for Uncaught Exceptions

You can set the Exceptions handler by passing an object where there is a handler method defined in it.

** Thread Priority

Thread Priority can be viewed as Legacy. We don't use the property nowadays.

* Synchronization
- /atomic operations/: The "atomic operations" means the operations that are not divisible. A non-atomic operation can be divide
  into multiple atomic operations.

** Race Condition, First Encounter

The main pointer of this section is to understand what is race condition and realize how a simple race condition can occurred. The
book provides an example of multiple threads being runned on the bank system to transfer money simultaneously, so that something
goes wrong, and is that the balance of the accounts (that is to say the total money) has been lowered. 

Why? Because the increment operations in the transfer function is a non-atomic operation, which can be decomposed as (more than)
three operations: 1. load; 2. add; 3. write back. When two increment operations take place simultaneously, in reality, the
atomic operations being carried out should be in a random order, like ~1 2 1 2 3 3~. 

** Lock Objects 

- /reentrant/: In computer science and mathematics, "reentrant" typically refers to a program or subroutine that can be interrupted
  in the middle of its execution and then safely called again before its previous execution has completed.
- /bypass/: "bypassed" means to avoid or skip over a particular section of code. A critical section is a portion of code that must
  be executed atomically, meaning that it cannot be interrupted or accessed by other threads while it is running.

First thing first: ~Synchronized~ keyword is introduced after lock and condition are introduced, because ~synchronized~ keyword is
based on lock and condition. The author thinks that it is better to introduce lock and condition first. 

Next is the example. It is like you ~lock~ the thread and then proceed doing something critical and you don't want race condition
happens. After the critical part is done, you ~unlock~ the thread manually. The ~lock~ of the class have to be defined manually. 

** Conditioning Objects

Say you are transferring money from one to the other. When there is not enough money in the account, we expect that the balance is
growing, for it it possible that other threads tranfer money to the account. So we wait, until the money is enough. This is the
/wait/ state of the thread. A /waiting/ thread can be /signal/-ed. It means that the thread can be back to work. When one thread
calls ~signal()~, it /signal/ one of the threads that is waiting. Next is the example.

You new a Condition in the class bank. It is called ~sufficientFunds~. Like ~transfer~ function, it should be not carried if the
~amount~ is less than the balance of the account. When this happens, the thread waits, the function ~await()~ is called. You need to
~signal~ other thread that awaits, when the balance of an account is renewed. But, you don't know which thread is at this account,
so you use ~signalAll~ instead.

The difference between /block/ and /wait/ is that you can signal the thread that is waiting.

** Synchronized Keyword
- /notify/: To notify means to inform or give notice to someone about something. It can also imply giving a warning or alerting
  someone about an important event or situation. For example, if your flight has been delayed, the airline may notify you by sending
  you a text message or email to let you know about the delay.

The function of condition and lock is integrated. And the a function that is prefixed by the ~synchronized~ keyword works just like
that using ~condition~ and ~lock~. 

First, it automatically employs the lock. The function is like: 
#+BEGIN_SRC
public synchronized void foo (){
       // code here
}
#+END_SRC
And the code inside is equivalent to 
#+BEGIN_SRC 
barLock.lock();
try {
    // code here
} finally {
  barLock.unlock();
}
#+END_SRC
where the function is in the class ~Bar~, where a lock object is defined, using following sentence: 
#+BEGIN_SRC 
Lock barLock = new ReentrantLock();
#+END_SRC

What about conditioning? 

When you want to use conditioning, you need to define the condition object in the class. But it is not necessary for synchronized
keyword already provides with you such thing. You may call ~wait()~ instead of ~conditionObject.await()~, call ~notifyAll()~ instead
of ~signalAll()~

When the synchronized keyword is prefixing a static method in a class, it would function differently. The /intrinsic lock/ concerning
is the lock in the /class object/, but not the instance object.

** Synchronized Block

- /hijack/: The word "hijack" means to seize control of a vehicle, aircraft, or other conveyance while it is in transit, typically
  with the intention of using it for an unlawful purpose. The term can also be used more broadly to refer to taking control of any
  situation or process by force or deception.
- /ad hoc/: Ad hoc refers to something that is created or done for a particular purpose, often without prior planning or
  preparation. It is typically used to describe a solution or approach that is improvised or temporary, rather than being part of a
  formal or long-term strategy. For example, an ad hoc committee may be formed to address a specific issue or problem, or an ad hoc
  decision may be made in response to a sudden change in circumstances. The term can also refer to computer systems or software that
  are designed to perform a specific task on an as-needed basis, rather than being part of a larger, more integrated system.
- /mutator/: Mutator methods are methods that modify the internal state of an object. In other words, they change the values of the
  object's fields or properties. In the context of the Vector class, mutator methods are methods that modify the elements stored in
  a vector. For example, the ~set()~ method is a mutator method because it modifies the value of a vector element at a specific index.

*** Main Idea
You may arbitrarily lock an /object/ using /synchronized/ keyword. For example, ~synchronized(obj) { // your code here}~ will lock
the ~obj~ in the thread. It is more flexible than just prefixing the synchronized keyword to method. 

~obj~ should be an object. It can be an /ad hoc/ object. 

#+BEGIN_SRC 
private Lock lock = new Object();
public void foo (){
       // some code 
       synchronized (lock) {
                    // critical code here
       }
       // other code
}
#+END_SRC

If the method is static, one shall lock ~Myclass.class~ which is the class object. Don't lock ~getClass()~, because for different
instances, the return values of the ~getClass()~ are different.

*** The Vector Example

Check the link below:
https://stackoverflow.com/questions/68248878/corejava-11th-ed-threading-question-on-client-side-locking-synchronized-block. 

I can't handle it. It is too difficult.

** Monitor Concept
- /scathing/: The term "scathing" is generally used to describe something that is very critical or harsh. For example, if someone
  were to write a scathing review of a book, they would be writing a review that is extremely negative and condemning.

/Monitor/ Concept is for /Object-Oriented/ Programming. 

A monitor has these properties: 

1. A monitor is a class with only private fields 
2. Each object of the class has an associated lock
3. All the methods are locked by the lock.
4. The lock have number of conditions. 

/Synchronized/ keyword makes a class can work like a monitor, but there are differences. 

Anyway,the question is why /synchronized/ keyword is not safe enough.

** Volatile Fields

- /Volatile/: In general usage, "volatile" can refer to something that is likely to change suddenly and unexpectedly, or someone who
  has a tendency to become angry or emotional very quickly.

What problems occur, when it comes to 

When /Volatile/ keyword is prefixing a variable, the variable is then marked as the variable that can be changed concurrently, which
means that the variable can be changed by other threads. The keyword tells Java Compiler to deal with this problem. 
