<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>26.1 An Example: Thread Creation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part261.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part263.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">26.1 An Example: Thread Creation</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Let’s say we wanted to run a program that created two threads, each of which was doing some independent work, in this case printing “A” or “B”. The code is shown in Figure <span style=" color: #00AEEF;">26.2</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_310.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">The main program creates two threads, each of which will run the function <span class="s41">mythread()</span>, though with different arguments (the string <span class="s41">A </span>or <span class="s41">B</span>). Once a thread is created, it may start running right away (depending on the whims of the scheduler); alternately, it may be put in a “ready” but not “running” state and thus not run yet. After creating the two threads (T1 and T2), the main thread calls <span class="s41">pthread join()</span>, which waits for a particular thread to complete.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;assert.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &lt;pthread.h&gt;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">4</p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">5  </span>void <span class="s39">*</span>mythread(void <span class="s39">*</span>arg) {</p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 83%;text-align: left;"><span class="s37">6    </span>printf(&quot;%s\n&quot;, (char <span class="s39">*</span>) arg);</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">7    <span class="s38">return NULL;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">8  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">9</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10  <span class="s38">int</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">11  </span>main(int argc, char <span class="s39">*</span>argv[]) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">12    <span class="s38">pthread_t p1, p2;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13    <span class="s38">br int rc;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">14    <span class="s38">printf(&quot;main: begin\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15     <span class="s38">rc = pthread_create(&amp;p1, NULL, mythread, &quot;A&quot;); assert(rc == 0);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">16     <span class="s38">rc = pthread_create(&amp;p2, NULL, mythread, &quot;B&quot;); assert(rc == 0);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">17     <span class="s38">// join waits for the threads to finish</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">18     <span class="s38">rc = pthread_join(p1, NULL); assert(rc == 0);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19     <span class="s38">rc = pthread_join(p2, NULL); assert(rc == 0);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20    <span class="s38">printf(&quot;main: end\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">21    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">22  <span class="s38">}</span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">Figure 26.2: <b>Simple Thread Creation Code (t0.c)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Let us examine the possible execution ordering of this little program. In the execution diagram (Table <span style=" color: #00AEEF;">26.1</span>), time increases in the downwards direction, and each column shows when a different thread (the main one, or Thread 1, or Thread 2) is running.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Note, however, that this ordering is not the only possible ordering. In fact, given a sequence of instructions, there are quite a few, depending on which thread the scheduler decides to run at a given point. For example, once a thread is created, it may run immediately, which would lead to the execution shown in Table <span style=" color: #00AEEF;">26.2</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">We also could even see “B” printed before “A”, if, say, the scheduler decided to run Thread 2 first even though Thread 1 was created earlier; there is no reason to assume that a thread that is created first will run first. Table <span style=" color: #00AEEF;">26.3 </span>shows this final execution ordering, with Thread 2 getting to strut its stuff before Thread 1.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As you might be able to see, one way to think about thread creation is that it is a bit like making a function call; however, instead of first ex- ecuting the function and then returning to the caller, the system instead creates a new thread of execution for the routine that is being called, and it runs independently of the caller, perhaps before returning from the cre- ate, but perhaps much later.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As you also might be able to tell from this example, threads make life complicated: it is already hard to tell what will run when! Computers are hard enough to understand without concurrency. Unfortunately, with concurrency, it gets worse. Much worse.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s36" style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;line-height: 8pt;text-align: left;">main            Thread 1  Thread2</p><p style="padding-left: 122pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="241" height="1" alt="image" src="Image_311.png"/></span></p><p class="s12" style="padding-left: 128pt;text-indent: 0pt;line-height: 7pt;text-align: left;">starts running</p><p class="s12" style="padding-left: 128pt;text-indent: 0pt;line-height: 91%;text-align: left;">prints “main: begin” creates Thread 1</p><p class="s12" style="padding-left: 128pt;text-indent: 0pt;line-height: 92%;text-align: left;">creates Thread 2 waits for T1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">waits for T2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">prints “main: end”</p><p class="s12" style="padding-left: 37pt;text-indent: 0pt;line-height: 92%;text-align: left;">runs prints “A” returns</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">runs prints “B” returns</p><p style="padding-top: 5pt;padding-left: 158pt;text-indent: 0pt;text-align: left;">Table 26.1: <b>Thread Trace (1)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s36" style="padding-left: 127pt;text-indent: 0pt;line-height: 8pt;text-align: left;">main            Thread 1  Thread2</p><p style="padding-left: 121pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="244" height="1" alt="image" src="Image_312.png"/></span></p><p class="s12" style="padding-left: 127pt;text-indent: 0pt;line-height: 7pt;text-align: left;">starts running</p><p class="s12" style="padding-left: 127pt;text-indent: 0pt;line-height: 91%;text-align: left;">prints “main: begin” creates Thread 1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 6pt;padding-left: 127pt;text-indent: 0pt;text-align: left;">creates Thread 2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 127pt;text-indent: 0pt;line-height: 9pt;text-align: left;">waits for T1</p><p class="s17" style="padding-left: 131pt;text-indent: 0pt;line-height: 8pt;text-align: left;">returns immediately; T1 is done</p><p class="s12" style="padding-left: 127pt;text-indent: 0pt;line-height: 8pt;text-align: left;">waits for T2</p><p class="s17" style="padding-left: 131pt;text-indent: 0pt;line-height: 8pt;text-align: left;">returns immediately; T2 is done</p><p class="s12" style="padding-left: 127pt;text-indent: 0pt;line-height: 8pt;text-align: left;">prints “main: end”</p><p class="s12" style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">runs prints “A” returns</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">runs prints “B” returns</p><p style="padding-top: 5pt;padding-left: 158pt;text-indent: 0pt;text-align: left;">Table 26.2: <b>Thread Trace (2)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s36" style="padding-left: 122pt;text-indent: 0pt;line-height: 8pt;text-align: left;">main             Thread 1   Thread2</p><p style="padding-left: 116pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="257" height="1" alt="image" src="Image_313.png"/></span></p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;line-height: 7pt;text-align: left;">starts running</p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;line-height: 91%;text-align: left;">prints “main: begin” creates Thread 1</p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;line-height: 8pt;text-align: left;">creates Thread 2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">waits for T1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 122pt;text-indent: 0pt;line-height: 8pt;text-align: left;">waits for T2</p><p class="s17" style="padding-left: 126pt;text-indent: 0pt;line-height: 8pt;text-align: left;">returns immediately; T2 is done</p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;line-height: 8pt;text-align: left;">prints “main: end”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 10pt;text-indent: 0pt;line-height: 91%;text-align: left;">runs prints “A” returns</p><p class="s12" style="padding-left: 9pt;text-indent: 0pt;line-height: 92%;text-align: left;">runs prints “B” returns</p><p style="padding-top: 5pt;padding-left: 158pt;text-indent: 0pt;text-align: left;">Table 26.3: <b>Thread Trace (3)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;pthread.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &quot;mythreads.h&quot;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">4</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">static volatile int counter = 0;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">6</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7  <span class="s38">//</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">8  <span class="s38">// mythread()</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">9  <span class="s38">//</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10  <span class="s38">// Simply adds 1 to counter repeatedly, in a loop</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11  <span class="s38">// No, this is not how you would add 10,000,000 to</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12  <span class="s38">// a counter, but it shows the problem nicely.</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13  <span class="s38">//</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">14  <span class="s38">void </span><span class="s39">*</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 85%;text-align: left;"><span class="s37">15  </span>mythread(void <span class="s39">*</span>arg)</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">16  <span class="s38">{</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">17    </span>printf(&quot;%s: begin\n&quot;, (char <span class="s39">*</span>) arg);</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">18    <span class="s38">int i;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19     <span class="s38">for (i = 0; i &lt; 1e7; i++) {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20       <span class="s38">counter = counter + 1;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">21    <span class="s38">}</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">22    </span>printf(&quot;%s: done\n&quot;, (char <span class="s39">*</span>) arg);</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">23    <span class="s38">return NULL;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">24  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">25</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">26  <span class="s38">//</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">27  <span class="s38">// main()</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">28  <span class="s38">//</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">29  <span class="s38">// Just launches two threads (pthread_create)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">30  <span class="s38">// and then waits for them (pthread_join)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">31  <span class="s38">//</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">32  <span class="s38">int</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">33  </span>main(int argc, char <span class="s39">*</span>argv[])</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">34  <span class="s38">{</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">35    <span class="s38">pthread_t p1, p2;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">36    <span class="s38">printf(&quot;main: begin (counter = %d)\n&quot;, counter);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">37    <span class="s38">Pthread_create(&amp;p1, NULL, mythread, &quot;A&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">38    <span class="s38">Pthread_create(&amp;p2, NULL, mythread, &quot;B&quot;);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">39</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">40     <span class="s38">// join waits for the threads to finish</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">41    <span class="s38">Pthread_join(p1, NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">42    <span class="s38">Pthread_join(p2, NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">43     <span class="s38">printf(&quot;main: done with both (counter = %d)\n&quot;, counter);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">44    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">45  <span class="s38">}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">Figure 26.3: <b>Sharing Data: Oh Oh (t2)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part261.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part263.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
