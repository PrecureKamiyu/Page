<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>8.6 Nonlocal Jumps</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006DFA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000455FC" data-uri="chapter08.xhtml#P70004970270000000000000000455FC" epub:type="title"><span class="pcalibre label pcalibre1">8.6 </span>Nonlocal Jumps</h1></header>
<p id="P70004970270000000000000000455FD" data-uri="chapter08.xhtml#P70004970270000000000000000455FD" class="pcalibre1 pcalibre calibre2">C provides a form of user-level exceptional control flow, called a <i class="calibre5 pcalibre pcalibre1">nonlocal jump</i>, that transfers control directly from one function to another currently executing function without having to go through the normal call-and-return sequence. Nonlocal jumps are provided by the <code id="P70004970270000000000000000455FE" data-uri="chapter08.xhtml#P70004970270000000000000000455FE" class="pcalibre1 calibre8 pcalibre">setjmp</code> and <code id="P70004970270000000000000000455FF" data-uri="chapter08.xhtml#P70004970270000000000000000455FF" class="pcalibre1 calibre8 pcalibre">longjmp</code> functions.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006DFF" data-uri="chapter08.xhtml#P7000497027000000000000000006DFF">
<p id="P7000497027000000000000000045600" data-uri="chapter08.xhtml#P7000497027000000000000000045600" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E01" title="782" data-uri="chapter08.xhtml#P7000497027000000000000000006E01" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/sigsuspend.c</i></p>
<pre id="P7000497027000000000000000045601" data-uri="chapter08.xhtml#P7000497027000000000000000045601" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045602" data-uri="chapter08.xhtml#P7000497027000000000000000045602" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	volatile sig_atomic_t pid;
4	
5	void sigchld_handler(int s)
6	{
7		int olderrno = errno;
8		pid = Waitpid(-1, NULL, 0);
9		errno = olderrno;
10	}
11	
12	void sigint_handler(int s)
13	{
14	}
15	
16	int main(int argc, char **argv)
17	{
18		sigset_t mask, prev;
19	
20		Signal(SIGCHLD, sigchldjiandler);
21		Signal(SIGINT, sigint_handler);
22		Sigemptyset(&amp;mask);
23		Sigaddset(&amp;mask, SIGCHLD);
24	
25		while (1) {
26			Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev); /* Block SIGCHLD */
27			if (Fork() == 0) /* Child */
28				exit(0);
29	
30			/* Wait for SIGCHLD to be received */
31			pid = 0;
32			while (!pid)
33				sigsuspend(&amp;prev);
34	
35			/* Optionally unblock SIGCHLD */
36			Sigprocmask(SIG_SETMASK, &amp;prev, NULL);
37	
38			/* Do some work after receiving SIGCHLD */
39			printf (".");
40		}
41		exit(0);
42	}
</code>
</pre>
<p id="P7000497027000000000000000045603" data-uri="chapter08.xhtml#P7000497027000000000000000045603" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/sigsuspend.c</i></p>
<figcaption id="P7000497027000000000000000045604" data-uri="chapter08.xhtml#P7000497027000000000000000045604" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045605" data-uri="chapter08.xhtml#P7000497027000000000000000045605" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">8.42 </span>Waiting for a signal with <code id="P7000497027000000000000000045606" data-uri="chapter08.xhtml#P7000497027000000000000000045606" class="pcalibre1 calibre8 pcalibre">sigsuspend</code>.</h1></header>
</figcaption>
</figure>
<pre id="P7000497027000000000000000045607" data-uri="chapter08.xhtml#P7000497027000000000000000045607" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045608" data-uri="chapter08.xhtml#P7000497027000000000000000045608" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E0A" title="783" data-uri="chapter08.xhtml#P7000497027000000000000000006E0A" epub:type="pagebreak"></span>#include &lt;setjmp.h&gt;
int setjmp(jmp_buf env);
int sigsetjmp(sigjmp_buf env, int savesigs);
				Returns: 0 from set jmp, nonzero from longjmps
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045609" data-uri="chapter08.xhtml#P7000497027000000000000000045609">The <code id="P700049702700000000000000004560A" data-uri="chapter08.xhtml#P700049702700000000000000004560A" class="pcalibre1 calibre8 pcalibre">setjmp</code> function saves the current <i class="calibre5 pcalibre pcalibre1">calling environment</i> in the <code id="P700049702700000000000000004560B" data-uri="chapter08.xhtml#P700049702700000000000000004560B" class="pcalibre1 calibre8 pcalibre">env</code> buffer, for later use by <code id="P700049702700000000000000004560C" data-uri="chapter08.xhtml#P700049702700000000000000004560C" class="pcalibre1 calibre8 pcalibre">longjmp</code>, and returns 0. The calling environment includes the program counter, stack pointer, and general-purpose registers. For subtle reasons beyond our scope, the value that <code id="P700049702700000000000000004560D" data-uri="chapter08.xhtml#P700049702700000000000000004560D" class="pcalibre1 calibre8 pcalibre">setjmp</code> returns should not be assigned to a variable:</p>
<pre id="P700049702700000000000000004560E" data-uri="chapter08.xhtml#P700049702700000000000000004560E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004560F" data-uri="chapter08.xhtml#P700049702700000000000000004560F" class="calibre10 pcalibre pcalibre1">rc = setjmp(env); /* Wrong! */</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045610" data-uri="chapter08.xhtml#P7000497027000000000000000045610">However, it can be safely used as a test in a <code id="P7000497027000000000000000045611" data-uri="chapter08.xhtml#P7000497027000000000000000045611" class="pcalibre1 calibre8 pcalibre">switch</code> or conditional statement [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B41E">62</a>].</p>
<pre id="P7000497027000000000000000045612" data-uri="chapter08.xhtml#P7000497027000000000000000045612" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045613" data-uri="chapter08.xhtml#P7000497027000000000000000045613" class="calibre10 pcalibre pcalibre1">
#include &lt;setjmp.h&gt;
void longjmp(jmp_buf env, int retval);
void siglongjmp(sigjmp_buf env, int retval);
Never returns
</code>
</pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045614" data-uri="chapter08.xhtml#P7000497027000000000000000045614">The <code id="P7000497027000000000000000045615" data-uri="chapter08.xhtml#P7000497027000000000000000045615" class="pcalibre1 calibre8 pcalibre">longjmp</code> function restores the calling environment from the <code id="P7000497027000000000000000045616" data-uri="chapter08.xhtml#P7000497027000000000000000045616" class="pcalibre1 calibre8 pcalibre">env</code> buffer and then triggers a return from the most recent <code id="P7000497027000000000000000045617" data-uri="chapter08.xhtml#P7000497027000000000000000045617" class="pcalibre1 calibre8 pcalibre">setjmp</code> call that initialized <code id="P7000497027000000000000000045618" data-uri="chapter08.xhtml#P7000497027000000000000000045618" class="pcalibre1 calibre8 pcalibre">env</code>. The <code id="P7000497027000000000000000045619" data-uri="chapter08.xhtml#P7000497027000000000000000045619" class="pcalibre1 calibre8 pcalibre">setjmp</code> then returns with the nonzero return value <code id="P700049702700000000000000004561A" data-uri="chapter08.xhtml#P700049702700000000000000004561A" class="pcalibre1 calibre8 pcalibre">retval</code>.</p>
<p id="P700049702700000000000000004561B" data-uri="chapter08.xhtml#P700049702700000000000000004561B" class="pcalibre1 pcalibre calibre2">The interactions between <code id="P700049702700000000000000004561C" data-uri="chapter08.xhtml#P700049702700000000000000004561C" class="pcalibre1 calibre8 pcalibre">setjmp</code> and <code id="P700049702700000000000000004561D" data-uri="chapter08.xhtml#P700049702700000000000000004561D" class="pcalibre1 calibre8 pcalibre">longjmp</code> can be confusing at first glance. The <code id="P700049702700000000000000004561E" data-uri="chapter08.xhtml#P700049702700000000000000004561E" class="pcalibre1 calibre8 pcalibre">setjmp</code> function is called once but returns <i class="calibre5 pcalibre pcalibre1">multiple times:</i> once when the <code id="P700049702700000000000000004561F" data-uri="chapter08.xhtml#P700049702700000000000000004561F" class="pcalibre1 calibre8 pcalibre">setjmp</code> is first called and the calling environment is stored in the <code id="P7000497027000000000000000045620" data-uri="chapter08.xhtml#P7000497027000000000000000045620" class="pcalibre1 calibre8 pcalibre">env</code> buffer, and once for each corresponding <code id="P7000497027000000000000000045621" data-uri="chapter08.xhtml#P7000497027000000000000000045621" class="pcalibre1 calibre8 pcalibre">longjmp</code> call. On the other hand, the <code id="P7000497027000000000000000045622" data-uri="chapter08.xhtml#P7000497027000000000000000045622" class="pcalibre1 calibre8 pcalibre">longjmp</code> function is called once but never returns.</p>
<p id="P7000497027000000000000000045623" data-uri="chapter08.xhtml#P7000497027000000000000000045623" class="pcalibre1 pcalibre calibre2">An important application of nonlocal jumps is to permit an immediate return from a deeply nested function call, usually as a result of detecting some error condition. If an error condition is detected deep in a nested function call, we can use a nonlocal jump to return directly to a common localized error handler instead of laboriously unwinding the call stack.</p>
<p id="P7000497027000000000000000045624" data-uri="chapter08.xhtml#P7000497027000000000000000045624" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006E32"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.43 </span></a>shows an example of how this might work. The <code id="P7000497027000000000000000045625" data-uri="chapter08.xhtml#P7000497027000000000000000045625" class="pcalibre1 calibre8 pcalibre">main</code> routine first calls <code id="P7000497027000000000000000045626" data-uri="chapter08.xhtml#P7000497027000000000000000045626" class="pcalibre1 calibre8 pcalibre">setjmp</code> to save the current calling environment, and then calls function <code id="P7000497027000000000000000045627" data-uri="chapter08.xhtml#P7000497027000000000000000045627" class="pcalibre1 calibre8 pcalibre">foo</code>, which in turn calls function <code id="P7000497027000000000000000045628" data-uri="chapter08.xhtml#P7000497027000000000000000045628" class="pcalibre1 calibre8 pcalibre">bar</code>. If <code id="P7000497027000000000000000045629" data-uri="chapter08.xhtml#P7000497027000000000000000045629" class="pcalibre1 calibre8 pcalibre">foo</code> or <code id="P700049702700000000000000004562A" data-uri="chapter08.xhtml#P700049702700000000000000004562A" class="pcalibre1 calibre8 pcalibre">bar</code> encounter an error, they return immediately from the <code id="P700049702700000000000000004562B" data-uri="chapter08.xhtml#P700049702700000000000000004562B" class="pcalibre1 calibre8 pcalibre">setjmp</code> via a <code id="P700049702700000000000000004562C" data-uri="chapter08.xhtml#P700049702700000000000000004562C" class="pcalibre1 calibre8 pcalibre">longjmp</code> call. The nonzero return value of the <code id="P700049702700000000000000004562D" data-uri="chapter08.xhtml#P700049702700000000000000004562D" class="pcalibre1 calibre8 pcalibre">setjmp</code> indicates the error type, which can then be decoded and handled in one place in the code.</p>
<p id="P700049702700000000000000004562E" data-uri="chapter08.xhtml#P700049702700000000000000004562E" class="pcalibre1 pcalibre calibre2">The feature of <code id="P700049702700000000000000004562F" data-uri="chapter08.xhtml#P700049702700000000000000004562F" class="pcalibre1 calibre8 pcalibre">longjmp</code> that allows it to skip up through all intermediate calls can have unintended consequences. For example, if some data structures were allocated in the intermediate function calls with the intention to deallocate them at the end of the function, the deallocation code gets skipped, thus creating a memory leak.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006E32" data-uri="chapter08.xhtml#P7000497027000000000000000006E32">
<p id="P7000497027000000000000000045630" data-uri="chapter08.xhtml#P7000497027000000000000000045630" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E34" title="784" data-uri="chapter08.xhtml#P7000497027000000000000000006E34" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/setjmp.c</i></p>
<pre id="P7000497027000000000000000045631" data-uri="chapter08.xhtml#P7000497027000000000000000045631" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045632" data-uri="chapter08.xhtml#P7000497027000000000000000045632" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	jmp_buf buf;
4	
5	int error1 = 0;
6	int error2 = 1;
7	
8	void foo(void), bar(void);
9	
10	int main()
11	{
12		switch(setjmp(buf)) {
13		case 0:
14			foo();
15			break;
16		case 1:
17			printf("Detected an error1 condition in foo\n");
18			break;
19		case 2:
20			printf("Detected an error2 condition in foo\n");
21			break;
22		default:
23			printf("Unknown error condition in foo\n");
24		}
25		exit(0);
26	}
27	
28	/* Deeply nested function foo */
29	void foo(void)
30	{
31		if (error1)
32			longjmp(buf, 1);
33		bar();
34	}
35	
36	void bar void)
37	{
38		if (error2)
39			longjmp(buf, 2);
40	}
</code>
</pre>
<p id="P7000497027000000000000000045633" data-uri="chapter08.xhtml#P7000497027000000000000000045633" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/setjmp.c</i></p>
<figcaption id="P7000497027000000000000000045634" data-uri="chapter08.xhtml#P7000497027000000000000000045634" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045635" data-uri="chapter08.xhtml#P7000497027000000000000000045635" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.43 </span>Nonlocal jump example.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000045636" data-uri="chapter08.xhtml#P7000497027000000000000000045636"><p id="P7000497027000000000000000045637" data-uri="chapter08.xhtml#P7000497027000000000000000045637" class="pcalibre calibre3 pcalibre1">This example shows the framework for using nonlocal jumps to recover from error conditions in deeply nested functions without having to unwind the entire stack.
</p></div>
</figcaption>
</figure>


<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006E3C" data-uri="chapter08.xhtml#P7000497027000000000000000006E3C">
<p id="P7000497027000000000000000045638" data-uri="chapter08.xhtml#P7000497027000000000000000045638" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E3E" title="785" data-uri="chapter08.xhtml#P7000497027000000000000000006E3E" epub:type="pagebreak"></span>------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/restart.c</i></p>
<pre id="P7000497027000000000000000045639" data-uri="chapter08.xhtml#P7000497027000000000000000045639" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004563A" data-uri="chapter08.xhtml#P700049702700000000000000004563A" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	sigjmp_buf buf;
4	
5	void handler(int sig)
6	{
7		siglongjmp(buf, 1);
8	}
9	
10	int main()
11	{
12		if (!sigsetjmp(buf, 1)) {
13			Signal(SIGINT, handler);
14			Sio_puts("starting\n");
15		}
16		else
17			Sio_puts("restarting\n");
18	
19		while(1) {
20			Sleep (1);
21			Sio_puts("processing...\n");
22		}
23		exit(0); /* Control never reaches here */
24	}
</code>
</pre>
<p id="P700049702700000000000000004563B" data-uri="chapter08.xhtml#P700049702700000000000000004563B" class="pcalibre1 pcalibre calibre2">------------------------------------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/ecf/restart.c</i></p>
<figcaption id="P700049702700000000000000004563C" data-uri="chapter08.xhtml#P700049702700000000000000004563C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004563D" data-uri="chapter08.xhtml#P700049702700000000000000004563D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">8.44 </span>A program that uses nonlocal jumps to restart itself when the user types Ctrl+C.</h1></header>

</figcaption>
</figure>
<p id="P700049702700000000000000004563E" data-uri="chapter08.xhtml#P700049702700000000000000004563E" class="pcalibre1 pcalibre calibre2">Another important application of nonlocal jumps is to branch out of a signal handler to a specific code location, rather than returning to the instruction that was interrupted by the arrival of the signal. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006E3C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.44 </span></a>shows a simple program that illustrates this basic technique. The program uses signals and nonlocal jumps to do a soft restart whenever the user types Ctrl+C at the keyboard. The <code id="P700049702700000000000000004563F" data-uri="chapter08.xhtml#P700049702700000000000000004563F" class="pcalibre1 calibre8 pcalibre">sigsetjmp</code> and <code id="P7000497027000000000000000045640" data-uri="chapter08.xhtml#P7000497027000000000000000045640" class="pcalibre1 calibre8 pcalibre">siglongjmp</code> functions are versions of <code id="P7000497027000000000000000045641" data-uri="chapter08.xhtml#P7000497027000000000000000045641" class="pcalibre1 calibre8 pcalibre">setjmp</code> and <code id="P7000497027000000000000000045642" data-uri="chapter08.xhtml#P7000497027000000000000000045642" class="pcalibre1 calibre8 pcalibre">longjmp</code> that can be used by signal handlers.</p>
<p id="P7000497027000000000000000045643" data-uri="chapter08.xhtml#P7000497027000000000000000045643" class="pcalibre1 pcalibre calibre2">The initial call to the <code id="P7000497027000000000000000045644" data-uri="chapter08.xhtml#P7000497027000000000000000045644" class="pcalibre1 calibre8 pcalibre">sigsetjmp</code> function saves the calling environment and signal context (including the pending and blocked signal vectors) when the program first starts. The main routine then enters an infinite processing loop. When the user types Ctrl+C, the kernel sends a SIGINT signal to the process, which catches it. Instead of returning from the signal handler, which would pass control back to the interrupted processing loop, the handler performs a nonlocal jump back to the beginning of the <code id="P7000497027000000000000000045645" data-uri="chapter08.xhtml#P7000497027000000000000000045645" class="pcalibre1 calibre8 pcalibre">main</code> program. When we run the program on our system, we get the following output:</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000045646" data-uri="chapter08.xhtml#P7000497027000000000000000045646"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000045647" data-uri="chapter08.xhtml#P7000497027000000000000000045647" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006E4E" title="786" data-uri="chapter08.xhtml#P7000497027000000000000000006E4E" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Software exceptions in C++ and Java</h1></header>
<p id="P7000497027000000000000000045648" data-uri="chapter08.xhtml#P7000497027000000000000000045648" class="pcalibre calibre3 pcalibre1">The exception mechanisms provided by C++ and Java are higher-level, more structured versions of the C <code id="P7000497027000000000000000045649" data-uri="chapter08.xhtml#P7000497027000000000000000045649" class="pcalibre1 calibre8 pcalibre">setjmp</code> and <code id="P700049702700000000000000004564A" data-uri="chapter08.xhtml#P700049702700000000000000004564A" class="pcalibre1 calibre8 pcalibre">longjmp</code> functions. You can think of a <code id="P700049702700000000000000004564B" data-uri="chapter08.xhtml#P700049702700000000000000004564B" class="pcalibre1 calibre8 pcalibre">catch</code> clause inside a <code id="P700049702700000000000000004564C" data-uri="chapter08.xhtml#P700049702700000000000000004564C" class="pcalibre1 calibre8 pcalibre">try</code> statement as being akin to a <code id="P700049702700000000000000004564D" data-uri="chapter08.xhtml#P700049702700000000000000004564D" class="pcalibre1 calibre8 pcalibre">setjmp</code> function. Similarly, a <code id="P700049702700000000000000004564E" data-uri="chapter08.xhtml#P700049702700000000000000004564E" class="pcalibre1 calibre8 pcalibre">throw</code> statement is similar to a <code id="P700049702700000000000000004564F" data-uri="chapter08.xhtml#P700049702700000000000000004564F" class="pcalibre1 calibre8 pcalibre">longjmp</code> function.</p>
</aside>
<pre id="P7000497027000000000000000045650" data-uri="chapter08.xhtml#P7000497027000000000000000045650" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000045651" data-uri="chapter08.xhtml#P7000497027000000000000000045651" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./restart</i>
starting
processing...
processing...
<i class="calibre5 pcalibre pcalibre1">Ctrl+C</i>
restarting
processing...
<i class="calibre5 pcalibre pcalibre1">Ctrl+C</i>
restarting
processing...
</code>
</pre>
<p id="P7000497027000000000000000045652" data-uri="chapter08.xhtml#P7000497027000000000000000045652" class="pcalibre1 pcalibre calibre2">There a couple of interesting things about this program. First, To avoid a race, we must install the handler <i class="calibre5 pcalibre pcalibre1">after</i> we call <code id="P7000497027000000000000000045653" data-uri="chapter08.xhtml#P7000497027000000000000000045653" class="pcalibre1 calibre8 pcalibre">sigsetjmp</code>. If not, we would run the risk of the handler running before the initial call to <code id="P7000497027000000000000000045654" data-uri="chapter08.xhtml#P7000497027000000000000000045654" class="pcalibre1 calibre8 pcalibre">sigsetjmp</code> sets up the calling environment for <code id="P7000497027000000000000000045655" data-uri="chapter08.xhtml#P7000497027000000000000000045655" class="pcalibre1 calibre8 pcalibre">siglongjmp</code>. Second, you might have noticed that the <code id="P7000497027000000000000000045656" data-uri="chapter08.xhtml#P7000497027000000000000000045656" class="pcalibre1 calibre8 pcalibre">sigsetjmp</code> and <code id="P7000497027000000000000000045657" data-uri="chapter08.xhtml#P7000497027000000000000000045657" class="pcalibre1 calibre8 pcalibre">siglongjmp</code> functions are not on the list of async-signal-safe functions in <span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">8.33</span>. The reason is that in general <code id="P7000497027000000000000000045658" data-uri="chapter08.xhtml#P7000497027000000000000000045658" class="pcalibre1 calibre8 pcalibre">siglongjmp</code> can jump into arbitrary code, so we must be careful to call only safe functions in any code reachable from a <code id="P7000497027000000000000000045659" data-uri="chapter08.xhtml#P7000497027000000000000000045659" class="pcalibre1 calibre8 pcalibre">siglongjmp</code>. In our example, we call the safe <code id="P700049702700000000000000004565A" data-uri="chapter08.xhtml#P700049702700000000000000004565A" class="pcalibre1 calibre8 pcalibre">sio_puts</code> and <code id="P700049702700000000000000004565B" data-uri="chapter08.xhtml#P700049702700000000000000004565B" class="pcalibre1 calibre8 pcalibre">sleep</code> functions. The unsafe <code id="P700049702700000000000000004565C" data-uri="chapter08.xhtml#P700049702700000000000000004565C" class="pcalibre1 calibre8 pcalibre">exit</code> function is unreachable.</p>
</section></body></html>
