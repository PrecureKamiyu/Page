<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>17.6  Serializability</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part315.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part317.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">17.6  <span style=" color: #00AEEF;">Serializability</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Before we can consider how the concurrency-control component of the database sys- tem can ensure serializability, we consider how to determine when a schedule is serial- izable. Certainly, serial schedules are serializable, but if steps of multiple transactions are interleaved, it is harder to determine whether a schedule is serializable. Since trans-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:233.814pt" cellspacing="0"><tr style="height:18pt"><td style="width:64pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 24pt;padding-right: 24pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">1</span></p></td><td style="width:79pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 33pt;padding-right: 33pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">2</span></p></td></tr><tr style="height:200pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p><p class="s71" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">A <span class="s72">:= </span>A <span class="s365">− </span><span class="s72">50</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-top: 13pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s424">write</span>(<i>A</i>) <span class="s424">read</span>(<i>B</i>)</p><p class="s71" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">B <span class="s72">:= </span>B <span class="s365">+ </span><span class="s72">50</span></p><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 107%;text-align: left;"><span class="s424">write</span>(<i>B</i>) <span class="s424">commit</span></p></td><td style="width:79pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p><p class="s71" style="padding-left: 7pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">temp <span class="s72">:= </span>A <span class="s365">∗ </span><span class="s72">0.1 </span>A <span class="s72">:= </span>A <span class="s365">− </span>temp <span class="s424">write</span><span class="s72">(</span>A<span class="s72">) </span><span class="s424">read</span><span class="s72">(</span>B<span class="s72">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s71" style="padding-top: 9pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">B <span class="s72">:= </span>B <span class="s365">+ </span>temp <span class="s424">write</span><span class="s72">(</span>B<span class="s72">) </span><span class="s424">commit</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 127pt;text-indent: 0pt;text-align: left;">Figure 17.5 <span class="s74">Schedule 4 — a concurrent schedule resulting in an inconsistent state.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">actions are programs, it is diﬃcult to determine exactly what operations a transaction performs and how operations of various transactions interact. For this reason, we shall not consider the various types of operations that a transaction can perform on a data item, but instead consider only two operations: <span class="s49">read </span>and <span class="s49">write</span>. We assume that, be- tween a <span class="s49">read</span>(<i>Q</i>) instruction and a <span class="s49">write</span>(<i>Q</i>) instruction on a data item <i>Q</i>,a transaction may perform an arbitrary sequence of operations on the copy of <i>Q </i>that is residing in the local buﬀer of the transaction. In this model, the only signiﬁcant operations of a transaction, from a scheduling point of view, are its <span class="s49">read </span>and <span class="s49">write </span>instructions. Com- mit operations, though relevant, are not considered until Section 17.7. We therefore may show only <span class="s49">read </span>and <span class="s49">write </span>instructions in schedules, as we do for schedule 3 in Figure 17.6.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In this section, we discuss diﬀerent forms of schedule equivalence but focus on a particular form called <span class="s63">conflict serializability</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;line-height: 94%;text-align: justify;">Let us consider a schedule <i>S </i>in which there are two consecutive instructions, <i>I </i>and <i>J</i>, of transactions <i>T</i><span class="s145">i </span>and <i>T</i><span class="s145">j </span>, respectively (<i>i </i><span class="s86">≠ </span><i>j</i>). If <i>I </i>and <i>J </i>refer to diﬀerent data items, then we can swap <i>I </i>and <i>J </i>without aﬀecting the results of any instruction in the schedule. However, if <i>I </i>and <i>J </i>refer to the same data item <i>Q</i>, then the order of the two steps may matter. Since we are dealing with only <span class="s49">read </span>and <span class="s49">write </span>instructions, there are</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">four cases that we need to consider:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: -16pt;text-align: left;"><span class="s63">1. </span><i>I </i>= <span class="s49">read</span>(<i>Q</i>), <i>J </i>= <span class="s49">read</span>(<i>Q</i>). The order of <i>I </i>and <i>J </i>does not matter, since the same value of <i>Q </i>is read by <i>T</i><span class="s97">i </span>and <i>T</i><span class="s97">j </span>, regardless of the order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:221.094pt" cellspacing="0"><tr style="height:18pt"><td style="width:53pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">1</span></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">2</span></p></td></tr><tr style="height:31pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s424">read</span>(<i>A</i>) <span class="s424">write</span>(<i>A</i>)</p></td><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:26pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>A</i>)</p></td></tr><tr style="height:26pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>B</i>)</p><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>B</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:27pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>B</i>) <span class="s424">write</span>(<i>B</i>)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 17.6 </span>Schedule 3 — showing only the <span class="s157">read </span>and <span class="s157">write </span>instructions.</p><p style="padding-top: 10pt;padding-left: 113pt;text-indent: -17pt;line-height: 87%;text-align: justify;"><span class="s63">2. </span><i>I </i>= <span class="s49">read</span>(<i>Q</i>), <i>J </i>= <span class="s49">write</span>(<i>Q</i>). If <i>I </i>comes before <i>J</i>, then <i>T</i><span class="s97">i </span>does not read the value of <i>Q </i>that is written by <i>T</i><span class="s97">j </span>in instruction <i>J</i>. If <i>J </i>comes before <i>I </i>, then <i>T</i><span class="s97">i </span>reads the value of <i>Q </i>that is written by <i>T</i><span class="s97">j </span>. Thus, the order of <i>I </i>and <i>J </i>matters.</p><p style="padding-top: 4pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;"><span class="s63">3. </span><i>I </i>= <span class="s49">write</span>(<i>Q</i>), <i>J </i>= <span class="s49">read</span>(<i>Q</i>). The order of <i>I </i>and <i>J </i>matters for reasons similar to those of the previous case.</p><p style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;"><span class="s63">4. </span><i>I </i>= <span class="s49">write</span>(<i>Q</i>), <i>J </i>= <span class="s49">write</span>(<i>Q</i>). Since both instructions are <span class="s49">write </span>operations, the order of these instructions does not aﬀect either <i>T</i><span class="s145">i </span>or <i>T</i><span class="s145">j </span>. However, the value obtained by the next <span class="s49">read</span>(<i>Q</i>) instruction of <i>S </i>is aﬀected, since the result of only the latter of the two <span class="s49">write </span>instructions is preserved in the database. If there is no other <span class="s49">write</span>(<i>Q</i>) instruction after <i>I </i>and <i>J </i>in <i>S</i>, then the order of <i>I </i>and <i>J </i>directly</p><p style="padding-left: 113pt;text-indent: 0pt;text-align: justify;">aﬀects the ﬁnal value of <i>Q </i>in the database state that results from schedule <i>S</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Thus, only in the case where both <i>I </i>and <i>J </i>are <span class="s49">read </span>instructions does the relative order of their execution not matter.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We say that <i>I </i>and <i>J </i><span class="s63">conflict </span>if they are operations by diﬀerent transactions on the same data item, and at least one of these instructions is a <span class="s49">write </span>operation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To illustrate the concept of conﬂicting instructions, we consider schedule 3 in Fig- ure 17.6. The <span class="s49">write</span>(<i>A</i>) instruction of <i>T</i><span class="s98">1</span> conﬂicts with the <span class="s49">read</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span>. However, the <span class="s49">write</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span> does not conﬂict with the <span class="s49">read</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span> because the two instructions access diﬀerent data items.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Let <i>I </i>and <i>J </i>be consecutive instructions of a schedule <i>S</i>. If <i>I </i>and <i>J </i>are instructions of diﬀerent transactions and <i>I </i>and <i>J </i>do not conﬂict, then we can swap the order of <i>I </i>and <i>J </i>to produce a new schedule <i>S</i><span class="s181">′</span>. <i>S </i>is equivalent to <i>S</i><span class="s181">′</span>, since all instructions appear in the same order in both schedules except for <i>I </i>and <i>J</i>, whose order does not matter.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Since the <span class="s49">write</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span> in schedule 3 of Figure 17.6 does not con- ﬂict with the <span class="s49">read</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span>, we can swap these instructions to generate an equivalent schedule, schedule 5, in Figure 17.7. Regardless of the initial system state, schedules 3 and 5 both produce the same ﬁnal system state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:252.534pt" cellspacing="0"><tr style="height:18pt"><td style="width:53pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">1</span></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">2</span></p></td></tr><tr style="height:31pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s424">read</span>(<i>A</i>) <span class="s424">write</span>(<i>A</i>)</p></td><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">read</span>(<i>A</i>)</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>B</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">write</span>(<i>A</i>)</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>B</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:27pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>B</i>) <span class="s424">write</span>(<i>B</i>)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 138pt;text-indent: 0pt;text-align: left;">Figure 17.7 <span class="s74">Schedule 5 — schedule 3 after swapping of a pair of instructions.</span></p><p style="padding-top: 8pt;padding-left: 137pt;text-indent: 0pt;text-align: left;">We continue to swap nonconﬂicting instructions:</p><p style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">Swap the </span><span class="s49">read</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span> with the <span class="s49">read</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span>.</p><p style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">Swap the </span><span class="s49">write</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span> with the <span class="s49">write</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span>.</p><p style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">Swap the </span><span class="s49">write</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span> with the <span class="s49">read</span>(<i>A</i>) instruction of <i>T</i><span class="s98">2</span>.</p><p style="padding-top: 5pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The ﬁnal result of these swaps, schedule 6 of Figure 17.8, is a serial schedule. Note that schedule 6 is exactly the same as schedule 1, but it shows only the <span class="s49">read </span>and <span class="s49">write </span>instructions. Thus, we have shown that schedule 3 is equivalent to a serial schedule. This equivalence implies that, regardless of the initial system state, schedule 3 produces the same ﬁnal state as some serial schedule.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If a schedule <i>S </i>can be transformed into a schedule <i>S</i><span class="s181">′</span><span class="s15"> </span>by a series of swaps of non- conﬂicting instructions, we say that <i>S </i>and <i>S</i><span class="s181">′</span><span class="s15"> </span>are <span class="s63">conflict equivalent</span>.<span class="s76">2</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:252.534pt" cellspacing="0"><tr style="height:18pt"><td style="width:53pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">1</span></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">2</span></p></td></tr><tr style="height:18pt"><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p></td><td style="width:52pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>A</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>B</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>B</i>)</p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 2pt;padding-right: 5pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">read</span>(<i>A</i>)</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">write</span>(<i>A</i>)</p></td></tr><tr style="height:13pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">read</span>(<i>B</i>)</p></td></tr><tr style="height:14pt"><td style="width:53pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:52pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 2pt;padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: center;"><span class="s424">write</span>(<i>B</i>)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 141pt;text-indent: 0pt;text-align: left;">Figure 17.8 <span class="s74">Schedule 6 — a serial schedule that is equivalent to schedule 3.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2977.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">2<span class="s78">We use the term </span><span class="s111">conflict equivalent </span><span class="s80">to distinguish the way we have just deﬁned equivalence from other deﬁnitions that we shall discuss later on in this section.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:220.194pt" cellspacing="0"><tr style="height:18pt"><td style="width:54pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 5pt;padding-right: 6pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">3</span></p></td><td style="width:53pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">4</span></p></td></tr><tr style="height:44pt"><td style="width:54pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s424">read</span>(<i>Q</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s424">write</span>(<i>Q</i>)</p></td><td style="width:53pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: center;"><span class="s424">write</span>(<i>Q</i>)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 17.9 <span class="s74">Schedule 7.</span></p><p style="padding-top: 9pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">Not all serial schedules are conﬂict equivalent to each other. For example, sched- ules 1 and 2 are not conﬂict equivalent.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The concept of conﬂict equivalence leads to the concept of conﬂict serializability. We say that a schedule <i>S </i>is <span class="s63">conflict serializable </span>if it is conﬂict equivalent to a serial schedule. Thus, schedule 3 is conﬂict serializable, since it is conﬂict equivalent to the serial schedule 1.</p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 17pt;line-height: 92%;text-align: justify;">Finally, consider schedule 7 of Figure 17.9; it consists of only the signiﬁcant op- erations (that is, the <span class="s49">read </span>and <span class="s49">write</span>) of transactions <i>T</i><span class="s98">3</span> and <i>T</i><span class="s98">4</span>. This schedule is not conﬂict serializable, since it is not equivalent to either the serial schedule <span class="s83">&lt;</span><i>T</i><span class="s98">3</span>,<i>T</i><span class="s98">4</span><span class="s83">&gt; </span>or</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><span class="p">the serial schedule </span><span class="s83">&lt;</span>T<span class="s93">4</span><span class="s94">,</span>T<span class="s93">3</span><span class="s83">&gt;</span><span class="p">.</span></p><p style="padding-left: 106pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">We now present a simple and eﬃcient method for determining the conﬂict serial-</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">izability of a schedule. Consider a schedule <i>S</i>. We construct a directed graph, called a <span class="s63">precedence graph</span>, from <i>S</i>. This graph consists of a pair <i>G </i>= (<i>V, E</i>), where <i>V </i>is a set of vertices and <i>E </i>is a set of edges. The set of vertices consists of all the transactions participating in the schedule. The set of edges consists of all edges <i>T</i><span class="s145">i </span><span class="s86">→ </span><i>T</i><span class="s145">j </span>for which one of three conditions holds:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span class="s63">1. </span><i>T</i><span class="s145">i </span>executes <span class="s49">write</span>(<i>Q</i>) before <i>T</i><span class="s145">j </span>executes <span class="s49">read</span>(<i>Q</i>).</p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;text-align: left;"><span class="s63">2. </span><i>T</i><span class="s97">i </span>executes <span class="s49">read</span>(<i>Q</i>) before <i>T</i><span class="s97">j </span>executes <span class="s49">write</span>(<i>Q</i>).</p><p style="padding-top: 4pt;padding-left: 96pt;text-indent: 0pt;text-align: left;"><span class="s63">3. </span><i>T</i><span class="s97">i </span>executes <span class="s49">write</span>(<i>Q</i>) before <i>T</i><span class="s97">j </span>executes <span class="s49">write</span>(<i>Q</i>).</p><p class="s13" style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;line-height: 86%;text-align: justify;"><span class="p">If an edge </span>T<span class="s97">i </span><span class="s86">→ </span>T<span class="s97">j </span><span class="p">exists in the precedence graph, then, in any serial schedule </span>S<span class="s181">′</span><span class="s15"> </span><span class="p">equiv- alent to </span>S<span class="p">, </span>T<span class="s97">i </span><span class="p">must appear before </span>T<span class="s97">j </span><span class="p">.</span></p><p style="padding-left: 88pt;text-indent: 17pt;line-height: 88%;text-align: justify;">For example, the precedence graph for schedule 1 in Figure 17.10a contains the single edge <i>T</i><span class="s98">1</span> <span class="s86">→ </span><i>T</i><span class="s98">2</span>, since all the instructions of <i>T</i><span class="s98">1</span> are executed before the ﬁrst in- struction of <i>T</i><span class="s98">2</span> is executed. Similarly, Figure 17.10b shows the precedence graph for</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s465" style="padding-left: 154pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="123" height="44" alt="image" src="Image_2978.png"/></span></p><p class="s91" style="text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="s234">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="s234">2</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="123" height="44" alt="image" src="Image_2979.png"/></span></p><p class="s91" style="text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="s234">2</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="text-indent: 0pt;line-height: 12pt;text-align: left;">T<span class="s234">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s80" style="padding-top: 4pt;padding-left: 195pt;text-indent: 0pt;text-align: left;">(a)                   (b)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 17.10 <span class="s74">Precedence graph for (a) schedule 1 and (b) schedule 2.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="133" height="83" alt="image" src="Image_2980.png"/></span></p><p class="s111" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s142">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s142">2</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-top: 4pt;padding-left: 203pt;text-indent: 0pt;text-align: left;">Figure 17.11 <span class="s74">Precedence graph for schedule 4.</span></p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;line-height: 86%;text-align: justify;">schedule 2 with the single edge <i>T</i><span class="s98">2</span> <span class="s86">→ </span><i>T</i><span class="s98">1</span>, since all the instructions of <i>T</i><span class="s98">2</span> are executed before the ﬁrst instruction of <i>T</i><span class="s98">1</span> is executed.</p><p class="s13" style="padding-top: 2pt;padding-left: 119pt;text-indent: 17pt;line-height: 83%;text-align: justify;"><span class="p">The precedence graph for schedule 4 appears in Figure 17.11. It contains the edge </span>T<span class="s93">1 </span><span class="s86">→ </span>T<span class="s93">2 </span><span class="s94">because </span>T<span class="s93">1 </span><span class="s94">executes </span><span class="s49">read</span><span class="p">(</span>A<span class="p">) before </span>T<span class="s93">2 </span><span class="s94">executes </span><span class="s49">write</span><span class="p">(</span>A<span class="p">). It also contains the edge </span>T<span class="s93">2 </span><span class="s86">→ </span>T<span class="s93">1 </span><span class="s94">because </span>T<span class="s93">2 </span><span class="s94">executes </span><span class="s49">read</span><span class="p">(</span>B<span class="p">) before </span>T<span class="s93">1 </span><span class="s94">executes </span><span class="s49">write</span><span class="p">(</span>B<span class="p">).</span></p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">If the precedence graph for <i>S </i>has a cycle, then schedule <i>S </i>is not conﬂict serializ-</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">able. If the graph contains no cycles, then the schedule <i>S </i>is conﬂict serializable.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A <span class="s63">serializability order </span>of the transactions can be obtained by ﬁnding a linear order consistent with the partial order of the precedence graph. This process is called <span class="s63">topo- logical sorting</span>. There are, in general, several possible linear orders that can be obtained through a topological sort. For example, the graph of Figure 17.12a has the two accept- able linear orderings shown in Figure 17.12b and Figure 17.12c.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Thus, to test for conﬂict serializability, we need to construct the precedence graph and to invoke a cycle-detection algorithm. Cycle-detection algorithms can be found in standard textbooks on algorithms. Cycle-detection algorithms, such as those based on depth-ﬁrst search, require on the order of <i>n</i><span class="s76">2</span> operations, where <i>n </i>is the number of vertices in the graph (that is, the number of transactions).<span class="s76">3</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Returning to our previous examples, note that the precedence graphs for schedules 1 and 2 (Figure 17.10) indeed do not contain cycles. The precedence graph for sched- ule 4 (Figure 17.11), on the other hand, contains a cycle, indicating that this schedule is not conﬂict serializable.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is possible to have two schedules that produce the same outcome but that are not conﬂict equivalent. For example, consider transaction <i>T</i><span class="s98">5</span>, which transfers $10 from account <i>B </i>to account <i>A</i>. Let schedule 8 be as deﬁned in Figure 17.13. We claim that</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 78%;text-align: justify;">schedule 8 is not conﬂict equivalent to the serial schedule <span class="s83">&lt;</span><i>T</i><span class="s98">1</span>,<i>T</i><span class="s98">5</span><span class="s83">&gt;</span>, since, in sched- ule 8, the <span class="s49">write</span>(<i>B</i>) instruction of <i>T</i><span class="s98">5</span> conﬂicts with the <span class="s49">read</span>(<i>B</i>) instruction of <i>T</i><span class="s98">1</span>. This creates an edge <i>T</i><span class="s98">5</span> <span class="s86">→ </span><i>T</i><span class="s98">1</span> in the precedence graph. Similarly, we see that the <span class="s49">write</span>(<i>A</i>) instruction of <i>T</i><span class="s130">1 </span><span class="s94">conﬂicts with the </span><span class="s49">read </span>instruction of <i>T</i><span class="s130">5</span><span class="s94">, creating an edge </span><i>T</i><span class="s130">1 </span><span class="s86">→ </span><i>T</i><span class="s130">5</span><span class="s94">.</span></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">This shows that the precedence graph has a cycle and that schedule 8 is not serializable.</p><p style="padding-top: 1pt;padding-left: 119pt;text-indent: 0pt;line-height: 84%;text-align: justify;">However, the ﬁnal values of accounts <i>A </i>and <i>B </i>after the execution of either schedule 8 or the serial schedule <span class="s83">&lt;</span><i>T</i><span class="s98">1</span>,<i>T</i><span class="s98">5</span><span class="s83">&gt; </span>are the same — $960 and $2040, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2981.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">3<span class="s78">If instead we measure complexity in terms of the number of edges, which corresponds to the number of actual conﬂicts between active transactions, then depth-ﬁrst-based cycle detection is linear.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="150" height="130" alt="image" src="Image_2982.png"/></span></p><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">i</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">j</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">k</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">m</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;text-align: center;">(a)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s465" style="padding-left: 193pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="199" alt="image" src="Image_2983.png"/></span></p><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">i</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">j</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">k</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">m</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="199" alt="image" src="Image_2984.png"/></span></p><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">i</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">k</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">j</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s109" style="text-indent: 0pt;line-height: 10pt;text-align: left;">T<span class="s194">m</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s119" style="padding-top: 4pt;padding-left: 60pt;text-indent: 0pt;text-align: center;">(b)                 (c)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 17.12 <span class="s74">Illustration of topological sorting.</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">We can see from this example that there are less-stringent deﬁnitions of schedule equivalence than conﬂict equivalence. For the system to determine that schedule 8</p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 0pt;line-height: 70%;text-align: justify;">produces the same outcome as the serial schedule <span class="s83">&lt;</span><i>T</i><span class="s98">1</span>,<i>T</i><span class="s98">5</span><span class="s83">&gt;</span>, it must analyze the com- putation performed by <i>T</i><span class="s98">1</span> and <i>T</i><span class="s98">5</span>, rather than just the <span class="s49">read </span>and <span class="s49">write </span>operations. In</p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">general, such analysis is hard to implement and is computationally expensive. In our example, the ﬁnal result is the same as that of a serial schedule because of the math- ematical fact that the increment and decrement operations are commutative. While this may be easy to see in our simple example, the general case is not so easy since a transaction may be expressed as a complex <span class="s44">SQL </span>statement, a Java program with <span class="s44">JDBC </span>calls, etc.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">However, there are other deﬁnitions of schedule equivalence based purely on the <span class="s49">read </span>and <span class="s49">write </span>operations. One such deﬁnition is <i>view equivalence</i>, a deﬁnition that leads to the concept of <i>view serializability</i>. View serializability is not used in practice due to its high degree of computational complexity.<span class="s76">4</span> We therefore defer discussion of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_2985.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">4<span class="s78">Testing for view serializability has been proven to be NP-complete, which means that it is virtually certain that no eﬃcient test for view serializability exists.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:241.014pt" cellspacing="0"><tr style="height:18pt"><td style="width:64pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 24pt;padding-right: 24pt;text-indent: 0pt;line-height: 14pt;text-align: center;"><a name="bookmark373">T</a><span class="s232">1</span><a name="bookmark415">&zwnj;</a></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-top: 2pt;padding-left: 26pt;padding-right: 26pt;text-indent: 0pt;line-height: 14pt;text-align: center;">T<span class="s232">5</span></p></td></tr><tr style="height:17pt"><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p></td><td style="width:64pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:15pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">A <span class="s72">:= </span>A <span class="s365">− </span><span class="s72">50</span></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>A</i>)</p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s424">read</span>(<i>B</i>)</p></td></tr><tr style="height:15pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s71" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">B <span class="s72">:= </span>B <span class="s365">− </span><span class="s72">10</span></p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>B</i>)</p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s424">read</span>(<i>B</i>)</p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:15pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B <span class="s72">:= </span>B <span class="s365">+ </span><span class="s72">50</span></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 6pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>B</i>)</p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:13pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s424">read</span>(<i>A</i>)</p></td></tr><tr style="height:15pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s71" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">A <span class="s72">:= </span>A <span class="s365">+ </span><span class="s72">10</span></p></td></tr><tr style="height:14pt"><td style="width:64pt;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:64pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span class="s424">write</span>(<i>A</i>)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 250pt;text-indent: 0pt;text-align: left;">Figure 17.13 <span class="s74">Schedule 8.</span></p><p style="padding-top: 8pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">view serializability to Chapter 18, but, for completeness, note here that the example of schedule 8 is not view serializable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part315.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part317.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
