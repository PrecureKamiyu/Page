<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>17.1   Transaction Concept</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part310.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part312.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">17.1   <span style=" color: #00AEEF;">Transaction Concept</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A <span class="s63">transaction </span>is a <b>unit </b>of program execution that accesses and possibly updates various data items. Usually, a transaction is initiated by a user program written in a high-level data-manipulation language (typically <span class="s44">SQL</span>), or programming language (e.g., C++ or Java), with embedded database accesses in <span class="s44">JDBC </span>or <span class="s44">ODBC</span>. A transaction is delimited by statements (or function calls) of the form <b>begin transaction </b>and <b>end transaction</b>. The transaction consists of all operations executed between the <b>begin transaction </b>and <b>end transaction</b>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">This collection of steps must appear to the user as a single, indivisible unit. Since a transaction is indivisible, it either executes in its entirety or not at all. Thus, if a</p><p class="s20" style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">799</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">transaction begins to execute but fails for whatever reason, any changes to the database that the transaction may have made must be undone. This requirement holds regardless of whether the transaction itself failed (e.g., if it divided by zero), the operating system crashed, or the computer itself stopped operating. As we shall see, ensuring that this requirement is met is diﬃcult since some changes to the database may still be stored only in the main-memory variables of the transaction, while others may have been written to the database and stored on disk. This “all-or-none” property is referred to as <span class="s63">atomicity</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Furthermore, since a transaction is a single unit, its actions cannot appear to be separated by other database operations not part of the transaction. While we wish to present this user-level impression of transactions, we know that reality is quite diﬀer- ent. Even a single <span class="s44">SQL </span>statement involves many separate accesses to the database, and a transaction may consist of several <span class="s44">SQL </span>statements. Therefore, the database system must take special actions to ensure that transactions operate properly without interfer- ence from concurrently executing database statements. This property is referred to as <span class="s63">isolation</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Even if the system ensures correct execution of a transaction, this serves little pur- pose if the system subsequently crashes and, as a result, the system “forgets” about the transaction. Thus, a transaction’s actions must persist across crashes. This property is referred to as <span class="s63">durability</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Because of the above three properties, transactions are an ideal way of structuring interaction with a database. This leads us to impose a requirement on transactions themselves. A transaction must preserve database consistency — if a transaction is run atomically in isolation starting from a consistent database, the database must again be consistent at the end of the transaction. This consistency requirement goes beyond the data-integrity constraints we have seen earlier (such as primary-key constraints, referential integrity, <b>check </b>constraints, and the like). Rather, transactions are expected to go beyond that to ensure preservation of those application-dependent consistency constraints that are too complex to state using the <span class="s44">SQL </span>constructs for data integrity. How this is done is the responsibility of the programmer who codes a transaction. This property is referred to as <span class="s63">consistency</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To restate the above more concisely, we require that the database system maintain the following properties of the transactions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Atomicity</span><span class="p">. Either all operations of the transaction are reﬂected properly in the database, or none are.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Consistency</span><span class="p">. Execution of a transaction in isolation (i.e., with no other transaction executing concurrently) preserves the consistency of the database.</span></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;line-height: 94%;text-align: justify;"><span class="s39">• </span><span class="s63">Isolation</span>. Even though multiple transactions may execute concurrently, the system guarantees that, for every pair of transactions <i>T</i><span class="s145">i </span>and <i>T</i><span class="s145">j </span>, it appears to <i>T</i><span class="s145">i </span>that either <i>T</i><span class="s145">j </span>ﬁnished execution before <i>T</i><span class="s145">i </span>started or <i>T</i><span class="s145">j </span>started execution after <i>T</i><span class="s145">i </span>ﬁnished.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 139pt;text-indent: 0pt;text-align: left;"><a name="bookmark368">Thus, each transaction is unaware of other transactions executing concurrently in the system.</a><a name="bookmark410">&zwnj;</a></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Durability</span><span class="p">. After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">These properties are often called the <span class="s64">ACID </span><span class="s84">properties</span>; the acronym is derived from the ﬁrst letter of each of the four properties.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">As we shall see later, ensuring the isolation property may have a signiﬁcant ad- verse eﬀect on system performance. For this reason, some applications compromise on the isolation property. We shall study these compromises after ﬁrst studying the strict enforcement of the <span class="s44">ACID </span>properties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part310.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part312.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
