<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>24.4  Indexing of Spatial Data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part437.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part439.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">24.4  <span style=" color: #00AEEF;">Indexing of Spatial Data</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">As we saw in Section 14.10.1, indices are required for eﬃcient access to spatial data, and such indices must eﬃciently support queries such as range and nearest neighbor queries. We also gave a brief overview of k-d trees, quadtrees, and R-trees; we also brieﬂy described how to answer range queries using k-d trees. In this section we provide further details of quadtrees and R-trees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As mentioned in Section 14.10.1, in addition to indexing of points, spatial indices must also support indexing of regions of space such as line segments, rectangles, and other polygons. There are extensions of k-d trees and quadtrees for this task. However, a line segment or polygon may cross a partitioning line. If it does, it has to be split and represented in each of the subtrees in which its pieces occur. Multiple occurrences of a line segment or polygon caused by such splits can result in ineﬃciencies in storage, as well as ineﬃciencies in querying. R-trees were developed to support eﬃcient indexing of such structures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">24.4.1 Quadtrees</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">An alternative representation for two-dimensional data are a <span class="s63">quadtree</span>. An example of the division of space by a quadtree appears in Figure 24.4. Each node of a quadtree is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:184.395pt" cellspacing="0"><tr style="height:22pt"><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 15pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3345.png"/></span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3346.png"/></span></p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" colspan="2" rowspan="3"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:22pt"><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3347.png"/></span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:44pt"><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:44pt"><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3348.png"/></span></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3349.png"/></span></p></td></tr><tr style="height:22pt"><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3350.png"/></span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:45pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" rowspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:22pt"><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 4pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3351.png"/></span></p></td><td style="width:22pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 4pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_3352.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 24.4 <span class="s74">Division of space by a quadtree.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">associated with a rectangular region of space. The top node is associated with the entire target space. Each nonleaf node in a quadtree divides its region into four equal-sized quadrants, and correspondingly each such node has four child nodes corresponding to the four quadrants. Leaf nodes have between zero and some ﬁxed maximum number of points. Correspondingly, if the region corresponding to a node has more than the maximum number of points, child nodes are created for that node. In the example in Figure 24.4, the maximum number of points in a leaf node is set to 1.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">This type of quadtree is called a <span class="s64">PR </span><span class="s84">quadtree</span>, to indicate it stores points, and that the division of space is divided based on regions, rather than on the actual set of points stored. We can use <span class="s63">region quadtrees </span>to store array (raster) information. A node in a region quadtree is a leaf node if all the array values in the region that it covers are the same. Otherwise, it is subdivided further into four children of equal area and is therefore an internal node. Each node in the region quadtree corresponds to a subarray of values. The subarrays corresponding to leaves either contain just a single array element or have multiple array elements, all of which have the same value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">24.4.2 R-Trees</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">A storage structure called an <span class="s63">R-tree </span>is useful for indexing of objects such as points, line segments, rectangles, and other polygons. An R-tree is a balanced tree structure with the indexed objects stored in leaf nodes, much like a B<span class="s181">+</span>-tree. However, instead of a range of values, a rectangular <span class="s63">bounding box </span>is associated with each tree node. The bounding box of a leaf node is the smallest rectangle parallel to the axes that contains all objects stored in the leaf node. The bounding box of internal nodes is, similarly, the smallest rectangle parallel to the axes that contains the bounding boxes of its child nodes. The bounding box of an object (such as a polygon) is deﬁned, similarly, as the smallest rectangle parallel to the axes that contains the object.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Each internal node stores the bounding boxes of the child nodes along with the pointers to the child nodes. Each leaf node stores the indexed objects and may option- ally store the bounding boxes of the objects; the bounding boxes help speed up checks for overlaps of the rectangle with the indexed objects— if a query rectangle does not overlap with the bounding box of an object, it cannot overlap with the object, either. (If the indexed objects are rectangles, there is no need to store bounding boxes, since they are identical to the rectangles.)</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 24.5 shows an example of a set of rectangles (drawn with a solid line) and the bounding boxes (drawn with a dashed line) of the nodes of an R-tree for the set of rectangles. Note that the bounding boxes are shown with extra space inside them, to make them stand out pictorially. In reality, the boxes would be smaller and ﬁt tightly on the objects that they contain; that is, each side of a bounding box <i>B </i>would touch at least one of the objects or bounding boxes that are contained in <i>B</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The R-tree itself is at the right side of Figure 24.5. The ﬁgure refers to the coordi- nates of bounding box <i>i </i>as <i>BB</i><span class="s97">i </span>in the ﬁgure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="40" alt="image" src="Image_3353.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="224" height="225" alt="image" src="Image_3354.png"/></span></p><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">A</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">B</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">C</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">G</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">H</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">D</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">I</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">E</p><p style="text-indent: 0pt;text-align: left;"/><p class="s33" style="text-indent: 0pt;line-height: 10pt;text-align: left;">F</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="42" alt="image" src="Image_3355.png"/></span></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:15pt"><td style="width:20pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;line-height: 12pt;text-align: left;">BB<span class="s360">1</span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 3pt;padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BB<span class="s361">2</span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BB<span class="s361">3</span></p></td><td style="width:10pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:14pt"><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">A</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">B</p></td><td style="width:16pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">C</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:14pt"><td style="width:14pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">D</p></td><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">E</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">F</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><table style="border-collapse:collapse" cellspacing="0"><tr style="height:15pt"><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">G</p></td><td style="width:13pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">H</p></td><td style="width:15pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s133" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">I</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s73" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 24.5 <span class="s74">An R-tree.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We shall now see how to implement search, insert, and delete operations on an R-tree.</p><p style="padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><b>Search</b>. As the ﬁgure shows, the bounding boxes associated with sibling nodes may overlap; in B<span class="s181">+</span>-trees, k-d trees, and quadtrees, in contrast, the ranges do not overlap. A search for objects containing a point therefore has to follow <i>all </i>child nodes whose associated bounding boxes contain the point; as a result, multiple paths may have to be searched. Similarly, a query to ﬁnd all objects that intersect a given object has to go down every node where the associated rectangle intersects the given object.</p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s46">Insert</span><span class="p">. When we insert an object into an R-tree, we select a leaf node to hold the object. Ideally we should pick a leaf node that has space to hold a new entry, and whose bounding box contains the bounding box of the object. However, such a node may not exist; even if it did, ﬁnding the node may be very expensive, since it is not possible to ﬁnd it by a single traversal down from the root. At each internal node we may ﬁnd multiple children whose bounding boxes contain the bounding box of the object, and each of these children needs to be explored. Therefore, as a heuristic, in a traversal from the root, if any of the child nodes has a bounding box containing the bounding box of the object, the R-tree algorithm chooses one of them arbitrarily. If none of the children satisfy this condition, the algorithm chooses a child node whose bounding box has the maximum overlap with the bounding box of the object for continuing the traversal.</span></p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">Once the leaf node has been reached, if the node is already full, the algorithm performs node splitting (and propagates splitting upward if required) in a manner very similar to B<span class="s181">+</span>-tree insertion. Just as with B<span class="s181">+</span>-tree insertion, the R-tree insertion algorithm ensures that the tree remains balanced. Additionally, it ensures that the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 139pt;text-indent: 0pt;text-align: justify;">bounding boxes of leaf nodes, as well as internal nodes, remain consistent; that is, bounding boxes of leaves contain all the bounding boxes of the objects stored at the leaf, while the bounding boxes for internal nodes contain all the bounding boxes of the children nodes.</p><p style="padding-left: 139pt;text-indent: 22pt;text-align: justify;">The main diﬀerence of the insertion procedure from the B<span class="s181">+</span>-tree insertion procedure lies in how the node is split. In a B<span class="s181">+</span>-tree, it is possible to ﬁnd a value such that half the entries are less than the midpoint and half are greater than the value. This property does not generalize beyond one dimension; that is, for more than one dimension, it is not always possible to split the entries into two sets so that their bounding boxes do not overlap. Instead, as a heuristic, the set of entries <i>S </i>can be split into two disjoint sets <i>S</i><span class="s98">1</span> and <i>S</i><span class="s98">2</span> so that the bounding boxes of <i>S</i><span class="s98">1</span> and <i>S</i><span class="s98">2</span> have the minimum total area; another heuristic would be to split the entries into</p><p class="s13" style="padding-left: 139pt;text-indent: 0pt;text-align: justify;"><span class="p">two sets </span>S<span class="s93">1 </span><span class="s94">and </span>S<span class="s93">2 </span><span class="s94">in such a way that </span>S<span class="s93">1 </span><span class="s94">and </span>S<span class="s93">2 </span><span class="s94">have minimum overlap. The two nodes resulting from the split would contain the entries in </span>S<span class="s98">1</span><span class="p"> and </span>S<span class="s98">2</span><span class="p">, respectively. The cost of ﬁnding splits with minimum total area or overlap can itself be large, so cheaper heuristics, such as the </span>quadratic split <span class="p">heuristic, are used. (The heuristic gets its name from the fact that it takes time quadratic in the number of entries.)</span></p><p style="padding-left: 139pt;text-indent: 15pt;text-align: justify;">The <span class="s63">quadratic split </span>heuristic works this way: First, it picks a pair of entries <i>a </i>and <i>b </i>from <i>S </i>such that putting them in the same node would result in a bounding box with the maximum wasted space; that is, the area of the minimum bounding box of <i>a </i>and <i>b </i>minus the sum of the areas of <i>a </i>and <i>b </i>is the largest. The heuristic places the entries <i>a </i>and <i>b </i>in sets <i>S</i><span class="s98">1</span> and <i>S</i><span class="s98">2</span>, respectively.</p><p class="s13" style="padding-left: 139pt;text-indent: 15pt;text-align: justify;"><span class="p">It then iteratively adds the remaining entries, one entry per iteration, to one of the two sets </span>S<span class="s130">1 </span><span class="s94">or </span>S<span class="s130">2</span><span class="s94">. At each iteration, for each remaining entry </span>e<span class="p">, let </span>i<span class="s97">e</span><span class="s130">,1 </span><span class="s94">denote the increase in the size of the bounding box of </span>S<span class="s130">1 </span><span class="s94">if </span>e <span class="p">is added to </span>S<span class="s130">1 </span><span class="s94">and let </span>i<span class="s97">e</span><span class="s130">,2 </span><span class="s94">denote the corresponding increase for </span>S<span class="s98">2</span><span class="p">. In each iteration, the heuristic chooses one of the entries with the maximum diﬀerence of </span>i<span class="s145">e</span><span class="s93">,1 </span><span class="s94">and </span>i<span class="s145">e</span><span class="s93">,2 </span><span class="s94">and adds it to </span>S<span class="s93">1 </span><span class="s94">if </span>i<span class="s145">e</span><span class="s93">,1 </span><span class="s94">is less than </span>i<span class="s145">e</span><span class="s93">,2</span><span class="s94">, and to </span>S<span class="s93">2 </span><span class="s94">otherwise. That is, an entry with “maximum prefer- ence” for </span>S<span class="s98">1</span><span class="p"> or </span>S<span class="s98">2</span><span class="p"> is chosen at each iteration. The iteration stops when all entries have been assigned, or when one of the sets </span>S<span class="s98">1</span><span class="p"> or </span>S<span class="s98">2</span><span class="p"> has enough entries that all remaining entries have to be added to the other set so the nodes constructed from </span>S<span class="s98">1</span><span class="p"> and </span>S<span class="s98">2</span><span class="p"> both have the required minimum occupancy. The heuristic then adds all</span></p><p style="padding-left: 139pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">unassigned entries to the set with fewer entries.</p><p style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><b>Deletion</b>. Deletion can be performed like a B<span class="s181">+</span>-tree deletion, borrowing entries from sibling nodes, or merging sibling nodes if a node becomes underfull. An alternative approach redistributes all the entries of underfull nodes to sibling nodes, with the aim of improving the clustering of entries in the R-tree.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">See the bibliographical references for more details on insertion and deletion operations on R-trees, as well as on variants of R-trees, called R<span class="s181">∗</span>-trees or R<span class="s181">+</span>-trees.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: left;">The storage eﬃciency of R-trees is better than that of k-d trees or quadtrees, since an object is stored only once, and we can ensure easily that each node is at least half</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark547">full. However, querying may be slower, since multiple paths have to be searched. Spatial joins are simpler with quadtrees than with R-trees, since all quadtrees on a region are partitioned in the same manner. However, because of their better storage eﬃciency and their similarity to B-trees, R-trees and their variants have proved popular in database systems that support spatial data.</a><a name="bookmark577">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part437.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part439.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
