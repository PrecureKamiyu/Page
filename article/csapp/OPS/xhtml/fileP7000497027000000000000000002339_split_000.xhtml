<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.6 Control</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000002339" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000405D5" data-uri="chapter03.xhtml#P70004970270000000000000000405D5" epub:type="title"><span class="pcalibre label pcalibre1">3.6 </span>Control</h1></header>
<p id="P70004970270000000000000000405D6" data-uri="chapter03.xhtml#P70004970270000000000000000405D6" class="pcalibre1 pcalibre calibre2">So far, we have only considered the behavior of <i class="calibre5 pcalibre pcalibre1">straight-line</i> code, where instructions follow one another in sequence. Some constructs in C, such as conditionals, loops, and switches, require conditional execution, where the sequence of operations that get performed depends on the outcomes of tests applied to the data. Machine code provides two basic low-level mechanisms for implementing conditional behavior: it tests data values and then alters either the control flow or the data flow based on the results of these tests.</p>
<p id="P70004970270000000000000000405D7" data-uri="chapter03.xhtml#P70004970270000000000000000405D7" class="pcalibre1 pcalibre calibre2">Data-dependent control flow is the more general and more common approach for implementing conditional behavior, and so we will examine this first. Normally, <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000233D" title="201" data-uri="chapter03.xhtml#P700049702700000000000000000233D" epub:type="pagebreak"></span>both statements in C and instructions in machine code are executed <i class="calibre5 pcalibre pcalibre1">sequentially</i>, in the order they appear in the program. The execution order of a set of machine-code instructions can be altered with a <i class="calibre5 pcalibre pcalibre1">jump</i> instruction, indicating that control should pass to some other part of the program, possibly contingent on the result of some test. The compiler must generate instruction sequences that build upon this low-level mechanism to implement the control constructs of C.</p>
<p id="P70004970270000000000000000405D8" data-uri="chapter03.xhtml#P70004970270000000000000000405D8" class="pcalibre1 pcalibre calibre2">In our presentation, we first cover the two ways of implementing conditional operations. We then describe methods for presenting loops and switch statements.</p>
<section id="P700049702700000000000000000233F" data-uri="chapter03.xhtml#P700049702700000000000000000233F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000405D9" data-uri="chapter03.xhtml#P70004970270000000000000000405D9" epub:type="title"><span class="pcalibre label pcalibre1">3.6.1 </span>Condition Codes</h1></header>
<p id="P70004970270000000000000000405DA" data-uri="chapter03.xhtml#P70004970270000000000000000405DA" class="pcalibre1 pcalibre calibre2">In addition to the integer registers, the CPU maintains a set of single-bit <i class="calibre5 pcalibre pcalibre1">condition code</i> registers describing attributes of the most recent arithmetic or logical operation. These registers can then be tested to perform conditional branches. These condition codes are the most useful:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000405DB" data-uri="chapter03.xhtml#P70004970270000000000000000405DB">
<li id="P70004970270000000000000000405DC" data-uri="chapter03.xhtml#P70004970270000000000000000405DC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000405DD" data-uri="chapter03.xhtml#P70004970270000000000000000405DD" class="calibre13 pcalibre pcalibre1"><span class="smallcaps pcalibre pcalibre1">cf</span>: Carry flag. The most recent operation generated a carry out of the most significant bit. Used to detect overflow for unsigned operations.</p></li>
<li id="P70004970270000000000000000405DE" data-uri="chapter03.xhtml#P70004970270000000000000000405DE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000405DF" data-uri="chapter03.xhtml#P70004970270000000000000000405DF" class="calibre13 pcalibre pcalibre1"><span class="smallcaps pcalibre pcalibre1">zf</span>: Zero flag. The most recent operation yielded zero.</p></li>
<li id="P70004970270000000000000000405E0" data-uri="chapter03.xhtml#P70004970270000000000000000405E0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000405E1" data-uri="chapter03.xhtml#P70004970270000000000000000405E1" class="calibre13 pcalibre pcalibre1"><span class="smallcaps pcalibre pcalibre1">sf</span>: Sign flag. The most recent operation yielded a negative value.</p></li>
<li id="P70004970270000000000000000405E2" data-uri="chapter03.xhtml#P70004970270000000000000000405E2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000405E3" data-uri="chapter03.xhtml#P70004970270000000000000000405E3" class="calibre13 pcalibre pcalibre1"><span class="smallcaps pcalibre pcalibre1">of</span>: Overflow flag. The most recent operation caused a two's-complement overflow—either negative or positive.</p></li>
</ul>
<p id="P70004970270000000000000000405E4" data-uri="chapter03.xhtml#P70004970270000000000000000405E4" class="pcalibre1 pcalibre calibre2">For example, suppose we used one of the <span class="smallcaps pcalibre pcalibre1">add </span>instructions to perform the equivalent of the C assignment <code id="P70004970270000000000000000405E5" data-uri="chapter03.xhtml#P70004970270000000000000000405E5" class="pcalibre1 calibre8 pcalibre">t = a+b</code>, where variables <code id="P70004970270000000000000000405E6" data-uri="chapter03.xhtml#P70004970270000000000000000405E6" class="pcalibre1 calibre8 pcalibre">a, b</code>, and <code id="P70004970270000000000000000405E7" data-uri="chapter03.xhtml#P70004970270000000000000000405E7" class="pcalibre1 calibre8 pcalibre">t</code> are integers. Then the condition codes would be set according to the following C expressions:</p>
<pre id="P70004970270000000000000000405E8" data-uri="chapter03.xhtml#P70004970270000000000000000405E8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000405E9" data-uri="chapter03.xhtml#P70004970270000000000000000405E9" class="calibre10 pcalibre pcalibre1">
CF	(unsigned) t &lt; (unsigned) a		Unsigned overflow
ZF	(t == 0)				Zero
SF	(t &lt; 0)					Negative
OF	(a &lt; 0 == b &lt; 0) &amp;&amp; (t &lt; 0 ! = a &lt; 0)	Signed overflow
</code></pre>
<p id="P70004970270000000000000000405EA" data-uri="chapter03.xhtml#P70004970270000000000000000405EA" class="pcalibre1 pcalibre calibre2">The <code id="P70004970270000000000000000405EB" data-uri="chapter03.xhtml#P70004970270000000000000000405EB" class="pcalibre1 calibre8 pcalibre">leaq</code> instruction does not alter any condition codes, since it is intended to be used in address computations. Otherwise, all of the instructions listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002185.xhtml#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a> cause the condition codes to be set. For the logical operations, such as <span class="smallcaps pcalibre pcalibre1">xor</span>, the carry and overflow flags are set to zero. For the shift operations, the carry flag is set to the last bit shifted out, while the overflow flag is set to zero. For reasons that we will not delve into, the <span class="smallcaps pcalibre pcalibre1">inc </span>and <span class="smallcaps pcalibre pcalibre1">dec </span>instructions set the overflow and zero flags, but they leave the carry flag unchanged.</p>
<p id="P70004970270000000000000000405EC" data-uri="chapter03.xhtml#P70004970270000000000000000405EC" class="pcalibre1 pcalibre calibre2">In addition to the setting of condition codes by the instructions of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002185.xhtml#P7000497027000000000000000002190"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.10</span></a>, there are two instruction classes (having 8-, 16-, 32-, and 64-bit forms) that set condition codes without altering any other registers; these are listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002354"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.13</span></a>. The <span class="smallcaps pcalibre pcalibre1">cmp </span>instructions set the condition codes according to the differences of their two operands. They behave in the same way as the <span class="smallcaps pcalibre pcalibre1">sub </span>instructions, except that they set the condition codes without updating their destinations. With ATT format,</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002354" data-uri="chapter03.xhtml#P7000497027000000000000000002354">
<table id="P70004970270000000000000000405ED" data-uri="chapter03.xhtml#P70004970270000000000000000405ED" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000405EE" data-uri="chapter03.xhtml#P70004970270000000000000000405EE" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002357" title="202" data-uri="chapter03.xhtml#P7000497027000000000000000002357" epub:type="pagebreak"></span>Instruction</th>
<th id="P70004970270000000000000000405EF" data-uri="chapter03.xhtml#P70004970270000000000000000405EF" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000405F0" data-uri="chapter03.xhtml#P70004970270000000000000000405F0" class="calibre18 pcalibre pcalibre1">Based on</th>
<th id="P70004970270000000000000000405F1" data-uri="chapter03.xhtml#P70004970270000000000000000405F1" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000405F2" data-uri="chapter03.xhtml#P70004970270000000000000000405F2" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">cmp</span></td>
<td id="P70004970270000000000000000405F3" data-uri="chapter03.xhtml#P70004970270000000000000000405F3" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P70004970270000000000000000405F4" data-uri="chapter03.xhtml#P70004970270000000000000000405F4" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> – <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000405F5" data-uri="chapter03.xhtml#P70004970270000000000000000405F5" class="calibre20 pcalibre pcalibre1">Compare</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000405F6" data-uri="chapter03.xhtml#P70004970270000000000000000405F6" class="calibre20 pcalibre pcalibre1"> <code id="P70004970270000000000000000405F7" data-uri="chapter03.xhtml#P70004970270000000000000000405F7" class="calibre10 pcalibre pcalibre1">cmpb</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000405F8" data-uri="chapter03.xhtml#P70004970270000000000000000405F8" class="calibre20 pcalibre pcalibre1">Compare byte</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000405F9" data-uri="chapter03.xhtml#P70004970270000000000000000405F9" class="calibre20 pcalibre pcalibre1"> <code id="P70004970270000000000000000405FA" data-uri="chapter03.xhtml#P70004970270000000000000000405FA" class="calibre10 pcalibre pcalibre1">cmpw</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000405FB" data-uri="chapter03.xhtml#P70004970270000000000000000405FB" class="calibre20 pcalibre pcalibre1">Compare word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000405FC" data-uri="chapter03.xhtml#P70004970270000000000000000405FC" class="calibre20 pcalibre pcalibre1"> <code id="P70004970270000000000000000405FD" data-uri="chapter03.xhtml#P70004970270000000000000000405FD" class="calibre10 pcalibre pcalibre1">cmpl</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000405FE" data-uri="chapter03.xhtml#P70004970270000000000000000405FE" class="calibre20 pcalibre pcalibre1">Compare double word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000405FF" data-uri="chapter03.xhtml#P70004970270000000000000000405FF" class="calibre20 pcalibre pcalibre1"> <code id="P7000497027000000000000000040600" data-uri="chapter03.xhtml#P7000497027000000000000000040600" class="calibre10 pcalibre pcalibre1">cmpq</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040601" data-uri="chapter03.xhtml#P7000497027000000000000000040601" class="calibre20 pcalibre pcalibre1">Compare quad word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040602" data-uri="chapter03.xhtml#P7000497027000000000000000040602" class="calibre20 pcalibre pcalibre1"><span class="smallcaps1 pcalibre pcalibre1">test</span></td>
<td id="P7000497027000000000000000040603" data-uri="chapter03.xhtml#P7000497027000000000000000040603" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000040604" data-uri="chapter03.xhtml#P7000497027000000000000000040604" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub> &amp; <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000040605" data-uri="chapter03.xhtml#P7000497027000000000000000040605" class="calibre20 pcalibre pcalibre1">Test</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040606" data-uri="chapter03.xhtml#P7000497027000000000000000040606" class="calibre20 pcalibre pcalibre1"> <code id="P7000497027000000000000000040607" data-uri="chapter03.xhtml#P7000497027000000000000000040607" class="calibre10 pcalibre pcalibre1">testb</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040608" data-uri="chapter03.xhtml#P7000497027000000000000000040608" class="calibre20 pcalibre pcalibre1">Test byte</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040609" data-uri="chapter03.xhtml#P7000497027000000000000000040609" class="calibre20 pcalibre pcalibre1"> <code id="P700049702700000000000000004060A" data-uri="chapter03.xhtml#P700049702700000000000000004060A" class="calibre10 pcalibre pcalibre1">testw</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004060B" data-uri="chapter03.xhtml#P700049702700000000000000004060B" class="calibre20 pcalibre pcalibre1">Test word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004060C" data-uri="chapter03.xhtml#P700049702700000000000000004060C" class="calibre20 pcalibre pcalibre1"> <code id="P700049702700000000000000004060D" data-uri="chapter03.xhtml#P700049702700000000000000004060D" class="calibre10 pcalibre pcalibre1">testl</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004060E" data-uri="chapter03.xhtml#P700049702700000000000000004060E" class="calibre20 pcalibre pcalibre1">Test double word</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004060F" data-uri="chapter03.xhtml#P700049702700000000000000004060F" class="calibre20 pcalibre pcalibre1"> <code id="P7000497027000000000000000040610" data-uri="chapter03.xhtml#P7000497027000000000000000040610" class="calibre10 pcalibre pcalibre1">testq</code></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040611" data-uri="chapter03.xhtml#P7000497027000000000000000040611" class="calibre20 pcalibre pcalibre1">Test quad word</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040612" data-uri="chapter03.xhtml#P7000497027000000000000000040612" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040613" data-uri="chapter03.xhtml#P7000497027000000000000000040613" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.13 </span>Comparison and test instructions.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040614" data-uri="chapter03.xhtml#P7000497027000000000000000040614"><p id="P7000497027000000000000000040615" data-uri="chapter03.xhtml#P7000497027000000000000000040615" class="pcalibre calibre3 pcalibre1">These instructions set the condition codes without updating any other registers.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040616" data-uri="chapter03.xhtml#P7000497027000000000000000040616">the operands are listed in reverse order, making the code difficult to read. These instructions set the zero flag if the two operands are equal. The other flags can be used to determine ordering relations between the two operands. The <span class="smallcaps pcalibre pcalibre1">test </span>instructions behave in the same manner as the <span class="smallcaps pcalibre pcalibre1">and </span>instructions, except that they set the condition codes without altering their destinations. Typically, the same operand is repeated (e.g., <code id="P7000497027000000000000000040617" data-uri="chapter03.xhtml#P7000497027000000000000000040617" class="pcalibre1 calibre8 pcalibre">testq %rax,%rax</code> to see whether <code id="P7000497027000000000000000040618" data-uri="chapter03.xhtml#P7000497027000000000000000040618" class="pcalibre1 calibre8 pcalibre">%rax</code> is negative, zero, or positive), or one of the operands is a mask indicating which bits should be tested.</p>
</section>
<section id="P7000497027000000000000000002382" data-uri="chapter03.xhtml#P7000497027000000000000000002382" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040619" data-uri="chapter03.xhtml#P7000497027000000000000000040619" epub:type="title"><span class="pcalibre label pcalibre1">3.6.2 </span>Accessing the Condition Codes</h1></header>
<p id="P700049702700000000000000004061A" data-uri="chapter03.xhtml#P700049702700000000000000004061A" class="pcalibre1 pcalibre calibre2">Rather than reading the condition codes directly, there are three common ways of using the condition codes: (1) we can set a single byte to 0 or 1 depending on some combination of the condition codes, (2) we can conditionally jump to some other part of the program, or (3) we can conditionally transfer data. For the first case, the instructions described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000238C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.14</span></a> set a single byte to 0 or to 1 depending on some combination of the condition codes. We refer to this entire class of instructions as the <span class="smallcaps pcalibre pcalibre1">set </span>instructions; they differ from one another based on which combinations of condition codes they consider, as indicated by the different suffixes for the instruction names. It is important to recognize that the suffixes for these instructions denote different conditions and not different operand sizes. For example, instructions <code id="P700049702700000000000000004061B" data-uri="chapter03.xhtml#P700049702700000000000000004061B" class="pcalibre1 calibre8 pcalibre">setl</code> and <code id="P700049702700000000000000004061C" data-uri="chapter03.xhtml#P700049702700000000000000004061C" class="pcalibre1 calibre8 pcalibre">setb</code> denote "set less" and "set below," not "set long word" or "set byte."</p>
<p id="P700049702700000000000000004061D" data-uri="chapter03.xhtml#P700049702700000000000000004061D" class="pcalibre1 pcalibre calibre2">A <span class="smallcaps pcalibre pcalibre1">set </span>instruction has either one of the low-order single-byte register elements (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F4C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.2</span></a>) or a single-byte memory location as its destination, setting this byte to either 0 or 1. To generate a 32-bit or 64-bit result, we must also clear the high-order bits. A typical instruction sequence to compute the C expression <code id="P700049702700000000000000004061E" data-uri="chapter03.xhtml#P700049702700000000000000004061E" class="pcalibre1 calibre8 pcalibre">a &lt; b</code>, where <code id="P700049702700000000000000004061F" data-uri="chapter03.xhtml#P700049702700000000000000004061F" class="pcalibre1 calibre8 pcalibre">a</code> and <code id="P7000497027000000000000000040620" data-uri="chapter03.xhtml#P7000497027000000000000000040620" class="pcalibre1 calibre8 pcalibre">b</code> are both of type <code id="P7000497027000000000000000040621" data-uri="chapter03.xhtml#P7000497027000000000000000040621" class="pcalibre1 calibre8 pcalibre">long</code>, proceeds as follows:</p>

<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000238C" data-uri="chapter03.xhtml#P700049702700000000000000000238C">
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000040622" data-uri="chapter03.xhtml#P7000497027000000000000000040622">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040623" data-uri="chapter03.xhtml#P7000497027000000000000000040623" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000238F" title="203" data-uri="chapter03.xhtml#P700049702700000000000000000238F" epub:type="pagebreak"></span>Instruction</th>
<th id="P7000497027000000000000000040624" data-uri="chapter03.xhtml#P7000497027000000000000000040624" class="calibre18 pcalibre pcalibre1">Synonym</th>
<th id="P7000497027000000000000000040625" data-uri="chapter03.xhtml#P7000497027000000000000000040625" class="calibre18 pcalibre pcalibre1">Effect</th>
<th id="P7000497027000000000000000040626" data-uri="chapter03.xhtml#P7000497027000000000000000040626" class="calibre18 pcalibre pcalibre1">Set condition</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040627" data-uri="chapter03.xhtml#P7000497027000000000000000040627" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040628" data-uri="chapter03.xhtml#P7000497027000000000000000040628" class="calibre10 pcalibre pcalibre1">sete</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040629" data-uri="chapter03.xhtml#P7000497027000000000000000040629" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004062A" data-uri="chapter03.xhtml#P700049702700000000000000004062A" class="calibre10 pcalibre pcalibre1">setz</code></td>
<td id="P700049702700000000000000004062B" data-uri="chapter03.xhtml#P700049702700000000000000004062B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P700049702700000000000000004062C" data-uri="chapter03.xhtml#P700049702700000000000000004062C" class="calibre10 pcalibre pcalibre1">ZF</code></td>
<td id="P700049702700000000000000004062D" data-uri="chapter03.xhtml#P700049702700000000000000004062D" class="calibre20 pcalibre pcalibre1">Equal / zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004062E" data-uri="chapter03.xhtml#P700049702700000000000000004062E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004062F" data-uri="chapter03.xhtml#P700049702700000000000000004062F" class="calibre10 pcalibre pcalibre1">setne</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040630" data-uri="chapter03.xhtml#P7000497027000000000000000040630" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040631" data-uri="chapter03.xhtml#P7000497027000000000000000040631" class="calibre10 pcalibre pcalibre1">setnz</code></td>
<td id="P7000497027000000000000000040632" data-uri="chapter03.xhtml#P7000497027000000000000000040632" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← ~ <code id="P7000497027000000000000000040633" data-uri="chapter03.xhtml#P7000497027000000000000000040633" class="calibre10 pcalibre pcalibre1">ZF</code></td>
<td id="P7000497027000000000000000040634" data-uri="chapter03.xhtml#P7000497027000000000000000040634" class="calibre20 pcalibre pcalibre1">Not equal / not zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040635" data-uri="chapter03.xhtml#P7000497027000000000000000040635" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040636" data-uri="chapter03.xhtml#P7000497027000000000000000040636" class="calibre10 pcalibre pcalibre1">sets</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040637" data-uri="chapter03.xhtml#P7000497027000000000000000040637" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040638" data-uri="chapter03.xhtml#P7000497027000000000000000040638" class="calibre10 pcalibre pcalibre1">SF</code></td>
<td id="P7000497027000000000000000040639" data-uri="chapter03.xhtml#P7000497027000000000000000040639" class="calibre20 pcalibre pcalibre1">Negative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004063A" data-uri="chapter03.xhtml#P700049702700000000000000004063A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004063B" data-uri="chapter03.xhtml#P700049702700000000000000004063B" class="calibre10 pcalibre pcalibre1">setns</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004063C" data-uri="chapter03.xhtml#P700049702700000000000000004063C" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← ← <code id="P700049702700000000000000004063D" data-uri="chapter03.xhtml#P700049702700000000000000004063D" class="calibre10 pcalibre pcalibre1">SF</code></td>
<td id="P700049702700000000000000004063E" data-uri="chapter03.xhtml#P700049702700000000000000004063E" class="calibre20 pcalibre pcalibre1">Nonnegative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004063F" data-uri="chapter03.xhtml#P700049702700000000000000004063F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040640" data-uri="chapter03.xhtml#P7000497027000000000000000040640" class="calibre10 pcalibre pcalibre1">setg</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040641" data-uri="chapter03.xhtml#P7000497027000000000000000040641" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040642" data-uri="chapter03.xhtml#P7000497027000000000000000040642" class="calibre10 pcalibre pcalibre1">setnle</code></td>
<td id="P7000497027000000000000000040643" data-uri="chapter03.xhtml#P7000497027000000000000000040643" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040644" data-uri="chapter03.xhtml#P7000497027000000000000000040644" class="calibre10 pcalibre pcalibre1">~ (SF ^ OF) &amp; ~ ZF</code></td>
<td id="P7000497027000000000000000040645" data-uri="chapter03.xhtml#P7000497027000000000000000040645" class="calibre20 pcalibre pcalibre1">Greater (signed &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040646" data-uri="chapter03.xhtml#P7000497027000000000000000040646" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040647" data-uri="chapter03.xhtml#P7000497027000000000000000040647" class="calibre10 pcalibre pcalibre1">setge</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040648" data-uri="chapter03.xhtml#P7000497027000000000000000040648" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040649" data-uri="chapter03.xhtml#P7000497027000000000000000040649" class="calibre10 pcalibre pcalibre1">setnl</code></td>
<td id="P700049702700000000000000004064A" data-uri="chapter03.xhtml#P700049702700000000000000004064A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P700049702700000000000000004064B" data-uri="chapter03.xhtml#P700049702700000000000000004064B" class="calibre10 pcalibre pcalibre1">~ (SF ^ OF)</code></td>
<td id="P700049702700000000000000004064C" data-uri="chapter03.xhtml#P700049702700000000000000004064C" class="calibre20 pcalibre pcalibre1">Greater or equal (signed &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004064D" data-uri="chapter03.xhtml#P700049702700000000000000004064D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004064E" data-uri="chapter03.xhtml#P700049702700000000000000004064E" class="calibre10 pcalibre pcalibre1">setl</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004064F" data-uri="chapter03.xhtml#P700049702700000000000000004064F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040650" data-uri="chapter03.xhtml#P7000497027000000000000000040650" class="calibre10 pcalibre pcalibre1">setnge</code></td>
<td id="P7000497027000000000000000040651" data-uri="chapter03.xhtml#P7000497027000000000000000040651" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040652" data-uri="chapter03.xhtml#P7000497027000000000000000040652" class="calibre10 pcalibre pcalibre1">SF ^ OF</code></td>
<td id="P7000497027000000000000000040653" data-uri="chapter03.xhtml#P7000497027000000000000000040653" class="calibre20 pcalibre pcalibre1">Less (signed &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040654" data-uri="chapter03.xhtml#P7000497027000000000000000040654" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040655" data-uri="chapter03.xhtml#P7000497027000000000000000040655" class="calibre10 pcalibre pcalibre1">setle</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040656" data-uri="chapter03.xhtml#P7000497027000000000000000040656" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040657" data-uri="chapter03.xhtml#P7000497027000000000000000040657" class="calibre10 pcalibre pcalibre1">setng</code></td>
<td id="P7000497027000000000000000040658" data-uri="chapter03.xhtml#P7000497027000000000000000040658" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040659" data-uri="chapter03.xhtml#P7000497027000000000000000040659" class="calibre10 pcalibre pcalibre1">(SF ^ OF) | ZF</code></td>
<td id="P700049702700000000000000004065A" data-uri="chapter03.xhtml#P700049702700000000000000004065A" class="calibre20 pcalibre pcalibre1">Less or equal (signed &lt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004065B" data-uri="chapter03.xhtml#P700049702700000000000000004065B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004065C" data-uri="chapter03.xhtml#P700049702700000000000000004065C" class="calibre10 pcalibre pcalibre1">seta</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004065D" data-uri="chapter03.xhtml#P700049702700000000000000004065D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004065E" data-uri="chapter03.xhtml#P700049702700000000000000004065E" class="calibre10 pcalibre pcalibre1">setnbe</code></td>
<td id="P700049702700000000000000004065F" data-uri="chapter03.xhtml#P700049702700000000000000004065F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040660" data-uri="chapter03.xhtml#P7000497027000000000000000040660" class="calibre10 pcalibre pcalibre1">~ CF &amp; ~ ZF</code></td>
<td id="P7000497027000000000000000040661" data-uri="chapter03.xhtml#P7000497027000000000000000040661" class="calibre20 pcalibre pcalibre1">Above (unsigned &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040662" data-uri="chapter03.xhtml#P7000497027000000000000000040662" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040663" data-uri="chapter03.xhtml#P7000497027000000000000000040663" class="calibre10 pcalibre pcalibre1">setae</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040664" data-uri="chapter03.xhtml#P7000497027000000000000000040664" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040665" data-uri="chapter03.xhtml#P7000497027000000000000000040665" class="calibre10 pcalibre pcalibre1">setnb</code></td>
<td id="P7000497027000000000000000040666" data-uri="chapter03.xhtml#P7000497027000000000000000040666" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040667" data-uri="chapter03.xhtml#P7000497027000000000000000040667" class="calibre10 pcalibre pcalibre1">~ CF</code></td>
<td id="P7000497027000000000000000040668" data-uri="chapter03.xhtml#P7000497027000000000000000040668" class="calibre20 pcalibre pcalibre1">Above or equal (unsigned &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040669" data-uri="chapter03.xhtml#P7000497027000000000000000040669" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004066A" data-uri="chapter03.xhtml#P700049702700000000000000004066A" class="calibre10 pcalibre pcalibre1">setb</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P700049702700000000000000004066B" data-uri="chapter03.xhtml#P700049702700000000000000004066B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004066C" data-uri="chapter03.xhtml#P700049702700000000000000004066C" class="calibre10 pcalibre pcalibre1">setnae</code></td>
<td id="P700049702700000000000000004066D" data-uri="chapter03.xhtml#P700049702700000000000000004066D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P700049702700000000000000004066E" data-uri="chapter03.xhtml#P700049702700000000000000004066E" class="calibre10 pcalibre pcalibre1">CF</code></td>
<td id="P700049702700000000000000004066F" data-uri="chapter03.xhtml#P700049702700000000000000004066F" class="calibre20 pcalibre pcalibre1">Below (unsigned &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040670" data-uri="chapter03.xhtml#P7000497027000000000000000040670" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040671" data-uri="chapter03.xhtml#P7000497027000000000000000040671" class="calibre10 pcalibre pcalibre1">setbe</code> <var class="calibre5 pcalibre pcalibre1">D</var></td>
<td id="P7000497027000000000000000040672" data-uri="chapter03.xhtml#P7000497027000000000000000040672" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040673" data-uri="chapter03.xhtml#P7000497027000000000000000040673" class="calibre10 pcalibre pcalibre1">setna</code></td>
<td id="P7000497027000000000000000040674" data-uri="chapter03.xhtml#P7000497027000000000000000040674" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <code id="P7000497027000000000000000040675" data-uri="chapter03.xhtml#P7000497027000000000000000040675" class="calibre10 pcalibre pcalibre1">CF | ZF</code></td>
<td id="P7000497027000000000000000040676" data-uri="chapter03.xhtml#P7000497027000000000000000040676" class="calibre20 pcalibre pcalibre1">Below or equal (unsigned &lt;=)</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040677" data-uri="chapter03.xhtml#P7000497027000000000000000040677" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040678" data-uri="chapter03.xhtml#P7000497027000000000000000040678" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.14 </span>The <span class="smallcaps1 pcalibre pcalibre1">set </span>instructions.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040679" data-uri="chapter03.xhtml#P7000497027000000000000000040679"><p id="P700049702700000000000000004067A" data-uri="chapter03.xhtml#P700049702700000000000000004067A" class="pcalibre calibre3 pcalibre1">Each instruction sets a single byte to 0 or 1 based on some combination of the condition codes. Some instructions have "synonyms," that is, alternate names for the same machine instruction.</p></div></figcaption>
</figure>
<pre id="P700049702700000000000000004067B" data-uri="chapter03.xhtml#P700049702700000000000000004067B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004067C" data-uri="chapter03.xhtml#P700049702700000000000000004067C" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">int comp(data_t a, data_t b)</i>
  <i class="calibre5 pcalibre pcalibre1">a in %rdi, b in %rsi</i>
1	comp:
2	 cmpq	%rsi, %rdi	<i class="calibre5 pcalibre pcalibre1">Compare a:b</i>
3	 setl	%al		<i class="calibre5 pcalibre pcalibre1">Set low-order byte of %eax to 0 or 1</i>
4	 movzbl	%al, %eax	<i class="calibre5 pcalibre pcalibre1">Clear rest of %eax (and rest of %rax)</i>
5	 ret
</code></pre>
<p id="P700049702700000000000000004067D" data-uri="chapter03.xhtml#P700049702700000000000000004067D" class="pcalibre1 pcalibre calibre2">Note the comparison order of the <code id="P700049702700000000000000004067E" data-uri="chapter03.xhtml#P700049702700000000000000004067E" class="pcalibre1 calibre8 pcalibre">cmpq</code> instruction (line 2). Although the arguments are listed in the order <code id="P700049702700000000000000004067F" data-uri="chapter03.xhtml#P700049702700000000000000004067F" class="pcalibre1 calibre8 pcalibre">%rsi</code> (b), then <code id="P7000497027000000000000000040680" data-uri="chapter03.xhtml#P7000497027000000000000000040680" class="pcalibre1 calibre8 pcalibre">%rdi</code> (a), the comparison is really between <code id="P7000497027000000000000000040681" data-uri="chapter03.xhtml#P7000497027000000000000000040681" class="pcalibre1 calibre8 pcalibre">a</code> and <code id="P7000497027000000000000000040682" data-uri="chapter03.xhtml#P7000497027000000000000000040682" class="pcalibre1 calibre8 pcalibre">b</code>. Recall also, as discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001FFB"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.4.2</span></a>, that the <code id="P7000497027000000000000000040683" data-uri="chapter03.xhtml#P7000497027000000000000000040683" class="pcalibre1 calibre8 pcalibre">movzbl</code> instruction (line 4) clears not just the high-order 3 bytes of <code id="P7000497027000000000000000040684" data-uri="chapter03.xhtml#P7000497027000000000000000040684" class="pcalibre1 calibre8 pcalibre">%eax</code>, but the upper 4 bytes of the entire register, <code id="P7000497027000000000000000040685" data-uri="chapter03.xhtml#P7000497027000000000000000040685" class="pcalibre1 calibre8 pcalibre">%rax</code>, as well.</p>
<p id="P7000497027000000000000000040686" data-uri="chapter03.xhtml#P7000497027000000000000000040686" class="pcalibre1 pcalibre calibre2">For some of the underlying machine instructions, there are multiple possible names, which we list as "synonyms." For example, both <code id="P7000497027000000000000000040687" data-uri="chapter03.xhtml#P7000497027000000000000000040687" class="pcalibre1 calibre8 pcalibre">setg</code> (for "set greater") and <code id="P7000497027000000000000000040688" data-uri="chapter03.xhtml#P7000497027000000000000000040688" class="pcalibre1 calibre8 pcalibre">setnle</code> (for "set not less or equal") refer to the same machine instruction. Compilers and disassemblers make arbitrary choices of which names to use.</p>
<p id="P7000497027000000000000000040689" data-uri="chapter03.xhtml#P7000497027000000000000000040689" class="pcalibre1 pcalibre calibre2">Although all arithmetic and logical operations set the condition codes, the descriptions of the different <span class="smallcaps pcalibre pcalibre1">set </span>instructions apply to the case where a comparison instruction has been executed, setting the condition codes according to the computation <code id="P700049702700000000000000004068A" data-uri="chapter03.xhtml#P700049702700000000000000004068A" class="pcalibre1 calibre8 pcalibre">t = a-b</code>. More specifically, let <var class="calibre5 pcalibre pcalibre1">a</var>, <var class="calibre5 pcalibre pcalibre1">b</var>, and <var class="calibre5 pcalibre pcalibre1">t</var> be the integers represented in two's-complement form by variables <code id="P700049702700000000000000004068B" data-uri="chapter03.xhtml#P700049702700000000000000004068B" class="pcalibre1 calibre8 pcalibre">a, b</code>, and <code id="P700049702700000000000000004068C" data-uri="chapter03.xhtml#P700049702700000000000000004068C" class="pcalibre1 calibre8 pcalibre">t</code>, respectively, and so <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="72" altimg-height="19" altimg="../images/ch03-eq1.png"><m:mrow><m:mi>t</m:mi><m:mo>=</m:mo><m:msup><m:mi>a</m:mi><m:mo>−</m:mo></m:msup><m:msubsup><m:mrow/><m:mi>w</m:mi><m:mtext>t</m:mtext></m:msubsup><m:mi>b</m:mi></m:mrow></m:math></span>, where <var class="calibre5 pcalibre pcalibre1">w</var> depends on the sizes associated with <code id="P700049702700000000000000004068D" data-uri="chapter03.xhtml#P700049702700000000000000004068D" class="pcalibre1 calibre8 pcalibre">a</code> and <code id="P700049702700000000000000004068E" data-uri="chapter03.xhtml#P700049702700000000000000004068E" class="pcalibre1 calibre8 pcalibre">b</code>.</p>
<p id="P700049702700000000000000004068F" data-uri="chapter03.xhtml#P700049702700000000000000004068F" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000023FC" title="204" data-uri="chapter03.xhtml#P70004970270000000000000000023FC" epub:type="pagebreak"></span>Consider the <code id="P7000497027000000000000000040690" data-uri="chapter03.xhtml#P7000497027000000000000000040690" class="pcalibre1 calibre8 pcalibre">sete</code>, or "set when equal," instruction. When <var class="calibre5 pcalibre pcalibre1">a</var> = <var class="calibre5 pcalibre pcalibre1">b</var>, we will have <var class="calibre5 pcalibre pcalibre1">t</var> = 0, and hence the zero flag indicates equality. Similarly, consider testing for signed comparison with the <code id="P7000497027000000000000000040691" data-uri="chapter03.xhtml#P7000497027000000000000000040691" class="pcalibre1 calibre8 pcalibre">setl</code>, or "set when less," instruction. When no overflow occurs (indicated by having OF set to 0), we will have <var class="calibre5 pcalibre pcalibre1">a</var> ≥ <var class="calibre5 pcalibre pcalibre1">b</var> when <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="89" altimg-height="24" altimg="../images/ch03-eq2.png"><m:mrow><m:msup><m:mi>a</m:mi><m:mo>−</m:mo></m:msup><m:msubsup><m:mrow/><m:mi>w</m:mi><m:mtext>t</m:mtext></m:msubsup><m:mi>b</m:mi><m:mo>&lt;</m:mo><m:mn>0</m:mn></m:mrow></m:math></span>, indicated by having SF set to 1, and <var class="calibre5 pcalibre pcalibre1">a</var> ≥ <var class="calibre5 pcalibre pcalibre1">b</var> when <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="90" altimg-height="23" altimg="../images/ch03-eq3.png"><m:mrow><m:msup><m:mi>a</m:mi><m:mo>−</m:mo></m:msup><m:msubsup><m:mrow/><m:mi>w</m:mi><m:mtext>t</m:mtext></m:msubsup><m:mi>b</m:mi><m:mo>≥</m:mo><m:mn>0</m:mn></m:mrow></m:math></span>, indicated by having SF set to 0. On the other hand, when overflow occurs, we will have <var class="calibre5 pcalibre pcalibre1">a</var> &lt; <var class="calibre5 pcalibre pcalibre1">b</var> when <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="90" altimg-height="26" altimg="../images/ch03-eq4.png"><m:mrow><m:msup><m:mi>a</m:mi><m:mo>−</m:mo></m:msup><m:msubsup><m:mrow/><m:mi>w</m:mi><m:mtext>t</m:mtext></m:msubsup><m:mi>b</m:mi><m:mo>&gt;</m:mo><m:mn>0</m:mn></m:mrow></m:math> </span>(negative overflow) and <var class="calibre5 pcalibre pcalibre1">a</var> &gt; <var class="calibre5 pcalibre pcalibre1">b</var> when <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="90" altimg-height="23" altimg="../images/ch03-eq5.png"><m:mrow><m:msup><m:mi>a</m:mi><m:mo>−</m:mo></m:msup><m:msubsup><m:mrow/><m:mi>w</m:mi><m:mtext>t</m:mtext></m:msubsup><m:mi>b</m:mi><m:mo>&lt;</m:mo><m:mn>0</m:mn></m:mrow></m:math> </span>(positive overflow). We cannot have overflow when <var class="calibre5 pcalibre pcalibre1">a</var> = <var class="calibre5 pcalibre pcalibre1">b</var>. Thus, when OF is set to 1, we will have <var class="calibre5 pcalibre pcalibre1">a</var> &lt; <var class="calibre5 pcalibre pcalibre1">b</var> if and only if SF is set to 0. Combining these cases, the <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>of the overflow and sign bits provides a test for whether <var class="calibre5 pcalibre pcalibre1">a</var> &lt; <var class="calibre5 pcalibre pcalibre1">b</var>. The other signed comparison tests are based on other combinations of <code id="P7000497027000000000000000040692" data-uri="chapter03.xhtml#P7000497027000000000000000040692" class="pcalibre1 calibre8 pcalibre">SF ^ OF</code> and <code id="P7000497027000000000000000040693" data-uri="chapter03.xhtml#P7000497027000000000000000040693" class="pcalibre1 calibre8 pcalibre">ZF</code>.</p>
<p id="P7000497027000000000000000040694" data-uri="chapter03.xhtml#P7000497027000000000000000040694" class="pcalibre1 pcalibre calibre2">For the testing of unsigned comparisons, we now let <var class="calibre5 pcalibre pcalibre1">a</var> and <var class="calibre5 pcalibre pcalibre1">b</var> be the integers represented in unsigned form by variables <code id="P7000497027000000000000000040695" data-uri="chapter03.xhtml#P7000497027000000000000000040695" class="pcalibre1 calibre8 pcalibre">a</code> and <code id="P7000497027000000000000000040696" data-uri="chapter03.xhtml#P7000497027000000000000000040696" class="pcalibre1 calibre8 pcalibre">b</code>. In performing the computation <code id="P7000497027000000000000000040697" data-uri="chapter03.xhtml#P7000497027000000000000000040697" class="pcalibre1 calibre8 pcalibre">t = a-b</code>, the carry flag will be set by the <span class="smallcaps pcalibre pcalibre1">cmp </span>instruction when <var class="calibre5 pcalibre pcalibre1">a</var> − <var class="calibre5 pcalibre pcalibre1">b</var> &lt; 0, and so the unsigned comparisons use combinations of the carry and zero flags.</p>
<p id="P7000497027000000000000000040698" data-uri="chapter03.xhtml#P7000497027000000000000000040698" class="pcalibre1 pcalibre calibre2">It is important to note how machine code does or does not distinguish between signed and unsigned values. Unlike in C, it does not associate a data type with each program value. Instead, it mostly uses the same instructions for the two cases, because many arithmetic operations have the same bit-level behavior for unsigned and two's-complement arithmetic. Some circumstances require different instructions to handle signed and unsigned operations, such as using different versions of right shifts, division and multiplication instructions, and different combinations of condition codes.</p>
<section id="P7000497027000000000000000002406" data-uri="chapter03.xhtml#P7000497027000000000000000002406" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040699" data-uri="chapter03.xhtml#P7000497027000000000000000040699" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.13 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003589">330</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004069A" data-uri="chapter03.xhtml#P700049702700000000000000004069A">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004069B" data-uri="chapter03.xhtml#P700049702700000000000000004069B">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004069C" data-uri="chapter03.xhtml#P700049702700000000000000004069C"><p id="P700049702700000000000000004069D" data-uri="chapter03.xhtml#P700049702700000000000000004069D" class="pcalibre calibre3 pcalibre1">The C code</p>
<pre id="P700049702700000000000000004069E" data-uri="chapter03.xhtml#P700049702700000000000000004069E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004069F" data-uri="chapter03.xhtml#P700049702700000000000000004069F" class="calibre10 pcalibre pcalibre1">
int comp(data_t a, data_t b) {
  return a COMP b;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P70004970270000000000000000406A0" data-uri="chapter03.xhtml#P70004970270000000000000000406A0">shows a general comparison between arguments <code id="P70004970270000000000000000406A1" data-uri="chapter03.xhtml#P70004970270000000000000000406A1" class="pcalibre1 calibre8 pcalibre">a</code> and <code id="P70004970270000000000000000406A2" data-uri="chapter03.xhtml#P70004970270000000000000000406A2" class="pcalibre1 calibre8 pcalibre">b</code>, where <code id="P70004970270000000000000000406A3" data-uri="chapter03.xhtml#P70004970270000000000000000406A3" class="pcalibre1 calibre8 pcalibre">data_t</code>, the data type of the arguments, is defined (via <code id="P70004970270000000000000000406A4" data-uri="chapter03.xhtml#P70004970270000000000000000406A4" class="pcalibre1 calibre8 pcalibre">typedef</code>) to be one of the integer data types listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001EF2.xhtml#P7000497027000000000000000001EFD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.1</span></a> and either signed or unsigned. The comparison COMP is defined via <code id="P70004970270000000000000000406A5" data-uri="chapter03.xhtml#P70004970270000000000000000406A5" class="pcalibre1 calibre8 pcalibre">#define</code>.</p>
<p id="P70004970270000000000000000406A6" data-uri="chapter03.xhtml#P70004970270000000000000000406A6" class="pcalibre calibre3 pcalibre1">Suppose a is in some portion of <code id="P70004970270000000000000000406A7" data-uri="chapter03.xhtml#P70004970270000000000000000406A7" class="pcalibre1 calibre8 pcalibre">%rdx</code> while <code id="P70004970270000000000000000406A8" data-uri="chapter03.xhtml#P70004970270000000000000000406A8" class="pcalibre1 calibre8 pcalibre">b</code> is in some portion of <code id="P70004970270000000000000000406A9" data-uri="chapter03.xhtml#P70004970270000000000000000406A9" class="pcalibre1 calibre8 pcalibre">%rsi</code>. For each of the following instruction sequences, determine which data types <code id="P70004970270000000000000000406AA" data-uri="chapter03.xhtml#P70004970270000000000000000406AA" class="pcalibre1 calibre8 pcalibre">data_t</code> and which comparisons COMP could cause the compiler to generate this code. (There can be multiple correct answers; you should list them all.)</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000406AB" data-uri="chapter03.xhtml#P70004970270000000000000000406AB">
<li id="P70004970270000000000000000406AC" data-uri="chapter03.xhtml#P70004970270000000000000000406AC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406AD" data-uri="chapter03.xhtml#P70004970270000000000000000406AD" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406AE" data-uri="chapter03.xhtml#P70004970270000000000000000406AE" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406AF" data-uri="chapter03.xhtml#P70004970270000000000000000406AF" class="calibre10 pcalibre pcalibre1">
cmpl	%esi, %edi
setl	%al
</code></pre>
</li>
<li id="P70004970270000000000000000406B0" data-uri="chapter03.xhtml#P70004970270000000000000000406B0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406B1" data-uri="chapter03.xhtml#P70004970270000000000000000406B1" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406B2" data-uri="chapter03.xhtml#P70004970270000000000000000406B2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406B3" data-uri="chapter03.xhtml#P70004970270000000000000000406B3" class="calibre10 pcalibre pcalibre1">
cmpw	%si, %di
setge	%al
</code></pre>
</li>
<li id="P70004970270000000000000000406B4" data-uri="chapter03.xhtml#P70004970270000000000000000406B4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406B5" data-uri="chapter03.xhtml#P70004970270000000000000000406B5" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002424" title="205" data-uri="chapter03.xhtml#P7000497027000000000000000002424" epub:type="pagebreak"></span></p>
<pre id="P70004970270000000000000000406B6" data-uri="chapter03.xhtml#P70004970270000000000000000406B6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406B7" data-uri="chapter03.xhtml#P70004970270000000000000000406B7" class="calibre10 pcalibre pcalibre1">
cmpb	%sil, %dil
setbe	%al
</code></pre>
</li>
<li id="P70004970270000000000000000406B8" data-uri="chapter03.xhtml#P70004970270000000000000000406B8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406B9" data-uri="chapter03.xhtml#P70004970270000000000000000406B9" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406BA" data-uri="chapter03.xhtml#P70004970270000000000000000406BA" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406BB" data-uri="chapter03.xhtml#P70004970270000000000000000406BB" class="calibre10 pcalibre pcalibre1">
cmpq	%rsi, %rdi
setne	%a
</code></pre>
</li>
</ol>
</div></li></ol>
</section>
<section id="P700049702700000000000000000242B" data-uri="chapter03.xhtml#P700049702700000000000000000242B" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000406BC" data-uri="chapter03.xhtml#P70004970270000000000000000406BC" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.14 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003589">330</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000406BD" data-uri="chapter03.xhtml#P70004970270000000000000000406BD">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000406BE" data-uri="chapter03.xhtml#P70004970270000000000000000406BE">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000406BF" data-uri="chapter03.xhtml#P70004970270000000000000000406BF"><p id="P70004970270000000000000000406C0" data-uri="chapter03.xhtml#P70004970270000000000000000406C0" class="pcalibre calibre3 pcalibre1">The C code</p>
<pre id="P70004970270000000000000000406C1" data-uri="chapter03.xhtml#P70004970270000000000000000406C1" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406C2" data-uri="chapter03.xhtml#P70004970270000000000000000406C2" class="calibre10 pcalibre pcalibre1">
int test(data_t a) {
  return a TEST 0;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P70004970270000000000000000406C3" data-uri="chapter03.xhtml#P70004970270000000000000000406C3">shows a general comparison between argument a and 0, where we can set the data type of the argument by declaring <code id="P70004970270000000000000000406C4" data-uri="chapter03.xhtml#P70004970270000000000000000406C4" class="pcalibre1 calibre8 pcalibre">data_t</code> with a <code id="P70004970270000000000000000406C5" data-uri="chapter03.xhtml#P70004970270000000000000000406C5" class="pcalibre1 calibre8 pcalibre">typedef</code>, and the nature of the comparison by declaring TEST with a <code id="P70004970270000000000000000406C6" data-uri="chapter03.xhtml#P70004970270000000000000000406C6" class="pcalibre1 calibre8 pcalibre">#define</code> declaration. The following instruction sequences implement the comparison, where a is held in some portion of register <code id="P70004970270000000000000000406C7" data-uri="chapter03.xhtml#P70004970270000000000000000406C7" class="pcalibre1 calibre8 pcalibre">%rdi</code>. For each sequence, determine which data types <code id="P70004970270000000000000000406C8" data-uri="chapter03.xhtml#P70004970270000000000000000406C8" class="pcalibre1 calibre8 pcalibre">data_t</code> and which comparisons TEST could cause the compiler to generate this code. (There can be multiple correct answers; list all correct ones.)</p></div>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000406C9" data-uri="chapter03.xhtml#P70004970270000000000000000406C9">
<li id="P70004970270000000000000000406CA" data-uri="chapter03.xhtml#P70004970270000000000000000406CA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406CB" data-uri="chapter03.xhtml#P70004970270000000000000000406CB" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406CC" data-uri="chapter03.xhtml#P70004970270000000000000000406CC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406CD" data-uri="chapter03.xhtml#P70004970270000000000000000406CD" class="calibre10 pcalibre pcalibre1">
testq	%rdi, %rdi
setge	%al
</code></pre></li>
<li id="P70004970270000000000000000406CE" data-uri="chapter03.xhtml#P70004970270000000000000000406CE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406CF" data-uri="chapter03.xhtml#P70004970270000000000000000406CF" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406D0" data-uri="chapter03.xhtml#P70004970270000000000000000406D0" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406D1" data-uri="chapter03.xhtml#P70004970270000000000000000406D1" class="calibre10 pcalibre pcalibre1">
testw	%di, %di
sete	%al
</code></pre></li>
<li id="P70004970270000000000000000406D2" data-uri="chapter03.xhtml#P70004970270000000000000000406D2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406D3" data-uri="chapter03.xhtml#P70004970270000000000000000406D3" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406D4" data-uri="chapter03.xhtml#P70004970270000000000000000406D4" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406D5" data-uri="chapter03.xhtml#P70004970270000000000000000406D5" class="calibre10 pcalibre pcalibre1">
testb	%dil, %dil
seta	%al
</code></pre></li>
<li id="P70004970270000000000000000406D6" data-uri="chapter03.xhtml#P70004970270000000000000000406D6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000406D7" data-uri="chapter03.xhtml#P70004970270000000000000000406D7" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000406D8" data-uri="chapter03.xhtml#P70004970270000000000000000406D8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406D9" data-uri="chapter03.xhtml#P70004970270000000000000000406D9" class="calibre10 pcalibre pcalibre1">
testl	%edi, %edi
setle	%al
</code></pre></li>
</ol></li></ol>
</section>
</section>
<section id="P700049702700000000000000000244A" data-uri="chapter03.xhtml#P700049702700000000000000000244A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000406DA" data-uri="chapter03.xhtml#P70004970270000000000000000406DA" epub:type="title"><span class="pcalibre label pcalibre1">3.6.3 </span>Jump Instructions</h1></header>
<p id="P70004970270000000000000000406DB" data-uri="chapter03.xhtml#P70004970270000000000000000406DB" class="pcalibre1 pcalibre calibre2">Under normal execution, instructions follow each other in the order they are listed. A <i class="calibre5 pcalibre pcalibre1">jump</i> instruction can cause the execution to switch to a completely new position in the program. These jump destinations are generally indicated in assembly code by a <i class="calibre5 pcalibre pcalibre1">label</i>. Consider the following (very contrived) assembly-code sequence:</p>
<pre id="P70004970270000000000000000406DC" data-uri="chapter03.xhtml#P70004970270000000000000000406DC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000406DD" data-uri="chapter03.xhtml#P70004970270000000000000000406DD" class="calibre10 pcalibre pcalibre1">
  movq $0,%rax		<i class="calibre5 pcalibre pcalibre1">Set %rax to 0</i>
  jmp .L1		<i class="calibre5 pcalibre pcalibre1">Goto .L1</i>
  movq (%rax), %rdx	<i class="calibre5 pcalibre pcalibre1">Null pointer dereference (skipped)</i>
.L1:
  popq %rdx		<i class="calibre5 pcalibre pcalibre1">Jump target</i>
</code></pre>

<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000244F" data-uri="chapter03.xhtml#P700049702700000000000000000244F">
<table class="pcalibre largetable pcalibre1" id="P70004970270000000000000000406DE" data-uri="chapter03.xhtml#P70004970270000000000000000406DE">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P70004970270000000000000000406DF" data-uri="chapter03.xhtml#P70004970270000000000000000406DF" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002452" title="206" data-uri="chapter03.xhtml#P7000497027000000000000000002452" epub:type="pagebreak"></span>Instruction</th>
<th id="P70004970270000000000000000406E0" data-uri="chapter03.xhtml#P70004970270000000000000000406E0" class="calibre18 pcalibre pcalibre1">Synonym</th>
<th id="P70004970270000000000000000406E1" data-uri="chapter03.xhtml#P70004970270000000000000000406E1" class="calibre18 pcalibre pcalibre1">Jump condition</th>
<th id="P70004970270000000000000000406E2" data-uri="chapter03.xhtml#P70004970270000000000000000406E2" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000406E3" data-uri="chapter03.xhtml#P70004970270000000000000000406E3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406E4" data-uri="chapter03.xhtml#P70004970270000000000000000406E4" class="calibre10 pcalibre pcalibre1">jmp</code></td>
<td id="P70004970270000000000000000406E5" data-uri="chapter03.xhtml#P70004970270000000000000000406E5" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000406E6" data-uri="chapter03.xhtml#P70004970270000000000000000406E6" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000406E7" data-uri="chapter03.xhtml#P70004970270000000000000000406E7" class="calibre20 pcalibre pcalibre1">Direct jump</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000406E8" data-uri="chapter03.xhtml#P70004970270000000000000000406E8" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406E9" data-uri="chapter03.xhtml#P70004970270000000000000000406E9" class="calibre10 pcalibre pcalibre1">jmp</code></td>
<td id="P70004970270000000000000000406EA" data-uri="chapter03.xhtml#P70004970270000000000000000406EA" class="calibre20 pcalibre pcalibre1">*<i class="calibre5 pcalibre pcalibre1">Operand</i></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000406EB" data-uri="chapter03.xhtml#P70004970270000000000000000406EB" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000406EC" data-uri="chapter03.xhtml#P70004970270000000000000000406EC" class="calibre20 pcalibre pcalibre1">Indirect jump</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000406ED" data-uri="chapter03.xhtml#P70004970270000000000000000406ED" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406EE" data-uri="chapter03.xhtml#P70004970270000000000000000406EE" class="calibre10 pcalibre pcalibre1">je</code></td>
<td id="P70004970270000000000000000406EF" data-uri="chapter03.xhtml#P70004970270000000000000000406EF" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P70004970270000000000000000406F0" data-uri="chapter03.xhtml#P70004970270000000000000000406F0" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406F1" data-uri="chapter03.xhtml#P70004970270000000000000000406F1" class="calibre10 pcalibre pcalibre1">jz</code></td>
<td id="P70004970270000000000000000406F2" data-uri="chapter03.xhtml#P70004970270000000000000000406F2" class="calibre20 pcalibre pcalibre1">ZF</td>
<td id="P70004970270000000000000000406F3" data-uri="chapter03.xhtml#P70004970270000000000000000406F3" class="calibre20 pcalibre pcalibre1">Equal / zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000406F4" data-uri="chapter03.xhtml#P70004970270000000000000000406F4" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406F5" data-uri="chapter03.xhtml#P70004970270000000000000000406F5" class="calibre10 pcalibre pcalibre1">jne</code></td>
<td id="P70004970270000000000000000406F6" data-uri="chapter03.xhtml#P70004970270000000000000000406F6" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P70004970270000000000000000406F7" data-uri="chapter03.xhtml#P70004970270000000000000000406F7" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406F8" data-uri="chapter03.xhtml#P70004970270000000000000000406F8" class="calibre10 pcalibre pcalibre1">jnz</code></td>
<td id="P70004970270000000000000000406F9" data-uri="chapter03.xhtml#P70004970270000000000000000406F9" class="calibre20 pcalibre pcalibre1">~ZF</td>
<td id="P70004970270000000000000000406FA" data-uri="chapter03.xhtml#P70004970270000000000000000406FA" class="calibre20 pcalibre pcalibre1">Not equal / not zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000406FB" data-uri="chapter03.xhtml#P70004970270000000000000000406FB" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000406FC" data-uri="chapter03.xhtml#P70004970270000000000000000406FC" class="calibre10 pcalibre pcalibre1">js</code></td>
<td id="P70004970270000000000000000406FD" data-uri="chapter03.xhtml#P70004970270000000000000000406FD" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000406FE" data-uri="chapter03.xhtml#P70004970270000000000000000406FE" class="calibre20 pcalibre pcalibre1">SF</td>
<td id="P70004970270000000000000000406FF" data-uri="chapter03.xhtml#P70004970270000000000000000406FF" class="calibre20 pcalibre pcalibre1">Negative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040700" data-uri="chapter03.xhtml#P7000497027000000000000000040700" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040701" data-uri="chapter03.xhtml#P7000497027000000000000000040701" class="calibre10 pcalibre pcalibre1">jns</code></td>
<td id="P7000497027000000000000000040702" data-uri="chapter03.xhtml#P7000497027000000000000000040702" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040703" data-uri="chapter03.xhtml#P7000497027000000000000000040703" class="calibre20 pcalibre pcalibre1">~SF</td>
<td id="P7000497027000000000000000040704" data-uri="chapter03.xhtml#P7000497027000000000000000040704" class="calibre20 pcalibre pcalibre1">Nonnegative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040705" data-uri="chapter03.xhtml#P7000497027000000000000000040705" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040706" data-uri="chapter03.xhtml#P7000497027000000000000000040706" class="calibre10 pcalibre pcalibre1">jg</code></td>
<td id="P7000497027000000000000000040707" data-uri="chapter03.xhtml#P7000497027000000000000000040707" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040708" data-uri="chapter03.xhtml#P7000497027000000000000000040708" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040709" data-uri="chapter03.xhtml#P7000497027000000000000000040709" class="calibre10 pcalibre pcalibre1">jnle</code></td>
<td id="P700049702700000000000000004070A" data-uri="chapter03.xhtml#P700049702700000000000000004070A" class="calibre20 pcalibre pcalibre1">~(SF ^ OF) &amp; ~ZF</td>
<td id="P700049702700000000000000004070B" data-uri="chapter03.xhtml#P700049702700000000000000004070B" class="calibre20 pcalibre pcalibre1">Greater (signed &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004070C" data-uri="chapter03.xhtml#P700049702700000000000000004070C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004070D" data-uri="chapter03.xhtml#P700049702700000000000000004070D" class="calibre10 pcalibre pcalibre1">jge</code></td>
<td id="P700049702700000000000000004070E" data-uri="chapter03.xhtml#P700049702700000000000000004070E" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P700049702700000000000000004070F" data-uri="chapter03.xhtml#P700049702700000000000000004070F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040710" data-uri="chapter03.xhtml#P7000497027000000000000000040710" class="calibre10 pcalibre pcalibre1">jnl</code></td>
<td id="P7000497027000000000000000040711" data-uri="chapter03.xhtml#P7000497027000000000000000040711" class="calibre20 pcalibre pcalibre1">~(SF ^ OF)</td>
<td id="P7000497027000000000000000040712" data-uri="chapter03.xhtml#P7000497027000000000000000040712" class="calibre20 pcalibre pcalibre1">Greater or equal (signed &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040713" data-uri="chapter03.xhtml#P7000497027000000000000000040713" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040714" data-uri="chapter03.xhtml#P7000497027000000000000000040714" class="calibre10 pcalibre pcalibre1">jl</code></td>
<td id="P7000497027000000000000000040715" data-uri="chapter03.xhtml#P7000497027000000000000000040715" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040716" data-uri="chapter03.xhtml#P7000497027000000000000000040716" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040717" data-uri="chapter03.xhtml#P7000497027000000000000000040717" class="calibre10 pcalibre pcalibre1">jnge</code></td>
<td id="P7000497027000000000000000040718" data-uri="chapter03.xhtml#P7000497027000000000000000040718" class="calibre20 pcalibre pcalibre1">SF ^ OF</td>
<td id="P7000497027000000000000000040719" data-uri="chapter03.xhtml#P7000497027000000000000000040719" class="calibre20 pcalibre pcalibre1">Less (signed &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004071A" data-uri="chapter03.xhtml#P700049702700000000000000004071A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004071B" data-uri="chapter03.xhtml#P700049702700000000000000004071B" class="calibre10 pcalibre pcalibre1">jle</code></td>
<td id="P700049702700000000000000004071C" data-uri="chapter03.xhtml#P700049702700000000000000004071C" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P700049702700000000000000004071D" data-uri="chapter03.xhtml#P700049702700000000000000004071D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004071E" data-uri="chapter03.xhtml#P700049702700000000000000004071E" class="calibre10 pcalibre pcalibre1">jng</code></td>
<td id="P700049702700000000000000004071F" data-uri="chapter03.xhtml#P700049702700000000000000004071F" class="calibre20 pcalibre pcalibre1">(SF ^ OF) | ZF</td>
<td id="P7000497027000000000000000040720" data-uri="chapter03.xhtml#P7000497027000000000000000040720" class="calibre20 pcalibre pcalibre1">Less or equal (signed &lt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040721" data-uri="chapter03.xhtml#P7000497027000000000000000040721" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040722" data-uri="chapter03.xhtml#P7000497027000000000000000040722" class="calibre10 pcalibre pcalibre1">ja</code></td>
<td id="P7000497027000000000000000040723" data-uri="chapter03.xhtml#P7000497027000000000000000040723" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040724" data-uri="chapter03.xhtml#P7000497027000000000000000040724" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040725" data-uri="chapter03.xhtml#P7000497027000000000000000040725" class="calibre10 pcalibre pcalibre1">jnbe</code></td>
<td id="P7000497027000000000000000040726" data-uri="chapter03.xhtml#P7000497027000000000000000040726" class="calibre20 pcalibre pcalibre1">~CF &amp; ~ZF</td>
<td id="P7000497027000000000000000040727" data-uri="chapter03.xhtml#P7000497027000000000000000040727" class="calibre20 pcalibre pcalibre1">Above (unsigned &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040728" data-uri="chapter03.xhtml#P7000497027000000000000000040728" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040729" data-uri="chapter03.xhtml#P7000497027000000000000000040729" class="calibre10 pcalibre pcalibre1">jae</code></td>
<td id="P700049702700000000000000004072A" data-uri="chapter03.xhtml#P700049702700000000000000004072A" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P700049702700000000000000004072B" data-uri="chapter03.xhtml#P700049702700000000000000004072B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004072C" data-uri="chapter03.xhtml#P700049702700000000000000004072C" class="calibre10 pcalibre pcalibre1">jnb</code></td>
<td id="P700049702700000000000000004072D" data-uri="chapter03.xhtml#P700049702700000000000000004072D" class="calibre20 pcalibre pcalibre1">~CF</td>
<td id="P700049702700000000000000004072E" data-uri="chapter03.xhtml#P700049702700000000000000004072E" class="calibre20 pcalibre pcalibre1">Above or equal (unsigned &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004072F" data-uri="chapter03.xhtml#P700049702700000000000000004072F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040730" data-uri="chapter03.xhtml#P7000497027000000000000000040730" class="calibre10 pcalibre pcalibre1">jb</code></td>
<td id="P7000497027000000000000000040731" data-uri="chapter03.xhtml#P7000497027000000000000000040731" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040732" data-uri="chapter03.xhtml#P7000497027000000000000000040732" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040733" data-uri="chapter03.xhtml#P7000497027000000000000000040733" class="calibre10 pcalibre pcalibre1">jnae</code></td>
<td id="P7000497027000000000000000040734" data-uri="chapter03.xhtml#P7000497027000000000000000040734" class="calibre20 pcalibre pcalibre1">CF</td>
<td id="P7000497027000000000000000040735" data-uri="chapter03.xhtml#P7000497027000000000000000040735" class="calibre20 pcalibre pcalibre1">Below (unsigned &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040736" data-uri="chapter03.xhtml#P7000497027000000000000000040736" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040737" data-uri="chapter03.xhtml#P7000497027000000000000000040737" class="calibre10 pcalibre pcalibre1">jbe</code></td>
<td id="P7000497027000000000000000040738" data-uri="chapter03.xhtml#P7000497027000000000000000040738" class="calibre20 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Label</i></td>
<td id="P7000497027000000000000000040739" data-uri="chapter03.xhtml#P7000497027000000000000000040739" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004073A" data-uri="chapter03.xhtml#P700049702700000000000000004073A" class="calibre10 pcalibre pcalibre1">jna</code></td>
<td id="P700049702700000000000000004073B" data-uri="chapter03.xhtml#P700049702700000000000000004073B" class="calibre20 pcalibre pcalibre1">CF | ZF</td>
<td id="P700049702700000000000000004073C" data-uri="chapter03.xhtml#P700049702700000000000000004073C" class="calibre20 pcalibre pcalibre1">Below or equal (unsigned &lt;=)</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004073D" data-uri="chapter03.xhtml#P700049702700000000000000004073D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004073E" data-uri="chapter03.xhtml#P700049702700000000000000004073E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.15 </span>The jump instructions.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000004073F" data-uri="chapter03.xhtml#P700049702700000000000000004073F"><p id="P7000497027000000000000000040740" data-uri="chapter03.xhtml#P7000497027000000000000000040740" class="pcalibre calibre3 pcalibre1">These instructions jump to a labeled destination when the jump condition holds. Some instructions have "synonyms," alternate names for the same machine instruction.</p></div></figcaption>
</figure>

<p id="P7000497027000000000000000040741" data-uri="chapter03.xhtml#P7000497027000000000000000040741" class="pcalibre1 pcalibre calibre2">The instruction <code id="P7000497027000000000000000040742" data-uri="chapter03.xhtml#P7000497027000000000000000040742" class="pcalibre1 calibre8 pcalibre">jmp .L1</code> will cause the program to skip over the <code id="P7000497027000000000000000040743" data-uri="chapter03.xhtml#P7000497027000000000000000040743" class="pcalibre1 calibre8 pcalibre">movq</code> instruction and instead resume execution with the <code id="P7000497027000000000000000040744" data-uri="chapter03.xhtml#P7000497027000000000000000040744" class="pcalibre1 calibre8 pcalibre">popq</code> instruction. In generating the object-code file, the assembler determines the addresses of all labeled instructions and encodes the <i class="calibre5 pcalibre pcalibre1">jump targets</i> (the addresses of the destination instructions) as part of the jump instructions.</p>
<p id="P7000497027000000000000000040745" data-uri="chapter03.xhtml#P7000497027000000000000000040745" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000244F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.15</span></a> shows the different jump instructions. The <code id="P7000497027000000000000000040746" data-uri="chapter03.xhtml#P7000497027000000000000000040746" class="pcalibre1 calibre8 pcalibre">jmp</code> instruction jumps unconditionally. It can be either a <i class="calibre5 pcalibre pcalibre1">direct</i> jump, where the jump target is encoded as part of the instruction, or an <i class="calibre5 pcalibre pcalibre1">indirect</i> jump, where the jump target is read from a register or a memory location. Direct jumps are written in assembly code by giving a label as the jump target, for example, the label <code id="P7000497027000000000000000040747" data-uri="chapter03.xhtml#P7000497027000000000000000040747" class="pcalibre1 calibre8 pcalibre">.L1</code> in the code shown. Indirect jumps are written using `*' followed by an operand specifier using one of the memory operand formats described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001F57"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.3</span></a>. As examples, the instruction</p>
<pre id="P7000497027000000000000000040748" data-uri="chapter03.xhtml#P7000497027000000000000000040748" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040749" data-uri="chapter03.xhtml#P7000497027000000000000000040749" class="calibre10 pcalibre pcalibre1">
jmp *%rax
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004074A" data-uri="chapter03.xhtml#P700049702700000000000000004074A">uses the value in register <code id="P700049702700000000000000004074B" data-uri="chapter03.xhtml#P700049702700000000000000004074B" class="pcalibre1 calibre8 pcalibre">%rax</code> as the jump target, and the instruction</p>
<pre id="P700049702700000000000000004074C" data-uri="chapter03.xhtml#P700049702700000000000000004074C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004074D" data-uri="chapter03.xhtml#P700049702700000000000000004074D" class="calibre10 pcalibre pcalibre1">
jmp *(%rax)
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004074E" data-uri="chapter03.xhtml#P700049702700000000000000004074E">reads the jump target from memory, using the value in <code id="P700049702700000000000000004074F" data-uri="chapter03.xhtml#P700049702700000000000000004074F" class="pcalibre1 calibre8 pcalibre">%rax</code> as the read address.</p>
<p id="P7000497027000000000000000040750" data-uri="chapter03.xhtml#P7000497027000000000000000040750" class="pcalibre1 pcalibre calibre2">The remaining jump instructions in the table are <i class="calibre5 pcalibre pcalibre1">conditional</i>—they either jump or continue executing at the next instruction in the code sequence, depending on some combination of the condition codes. The names of these instructions <span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000024C4" title="207" data-uri="chapter03.xhtml#P70004970270000000000000000024C4" epub:type="pagebreak"></span>and the conditions under which they jump match those of the <span class="smallcaps pcalibre pcalibre1">set </span>instructions (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000238C"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.14</span></a>). As with the <span class="smallcaps pcalibre pcalibre1">set </span>instructions, some of the underlying machine instructions have multiple names. Conditional jumps can only be direct.</p>
</section>
<section id="P70004970270000000000000000024C5" data-uri="chapter03.xhtml#P70004970270000000000000000024C5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040751" data-uri="chapter03.xhtml#P7000497027000000000000000040751" epub:type="title"><span class="pcalibre label pcalibre1">3.6.4 </span>Jump Instruction Encodings</h1></header>
<p id="P7000497027000000000000000040752" data-uri="chapter03.xhtml#P7000497027000000000000000040752" class="pcalibre1 pcalibre calibre2">For the most part, we will not concern ourselves with the detailed format of machine code. On the other hand, understanding how the targets of jump instructions are encoded will become important when we study linking in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005FB4.xhtml#P7000497027000000000000000005FB4"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">7</span></a>. In addition, it helps when interpreting the output of a disassembler. In assembly code, jump targets are written using symbolic labels. The assembler, and later the linker, generate the proper encodings of the jump targets. There are several different encodings for jumps, but some of the most commonly used ones are <i class="calibre5 pcalibre pcalibre1">PC relative</i>. That is, they encode the difference between the address of the target instruction and the address of the instruction immediately following the jump. These offsets can be encoded using 1, 2, or 4 bytes. A second encoding method is to give an "absolute" address, using 4 bytes to directly specify the target. The assembler and linker select the appropriate encodings of the jump destinations.</p>
<p id="P7000497027000000000000000040753" data-uri="chapter03.xhtml#P7000497027000000000000000040753" class="pcalibre1 pcalibre calibre2">As an example of PC-relative addressing, the following assembly code for a function was generated by compiling a file branch. <code id="P7000497027000000000000000040754" data-uri="chapter03.xhtml#P7000497027000000000000000040754" class="pcalibre1 calibre8 pcalibre">c.</code> It contains two jumps: the <code id="P7000497027000000000000000040755" data-uri="chapter03.xhtml#P7000497027000000000000000040755" class="pcalibre1 calibre8 pcalibre">jmp</code> instruction on line 2 jumps forward to a higher address, while the <code id="P7000497027000000000000000040756" data-uri="chapter03.xhtml#P7000497027000000000000000040756" class="pcalibre1 calibre8 pcalibre">jg</code> instruction on line 7 jumps back to a lower one.</p>
<pre id="P7000497027000000000000000040757" data-uri="chapter03.xhtml#P7000497027000000000000000040757" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040758" data-uri="chapter03.xhtml#P7000497027000000000000000040758" class="calibre10 pcalibre pcalibre1">
1	  movq	%rdi, %rax
2	  jmp	.L2
3	.L3:
4	  sarq	%rax
5	.L2:
6	  testq	%rax, %rax
7	  jg	.L3
8	  rep; ret
</code></pre>
<p id="P7000497027000000000000000040759" data-uri="chapter03.xhtml#P7000497027000000000000000040759" class="pcalibre1 pcalibre calibre2">The disassembled version of the <code id="P700049702700000000000000004075A" data-uri="chapter03.xhtml#P700049702700000000000000004075A" class="pcalibre1 calibre8 pcalibre">.o</code> format generated by the assembler is as follows:</p>
<pre id="P700049702700000000000000004075B" data-uri="chapter03.xhtml#P700049702700000000000000004075B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004075C" data-uri="chapter03.xhtml#P700049702700000000000000004075C" class="calibre10 pcalibre pcalibre1">
1	0:	48 89 f8	mov	%rdi,%rax
2	3:	eb 03		jmp	8 &lt;loop+0x8&gt;
3	5:	48 d1 f8	sar	%rax
4	8:	48 85 c0	test	%rax,%rax
5	b:	7f f8		jg	5 &lt;loop+0x5&gt;
6	d:	f3 c3		repz retq
</code></pre>
<p id="P700049702700000000000000004075D" data-uri="chapter03.xhtml#P700049702700000000000000004075D" class="pcalibre1 pcalibre calibre2">In the annotations on the right generated by the disassembler, the jump targets are indicated as <code id="P700049702700000000000000004075E" data-uri="chapter03.xhtml#P700049702700000000000000004075E" class="pcalibre1 calibre8 pcalibre">0x8</code> for the jump instruction on line 2 and <code id="P700049702700000000000000004075F" data-uri="chapter03.xhtml#P700049702700000000000000004075F" class="pcalibre1 calibre8 pcalibre">0x5</code> for the jump instruction on line 5 (the disassembler lists all numbers in hexadecimal). Looking at the byte encodings of the instructions, however, we see that the target of the first jump instruction is encoded (in the second byte) as <code id="P7000497027000000000000000040760" data-uri="chapter03.xhtml#P7000497027000000000000000040760" class="pcalibre1 calibre8 pcalibre">0x03</code>. Adding this to <code id="P7000497027000000000000000040761" data-uri="chapter03.xhtml#P7000497027000000000000000040761" class="pcalibre1 calibre8 pcalibre">0x5</code>, the</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000024D7" data-uri="chapter03.xhtml#P70004970270000000000000000024D7"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000040762" data-uri="chapter03.xhtml#P7000497027000000000000000040762" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000024D9" title="208" data-uri="chapter03.xhtml#P70004970270000000000000000024D9" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>What do the instructions <code id="P7000497027000000000000000040763" data-uri="chapter03.xhtml#P7000497027000000000000000040763" class="calibre55 pcalibre pcalibre1">rep</code> and <code id="P7000497027000000000000000040764" data-uri="chapter03.xhtml#P7000497027000000000000000040764" class="calibre55 pcalibre pcalibre1">repz</code> do?</h1></header>
<p id="P7000497027000000000000000040765" data-uri="chapter03.xhtml#P7000497027000000000000000040765" class="pcalibre calibre3 pcalibre1">Line 8 of the assembly code shown on page 207 contains the instruction combination <code id="P7000497027000000000000000040766" data-uri="chapter03.xhtml#P7000497027000000000000000040766" class="pcalibre1 calibre8 pcalibre">rep; ret</code>. These are rendered in the disassembled code (line 6) as <code id="P7000497027000000000000000040767" data-uri="chapter03.xhtml#P7000497027000000000000000040767" class="pcalibre1 calibre8 pcalibre">repz retq</code>. One can infer that <code id="P7000497027000000000000000040768" data-uri="chapter03.xhtml#P7000497027000000000000000040768" class="pcalibre1 calibre8 pcalibre">repz</code> is a synonym for <code id="P7000497027000000000000000040769" data-uri="chapter03.xhtml#P7000497027000000000000000040769" class="pcalibre1 calibre8 pcalibre">rep</code>, just as <code id="P700049702700000000000000004076A" data-uri="chapter03.xhtml#P700049702700000000000000004076A" class="pcalibre1 calibre8 pcalibre">retq</code> is a synonym for <code id="P700049702700000000000000004076B" data-uri="chapter03.xhtml#P700049702700000000000000004076B" class="pcalibre1 calibre8 pcalibre">ret</code>. Looking at the Intel and AMD documentation for the <code id="P700049702700000000000000004076C" data-uri="chapter03.xhtml#P700049702700000000000000004076C" class="pcalibre1 calibre8 pcalibre">rep</code> instruction, we find that it is normally used to implement a repeating string operation <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3A6">[3,</a> <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B408">51]</a>. It seems completely inappropriate here. The answer to this puzzle can be seen in AMD's guidelines to compiler writers <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3A2">[1]</a>. They recommend using the combination of <code id="P700049702700000000000000004076D" data-uri="chapter03.xhtml#P700049702700000000000000004076D" class="pcalibre1 calibre8 pcalibre">rep</code> followed by <code id="P700049702700000000000000004076E" data-uri="chapter03.xhtml#P700049702700000000000000004076E" class="pcalibre1 calibre8 pcalibre">ret</code> to avoid making the <code id="P700049702700000000000000004076F" data-uri="chapter03.xhtml#P700049702700000000000000004076F" class="pcalibre1 calibre8 pcalibre">ret</code> instruction the destination of a conditional jump instruction. Without the <code id="P7000497027000000000000000040770" data-uri="chapter03.xhtml#P7000497027000000000000000040770" class="pcalibre1 calibre8 pcalibre">rep</code> instruction, the <code id="P7000497027000000000000000040771" data-uri="chapter03.xhtml#P7000497027000000000000000040771" class="pcalibre1 calibre8 pcalibre">jg</code> instruction (line 7 of the assembly code) would proceed to the <code id="P7000497027000000000000000040772" data-uri="chapter03.xhtml#P7000497027000000000000000040772" class="pcalibre1 calibre8 pcalibre">ret</code> instruction when the branch is not taken. According toAMD, their processors cannot properly predict the destination of a <code id="P7000497027000000000000000040773" data-uri="chapter03.xhtml#P7000497027000000000000000040773" class="pcalibre1 calibre8 pcalibre">ret</code> instruction when it is reached from a jump instruction. The <code id="P7000497027000000000000000040774" data-uri="chapter03.xhtml#P7000497027000000000000000040774" class="pcalibre1 calibre8 pcalibre">rep</code> instruction serves as a form of no-operation here, and so inserting it as the jump destination does not change behavior of the code, except to make it faster on AMD processors. We can safely ignore any <code id="P7000497027000000000000000040775" data-uri="chapter03.xhtml#P7000497027000000000000000040775" class="pcalibre1 calibre8 pcalibre">rep</code> or <code id="P7000497027000000000000000040776" data-uri="chapter03.xhtml#P7000497027000000000000000040776" class="pcalibre1 calibre8 pcalibre">repz</code> instruction we see in the rest of the code presented in this book.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040777" data-uri="chapter03.xhtml#P7000497027000000000000000040777">address of the following instruction, we get jump target address <code id="P7000497027000000000000000040778" data-uri="chapter03.xhtml#P7000497027000000000000000040778" class="pcalibre1 calibre8 pcalibre">0x8</code>, the address of the instruction on line 4.</p>
<p id="P7000497027000000000000000040779" data-uri="chapter03.xhtml#P7000497027000000000000000040779" class="pcalibre1 pcalibre calibre2">Similarly, the target of the second jump instruction is encoded as <code id="P700049702700000000000000004077A" data-uri="chapter03.xhtml#P700049702700000000000000004077A" class="pcalibre1 calibre8 pcalibre">0xf8</code> (decimal −8) using a single-byte two's-complement representation. Adding this to <code id="P700049702700000000000000004077B" data-uri="chapter03.xhtml#P700049702700000000000000004077B" class="pcalibre1 calibre8 pcalibre">0xd</code> (decimal 13), the address of the instruction on line 6, we get <code id="P700049702700000000000000004077C" data-uri="chapter03.xhtml#P700049702700000000000000004077C" class="pcalibre1 calibre8 pcalibre">0x5</code>, the address of the instruction on line 3.</p>
<p id="P700049702700000000000000004077D" data-uri="chapter03.xhtml#P700049702700000000000000004077D" class="pcalibre1 pcalibre calibre2">As these examples illustrate, the value of the program counter when performing PC-relative addressing is the address of the instruction following the jump, not that of the jump itself. This convention dates back to early implementations, when the processor would update the program counter as its first step in executing an instruction.</p>
<p id="P700049702700000000000000004077E" data-uri="chapter03.xhtml#P700049702700000000000000004077E" class="pcalibre1 pcalibre calibre2">The following shows the disassembled version of the program after linking:</p>
<pre id="P700049702700000000000000004077F" data-uri="chapter03.xhtml#P700049702700000000000000004077F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040780" data-uri="chapter03.xhtml#P7000497027000000000000000040780" class="calibre10 pcalibre pcalibre1">
1	4004d0: 48 89 f8	mov %rdi,%rax
2	4004d3: eb 03		jmp 4004d8 &lt;loop+0x8&gt;
3	4004d5: 48 d1 f8	sar %rax
4	4004d8: 48 85 c0	test %rax,%rax
5	4004db: 7f f8		jg 4004d5 &lt;loop+0x5&gt;
6	4004dd: f3 c3		repz retq
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040781" data-uri="chapter03.xhtml#P7000497027000000000000000040781">The instructions have been relocated to different addresses, but the encodings of the jump targets in lines 2 and 5 remain unchanged. By using a PC-relative encoding of the jump targets, the instructions can be compactly encoded (requiring just 2 bytes), and the object code can be shifted to different positions in memory without alteration.</p>
<section id="P70004970270000000000000000024F9" data-uri="chapter03.xhtml#P70004970270000000000000000024F9" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040782" data-uri="chapter03.xhtml#P7000497027000000000000000040782" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000024FB" title="209" data-uri="chapter03.xhtml#P70004970270000000000000000024FB" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.15 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P7000497027000000000000000003589">330</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040783" data-uri="chapter03.xhtml#P7000497027000000000000000040783">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040784" data-uri="chapter03.xhtml#P7000497027000000000000000040784">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040785" data-uri="chapter03.xhtml#P7000497027000000000000000040785"><p id="P7000497027000000000000000040786" data-uri="chapter03.xhtml#P7000497027000000000000000040786" class="pcalibre calibre3 pcalibre1">In the following excerpts from a disassembled binary, some of the information has been replaced by X's. Answer the following questions about these instructions.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000040787" data-uri="chapter03.xhtml#P7000497027000000000000000040787">
<li id="P7000497027000000000000000040788" data-uri="chapter03.xhtml#P7000497027000000000000000040788" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040789" data-uri="chapter03.xhtml#P7000497027000000000000000040789" class="pcalibre calibre3 pcalibre1">What is the target of the <code id="P700049702700000000000000004078A" data-uri="chapter03.xhtml#P700049702700000000000000004078A" class="pcalibre1 calibre8 pcalibre">je</code> instruction below? (You do not need to know anything about the <code id="P700049702700000000000000004078B" data-uri="chapter03.xhtml#P700049702700000000000000004078B" class="pcalibre1 calibre8 pcalibre">callq</code> instruction here.)</p>
<pre id="P700049702700000000000000004078C" data-uri="chapter03.xhtml#P700049702700000000000000004078C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004078D" data-uri="chapter03.xhtml#P700049702700000000000000004078D" class="calibre10 pcalibre pcalibre1">
4003fa: 74 02	je	XXXXXX
4003fc: ff d0	callq	*%rax
</code></pre></li>
<li id="P700049702700000000000000004078E" data-uri="chapter03.xhtml#P700049702700000000000000004078E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004078F" data-uri="chapter03.xhtml#P700049702700000000000000004078F" class="pcalibre calibre3 pcalibre1">What is the target of the <code id="P7000497027000000000000000040790" data-uri="chapter03.xhtml#P7000497027000000000000000040790" class="pcalibre1 calibre8 pcalibre">je</code> instruction below?</p>
<pre id="P7000497027000000000000000040791" data-uri="chapter03.xhtml#P7000497027000000000000000040791" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040792" data-uri="chapter03.xhtml#P7000497027000000000000000040792" class="calibre10 pcalibre pcalibre1">
40042f: 74 f4	je	XXXXXX
400431: 5d	pop	%rbp
</code></pre></li>
<li id="P7000497027000000000000000040793" data-uri="chapter03.xhtml#P7000497027000000000000000040793" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040794" data-uri="chapter03.xhtml#P7000497027000000000000000040794" class="pcalibre calibre3 pcalibre1">What is the address of the <code id="P7000497027000000000000000040795" data-uri="chapter03.xhtml#P7000497027000000000000000040795" class="pcalibre1 calibre8 pcalibre">ja</code> and pop instructions?</p>
<pre id="P7000497027000000000000000040796" data-uri="chapter03.xhtml#P7000497027000000000000000040796" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040797" data-uri="chapter03.xhtml#P7000497027000000000000000040797" class="calibre10 pcalibre pcalibre1">
XXXXXX: 77 02	ja	400547
XXXXXX: 5d	pop	%rbp
</code></pre>
</li>
<li id="P7000497027000000000000000040798" data-uri="chapter03.xhtml#P7000497027000000000000000040798" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040799" data-uri="chapter03.xhtml#P7000497027000000000000000040799" class="pcalibre calibre3 pcalibre1">In the code that follows, the jump target is encoded in PC-relative form as a 4-byte two's-complement number. The bytes are listed from least significant to most, reflecting the little-endian byte ordering of x86-64. What is the address of the jump target?</p>
<pre id="P700049702700000000000000004079A" data-uri="chapter03.xhtml#P700049702700000000000000004079A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004079B" data-uri="chapter03.xhtml#P700049702700000000000000004079B" class="calibre10 pcalibre pcalibre1">
4005e8: e9 73 ff ff ff	jmpq	XXXXXXX
4005ed: 90		nop
</code></pre>
</li></ol></div></li></ol>
</section>

<p id="P700049702700000000000000004079C" data-uri="chapter03.xhtml#P700049702700000000000000004079C" class="pcalibre1 pcalibre calibre2">The jump instructions provide a means to implement conditional execution (<code id="P700049702700000000000000004079D" data-uri="chapter03.xhtml#P700049702700000000000000004079D" class="pcalibre1 calibre8 pcalibre">if</code>), as well as several different loop constructs.</p>
</section>
<section id="P7000497027000000000000000002517" data-uri="chapter03.xhtml#P7000497027000000000000000002517" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004079E" data-uri="chapter03.xhtml#P700049702700000000000000004079E" epub:type="title"><span class="pcalibre label pcalibre1">3.6.5 </span>Implementing Conditional Branches with Conditional Control</h1></header>
<p id="P700049702700000000000000004079F" data-uri="chapter03.xhtml#P700049702700000000000000004079F" class="pcalibre1 pcalibre calibre2">The most general way to translate conditional expressions and statements from C into machine code is to use combinations of conditional and unconditional jumps. (As an alternative, we will see in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002578"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.6</span></a> that some conditionals can be implemented by conditional transfers of data rather than control.) For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(a)</span></a> shows the C code for a function that computes the absolute value of the difference of two numbers.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P7000497027000000000000000003A6E" epub:type="noteref" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000003A6E"><sup class="pcalibre1 calibre21 pcalibre">3</sup></a> The function also has a side effect of incrementing one of two counters, encoded as global variables <code id="P70004970270000000000000000407A0" data-uri="chapter03.xhtml#P70004970270000000000000000407A0" class="pcalibre1 calibre8 pcalibre">lt_cnt and ge_cnt.</code> Gcc generates the assembly code shown as <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(c)</span></a>. Our rendition of the machine code into C is shown as the function <code id="P70004970270000000000000000407A1" data-uri="chapter03.xhtml#P70004970270000000000000000407A1" class="pcalibre1 calibre8 pcalibre">gotodiff_se</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(b)</span></a>). It uses the <code id="P70004970270000000000000000407A2" data-uri="chapter03.xhtml#P70004970270000000000000000407A2" class="pcalibre1 calibre8 pcalibre">goto</code> statement in C, which is similar to the unconditional jump of</p><aside class="footnote pcalibre5 pcalibre" id="P7000497027000000000000000003A6E" data-uri="chapter03.xhtml#P7000497027000000000000000003A6E" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="fileP7000497027000000000000000002339_split_000.xhtml#r__P7000497027000000000000000003A6E" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">3. </a></span>Actually, it can return a negative value if one of the subtractions overflows. Our interest here is to demonstrate machine code, not to implement robust code.</p></aside>

<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000251D" data-uri="chapter03.xhtml#P700049702700000000000000000251D">
<p id="P70004970270000000000000000407A3" data-uri="chapter03.xhtml#P70004970270000000000000000407A3" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000251F" title="210" data-uri="chapter03.xhtml#P700049702700000000000000000251F" epub:type="pagebreak"></span>(a) Original C code</p>
<pre id="P70004970270000000000000000407A4" data-uri="chapter03.xhtml#P70004970270000000000000000407A4" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407A5" data-uri="chapter03.xhtml#P70004970270000000000000000407A5" class="calibre10 pcalibre pcalibre1">
long lt_cnt = 0;
long ge_cnt = 0;
long absdiff_se(long x, long y)
{
	long result;
	if (x &lt; y) {
		lt_cnt++;
		result = y - x;
	}
	else {
		ge_cnt++;
		result = x - y;
	}
	return result;
}
</code></pre>
<p id="P70004970270000000000000000407A6" data-uri="chapter03.xhtml#P70004970270000000000000000407A6" class="pcalibre1 pcalibre calibre2">(b) Equivalent goto version</p>
<pre id="P70004970270000000000000000407A7" data-uri="chapter03.xhtml#P70004970270000000000000000407A7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407A8" data-uri="chapter03.xhtml#P70004970270000000000000000407A8" class="calibre10 pcalibre pcalibre1">
1 long gotodiff_se(long x, long y)
2 {
3	long result;
4	if (x &gt;= y)
5		goto x_ge_y;
6	lt_cnt++;
7	result = y - x;
8	return result;
9 x_ge_y:
10	ge_cnt++;
11	result = x - y;
12	return result;
13 }
</code></pre>
<p id="P70004970270000000000000000407A9" data-uri="chapter03.xhtml#P70004970270000000000000000407A9" class="pcalibre1 pcalibre calibre2">(c) Generated assembly code</p>
<pre id="P70004970270000000000000000407AA" data-uri="chapter03.xhtml#P70004970270000000000000000407AA" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407AB" data-uri="chapter03.xhtml#P70004970270000000000000000407AB" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long absdiff_se(long x, long y</i>)
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi</i>
1	absdiff_se:
2		cmpq	%rsi, %rdi	<i class="calibre5 pcalibre pcalibre1">Compare x:y</i>
3		jge	.L2		<i class="calibre5 pcalibre pcalibre1">If &gt;= goto</i> <b class="calibre4 pcalibre pcalibre1">x_ge_y</b>
4		addq	$1,lt_cnt(%rip)	<i class="calibre5 pcalibre pcalibre1">lt_cnt++</i>
5		movq	%rsi, %rax
6		subq	%rdi, %rax	<i class="calibre5 pcalibre pcalibre1">result = y - x</i>
7		ret			<i class="calibre5 pcalibre pcalibre1">Return</i>
8	.L2:			  <b class="calibre4 pcalibre pcalibre1">x_ge_y</b><i class="calibre5 pcalibre pcalibre1">:</i>
9		addq $1, ge_cnt(%rip)	<i class="calibre5 pcalibre pcalibre1">ge_cnt++</i>
10		movq %rdi, %rax
11		subq %rsi, %rax		<i class="calibre5 pcalibre pcalibre1">result = x - y</i>
12		ret			<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P70004970270000000000000000407AC" data-uri="chapter03.xhtml#P70004970270000000000000000407AC" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000407AD" data-uri="chapter03.xhtml#P70004970270000000000000000407AD" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.16 </span>Compilation of conditional statements.</h1></header><div class="caption pcalibre pcalibre1" id="P70004970270000000000000000407AE" data-uri="chapter03.xhtml#P70004970270000000000000000407AE"><p id="P70004970270000000000000000407AF" data-uri="chapter03.xhtml#P70004970270000000000000000407AF" class="pcalibre calibre3 pcalibre1">(a) C procedure <code id="P70004970270000000000000000407B0" data-uri="chapter03.xhtml#P70004970270000000000000000407B0" class="pcalibre1 calibre8 pcalibre">absdiff_se</code> contains an if-else statement. The generated assembly code is shown (c), along with (b) a C procedure <code id="P70004970270000000000000000407B1" data-uri="chapter03.xhtml#P70004970270000000000000000407B1" class="pcalibre1 calibre8 pcalibre">gotodiff_se</code> that mimics the control flow of the assembly code.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000407B2" data-uri="chapter03.xhtml#P70004970270000000000000000407B2">assembly code. Using <code id="P70004970270000000000000000407B3" data-uri="chapter03.xhtml#P70004970270000000000000000407B3" class="pcalibre1 calibre8 pcalibre">goto</code> statements is generally considered a bad programming style, since their use can make code very difficult to read and debug. We use them in our presentation as a way to construct C programs that describe the control flow of machine code. We call this style of programming "goto code."</p>
<p id="P70004970270000000000000000407B4" data-uri="chapter03.xhtml#P70004970270000000000000000407B4" class="pcalibre1 pcalibre calibre2">In the goto code (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(b)</span></a>), the statement <code id="P70004970270000000000000000407B5" data-uri="chapter03.xhtml#P70004970270000000000000000407B5" class="pcalibre1 calibre8 pcalibre">goto x_ge_y</code> on line 5 causes a jump to the label <code id="P70004970270000000000000000407B6" data-uri="chapter03.xhtml#P70004970270000000000000000407B6" class="pcalibre1 calibre8 pcalibre">x_ge_y</code> (since it occurs when <var class="calibre5 pcalibre pcalibre1">x</var> ≥ <var class="calibre5 pcalibre pcalibre1">y</var>) on line 9. Continuing the</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000002533" data-uri="chapter03.xhtml#P7000497027000000000000000002533"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P70004970270000000000000000407B7" data-uri="chapter03.xhtml#P70004970270000000000000000407B7" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002535" title="211" data-uri="chapter03.xhtml#P7000497027000000000000000002535" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Describing machine code with C code</h1></header>
<p id="P70004970270000000000000000407B8" data-uri="chapter03.xhtml#P70004970270000000000000000407B8" class="pcalibre calibre3 pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16</span></a> shows an example of how we will demonstrate the translation of C language control constructs into machine code. The figure contains an example C function (a) and an annotated version of the assembly code generated by <span class="smallcaps pcalibre pcalibre1">gcc </span>(c). It also contains a version in C that closely matches the structure of the assembly code (b). Although these versions were generated in the sequence (a), (c), and (b), we recommend that you read them in the order (a), (b), and then (c). That is, the C rendition of the machine code will help you understand the key points, and this can guide you in understanding the actual assembly code.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000407B9" data-uri="chapter03.xhtml#P70004970270000000000000000407B9">execution from this point, it completes the computations specified by the <code id="P70004970270000000000000000407BA" data-uri="chapter03.xhtml#P70004970270000000000000000407BA" class="pcalibre1 calibre8 pcalibre">else</code> portion of function <code id="P70004970270000000000000000407BB" data-uri="chapter03.xhtml#P70004970270000000000000000407BB" class="pcalibre1 calibre8 pcalibre">absdiff_se</code> and returns. On the other hand, if the test <code id="P70004970270000000000000000407BC" data-uri="chapter03.xhtml#P70004970270000000000000000407BC" class="pcalibre1 calibre8 pcalibre">x &gt;= y</code> fails, the program procedure will carry out the steps specified by the if portion of <code id="P70004970270000000000000000407BD" data-uri="chapter03.xhtml#P70004970270000000000000000407BD" class="pcalibre1 calibre8 pcalibre">absdiff_se</code> and return.</p>

<p id="P70004970270000000000000000407BE" data-uri="chapter03.xhtml#P70004970270000000000000000407BE" class="pcalibre1 pcalibre calibre2">The assembly-code implementation (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(c)</span></a>) first compares the two operands (line 2), setting the condition codes. If the comparison result indicates that <var class="calibre5 pcalibre pcalibre1">x</var> is greater than or equal to <var class="calibre5 pcalibre pcalibre1">y</var>, it then jumps to a block of code starting at line 8 that increments global variable <code id="P70004970270000000000000000407BF" data-uri="chapter03.xhtml#P70004970270000000000000000407BF" class="pcalibre1 calibre8 pcalibre">ge_cnt</code>, computes <code id="P70004970270000000000000000407C0" data-uri="chapter03.xhtml#P70004970270000000000000000407C0" class="pcalibre1 calibre8 pcalibre">x-y</code> as the return value, and returns. Otherwise, it continues with the execution of code beginning at line 4 that increments global variable <code id="P70004970270000000000000000407C1" data-uri="chapter03.xhtml#P70004970270000000000000000407C1" class="pcalibre1 calibre8 pcalibre">lt_cnt</code>, computes <code id="P70004970270000000000000000407C2" data-uri="chapter03.xhtml#P70004970270000000000000000407C2" class="pcalibre1 calibre8 pcalibre">y-x</code> as the return value, and returns. We can see, then, that the control flow of the assembly code generated for <code id="P70004970270000000000000000407C3" data-uri="chapter03.xhtml#P70004970270000000000000000407C3" class="pcalibre1 calibre8 pcalibre">absdiff_se</code> closely follows the goto code of <code id="P70004970270000000000000000407C4" data-uri="chapter03.xhtml#P70004970270000000000000000407C4" class="pcalibre1 calibre8 pcalibre">gotodiff_se.</code></p>
<p id="P70004970270000000000000000407C5" data-uri="chapter03.xhtml#P70004970270000000000000000407C5" class="pcalibre1 pcalibre calibre2">The general form of an if-else statement in C is given by the template</p>
<pre id="P70004970270000000000000000407C6" data-uri="chapter03.xhtml#P70004970270000000000000000407C6" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407C7" data-uri="chapter03.xhtml#P70004970270000000000000000407C7" class="calibre10 pcalibre pcalibre1">
if (<i class="calibre5 pcalibre pcalibre1">test-expr</i>)
  <i class="calibre5 pcalibre pcalibre1">then-statement</i>
else
  <i class="calibre5 pcalibre pcalibre1">else-statement</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000407C8" data-uri="chapter03.xhtml#P70004970270000000000000000407C8">where <i class="calibre5 pcalibre pcalibre1">test-expr</i> is an integer expression that evaluates either to zero (interpreted as meaning "false") or to a nonzero value (interpreted as meaning "true"). Only one of the two branch statements (<i class="calibre5 pcalibre pcalibre1">then-statement</i> or <i class="calibre5 pcalibre pcalibre1">else-statement</i>) is executed.</p>
<p id="P70004970270000000000000000407C9" data-uri="chapter03.xhtml#P70004970270000000000000000407C9" class="pcalibre1 pcalibre calibre2">For this general form, the assembly implementation typically adheres to the following form, where we use C syntax to describe the control flow:</p>
<pre id="P70004970270000000000000000407CA" data-uri="chapter03.xhtml#P70004970270000000000000000407CA" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407CB" data-uri="chapter03.xhtml#P70004970270000000000000000407CB" class="calibre10 pcalibre pcalibre1">
  t = <i class="calibre5 pcalibre pcalibre1">test-expr</i>;
  if (!t)
  	goto false;
  <i class="calibre5 pcalibre pcalibre1">then-statement</i>
  goto done;
false:
  <i class="calibre5 pcalibre pcalibre1">else-statement</i>
done:
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000407CC" data-uri="chapter03.xhtml#P70004970270000000000000000407CC"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000254B" title="212" data-uri="chapter03.xhtml#P700049702700000000000000000254B" epub:type="pagebreak"></span>That is, the compiler generates separate blocks of code for <i class="calibre5 pcalibre pcalibre1">then-statement</i> and <i class="calibre5 pcalibre pcalibre1">else-statement</i>. It inserts conditional and unconditional branches to make sure the correct block is executed.</p>
<section id="P700049702700000000000000000254C" data-uri="chapter03.xhtml#P700049702700000000000000000254C" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000407CD" data-uri="chapter03.xhtml#P70004970270000000000000000407CD" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.16 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P70004970270000000000000000035CB">331</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000407CE" data-uri="chapter03.xhtml#P70004970270000000000000000407CE">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000407CF" data-uri="chapter03.xhtml#P70004970270000000000000000407CF">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000407D0" data-uri="chapter03.xhtml#P70004970270000000000000000407D0"><p id="P70004970270000000000000000407D1" data-uri="chapter03.xhtml#P70004970270000000000000000407D1" class="pcalibre calibre3 pcalibre1">When given the C code</p>
<pre id="P70004970270000000000000000407D2" data-uri="chapter03.xhtml#P70004970270000000000000000407D2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407D3" data-uri="chapter03.xhtml#P70004970270000000000000000407D3" class="calibre10 pcalibre pcalibre1">void cond(long a, long *p)
{
  if (p &amp;&amp; a &gt; *p)
  	*p = a;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P70004970270000000000000000407D4" data-uri="chapter03.xhtml#P70004970270000000000000000407D4"><span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following assembly code:</p>
<pre id="P70004970270000000000000000407D5" data-uri="chapter03.xhtml#P70004970270000000000000000407D5" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407D6" data-uri="chapter03.xhtml#P70004970270000000000000000407D6" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">void cond(long a, long *p</i>)
  <i class="calibre5 pcalibre pcalibre1">a in %rdi, p in %rsi</i>
cond:
  testq %rsi, %rsi
  je .L1
  cmpq %rdi, (%rsi)
  jge .L1
  movq %rdi, (%rsi)
.L1:
  rep; ret
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000407D7" data-uri="chapter03.xhtml#P70004970270000000000000000407D7">
<li id="P70004970270000000000000000407D8" data-uri="chapter03.xhtml#P70004970270000000000000000407D8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000407D9" data-uri="chapter03.xhtml#P70004970270000000000000000407D9" class="pcalibre calibre3 pcalibre1">Write a goto version in C that performs the same computation and mimics the control flow of the assembly code, in the style shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16(b)</span></a>. You might find it helpful to first annotate the assembly code as we have done in our examples.</p></li>
<li id="P70004970270000000000000000407DA" data-uri="chapter03.xhtml#P70004970270000000000000000407DA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000407DB" data-uri="chapter03.xhtml#P70004970270000000000000000407DB" class="pcalibre calibre3 pcalibre1">Explain why the assembly code contains two conditional branches, even though the C code has only one if statement.</p></li>
</ol>
</div></li></ol>
</section>
<section id="P700049702700000000000000000255C" data-uri="chapter03.xhtml#P700049702700000000000000000255C" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000407DC" data-uri="chapter03.xhtml#P70004970270000000000000000407DC" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.17 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P70004970270000000000000000035CB">331</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000407DD" data-uri="chapter03.xhtml#P70004970270000000000000000407DD">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000407DE" data-uri="chapter03.xhtml#P70004970270000000000000000407DE">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000407DF" data-uri="chapter03.xhtml#P70004970270000000000000000407DF"><p id="P70004970270000000000000000407E0" data-uri="chapter03.xhtml#P70004970270000000000000000407E0" class="pcalibre calibre3 pcalibre1">An alternate rule for translating <code id="P70004970270000000000000000407E1" data-uri="chapter03.xhtml#P70004970270000000000000000407E1" class="pcalibre1 calibre8 pcalibre">if</code> statements into goto code is as follows:</p>
<pre id="P70004970270000000000000000407E2" data-uri="chapter03.xhtml#P70004970270000000000000000407E2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407E3" data-uri="chapter03.xhtml#P70004970270000000000000000407E3" class="calibre10 pcalibre pcalibre1">
  t = <i class="calibre5 pcalibre pcalibre1">test-expr</i>;
  if (t)
  	goto true;
  <i class="calibre5 pcalibre pcalibre1">else-statement</i>
  goto done;
true:
  <i class="calibre5 pcalibre pcalibre1">then-statement</i>
done:
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000407E4" data-uri="chapter03.xhtml#P70004970270000000000000000407E4">
<li id="P70004970270000000000000000407E5" data-uri="chapter03.xhtml#P70004970270000000000000000407E5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000407E6" data-uri="chapter03.xhtml#P70004970270000000000000000407E6" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002568" title="213" data-uri="chapter03.xhtml#P7000497027000000000000000002568" epub:type="pagebreak"></span>Rewrite the goto version of <code id="P70004970270000000000000000407E7" data-uri="chapter03.xhtml#P70004970270000000000000000407E7" class="pcalibre1 calibre8 pcalibre">absdiff_se</code> based on this alternate rule.</p></li>
<li id="P70004970270000000000000000407E8" data-uri="chapter03.xhtml#P70004970270000000000000000407E8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000407E9" data-uri="chapter03.xhtml#P70004970270000000000000000407E9" class="pcalibre calibre3 pcalibre1">Can you think of any reasons for choosing one rule over the other?</p></li>
</ol>
</div></li></ol>
</section>
<section id="P700049702700000000000000000256C" data-uri="chapter03.xhtml#P700049702700000000000000000256C" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000407EA" data-uri="chapter03.xhtml#P70004970270000000000000000407EA" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.18 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P70004970270000000000000000035F9">332</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000407EB" data-uri="chapter03.xhtml#P70004970270000000000000000407EB">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000407EC" data-uri="chapter03.xhtml#P70004970270000000000000000407EC">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000407ED" data-uri="chapter03.xhtml#P70004970270000000000000000407ED"><p id="P70004970270000000000000000407EE" data-uri="chapter03.xhtml#P70004970270000000000000000407EE" class="pcalibre calibre3 pcalibre1">Starting with C code of the form</p>
<pre id="P70004970270000000000000000407EF" data-uri="chapter03.xhtml#P70004970270000000000000000407EF" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407F0" data-uri="chapter03.xhtml#P70004970270000000000000000407F0" class="calibre10 pcalibre pcalibre1">
long test(long x, long y, long z) {
  long val = __________;
  if (__________) {
  	if (__________)
  		val = __________;
  	else
  		val = __________;
  } else if (__________)
  	val = __________;
  return val;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P70004970270000000000000000407F1" data-uri="chapter03.xhtml#P70004970270000000000000000407F1"><span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following assembly code:</p>
<pre id="P70004970270000000000000000407F2" data-uri="chapter03.xhtml#P70004970270000000000000000407F2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407F3" data-uri="chapter03.xhtml#P70004970270000000000000000407F3" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long test(long x, long y, long z</i>)
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi, z in %rdx</i>
  test:
  leaq	(%rdi,%rsi), %rax
  addq	%rdx, %rax
  cmpq	$-3, %rdi
  jge	.L2
  cmpq	%rdx, %rsi
  jge	.L3
  movq	%rdi, %rax
  imulq	%rsi, %rax
  ret
  .L3:
  movq	%rsi, %rax
  imulq	%rdx, %rax
  ret
  .L2:
  cmpq	$2, %rdi
  jle	.L4
  movq	%rdi, %rax
  imulq	%rdx, %rax
  .L4:
  rep; ret
</code></pre>
<p id="P70004970270000000000000000407F4" data-uri="chapter03.xhtml#P70004970270000000000000000407F4" class="pcalibre calibre3 pcalibre1">Fill in the missing expressions in the C code.</p>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002578" data-uri="chapter03.xhtml#P7000497027000000000000000002578" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000407F5" data-uri="chapter03.xhtml#P70004970270000000000000000407F5" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000257A" title="214" data-uri="chapter03.xhtml#P700049702700000000000000000257A" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">3.6.6 </span>Implementing Conditional Branches with Conditional Moves</h1></header>
<p id="P70004970270000000000000000407F6" data-uri="chapter03.xhtml#P70004970270000000000000000407F6" class="pcalibre1 pcalibre calibre2">The conventional way to implement conditional operations is through a conditional transfer of <i class="calibre5 pcalibre pcalibre1">control</i>, where the program follows one execution path when a condition holds and another when it does not. This mechanism is simple and general, but it can be very inefficient on modern processors.</p>
<p id="P70004970270000000000000000407F7" data-uri="chapter03.xhtml#P70004970270000000000000000407F7" class="pcalibre1 pcalibre calibre2">An alternate strategy is through a conditional transfer of <i class="calibre5 pcalibre pcalibre1">data</i>. This approach computes both outcomes of a conditional operation and then selects one based on whether or not the condition holds. This strategy makes sense only in restricted cases, but it can then be implemented by a simple <i class="calibre5 pcalibre pcalibre1">conditional move</i> instruction that is better matched to the performance characteristics of modern processors. Here, we examine this strategy and its implementation with x86-64.</p>
<p id="P70004970270000000000000000407F8" data-uri="chapter03.xhtml#P70004970270000000000000000407F8" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002580"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.17(a)</span></a> shows an example of code that can be compiled using a conditional move. The function computes the absolute value of its arguments x and y, as did our earlier example (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16</span></a>).Whereas the earlier example had side effects in the branches, modifying the value of either <code id="P70004970270000000000000000407F9" data-uri="chapter03.xhtml#P70004970270000000000000000407F9" class="pcalibre1 calibre8 pcalibre">lt_cnt</code> or <code id="P70004970270000000000000000407FA" data-uri="chapter03.xhtml#P70004970270000000000000000407FA" class="pcalibre1 calibre8 pcalibre">ge_cnt</code>, this version simply computes the value to be returned by the function.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002580" data-uri="chapter03.xhtml#P7000497027000000000000000002580">
<p id="P70004970270000000000000000407FB" data-uri="chapter03.xhtml#P70004970270000000000000000407FB" class="pcalibre1 pcalibre calibre2">(a) Original C code</p>
<pre id="P70004970270000000000000000407FC" data-uri="chapter03.xhtml#P70004970270000000000000000407FC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000407FD" data-uri="chapter03.xhtml#P70004970270000000000000000407FD" class="calibre10 pcalibre pcalibre1">
long absdiff(long x, long y)
{
  long result;
  if (x &lt; y)
  	result = y - x;
  else
  	result = x - y;
  return result;
}
</code></pre>
<p id="P70004970270000000000000000407FE" data-uri="chapter03.xhtml#P70004970270000000000000000407FE" class="pcalibre1 pcalibre calibre2">(b) Implementation using conditional assignment</p>
<pre id="P70004970270000000000000000407FF" data-uri="chapter03.xhtml#P70004970270000000000000000407FF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040800" data-uri="chapter03.xhtml#P7000497027000000000000000040800" class="calibre10 pcalibre pcalibre1">
1	long cmovdiff(long x, long y)
2	{
3		long rval = y-x;
4		long eval = x-y;
5		long ntest = x &gt;= y;
6		/* Line below requires
7			single instruction: */
8		if (ntest) rval = eval;
9		return rval;
10	}
</code></pre>
<p id="P7000497027000000000000000040801" data-uri="chapter03.xhtml#P7000497027000000000000000040801" class="pcalibre1 pcalibre calibre2">(c) Generated assembly code</p>
<pre id="P7000497027000000000000000040802" data-uri="chapter03.xhtml#P7000497027000000000000000040802" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040803" data-uri="chapter03.xhtml#P7000497027000000000000000040803" class="calibre10 pcalibre pcalibre1">
  <i class="calibre5 pcalibre pcalibre1">long absdiff(long x, long y</i>)
  <i class="calibre5 pcalibre pcalibre1">x in %rdi, y in %rsi</i>
1	absdiff:
2		movq	%rsi, %rax
3		subq	%rdi, %rax	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">rval = y-x</i></b>
4		movq	%rdi, %rdx
5		subq	%rsi, %rdx	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">eval = x-y</i></b>
6		cmpq	%rsi, %rdi	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Compare x:y</i></b>
7		cmovge	%rdx, %rax	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">If &gt;=, rval = eval</i></b>
8		ret			<i class="calibre5 pcalibre pcalibre1">Return tval</i>
</code></pre>
<figcaption id="P7000497027000000000000000040804" data-uri="chapter03.xhtml#P7000497027000000000000000040804" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040805" data-uri="chapter03.xhtml#P7000497027000000000000000040805" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.17 </span>Compilation of conditional statements using conditional assignment.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040806" data-uri="chapter03.xhtml#P7000497027000000000000000040806"><p id="P7000497027000000000000000040807" data-uri="chapter03.xhtml#P7000497027000000000000000040807" class="pcalibre calibre3 pcalibre1">(a) C function <code id="P7000497027000000000000000040808" data-uri="chapter03.xhtml#P7000497027000000000000000040808" class="pcalibre1 calibre8 pcalibre">absdiff</code> contains a conditional expression. The generated assembly code is shown (c), along with (b) a C function <code id="P7000497027000000000000000040809" data-uri="chapter03.xhtml#P7000497027000000000000000040809" class="pcalibre1 calibre8 pcalibre">cmovdiff</code> that mimics the operation of the assembly code.</p></div></figcaption>
</figure>
<p id="P700049702700000000000000004080A" data-uri="chapter03.xhtml#P700049702700000000000000004080A" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002591" title="215" data-uri="chapter03.xhtml#P7000497027000000000000000002591" epub:type="pagebreak"></span>For this function, <code id="P700049702700000000000000004080B" data-uri="chapter03.xhtml#P700049702700000000000000004080B" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">gcc</span></code> generates the assembly code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002580"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.17(c)</span></a>, having an approximate form shown by the C function <code id="P700049702700000000000000004080C" data-uri="chapter03.xhtml#P700049702700000000000000004080C" class="pcalibre1 calibre8 pcalibre">cmovdiff</code> shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002580"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.17(b)</span></a>. Studying the C version, we can see that it computes both <code id="P700049702700000000000000004080D" data-uri="chapter03.xhtml#P700049702700000000000000004080D" class="pcalibre1 calibre8 pcalibre">y-x</code> and <code id="P700049702700000000000000004080E" data-uri="chapter03.xhtml#P700049702700000000000000004080E" class="pcalibre1 calibre8 pcalibre">x-y</code>, naming these <code id="P700049702700000000000000004080F" data-uri="chapter03.xhtml#P700049702700000000000000004080F" class="pcalibre1 calibre8 pcalibre">rval</code> and <code id="P7000497027000000000000000040810" data-uri="chapter03.xhtml#P7000497027000000000000000040810" class="pcalibre1 calibre8 pcalibre">eval</code>, respectively. It then tests whether <var class="calibre5 pcalibre pcalibre1">x</var> is greater than or equal to <var class="calibre5 pcalibre pcalibre1">y</var>, and if so, copies <code id="P7000497027000000000000000040811" data-uri="chapter03.xhtml#P7000497027000000000000000040811" class="pcalibre1 calibre8 pcalibre">eval</code> to <code id="P7000497027000000000000000040812" data-uri="chapter03.xhtml#P7000497027000000000000000040812" class="pcalibre1 calibre8 pcalibre">rval</code> before returning <code id="P7000497027000000000000000040813" data-uri="chapter03.xhtml#P7000497027000000000000000040813" class="pcalibre1 calibre8 pcalibre">rval</code>. The assembly code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002580"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.17(c)</span></a> follows the same logic. The key is that the single <code id="P7000497027000000000000000040814" data-uri="chapter03.xhtml#P7000497027000000000000000040814" class="pcalibre1 calibre8 pcalibre">cmovge</code> instruction (line 7) of the assembly code implements the conditional assignment (line 8) of <code id="P7000497027000000000000000040815" data-uri="chapter03.xhtml#P7000497027000000000000000040815" class="pcalibre1 calibre8 pcalibre">cmovdiff</code>. It will transfer the data from the source register to the destination, only if the <code id="P7000497027000000000000000040816" data-uri="chapter03.xhtml#P7000497027000000000000000040816" class="pcalibre1 calibre8 pcalibre">cmpq</code> instruction of line 6 indicates that one value is greater than or equal to the other (as indicated by the suffix <code id="P7000497027000000000000000040817" data-uri="chapter03.xhtml#P7000497027000000000000000040817" class="pcalibre1 calibre8 pcalibre">ge</code>).</p>
<p id="P7000497027000000000000000040818" data-uri="chapter03.xhtml#P7000497027000000000000000040818" class="pcalibre1 pcalibre calibre2">To understand why code based on conditional data transfers can outperform code based on conditional control transfers (as in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16</span></a>), we must understand something about how modern processors operate. As we will see in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapters </span><span class="pcalibre label pcalibre1">4</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">5</span></a>, processors achieve high performance through <i class="calibre5 pcalibre pcalibre1">pipelining</i>, where an instruction is processed via a sequence of stages, each performing one small portion of the required operations (e.g., fetching the instruction from memory, determining the instruction type, reading from memory, performing an arithmetic operation, writing to memory, and updating the program counter). This approach achieves high performance by overlapping the steps of the successive instructions, such as fetching one instruction while performing the arithmetic operations for a previous instruction. To do this requires being able to determine the sequence of instructions to be executed well ahead of time in order to keep the pipeline full of instructions to be executed. When the machine encounters a conditional jump (referred to as a "branch"), it cannot determine which way the branch will go until it has evaluated the branch condition. Processors employ sophisticated <i class="calibre5 pcalibre pcalibre1">branch prediction logic</i> to try to guess whether or not each jump instruction will be followed. As long as it can guess reliably (modern microprocessor designs try to achieve success rates on the order of 90%), the instruction pipeline will be kept full of instructions. Mispredicting a jump, on the other hand, requires that the processor discard much of the work it has already done on future instructions and then begin filling the pipeline with instructions starting at the correct location. As we will see, such a misprediction can incur a serious penalty, say, 15–30 clock cycles of wasted effort, causing a serious degradation of program performance.</p>
<p id="P7000497027000000000000000040819" data-uri="chapter03.xhtml#P7000497027000000000000000040819" class="pcalibre1 pcalibre calibre2">As an example, we ran timings of the <code id="P700049702700000000000000004081A" data-uri="chapter03.xhtml#P700049702700000000000000004081A" class="pcalibre1 calibre8 pcalibre">absdiff</code> function on an Intel Haswell processor using both methods of implementing the conditional operation. In a typical application, the outcome of the test <code id="P700049702700000000000000004081B" data-uri="chapter03.xhtml#P700049702700000000000000004081B" class="pcalibre1 calibre8 pcalibre">x &lt; y</code> is highly unpredictable, and so even the most sophisticated branch prediction hardware will guess correctly only around 50% of the time. In addition, the computations performed in each of the two code sequences require only a single clock cycle. As a consequence, the branch misprediction penalty dominates the performance of this function. For x86-64 code with conditional jumps, we found that the function requires around 8 clock cycles per call when the branching pattern is easily predictable, and around 17.50 clock cycles per call when the branching pattern is random. From this, we can infer that the branch misprediction penalty is around 19 clock cycles. That means time required by the function ranges between around 8 and 27 cycles, depending on whether or not the branch is predicted correctly.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000025A3" data-uri="chapter03.xhtml#P70004970270000000000000000025A3"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000004081C" data-uri="chapter03.xhtml#P700049702700000000000000004081C" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000025A5" title="216" data-uri="chapter03.xhtml#P70004970270000000000000000025A5" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>How did you determine this penalty?</h1></header>
<p id="P700049702700000000000000004081D" data-uri="chapter03.xhtml#P700049702700000000000000004081D" class="pcalibre calibre3 pcalibre1">Assume the probability of misprediction is <var class="calibre5 pcalibre pcalibre1">p</var>, the time to execute the code without misprediction is <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">OK</sub>, and the misprediction penalty is <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="436" altimg-height="25" altimg="../images/ch03-neweq1.png"><m:mrow><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>avg</m:mtext></m:mrow></m:msub><m:mo stretchy="false">(</m:mo><m:mi>P</m:mi><m:mo stretchy="false">)</m:mo><m:mo>=</m:mo><m:mo stretchy="false">(</m:mo><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>P</m:mi><m:mo stretchy="false">)</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>OK</m:mtext></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>MP</m:mtext></m:mrow></m:msub><m:mo stretchy="false">)</m:mo><m:mo>=</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>OK</m:mtext></m:mrow></m:msub><m:mo>+</m:mo><m:mi>P</m:mi><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>MP</m:mtext></m:mrow></m:msub></m:mrow></m:math></span>. We are given <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">OK</sub> and <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">ran</sub>, the average time when <var class="calibre5 pcalibre pcalibre1">p</var> = 0.5, and we want to determine <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">MP</sub>. Substituting into the equation, we get <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="262" altimg-height="23" altimg="../images/ch03-neweq2.png"><m:mrow><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>ran</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>avg</m:mtext></m:mrow></m:msub><m:mo stretchy="false">(</m:mo><m:mn>0.5</m:mn><m:mo stretchy="false">)</m:mo><m:mo>=</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>OK</m:mtext></m:mrow></m:msub><m:mo>+</m:mo><m:mn>0.5</m:mn><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>MP</m:mtext></m:mrow></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:mtext>and</m:mtext><m:mtext> </m:mtext><m:mtext>therefore</m:mtext><m:mtext> </m:mtext><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>MP</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:mn>2</m:mn><m:mo stretchy="false">(</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>ran</m:mtext></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>OK</m:mtext></m:mrow></m:msub><m:mo stretchy="false">)</m:mo><m:mo>.</m:mo><m:mtext> </m:mtext><m:mi>S</m:mi><m:mi>o</m:mi><m:mo>,</m:mo><m:mtext> </m:mtext><m:mi>f</m:mi><m:mi>o</m:mi><m:mi>r</m:mi><m:mtext> </m:mtext><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>OK</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:mn>8</m:mn><m:mtext> </m:mtext><m:mtext>and</m:mtext><m:mtext> </m:mtext><m:msub><m:mtext>T</m:mtext><m:mrow><m:mtext>ran</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:mn>17.5</m:mn><m:mo>,</m:mo><m:mtext> </m:mtext><m:mtext>we</m:mtext><m:mtext> </m:mtext><m:mtext>get</m:mtext><m:mtext> </m:mtext><m:msub><m:mtext>T</m:mtext><m:mrow><m:mtext>MP</m:mtext></m:mrow></m:msub><m:mo>=</m:mo><m:mn>19</m:mn></m:mrow></m:math></span>.</p>
</aside>
<p id="P700049702700000000000000004081E" data-uri="chapter03.xhtml#P700049702700000000000000004081E" class="pcalibre1 pcalibre calibre2">On the other hand, the code compiled using conditional moves requires around 8 clock cycles regardless of the data being tested. The flow of control does not depend on data, and this makes it easier for the processor to keep its pipeline full.</p>
<section id="P70004970270000000000000000025A8" data-uri="chapter03.xhtml#P70004970270000000000000000025A8" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004081F" data-uri="chapter03.xhtml#P700049702700000000000000004081F" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.19 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_000.xhtml#P70004970270000000000000000035F9">332</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040820" data-uri="chapter03.xhtml#P7000497027000000000000000040820">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040821" data-uri="chapter03.xhtml#P7000497027000000000000000040821">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040822" data-uri="chapter03.xhtml#P7000497027000000000000000040822"><p id="P7000497027000000000000000040823" data-uri="chapter03.xhtml#P7000497027000000000000000040823" class="pcalibre calibre3 pcalibre1">Running on an older processor model, our code required around 16 cycles when the branching pattern was highly predictable, and around 31 cycles when the pattern was random.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000040824" data-uri="chapter03.xhtml#P7000497027000000000000000040824">
<li id="P7000497027000000000000000040825" data-uri="chapter03.xhtml#P7000497027000000000000000040825" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040826" data-uri="chapter03.xhtml#P7000497027000000000000000040826" class="pcalibre calibre3 pcalibre1">What is the approximate miss penalty?</p></li>
<li id="P7000497027000000000000000040827" data-uri="chapter03.xhtml#P7000497027000000000000000040827" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000040828" data-uri="chapter03.xhtml#P7000497027000000000000000040828" class="pcalibre calibre3 pcalibre1">How many cycles would the function require when the branch is mispredicted?</p></li>
</ol>
</div></li></ol>
</section>
<p id="P7000497027000000000000000040829" data-uri="chapter03.xhtml#P7000497027000000000000000040829" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P70004970270000000000000000025B9"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.18</span></a> illustrates some of the conditional move instructions available with x86-64. Each of these instructions has two operands: a source register or memory location <var class="calibre5 pcalibre pcalibre1">S</var>, and a destination register <var class="calibre5 pcalibre pcalibre1">R</var>. As with the different set (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002382"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.2</span></a>) and jump (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000244A"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.3</span></a>) instructions, the outcome of these instructions depends on the values of the condition codes. The source value is read from either memory or the source register, but it is copied to the destination only if the specified condition holds.</p>
<p id="P700049702700000000000000004082A" data-uri="chapter03.xhtml#P700049702700000000000000004082A" class="pcalibre1 pcalibre calibre2">The source and destination values can be 16, 32, or 64 bits long. Single-byte conditional moves are not supported. Unlike the unconditional instructions, where the operand length is explicitly encoded in the instruction name (e.g., <code id="P700049702700000000000000004082B" data-uri="chapter03.xhtml#P700049702700000000000000004082B" class="pcalibre1 calibre8 pcalibre">movw</code> and <code id="P700049702700000000000000004082C" data-uri="chapter03.xhtml#P700049702700000000000000004082C" class="pcalibre1 calibre8 pcalibre">movl</code>), the assembler can infer the operand length of a conditional move instruction from the name of the destination register, and so the same instruction name can be used for all operand lengths.</p>
<p id="P700049702700000000000000004082D" data-uri="chapter03.xhtml#P700049702700000000000000004082D" class="pcalibre1 pcalibre calibre2">Unlike conditional jumps, the processor can execute conditional move instructions without having to predict the outcome of the test. The processor simply reads the source value (possibly from memory), checks the condition code, and then either updates the destination register or keeps it the same. We will explore the implementation of conditional moves in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a>.</p>
<p id="P700049702700000000000000004082E" data-uri="chapter03.xhtml#P700049702700000000000000004082E" class="pcalibre1 pcalibre calibre2">To understand how conditional operations can be implemented via conditional data transfers, consider the following general form of conditional expression and assignment:</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000025B9" data-uri="chapter03.xhtml#P70004970270000000000000000025B9">
<table class="pcalibre largetable pcalibre1" id="P700049702700000000000000004082F" data-uri="chapter03.xhtml#P700049702700000000000000004082F">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="2" id="P7000497027000000000000000040830" data-uri="chapter03.xhtml#P7000497027000000000000000040830" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P70004970270000000000000000025BC" title="217" data-uri="chapter03.xhtml#P70004970270000000000000000025BC" epub:type="pagebreak"></span>Instruction</th>
<th id="P7000497027000000000000000040831" data-uri="chapter03.xhtml#P7000497027000000000000000040831" class="calibre18 pcalibre pcalibre1">Synonym</th>
<th id="P7000497027000000000000000040832" data-uri="chapter03.xhtml#P7000497027000000000000000040832" class="calibre18 pcalibre pcalibre1">Move condition</th>
<th id="P7000497027000000000000000040833" data-uri="chapter03.xhtml#P7000497027000000000000000040833" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040834" data-uri="chapter03.xhtml#P7000497027000000000000000040834" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040835" data-uri="chapter03.xhtml#P7000497027000000000000000040835" class="calibre10 pcalibre pcalibre1">cmove</code></td>
<td id="P7000497027000000000000000040836" data-uri="chapter03.xhtml#P7000497027000000000000000040836" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P7000497027000000000000000040837" data-uri="chapter03.xhtml#P7000497027000000000000000040837" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040838" data-uri="chapter03.xhtml#P7000497027000000000000000040838" class="calibre10 pcalibre pcalibre1">cmovz</code></td>
<td id="P7000497027000000000000000040839" data-uri="chapter03.xhtml#P7000497027000000000000000040839" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004083A" data-uri="chapter03.xhtml#P700049702700000000000000004083A" class="calibre10 pcalibre pcalibre1">ZF</code></td>
<td id="P700049702700000000000000004083B" data-uri="chapter03.xhtml#P700049702700000000000000004083B" class="calibre20 pcalibre pcalibre1">Equal / zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004083C" data-uri="chapter03.xhtml#P700049702700000000000000004083C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004083D" data-uri="chapter03.xhtml#P700049702700000000000000004083D" class="calibre10 pcalibre pcalibre1">cmovne</code></td>
<td id="P700049702700000000000000004083E" data-uri="chapter03.xhtml#P700049702700000000000000004083E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P700049702700000000000000004083F" data-uri="chapter03.xhtml#P700049702700000000000000004083F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040840" data-uri="chapter03.xhtml#P7000497027000000000000000040840" class="calibre10 pcalibre pcalibre1">cmovnz</code></td>
<td id="P7000497027000000000000000040841" data-uri="chapter03.xhtml#P7000497027000000000000000040841" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040842" data-uri="chapter03.xhtml#P7000497027000000000000000040842" class="calibre10 pcalibre pcalibre1">~ZF</code></td>
<td id="P7000497027000000000000000040843" data-uri="chapter03.xhtml#P7000497027000000000000000040843" class="calibre20 pcalibre pcalibre1">Not equal / not zero</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040844" data-uri="chapter03.xhtml#P7000497027000000000000000040844" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040845" data-uri="chapter03.xhtml#P7000497027000000000000000040845" class="calibre10 pcalibre pcalibre1">cmovs</code></td>
<td id="P7000497027000000000000000040846" data-uri="chapter03.xhtml#P7000497027000000000000000040846" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040847" data-uri="chapter03.xhtml#P7000497027000000000000000040847" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040848" data-uri="chapter03.xhtml#P7000497027000000000000000040848" class="calibre10 pcalibre pcalibre1">SF</code></td>
<td id="P7000497027000000000000000040849" data-uri="chapter03.xhtml#P7000497027000000000000000040849" class="calibre20 pcalibre pcalibre1">Negative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004084A" data-uri="chapter03.xhtml#P700049702700000000000000004084A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004084B" data-uri="chapter03.xhtml#P700049702700000000000000004084B" class="calibre10 pcalibre pcalibre1">cmovns</code></td>
<td id="P700049702700000000000000004084C" data-uri="chapter03.xhtml#P700049702700000000000000004084C" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004084D" data-uri="chapter03.xhtml#P700049702700000000000000004084D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004084E" data-uri="chapter03.xhtml#P700049702700000000000000004084E" class="calibre10 pcalibre pcalibre1">~SF</code></td>
<td id="P700049702700000000000000004084F" data-uri="chapter03.xhtml#P700049702700000000000000004084F" class="calibre20 pcalibre pcalibre1">Nonnegative</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040850" data-uri="chapter03.xhtml#P7000497027000000000000000040850" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040851" data-uri="chapter03.xhtml#P7000497027000000000000000040851" class="calibre10 pcalibre pcalibre1">cmovg</code></td>
<td id="P7000497027000000000000000040852" data-uri="chapter03.xhtml#P7000497027000000000000000040852" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P7000497027000000000000000040853" data-uri="chapter03.xhtml#P7000497027000000000000000040853" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040854" data-uri="chapter03.xhtml#P7000497027000000000000000040854" class="calibre10 pcalibre pcalibre1">cmovnle</code></td>
<td id="P7000497027000000000000000040855" data-uri="chapter03.xhtml#P7000497027000000000000000040855" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040856" data-uri="chapter03.xhtml#P7000497027000000000000000040856" class="calibre10 pcalibre pcalibre1">~(SF ^ OF) &amp; ~ZF</code></td>
<td id="P7000497027000000000000000040857" data-uri="chapter03.xhtml#P7000497027000000000000000040857" class="calibre20 pcalibre pcalibre1">Greater (signed &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040858" data-uri="chapter03.xhtml#P7000497027000000000000000040858" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040859" data-uri="chapter03.xhtml#P7000497027000000000000000040859" class="calibre10 pcalibre pcalibre1">cmovge</code></td>
<td id="P700049702700000000000000004085A" data-uri="chapter03.xhtml#P700049702700000000000000004085A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P700049702700000000000000004085B" data-uri="chapter03.xhtml#P700049702700000000000000004085B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004085C" data-uri="chapter03.xhtml#P700049702700000000000000004085C" class="calibre10 pcalibre pcalibre1">cmovnl</code></td>
<td id="P700049702700000000000000004085D" data-uri="chapter03.xhtml#P700049702700000000000000004085D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004085E" data-uri="chapter03.xhtml#P700049702700000000000000004085E" class="calibre10 pcalibre pcalibre1">~(SF ^ OF)</code></td>
<td id="P700049702700000000000000004085F" data-uri="chapter03.xhtml#P700049702700000000000000004085F" class="calibre20 pcalibre pcalibre1">Greater or equal (signed &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040860" data-uri="chapter03.xhtml#P7000497027000000000000000040860" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040861" data-uri="chapter03.xhtml#P7000497027000000000000000040861" class="calibre10 pcalibre pcalibre1">cmovl</code></td>
<td id="P7000497027000000000000000040862" data-uri="chapter03.xhtml#P7000497027000000000000000040862" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P7000497027000000000000000040863" data-uri="chapter03.xhtml#P7000497027000000000000000040863" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040864" data-uri="chapter03.xhtml#P7000497027000000000000000040864" class="calibre10 pcalibre pcalibre1">cmovnge</code></td>
<td id="P7000497027000000000000000040865" data-uri="chapter03.xhtml#P7000497027000000000000000040865" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040866" data-uri="chapter03.xhtml#P7000497027000000000000000040866" class="calibre10 pcalibre pcalibre1">SF ^ OF</code></td>
<td id="P7000497027000000000000000040867" data-uri="chapter03.xhtml#P7000497027000000000000000040867" class="calibre20 pcalibre pcalibre1">Less (signed &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040868" data-uri="chapter03.xhtml#P7000497027000000000000000040868" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040869" data-uri="chapter03.xhtml#P7000497027000000000000000040869" class="calibre10 pcalibre pcalibre1">cmovle</code></td>
<td id="P700049702700000000000000004086A" data-uri="chapter03.xhtml#P700049702700000000000000004086A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P700049702700000000000000004086B" data-uri="chapter03.xhtml#P700049702700000000000000004086B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004086C" data-uri="chapter03.xhtml#P700049702700000000000000004086C" class="calibre10 pcalibre pcalibre1">cmovng</code></td>
<td id="P700049702700000000000000004086D" data-uri="chapter03.xhtml#P700049702700000000000000004086D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004086E" data-uri="chapter03.xhtml#P700049702700000000000000004086E" class="calibre10 pcalibre pcalibre1">(SF ^ OF) | ZF</code></td>
<td id="P700049702700000000000000004086F" data-uri="chapter03.xhtml#P700049702700000000000000004086F" class="calibre20 pcalibre pcalibre1">Less or equal (signed &lt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040870" data-uri="chapter03.xhtml#P7000497027000000000000000040870" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040871" data-uri="chapter03.xhtml#P7000497027000000000000000040871" class="calibre10 pcalibre pcalibre1">cmova</code></td>
<td id="P7000497027000000000000000040872" data-uri="chapter03.xhtml#P7000497027000000000000000040872" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P7000497027000000000000000040873" data-uri="chapter03.xhtml#P7000497027000000000000000040873" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040874" data-uri="chapter03.xhtml#P7000497027000000000000000040874" class="calibre10 pcalibre pcalibre1">cmovnbe</code></td>
<td id="P7000497027000000000000000040875" data-uri="chapter03.xhtml#P7000497027000000000000000040875" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040876" data-uri="chapter03.xhtml#P7000497027000000000000000040876" class="calibre10 pcalibre pcalibre1">~CF &amp; ~ZF</code></td>
<td id="P7000497027000000000000000040877" data-uri="chapter03.xhtml#P7000497027000000000000000040877" class="calibre20 pcalibre pcalibre1">Above (unsigned &gt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040878" data-uri="chapter03.xhtml#P7000497027000000000000000040878" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040879" data-uri="chapter03.xhtml#P7000497027000000000000000040879" class="calibre10 pcalibre pcalibre1">cmovae</code></td>
<td id="P700049702700000000000000004087A" data-uri="chapter03.xhtml#P700049702700000000000000004087A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P700049702700000000000000004087B" data-uri="chapter03.xhtml#P700049702700000000000000004087B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004087C" data-uri="chapter03.xhtml#P700049702700000000000000004087C" class="calibre10 pcalibre pcalibre1">cmovnb</code></td>
<td id="P700049702700000000000000004087D" data-uri="chapter03.xhtml#P700049702700000000000000004087D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004087E" data-uri="chapter03.xhtml#P700049702700000000000000004087E" class="calibre10 pcalibre pcalibre1">~CF</code></td>
<td id="P700049702700000000000000004087F" data-uri="chapter03.xhtml#P700049702700000000000000004087F" class="calibre20 pcalibre pcalibre1">Above or equal (Unsigned &gt;=)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040880" data-uri="chapter03.xhtml#P7000497027000000000000000040880" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040881" data-uri="chapter03.xhtml#P7000497027000000000000000040881" class="calibre10 pcalibre pcalibre1">cmovb</code></td>
<td id="P7000497027000000000000000040882" data-uri="chapter03.xhtml#P7000497027000000000000000040882" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P7000497027000000000000000040883" data-uri="chapter03.xhtml#P7000497027000000000000000040883" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040884" data-uri="chapter03.xhtml#P7000497027000000000000000040884" class="calibre10 pcalibre pcalibre1">cmovnae</code></td>
<td id="P7000497027000000000000000040885" data-uri="chapter03.xhtml#P7000497027000000000000000040885" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040886" data-uri="chapter03.xhtml#P7000497027000000000000000040886" class="calibre10 pcalibre pcalibre1">CF</code></td>
<td id="P7000497027000000000000000040887" data-uri="chapter03.xhtml#P7000497027000000000000000040887" class="calibre20 pcalibre pcalibre1">Below (unsigned &lt;)</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040888" data-uri="chapter03.xhtml#P7000497027000000000000000040888" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040889" data-uri="chapter03.xhtml#P7000497027000000000000000040889" class="calibre10 pcalibre pcalibre1">cmovbe</code></td>
<td id="P700049702700000000000000004088A" data-uri="chapter03.xhtml#P700049702700000000000000004088A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var>, <var class="calibre5 pcalibre pcalibre1">R</var></td>
<td id="P700049702700000000000000004088B" data-uri="chapter03.xhtml#P700049702700000000000000004088B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004088C" data-uri="chapter03.xhtml#P700049702700000000000000004088C" class="calibre10 pcalibre pcalibre1">cmovna</code></td>
<td id="P700049702700000000000000004088D" data-uri="chapter03.xhtml#P700049702700000000000000004088D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004088E" data-uri="chapter03.xhtml#P700049702700000000000000004088E" class="calibre10 pcalibre pcalibre1">CF | ZF</code></td>
<td id="P700049702700000000000000004088F" data-uri="chapter03.xhtml#P700049702700000000000000004088F" class="calibre20 pcalibre pcalibre1">Below or equal (unsigned &lt;=)</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000040890" data-uri="chapter03.xhtml#P7000497027000000000000000040890" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040891" data-uri="chapter03.xhtml#P7000497027000000000000000040891" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.18 </span>The conditional move instructions.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040892" data-uri="chapter03.xhtml#P7000497027000000000000000040892"><p id="P7000497027000000000000000040893" data-uri="chapter03.xhtml#P7000497027000000000000000040893" class="pcalibre calibre3 pcalibre1">These instructions copy the source value <var class="calibre5 pcalibre pcalibre1">S</var> to its destination <var class="calibre5 pcalibre pcalibre1">R</var> when the move condition holds. Some instructions have "synonyms," alternate names for the same machine instruction.</p></div></figcaption>
</figure>
<pre id="P7000497027000000000000000040894" data-uri="chapter03.xhtml#P7000497027000000000000000040894" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040895" data-uri="chapter03.xhtml#P7000497027000000000000000040895" class="calibre10 pcalibre pcalibre1">
v = <i class="calibre5 pcalibre pcalibre1">test-expr</i> ? <i class="calibre5 pcalibre pcalibre1">then-expr</i> : <i class="calibre5 pcalibre pcalibre1">else-expr</i>;
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040896" data-uri="chapter03.xhtml#P7000497027000000000000000040896">The standard way to compile this expression using conditional control transfer would have the following form:</p>
<pre id="P7000497027000000000000000040897" data-uri="chapter03.xhtml#P7000497027000000000000000040897" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040898" data-uri="chapter03.xhtml#P7000497027000000000000000040898" class="calibre10 pcalibre pcalibre1">
  if (!<i class="calibre5 pcalibre pcalibre1">test-expr</i>)
  	goto false;
  v = <i class="calibre5 pcalibre pcalibre1">then-expr</i>;
  goto done;
false:
  v = <i class="calibre5 pcalibre pcalibre1">else-expr</i>;
done:
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040899" data-uri="chapter03.xhtml#P7000497027000000000000000040899">This code contains two code sequences—one evaluating <i class="calibre5 pcalibre pcalibre1">then-expr</i> and one evaluating <i class="calibre5 pcalibre pcalibre1">else-expr</i>. A combination of conditional and unconditional jumps is used to ensure that just one of the sequences is evaluated.</p>
<p id="P700049702700000000000000004089A" data-uri="chapter03.xhtml#P700049702700000000000000004089A" class="pcalibre1 pcalibre calibre2">For the code based on a conditional move, both the <i class="calibre5 pcalibre pcalibre1">then-expr</i> and the <i class="calibre5 pcalibre pcalibre1">else-expr</i> are evaluated, with the final value chosen based on the evaluation <i class="calibre5 pcalibre pcalibre1">test-expr</i>. This can be described by the following abstract code:</p>
<pre id="P700049702700000000000000004089B" data-uri="chapter03.xhtml#P700049702700000000000000004089B" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004089C" data-uri="chapter03.xhtml#P700049702700000000000000004089C" class="calibre10 pcalibre pcalibre1">
v = <i class="calibre5 pcalibre pcalibre1">then-expr</i>;
ve = <i class="calibre5 pcalibre pcalibre1">else-expr</i>;
t = <i class="calibre5 pcalibre pcalibre1">test-expr</i>;
if (!t) v = ve;
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004089D" data-uri="chapter03.xhtml#P700049702700000000000000004089D">The final statement in this sequence is implemented with a conditional move—value <code id="P700049702700000000000000004089E" data-uri="chapter03.xhtml#P700049702700000000000000004089E" class="pcalibre1 calibre8 pcalibre">ve</code> is copied to <code id="P700049702700000000000000004089F" data-uri="chapter03.xhtml#P700049702700000000000000004089F" class="pcalibre1 calibre8 pcalibre">v</code> only if test condition <code id="P70004970270000000000000000408A0" data-uri="chapter03.xhtml#P70004970270000000000000000408A0" class="pcalibre1 calibre8 pcalibre">t</code> does not hold.</p>
<p id="P70004970270000000000000000408A1" data-uri="chapter03.xhtml#P70004970270000000000000000408A1" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000262E" title="218" data-uri="chapter03.xhtml#P700049702700000000000000000262E" epub:type="pagebreak"></span>Not all conditional expressions can be compiled using conditional moves. Most significantly, the abstract code we have shown evaluates both <i class="calibre5 pcalibre pcalibre1">then-expr</i> and <i class="calibre5 pcalibre pcalibre1">else-expr</i> regardless of the test outcome. If one of those two expressions could possibly generate an error condition or a side effect, this could lead to invalid behavior. Such is the case for our earlier example (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000251D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.16</span></a>). Indeed, we put the side effects into this example specifically to force <code id="P70004970270000000000000000408A2" data-uri="chapter03.xhtml#P70004970270000000000000000408A2" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">gcc</span></code> to implement this function using conditional transfers.</p>
<p id="P70004970270000000000000000408A3" data-uri="chapter03.xhtml#P70004970270000000000000000408A3" class="pcalibre1 pcalibre calibre2">As a second illustration, consider the following C function:</p>
<pre id="P70004970270000000000000000408A4" data-uri="chapter03.xhtml#P70004970270000000000000000408A4" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000408A5" data-uri="chapter03.xhtml#P70004970270000000000000000408A5" class="calibre10 pcalibre pcalibre1">
long cread(long *xp) {
	return (xp ? *xp : 0);
}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000408A6" data-uri="chapter03.xhtml#P70004970270000000000000000408A6">At first, this seems like a good candidate to compile using a conditional move to set the result to zero when the pointer is null, as shown in the following assembly code:</p>
<pre id="P70004970270000000000000000408A7" data-uri="chapter03.xhtml#P70004970270000000000000000408A7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000408A8" data-uri="chapter03.xhtml#P70004970270000000000000000408A8" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">long cread(long *xp</i>)
	<i class="calibre5 pcalibre pcalibre1">Invalid implementation of function cread</i>
	<i class="calibre5 pcalibre pcalibre1">xp in register %rdi</i>
1	cread:
2	  movq (%rdi), %rax	<i class="calibre5 pcalibre pcalibre1">v = *xp</i>
3	  testq %rdi, %rdi	<i class="calibre5 pcalibre pcalibre1">Test x</i>
4	  movl $0, %edx		<i class="calibre5 pcalibre pcalibre1">Set ve = 0</i>
5	  cmove %rdx, %rax	<i class="calibre5 pcalibre pcalibre1">If x==0, v = ve</i>
6	  ret			<i class="calibre5 pcalibre pcalibre1">Return v</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000408A9" data-uri="chapter03.xhtml#P70004970270000000000000000408A9">This implementation is invalid, however, since the dereferencing of <code id="P70004970270000000000000000408AA" data-uri="chapter03.xhtml#P70004970270000000000000000408AA" class="pcalibre1 calibre8 pcalibre">xp</code> by the <code id="P70004970270000000000000000408AB" data-uri="chapter03.xhtml#P70004970270000000000000000408AB" class="pcalibre1 calibre8 pcalibre">movq</code> instruction (line 2) occurs even when the test fails, causing a null pointer dereferencing error. Instead, this code must be compiled using branching code.</p>
<p id="P70004970270000000000000000408AC" data-uri="chapter03.xhtml#P70004970270000000000000000408AC" class="pcalibre1 pcalibre calibre2">Using conditional moves also does not always improve code efficiency. For example, if either the <i class="calibre5 pcalibre pcalibre1">then-expr</i> or the <i class="calibre5 pcalibre pcalibre1">else-expr</i> evaluation requires a significant computation, then this effort is wasted when the corresponding condition does not hold. Compilers must take into account the relative performance of wasted computation versus the potential for performance penalty due to branch misprediction. In truth, they do not really have enough information to make this decision reliably; for example, they do not know how well the branches will follow predictable patterns. Our experiments with <code id="P70004970270000000000000000408AD" data-uri="chapter03.xhtml#P70004970270000000000000000408AD" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">gcc</span></code> indicate that it only uses conditional moves when the two expressions can be computed very easily, for example, with single add instructions. In our experience, <code id="P70004970270000000000000000408AE" data-uri="chapter03.xhtml#P70004970270000000000000000408AE" class="pcalibre1 calibre8 pcalibre"><span class="smallcaps pcalibre pcalibre1">gcc</span></code> uses conditional control transfers even in many cases where the cost of branch misprediction would exceed even more complex computations.</p>
<p id="P70004970270000000000000000408AF" data-uri="chapter03.xhtml#P70004970270000000000000000408AF" class="pcalibre1 pcalibre calibre2">Overall, then, we see that conditional data transfers offer an alternative strategy to conditional control transfers for implementing conditional operations. They can only be used in restricted cases, but these cases are fairly common and provide a much better match to the operation of modern processors.</p>
</section>
</section></body></html>
