#+HTML_HEAD: <link rel = "stylesheet" type="text/css" href ="style_for_org.css"/>
#+OPTIONS: html-style:nil
#+TITLE: Chapter 11:Generics and reflections


* 泛型

** 什么是泛型? 

泛型是一种编程语言特性，它允许在代码中使用未知的类型。通常情况下，泛型允许我们声明一个函数、类或接口时不指定具体类型，而是在调用时才确定类型。这样可以提高代码的可重用性和灵活性，同时也能避免出现类型不匹配的错误。

例如，在 Java 中，我们可以声明一个泛型类来表示某个类型的栈（stack）：

#+BEGIN_SRC 
public class Stack<T> {
    private T[] elements;
    private int size;

    public void push(T element) {
        // 将元素压入栈顶
    }

    public T pop() {
        // 从栈顶弹出一个元素并返回
    }
}
#+END_SRC
在上面的例子中， ~T~ 是一个类型参数，它表示某个具体的类型。当我们实例
化一个 ~Stack~ 对象时，需要为 ~T~ 指定一个具体的类型，例如：
#+BEGIN_SRC 
Stack<Integer> intStack = new Stack<Integer>();
intStack.push(1);
intStack.push(2);
intStack.pop(); // 返回2
#+END_SRC
在这个例子中，我们将 ~T~ 指定为 ~Integer~ 类型，因此 ~intStack~ 对象只
能存储整数类型的元素。如果我们尝试将其他类型的元素压入栈中，就会编译错
误。

** 能够给我一个泛型类的例子吗?

如上就是

** 能够定义一个有着多个泛型的类吗?

可以.

是的，可以定义一个使用了多个泛型的类。这种类被称为 "泛型类" 或 "参数化
类型"。在 Java 中，我们可以使用尖括号来指定多个类型参数，例如：
#+BEGIN_SRC 
public class Pair<K, V> {
    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}
#+END_SRC
在上面的例子中， ~Pair~ 类使用了两个类型参数 ~K~ 和 ~V~ ，它们分别表示
键和值的类型。当我们实例化一个 ~Pair~ 对象时，需要为 ~K~ 和 ~V~ 指定具
体的类型，例如：
#+BEGIN_SRC 
Pair<String, Integer> pair = new Pair<>("foo", 42);
String key = pair.getKey();
Integer value = pair.getValue();
#+END_SRC
在这个例子中，我们将 ~K~ 指定为 ~String~ 类型， ~V~ 指定为 ~Integer~
类型。因此， ~pair~ 对象表示一个字符串键对应一个整数值的键值对。

** 泛型方法是什么?

参数是泛型的方法就是泛型方法.

泛型方法是一种使用泛型的方法，它允许在方法中使用未知的类型。通常情况下，
泛型方法用于实现算法或操作，以便能够处理各种类型的数据。

例如，在 Java 中，我们可以声明一个泛型方法来比较两个对象的值是否相等：
#+BEGIN_SRC 
public static <T> boolean isEqual(T t1, T t2) {
    return t1.equals(t2);
}
#+END_SRC


在上面的例子中， ~isEqual ()~ 方法使用了一个类型参数 ~T~ ，它表示某个具体
的类型。当我们调用 ~isEqual ()~ 方法时，需要为 ~T~ 指定一个具体的类型，例
如：
#+BEGIN_SRC 
String str1 = "hello";
String str2 = "world";
boolean result = isEqual(str1, str2);  // 返回false

Integer num1 = 42;
Integer num2 = 42;
boolean result = isEqual(num1, num2);  // 返回true
#+END_SRC

在这个例子中，我们分别将 ~str1~ 和 ~str2~ 作为字符串参数传递给
~isEqual ()~ 方法，并将 ~num1~ 和 ~num2~ 作为整数参数传递给 ~isEqual
()~ 方法。由于 ~isEqual ()~ 方法使用了泛型，所以它可以接受任何类型的参
数，只要这些参数类提供了 equals () 方法的实现。

** 使用泛型的时候有什么约束和限制？

1. 无法使用基本数据类型作为泛型类型参数。只能使用对应的包装类（如
   Integer、Boolean 等）。

2. 无法创建泛型类型参数的实例。例如，不能直接使用 new T() 创建一个泛型
   类型参数 T 的实例，因为在编译时无法确定具体的类型。

3. 在运行时无法获取泛型参数的具体类型信息。这是因为 Java 中的泛型是通
   过类型擦除来实现的，在编译时会将泛型类型转换为原始类型，并且在运行
   时不再保留类型参数的具体信息。

4. 泛型参数不能使用在静态上下文中。静态方法或静态变量无法引用泛型类型
   参数。


*** 泛型参数不能使用在静态上下文中。静态方法或静态变量无法引用泛型类型参数。

这句话的意思是，在静态方法或静态变量中无法使用泛型类型参数。

在 Java 中，静态方法和静态变量属于类级别，而不属于对象级别。因此，它们
不能访问对象的实例变量或实例方法，只能访问静态变量和静态方法。而泛型类
型参数是在实例级别上定义的，因此在静态上下文中无法引用泛型类型参数。

例如，下面的代码就会编译错误：
#+BEGIN_SRC 
public class MyClass<T> {
    private static T staticVar;
    public static void staticMethod(T arg) { // 编译错误：无法在静态上下文中使用泛型类型参数
        // ...
    }
}
#+END_SRC
解决这个问题的常见方法是将泛型类型参数替换为具体的类型或限定类型。例如，
可以将上面的代码改为：
#+BEGIN_SRC 
public class MyClass<T> {
    private static T staticVar; // 可以使用 T 的限定类型
    public static <E> void staticMethod(E arg) { // 可以使用新的类型参数 E
        // ...
    }
}
#+END_SRC
总之，由于泛型类型参数是在实例级别上定义的，所以在静态上下文中无法使用
它们。必须使用其他方式来代替泛型类型参数，以确保正确地使用静态方法或静
态变量。


** 泛型接口

泛型接口是一种接口，其定义中使用了一个或多个类型参数来表示具体的类型，
并且这些类型可以在实现该接口的类中指定。通过使用泛型接口，我们可以将接
口与特定类型的实现分离开来，从而提高代码的可重用性和灵活性。在 Java 语
言中，泛型接口可以使用如下语法进行定义：
#+BEGIN_SRC 
interface MyInterface<T> {
    T myMethod(T arg);
}
#+END_SRC
在上面的例子中， ~MyInterface~ 是一个泛型接口，它有一个类型参数 ~T~ ，
在 ~myMethod~ 方法中使用了这个类型参数来表示参数类型和返回值类型。在实
现 ~MyInterface~ 接口时，需要指定具体的类型来替换 ~T~ 。例如，如果我们
想让 ~MyInterface~ 接口的实现类操作字符串类型，可以这样定义：
#+BEGIN_SRC 
class MyString implements MyInterface<String> {
    @Override
    public String myMethod(String arg) {
        // ...
    }
}
#+END_SRC
在这个例子中， ~MyString~ 是 ~MyInterface~ 接口的实现类，它将 ~T~ 替换
为 ~String~ 类型，并实现了 ~myMethod~ 方法。


值得注意的是, 泛型类实现了泛型接口的, 那么类的泛型的符号应该和接口的泛
型的符号一致.

* 泛型的通配符

** 什么是泛型的通配符?

泛型的通配符指的是 Java 中用于表示未知类型的符号。它们允许我们编写可以
处理不同数据类型的代码，从而提高了代码的重用性和灵活性。

Java 中有两种形式的泛型通配符：问号（ ~?~ ）和上限通配符（ ~extends~ ）。

问号通配符（ ~?~ ）可以用来表示任何类型，例如：
#+BEGIN_SRC 
List<?> list;
#+END_SRC

在这个例子中，我们定义了一个 ~List~ 类型的变量 ~list~ ，并使用问号通配
符来指示它可以持有任何类型的元素。这意味着我们可以将任何类型的列表分配
给此变量，例如 ~List<String>~ 或 ~List<Integer>~ 等。

上限通配符（ ~extends~ ）用于限制泛型类型参数的范围。例如，假设我们有
以下类层次结构：
#+BEGIN_SRC 
class A {}
class B extends A {}
class C extends A {}
#+END_SRC
现在，我们想要一个方法来接受一个 ~List~ ，该列表只包含 ~A~ 类及其子类
的对象。我们可以使用上限通配符来实现：
#+BEGIN_SRC 
public void myMethod(List<? extends A> list) {
    //...
}
#+END_SRC
在这个例子中，我们使用上限通配符来限制输入的列表元素必须是 A 类或其子
类的实例。这允许我们传递 ~List<A>~ 、 ~List<B>~ 或 ~List<C>~ 等类型的
列表，但不允许我们传递 ~List<String>~ 等其他类型的列表。

*** ~?~, ~extends~, ~super~ 通配符.

在 Java 中，泛型通配符用于指定泛型类型参数的类型范围。Java 的泛型通配符有以下几种：

1. 无限定通配符：用 ~?~ 表示，表示可以匹配任意类型，相当于不指定泛型类型。

2. 上界通配符：使用 ~extends~ 关键字，用于限制泛型类型必须是某个类或其
   子类。
#+BEGIN_SRC 
public class Box<T> {
    public void process(Box<? extends T> box) {
        // ...
    }
}
#+END_SRC
3. 下界通配符：使用 ~super~ 关键字，用于限制泛型类型必须是某个类的父类
   （包括该类本身）。
#+BEGIN_SRC 
public class Box<T> {
    public void add(T t, Box<? super T> box) {
        // ...
    }
}
#+END_SRC
需要注意的是，使用通配符会降低泛型类型的精确度，从而可能导致一些编译时
错误。因此，在应用泛型通配符时，需要特别小心，并且视情况选择合适的方式
来使用泛型通配符。


* 模板方式模式


** 什么是模板方式模式

模板方法模式（Template Method Pattern）是一种行为型设计模式。在模板方
法模式中，定义一个抽象类，其中包含了若干个子步骤的实现方式，并且这些子
步骤的执行顺序已经确定。但是，某些具体的子步骤的实现方式可能会因为不同
的场景而有所不同，这些具体的实现方式可以由子类来实现。

换句话说，模板方法模式提供了一个结构框架，而具体的实现方式则由子类来决
定。这样可以避免代码重复，同时也方便了代码的扩展和维护。

模板方法模式通常包含以下角色：

1. 抽象类（Abstract Class）：含有若干个子步骤的执行方式，并且定义了一个模
板方法，该方法定义了子步骤的执行顺序以及如何执行。

2. 具体类（Concrete Class）：实现了抽象类中的某些子步骤的具体实现方式。

下面是一个简单的模板方法模式示例：

#+BEGIN_SRC 
public abstract class AbstractClass {
    public void templateMethod() {
        doStepOne();
        doStepTwo();
        doStepThree();
    }

    protected abstract void doStepOne();

    protected abstract void doStepTwo();

    protected abstract void doStepThree();
}

public class ConcreteClass extends AbstractClass {
    @Override
    protected void doStepOne() {
        System.out.println("Step One in Concrete Class");
    }

    @Override
    protected void doStepTwo() {
        System.out.println("Step Two in Concrete Class");
    }

    @Override
    protected void doStepThree() {
        System.out.println("Step Three in Concrete Class");
    }
}

public class Main {
    public static void main(String[] args) {
        AbstractClass abstractClass = new ConcreteClass();
        abstractClass.templateMethod();
    }
}
#+END_SRC
在上述示例中，抽象类 ~AbstractClass~ 定义了一个模板方法
~templateMethod()~ ，其中包含了三个子步骤的执行方式。具体的实现方式则
由子类来决定，这里我们定义了一个具体类 ~ConcreteClass~ ，它实现了抽象
类中的三个子步骤的具体实现方式。最后，在 ~Main~ 类中创建一个
~ConcreteClass~ 对象，并调用其模板方法 ~templateMethod()~ 。

** 优点

模板方法模式的主要优点如下：

1. 提高代码复用性：模板方法模式将一些共性的代码抽象出来放在父类中，避
   免了重复编写相同的代码，提高了代码的复用性和可维护性。

2. 符合开闭原则：通过抽象出算法框架和具体实现的分离，可以方便地扩展或
   修改算法的具体实现部分，符合开闭原则。

3. 可以控制子类的扩展：由于模板方法定义了算法的基本骨架和流程，因此可
   以控制子类对算法步骤的修改和扩展，从而保证算法的稳定性和正确性。

4. 便于维护：由于模板方法将算法的基本框架和具体实现分离，因此可以很容
   易地修改和扩展算法的具体实现，同时也方便了代码的维护和管理。

总之，模板方法模式是一种非常有用的设计模式，它能够提高代码的复用性、可
维护性和扩展性，可以使系统更加灵活和易于维护。

** Hook

"Hook operation" 是模板方法模式中的一个概念，它指的是一种可以在基类中
定义但不是必须实现的操作，在模板方法中会调用这些操作，而具体的实现可以
由子类覆盖或者提供默认实现。

具体来说，在模板方法中，通常有一部分操作是固定的，这些操作在基类中被实
现。另外还有一些操作可能是可选的，这些可选操作就是 "hook operation"。
基类中会为这些操作提供默认实现，但是子类可以选择覆盖这些操作，以便根据
自己的需要来实现特定的功能。

使用 "hook operation" 可以让父类和子类之间达成一种契约或协议，即父类定
义好了算法的基础框架，并提供了一些可选的扩展点（即 "hook operation"），
子类可以根据自己的需求来选择实现或继承这些扩展点，从而实现各自的算法扩
展和定制。这样可以方便地扩展和定制算法，同时也避免了代码的重复编写，提
高了代码的复用性和可维护性。

* Reflection

** 什么是反射? 

在 Java 中，反射（Reflection）是指在运行时动态地获取一个类的信息，并可
以操作其属性、方法和构造函数等相关内容的机制。Java 的反射机制使得程序
可以在运行时动态地加载、检查和调用类的任意方法和属性，而不需要预先知道
这些信息。

Java 中的反射机制允许通过以下方式来获得类的详细信息：

1. 获取 ~Class~ 对象：使用 ~Class.forName ()~ 或者 ~.class~ 等方式获取
   表示类的 ~Class~ 对象。

2. 获取构造函数：使用 ~Class.getConstructor ()~ 或
   ~Class.getDeclaredConstructor ()~ 方法获取类的构造函数对象。

3. 获取类的属性：使用 ~Class.getField ()~ 或者 ~Class.getDeclaredField
   ()~ 方法获取类的属性对象。

4. 获取类的方法：使用 ~Class.getMethod ()~ 或 ~Class.getDeclaredMethod ()~
   方法获取类的方法对象。

5. 动态创建对象：使用 ~Constructor.newInstance ()~ 方法来动态地创建一个
   类的实例对象。

反射机制可以使得程序更加灵活和通用化，因为它允许程序在运行时才去动态地
获取类的信息和执行相应的操作，从而具有了更大的自由度和可定制性。但是，
反射机制也可能会带来一些性能上的损失和安全风险，因此需要根据实际情况进
行权衡和选择。

** ~Class~ 类是什么?

假设我们有一个类, 称为 ~Student~. 有一个同学称为 ~foo~, 他是一个
~Student~ 我们可以这样 get 到这个 ~Student~ 类. 然后进行操作.

#+BEGIN_SRC 
Class fooClass = foo.getClass();
#+END_SRC

那么 ~fooClass~ 就得到了 ~foo~ 的类的信息. 可以进行一些操作. 这里举出
一个例子:

#+BEGIN_SRC 
bar = fooClass.newInstance(); // newInstance 的执行是有条件的.
#+END_SRC

这样我们就新建了一个 ~bar~ 其具有 ~foo~ 相同的类. 

*** 如何 get 到 ~foo~ 的类?

有三种方法: 
1. 调用 ~foo.getClass()~, 其返回值是 ~foo~ 的类. 下同.
2. 调用 ~Class.forName(className)~, 其中 ~className~ 是一个 ~String~. 
3. 访问 ~ClassName.class~, 其中, ~ClassName~ 是某个类, 比如说
   ~String~, 之类的, 那么对应的方法便是 ~String.class~.

值得注意的是, 一个类的不同实例的 ~getClass()~ 的返回值是不一样的. 但是 ~ClassName.class~ 是一样的. 

*** 如何创造一个实例? 

也有三种方法
1. 调用 ~Class~ 的 ~newInstance()~ 方法. 
2. 找到 ~Class~ 的 ~Constructor~. 调用 ~Constructor~ 来构造实例. 

*** ~newInstance()~ 方法

这是 ~(Class)~ 之中的一个方法 (我使用括号表示说, 这是一个 Class 类的实
例). 其调用的是 *默认构造方法*.

*** ~Constructor~ 

我们调用 ~(Class)~ 的两个方法: ~getConstructors()~, ~getDeclaredConstructors()~. 来获取一个 ~Constructor~ 类型的数组. 
因为 Constructor 可能有很多个. 

随后我们可以调用 ~getConstructor(/* could be argument */)~ 来找到特定的 Constructor. 

*** ~Declared~ 

~Declared~ 说明这方法能够得到所有的已经声明的构造函数, 就是说, 其包括
私有的构造函数, 也有别的构造函数.

** 优点和缺点

*** 优点:

比较灵活, 能够在运行的时候动态地获取类的实例

*** 缺点: 

性能问题: 反射相当于一系列的解析操作, 通知 JVM 要做的事情, 性能差

安全问题: 反射机制破坏了封装性.

* 安全的全局单例形式.


** 反射破坏单例模式

单例的目的在于, 其一个类只有一个实例. 但是反射将破坏单例.

在 Java 中，反射可以通过访问私有构造函数来破坏单例模式。当一个类的构造
函数被声明为私有时，它不能被外部类访问，这意味着只能通过该类的静态方法
获取其实例。但是，使用反射，可以绕过这个限制并强制调用私有构造函数，从
而创建多个实例。

下面是一个简单的示例，演示了如何使用反射破坏单例模式：
#+BEGIN_SRC 
public class Singleton {
    private static Singleton instance = new Singleton();

    private Singleton() {
        /* mechanism deal with the problem */
        /* if (instance != null) {
            throw new IllegalStateException("Already instantiated");
        }
        */
    }

    public static Singleton getInstance() {
        return instance;
    }
}

public class Main {
    public static void main(String[] args) throws Exception {
        Singleton singleton1 = Singleton.getInstance();
        Singleton singleton2 = null;

        Constructor<Singleton> constructor = Singleton.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        singleton2 = constructor.newInstance();

        System.out.println(singleton1.hashCode());
        System.out.println(singleton2.hashCode());
    }
}
#+END_SRC
在上面的示例代码中，我们首先获取一个 ~Singleton~ 类的实例，并将其赋值
给变量 ~singleton1~ 。然后，我们使用反射获取 ~Singleton~ 类的构造函数，
并将其设置为可访问。接下来，我们使用构造函数创建一个新的 ~Singleton~
实例，并将其赋值给变量 ~singleton2~ 。最后，我们比较两个对象的哈希码，
发现它们不同，这证明我们成功地使用反射创建了另一个 ~Singleton~ 实例，
从而破坏了单例模式。

** ~setAccessible()~ 是什么?

这行代码是设置构造函数的可访问性，使得即使该构造函数被声明为私有的，也
可以被反射机制访问。默认情况下，Java 会通过反射来访问类的公共成员，但
对于私有成员（包括构造函数），需要将其设置为可访问才能使用反射操作。

在上面的示例代码中，我们使用 ~getDeclaredConstructor()~ 方法获取
~Singleton~ 类的构造函数对象，并将其存储在 ~Constructor<Singleton>~ 类
型的变量中。然后，我们调用 ~setAccessible(true)~ 方法将构造函数对象设
置为可访问状态。这意味着即使该构造函数是私有的，我们也可以通过它创建新
的对象实例

* 获取和修改成员变量. 

** Fields

*** 什么是 fields?

实际上存储在类之中对变量就是 fields.

*** ~Field~ 类是什么?

~Field~ 类是设置一个类的 fields 的值的类, 当然其能够进行其他的操作. 比
如说返回某一个类的 ~field~. 对应这两种方法: 1. ~set()~ 方法
和 2. ~get()~ 方法.

可以认为 ~Field~ 类是一个设置器, 我们先告诉他 "要设置哪个", 然后告诉他, "设置谁" 的 fields.

**** ~get()~ 方法是什么?

比如说我们首先获取一个类的 field 对应的 ~Field~ 类型. 比如说, 

#+BEGIN_SRC 
Field f = Student.class.getDeclaredField("name");
#+END_SRC

~Student~ 类是这样初始化的, ~new Student("name", id)~. 随后我们设置 ~setAccessible~ , 让其能够达到.

#+BEGIN_SRC 
f.setAccessible(true);
#+END_SRC

然后调用 ~f~ 的 ~get(Class)~ 方法就能够返回 ~f~ 对应的 ~field~ , 在某一个类之中的对应值. 

#+BEGIN_SRC 
System.out.println(f.get(Class));
#+END_SRC

就打印了对应的变量名的.

**** ~set()~ 是什么? 

我们使用 ~set(Class, value)~ 在设置某一个类的特定的特征的值. 具体为

#+BEGIN_SRC 
f.set(student, "shit");
#+END_SRC

会将 ~student~ 的名字设置为 ~shit~.

** Method

通过 Invoke 来调用类内部的方法. 类似的, 我们应该先告诉他, "调用哪个方
法", 然后告诉他, "通过哪个实例调用, 以什么参数调用".

比如说我们有一个 ~Student~ 类的 ~student~. 我们通过调用 ~Student~ Class 类的 ~getMethod()~ 方法得到内部的方法. 

#+BEGIN_SRC 
Method m = Student.class.getMethod("getName");
#+END_SRC

这就是说, 其得到了方法 ~getName~. 随后我们通过 ~invoke~ 来调用方法. 其
中 ~invoke~ 有 1 到多个变量. 第一个变量是 *执行这个方法的对象*, 剩余的可
能的变量是这个方法的参数.

#+BEGIN_SRC 
m.invoke(student);
#+END_SRC

这段代码就将执行 ~getName()~ 方法, 执行的实例是 ~student~, 返回值有可能是 "shit".

值得注意的是, 其返回值是 ~Object~ 好理解, 因为 ~Method~ 类是一种抹去了
细节的实现, 那么面对多种可能的返回值, 他直接将类型抹为 ~Object~.    