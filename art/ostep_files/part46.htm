<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>5.3 Finally, the exec() System Call</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part45.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part47.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">5.3 Finally, the <span class="s51">exec() </span>System Call</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 91%;text-align: justify;">A final and important piece of the process creation API is the <span class="s41">exec() </span>system call<span class="s35">3</span>. This system call is useful when you want to run a program that is different from the calling program. For example, calling <span class="s41">fork() </span>in <span class="s41">p2.c </span>is only useful if you want to keep running copies of the same program. However, often you want to run a <i>different </i>program; <span class="s41">exec() </span>does just that (Figure <span style=" color: #00AEEF;">5.3</span>).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">In this example, the child process calls <span class="s41">execvp() </span>in order to run the program <span class="s41">wc</span>, which is the word counting program. In fact, it runs <span class="s41">wc </span>on the source file <span class="s41">p3.c</span>, thus telling us how many lines, words, and bytes are found in the file:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">prompt&gt; ./p3</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">hello world (pid:29383) hello, I am child (pid:29384)</p><p class="s38" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">29  107  1030 p3.c</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">hello, I am parent of 29384 (wc:29384) (pid:29383) prompt&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_029.png"/></span></p><p class="s12" style="padding-top: 2pt;padding-left: 68pt;text-indent: 13pt;line-height: 91%;text-align: justify;"><span class="s11">2</span>There are a few cases where <span class="s38">wait() </span>returns before the child exits; read the man page for more details, as always. And beware of any absolute and unqualified statements this book makes, such as “the child will always print first” or “U<span class="s18">NIX </span>is the best thing in the world, even better than ice cream.”</p><p class="s12" style="padding-left: 68pt;text-indent: 13pt;line-height: 91%;text-align: justify;"><span class="s11">3</span>Actually, there are six variants of <span class="s38">exec()</span>: <span class="s38">execl()</span>, <span class="s38">execle()</span>, <span class="s38">execlp()</span>, <span class="s38">execv()</span>, and <span class="s38">execvp()</span>. Read the man pages to learn more.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;stdlib.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &lt;unistd.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">#include &lt;string.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">#include &lt;sys/wait.h&gt;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">6</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7  <span class="s38">int</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">8  </span>main(int argc, char <span class="s39">*</span>argv[])</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;">9  <span class="s38">{</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10    <span class="s38">printf(&quot;hello world (pid:%d)\n&quot;, (int) getpid());</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11    <span class="s38">int rc = fork();</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12     <span class="s38">if (rc &lt; 0) {    // fork failed; exit</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13       <span class="s38">fprintf(stderr, &quot;fork failed\n&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">14       <span class="s38">exit(1);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15     <span class="s38">} else if (rc == 0) { // child (new process)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">16       <span class="s38">printf(&quot;hello, I am child (pid:%d)\n&quot;, (int) getpid());</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">17       </span>char <span class="s39">*</span>myargs[3];</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">18       <span class="s38">myargs[0] = strdup(&quot;wc&quot;);  // program: &quot;wc&quot; (word count)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19       <span class="s38">myargs[1] = strdup(&quot;p3.c&quot;); // argument: file to count</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20        <span class="s38">myargs[2] = NULL;     // marks end of array</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">21       <span class="s38">execvp(myargs[0], myargs); // runs word count</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">22       <span class="s38">printf(&quot;this shouldn’t print out&quot;);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">23     <span class="s38">} else {      // parent goes down this path (main)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">24       <span class="s38">int wc = wait(NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">25       <span class="s38">printf(&quot;hello, I am parent of %d (wc:%d) (pid:%d)\n&quot;,</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">26             <span class="s38">rc, wc, (int) getpid());</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">27    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">28    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">29  <span class="s38">}</span></p><p class="s52" style="padding-left: 70pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="p">Figure 5.3: </span>p3.c<span class="s27">: Calling </span>fork()<span class="s27">, </span>wait()<span class="s27">, And </span>exec()</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">If <span class="s41">fork() </span>was strange, <span class="s41">exec() </span>is not so normal either. What it does: given the name of an executable (e.g., <span class="s41">wc</span>), and some arguments (e.g., <span class="s41">p3.c</span>), it <b>loads </b>code (and static data) from that executable and over- writes its current code segment (and current static data) with it; the heap and stack and other parts of the memory space of the program are re- initialized. Then the OS simply runs that program, passing in any argu- ments as the <span class="s41">argv </span>of that process. Thus, it does <i>not </i>create a new process; rather, it transforms the currently running program (formerly <span class="s41">p3</span>) into a different running program (<span class="s41">wc</span>). After the <span class="s41">exec() </span>in the child, it is al- most as if <span class="s41">p3.c </span>never ran; a successful call to <span class="s41">exec() </span>never returns.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part45.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part47.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
