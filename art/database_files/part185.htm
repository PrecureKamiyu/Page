<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.3   Servlets</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part184.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part186.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">9.3   <span style=" color: #00AEEF;">Servlets</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The Java <span class="s63">servlet </span>speciﬁcation deﬁnes an application programming interface for com- munication between the web/application server and the application program. The <span class="s49">HttpServlet </span>class in Java implements the servlet <span class="s44">API </span>speciﬁcation; servlet classes used to implement speciﬁc functions are deﬁned as subclasses of this class.<span class="s76">3</span> Often the word <i>servlet </i>is used to refer to a Java program (and class) that implements the servlet inter- face. Figure 9.7 shows a servlet example; we explain it in detail shortly.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The code for a servlet is loaded into the web/application server when the server is started, or when the server receives a remote <span class="s44">HTTP </span>request to execute a particular servlet. The task of a servlet is to process such a request, which may involve accessing a database to retrieve necessary information, and dynamically generating an <span class="s44">HTML </span>page to be returned to the client browser.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.3.1 A Servlet Example</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Servlets are commonly used to generate dynamic responses to <span class="s44">HTTP </span>requests. They can access inputs provided through <span class="s44">HTML </span>forms, apply “business logic” to decide what</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_2209.png"/></span></p><p class="s184" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s77">2</span><span class="s78">The user identiﬁer could be stored at the client end, in a cookie named, for example, </span>userid<span class="s80">. Such cookies can be used for low-security applications, such as free web sites identifying their users. However, for applications that require a higher level of security, such a mechanism creates a security risk: The value of a cookie can be changed at the browser by a malicious user, who can then masquerade as a diﬀerent user. Setting a cookie (named </span>sessionid<span class="s80">, for example) to a randomly generated session identiﬁer (from a large space of numbers) makes it highly improbable that a user can masquerade as (i.e., pretend to be) another user. A sequentially generated session identiﬁer, on the other hand, would be susceptible to masquerading.</span></p><p class="s77" style="padding-left: 119pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">3<span class="s78">The servlet interface can also support non-HTTP requests, although our example uses only HTTP.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">response to provide, and then generate <span class="s44">HTML </span>output to be sent back to the browser. Servlet code is executed on a web or application server.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 9.7 shows an example of servlet code to implement the form in Fig- ure 9.3. The servlet is called <span class="s49">PersonQueryServlet</span>, while the form speciﬁes that “<span class="s49">action=&quot;PersonQuery&quot;</span>.” The web/application server must be told that this servlet is to be used to handle requests for <span class="s49">PersonQuery</span>, which is done by using the anno-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2210.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">import java.io.*; import javax.servlet.*;</p><p class="s49" style="padding-left: 88pt;text-indent: 0pt;line-height: 12pt;text-align: left;">import javax.servlet.http.*;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">@WebServlet(&quot;PersonQuery&quot;)</p><p class="s49" style="padding-left: 109pt;text-indent: -21pt;text-align: left;">public class PersonQueryServlet extends HttpServlet { public void doGet(HttpServletRequest request,</p><p class="s49" style="padding-left: 130pt;text-indent: 63pt;text-align: left;">HttpServletResponse response) throws ServletException, IOException</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">response.setContentType(&quot;text/html&quot;); PrintWriter out = response.getWriter();</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;line-height: 11pt;text-align: left;">... check if user is logged in ...</p><p class="s186" style="padding-top: 3pt;padding-left: 130pt;text-indent: 0pt;line-height: 62%;text-align: left;"><span class="s49">out.println(&quot;</span>&lt;<span class="s151">HEAD</span>&gt;&lt;<span class="s151">TITLE</span>&gt; <span class="s49">Query Result</span>&lt;<span class="s49">/</span><span class="s157">TITLE</span>&gt;&lt;<span class="s49">/</span><span class="s157">HEAD</span>&gt;<span class="s49">&quot;); out.println(&quot;</span>&lt;<span class="s151">BODY</span>&gt;<span class="s49">&quot;);</span></p><p class="s49" style="padding-top: 9pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">String persontype = request.getParameter(&quot;persontype&quot;); String name = request.getParameter(&quot;name&quot;); if(persontype.equals(&quot;student&quot;)) {</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">... code to find students with the specified name ...</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">... using <span class="s157">JDBC </span>to communicate with the database ..</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">... Assume ResultSet rs has been retrieved, and</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">... contains attributes ID, name, and department name</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">String headers = new String[]{&quot;ID&quot;, &quot;Name&quot;, &quot;Department Name&quot;}; Util::resultSetToHTML(rs, headers, out);</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;text-align: left;">else {</p><p class="s49" style="padding-left: 151pt;text-indent: 0pt;text-align: left;">... as above, but for instructors ...</p><p class="s49" style="padding-left: 130pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s49" style="padding-top: 2pt;padding-left: 130pt;text-indent: 0pt;line-height: 70%;text-align: left;">out.println(&quot;<span class="s186">&lt;</span>/<span class="s157">BODY</span><span class="s186">&gt;</span>&quot;); out.close();</p><p class="s49" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2211.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.7 <span class="s74">Example of servlet code.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">tation <span class="s49">@WebServlet(&quot;PersonQuery&quot;) </span>shown in the code. The form speciﬁes that the <span class="s44">HTTP </span><span class="s49">get </span>mechanism is used for transmitting parameters. So the <span class="s49">doGet() </span>method of the servlet, as deﬁned in the code, is invoked.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Each servlet request results in a new thread within which the call is executed, so multiple requests can be handled in parallel. Any values from the form menus and input ﬁelds on the web page, as well as cookies, pass through an object of the <span class="s49">HttpServletRe- quest </span>class that is created for the request, and the reply to the request passes through an object of the class <span class="s49">HttpServletResponse</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s49">doGet() </span>method in the example extracts values of the parameters <span class="s49">persontype </span>and <span class="s49">name </span>by using <span class="s49">request.getParameter()</span>, and uses these values to run a query against a database. The code used to access the database and to get attribute values from the query result is not shown; refer to Section 5.1.1.5 for details of how to use <span class="s44">JDBC </span>to access a database. We assume that the result of the query in the form of a <span class="s44">JDBC </span><span class="s49">ResultSet </span>is available in the variable <span class="s49">resultset</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The servlet code returns the results of the query to the requester by outputting them to the <span class="s49">HttpServletResponse </span>object <span class="s49">response</span>. Outputting the results to <span class="s49">response </span>is implemented by ﬁrst getting a <span class="s49">PrintWriter </span>object <span class="s49">out </span>from <span class="s49">response</span>, and then printing the query result in <span class="s44">HTML </span>format to <span class="s49">out</span>. In our example, the query result is printed by calling the function <span class="s49">Util::resultSetToHTML(resultset, header, out)</span>, which is shown in Figure 9.8. The function uses <span class="s44">JDBC </span>metadata function on the ResultSet <span class="s49">rs </span>to ﬁgure out how many columns need to be printed. An array of column headers is passed to this function to be printed out; the column names could have been obtained using <span class="s44">JDBC </span>metadata, but the database column names may not be appropriate for display to a user, so we provide meaningful column names to the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.3.2 Servlet Sessions</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Recall that the interaction between a browser and a web/application server is stateless. That is, each time the browser makes a request to the server, the browser needs to con- nect to the server, request some information, then disconnect from the server. Cookies can be used to recognize that a request is from the same browser session as an ear- lier request. However, cookies form a low-level mechanism, and programmers require a better abstraction to deal with sessions.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The servlet <span class="s44">API </span>provides a method of tracking a session and storing information pertaining to it. Invocation of the method <span class="s49">getSession(false) </span>of the class <span class="s49">HttpServle- tRequest </span>retrieves the <span class="s49">HttpSession </span>object corresponding to the browser that sent the request. An argument value of <span class="s49">true </span>would have speciﬁed that a new session object must be created if the request is a new request.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When the <span class="s49">getSession() </span>method is invoked, the server ﬁrst asks the client to return a cookie with a speciﬁed name. If the client does not have a cookie of that name, or returns a value that does not match any ongoing session, then the request is not part of an ongoing session. In this case, <span class="s49">getSession() </span>would return a null value, and the servlet could direct the user to a login page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2212.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 97pt;text-indent: 0pt;text-align: left;">import java.io.*; import javax.servlet.*;</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;line-height: 12pt;text-align: left;">import javax.servlet.http.*;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">public class Util {</p><p class="s49" style="padding-left: 118pt;text-indent: 0pt;text-align: left;">public static void resultSetToHTML(ResultSet rs,</p><p class="s49" style="padding-left: 140pt;text-indent: 148pt;text-align: left;">String headers[], PrintWriter out) { ResultSetMetaData rsmd = rs.getMetaData();</p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int numCols = rsmd.getColumnCount();</p><p class="s49" style="padding-top: 3pt;padding-left: 140pt;text-indent: 0pt;line-height: 62%;text-align: left;">out.println(&quot;<span class="s186">&lt;</span>table border=1<span class="s186">&gt;</span>&quot;); out.println(&quot;<span class="s186">&lt;</span>tr<span class="s186">&gt;</span>&quot;);</p><p class="s49" style="padding-left: 161pt;text-indent: -21pt;line-height: 62%;text-align: left;">for (int i=0; i <span class="s186">&lt; </span>numCols; i++) out.println(&quot;<span class="s186">&lt;</span>th<span class="s186">&gt;</span>&quot;+ headers[i] + <span class="s186">&lt;</span><span class="s185">∕</span>th<span class="s186">&gt;</span></p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;line-height: 12pt;text-align: left;">out.println(&quot;<span class="s186">&lt;</span><span class="s185">∕</span>tr<span class="s186">&gt;</span>&quot;);</p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;line-height: 8pt;text-align: left;">while (rs.next()) {</p><p class="s49" style="padding-left: 161pt;text-indent: 0pt;line-height: 15pt;text-align: left;">out.println(&quot;<span class="s186">&lt;</span>tr<span class="s186">&gt;</span>&quot;);</p><p class="s49" style="padding-left: 182pt;text-indent: -21pt;line-height: 62%;text-align: left;">for (int i=0; i <span class="s186">&lt; </span>numCols; i++) out.println(&quot;<span class="s186">&lt;</span>td<span class="s186">&gt;</span>&quot;+ rs.getString(i) + <span class="s186">&lt;</span><span class="s185">∕</span>td<span class="s186">&gt;</span></p><p class="s49" style="padding-left: 161pt;text-indent: 0pt;line-height: 10pt;text-align: left;">out.println(&quot;<span class="s186">&lt;</span><span class="s185">∕</span>tr<span class="s186">&gt;</span>&quot;);</p><p class="s49" style="padding-left: 140pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s49" style="padding-left: 118pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 97pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2213.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.8 <span class="s74">Utility function to output ResultSet as a table.</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">The login page could allow the user to provide a user name and password. The servlet corresponding to the login page could verify that the password matches the user; for example, by using the user name to retrieve the password from the database and checking if the password entered matches the stored password.<span class="s76">4</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">If the user is properly authenticated, the login servlet would execute <span class="s49">getSes- sion(true)</span>, which would return a new session object. To create a new session, the server would internally carry out the following tasks: set a cookie (called, for example, ses- sionId) with a session identiﬁer as its associated value at the client browser, create a new session object, and associate the session identiﬁer value with the session object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_2214.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_2215.png"/></span></p><p class="s111" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s77">4</span><span class="s78">It is a bad idea to store unencrypted passwords in the database, since anyone with access to the database contents, such as a system administrator or a hacker, could steal the password. Instead, a hashing function is applied to the password, and the result is stored in the database; even if someone sees the hashing result stored in the database, it is very hard to infer what was the original password. The same hashing function is applied to the user-supplied password, and the result is compared with the stored hashing result. Further, to ensure that even if two users use the same password the hash values are diﬀerent, the password system typically stores a diﬀerent random string (called the </span>salt<span class="s80">) for each user, and it appends the random string to the password before computing the hash value. Thus, the password relation would have the schema </span>user password<span class="s80">(</span>user, salt, passwordhash<span class="s80">), where </span>passwordhash <span class="s80">is generated by </span>hash<span class="s80">(</span>append<span class="s80">(</span>password<span class="s80">,</span>salt<span class="s80">)). Encryption is described in more detail in Section 9.9.1.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">The servlet code can also store and look up (attribute-name, value) pairs in the <span class="s49">HttpSession </span>object, to maintain state across multiple requests within a session. For example, after the user is authenticated and the session object has been created, the login servlet could store the user-id of the user as a session parameter by executing the method</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">session.setAttribute(“userid”, userid)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">on the session object returned by <span class="s49">getSession()</span>; the Java variable <span class="s49">userid </span>is assumed to contain the user identiﬁer.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If the request was part of an ongoing session, the browser would have returned the cookie value, and the corresponding session object would be returned by <span class="s49">getSession()</span>. The servlet could then retrieve session parameters such as user-id from the session object by executing the method</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">session.getAttribute(“userid”)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">on the session object returned above. If the attribute <span class="s49">userid </span>is not set, the function would return a null value, which would indicate that the client user has not been au- thenticated.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Consider the line in the servlet code in Figure 9.7 that says “... check if user is logged in...”. The following code implements this check; if the user is not logged in, it sends an error message, and after a gap of 5 seconds, redirects the user to the login page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 176pt;text-indent: 0pt;text-align: left;">Session session = request.getSession(false);</p><p class="s49" style="padding-left: 197pt;text-indent: -21pt;text-align: left;">if (session == null || session.getAttribute(userid) == null) { out.println(&quot;You are not logged in.&quot;); response.setHeader(&quot;Refresh&quot;, &quot;5;url=login.html&quot;); return();</p><p class="s49" style="padding-left: 176pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.3.3 Servlet Life Cycle</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The life cycle of a servlet is controlled by the web/application server in which the servlet has been deployed. When there is a client request for a speciﬁc servlet, the server ﬁrst checks if an instance of the servlet exists or not. If not, the server loads the servlet class into the Java virtual machine (<span class="s44">JVM</span>) and creates an instance of the servlet class. In addition, the server calls the <span class="s49">init() </span>method to initialize the servlet instance. Notice that each servlet instance is initialized only once when it is loaded.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">After making sure the servlet instance does exist, the server invokes the <span class="s49">service </span>method of the servlet, with a <span class="s49">request </span>object and a <span class="s49">response </span>object as parameters. By default, the server creates a new thread to execute the <span class="s49">service </span>method; thus, multiple</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark188">requests on a servlet can execute in parallel, without having to wait for earlier requests to complete execution. The </a><span class="s49">service </span>method calls <span class="s49">doGet </span>or <span class="s49">doPost </span>as appropriate.<a name="bookmark208">&zwnj;</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When no longer required, a servlet can be shut down by calling the <span class="s49">destroy() </span>method. The server can be set up to shut down a servlet automatically if no requests have been made on a servlet within a time-out period; the time-out period is a server parameter that can be set as appropriate for the application.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.3.4 Application Servers</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Many application servers provide built-in support for servlets. One of the most popular is the Tomcat Server from the Apache Jakarta Project. Other application servers that support servlets include Glassﬁsh, JBoss, <span class="s44">BEA </span>Weblogic Application Server, Oracle Application Server, and <span class="s44">IBM</span>’s WebSphere Application Server.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The best way to develop servlet applications is by using an <span class="s44">IDE </span>such as Eclipse or NetBeans, which come with Tomcat or Glassﬁsh servers built in.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Application servers usually provide a variety of useful services, in addition to basic servlet support. They allow applications to be deployed or stopped, and they provide functionality to monitor the status of the application server, including performance statistics. Many application servers also support the Java 2 Enterprise Edition (<span class="s44">J2EE</span>) platform, which provides support and <span class="s44">API</span>s for a variety of tasks, such as for handling objects, and parallel processing across multiple application servers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part184.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part186.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
