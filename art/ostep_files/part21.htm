<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>2.1 Virtualizing the CPU</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part20.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part22.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 4pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">2.1 Virtualizing the CPU</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Figure <span style=" color: #00AEEF;">2.1 </span>depicts our first program. It doesn’t do much. In fact, all it does is call <span class="s41">Spin()</span>, a function that repeatedly checks the time and returns once it has run for a second. Then, it prints out the string that the user passed in on the command line, and repeats, forever.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Let’s say we save this file as <span class="s41">cpu.c </span>and decide to compile and run it on a system with a single processor (or <b>CPU </b>as we will sometimes call it). Here is what we will see:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">prompt&gt; gcc -o cpu cpu.c -Wall prompt&gt; ./cpu &quot;A&quot;</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">A A A A</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">ˆC prompt&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Not too interesting of a run – the system begins running the program, which repeatedly checks the time until a second has elapsed. Once a sec- ond has passed, the code prints the input string passed in by the user (in this example, the letter “A”), and continues. Note the program will run forever; only by pressing “Control-c” (which on U<span class="s7">NIX</span>-based systems will terminate the program running in the foreground) can we halt the program.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now, let’s do the same thing, but this time, let’s run many different in- stances of this same program. Figure <span style=" color: #00AEEF;">2.2 </span>shows the results of this slightly more complicated example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">prompt&gt; ./cpu A &amp; ; ./cpu B &amp; ; ./cpu C &amp; ; ./cpu D &amp; [1] 7353</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">[2] 7354</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">[3] 7355</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">[4] 7356</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">A B D C A B D C A C B D</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 121pt;text-indent: 0pt;text-align: left;">Figure 2.2: <b>Running Many Programs At Once</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;text-align: justify;">Well, now things are getting a little more interesting. Even though we have only one processor, somehow all four of these programs seem to be running at the same time! How does this magic happen?<span class="s35">4</span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">It turns out that the operating system, with some help from the hard- ware, is in charge of this <b>illusion</b>, i.e., the illusion that the system has a very large number of virtual CPUs. Turning a single CPU (or small set of them) into a seemingly infinite number of CPUs and thus allowing many programs to seemingly run at once is what we call <b>virtualizing the CPU</b>, the focus of the first major part of this book.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Of course, to run programs, and stop them, and otherwise tell the OS which programs to run, there need to be some interfaces (APIs) that you can use to communicate your desires to the OS. We’ll talk about these APIs throughout this book; indeed, they are the major way in which most users interact with operating systems.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">You might also notice that the ability to run multiple programs at once raises all sorts of new questions. For example, if two programs want to run at a particular time, which <i>should </i>run? This question is answered by a <b>policy </b>of the OS; policies are used in many different places within an OS to answer these types of questions, and thus we will study them as we learn about the basic <b>mechanisms </b>that operating systems implement (such as the ability to run multiple programs at once). Hence the role of the OS as a <b>resource manager</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="154" height="1" alt="image" src="Image_011.png"/></span></p><p class="s12" style="padding-top: 2pt;padding-left: 68pt;text-indent: 13pt;line-height: 91%;text-align: justify;"><span class="s11">4</span>Note how we ran four processes at the same time, by using the <span class="s38">&amp; </span>symbol. Doing so runs a job in the background in the <span class="s38">tcsh </span>shell, which means that the user is able to immediately issue their next command, which in this case is another program to run. The semi-colon between commands allows us to run multiple programs at the same time in <span class="s38">tcsh</span>. If you’re using a different shell (e.g., <span class="s38">bash</span>), it works slightly differently; read documentation online for details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;unistd.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &lt;stdlib.h&gt;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">#include &quot;common.h&quot;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">5</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6  <span class="s38">int</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">7  </span>main(int argc, char <span class="s39">*</span>argv[])</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">8  <span class="s38">{</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">9     </span>int <span class="s39">*</span>p = malloc(sizeof(int));     // a1</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">10    <span class="s38">assert(p != NULL);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11    <span class="s38">printf(&quot;(%d) address of p: %08x\n&quot;,</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12          <span class="s38">getpid(), (unsigned) p);     // a2</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">13     <span class="s39">*</span><span class="s38">p = 0;              // a3</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">14    <span class="s38">while (1) {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15       <span class="s38">Spin(1);</span></p><p class="s39" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">16       </span>*<span class="s38">p = </span>*<span class="s38">p + 1;</span></p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 85%;text-align: left;"><span class="s37">17       </span>printf(&quot;(%d) p: %d\n&quot;, getpid(), <span class="s39">*</span>p); // a4</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">18    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19    <span class="s38">return 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20  <span class="s38">}</span></p><p style="padding-left: 94pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 2.3: <b>A Program that Accesses Memory</b></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part20.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part22.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
