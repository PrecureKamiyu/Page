<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>6.3 The Memory Hierarchy</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000054EF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000043C67" data-uri="chapter06.xhtml#P7000497027000000000000000043C67" epub:type="title"><span class="pcalibre label pcalibre1">6.3 </span>The Memory Hierarchy</h1></header>
<p id="P7000497027000000000000000043C68" data-uri="chapter06.xhtml#P7000497027000000000000000043C68" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000051B5.xhtml#P70004970270000000000000000051B5"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">6.1</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005435.xhtml#P7000497027000000000000000005435"><span class="pcalibre label pcalibre1">6.2</span></a> described some fundamental and enduring properties of storage technology and computer software:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000043C69" data-uri="chapter06.xhtml#P7000497027000000000000000043C69">
<li id="P7000497027000000000000000043C6A" data-uri="chapter06.xhtml#P7000497027000000000000000043C6A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C6B" data-uri="chapter06.xhtml#P7000497027000000000000000043C6B" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Storage technology. </span>Different storage technologies have widely different access times. Faster technologies cost more per byte than slower ones and have less capacity. The gap between CPU and main memory speed is widening.</p></li>
<li id="P7000497027000000000000000043C6C" data-uri="chapter06.xhtml#P7000497027000000000000000043C6C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C6D" data-uri="chapter06.xhtml#P7000497027000000000000000043C6D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Computer software. </span>Well-written programs tend to exhibit good locality.</p></li>
</ul>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000054F7" data-uri="chapter06.xhtml#P70004970270000000000000000054F7">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000054F8" title="610" data-uri="chapter06.xhtml#P70004970270000000000000000054F8" epub:type="pagebreak"></span>
<img alt="A pyramid diagram represents an example of a memory hierarchy." id="P7000497027000000000000000043C6E" data-uri="P700049702700000000000000000B736" src="../images/p610-1.png" class="calibre206 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000043C6F" data-uri="chapter06.xhtml#P7000497027000000000000000043C6F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043C70" data-uri="chapter06.xhtml#P7000497027000000000000000043C70" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">6.21 </span>The memory hierarchy.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000023F6D" data-uri="chapter06.xhtml#P7000497027000000000000000023F6D">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000043C71" data-uri="chapter06.xhtml#P7000497027000000000000000043C71" class="pcalibre1 pcalibre calibre2">A pyramid diagram has layers L0 through L6, from top to bottom. The higher levels represent smaller, faster, and costlier (per byte) storage devices), while the lower levels represent larger, slower, cheaper (per byte) storage devices. Each level interacts with the level below it, as summarized within the following list.</p>
<ul id="P7000497027000000000000000043C72" data-uri="chapter06.xhtml#P7000497027000000000000000043C72" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000043C73" data-uri="chapter06.xhtml#P7000497027000000000000000043C73" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C74" data-uri="chapter06.xhtml#P7000497027000000000000000043C74" class="pcalibre calibre3 pcalibre1">L0: Regs</p>
<ul id="P7000497027000000000000000043C75" data-uri="chapter06.xhtml#P7000497027000000000000000043C75" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C76" data-uri="chapter06.xhtml#P7000497027000000000000000043C76" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C77" data-uri="chapter06.xhtml#P7000497027000000000000000043C77" class="pcalibre calibre3 pcalibre1">CPU registers hold words retrieved from cache memory (from L1).</p></li>
</ul></li>
<li id="P7000497027000000000000000043C78" data-uri="chapter06.xhtml#P7000497027000000000000000043C78" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C79" data-uri="chapter06.xhtml#P7000497027000000000000000043C79" class="pcalibre calibre3 pcalibre1">L1: L1 cache (SRAM)</p>
<ul id="P7000497027000000000000000043C7A" data-uri="chapter06.xhtml#P7000497027000000000000000043C7A" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C7B" data-uri="chapter06.xhtml#P7000497027000000000000000043C7B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C7C" data-uri="chapter06.xhtml#P7000497027000000000000000043C7C" class="pcalibre calibre3 pcalibre1">L1 cache holds cache lines retrieved from L2 cache.</p></li>
</ul></li>
<li id="P7000497027000000000000000043C7D" data-uri="chapter06.xhtml#P7000497027000000000000000043C7D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C7E" data-uri="chapter06.xhtml#P7000497027000000000000000043C7E" class="pcalibre calibre3 pcalibre1">L2: L2 cache (SRAM)</p>
<ul id="P7000497027000000000000000043C7F" data-uri="chapter06.xhtml#P7000497027000000000000000043C7F" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C80" data-uri="chapter06.xhtml#P7000497027000000000000000043C80" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C81" data-uri="chapter06.xhtml#P7000497027000000000000000043C81" class="pcalibre calibre3 pcalibre1">L2 cache holds cache lines retrieved from L3 cache.</p></li>
</ul></li>
<li id="P7000497027000000000000000043C82" data-uri="chapter06.xhtml#P7000497027000000000000000043C82" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C83" data-uri="chapter06.xhtml#P7000497027000000000000000043C83" class="pcalibre calibre3 pcalibre1">L3: L3 cache (SRAM)</p>
<ul id="P7000497027000000000000000043C84" data-uri="chapter06.xhtml#P7000497027000000000000000043C84" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C85" data-uri="chapter06.xhtml#P7000497027000000000000000043C85" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C86" data-uri="chapter06.xhtml#P7000497027000000000000000043C86" class="pcalibre calibre3 pcalibre1">L3 cache holds cache lines retrieved from memory.</p></li>
</ul></li>
<li id="P7000497027000000000000000043C87" data-uri="chapter06.xhtml#P7000497027000000000000000043C87" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C88" data-uri="chapter06.xhtml#P7000497027000000000000000043C88" class="pcalibre calibre3 pcalibre1">L4: Main memory (DRAM)</p>
<ul id="P7000497027000000000000000043C89" data-uri="chapter06.xhtml#P7000497027000000000000000043C89" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C8A" data-uri="chapter06.xhtml#P7000497027000000000000000043C8A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C8B" data-uri="chapter06.xhtml#P7000497027000000000000000043C8B" class="pcalibre calibre3 pcalibre1">Main memory holds disk blocks retrieved from local disks.</p></li>
</ul></li>
<li id="P7000497027000000000000000043C8C" data-uri="chapter06.xhtml#P7000497027000000000000000043C8C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C8D" data-uri="chapter06.xhtml#P7000497027000000000000000043C8D" class="pcalibre calibre3 pcalibre1">L5: Local secondary storage (local disks)</p>
<ul id="P7000497027000000000000000043C8E" data-uri="chapter06.xhtml#P7000497027000000000000000043C8E" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000043C8F" data-uri="chapter06.xhtml#P7000497027000000000000000043C8F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C90" data-uri="chapter06.xhtml#P7000497027000000000000000043C90" class="pcalibre calibre3 pcalibre1">Local disks hold files retrieved from disks on remote network server.</p></li>
</ul></li>
<li id="P7000497027000000000000000043C91" data-uri="chapter06.xhtml#P7000497027000000000000000043C91" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043C92" data-uri="chapter06.xhtml#P7000497027000000000000000043C92" class="pcalibre calibre3 pcalibre1">L6: Remote secondary storage (distributed file systems, Web servers)</p></li>
</ul>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043C93" data-uri="chapter06.xhtml#P7000497027000000000000000043C93">In one of the happier coincidences of computing, these fundamental properties of hardware and software complement each other beautifully. Their complementary nature suggests an approach for organizing memory systems, known as the <i class="calibre5 pcalibre pcalibre1">memory hierarchy</i>, that is used in all modern computer systems. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000054F7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.21</span></a> shows a typical memory hierarchy.</p>
<p id="P7000497027000000000000000043C94" data-uri="chapter06.xhtml#P7000497027000000000000000043C94" class="pcalibre1 pcalibre calibre2">In general, the storage devices get slower, cheaper, and larger as we move from higher to lower <i class="calibre5 pcalibre pcalibre1">levels.</i> At the highest level (L0) are a small number of fast CPU registers that the CPU can access in a single clock cycle. Next are one or more small to moderate-size SRAM-based cache memories that can be accessed in a few CPU clock cycles. These are followed by a large DRAM-based main memory that can be accessed in tens to hundreds of clock cycles. Next are slow but enormous local disks. Finally, some systems even include an additional level of disks on remote servers that can be accessed over a network. For example, distributed file systems such as the Andrew File System (AFS) or the Network File System (NFS) allow a program to access files that are stored on remote network-connected servers. Similarly, the World Wide Web allows programs to access remote files stored on Web servers anywhere in the world.</p>
<section id="P70004970270000000000000000054FE" data-uri="chapter06.xhtml#P70004970270000000000000000054FE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043C95" data-uri="chapter06.xhtml#P7000497027000000000000000043C95" epub:type="title"><span class="pcalibre label pcalibre1">6.3.1 </span>Caching in the Memory Hierarchy</h1></header>
<p id="P7000497027000000000000000043C96" data-uri="chapter06.xhtml#P7000497027000000000000000043C96" class="pcalibre1 pcalibre calibre2">In general, a <i class="calibre5 pcalibre pcalibre1">cache</i> (pronounced "cash") is a small, fast storage device that acts as a staging area for the data objects stored in a larger, slower device. The process of using a cache is known as <i class="calibre5 pcalibre pcalibre1">caching</i> (pronounced "cashing").</p>
<p id="P7000497027000000000000000043C97" data-uri="chapter06.xhtml#P7000497027000000000000000043C97" class="pcalibre1 pcalibre calibre2">The central idea of a memory hierarchy is that for each <var class="calibre5 pcalibre pcalibre1">k</var>, the faster and smaller storage device at level <var class="calibre5 pcalibre pcalibre1">k</var> serves as a cache for the larger and slower storage device</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000005502" data-uri="chapter06.xhtml#P7000497027000000000000000005502"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000043C98" data-uri="chapter06.xhtml#P7000497027000000000000000043C98" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005504" title="611" data-uri="chapter06.xhtml#P7000497027000000000000000005504" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Other memory hierarchies</h1></header>
<p id="P7000497027000000000000000043C99" data-uri="chapter06.xhtml#P7000497027000000000000000043C99" class="pcalibre calibre3 pcalibre1">We have shown you one example of a memory hierarchy, but other combinations are possible, and indeed common. For example, many sites, including Google datacenters, back up local disks onto archival magnetic tapes. At some of these sites, human operators manually mount the tapes onto tape drives as needed. At other sites, tape robots handle this task automatically. In either case, the collection of tapes represents a level in the memory hierarchy, below the local disk level, and the same general principles apply. Tapes are cheaper per byte than disks, which allows sites to archive multiple snapshots of their local disks. The trade-off is that tapes take longer to access than disks. As another example, solid state disks are playing an increasingly important role in the memory hierarchy, bridging the gulf between DRAM and rotating disk.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000005506" data-uri="chapter06.xhtml#P7000497027000000000000000005506">
<img alt="A diagram illustrates the basic principle of caching." id="P7000497027000000000000000043C9A" data-uri="P700049702700000000000000000B737" src="../images/p611-1.png" class="calibre207 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000043C9B" data-uri="chapter06.xhtml#P7000497027000000000000000043C9B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043C9C" data-uri="chapter06.xhtml#P7000497027000000000000000043C9C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">6.22 </span>The basic principle of caching in a memory hierarchy.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000023F9A" data-uri="chapter06.xhtml#P7000497027000000000000000023F9A">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000043C9D" data-uri="chapter06.xhtml#P7000497027000000000000000043C9D" class="pcalibre calibre3 pcalibre1">A diagram illustrates data copied between levels in block-size transfer units, between level k and level k+1. Level k+1 includes rows of blocks, with 0, 1, 2, and 3 on top, 4, 5, 6, and 7 in the second row, 8, 9, 10, and 11 in the third row, and 12, 13, 14, and 15 in the bottom row. This shows that a larger, slower, cheaper storage device at level k+1 is partitioned into blocks. Level k, containing a row with 4, 9, 14, and 3, shows that smaller, faster, more expensive device at level k caches a subset of the blocks from level k+1.</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043C9E" data-uri="chapter06.xhtml#P7000497027000000000000000043C9E">at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1. In other words, each level in the hierarchy caches data objects from the next lower level. For example, the local disk serves as a cache for files (such as Web pages) retrieved from remote disks over the network, the main memory serves as a cache for data on the local disks, and so on, until we get to the smallest cache of all, the set of CPU registers.</p>
<p id="P7000497027000000000000000043C9F" data-uri="chapter06.xhtml#P7000497027000000000000000043C9F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a> shows the general concept of caching in a memory hierarchy. The storage at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 is partitioned into contiguous chunks of data objects called <i class="calibre5 pcalibre pcalibre1">blocks.</i> Each block has a unique address or name that distinguishes it from other blocks. Blocks can be either fixed size (the usual case) or variable size (e.g., the remote HTML files stored on Web servers). For example, the level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 storage in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a> is partitioned into 16 fixed-size blocks, numbered 0 to 15.</p>
<p id="P7000497027000000000000000043CA0" data-uri="chapter06.xhtml#P7000497027000000000000000043CA0" class="pcalibre1 pcalibre calibre2">Similarly, the storage at level <var class="calibre5 pcalibre pcalibre1">k</var> is partitioned into a smaller set of blocks that are the same size as the blocks at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1. At any point in time, the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> contains copies of a subset of the blocks from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1. For example, in <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000550D" title="612" data-uri="chapter06.xhtml#P700049702700000000000000000550D" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a>, the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> has room for four blocks and currently contains copies of blocks 4, 9,14, and 3.</p>
<p id="P7000497027000000000000000043CA1" data-uri="chapter06.xhtml#P7000497027000000000000000043CA1" class="pcalibre1 pcalibre calibre2">Data are always copied back and forth between level <var class="calibre5 pcalibre pcalibre1">k</var> and level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 in block-size <i class="calibre5 pcalibre pcalibre1">transfer units.</i> It is important to realize that while the block size is fixed between any particular pair of adjacent levels in the hierarchy, other pairs of levels can have different block sizes. For example, in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000054F7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.21</span></a>, transfers between L1 and L0 typically use word-size blocks. Transfers between L2 and L1 (and L3 and L2, and L4 and L3) typically use blocks of tens of bytes. And transfers between L5 and L4 use blocks with hundreds or thousands of bytes. In general, devices lower in the hierarchy (further from the CPU) have longer access times, and thus tend to use larger block sizes in order to amortize these longer access times.</p>
<section id="P700049702700000000000000000550F" data-uri="chapter06.xhtml#P700049702700000000000000000550F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000043CA2" data-uri="chapter06.xhtml#P7000497027000000000000000043CA2" epub:type="title">Cache Hits</h1></header>
<p id="P7000497027000000000000000043CA3" data-uri="chapter06.xhtml#P7000497027000000000000000043CA3" class="pcalibre1 pcalibre calibre2">When a program needs a particular data object <var class="calibre5 pcalibre pcalibre1">d</var> from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1, it first looks for <var class="calibre5 pcalibre pcalibre1">d</var> in one of the blocks currently stored at level <i class="calibre5 pcalibre pcalibre1">k.</i> If <var class="calibre5 pcalibre pcalibre1">d</var> happens to be cached at level <var class="calibre5 pcalibre pcalibre1">k</var>, then we have what is called a <i class="calibre5 pcalibre pcalibre1">cache hit.</i> The program reads <var class="calibre5 pcalibre pcalibre1">d</var> directly from level <var class="calibre5 pcalibre pcalibre1">k</var>, which by the nature of the memory hierarchy is faster than reading <var class="calibre5 pcalibre pcalibre1">d</var> from level <i class="calibre5 pcalibre pcalibre1">k + 1.</i> For example, a program with good temporal locality might read a data object from block 14, resulting in a cache hit from level <i class="calibre5 pcalibre pcalibre1">k.</i></p>
</section>
<section id="P7000497027000000000000000005512" data-uri="chapter06.xhtml#P7000497027000000000000000005512" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000043CA4" data-uri="chapter06.xhtml#P7000497027000000000000000043CA4" epub:type="title">Cache Misses</h1></header>
<p id="P7000497027000000000000000043CA5" data-uri="chapter06.xhtml#P7000497027000000000000000043CA5" class="pcalibre1 pcalibre calibre2">If, on the other hand, the data object <var class="calibre5 pcalibre pcalibre1">d</var> is not cached at level <var class="calibre5 pcalibre pcalibre1">k</var>, then we have what is called a <i class="calibre5 pcalibre pcalibre1">cache miss.</i> When there is a miss, the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> fetches the block containing <var class="calibre5 pcalibre pcalibre1">d</var> from the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1, possibly overwriting an existing block if the level <var class="calibre5 pcalibre pcalibre1">k</var> cache is already full.</p>
<p id="P7000497027000000000000000043CA6" data-uri="chapter06.xhtml#P7000497027000000000000000043CA6" class="pcalibre1 pcalibre calibre2">This process of overwriting an existing block is known as <i class="calibre5 pcalibre pcalibre1">replacing</i> or <i class="calibre5 pcalibre pcalibre1">evicting</i> the block. The block that is evicted is sometimes referred to as a <i class="calibre5 pcalibre pcalibre1">victim block.</i> The decision about which block to replace is governed by the cache's <i class="calibre5 pcalibre pcalibre1">replacement policy.</i> For example, a cache with a <i class="calibre5 pcalibre pcalibre1">random replacement policy</i> would choose a random victim block. A cache with a <i class="calibre5 pcalibre pcalibre1">least recently used (LRU)</i> replacement policy would choose the block that was last accessed the furthest in the past.</p>
<p id="P7000497027000000000000000043CA7" data-uri="chapter06.xhtml#P7000497027000000000000000043CA7" class="pcalibre1 pcalibre calibre2">After the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> has fetched the block from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1, the program can read <var class="calibre5 pcalibre pcalibre1">d</var> from level <var class="calibre5 pcalibre pcalibre1">k</var> as before. For example, in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a>, reading a data object from block 12 in the level <var class="calibre5 pcalibre pcalibre1">k</var> cache would result in a cache miss because block 12 is not currently stored in the level <var class="calibre5 pcalibre pcalibre1">k</var> cache. Once it has been copied from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 to level <var class="calibre5 pcalibre pcalibre1">k</var>, block 12 will remain there in expectation of later accesses.</p>
</section>
<section id="P7000497027000000000000000005517" data-uri="chapter06.xhtml#P7000497027000000000000000005517" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000043CA8" data-uri="chapter06.xhtml#P7000497027000000000000000043CA8" epub:type="title">Kinds of Cache Misses</h1></header>
<p id="P7000497027000000000000000043CA9" data-uri="chapter06.xhtml#P7000497027000000000000000043CA9" class="pcalibre1 pcalibre calibre2">It is sometimes helpful to distinguish between different kinds of cache misses. If the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> is empty, then any access of any data object will miss. An empty cache is sometimes referred to as a <i class="calibre5 pcalibre pcalibre1">cold cache</i>, and misses of this kind are called <i class="calibre5 pcalibre pcalibre1">compulsory misses</i> or <i class="calibre5 pcalibre pcalibre1">cold misses.</i> Cold misses are important because they are often transient events that might not occur in steady state, after the cache has been <i class="calibre5 pcalibre pcalibre1">warmed up</i> by repeated memory accesses.</p>
<p id="P7000497027000000000000000043CAA" data-uri="chapter06.xhtml#P7000497027000000000000000043CAA" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000551B" title="613" data-uri="chapter06.xhtml#P700049702700000000000000000551B" epub:type="pagebreak"></span>Whenever there is a miss, the cache at level <var class="calibre5 pcalibre pcalibre1">k</var> must implement some <i class="calibre5 pcalibre pcalibre1">placement policy</i> that determines where to place the block it has retrieved from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1. The most flexible placement policy is to allow any block from level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 to be stored in any block at level <i class="calibre5 pcalibre pcalibre1">k.</i> For caches high in the memory hierarchy (close to the CPU) that are implemented in hardware and where speed is at a premium, this policy is usually too expensive to implement because randomly placed blocks are expensive to locate.</p>
<p id="P7000497027000000000000000043CAB" data-uri="chapter06.xhtml#P7000497027000000000000000043CAB" class="pcalibre1 pcalibre calibre2">Thus, hardware caches typically implement a simpler placement policy that restricts a particular block at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 to a small subset (sometimes a singleton) of the blocks at level <i class="calibre5 pcalibre pcalibre1">k.</i> For example, in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a>, we might decide that a block <var class="calibre5 pcalibre pcalibre1">i</var> at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 must be placed in block (<var class="calibre5 pcalibre pcalibre1">i</var> mod 4) at level <i class="calibre5 pcalibre pcalibre1">k.</i> For example, blocks 0, 4, 8, and 12 at level <var class="calibre5 pcalibre pcalibre1">k</var> + 1 would map to block 0 at level <i class="calibre5 pcalibre pcalibre1">k;</i> blocks 1, 5, 9, and 13 would map to block 1; and so on. Notice that our example cache in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a> uses this policy.</p>
<p id="P7000497027000000000000000043CAC" data-uri="chapter06.xhtml#P7000497027000000000000000043CAC" class="pcalibre1 pcalibre calibre2">Restrictive placement policies of this kind lead to a type of miss known as a <i class="calibre5 pcalibre pcalibre1">conflict miss</i>, in which the cache is large enough to hold the referenced data objects, but because they map to the same cache block, the cache keeps missing. For example, in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005506"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.22</span></a>, if the program requests block 0, then block 8, then block 0, then block 8, and so on, each of the references to these two blocks would miss in the cache at level <var class="calibre5 pcalibre pcalibre1">k</var>, even though this cache can hold a total of four blocks.</p>
<p id="P7000497027000000000000000043CAD" data-uri="chapter06.xhtml#P7000497027000000000000000043CAD" class="pcalibre1 pcalibre calibre2">Programs often run as a sequence of phases (e.g., loops) where each phase accesses some reasonably constant set of cache blocks. For example, a nested loop might access the elements of the same array over and over again. This set of blocks is called the <i class="calibre5 pcalibre pcalibre1">working set</i> of the phase. When the size of the working set exceeds the size of the cache, the cache will experience what are known as <i class="calibre5 pcalibre pcalibre1">capacity misses.</i> In other words, the cache is just too small to handle this particular working set.</p>
</section>
<section id="P700049702700000000000000000551F" data-uri="chapter06.xhtml#P700049702700000000000000000551F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000043CAE" data-uri="chapter06.xhtml#P7000497027000000000000000043CAE" epub:type="title">Cache Management</h1></header>
<p id="P7000497027000000000000000043CAF" data-uri="chapter06.xhtml#P7000497027000000000000000043CAF" class="pcalibre1 pcalibre calibre2">As we have noted, the essence of the memory hierarchy is that the storage device at each level is a cache for the next lower level. At each level, some form of logic must <i class="calibre5 pcalibre pcalibre1">manage</i> the cache. By this we mean that something has to partition the cache storage into blocks, transfer blocks between different levels, decide when there are hits and misses, and then deal with them. The logic that manages the cache can be hardware, software, or a combination of the two.</p>
<p id="P7000497027000000000000000043CB0" data-uri="chapter06.xhtml#P7000497027000000000000000043CB0" class="pcalibre1 pcalibre calibre2">For example, the compiler manages the register file, the highest level of the cache hierarchy. It decides when to issue loads when there are misses, and determines which register to store the data in. The caches at levels L1, L2, and L3 are managed entirely by hardware logic built into the caches. In a system with virtual memory, the DRAM main memory serves as a cache for data blocks stored on disk, and is managed by a combination of operating system software and address translation hardware on the CPU. For a machine with a distributed file system such as AFS, the local disk serves as a cache that is managed by the AFS client process running on the local machine. In most cases, caches operate automatically and do not require any specific or explicit actions from the program.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000005523" data-uri="chapter06.xhtml#P7000497027000000000000000005523">
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000043CB1" data-uri="chapter06.xhtml#P7000497027000000000000000043CB1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000043CB2" data-uri="chapter06.xhtml#P7000497027000000000000000043CB2" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000005526" title="614" data-uri="chapter06.xhtml#P7000497027000000000000000005526" epub:type="pagebreak"></span>Type</th>
<th id="P7000497027000000000000000043CB3" data-uri="chapter06.xhtml#P7000497027000000000000000043CB3" class="calibre18 pcalibre pcalibre1">What cached</th>
<th id="P7000497027000000000000000043CB4" data-uri="chapter06.xhtml#P7000497027000000000000000043CB4" class="calibre18 pcalibre pcalibre1">Where cached</th>
<th id="P7000497027000000000000000043CB5" data-uri="chapter06.xhtml#P7000497027000000000000000043CB5" class="calibre18 pcalibre pcalibre1">Latency (cycles)</th>
<th id="P7000497027000000000000000043CB6" data-uri="chapter06.xhtml#P7000497027000000000000000043CB6" class="calibre18 pcalibre pcalibre1">Managed by</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CB7" data-uri="chapter06.xhtml#P7000497027000000000000000043CB7" class="calibre20 pcalibre pcalibre1">CPU registers</td>
<td id="P7000497027000000000000000043CB8" data-uri="chapter06.xhtml#P7000497027000000000000000043CB8" class="calibre20 pcalibre pcalibre1">4-byte or 8-byte words</td>
<td id="P7000497027000000000000000043CB9" data-uri="chapter06.xhtml#P7000497027000000000000000043CB9" class="calibre20 pcalibre pcalibre1">On-chip CPU registers</td>
<td id="P7000497027000000000000000043CBA" data-uri="chapter06.xhtml#P7000497027000000000000000043CBA" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P7000497027000000000000000043CBB" data-uri="chapter06.xhtml#P7000497027000000000000000043CBB" class="calibre20 pcalibre pcalibre1">Compiler</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CBC" data-uri="chapter06.xhtml#P7000497027000000000000000043CBC" class="calibre20 pcalibre pcalibre1">TLB</td>
<td id="P7000497027000000000000000043CBD" data-uri="chapter06.xhtml#P7000497027000000000000000043CBD" class="calibre20 pcalibre pcalibre1">Address translations</td>
<td id="P7000497027000000000000000043CBE" data-uri="chapter06.xhtml#P7000497027000000000000000043CBE" class="calibre20 pcalibre pcalibre1">On-chip TLB</td>
<td id="P7000497027000000000000000043CBF" data-uri="chapter06.xhtml#P7000497027000000000000000043CBF" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P7000497027000000000000000043CC0" data-uri="chapter06.xhtml#P7000497027000000000000000043CC0" class="calibre20 pcalibre pcalibre1">Hardware MMU</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CC1" data-uri="chapter06.xhtml#P7000497027000000000000000043CC1" class="calibre20 pcalibre pcalibre1">L1 cache</td>
<td id="P7000497027000000000000000043CC2" data-uri="chapter06.xhtml#P7000497027000000000000000043CC2" class="calibre20 pcalibre pcalibre1">64-byte blocks</td>
<td id="P7000497027000000000000000043CC3" data-uri="chapter06.xhtml#P7000497027000000000000000043CC3" class="calibre20 pcalibre pcalibre1">On-chip L1 cache</td>
<td id="P7000497027000000000000000043CC4" data-uri="chapter06.xhtml#P7000497027000000000000000043CC4" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000043CC5" data-uri="chapter06.xhtml#P7000497027000000000000000043CC5" class="calibre20 pcalibre pcalibre1">Hardware</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CC6" data-uri="chapter06.xhtml#P7000497027000000000000000043CC6" class="calibre20 pcalibre pcalibre1">L2 cache</td>
<td id="P7000497027000000000000000043CC7" data-uri="chapter06.xhtml#P7000497027000000000000000043CC7" class="calibre20 pcalibre pcalibre1">64-byte blocks</td>
<td id="P7000497027000000000000000043CC8" data-uri="chapter06.xhtml#P7000497027000000000000000043CC8" class="calibre20 pcalibre pcalibre1">On-chip L2 cache</td>
<td id="P7000497027000000000000000043CC9" data-uri="chapter06.xhtml#P7000497027000000000000000043CC9" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P7000497027000000000000000043CCA" data-uri="chapter06.xhtml#P7000497027000000000000000043CCA" class="calibre20 pcalibre pcalibre1">Hardware</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CCB" data-uri="chapter06.xhtml#P7000497027000000000000000043CCB" class="calibre20 pcalibre pcalibre1">L3 cache</td>
<td id="P7000497027000000000000000043CCC" data-uri="chapter06.xhtml#P7000497027000000000000000043CCC" class="calibre20 pcalibre pcalibre1">64-byte blocks</td>
<td id="P7000497027000000000000000043CCD" data-uri="chapter06.xhtml#P7000497027000000000000000043CCD" class="calibre20 pcalibre pcalibre1">On-chip L3 cache</td>
<td id="P7000497027000000000000000043CCE" data-uri="chapter06.xhtml#P7000497027000000000000000043CCE" class="calibre20 pcalibre pcalibre1">50</td>
<td id="P7000497027000000000000000043CCF" data-uri="chapter06.xhtml#P7000497027000000000000000043CCF" class="calibre20 pcalibre pcalibre1">Hardware</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CD0" data-uri="chapter06.xhtml#P7000497027000000000000000043CD0" class="calibre20 pcalibre pcalibre1">Virtual memory</td>
<td id="P7000497027000000000000000043CD1" data-uri="chapter06.xhtml#P7000497027000000000000000043CD1" class="calibre20 pcalibre pcalibre1">4-KB pages</td>
<td id="P7000497027000000000000000043CD2" data-uri="chapter06.xhtml#P7000497027000000000000000043CD2" class="calibre20 pcalibre pcalibre1">Main memory</td>
<td id="P7000497027000000000000000043CD3" data-uri="chapter06.xhtml#P7000497027000000000000000043CD3" class="calibre20 pcalibre pcalibre1">200</td>
<td id="P7000497027000000000000000043CD4" data-uri="chapter06.xhtml#P7000497027000000000000000043CD4" class="calibre20 pcalibre pcalibre1">Hardware + OS</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CD5" data-uri="chapter06.xhtml#P7000497027000000000000000043CD5" class="calibre20 pcalibre pcalibre1">Buffer cache</td>
<td id="P7000497027000000000000000043CD6" data-uri="chapter06.xhtml#P7000497027000000000000000043CD6" class="calibre20 pcalibre pcalibre1">Parts of files</td>
<td id="P7000497027000000000000000043CD7" data-uri="chapter06.xhtml#P7000497027000000000000000043CD7" class="calibre20 pcalibre pcalibre1">Main memory</td>
<td id="P7000497027000000000000000043CD8" data-uri="chapter06.xhtml#P7000497027000000000000000043CD8" class="calibre20 pcalibre pcalibre1">200</td>
<td id="P7000497027000000000000000043CD9" data-uri="chapter06.xhtml#P7000497027000000000000000043CD9" class="calibre20 pcalibre pcalibre1">OS</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CDA" data-uri="chapter06.xhtml#P7000497027000000000000000043CDA" class="calibre20 pcalibre pcalibre1">Disk cache</td>
<td id="P7000497027000000000000000043CDB" data-uri="chapter06.xhtml#P7000497027000000000000000043CDB" class="calibre20 pcalibre pcalibre1">Disk sectors</td>
<td id="P7000497027000000000000000043CDC" data-uri="chapter06.xhtml#P7000497027000000000000000043CDC" class="calibre20 pcalibre pcalibre1">Disk controller</td>
<td id="P7000497027000000000000000043CDD" data-uri="chapter06.xhtml#P7000497027000000000000000043CDD" class="calibre20 pcalibre pcalibre1">100,000</td>
<td id="P7000497027000000000000000043CDE" data-uri="chapter06.xhtml#P7000497027000000000000000043CDE" class="calibre20 pcalibre pcalibre1">Controller firmware</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CDF" data-uri="chapter06.xhtml#P7000497027000000000000000043CDF" class="calibre20 pcalibre pcalibre1">Network cache</td>
<td id="P7000497027000000000000000043CE0" data-uri="chapter06.xhtml#P7000497027000000000000000043CE0" class="calibre20 pcalibre pcalibre1">Parts of files</td>
<td id="P7000497027000000000000000043CE1" data-uri="chapter06.xhtml#P7000497027000000000000000043CE1" class="calibre20 pcalibre pcalibre1">Local disk</td>
<td id="P7000497027000000000000000043CE2" data-uri="chapter06.xhtml#P7000497027000000000000000043CE2" class="calibre20 pcalibre pcalibre1">10,000,000</td>
<td id="P7000497027000000000000000043CE3" data-uri="chapter06.xhtml#P7000497027000000000000000043CE3" class="calibre20 pcalibre pcalibre1">NFS client</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CE4" data-uri="chapter06.xhtml#P7000497027000000000000000043CE4" class="calibre20 pcalibre pcalibre1">Browser cache</td>
<td id="P7000497027000000000000000043CE5" data-uri="chapter06.xhtml#P7000497027000000000000000043CE5" class="calibre20 pcalibre pcalibre1">Web pages</td>
<td id="P7000497027000000000000000043CE6" data-uri="chapter06.xhtml#P7000497027000000000000000043CE6" class="calibre20 pcalibre pcalibre1">Local disk</td>
<td id="P7000497027000000000000000043CE7" data-uri="chapter06.xhtml#P7000497027000000000000000043CE7" class="calibre20 pcalibre pcalibre1">10,000,000</td>
<td id="P7000497027000000000000000043CE8" data-uri="chapter06.xhtml#P7000497027000000000000000043CE8" class="calibre20 pcalibre pcalibre1">Web browser</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000043CE9" data-uri="chapter06.xhtml#P7000497027000000000000000043CE9" class="calibre20 pcalibre pcalibre1">Web cache</td>
<td id="P7000497027000000000000000043CEA" data-uri="chapter06.xhtml#P7000497027000000000000000043CEA" class="calibre20 pcalibre pcalibre1">Web pages</td>
<td id="P7000497027000000000000000043CEB" data-uri="chapter06.xhtml#P7000497027000000000000000043CEB" class="calibre20 pcalibre pcalibre1">Remote server disks</td>
<td id="P7000497027000000000000000043CEC" data-uri="chapter06.xhtml#P7000497027000000000000000043CEC" class="calibre20 pcalibre pcalibre1">1,000,000,000</td>
<td id="P7000497027000000000000000043CED" data-uri="chapter06.xhtml#P7000497027000000000000000043CED" class="calibre20 pcalibre pcalibre1">Web proxy server</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000043CEE" data-uri="chapter06.xhtml#P7000497027000000000000000043CEE" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000043CEF" data-uri="chapter06.xhtml#P7000497027000000000000000043CEF" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">6.23 </span>The ubiquity of caching in modern computer systems.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000043CF0" data-uri="chapter06.xhtml#P7000497027000000000000000043CF0"><p id="P7000497027000000000000000043CF1" data-uri="chapter06.xhtml#P7000497027000000000000000043CF1" class="pcalibre calibre3 pcalibre1">Acronyms: TLB: translation lookaside buffer; MMU: memory management unit; OS: operating system; NFS: network file system.</p></div></figcaption>
</figure>
</section>
</section>
<section id="P7000497027000000000000000005566" data-uri="chapter06.xhtml#P7000497027000000000000000005566" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043CF2" data-uri="chapter06.xhtml#P7000497027000000000000000043CF2" epub:type="title"><span class="pcalibre label pcalibre1">6.3.2 </span>Summary of Memory Hierarchy Concepts</h1></header>
<p id="P7000497027000000000000000043CF3" data-uri="chapter06.xhtml#P7000497027000000000000000043CF3" class="pcalibre1 pcalibre calibre2">To summarize, memory hierarchies based on caching work because slower storage is cheaper than faster storage and because programs tend to exhibit locality:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000043CF4" data-uri="chapter06.xhtml#P7000497027000000000000000043CF4">
<li id="P7000497027000000000000000043CF5" data-uri="chapter06.xhtml#P7000497027000000000000000043CF5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043CF6" data-uri="chapter06.xhtml#P7000497027000000000000000043CF6" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Exploiting temporal locality. </span>Because of temporal locality, the same data objects are likely to be reused multiple times. Once a data object has been copied into the cache on the first miss, we can expect a number of subsequent hits on that object. Since the cache is faster than the storage at the next lower level, these subsequent hits can be served much faster than the original miss.</p></li>
<li id="P7000497027000000000000000043CF7" data-uri="chapter06.xhtml#P7000497027000000000000000043CF7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000043CF8" data-uri="chapter06.xhtml#P7000497027000000000000000043CF8" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Exploiting spatial locality. </span>Blocks usually contain multiple data objects. Because of spatial locality, we can expect that the cost of copying a block after a miss will be amortized by subsequent references to other objects within that block.</p></li>
</ul>
<p id="P7000497027000000000000000043CF9" data-uri="chapter06.xhtml#P7000497027000000000000000043CF9" class="pcalibre1 pcalibre calibre2">Caches are used everywhere in modern systems. As you can see from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005523"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.23</span></a>, caches are used in CPU chips, operating systems, distributed file systems, and on the World Wide Web. They are built from and managed by various combinations of hardware and software. Note that there are a number of terms and acronyms in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005523"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">6.23</span></a> that we haven't covered yet. We include them here to demonstrate how common caches are.</p>
</section>
</section></body></html>
