<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>33.3 Using select()</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part354.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part356.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">33.3 Using <span class="s51">select()</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">To make this more concrete, let’s examine how to use <span class="s41">select() </span>to see which network descriptors have incoming messages upon them. Figure</p><p class="s28" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">33.1 <span style=" color: #231F20;">shows a simple example.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_499.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_500.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">This code is actually fairly simple to understand. After some initial- ization, the server enters an infinite loop. Inside the loop, it uses the <span class="s41">FD ZERO() </span>macro to first clear the set of file descriptors, and then uses <span class="s41">FD SET() </span>to include all of the file descriptors from <span class="s41">minFD </span>to <span class="s41">maxFD </span>in the set. This set of descriptors might represent, for example, all of the net-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">#include &lt;stdio.h&gt;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">2  <span class="s38">#include &lt;stdlib.h&gt;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3  <span class="s38">#include &lt;sys/time.h&gt;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4  <span class="s38">#include &lt;sys/types.h&gt;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">5  <span class="s38">#include &lt;unistd.h&gt;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">6</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">7  <span class="s38">int main(void) {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8     <span class="s38">// open and set up a bunch of sockets (not shown)</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9    <span class="s38">// main loop</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">10    <span class="s38">while (1) {</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">11       <span class="s38">// initialize the fd_set to all zero</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">12       <span class="s38">fd_set readFDs;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">13       <span class="s38">FD_ZERO(&amp;readFDs);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">14</p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">15       <span class="s38">// now set the bits for the descriptors</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">16       <span class="s38">// this server is interested in</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">17       <span class="s38">// (for simplicity, all of them from min to max)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">18       <span class="s38">int fd;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">19       <span class="s38">for (fd = minFD; fd &lt; maxFD; fd++)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">20          <span class="s38">FD_SET(fd, &amp;readFDs);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">21</p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">22       <span class="s38">// do the select</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">23       <span class="s38">int rc = select(maxFD+1, &amp;readFDs, NULL, NULL, NULL);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">24</p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">25       <span class="s38">// check which actually have data using FD_ISSET()</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">26       <span class="s38">int fd;</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">27       <span class="s38">for (fd = minFD; fd &lt; maxFD; fd++)</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">28          <span class="s38">if (FD_ISSET(fd, &amp;readFDs))</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">29             <span class="s38">processFD(fd);</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">30    <span class="s38">}</span></p><p class="s37" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">31  <span class="s38">}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">Figure 33.1: <b>Simple Code using </b><span class="s52">select()</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_501.png"/></span></p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: right;">work sockets to which the server is paying attention. Finally, the server calls <span class="s41">select() </span>to see which of the connections have data available upon them. By then using <span class="s41">FD ISSET() </span>in a loop, the event server can see which of the descriptors have data ready and process the incoming data. Of course, a real server would be more complicated than this, and require logic to use when sending messages, issuing disk I/O, and many other details. For further information, see Stevens and Rago [SR05] for API information, or Pai et. al or Welsh et al. for a good overview of the</p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">general flow of event-based servers [PDZ99, WCB01].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part354.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part356.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
