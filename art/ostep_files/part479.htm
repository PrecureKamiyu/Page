<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>43.1 Writing To Disk Sequentially</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part478.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part480.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 2pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">43.1 Writing To Disk Sequentially</p><p style="text-indent: 0pt;text-align: left;"><span><img width="313" height="1" alt="image" src="Image_629.png"/></span></p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">We thus have our first challenge: how do we transform all updates to file-system state into a series of sequential writes to disk? To understand this better, let’s use a simple example. Imagine we are writing a data block <span class="s43">D </span>to a file. Writing the data block to disk might result in the following on-disk layout, with <span class="s43">D </span>written at disk address <span class="s43">A</span><span class="s44">0</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="text-indent: 0pt;text-align: center;">D</p><p style="padding-left: 111pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="313" height="1" alt="image" src="Image_630.png"/></span></p><p class="s91" style="padding-left: 107pt;text-indent: 0pt;text-align: left;">A0</p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">However, when a user writes a data block, it is not only data that gets written to disk; there is also other <b>metadata </b>that needs to be updated. In this case, let’s also write the <b>inode </b>(<span class="s43">I</span>) of the file to disk, and have it point to the data block <span class="s43">D</span>. When written to disk, the data block and inode would look something like this (note that the inode looks as big as the data block, which generally isn’t the case; in most systems, data blocks are 4 KB in size, whereas an inode is much smaller, around 128 bytes):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="313" height="1" alt="image" src="Image_631.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="313" height="13" alt="image" src="Image_632.png"/></span></p><p class="s91" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">blk[0]:A0</p><p class="s76" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">I</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="text-indent: 0pt;text-align: center;">D</p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="padding-left: 107pt;text-indent: 0pt;text-align: left;">A0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">IP</span>: D<span class="s7">ETAILS </span>M<span class="s7">ATTER</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">All interesting systems are comprised of a few general ideas and a number of details. Sometimes, when you are learning about these sys- tems, you think to yourself “Oh, I get the general idea; the rest is just de- tails,” and you use this to only half-learn how things really work. Don’t do this! Many times, the details are critical. As we’ll see with LFS, the general idea is easy to understand, but to really build a working system, you have to think through <i>all </i>of the tricky cases.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">This basic idea, of simply writing all updates (such as data blocks, inodes, etc.) to the disk sequentially, sits at the heart of LFS. If you un- derstand this, you get the basic idea. But as with all complicated systems, the devil is in the details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part478.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part480.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
