<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>5.13 Life in the Real World: Performance Improvement Techniques</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000004FF4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000437A0" data-uri="chapter05.xhtml#P70004970270000000000000000437A0" epub:type="title"><span class="pcalibre label pcalibre1">5.13 </span>Life in the Real World: Performance Improvement Techniques</h1></header>
<p id="P70004970270000000000000000437A1" data-uri="chapter05.xhtml#P70004970270000000000000000437A1" class="pcalibre1 pcalibre calibre2">Although we have only considered a limited set of applications, we can draw important lessons on how to write efficient code. We have described a number of basic strategies for optimizing program performance:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000437A2" data-uri="chapter05.xhtml#P70004970270000000000000000437A2">
<li id="P70004970270000000000000000437A3" data-uri="chapter05.xhtml#P70004970270000000000000000437A3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437A4" data-uri="chapter05.xhtml#P70004970270000000000000000437A4" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">High-level design. </span>Choose appropriate algorithms and data structures for the problem at hand. Be especially vigilant to avoid algorithms or coding techniques that yield asymptotically poor performance.</p></li>
<li id="P70004970270000000000000000437A5" data-uri="chapter05.xhtml#P70004970270000000000000000437A5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437A6" data-uri="chapter05.xhtml#P70004970270000000000000000437A6" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Basic coding principles. </span>Avoid optimization blockers so that a compiler can generate efficient code.</p>
<ul id="P70004970270000000000000000437A7" data-uri="chapter05.xhtml#P70004970270000000000000000437A7" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000437A8" data-uri="chapter05.xhtml#P70004970270000000000000000437A8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437A9" data-uri="chapter05.xhtml#P70004970270000000000000000437A9" class="calibre13 pcalibre pcalibre1">Eliminate excessive function calls. Move computations out of loops when possible. Consider selective compromises of program modularity to gain greater efficiency.</p></li>
<li id="P70004970270000000000000000437AA" data-uri="chapter05.xhtml#P70004970270000000000000000437AA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437AB" data-uri="chapter05.xhtml#P70004970270000000000000000437AB" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005001" title="562" data-uri="chapter05.xhtml#P7000497027000000000000000005001" epub:type="pagebreak"></span>Eliminate unnecessary memory references. Introduce temporary variables to hold intermediate results. Store a result in an array or global variable only when the final value has been computed.</p></li>
</ul></li>
<li id="P70004970270000000000000000437AC" data-uri="chapter05.xhtml#P70004970270000000000000000437AC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437AD" data-uri="chapter05.xhtml#P70004970270000000000000000437AD" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Low-level optimizations. </span>Structure code to take advantage of the hardware capabilities.</p>
<ul id="P70004970270000000000000000437AE" data-uri="chapter05.xhtml#P70004970270000000000000000437AE" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000437AF" data-uri="chapter05.xhtml#P70004970270000000000000000437AF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437B0" data-uri="chapter05.xhtml#P70004970270000000000000000437B0" class="calibre13 pcalibre pcalibre1">Unroll loops to reduce overhead and to enable further optimizations.</p></li>
<li id="P70004970270000000000000000437B1" data-uri="chapter05.xhtml#P70004970270000000000000000437B1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437B2" data-uri="chapter05.xhtml#P70004970270000000000000000437B2" class="calibre13 pcalibre pcalibre1">Find ways to increase instruction-level parallelism by techniques such as multiple accumulators and reassociation.</p></li>
<li id="P70004970270000000000000000437B3" data-uri="chapter05.xhtml#P70004970270000000000000000437B3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000437B4" data-uri="chapter05.xhtml#P70004970270000000000000000437B4" class="calibre13 pcalibre pcalibre1">Rewrite conditional operations in a functional style to enable compilation via conditional data transfers.</p></li>
</ul></li>
</ul>
<p id="P70004970270000000000000000437B5" data-uri="chapter05.xhtml#P70004970270000000000000000437B5" class="pcalibre1 pcalibre calibre2">A final word of advice to the reader is to be vigilant to avoid introducing errors as you rewrite programs in the interest of efficiency. It is very easy to make mistakes when introducing new variables, changing loop bounds, and making the code more complex overall. One useful technique is to use checking code to test each version of a function as it is being optimized, to ensure no bugs are introduced during this process. Checking code applies a series of tests to the new versions of a function and makes sure they yield the same results as the original. The set of test cases must become more extensive with highly optimized code, since there are more cases to consider. For example, checking code that uses loop unrolling requires testing for many different loop bounds to make sure it handles all of the different possible numbers of single-step iterations required at the end.</p>
</section></body></html>
