<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>8.1   Semi-structured Data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part170.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part172.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">8.1   <span style=" color: #00AEEF;">Semi-structured Data</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Relational database designs have tables with a ﬁxed number of attributes, each of which contains an atomic value. Changes to the schema, such as adding an extra attribute, are rare events, and may require changing of application code. Such a design is well suited to many organizational applications.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">However, there are many application domains that need to store more complex data, whose schema changes often. Fast evolving web applications are an example of such a domain. As an example of the data management needs of such applications, consider the proﬁle of a user which needs to be accessible to a number of diﬀerent applications. The proﬁle contains a variety of attributes, and there are frequent addi- tions to the attributes stored in the proﬁle. Some attributes may contain complex data; for example, an attribute may store a set of interests that can be used to show the user articles related to the set of interests. While such a set can be stored in a normalized fashion in a separate relation, a set data type allows signiﬁcantly more eﬃcient access than does a normalized representation. We study a number of data models that support representation of semi-structured data in this section.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Data exchange is another very important motivation for semi-structured data rep- resentations; it is perhaps even more important than storage for many applications. A popular architecture for building information systems today is to create a web service that allows retrieval of data and to build application code that displays the data and al- lows user interaction. Such application code may be developed as mobile applications,</p><p class="s20" style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">365</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">or it may be written in JavaScript and run on the browser. In either case, the ability to run on the client’s machine allows developers to create very responsive user inter- faces, unlike the early generation of web interfaces where backend servers send <span class="s44">HTML </span>marked-up text to browsers, which display the <span class="s44">HTML</span>. A key to building such applica- tions is the ability to eﬃciently exchange and process complex data between backend servers and clients. We study the <span class="s44">JSON </span>and <span class="s44">XML </span>data models that have been widely adopted for this task.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.1 Overview of Semi-structured Data Models</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The relational data model has been extended in several ways to support the storage and data exchange needs of modern applications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.1.1 Flexible Schema</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Some database systems allow each tuple to potentially have a diﬀerent set of attributes; such a representation is referred to as a <span class="s63">wide column </span>data representation. The set of attributes is not ﬁxed in such a representation; each tuple may have a diﬀerent set of attributes, and new attributes may be added as needed.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A more restricted form of this representation is to have a ﬁxed but very large num- ber of attributes, with each tuple using only those attributes that it needs, leaving the rest with null values; such a representation is called a <span class="s63">sparse column </span>representation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.1.2 Multivalued Data Types</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Many data representations allow attributes to contain non-atomic values. Many databases allow the storage of <span class="s63">sets</span>, <span class="s63">multisets</span>, or <span class="s63">arrays </span>as attribute values. For exam- ple, an application that stores topics of interest to a user, and uses the topics to target articles or advertisements to the user, may store the topics as a set. An example of such a set may be:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s95" style="padding-left: 63pt;text-indent: 0pt;text-align: center;">{ <span class="p">basketball, La Liga, cooking, anime, Jazz </span>}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Although a set-valued attribute can be stored in a normalized form as we saw earlier in Section 6.7.2, doing so provides no beneﬁts in this case, since lookups are always based on the user, and normalization would signiﬁcantly increase the storage and querying overhead.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Some representations allow attributes to store <i>key-value maps</i>, which store key- value pairs. A <span class="s63">key-value map</span>, often just called a <span class="s63">map</span>, is a set of (<i>key, value</i>) pairs, such that each key occurs in at most one element. For example, e-commerce sites often list speciﬁcations or details for each product that they sell, such as brand, model, size, color, and numerous other product-speciﬁc details. The set of speciﬁcations may be diﬀerent for each product. Such speciﬁcations can be represented as a map, where</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">the speciﬁcations form the key, and the associated value is stored with the key. The following example illustrates such a map:</p><p class="s95" style="padding-top: 9pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">{ <span class="p">(brand, Apple), (ID, MacBook Air), (size, 13), (color, silver) </span>}</p><p style="padding-top: 10pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The <span class="s49">put(key, value) </span>method can be used to add a key-value pair, while the <span class="s49">get(key) </span>method can be used to retrieve the value associated with a key. The <span class="s49">delete(key) </span>method can be used to delete a key-value pair from the map.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Arrays are very important for scientiﬁc and monitoring applications. For example, scientiﬁc applications may need to store images, which are basically two-dimensional arrays of pixel values. Scientiﬁc experiments as well as industrial monitoring applica- tions often use multiple sensors that provide readings at regular intervals. Such readings can be viewed as an array. In fact, treating a stream of readings as an array requires far less space than storing each reading as a separate tuple, with attributes such as (<i>time</i>, <i>reading</i>). Not only do we avoid storing the <i>time </i>attribute explicitly (it can be inferred from the oﬀset), but we can also reduce per-tuple overhead in the database, and most importantly we can use compression techniques to reduce the space needed to store an array of readings.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Support for multivalued attribute types was proposed early in the history of databases, and the associated data model was called the <i>non first-normal-form</i>, or <span class="s69">NFNF </span>, data model. Several relational databases such as Oracle and <span class="s44">P</span>ostgre<span class="s44">SQL </span>support set and array types.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">An <span class="s63">array database </span>is a database that provides specialized support for arrays, in- cluding eﬃcient compressed storage, and query language extensions to support oper- ations on arrays. Examples include the Oracle GeoRaster, the <span class="s44">P</span>ost<span class="s44">GIS </span>extension to <span class="s44">P</span>ostgre<span class="s44">SQL</span>, the <span class="s44">S</span>ci<span class="s44">QL </span>extension of <span class="s44">M</span>onet<span class="s44">DB</span>, and <span class="s44">S</span>ci<span class="s44">DB</span>, a database tailored for sci- entiﬁc applications, with a number of features tailored for array data types.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">8.1.1.3 Nested Data Types</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Many data representations allow attributes to be structured, directly modeling compos- ite attributes in the <span class="s44">E-R </span>model. For example, an attribute <i>name </i>may have component attributes <i>firstname</i>, and <i>lastname</i>. These representations also support multivalued data types such as sets, arrays, and maps. All of these data types represent a hierarchy of data types, and that structure leads to the use of the term <span class="s63">nested data types</span>. Many databases support such types as part of their support for object-oriented data, which we describe in Section 8.2.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In this section, we outline two widely used data representations that allow values to have complex internal structures and that are ﬂexible in that values are not forced to adhere to a ﬁxed schema. These are the <span class="s63">JavaScript Object Notation </span>(<span class="s64">JSON</span>), which we describe in Section 8.1.2, and the <span class="s63">Extensible Markup Language </span>(<span class="s64">XML</span>), which we describe in Section 8.1.3.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Like the wide-table approach, the <span class="s44">JSON </span>and <span class="s44">XML </span>representations provide ﬂexibility in the set of attributes that a record contains, as well as the types of these attributes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: right;">However, the <span class="s44">JSON </span>and <span class="s44">XML </span>representations permit a more ﬂexible structuring of data, where objects could have sub-objects; each object thus corresponds to a tree structure. Since they allow multiple pieces of information about a business object to be pack- aged into a single structure, the <span class="s44">JSON </span>and <span class="s44">XML </span>representations have both found sig-</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">niﬁcant acceptance in the context of data exchange between applications.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Today, <span class="s44">JSON </span>is widely used today for exchanging data between the backends and the user-facing sides of applications, such as mobile apps, and Web apps. <span class="s44">JSON </span>has also found favor for storing complex objects in storage systems that collect diﬀerent data related to a particular user into one large object (sometimes referred to as a document), allowing data to be retrieved without the need for joins. <span class="s44">XML </span>is an older representation and is used by many systems for storing conﬁguration and other information, and for data exchange.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.1.4 Knowledge Representation</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Representation of human knowledge has long been a goal of the artiﬁcial intelligence community. A variety of models were proposed for this task, with varying degrees of complexity; these could represent facts as well as rules about facts. With the growth of the web, a need arose to represent extremely large knowledge bases, with potentially billions of facts. The <i>Resource Description Format </i>(<span class="s69">RDF </span>) data representation is one such representation that has found very wide acceptance. The representation actually has far fewer features than earlier representations, but it was better suited to handle very large data volumes than the earlier knowledge representations.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Like the <span class="s44">E-R </span>model which we studied earlier, <span class="s44">RDF </span>models data as objects that have attributes and have relationships with other objects. <span class="s44">RDF </span>data can be viewed as a set of triples (3-tuples), or as a graph, with objects and attribute values modeled as nodes and relationships and attribute names as edges. We study <span class="s44">RDF </span>in more detail in Section 8.1.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.2 JSON</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s63">JavaScript Object Notation </span>(<span class="s64">JSON</span>), is a textual representation of complex data types that is widely used to transmit data between applications and to store complex data. <span class="s44">JSON </span>supports the primitive data types integer, real and string, as well as arrays, and “objects,” which are a collection of (attribute name, value) pairs.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 8.1 shows an example of data represented using <span class="s44">JSON</span>. Since objects do not have to adhere to any ﬁxed schema, they are basically the same as key-value maps, with the attribute names as keys and the attribute values as the associated values.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The example also illustrates arrays, shown in square brackets. In <span class="s44">JSON</span>, an array can be thought of as a map from integer oﬀsets to values, with the square-bracket syntax viewed as just a convenient way of creating such maps.</p><p class="s42" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">JSON <span class="s43">is today </span><span class="s13">the </span><span class="p">primary data representation used for communication between applications and web services. Many modern applications use web services to store</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">{</p><p class="s49" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">&quot;ID&quot;: &quot;22222&quot;,</p><p class="s49" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">&quot;name&quot;: {</p><p class="s49" style="padding-left: 212pt;text-indent: 0pt;text-align: left;">&quot;firstname: &quot;Albert&quot;, &quot;lastname: &quot;Einstein&quot;</p><p class="s49" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">},</p><p class="s49" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">&quot;deptname&quot;: &quot;Physics&quot;, &quot;children&quot;: [</p><p class="s49" style="padding-left: 212pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{&quot;firstname&quot;: &quot;Hans&quot;, &quot;lastname&quot;: &quot;Einstein&quot; },</p><p class="s49" style="padding-left: 212pt;text-indent: 0pt;text-align: left;">{&quot;firstname&quot;: &quot;Eduard&quot;, &quot;lastname&quot;: &quot;Einstein&quot; }</p><p class="s49" style="text-indent: 0pt;text-align: center;">]</p><p class="s49" style="text-indent: 0pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2109.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 230pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 8.1 </span>Example of <span class="s157">JSON </span>data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">and retrieve data and to perform computations at a backend server; web services are described in more detail in Section 9.5.2. Applications invoke web services by sending parameters either as simple values such as strings or numbers, or by using <span class="s44">JSON </span>for more complex parameters. The web service then returns results using <span class="s44">JSON</span>. For exam- ple, an email user interface may invoke web services for each of these tasks: authenti- cating the user, fetching email header information to show a list of emails, fetching an email body, sending email, and so on.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The data exchanged in each of these steps are complex and have an internal struc- ture. The ability of <span class="s44">JSON </span>to represent complex structures, and its ability to allow ﬂexible structuring, make it a good ﬁt for such applications.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A number of libraries are available that make it easy to transform data between the <span class="s44">JSON </span>representation and the object representation used in languages such as JavaScript, Java, Python, <span class="s44">PHP</span>, and other languages. The ease of interfacing between <span class="s44">JSON </span>and programming language data structures has played a signiﬁcant role in the widespread use of <span class="s44">JSON</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Unlike a relational representation, <span class="s44">JSON </span>is verbose and takes up more storage space for the same data. Further, parsing the text to retrieve required ﬁelds can be very <span class="s44">CPU </span>intensive. Compressed representations that also make it easier to retrieve values with- out parsing are therefore popular for storage of data. For example, a compressed binary format called <span class="s44">BSON </span>(short for Binary <span class="s44">JSON</span>) is used in many systems for storing <span class="s44">JSON </span>data.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The <span class="s44">SQL </span>language itself has been extended to support the <span class="s44">JSON </span>representation in several ways:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>JSON <span class="s40">data can be stored as a </span>JSON <span class="s40">data type.</span></p><p class="s41" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>SQL <span class="s40">queries can generate </span>JSON <span class="s40">data from relational data:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2110.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2111.png"/></span></p><p class="s51" style="padding-top: 6pt;padding-left: 122pt;text-indent: -8pt;line-height: 76%;text-align: justify;"><span class="s50">° </span>There are <span class="s52">SQL </span>extensions that allow construction of <span class="s52">JSON </span>objects in each row of a query result. For example, <span class="s52">P</span>ostgre<span class="s52">SQL </span>supports a <span class="s49">json build object() </span><span class="p">func-</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2112.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2113.png"/></span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: justify;">tion. As an example of its use, <span class="s49">json build object(&#39;ID&#39;, 12345, &#39;name&#39; &#39;Ein- stein&#39;) </span>returns a <span class="s44">JSON </span>object <span class="s49">{&quot;ID&quot;: 12345, &quot;name&quot;, &quot;Einstein&quot;}</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2114.png"/></span></p><p class="s51" style="padding-top: 8pt;padding-left: 122pt;text-indent: -8pt;line-height: 76%;text-align: justify;"><span class="s50">° </span>There are also <span class="s52">SQL </span>extensions that allow creation of a <span class="s52">JSON </span>object from a collection of rows by using an aggregate function. For example, the <span class="s49">json agg</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2115.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2116.png"/></span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: justify;">aggregate function in <span class="s44">P</span>ostgre<span class="s44">SQL </span>allows creation of a single <span class="s44">JSON </span>object from a collection of <span class="s44">JSON </span>objects. Oracle supports a similar aggregate function <span class="s49">json objectagg</span>, as well as an aggregate <span class="s49">json arraytagg</span>, which creates a <span class="s44">JSON </span>array with objects in a speciﬁed order. <span class="s44">SQL S</span>erver supports a <span class="s49">FOR JSON AUTO </span>clause that formats the result of an <span class="s44">SQL </span>query as a <span class="s44">JSON </span>array, with one ele- ment per row in the <span class="s44">SQL </span>query.</p><p class="s41" style="padding-top: 7pt;padding-left: 107pt;text-indent: -16pt;line-height: 90%;text-align: justify;"><span class="s39">• </span>SQL <span class="s40">queries can extract data from a </span>JSON <span class="s40">object using some form of path con- structs. For example, in </span>P<span class="s40">ostgre</span>SQL<span class="s40">, if a value </span><span class="s13">v </span><span class="p">is of type </span><span class="s44">JSON </span><span class="p">and has an at- tribute “ID”, </span><span class="s13">v</span><span class="s15">−</span><span class="s83">&gt;</span><span class="s49">’ID’ </span><span class="p">would return the value of the “ID” attribute of </span><span class="s13">v</span><span class="p">. Oracle</span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">supports a similar feature, using a “.” instead of “<span class="s15">−</span><span class="s83">&gt;</span>”, while <span class="s44">SQL S</span>erver uses a</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2117.png"/></span></p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">function <span class="s49">JSON VALUE(value, path) </span>to extract values from <span class="s44">JSON </span>objects using a</p><p style="padding-left: 107pt;text-indent: 0pt;text-align: justify;">speciﬁed path.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The exact syntax and semantics of these extensions, unfortunately, depend entirely on the speciﬁc database system. You can ﬁnd references to more details on these exten- sions in the bibliographic notes for this chapter, available online.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">8.1.3 XML</p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;line-height: 65%;text-align: justify;">The <span class="s44">XML </span>data representation adds <span class="s63">tags </span>enclosed in angle brackets, <span class="s83">&lt;&gt;</span>, to mark up information in a textual representation. Tags are used in pairs, with <span class="s83">&lt;</span>tag<span class="s83">&gt; </span>and <span class="s83">&lt;</span>/tag<span class="s83">&gt; </span>delimiting the beginning and the end of the portion of the text to which the tag refers.</p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">For example, the title of a document might be marked up as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-left: 56pt;text-indent: 0pt;text-align: center;">&lt;<span class="s49">title</span>&gt;<span class="s49">Database System Concepts</span>&lt;<span class="s49">/title</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">Such tags can be used to represent relational data specifying relation names and at- tribute names as tags, as shown below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 166pt;text-indent: 0pt;text-align: left;">&lt;course&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2118.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2119.png"/></span></p><p class="s49" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">&lt;course id&gt; CS-101 &lt;/course id&gt;</p><p class="s49" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">&lt;title&gt; Intro. to Computer Science &lt;/title&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2120.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2121.png"/></span></p><p class="s49" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">&lt;dept name&gt; Comp. Sci. &lt;/dept name&gt;</p><p class="s49" style="padding-left: 188pt;text-indent: 0pt;text-align: left;">&lt;credits&gt; 4 &lt;/credits&gt;</p><p class="s49" style="padding-left: 166pt;text-indent: 0pt;text-align: left;">&lt;/course&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2122.png"/></span></p><p class="s186" style="padding-top: 2pt;padding-left: 130pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">purchase order</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">identifier</span>&gt; <span class="s49">P-101 </span>&lt;<span class="s49">/identifier</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">purchaser</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">name</span>&gt; <span class="s49">Cray Z. Coyote </span>&lt;<span class="s49">/name</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">address</span>&gt; <span class="s49">Route 66, Mesa Flats, Arizona 86047, USA </span>&lt;<span class="s49">/address</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/purchaser</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">supplier</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">name</span>&gt; <span class="s49">Acme Supplies </span>&lt;<span class="s49">/name</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">address</span>&gt; <span class="s49">1 Broadway, New York, NY, USA </span>&lt;<span class="s49">/address</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/supplier</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">itemlist</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">item</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">identifier</span>&gt; <span class="s49">RS1 </span>&lt;<span class="s49">/identifier</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">description</span>&gt; <span class="s49">Atom powered rocket sled </span>&lt;<span class="s49">/description</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">quantity</span>&gt; <span class="s49">2 </span>&lt;<span class="s49">/quantity</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">price</span>&gt; <span class="s49">199.95 </span>&lt;<span class="s49">/price</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/item</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">item</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">identifier</span>&gt; <span class="s49">SG2 </span>&lt;<span class="s49">/identifier</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">description</span>&gt; <span class="s49">Superb glue </span>&lt;<span class="s49">/description</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">quantity</span>&gt; <span class="s49">1 </span>&lt;<span class="s49">/quantity</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">unit-of-measure</span>&gt; <span class="s49">liter </span>&lt;<span class="s49">/unit-of-measure</span>&gt;</p><p class="s186" style="padding-left: 193pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">price</span>&gt; <span class="s49">29.95 </span>&lt;<span class="s49">/price</span>&gt;</p><p class="s186" style="padding-left: 172pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/item</span>&gt;</p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/itemlist</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2123.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2124.png"/></span></p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">total cost</span>&gt; <span class="s49">429.85 </span>&lt;<span class="s49">/total cost</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2125.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2126.png"/></span></p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">payment terms</span>&gt; <span class="s49">Cash-on-delivery </span>&lt;<span class="s49">/payment terms</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2128.png"/></span></p><p class="s186" style="padding-left: 151pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">shipping mode</span>&gt; <span class="s49">1-second-delivery </span>&lt;<span class="s49">/shipping mode</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2129.png"/></span></p><p class="s186" style="padding-left: 130pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/purchase order</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2130.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 190pt;text-indent: 0pt;text-align: left;">Figure 8.2 <span class="s74">XML representation of a purchase order.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Unlike with a relational schema, new tags can be introduced easily, and with suit- able names the data are “self-documenting” in that a human can understand or guess what a particular piece of data means based on the name.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Furthermore, tags can be used to create hierarchical structures, which is not pos- sible with the relational model. Hierarchical structures are particularly important for representing business objects that must be exchanged between organizations; examples include bills, purchase orders, and so forth.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 8.2, which shows how information about a purchase order can be repre- sented in <span class="s44">XML</span>, illustrates a more realistic use of <span class="s44">XML</span>. Purchase orders are typically generated by one organization and sent to another. A purchase order contains a variety of information; the nested representation allows all information in a purchase order to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">be represented naturally in a single document. (Real purchase orders have consider- ably more information than that depicted in this simpliﬁed example.) <span class="s44">XML </span>provides a standard way of tagging the data; the two organizations must of course agree on what tags appear in the purchase order and what they mean.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">XQ</span>uery language was developed to support querying of <span class="s44">XML </span>data. Further details of <span class="s44">XML </span>and <span class="s44">XQ</span>uery may be found in Chapter 30. Although <span class="s44">XQ</span>uery implemen- tations are available from several vendors, unlike <span class="s44">SQL</span>, adoption of <span class="s44">XQ</span>uery has been relatively limited.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">However, the <span class="s44">SQL </span>language itself has been extended to support <span class="s44">XML </span>in several ways:</p><p class="s41" style="padding-top: 10pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;"><span class="s39">• </span>XML <span class="s40">data can be stored as an </span>XML <span class="s40">data type.</span></p><p class="s41" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>SQL <span class="s40">queries can generate </span>XML <span class="s40">data from relational data. Such extensions are very useful for packaging related pieces of data into one </span>XML <span class="s40">document, which can then be sent to another application.</span></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: justify;">The extensions allow the construction of <span class="s44">XML </span>representations from individual rows, as well as the creation of an <span class="s44">XML </span>document from a collection of rows by using an <span class="s44">XMLAGG </span>aggregate function.</p><p class="s41" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>SQL <span class="s40">queries can extract data from an </span>XML <span class="s40">data type value. For example, the </span>XP<span class="s40">ath language supports “path expressions” that allow the extraction of desired parts of data from an </span>XML <span class="s40">document.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">You can ﬁnd more details on these extensions in Chapter 30.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.4 RDF and Knowledge Graphs</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s63">Resource Description Framework </span>(<span class="s64">RDF</span>) is a data representation standard based on the entity-relationship model. We provide an overview of <span class="s44">RDF </span>in this section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.4.1 Triple Representation</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s44">RDF </span>model represents data by a set of <span class="s63">triples </span>that are in one of these two forms:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span class="s63">1. </span>(<i>ID, attribute-name, value</i>)</p><p style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;"><span class="s63">2. </span>(<i>ID1, relationship-name, ID2</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">where <i>ID, ID1 </i>and <i>ID2 </i>are identiﬁers of entities; entities are also referred to as <span class="s63">resources </span>in <span class="s44">RDF</span>. Note that unlike the <span class="s44">E-R </span>model, the <span class="s44">RDF </span>model only supports binary relation- ships, and it does not support more general n-ary relationships; we return to this issue later.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The ﬁrst attribute of a triple is called its <span class="s63">subject</span>, the second attribute is called its <span class="s63">predicate</span>, and the last attribute is called its <span class="s63">object</span>. Thus, a triple has the structure (subject, predicate, object).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s151" style="padding-top: 4pt;padding-left: 186pt;text-indent: 0pt;text-align: justify;">10101   instance-of  instructor . 10101   name    &quot;Srinivasan&quot; .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: justify;">10101   salary    &quot;6500&quot; . 00128   instance-of  student . 00128   name    &quot;Zhang&quot; .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2131.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: justify;">00128   tot cred   &quot;102&quot; .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2132.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2133.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2134.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: justify;">comp sci  instance-of  department . comp sci  dept name  &quot;Comp. Sci.&quot; . biology  instance-of  department . CS-101   instance-of  course .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2135.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2136.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">CS-101   title     &quot;Intro. to Computer Science&quot; . CS-101   course dept  comp sci .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sec1   instance-of  section .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2137.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1   sec course  CS-101 .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2138.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1    sec id    &quot;1&quot; .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1    semester   &quot;Fall&quot; .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1    year     &quot;2017&quot; .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1   classroom  packard-101 .</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2139.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2140.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2141.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2142.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2143.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2144.png"/></span></p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">sec1    time slot id  &quot;H&quot; . 10101    inst dept   comp sci . 00128   stud dept   comp sci . 00128   takes     sec1 .</p><p class="s151" style="padding-left: 186pt;text-indent: 0pt;text-align: left;">10101   teaches   sec1 .</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2145.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 161pt;text-indent: 0pt;text-align: left;">Figure 8.3 <span class="s151">RDF </span><span class="s152">representation of part of the University database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 8.3 shows a triple representation of a small part of the University database. All attribute values are shown in quotes, while identiﬁers are shown without quotes. Attribute and relationship names (which form the predicate part of each triple) are also shown without quotes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2146.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2147.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2148.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2149.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In our example, we use the <span class="s44">ID </span>values to identify instructors and students and <i>course id </i>to identify courses. Each of their attributes is represented as a separate triple. The type information of objects is provided by the <i>instance-of </i>relationship; for example, 10101 is identiﬁed as an instance of instructor, while 00128 is an instance of student. To follow <span class="s44">RDF </span>syntax, the identiﬁer of the Comp. Sci. department is denoted as comp sci. Only one attribute of the department, <i>dept name</i>, is shown. Since the primary key of <i>section </i>is composite, we have created new identiﬁers to identify sections; “sec1” iden- tiﬁes one such section, shown with its <i>semester</i>, <i>year </i>and <i>sec id </i>attributes, and with a relationship <i>course </i>to CS-101.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2150.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2151.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2152.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Relationships shown in the ﬁgure include the <i>takes </i>and <i>teaches </i>relationships, which appear in the university schema. The departments of instructors, students and courses are shown as relationships <i>inst dept</i>, <i>stud dept </i>and <i>course dept </i>respectively, following the <span class="s44">E-R </span>model; similarly, the classroom associated with a section is also shown as a <i>classroom </i>relationship with a classroom object (packard-101, in our example), and the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2153.png"/></span></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">course associated with a section is shown as a relationship <i>sec course </i>between the sec- tion and the course.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As we saw, entity type information is represented using <i>instance-of </i>relationships between entities and objects representing types; type-subtype relationships can also be represented as <i>subtype </i>edges between type objects.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In contrast to the <span class="s44">E-R </span>model and relational schemas, <span class="s44">RDF </span>allows new attributes to be easily added to an object and also to create new types of relationships.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.4.2 Graph Representation of <span class="s249">RDF</span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s44">RDF </span>representation has a very natural graph interpretation. Entities and attribute values can be considered as nodes, and attribute names and relationships can be con- sidered as edges between the nodes. The attribute/relationship name can be viewed as the label of the corresponding edge. Figure 8.4 shows a graph representation of the data from Figure 8.3. Objects are shown as ovals, attribute values in rectangles, and relation- ships as edges with associated labels identifying the relationship. We have omitted the <i>instance-of </i>relationships for brevity.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A representation of information using the <span class="s44">RDF </span>graph model (or its variants and extensions) is referred to as a <span class="s63">knowledge graph</span>. Knowledge graphs are used for a variety of purposes. One such application is to store facts that are harvested from a variety of data sources, such as Wikipedia, Wikidata, and other sources on the web. An example of a fact is “Washington, D.C. is the capital of U.S.A.” Such a fact can be represented as an edge labeled <i>capital-of </i>connecting two nodes, one representing the entity Wash- ington, D.C., and the other representing the entity U.S.A.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="426" height="243" alt="image" src="Image_2154.png"/></span></p><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">salary</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">dept_name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">name</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">tot_cred</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">inst_dept          stud_dept</p><p class="s251" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">10101              <span class="s252">comp_sci              </span>00128</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">teaches</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">course_dept</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">takes</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="text-indent: 0pt;line-height: 8pt;text-align: left;">CS-101</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-left: 73pt;text-indent: 0pt;line-height: 8pt;text-align: center;">sec1</p><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">sec_course                sec_id</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">title</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">classroom</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">semester</p><p style="text-indent: 0pt;text-align: left;"/><p class="s250" style="text-indent: 0pt;line-height: 8pt;text-align: left;">year</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="text-indent: 0pt;line-height: 8pt;text-align: left;">packard-101</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Intro. to Computer Science</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">Comp. Sci.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">2017</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 12pt;text-indent: 0pt;text-align: center;">Fall</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;text-indent: 0pt;text-align: center;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: center;">102</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Zhang</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">6500</p><p style="text-indent: 0pt;text-align: left;"/><p class="s251" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Srinivasan</p><p style="text-indent: 0pt;text-align: left;"/><p class="s74" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 8.4 </span>Graph representation of <span class="s157">RDF </span>data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Questions about entities can be answered using a knowledge graph that contains relevant information. For example, the question “Which city is the capital of the U.S.A.?” can be answered by looking for an edge labeled <i>capital-of</i>, linking an entity to the country U.S.A. (If type information is available, the query may also verify that there is an <i>instance-of </i>edge connecting Washington, D.C., to a node representing the entity type <i>City</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">8.1.4.3 SPARQL</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s69">SPARQL </span>is a query language designed to query <span class="s44">RDF </span>data. The language is based on triple patterns, which look like <span class="s44">RDF </span>triples but may contain variables. For example, the triple pattern:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 218pt;text-indent: 0pt;text-align: left;">?cid <i>title </i>&quot;Intro. to Computer Science&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">would match all triples whose predicate is “title” and object is “Intro. to Computer Science”. Here, ?cid is a variable that can match any value.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Queries can have multiple triple patterns, with variables shared across triples. Con- sider the following pair of triples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 218pt;text-indent: 0pt;text-align: left;">?cid <i>title </i>&quot;Intro. to Computer Science&quot;</p><p style="padding-left: 218pt;text-indent: 0pt;text-align: left;">?sid <i>course </i>?cid</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">On the university-triple dataset shown in Figure 8.3, the ﬁrst triple pattern matches the triple <span class="s49">(CS-101, title, &quot;Intro. to Computer Science&quot;)</span>, while the second triple pattern matches <span class="s49">(sec1, course, CS-101)</span>. The shared variable ?cid enforces a join condition between the two triple patterns.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We can now show a complete <span class="s44">SPARQL </span>query. The following query retrieves names of all students who have taken a section whose course is titled “Intro. to Computer Science”.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 209pt;text-indent: 0pt;line-height: 13pt;text-align: left;">select <span class="p">?name</span></p><p class="s46" style="padding-left: 209pt;text-indent: 0pt;line-height: 13pt;text-align: left;">where <span class="s95">{</span></p><p style="padding-left: 230pt;text-indent: 0pt;text-align: left;">?cid <i>title </i>&quot;Intro. to Computer Science&quot; .</p><p style="padding-left: 230pt;text-indent: 0pt;text-align: left;">?sid <i>course </i>?cid .</p><p style="padding-left: 230pt;text-indent: 0pt;text-align: left;">?id <i>takes </i>?sid .</p><p style="padding-left: 230pt;text-indent: 0pt;text-align: left;">?id <i>name </i>?name .</p><p class="s95" style="text-indent: 0pt;line-height: 13pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">The shared variables between these triples enforce a join condition between the tuples matching each of these triples.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: left;">Note that unlike in <span class="s44">SQL</span>, the predicate in a triple pattern can be a variable, which can match any relationship or attribute name. <span class="s44">SPARQL </span>has many more features, such</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><a name="bookmark178">as aggregation, optional joins (similar to outerjoins), and subqueries. For more infor- mation in </a><span class="s44">SPARQL</span>, see the references in Further Reading.<a name="bookmark199">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">8.1.4.4 Representing N-ary Relationships</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Relationships represented as edges can model only binary relationships. Knowledge graphs have been extended to store more complex relationships. For example, knowl- edge graphs have been extended with temporal information to record the time period during which a fact is true; if the capital of the U.S.A. changed from Washington, DC., to say, New York, in 2050, this would be represented by two facts, one for the period ending in 2050 when Washington was the capital, and one for the period after 2050.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">As we saw in Section 6.9.4, an <i>n</i>-ary relationship can be represented using binary relationships by creating an artiﬁcial entity corresponding to a tuple in an <i>n</i>-ary re- lationship and linking that artiﬁcial entity to each of the entities participating in the relationship. In the preceding example, we can create an artiﬁcial entity <i>e</i><span class="s98">1</span> to represent the fact that Barack Obama was president of the U.S.A. from 2008 to 2016. We link <i>e</i><span class="s98">1</span> to the entities representing Obama and U.S.A. by <i>person </i>and <i>country </i>relationship edges respectively, and to the values 2008 and 2016 by attribute edges <i>president-from </i>and <i>president-till </i>respectively. If we chose to represent years as entities, the edges cre- ated to the two years above would represent relationships instead of attributes.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The above idea is similar to the <span class="s44">E-R </span>model notion of aggregation which, as we saw in Section 6.8.5, can treat a relationship as an entity; this idea is called <span class="s63">reification </span>in <span class="s44">RDF</span>. Reiﬁcation is used in many knowledge-graph representations, where the extra information such as time period of validity are treated as <i>qualifiers </i>of the underlying edge.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Other models add a fourth attribute, called the context, to triples; thus, instead of storing triples, they store <span class="s63">quads</span>. The basic relationship is still binary, but the fourth attribute allows a context entity to be associated with a relationship. Information such as valid time period can be treated as attributes of the context entity.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">There are several knowledge bases, such as Wikidata, DBPedia, Freebase, and Yago, that provide an <span class="s44">RDF</span>/knowledge graph representation of a wide variety of knowl- edge. In addition, there are a very large number of domain-speciﬁc knowledge graphs. The <span class="s63">linked open data </span>project is aimed at making a variety of such knowledge graphs open source and further creating links between these independently created knowledge graphs. Such links allow queries to make inferences using information from multiple knowledge graphs along with links to the knowledge graphs. References to more infor- mation on this topic may be found in the bibliographic notes for this chapter, available online.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part170.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part172.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
