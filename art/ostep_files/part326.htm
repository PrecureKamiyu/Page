<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Finally, A Working Solution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part325.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part327.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, A Working Solution</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">To solve this problem, we simply must reduce the scope of the lock. Fig- ure <span style=" color: #00AEEF;">31.8 </span>shows the final working solution. As you can see, we simply move the mutex acquire and release to be just around the critical section; the full and empty wait and signal code is left outside. The result is a simple and working bounded buffer, a commonly-used pattern in multi- threaded programs. Understand it now; use it later. You will thank us for years to come. Or at least, you will thank us when the same question is asked on the final exam.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">sem_t empty;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">2  <span class="s38">sem_t full;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3  <span class="s38">sem_t mutex;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">4</p><p class="s38" style="padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">5  </span>void <span class="s39">*</span>producer(void <span class="s39">*</span>arg) {</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;line-height: 7pt;text-align: left;">6    <span class="s38">int i;</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">7     <span class="s38">for (i = 0; i &lt; loops; i++) {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8        <span class="s38">sem_wait(&amp;empty);     // line p1</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9        <span class="s38">sem_wait(&amp;mutex);     // line p1.5 (MOVED MUTEX HERE...)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">10        <span class="s38">put(i);         // line p2</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">11        <span class="s38">sem_post(&amp;mutex);     // line p2.5 (... AND HERE)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">12        <span class="s38">sem_post(&amp;full);     // line p3</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">13    <span class="s38">}</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">14  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">15</p><p class="s38" style="padding-left: 52pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">16  </span>void <span class="s39">*</span>consumer(void <span class="s39">*</span>arg) {</p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;line-height: 8pt;text-align: left;">17    <span class="s38">int i;</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">18     <span class="s38">for (i = 0; i &lt; loops; i++) {</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">19        <span class="s38">sem_wait(&amp;full);     // line c1</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">20        <span class="s38">sem_wait(&amp;mutex);     // line c1.5 (MOVED MUTEX HERE...)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">21        <span class="s38">int tmp = get();     // line c2</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">22        <span class="s38">sem_post(&amp;mutex);     // line c2.5 (... AND HERE)</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">23        <span class="s38">sem_post(&amp;empty);     // line c3</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">24       <span class="s38">printf(&quot;%d\n&quot;, tmp);</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">25    <span class="s38">}</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">26  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">27</p><p class="s38" style="padding-left: 52pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">28  </span>int main(int argc, char <span class="s39">*</span>argv[]) {</p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;line-height: 8pt;text-align: left;">29    <span class="s38">// ...</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">30     <span class="s38">sem_init(&amp;empty, 0, MAX); // MAX buffers are empty to begin with...</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">31     <span class="s38">sem_init(&amp;full, 0, 0);  // ... and 0 are full</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">32     <span class="s38">sem_init(&amp;mutex, 0, 1);  // mutex=1 because it is a lock</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">33    <span class="s38">// ...</span></p><p class="s37" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">34  <span class="s38">}</span></p><p style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 31.8: <b>Adding Mutual Exclusion (Correctly)</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part325.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part327.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
