<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>26.6 Summary: Why in OS Class?</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part266.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part268.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 6pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">26.6 Summary: Why in OS Class?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Before wrapping up, one question that you might have is: why are we studying this in OS class? “History” is the one-word answer; the OS was the first concurrent program, and many techniques were created for use <i>within </i>the OS. Later, with multi-threaded processes, application program- mers also had to consider such things.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">For example, imagine the case where there are two processes running. Assume they both call <span class="s41">write() </span>to write to the file, and both wish to append the data to the file (i.e., add the data to the end of the file, thus in- creasing its length). To do so, both must allocate a new block, record in the inode of the file where this block lives, and change the size of the file to re- flect the new larger size (among other things; we’ll learn more about files in the third part of the book). Because an interrupt may occur at any time, the code that updates to these shared structures (e.g., a bitmap for alloca- tion, or the file’s inode) are critical sections; thus, OS designers, from the very beginning of the introduction of the interrupt, had to worry about how the OS updates internal structures. An untimely interrupt causes all of the problems described above. Not surprisingly, page tables, process lists, file system structures, and virtually every kernel data structure has to be carefully accessed, with the proper synchronization primitives, to work correctly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 90pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: U<span class="s7">SE </span>A<span class="s7">TOMIC </span>O<span class="s7">PERATIONS</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Atomic operations are one of the most powerful underlying techniques in building computer systems, from the computer architecture, to concur- rent code (what we are studying here), to file systems (which we’ll study soon enough), database management systems, and even distributed sys- tems [L+93].</p><p style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The idea behind making a series of actions <b>atomic </b>is simply expressed with the phrase “all or nothing”; it should either appear as if all of the ac- tions you wish to group together occurred, or that none of them occurred, with no in-between state visible. Sometimes, the grouping of many ac- tions into a single atomic action is called a <b>transaction</b>, an idea devel- oped in great detail in the world of databases and transaction processing [GR92].</p><p style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In our theme of exploring concurrency, we’ll be using synchronization primitives to turn short sequences of instructions into atomic blocks of execution, but the idea of atomicity is much bigger than that, as we will see. For example, file systems use techniques such as journaling or copy- on-write in order to atomically transition their on-disk state, critical for operating correctly in the face of system failures. If that doesn’t make sense, don’t worry – it will, in some future chapter.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part266.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part268.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
