<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Atomicity-Violation Bugs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part336.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part338.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">Atomicity-Violation Bugs</p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The first type of problem encountered is referred to as an <b>atomicity vi- olation</b>. Here is a simple example, found in MySQL. Before reading the explanation, try figuring out what the bug is. Do it!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">Thread 1::</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">2  <span class="s38">if (thd-&gt;proc_info) {</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3   <span class="s38">...</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4   <span class="s38">fputs(thd-&gt;proc_info, ...);</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">5   <span class="s38">...</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">6  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">7</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">8  <span class="s38">Thread 2::</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">9  <span class="s38">thd-&gt;proc_info = NULL;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_485.png"/></span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">In the example, two different threads access the field <span class="s41">proc info </span>in the structure <span class="s41">thd</span>. The first thread checks if the value is non-NULL and then prints its value; the second thread sets it to NULL. Clearly, if the first thread performs the check but then is interrupted before the call to <span class="s41">fputs</span>, the second thread could run in-between, thus setting the pointer to NULL; when the first thread resumes, it will crash, as a NULL pointer will be dereferenced by <span class="s41">fputs</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_486.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_487.png"/></span></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The more formal definition of an atomicity violation, according to Lu et al, is this: “The desired serializability among multiple memory accesses is violated (i.e. a code region is intended to be atomic, but the atomicity is not enforced during execution).” In our example above, the code has an <i>atomicity assumption </i>(in Lu’s words) about the check for non-NULL of <span class="s41">proc info </span>and the usage of <span class="s41">proc info </span>in the <span class="s41">fputs() </span>call; when assumption is broken, the code will not work as desired.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Finding a fix for this type of problem is often (but not always) straight- forward. Can you think of how to fix the code above?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_488.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In this solution, we simply add locks around the shared-variable ref- erences, ensuring that when either thread accesses the <span class="s41">proc info </span>field, it has a lock held. Of course (not shown), any other code that accesses the structure should also acquire this lock before doing so.</p><p class="s37" style="padding-top: 6pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">1  <span class="s38">pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">2</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3  <span class="s38">Thread 1::</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4  <span class="s38">pthread_mutex_lock(&amp;lock);</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">if (thd-&gt;proc_info) {</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6   <span class="s38">...</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7   <span class="s38">fputs(thd-&gt;proc_info, ...);</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">8   <span class="s38">...</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">9  <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10  <span class="s38">pthread_mutex_unlock(&amp;lock);</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">11</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12  <span class="s38">Thread 2::</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13  <span class="s38">pthread_mutex_lock(&amp;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">14  <span class="s38">thd-&gt;proc_info = NULL;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">15  <span class="s38">pthread_mutex_unlock(&amp;lock);</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part336.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part338.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
