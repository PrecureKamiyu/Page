<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>39.5 Reading And Writing, But Not Sequentially</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part420.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part422.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">39.5 Reading And Writing, But Not Sequentially</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Thus far, we’ve discussed how to read and write files, but all access has been <b>sequential</b>; that is, we have either read a file from the beginning to the end, or written a file out from beginning to end.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 90%;text-align: justify;">Sometimes, however, it is useful to be able to read or write to a spe- cific offset within a file; for example, if you build an index over a text document, and use it to look up a specific word, you may end up reading</p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 71%;text-align: justify;">from some <b>random </b>offsets within the document. To do so, we will use the <span class="s41">lseek() </span>system call. Here is the function prototype:</p><p class="s38" style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">off_t lseek(int fildes, off_t offset, int whence);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">The first argument is familiar (a file descriptor). The second argu- ment is the <span class="s41">offset</span>, which positions the <b>file offset </b>to a particular location within the file. The third argument, called <span class="s41">whence </span>for historical reasons, determines exactly how the seek is performed. From the man page:</p><p class="s38" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">If whence is SEEK_SET, the offset is set to offset bytes. If whence is SEEK_CUR, the offset is set to its current location plus offset bytes.</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">If whence is SEEK_END, the offset is set to the size of the file plus offset bytes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: right;">As you can tell from this description, for each file a process opens, the OS tracks a “current” offset, which determines where the next read or</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="p">A</span><span class="s7">SIDE</span><span class="p">: </span>C<span class="s45">ALLING </span><span class="s119">L S E E K</span><span class="s211">() </span>D<span class="s45">OES </span>N<span class="s45">OT </span>P<span class="s45">ERFORM </span>A D<span class="s45">ISK </span>S<span class="s45">EEK</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The poorly-named system call <span class="s41">lseek() </span>confuses many a student try- ing to understand disks and how the file systems atop them work. Do not confuse the two! The <span class="s41">lseek() </span>call simply changes a variable in OS memory that tracks, for a particular process, at which offset to which its next read or write will start. A disk seek occurs when a read or write issued to the disk is not on the same track as the last read or write, and thus necessitates a head movement. Making this even more confusing is the fact that calling <span class="s41">lseek() </span>to read or write from/to random parts of a file, and then reading/writing to those random parts, will indeed lead to more disk seeks. Thus, calling <span class="s41">lseek() </span>can certainly lead to a seek in an upcoming read or write, but absolutely does not cause any disk I/O to occur itself.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">write will begin reading from or writing to within the file. Thus, part of the abstraction of an open file is that it has a current offset, which is updated in one of two ways. The first is when a read or write of <span class="s43">N </span>bytes takes place, <span class="s43">N </span>is added to the current offset; thus each read or write <i>implicitly </i>updates the offset. The second is <i>explicitly </i>with <span class="s41">lseek</span>, which changes the offset as specified above.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Note that this call <span class="s41">lseek() </span>has nothing to do with the <b>seek </b>operation of a disk, which moves the disk arm. The call to <span class="s41">lseek() </span>simply changes the value of a variable within the kernel; when the I/O is performed, depending on where the disk head is, the disk may or may not perform an actual seek to fulfill the request.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part420.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part422.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
