<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>1.9 Important Themes</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000001FF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000003E60B" data-uri="chapter01.xhtml#P700049702700000000000000003E60B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000201" title="22" data-uri="chapter01.xhtml#P7000497027000000000000000000201" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">1.9 </span>Important Themes</h1></header>
<p id="P700049702700000000000000003E60C" data-uri="chapter01.xhtml#P700049702700000000000000003E60C" class="pcalibre1 pcalibre calibre2">This concludes our initial whirlwind tour of systems. An important idea to take away from this discussion is that a system is more than just hardware. It is a collection of intertwined hardware and systems software that must cooperate in order to achieve the ultimate goal of running application programs. The rest of this book will fill in some details about the hardware and the software, and it will show how, by knowing these details, you can write programs that are faster, more reliable, and more secure.</p>
<p id="P700049702700000000000000003E60D" data-uri="chapter01.xhtml#P700049702700000000000000003E60D" class="pcalibre1 pcalibre calibre2">To close out this chapter, we highlight several important concepts that cut across all aspects of computer systems. We will discuss the importance of these concepts at multiple places within the book.</p>
<section id="P7000497027000000000000000000204" data-uri="chapter01.xhtml#P7000497027000000000000000000204" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E60E" data-uri="chapter01.xhtml#P700049702700000000000000003E60E" epub:type="title"><span class="pcalibre label pcalibre1">1.9.1 </span>Amdahl's Law</h1></header>
<p id="P700049702700000000000000003E60F" data-uri="chapter01.xhtml#P700049702700000000000000003E60F" class="pcalibre1 pcalibre calibre2">Gene Amdahl, one of the early pioneers in computing, made a simple but insightful observation about the effectiveness of improving the performance of one part of a system. This observation has come to be known as <i class="calibre5 pcalibre pcalibre1">Amdahl's law.</i> The main idea is that when we speed up one part of a system, the effect on the overall system performance depends on both how significant this part was and how much it sped up. Consider a system in which executing some application requires time <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>. Suppose some part of the system requires a fraction α of this time, and that we improve its performance by a factor of <i class="calibre5 pcalibre pcalibre1">k.</i> That is, the component originally required time α<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>, and it now requires time (α<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>)/<var class="calibre5 pcalibre pcalibre1">k</var>. The overall execution time would thus be</p>
<div class="informalequation pcalibre pcalibre1" id="P700049702700000000000000003E610" data-uri="chapter01.xhtml#P700049702700000000000000003E610">
<m:math display="block" alttext="" data-uri="" altimg-width="194" altimg-height="42" altimg="../images/ch01-1.png"><m:mrow><m:mtable columnalign="left"><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>new</m:mtext></m:mrow></m:msub></m:mrow></m:mtd><m:mtd columnalign="left"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mo stretchy="false">(</m:mo><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>α</m:mi><m:mo stretchy="false">)</m:mo><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>old</m:mtext></m:mrow></m:msub><m:mo>+</m:mo><m:mo stretchy="false">(</m:mo><m:mi>α</m:mi><m:msub><m:mi>T</m:mi><m:mrow><m:mtext>old</m:mtext></m:mrow></m:msub><m:mo stretchy="false">)</m:mo><m:mo>/</m:mo><m:mi>k</m:mi></m:mrow></m:mtd></m:mtr><m:mtr columnalign="left"><m:mtd columnalign="left"><m:mrow/></m:mtd><m:mtd columnalign="left"><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:msub><m:mi>T</m:mi><m:mrow><m:mi>o</m:mi><m:mi>l</m:mi><m:mi>d</m:mi></m:mrow></m:msub><m:mo stretchy="false">[</m:mo><m:mo stretchy="false">(</m:mo><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>α</m:mi><m:mo stretchy="false">)</m:mo><m:mo>+</m:mo><m:mi>α</m:mi><m:mo>/</m:mo><m:mi>k</m:mi><m:mo stretchy="false">]</m:mo></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E611" data-uri="chapter01.xhtml#P700049702700000000000000003E611">From this, we can compute the speedup <var class="calibre5 pcalibre pcalibre1">S</var> = <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>/<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub> as</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000000209" data-uri="chapter01.xhtml#P7000497027000000000000000000209">
<m:math display="block" alttext="" data-uri="" altimg-width="117" altimg-height="35" altimg="../images/ch01-2.png"><m:mrow><m:mi>S</m:mi><m:mo>=</m:mo><m:mfrac><m:mn>1</m:mn><m:mrow><m:mo stretchy="false">(</m:mo><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>α</m:mi><m:mo stretchy="false">)</m:mo><m:mo>+</m:mo><m:mi>α</m:mi><m:mo>/</m:mo><m:mi>k</m:mi></m:mrow></m:mfrac></m:mrow></m:math>
<span class="number3 pcalibre pcalibre1">(1.1)</span>
</div>
<p id="P700049702700000000000000003E612" data-uri="chapter01.xhtml#P700049702700000000000000003E612" class="pcalibre1 pcalibre calibre2">As an example, consider the case where a part of the system that initially consumed 60% of the time (α = 0.6) is sped up by a factor of 3 (<var class="calibre5 pcalibre pcalibre1">k</var> = 3). Then we get a speedup of 1/[0.4 + 0.6/3] = 1.67×. Even though we made a substantial improvement to a major part of the system, our net speedup was significantly less than the speedup for the one part. This is the major insight of Amdahl's law—to significantly speed up the entire system, we must improve the speed of a very large fraction of the overall system.</p>
<section id="P700049702700000000000000000020B" data-uri="chapter01.xhtml#P700049702700000000000000000020B" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E613" data-uri="chapter01.xhtml#P700049702700000000000000003E613" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">1.1 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000000256.xhtml#P700049702700000000000000000025A">28</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E614" data-uri="chapter01.xhtml#P700049702700000000000000003E614">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E615" data-uri="chapter01.xhtml#P700049702700000000000000003E615">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E616" data-uri="chapter01.xhtml#P700049702700000000000000003E616"><p id="P700049702700000000000000003E617" data-uri="chapter01.xhtml#P700049702700000000000000003E617" class="pcalibre calibre3 pcalibre1">Suppose you work as a truck driver, and you have been hired to carry a load of potatoes from Boise, Idaho, to Minneapolis, Minnesota, a total distance of 2,500 kilometers. You estimate you can average 100 km/hr driving within the speed limits, requiring a total of 25 hours for the trip.</p></div></li>
</ol>
</section>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000000211" data-uri="chapter01.xhtml#P7000497027000000000000000000211"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E618" data-uri="chapter01.xhtml#P700049702700000000000000003E618" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000213" title="23" data-uri="chapter01.xhtml#P7000497027000000000000000000213" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Expressing relative performance</h1></header>
<p id="P700049702700000000000000003E619" data-uri="chapter01.xhtml#P700049702700000000000000003E619" class="calibre13 pcalibre pcalibre1">The best way to express a performance improvement is as a ratio of the form <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>/<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub>, where <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub> is the time required for the original version and <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub> is the time required by the modified version. This will be a number greater than 1.0 if any real improvement occurred. We use the suffix `×' to indicate such a ratio, where the factor "2.2×" is expressed verbally as "2.2 times."</p>
<p id="P700049702700000000000000003E61A" data-uri="chapter01.xhtml#P700049702700000000000000003E61A" class="pcalibre calibre3 pcalibre1">The more traditional way of expressing relative change as a percentage works well when the change is small, but its definition is ambiguous. Should it be 100 · (<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub> − <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub>)/<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub>, or possibly 100 · (<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub> − <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">new</sub>)/<var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">old</sub>, or something else? In addition, it is less instructive for large changes. Saying that "performance improved by 120%" is more difficult to comprehend than simply saying that the performance improved by 2.2×.</p>
</aside>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000003E61B" data-uri="chapter01.xhtml#P700049702700000000000000003E61B">
<li id="P700049702700000000000000003E61C" data-uri="chapter01.xhtml#P700049702700000000000000003E61C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E61D" data-uri="chapter01.xhtml#P700049702700000000000000003E61D" class="pcalibre calibre3 pcalibre1">You hear on the news that Montana has just abolished its speed limit, which constitutes 1,500 km of the trip. Your truck can travel at 150 km/hr. What will be your speedup for the trip?</p></li>
<li id="P700049702700000000000000003E61E" data-uri="chapter01.xhtml#P700049702700000000000000003E61E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E61F" data-uri="chapter01.xhtml#P700049702700000000000000003E61F" class="pcalibre calibre3 pcalibre1">You can buy a new turbocharger for your truck at <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="http://www.fasttrucks.com">www.fasttrucks.com</a>. They stock a variety of models, but the faster you want to go, the more it will cost. How fast must you travel through Montana to get an overall speedup for your trip of 1.67×?</p></li>
</ol>
<section id="P700049702700000000000000000021B" data-uri="chapter01.xhtml#P700049702700000000000000000021B" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E620" data-uri="chapter01.xhtml#P700049702700000000000000003E620" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">1.2 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000000256.xhtml#P700049702700000000000000000025A">28</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000003E621" data-uri="chapter01.xhtml#P700049702700000000000000003E621">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000003E622" data-uri="chapter01.xhtml#P700049702700000000000000003E622">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E623" data-uri="chapter01.xhtml#P700049702700000000000000003E623"><p id="P700049702700000000000000003E624" data-uri="chapter01.xhtml#P700049702700000000000000003E624" class="pcalibre calibre3 pcalibre1">The marketing department at your company has promised your customers that the next software release will show a 2× performance improvement. You have been assigned the task of delivering on that promise. You have determined that only 80% of the system can be improved. How much (i.e., what value of <var class="calibre5 pcalibre pcalibre1">k</var>) would you need to improve this part to meet the overall performance target?</p></div></li>
</ol>
</section>
<p id="P700049702700000000000000003E625" data-uri="chapter01.xhtml#P700049702700000000000000003E625" class="pcalibre1 pcalibre calibre2">One interesting special case of Amdahl's law is to consider the effect of setting <var class="calibre5 pcalibre pcalibre1">k</var> to ∞. That is, we are able to take some part of the system and speed it up to the point at which it takes a negligible amount of time. We then get</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000000222" data-uri="chapter01.xhtml#P7000497027000000000000000000222">
<m:math display="block" alttext="" data-uri="" altimg-width="86" altimg-height="36" altimg="../images/ch01-3.png"><m:mrow><m:msub><m:mi>S</m:mi><m:mi>∞</m:mi></m:msub><m:mo>=</m:mo><m:mfrac><m:mn>1</m:mn><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>1</m:mn><m:mo>-</m:mo><m:mi>α</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:mfrac></m:mrow></m:math>
<span class="number3 pcalibre pcalibre1">(1.2)</span>
</div>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E626" data-uri="chapter01.xhtml#P700049702700000000000000003E626">So, for example, if we can speed up 60% of the system to the point where it requires close to no time, our net speedup will still only be 1/0.4 = 2.5×.</p>
<p id="P700049702700000000000000003E627" data-uri="chapter01.xhtml#P700049702700000000000000003E627" class="pcalibre1 pcalibre calibre2">Amdahl's law describes a general principle for improving any process. In addition to its application to speeding up computer systems, it can guide a company trying to reduce the cost of manufacturing razor blades, or a student trying to improve his or her grade point average. Perhaps it is most meaningful in the world <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000225" title="24" data-uri="chapter01.xhtml#P7000497027000000000000000000225" epub:type="pagebreak"></span>of computers, where we routinely improve performance by factors of 2 or more. Such high factors can only be achieved by optimizing large parts of a system.</p>
</section>
<section id="P7000497027000000000000000000226" data-uri="chapter01.xhtml#P7000497027000000000000000000226" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E628" data-uri="chapter01.xhtml#P700049702700000000000000003E628" epub:type="title"><span class="pcalibre label pcalibre1">1.9.2 </span>Concurrency and Parallelism</h1></header>
<p id="P700049702700000000000000003E629" data-uri="chapter01.xhtml#P700049702700000000000000003E629" class="pcalibre1 pcalibre calibre2">Throughout the history of digital computers, two demands have been constant forces in driving improvements: we want them to do more, and we want them to run faster. Both of these factors improve when the processor does more things at once. We use the term <i class="calibre5 pcalibre pcalibre1">concurrency</i> to refer to the general concept of a system with multiple, simultaneous activities, and the term <i class="calibre5 pcalibre pcalibre1">parallelism</i> to refer to the use of concurrency to make a system run faster. Parallelism can be exploited at multiple levels of abstraction in a computer system. We highlight three levels here, working from the highest to the lowest level in the system hierarchy.</p>
<section id="P7000497027000000000000000000229" data-uri="chapter01.xhtml#P7000497027000000000000000000229" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E62A" data-uri="chapter01.xhtml#P700049702700000000000000003E62A" epub:type="title">Thread-Level Concurrency</h1></header>
<p id="P700049702700000000000000003E62B" data-uri="chapter01.xhtml#P700049702700000000000000003E62B" class="pcalibre1 pcalibre calibre2">Building on the process abstraction, we are able to devise systems where multiple programs execute at the same time, leading to <i class="calibre5 pcalibre pcalibre1">concurrency</i>. With threads, we can even have multiple control flows executing within a single process. Support for concurrent execution has been found in computer systems since the advent of time-sharing in the early 1960s. Traditionally, this concurrent execution was only <i class="calibre5 pcalibre pcalibre1">simulated</i>, by having a single computer rapidly switch among its executing processes, much as a juggler keeps multiple balls flying through the air. This form of concurrency allows multiple users to interact with a system at the same time, such as when many people want to get pages from a single Web server. It also allows a single user to engage in multiple tasks concurrently, such as having a Web browser in one window, a word processor in another, and streaming music playing at the same time. Until recently, most actual computing was done by a single processor, even if that processor had to switch among multiple tasks. This configuration is known as a <i class="calibre5 pcalibre pcalibre1">uniprocessor system.</i></p>
<p id="P700049702700000000000000003E62C" data-uri="chapter01.xhtml#P700049702700000000000000003E62C" class="pcalibre1 pcalibre calibre2">When we construct a system consisting of multiple processors all under the control of a single operating system kernel, we have a <i class="calibre5 pcalibre pcalibre1">multiprocessor system</i>. Such systems have been available for large-scale computing since the 1980s, but they have more recently become commonplace with the advent of <i class="calibre5 pcalibre pcalibre1">multi-core</i> processors and <i class="calibre5 pcalibre pcalibre1">hyperthreading</i>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000022E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.16</span></a> shows a taxonomy of these different processor types.</p>
<p id="P700049702700000000000000003E62D" data-uri="chapter01.xhtml#P700049702700000000000000003E62D" class="pcalibre1 pcalibre calibre2">Multi-core processors have several CPUs (referred to as "cores") integrated onto a single integrated-circuit chip. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000000234"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.17</span></a> illustrates the organization of a</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000022E" data-uri="chapter01.xhtml#P700049702700000000000000000022E">
<img alt="A diagram shows all processors divided among uniprocessors and multiprocessors. Multiprocessors are divided into multi-core and hyper-threaded." id="P700049702700000000000000003E62E" data-uri="P700049702700000000000000000B6B5" src="../images/p24-1.png" class="calibre48 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000003E62F" data-uri="chapter01.xhtml#P700049702700000000000000003E62F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E630" data-uri="chapter01.xhtml#P700049702700000000000000003E630" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">1.16 </span>Categorizing different processor configurations.</h1></header>
<div class="caption pcalibre pcalibre1" id="P700049702700000000000000003E631" data-uri="chapter01.xhtml#P700049702700000000000000003E631"><p id="P700049702700000000000000003E632" data-uri="chapter01.xhtml#P700049702700000000000000003E632" class="pcalibre calibre3 pcalibre1">Multiprocessors are becoming prevalent with the advent of multi-core processors and hyperthreading.</p></div></figcaption></figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000000234" data-uri="chapter01.xhtml#P7000497027000000000000000000234">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000235" title="25" data-uri="chapter01.xhtml#P7000497027000000000000000000235" epub:type="pagebreak"></span>
<img alt="A diagram illustrates the multi-core processor organization." id="P700049702700000000000000003E633" data-uri="P700049702700000000000000000B6B9" src="../images/p25-1.png" class="calibre49 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000003E634" data-uri="chapter01.xhtml#P700049702700000000000000003E634" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E635" data-uri="chapter01.xhtml#P700049702700000000000000003E635" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">1.17 </span>Multi-core processor organization.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E636" data-uri="chapter01.xhtml#P700049702700000000000000003E636"><p id="P700049702700000000000000003E637" data-uri="chapter01.xhtml#P700049702700000000000000003E637" class="pcalibre calibre3 pcalibre1">Four processor cores are integrated onto a single chip.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001E905" data-uri="chapter01.xhtml#P700049702700000000000000001E905">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E638" data-uri="chapter01.xhtml#P700049702700000000000000003E638" class="pcalibre calibre3 pcalibre1">A diagram shows the processor package consisting of Core 0 through Core 3, all interacting with L3 unified cache (shared by all cores), which then interacts with main memory. Each core consists of regs connected to L1 d-cash, connected to L2 unified cache, which is also connected to L1 i-cache.</p>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E639" data-uri="chapter01.xhtml#P700049702700000000000000003E639">typical multi-core processor, where the chip has four CPU cores, each with its own L1 and L2 caches, and with each L1 cache split into two parts—one to hold recently fetched instructions and one to hold data. The cores share higher levels of cache as well as the interface to main memory. Industry experts predict that they will be able to have dozens, and ultimately hundreds, of cores on a single chip.</p>
<p id="P700049702700000000000000003E63A" data-uri="chapter01.xhtml#P700049702700000000000000003E63A" class="pcalibre1 pcalibre calibre2">Hyperthreading, sometimes called <i class="calibre5 pcalibre pcalibre1">simultaneous multi-threading</i>, is a technique that allows a single CPU to execute multiple flows of control. It involves having multiple copies of some of the CPU hardware, such as program counters and register files, while having only single copies of other parts of the hardware, such as the units that perform floating-point arithmetic. Whereas a conventional processor requires around 20,000 clock cycles to shift between different threads, a hyper threaded processor decides which of its threads to execute on a cycle-by-cycle basis. It enables the CPU to take better advantage of its processing resources. For example, if one thread must wait for some data to be loaded into a cache, the CPU can proceed with the execution of a different thread. As an example, the Intel Core i7 processor can have each core executing two threads, and so a four-core system can actually execute eight threads in parallel.</p>
<p id="P700049702700000000000000003E63B" data-uri="chapter01.xhtml#P700049702700000000000000003E63B" class="pcalibre1 pcalibre calibre2">The use of multiprocessing can improve system performance in two ways. First, it reduces the need to simulate concurrency when performing multiple tasks. As mentioned, even a personal computer being used by a single person is expected to perform many activities concurrently. Second, it can run a single application program faster, but only if that program is expressed in terms of multiple threads that can effectively execute in parallel. Thus, although the principles of concurrency have been formulated and studied for over 50 years, the advent of multi-core and hyperthreaded systems has greatly increased the desire to find ways to write application programs that can exploit the thread-level parallelism available with <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000023E" title="26" data-uri="chapter01.xhtml#P700049702700000000000000000023E" epub:type="pagebreak"></span>the hardware. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a> will look much more deeply into concurrency and its use to provide a sharing of processing resources and to enable more parallelism in program execution.</p>
</section>
<section id="P700049702700000000000000000023F" data-uri="chapter01.xhtml#P700049702700000000000000000023F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E63C" data-uri="chapter01.xhtml#P700049702700000000000000003E63C" epub:type="title">Instruction-Level Parallelism</h1></header>
<p id="P700049702700000000000000003E63D" data-uri="chapter01.xhtml#P700049702700000000000000003E63D" class="pcalibre1 pcalibre calibre2">At a much lower level of abstraction, modern processors can execute multiple instructions at one time, a property known as <i class="calibre5 pcalibre pcalibre1">instruction-level parallelism</i>. For example, early microprocessors, such as the 1978-vintage Intel 8086, required multiple (typically 3-10) clock cycles to execute a single instruction. More recent processors can sustain execution rates of 2-4 instructions per clock cycle. Any given instruction requires much longer from start to finish, perhaps 20 cycles or more, but the processor uses a number of clever tricks to process as many as 100 instructions at a time. In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a>, we will explore the use of <i class="calibre5 pcalibre pcalibre1">pipelining</i>, where the actions required to execute an instruction are partitioned into different steps and the processor hardware is organized as a series of stages, each performing one of these steps. The stages can operate in parallel, working on different parts of different instructions. We will see that a fairly simple hardware design can sustain an execution rate close to 1 instruction per clock cycle.</p>
<p id="P700049702700000000000000003E63E" data-uri="chapter01.xhtml#P700049702700000000000000003E63E" class="pcalibre1 pcalibre calibre2">Processors that can sustain execution rates faster than 1 instruction per cycle are known as <i class="calibre5 pcalibre pcalibre1">superscalar</i> processors. Most modern processors support superscalar operation. In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a>, we will describe a high-level model of such processors. We will see that application programmers can use this model to understand the performance of their programs. They can then write programs such that the generated code achieves higher degrees of instruction-level parallelism and therefore runs faster.</p>
</section>
<section id="P7000497027000000000000000000243" data-uri="chapter01.xhtml#P7000497027000000000000000000243" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E63F" data-uri="chapter01.xhtml#P700049702700000000000000003E63F" epub:type="title">Single-Instruction, Multiple-Data (SIMD) Parallelism</h1></header>
<p id="P700049702700000000000000003E640" data-uri="chapter01.xhtml#P700049702700000000000000003E640" class="pcalibre1 pcalibre calibre2">At the lowest level, many modern processors have special hardware that allows a single instruction to cause multiple operations to be performed in parallel, a mode known as <i class="calibre5 pcalibre pcalibre1">single-instruction, multiple-data</i>(SIMD) parallelism. For example, recent generations of Intel and AMD processors have instructions that can add 8 pairs of single-precision floating-point numbers (C data type <code id="P700049702700000000000000003E641" data-uri="chapter01.xhtml#P700049702700000000000000003E641" class="pcalibre1 calibre8 pcalibre">float</code>) in parallel.</p>
<p id="P700049702700000000000000003E642" data-uri="chapter01.xhtml#P700049702700000000000000003E642" class="pcalibre1 pcalibre calibre2">These SIMD instructions are provided mostly to speed up applications that process image, sound, and video data. Although some compilers attempt to automatically extract SIMD parallelism from C programs, a more reliable method is to write programs using special <i class="calibre5 pcalibre pcalibre1">vector</i> data types supported in compilers such as <span class="smallcaps pcalibre pcalibre1">gcc</span>. We describe this style of programming in Web Aside <span class="smallcaps pcalibre pcalibre1">opt:simd</span>, as a supplement to the more general presentation on program optimization found in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a>.</p>
</section>
</section>
<section id="P7000497027000000000000000000248" data-uri="chapter01.xhtml#P7000497027000000000000000000248" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E643" data-uri="chapter01.xhtml#P700049702700000000000000003E643" epub:type="title"><span class="pcalibre label pcalibre1">1.9.3 </span>The Importance of Abstractions in Computer Systems</h1></header>
<p id="P700049702700000000000000003E644" data-uri="chapter01.xhtml#P700049702700000000000000003E644" class="pcalibre1 pcalibre calibre2">The use of <i class="calibre5 pcalibre pcalibre1">abstractions</i> is one of the most important concepts in computer science. For example, one aspect of good programming practice is to formulate a simple application program interface (API) for a set of functions that allow programmers to use the code without having to delve into its inner workings. Different programming</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000024B" data-uri="chapter01.xhtml#P700049702700000000000000000024B">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000024C" title="27" data-uri="chapter01.xhtml#P700049702700000000000000000024C" epub:type="pagebreak"></span>
<img alt="A diagram illustrations abstractions of a virtual machine." id="P700049702700000000000000003E645" data-uri="P700049702700000000000000000B6BD" src="../images/p27-1.png" class="pcalibre1 calibre50 pcalibre"/>
<figcaption id="P700049702700000000000000003E646" data-uri="chapter01.xhtml#P700049702700000000000000003E646" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E647" data-uri="chapter01.xhtml#P700049702700000000000000003E647" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">1.18 </span>Some abstractions provided by a computer system.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E648" data-uri="chapter01.xhtml#P700049702700000000000000003E648"><p id="P700049702700000000000000003E649" data-uri="chapter01.xhtml#P700049702700000000000000003E649" class="pcalibre calibre3 pcalibre1">A major theme in computer systems is to provide abstract representations at different levels to hide the complexity of the actual implementations.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001E918" data-uri="chapter01.xhtml#P700049702700000000000000001E918">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E64A" data-uri="chapter01.xhtml#P700049702700000000000000003E64A" class="pcalibre calibre3 pcalibre1">A diagram shows operating system, processor, main memory, and I/O devices all part of the virtual machine; processor, main memory, and I/O devices part of processes; processor as instruction set architecture; main memory and I/O devices part of virtual memory; and I/O devices as Files.</p>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E64B" data-uri="chapter01.xhtml#P700049702700000000000000003E64B">languages provide different forms and levels of support for abstraction, such as Java class declarations and C function prototypes.</p>
<p id="P700049702700000000000000003E64C" data-uri="chapter01.xhtml#P700049702700000000000000003E64C" class="pcalibre1 pcalibre calibre2">We have already been introduced to several of the abstractions seen in computer systems, as indicated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000024B"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.18</span></a>. On the processor side, the <i class="calibre5 pcalibre pcalibre1">instruction set architecture</i> provides an abstraction of the actual processor hardware. With this abstraction, a machine-code program behaves as if it were executed on a processor that performs just one instruction at a time. The underlying hardware is far more elaborate, executing multiple instructions in parallel, but always in a way that is consistent with the simple, sequential model. By keeping the same execution model, different processor implementations can execute the same machine code while offering a range of cost and performance.</p>
<p id="P700049702700000000000000003E64D" data-uri="chapter01.xhtml#P700049702700000000000000003E64D" class="pcalibre1 pcalibre calibre2">On the operating system side, we have introduced three abstractions: <i class="calibre5 pcalibre pcalibre1">files</i> as an abstraction of I/O devices, <i class="calibre5 pcalibre pcalibre1">virtual memory</i> as an abstraction of program memory, and <i class="calibre5 pcalibre pcalibre1">processes</i> as an abstraction of a running program. To these abstractions we add a new one: the <i class="calibre5 pcalibre pcalibre1">virtual machine</i>, providing an abstraction of the entire computer, including the operating system, the processor, and the programs. The idea of a virtual machine was introduced by IBM in the 1960s, but it has become more prominent recently as a way to manage computers that must be able to run programs designed for multiple operating systems (such as Microsoft Windows, Mac OS X, and Linux) or different versions of the same operating system.</p>
<p id="P700049702700000000000000003E64E" data-uri="chapter01.xhtml#P700049702700000000000000003E64E" class="pcalibre1 pcalibre calibre2">We will return to these abstractions in subsequent sections of the book.</p>
</section>
</section></body></html>
