<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>16.6 OS Support</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part156.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part158.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 6pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">16.6 OS Support</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You now should have a basic idea as to how segmentation works. Pieces of the address space are relocated into physical memory as the system runs, and thus a huge savings of physical memory is achieved relative to our simpler approach with just a single base/bounds pair for the entire address space. Specifically, all the unused space between the stack and the heap need not be allocated in physical memory, allowing us to fit more address spaces into physical memory.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: right;">However, segmentation raises a number of new issues. We’ll first de- scribe the new OS issues that must be addressed. The first is an old one: what should the OS do on a context switch? You should have a good guess by now: the segment registers must be saved and restored. Clearly, each process has its own virtual address space, and the OS must make sure to set up these registers correctly before letting the process run again. The second, and more important, issue is managing free space in phys- ical memory. When a new address space is created, the OS has to be able to find space in physical memory for its segments. Previously, we assumed that each address space was the same size, and thus physical memory could be thought of as a bunch of slots where processes would fit in. Now, we have a number of segments per process, and each segment</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">might be a different size.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 38pt;text-indent: 0pt;text-align: right;">0KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">8KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="85" height="27" alt="image" src="Image_154.png"/></span></p><p class="s46" style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">16KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">24KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="86" height="14" alt="image" src="Image_155.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">32KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="85" height="39" alt="image" src="Image_156.png"/></span></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">40KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">48KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">56KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">64KB</p><p class="s77" style="padding-top: 3pt;padding-bottom: 1pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">Not Compacted</p><table style="border-collapse:collapse;margin-left:10.563pt" cellspacing="0"><tr style="height:37pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Operating System</p></td></tr><tr style="height:18pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">(not in use)</p></td></tr><tr style="height:18pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Allocated</p></td></tr><tr style="height:9pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;line-height: 7pt;text-align: center;">(not in use)</p></td></tr><tr style="height:18pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s83" style="padding-top: 2pt;padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Allocated</p></td></tr><tr style="height:28pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">(not in use)</p></td></tr><tr style="height:18pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Allocated</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">0KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">8KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">16KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">24KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">32KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">40KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">48KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">56KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">64KB</p><p class="s77" style="padding-top: 3pt;padding-bottom: 1pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">Compacted</p><table style="border-collapse:collapse;margin-left:10.5634pt" cellspacing="0"><tr style="height:37pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Operating System</p></td></tr><tr style="height:56pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-top: 3pt;padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">Allocated</p></td></tr><tr style="height:56pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s83" style="padding-top: 3pt;padding-left: 5pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">(not in use)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="85" height="77" alt="image" src="Image_157.png"/></span></p><p style="padding-top: 2pt;padding-left: 104pt;text-indent: 0pt;text-align: justify;">Figure 16.3: <b>Non-compacted and Compacted Memory</b></p><p style="padding-top: 2pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The general problem that arises is that physical memory quickly be- comes full of little holes of free space, making it difficult to allocate new segments, or to grow existing ones. We call this problem <b>external frag- mentation </b>[R69]; see Figure <span style=" color: #00AEEF;">16.3 </span>(left).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In the example, a process comes along and wishes to allocate a 20KB segment. In that example, there is 24KB free, but not in one contiguous segment (rather, in three non-contiguous chunks). Thus, the OS cannot satisfy the 20KB request.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">One solution to this problem would be to <b>compact </b>physical memory by rearranging the existing segments. For example, the OS could stop whichever processes are running, copy their data to one contiguous re- gion of memory, change their segment register values to point to the new physical locations, and thus have a large free extent of memory with which to work. By doing so, the OS enables the new allocation request to succeed. However, compaction is expensive, as copying segments is memory-intensive and thus would use a fair amount of processor time. See Figure <span style=" color: #00AEEF;">16.3 </span>(right) for a diagram of compacted physical memory.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">A simpler approach is to use a free-list management algorithm that tries to keep large extents of memory available for allocation. There are literally hundreds of approaches that people have taken, including clas- sic algorithms like <b>best-fit </b>(which keeps a list of free spaces and returns the one closest in size that satisfies the desired allocation to the requester), <b>worst-fit</b>, <b>first-fit</b>, and more complex schemes like <b>buddy algorithm </b>[K68]. An excellent survey by Wilson et al. is a good place to start if you want to learn more about such algorithms [W+95], or you can wait until we cover some of the basics ourselves in a later chapter. Unfortunately, though, no matter how smart the algorithm, external fragmentation will still exist; thus, a good algorithm simply attempts to minimize it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">IP</span>: I<span class="s7">F </span>1000 S<span class="s7">OLUTIONS </span>E<span class="s7">XIST</span>, N<span class="s7">O </span>G<span class="s7">REAT </span>O<span class="s7">NE </span>D<span class="s7">OES</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The fact that so many different algorithms exist to try to minimize exter- nal fragmentation is indicative of a stronger underlying truth: there is no one “best” way to solve the problem. Thus, we settle for something rea- sonable and hope it is good enough. The only real solution (as we will see in forthcoming chapters) is to avoid the problem altogether, by never allocating memory in variable-sized chunks.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part156.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part158.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
