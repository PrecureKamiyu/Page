<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>19.6  Failure with Loss of Non-Volatile Storage</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part351.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part353.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">19.6  <span style=" color: #00AEEF;">Failure with Loss of Non-Volatile Storage</span></p><p style="padding-top: 11pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Until now, we have considered only the case where a failure results in the loss of infor- mation residing in volatile storage while the content of the non-volatile storage remains intact. Although failures in which the content of non-volatile storage is lost are rare, we nevertheless need to be prepared to deal with this type of failure. In this section, we discuss only disk storage. Our discussions apply as well to other non-volatile storage types.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The basic scheme is to <span class="s63">dump </span>the entire contents of the database to stable storage periodically— say, once per day. For example, we may dump the database to one or more magnetic tapes. If a failure occurs that results in the loss of physical database blocks, the system uses the most recent dump in restoring the database to a previous consistent state. Once this restoration has been accomplished, the system uses the log to bring the database system to the most recent consistent state.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">One approach to database dumping requires that no transaction may be active during the dump procedure, and it uses a procedure similar to checkpointing:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s63" style="padding-top: 4pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a name="bookmark401">1. </a><span class="p">Output all log records currently residing in main memory onto stable storage.</span><a name="bookmark441">&zwnj;</a></p><p class="s63" style="padding-top: 6pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">2. <span class="p">Output all buﬀer blocks onto the disk.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">3. <span class="p">Copy the contents of the database to stable storage.</span></p><p class="s83" style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><span class="s63">4. </span><span class="p">Output a log record </span>&lt;<span class="s49">dump</span>&gt; <span class="p">onto the stable storage.</span></p><p style="padding-top: 6pt;padding-left: 137pt;text-indent: -17pt;text-align: left;">Steps 1, 2, and 4 correspond to the three steps used for checkpoints in Section 19.3.6.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">To recover from the loss of non-volatile storage, the system restores the database to disk by using the most recent dump. Then, it consults the log and redoes all the actions since the most recent dump occurred. Notice that no undo operations need to be executed.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In case of a partial failure of non-volatile storage, such as the failure of a single block or a few blocks, only those blocks need to be restored, and redo actions performed only for those blocks.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A dump of the database contents is also referred to as an <span class="s63">archival dump</span>, since we can archive the dumps and use them later to examine old states of the database. Dumps of a database and checkpointing of buﬀers are similar.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: right;">Most database systems also support an <span class="s64">SQL </span><span class="s84">dump</span>, which writes out <span class="s44">SQL DDL </span>statements and <span class="s44">SQL </span>insert statements to a ﬁle, which can then be reexecuted to re-create the database. Such dumps are useful when migrating data to a diﬀerent instance of the database, or to a diﬀerent version of the database software, since the physical locations and layout may be diﬀerent in the other database instance or database software version. The simple dump procedure described here is costly for the following two reasons.</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">First, the entire database must be copied to stable storage, resulting in considerable data transfer. Second, since transaction processing is halted during the dump procedure, <span class="s44">CPU </span>cycles are wasted. <span class="s63">Fuzzy dump </span>schemes have been developed that allow transac- tions to be active while the dump is in progress. They are similar to fuzzy-checkpointing schemes; see the bibliographical notes for more details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part351.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part353.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
