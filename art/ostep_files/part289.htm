<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>28.10 Load-Linked and Store-Conditional</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part288.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part290.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">28.10 Load-Linked and Store-Conditional</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Some platforms provide a pair of instructions that work in concert to help build critical sections. On the MIPS architecture [H93], for example, the <b>load-linked </b>and <b>store-conditional </b>instructions can be used in tandem to build locks and other concurrent structures. The C pseudocode for these instructions is as found in Figure <span style=" color: #00AEEF;">28.4</span>. Alpha, PowerPC, and ARM provide similar instructions [W09].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 4pt;padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">1  </span>int LoadLinked(int <span class="s39">*</span>ptr) {</p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 83%;text-align: left;"><span class="s37">2    </span>return <span class="s39">*</span>ptr;</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">3  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">4</p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">5  </span>int StoreConditional(int <span class="s39">*</span>ptr, int value) {</p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 83%;text-align: left;"><span class="s37">6     </span>if (no one has updated <span class="s39">*</span>ptr since the LoadLinked to this address) {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 83%;text-align: left;">7       <span class="s39">*</span><span class="s38">ptr = value;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">8       <span class="s38">return 1; // success!</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">9    <span class="s38">} else {</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10       <span class="s38">return 0; // failed to update</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11    <span class="s38">}</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12  <span class="s38">}</span></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 28.4: <b>Load-linked And Store-conditional</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">1  </span>void lock(lock_t <span class="s39">*</span>lock) {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2    <span class="s38">while (1) {</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3       <span class="s38">while (LoadLinked(&amp;lock-&gt;flag) == 1)</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4          <span class="s38">; // spin until it’s zero</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5       <span class="s38">if (StoreConditional(&amp;lock-&gt;flag, 1) == 1)</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">6          <span class="s38">return; // if set-it-to-1 was a success: all done</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7                <span class="s38">// otherwise: try it all over again</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">8    <span class="s38">}</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">9  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">10</p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">11  </span>void unlock(lock_t <span class="s39">*</span>lock) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">12    <span class="s38">lock-&gt;flag = 0;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">13  <span class="s38">}</span></p><p style="padding-left: 100pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 28.5: <b>Using LL/SC To Build A Lock</b></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The load-linked operates much like a typical load instruction, and sim- ply fetches a value from memory and places it in a register. The key differ- ence comes with the store-conditional, which only succeeds (and updates the value stored at the address just load-linked from) if no intermittent store to the address has taken place. In the case of success, the store- conditional returns 1 and updates the value at <span class="s41">ptr </span>to <span class="s41">value</span>; if it fails, the value at <span class="s41">ptr </span>is <i>not </i>updated and 0 is returned.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">As a challenge to yourself, try thinking about how to build a lock using load-linked and store-conditional. Then, when you are finished, look at the code below which provides one simple solution. Do it! The solution is in Figure <span style=" color: #00AEEF;">28.5</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The <span class="s41">lock() </span>code is the only interesting piece. First, a thread spins waiting for the flag to be set to 0 (and thus indicate the lock is not held). Once so, the thread tries to acquire the lock via the store-conditional; if it succeeds, the thread has atomically changed the flag’s value to 1 and thus can proceed into the critical section.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Note how failure of the store-conditional might arise. One thread calls <span class="s41">lock() </span>and executes the load-linked, returning 0 as the lock is not held. Before it can attempt the store-conditional, it is interrupted and another thread enters the lock code, also executing the load-linked instruction, and also getting a 0 and continuing. At this point, two threads have each executed the load-linked and each are about to attempt the store- conditional. The key feature of these instructions is that only one of these threads will succeed in updating the flag to 1 and thus acquire the lock;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 53pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: L<span class="s7">ESS </span>C<span class="s7">ODE </span>I<span class="s7">S </span>B<span class="s7">ETTER </span>C<span class="s7">ODE </span>(L<span class="s7">AUER</span>’<span class="s7">S </span>L<span class="s7">AW</span>)</p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Programmers tend to brag about how much code they wrote to do some- thing. Doing so is fundamentally broken. What one should brag about, rather, is how <i>little </i>code one wrote to accomplish a given task. Short, concise code is always preferred; it is likely easier to understand and has fewer bugs. As Hugh Lauer said, when discussing the construction of the Pilot operating system: “If the same people had twice as much time, they could produce as good of a system in half the code.” [L81] We’ll call this <b>Lauer’s Law</b>, and it is well worth remembering. So next time you’re bragging about how much code you wrote to finish the assignment, think again, or better yet, go back, rewrite, and make the code as clear and con- cise as possible.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">the second thread to attempt the store-conditional will fail (because the other thread updated the value of flag between its load-linked and store- conditional) and thus have to try to acquire the lock again.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">In class a few years ago, undergraduate student David Capel sug- gested a more concise form of the above, for those of you who enjoy short-circuiting boolean conditionals. See if you can figure out why it is equivalent. It certainly is shorter!</p><p class="s38" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">1  </span>void lock(lock_t <span class="s39">*</span>lock) {</p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2   <span class="s38">while (LoadLinked(&amp;lock-&gt;flag)||!StoreConditional(&amp;lock-&gt;flag, 1))</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">3    <span class="s38">; // spin</span></p><p class="s37" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">4  <span class="s38">}</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part288.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part290.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
