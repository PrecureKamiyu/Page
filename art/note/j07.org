* Set 和 List

Set和List都是Java集合框架中的接口，它们都可以用来存储一组元素。但是，
它们之间有一些重要的区别：

元素唯一性：Set接口中的元素是唯一的，也就是说，同一个元素只能在Set中出
现一次。而List接口允许重复的元素。

元素顺序：List接口中的元素是有序的，也就是说，元素在List中的顺序是固定
的。而Set接口中的元素是无序的。

索引：List接口支持索引，可以通过索引来访问、插入、删除元素。而Set接口
不支持索引。

这些区别决定了Set和List在实际应用中的不同用途。例如，如果需要存储一组
不重复的元素，并且不关心元素顺序，那么可以使用Set；如果需要存储一组可
能重复的元素，并且需要保持元素顺序，那么可以使用List。

Set 有两种(至少)类, 分别为 ~HashSet~ 和 ~TreeSet~.
List有两种(至少)类, 分别为 ~ArrayList~ 和 ~LinkedList~.

** Array List 

我们初始化的时候可以用这样的语句

~ArrayList<E> list = new ArrayList<>();~

其中 ~<>~ 所包围的便是类的名称. 

** LinkedList 类

LinkedList 是一个已经封装好了的 *双向链表*. 

** Let us ask Bing! 

Q: LinkedList 和 ArrayList 之间有什么区别? 

A: LinkedList和ArrayList都是Java集合框架中的List接口的实现类，它们都可
以用来存储一组有序的元素。但是，它们之间有一些重要的区别：

内部实现：ArrayList是基于动态数组实现的，而LinkedList是基于双向链表实
现的。

插入和删除操作：由于LinkedList是基于链表实现的，所以在链表的头部或尾部
插入或删除元素的时间复杂度为O(1)。但是，在链表中间插入或删除元素需要先
找到对应位置，时间复杂度为O(n)。而ArrayList是基于数组实现的，所以在数
组末尾插入或删除元素的时间复杂度为O(1)，但是在数组中间插入或删除元素需
要移动元素，时间复杂度为O(n)。

随机访问操作：由于ArrayList是基于数组实现的，所以它支持快速随机访问，
时间复杂度为O(1)。而LinkedList不支持快速随机访问，需要从头或尾遍历链表
来访问指定位置的元素，时间复杂度为O(n)。

这些区别决定了LinkedList和ArrayList在实际应用中的不同用途。例如，如果
需要频繁在列表头部或尾部插入或删除元素，那么可以使用LinkedList；如果需
要频繁随机访问列表中的元素，那么可以使用ArrayList。


* Set 和 Map 接口

Map 是 Java 集合框架中的一个接口，它用于存储键值对（key-value pairs）。
Map 中的每个元素都包含一个键和一个值，可以通过键来访问、插入、删除元素。

Map 中的键是唯一的，也就是说，同一个键只能在 Map 中出现一次。但是，不
同的键可以映射到相同的值。

Map 接口提供了一些方法来操作键值对，例如 ~put(key, value)~ 用于插入或
更新一个键值对，get(key)用于根据键来获取对应的值，remove(key)用于删除
指定键的键值对。

Java提供了几种常用的Map实现，包括HashMap、TreeMap、LinkedHashMap等。这
些实现之间有一些区别，例如HashMap是无序的，TreeMap是有序的，
LinkedHashMap保持了插入顺序。

** HashSet 

HashSet 不是线程安全的, 如果说有多个线程尝试同时修改 HashSet, 则其最终
结果是不确定的. 这个时候, 我们需要在多线程访问的时候 _显式同步_ 对 HashSet
的并发访问. 

** Let us ask Bing! 

Q: Tell me about HashSet and TreeSet

A: HashSet和TreeSet都是Java集合框架中的Set接口的实现类，它们都可以用来
存储一组不重复的元素。但是，它们之间有一些重要的区别：

1. 内部实现：HashSet是基于哈希表实现的，而TreeSet是基于红黑树实现的。
2. 元素顺序：HashSet中的元素是无序的，而TreeSet中的元素是有序的。
   TreeSet 中的元素按照自然顺序或者指定的比较器进行排序。
3. 时间复杂度：由于HashSet是基于哈希表实现的，所以它支持O(1)时间复杂度
   的添加、删除和查找操作。而TreeSet是基于红黑树实现的，所以它支持
   O(log n) 时间复杂度的添加、删除和查找操作。

这些区别决定了HashSet和TreeSet在实际应用中的不同用途。例如，如果需要快
速添加、删除和查找元素，并且不关心元素顺序，那么可以使用HashSet；如果
需要存储一组有序的不重复元素，那么可以使用TreeSet。


* 策略模式 (Strategy Pattern)

策略模式（Strategy Pattern）是一种常用的行为设计模式，它允许在运行时根
据需要选择算法或策略。它定义了一系列算法，将每个算法封装起来，并使它们
之间可以互相替换。这样，算法的变化不会影响到使用算法的客户端。

策略模式通常由三部分组成：上下文（Context）、策略接口（Strategy）和具
体策略（Concrete Strategy）。上下文负责维护一个对策略接口的引用，客户
端可以通过上下文来选择和使用具体策略。策略接口定义了所有支持的算法的公
共接口，具体策略实现了策略接口，并提供了具体的算法实现。

值得注意的是, Context 是什么? Context 是一个策略的封装, 里面维护了一个
策略接口的实例. Context 到底哪个层级, 我们可以从一个角度切入, 我们要调
用 Context 类的一个 ~setStrategy~ 方法来切换 ~Stra~, 那么说, 需要切换
方法的类, 的内部, 应该有一个 Context 的实例. 

** 策略模式适用于以下情况：

1. 当您有一组相关的算法，并且需要在运行时根据需要选择其中一个算法时，
   可以使用策略模式。例如，在上面的例子中，我们有三种不同的折扣计算策
   略，可以根据用户类型在运行时选择相应的折扣计算策略。

2. 当您需要避免使用多重条件语句（例如if-else或switch-case）来选择算法
   时，可以使用策略模式。使用策略模式可以将每个算法封装在一个单独的类
   中，从而避免了多重条件语句。

3. 当您需要能够在运行时更改算法或策略时，可以使用策略模式。例如，在上
   面的例子中，我们可以在运行时更改购物车的折扣计算策略。

总之，当您需要在一组相关的算法中进行选择，并且希望能够在运行时更改选择
时，可以考虑使用策略模式。

** 优点和缺点

当然可以，这个模式有以下几个优点：

1. 可以提高代码的灵活性和可扩展性。通过将算法或行为抽象为一个接口或抽
   象类，并实现不同的具体策略类，我们可以在运行时动态地切换算法或行为，
   而无需更改客户端代码，从而使代码更加灵活和可扩展。
2. 可以降低代码重复率。通过使用该模式，我们可以将相关的算法或行为封装
   到单独的策略类中，避免了代码中的重复逻辑。
3. 可以隐藏具体实现细节。通过向客户端暴露一个统一的接口或抽象类，该模
   式可以将具体实现细节隐藏起来，使得客户端不需要知道具体算法或行为的
   实现方式。
4. 可以方便地添加新的策略。如果需要添加新的算法或行为，只需要实现一个
   新的具体策略类即可，而无需更改原有的代码。总之，Strategy模式是一种
   非常有用的设计模式，可以帮助我们编写更加灵活、可扩展、可维护的代码。

策略模式的主要缺点是：

1. 客户端需要了解所有的策略类，并且需要知道如何选择合适的策略。这增加
   了客户端的复杂性。

2. 策略模式会增加许多策略类，每个具体策略都需要一个单独的类来实现。如
   果有许多不同的策略，那么这会导致类数量的增加，增加了维护成本。

3. 策略模式通常需要使用上下文来维护对策略对象的引用。如果上下文需要支
   持许多不同的策略，那么这会导致上下文类变得复杂。

尽管策略模式有这些缺点，但它仍然是一种非常有用的设计模式。它可以提供一
种松耦合的方式来管理一组相关的算法，并且可以在运行时更改算法。

** 总结

|----------+--------------------------------------------------------|
| 模式名字 | Strategy Pattern                                       |
| 目的     | 在多种算法类似的情况, 避免多个 if 语句带来的重复和复杂 |
| 问题     | 让算法和使用算法的对象分开                             |
| 解决方法 | 将算法封装起来, 在这个封装内切换算法                   |
| 效果     | 1. 策略可以自由切换 2. 扩展性良好                      |
|----------+--------------------------------------------------------|



* 迭代器模式

迭代器模式（Iterator Pattern）是一种常用的行为设计模式，它提供了一种顺
序访问集合对象中的元素的方法，而无需暴露集合对象的内部表示。

迭代器模式通常由三部分组成：容器（Container）、迭代器接口（Iterator）
和具体迭代器（Concrete Iterator）。容器负责维护元素集合，并提供一个方
法来创建迭代器。迭代器接口定义了访问元素的方法，例如hasNext()和next()。
具体迭代器实现了迭代器接口，并提供了具体的访问元素的方法。

迭代器模式的优点在于它可以提供一种统一的方式来访问不同类型的集合对象。
客户端只需要知道如何使用迭代器，而不需要关心集合对象的内部实现细节。此
外，由于具体迭代器是独立的，所以可以方便地添加、删除或更改具体迭代器。

举个例子，假设我们正在开发一个图书馆系统，需要管理一组图书。我们可以使
用迭代器模式来实现这个功能。首先，定义一个图书馆类（Library），用来维
护图书集合，并提供一个方法来创建图书迭代器。然后，定义一个图书迭代器接
口（BookIterator），并为图书馆类实现一个具体的图书迭代器
（LibraryBookIterator）。最后，在客户端中使用图书迭代器来访问图书馆中
的图书。

** 一个例子

首先，定义一个图书馆类（Library），用来维护图书集合，并提供一个方法来
创建图书迭代器：

#+BEGIN_SRC
import java.util.ArrayList;
import java.util.List;

class Library {
    private List<String> books;

    public Library() {
        // initialize
        books = new ArrayList<>();
    }

    public void addBook(String book) {
        books.add(book);
    }

    public BookIterator createIterator() {
        return new LibraryBookIterator(this);
    }

    public List<String> getBooks() {
        return books;
    }
}
#+END_SRC

然后，定义一个图书迭代器接口（BookIterator），并为图书馆类实现一个具体
的图书迭代器（LibraryBookIterator）：

#+BEGIN_SRC
interface BookIterator {
    boolean hasNext();
    String next();
}

class LibraryBookIterator implements BookIterator {
    private Library library;
    private int index;

    public LibraryBookIterator(Library library) {
        this.library = library;
        this.index = 0;
    }

    public boolean hasNext() {
        // tell if the index have next index.
        return index < library.getBooks().size();
    }

    public String next() {
        // get next
        String book = library.getBooks().get(index);
        // get(index) is a method in the class ArrayList.
        index++;
        return book;
    }
}
#+END_SRC

最后，在客户端中使用图书迭代器来访问图书馆中的图书：

#+BEGIN_SRC 
// 客户端代码
// 创建一个 library
Library library = new Library();
// 塞入三本书
library.addBook("The Great Gatsby");
library.addBook("To Kill a Mockingbird");
library.addBook("One Hundred Years of Solitude");
// 获取 iterator
BookIterator iterator = library.createIterator();
while (iterator.hasNext()) {
    // 打印出所有书名.
    String book = iterator.next();
    System.out.println(book);
}
#+END_SRC

在这个例子中，客户端只需要知道如何使用图书迭代器，而不需要关心图书馆是
如何存储图书的。此外，由于具体图书迭代器是独立的，所以可以方便地添加、
删除或更改具体图书迭代器。
