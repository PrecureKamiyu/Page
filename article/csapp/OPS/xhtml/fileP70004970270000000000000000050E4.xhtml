<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Solutions to Practice Problems </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000050E4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004388D" data-uri="chapter05.xhtml#P700049702700000000000000004388D" epub:type="title"><span class="pcalibre label pcalibre1">Solutions to Practice Problems </span></h1></header>
<section id="P70004970270000000000000000050E6" data-uri="chapter05.xhtml#P70004970270000000000000000050E6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004388E" data-uri="chapter05.xhtml#P700049702700000000000000004388E" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000048D0.xhtml#P7000497027000000000000000004908"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.1 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000048D0.xhtml#P7000497027000000000000000004904">500</a>)</h1></header>
<p id="P700049702700000000000000004388F" data-uri="chapter05.xhtml#P700049702700000000000000004388F" class="pcalibre1 pcalibre calibre2">This problem illustrates some of the subtle effects of memory aliasing.</p>
<p id="P7000497027000000000000000043890" data-uri="chapter05.xhtml#P7000497027000000000000000043890" class="pcalibre1 pcalibre calibre2">As the following commented code shows, the effect will be to set the value at <code id="P7000497027000000000000000043891" data-uri="chapter05.xhtml#P7000497027000000000000000043891" class="pcalibre1 calibre8 pcalibre">xp</code> to zero:</p>
<pre id="P7000497027000000000000000043892" data-uri="chapter05.xhtml#P7000497027000000000000000043892" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043893" data-uri="chapter05.xhtml#P7000497027000000000000000043893" class="calibre10 pcalibre pcalibre1">
4	*xp = *xp + *xp; /* 2x */
5	*xp = *xp − *xp; /* 2x-2x = 0 */
6	*xp = *xp − *xp; /* 0−0 = 0 */
</code></pre>
<p id="P7000497027000000000000000043894" data-uri="chapter05.xhtml#P7000497027000000000000000043894" class="pcalibre1 pcalibre calibre2">This example illustrates that our intuition about program behavior can often be wrong. We naturally think of the case where <code id="P7000497027000000000000000043895" data-uri="chapter05.xhtml#P7000497027000000000000000043895" class="pcalibre1 calibre8 pcalibre">xp</code> and <code id="P7000497027000000000000000043896" data-uri="chapter05.xhtml#P7000497027000000000000000043896" class="pcalibre1 calibre8 pcalibre">yp</code> are distinct but overlook the possibility that they might be equal. Bugs often arise due to conditions the programmer does not anticipate.</p>
</section>
<section id="P70004970270000000000000000050F0" data-uri="chapter05.xhtml#P70004970270000000000000000050F0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043897" data-uri="chapter05.xhtml#P7000497027000000000000000043897" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004960"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.2 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000493B.xhtml#P7000497027000000000000000004959">504</a>)</h1></header>
<p id="P7000497027000000000000000043898" data-uri="chapter05.xhtml#P7000497027000000000000000043898" class="pcalibre1 pcalibre calibre2">This problem illustrates the relationship between CPE and absolute performance. It can be solved using elementary algebra. We find that for <var class="calibre5 pcalibre pcalibre1">n</var> ≤ 2, version 1 is the fastest. Version 2 is fastest for 3 ≤ <var class="calibre5 pcalibre pcalibre1">n</var> ≤ 7, and version 3 is fastest for <var class="calibre5 pcalibre pcalibre1">n</var> ≥ 8.</p>
</section>
<section id="P70004970270000000000000000050F3" data-uri="chapter05.xhtml#P70004970270000000000000000050F3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043899" data-uri="chapter05.xhtml#P7000497027000000000000000043899" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000049CE.xhtml#P7000497027000000000000000004A51"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.3 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000049CE.xhtml#P7000497027000000000000000004A4F">512</a>)</h1></header>
<p id="P700049702700000000000000004389A" data-uri="chapter05.xhtml#P700049702700000000000000004389A" class="pcalibre1 pcalibre calibre2">This is a simple exercise, but it is important to recognize that the four statements of a <code id="P700049702700000000000000004389B" data-uri="chapter05.xhtml#P700049702700000000000000004389B" class="pcalibre1 calibre8 pcalibre">for</code> loop—initial, test, update, and body—get executed different numbers of times.</p>
<p id="P700049702700000000000000004389C" data-uri="chapter05.xhtml#P700049702700000000000000004389C" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000050F8" title="574" data-uri="chapter05.xhtml#P70004970270000000000000000050F8" epub:type="pagebreak"></span></p>
<table id="P700049702700000000000000004389D" data-uri="chapter05.xhtml#P700049702700000000000000004389D" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004389E" data-uri="chapter05.xhtml#P700049702700000000000000004389E" class="calibre18 pcalibre pcalibre1">Code</th>
<th id="P700049702700000000000000004389F" data-uri="chapter05.xhtml#P700049702700000000000000004389F" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000438A0" data-uri="chapter05.xhtml#P70004970270000000000000000438A0" class="calibre10 pcalibre pcalibre1">min</code></th>
<th id="P70004970270000000000000000438A1" data-uri="chapter05.xhtml#P70004970270000000000000000438A1" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000438A2" data-uri="chapter05.xhtml#P70004970270000000000000000438A2" class="calibre10 pcalibre pcalibre1">max</code></th>
<th id="P70004970270000000000000000438A3" data-uri="chapter05.xhtml#P70004970270000000000000000438A3" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000438A4" data-uri="chapter05.xhtml#P70004970270000000000000000438A4" class="calibre10 pcalibre pcalibre1">incr</code></th>
<th id="P70004970270000000000000000438A5" data-uri="chapter05.xhtml#P70004970270000000000000000438A5" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000438A6" data-uri="chapter05.xhtml#P70004970270000000000000000438A6" class="calibre10 pcalibre pcalibre1">square</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000438A7" data-uri="chapter05.xhtml#P70004970270000000000000000438A7" class="calibre20 pcalibre pcalibre1">A.</td>
<td id="P70004970270000000000000000438A8" data-uri="chapter05.xhtml#P70004970270000000000000000438A8" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000438A9" data-uri="chapter05.xhtml#P70004970270000000000000000438A9" class="calibre20 pcalibre pcalibre1">91</td>
<td id="P70004970270000000000000000438AA" data-uri="chapter05.xhtml#P70004970270000000000000000438AA" class="calibre20 pcalibre pcalibre1">90</td>
<td id="P70004970270000000000000000438AB" data-uri="chapter05.xhtml#P70004970270000000000000000438AB" class="calibre20 pcalibre pcalibre1">90</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000438AC" data-uri="chapter05.xhtml#P70004970270000000000000000438AC" class="calibre20 pcalibre pcalibre1">B.</td>
<td id="P70004970270000000000000000438AD" data-uri="chapter05.xhtml#P70004970270000000000000000438AD" class="calibre20 pcalibre pcalibre1">91</td>
<td id="P70004970270000000000000000438AE" data-uri="chapter05.xhtml#P70004970270000000000000000438AE" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000438AF" data-uri="chapter05.xhtml#P70004970270000000000000000438AF" class="calibre20 pcalibre pcalibre1">90</td>
<td id="P70004970270000000000000000438B0" data-uri="chapter05.xhtml#P70004970270000000000000000438B0" class="calibre20 pcalibre pcalibre1">90</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000438B1" data-uri="chapter05.xhtml#P70004970270000000000000000438B1" class="calibre20 pcalibre pcalibre1">C.</td>
<td id="P70004970270000000000000000438B2" data-uri="chapter05.xhtml#P70004970270000000000000000438B2" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000438B3" data-uri="chapter05.xhtml#P70004970270000000000000000438B3" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000438B4" data-uri="chapter05.xhtml#P70004970270000000000000000438B4" class="calibre20 pcalibre pcalibre1">90</td>
<td id="P70004970270000000000000000438B5" data-uri="chapter05.xhtml#P70004970270000000000000000438B5" class="calibre20 pcalibre pcalibre1">90</td>
</tr>
</tbody>
</table>
</section>
<section id="P7000497027000000000000000005112" data-uri="chapter05.xhtml#P7000497027000000000000000005112" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438B6" data-uri="chapter05.xhtml#P70004970270000000000000000438B6" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004AB6.xhtml#P7000497027000000000000000004B22"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.4 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004AB6.xhtml#P7000497027000000000000000004B1A">516</a>)</h1></header>
<p id="P70004970270000000000000000438B7" data-uri="chapter05.xhtml#P70004970270000000000000000438B7" class="pcalibre1 pcalibre calibre2">This assembly code demonstrates a clever optimization opportunity detected by <span class="smallcaps pcalibre pcalibre1">gcc</span>. It is worth studying this code carefully to better understand the subtleties of code optimization.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000438B8" data-uri="chapter05.xhtml#P70004970270000000000000000438B8">
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438B9" data-uri="chapter05.xhtml#P70004970270000000000000000438B9"><p id="P70004970270000000000000000438BA" data-uri="chapter05.xhtml#P70004970270000000000000000438BA" class="pcalibre calibre3 pcalibre1">In the less optimized code, register <code id="P70004970270000000000000000438BB" data-uri="chapter05.xhtml#P70004970270000000000000000438BB" class="pcalibre1 calibre8 pcalibre">%xmm0</code> is simply used as a temporary value, both set and used on each loop iteration. In the more optimized code, it is used more in the manner of variable <code id="P70004970270000000000000000438BC" data-uri="chapter05.xhtml#P70004970270000000000000000438BC" class="pcalibre1 calibre8 pcalibre">acc</code> in <code id="P70004970270000000000000000438BD" data-uri="chapter05.xhtml#P70004970270000000000000000438BD" class="pcalibre1 calibre8 pcalibre">combine4</code>, accumulating the product of the vector elements. The difference with <code id="P70004970270000000000000000438BE" data-uri="chapter05.xhtml#P70004970270000000000000000438BE" class="pcalibre1 calibre8 pcalibre">combine4</code>, however, is that location <code id="P70004970270000000000000000438BF" data-uri="chapter05.xhtml#P70004970270000000000000000438BF" class="pcalibre1 calibre8 pcalibre">dest</code> is updated on each iteration by the second <code id="P70004970270000000000000000438C0" data-uri="chapter05.xhtml#P70004970270000000000000000438C0" class="pcalibre1 calibre8 pcalibre">vmovsd</code> instruction.</p>
<p id="P70004970270000000000000000438C1" data-uri="chapter05.xhtml#P70004970270000000000000000438C1" class="pcalibre calibre3 pcalibre1">We can see that this optimized version operates much like the following C code:</p>
<pre id="P70004970270000000000000000438C2" data-uri="chapter05.xhtml#P70004970270000000000000000438C2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000438C3" data-uri="chapter05.xhtml#P70004970270000000000000000438C3" class="calibre10 pcalibre pcalibre1">
1	/* Make sure dest updated on each iteration */
2	void combine3w(vec_ptr v, data_t *dest)
3	{
4		long i;
5		long length = vec_length(v);
6		data_t *data = get_vec_start(v);
7		data_t acc = IDENT;
8	
9		/* Initialize in event length &lt;= 0 */
10		*dest = ace;
11	
12		for (i = 0; i &lt; length; i++) {
13			acc = acc OP data[i];
14			*dest = ace;
15		}
16	}
</code></pre>
</li>
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438C4" data-uri="chapter05.xhtml#P70004970270000000000000000438C4"><p id="P70004970270000000000000000438C5" data-uri="chapter05.xhtml#P70004970270000000000000000438C5" class="pcalibre calibre3 pcalibre1">The two versions of <code id="P70004970270000000000000000438C6" data-uri="chapter05.xhtml#P70004970270000000000000000438C6" class="pcalibre1 calibre8 pcalibre">combine3</code> will have identical functionality, even with memory aliasing.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438C7" data-uri="chapter05.xhtml#P70004970270000000000000000438C7"><p id="P70004970270000000000000000438C8" data-uri="chapter05.xhtml#P70004970270000000000000000438C8" class="pcalibre calibre3 pcalibre1">This transformation can be made without changing the program behavior, because, with the exception of the first iteration, the value read from <code id="P70004970270000000000000000438C9" data-uri="chapter05.xhtml#P70004970270000000000000000438C9" class="pcalibre1 calibre8 pcalibre">dest</code> at the beginning of each iteration will be the same value written to this register <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005127" title="575" data-uri="chapter05.xhtml#P7000497027000000000000000005127" epub:type="pagebreak"></span>at the end of the previous iteration. Therefore, the combining instruction can simply use the value already in <code id="P70004970270000000000000000438CA" data-uri="chapter05.xhtml#P70004970270000000000000000438CA" class="pcalibre1 calibre8 pcalibre">%xmm0</code> at the beginning of the loop.</p></li>
</ol>
</section>
<section id="P7000497027000000000000000005129" data-uri="chapter05.xhtml#P7000497027000000000000000005129" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438CB" data-uri="chapter05.xhtml#P70004970270000000000000000438CB" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C70"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.5 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C72">530</a>)</h1></header>
<p id="P70004970270000000000000000438CC" data-uri="chapter05.xhtml#P70004970270000000000000000438CC" class="pcalibre1 pcalibre calibre2">Polynomial evaluation is a core technique for solving many problems. For example, polynomial functions are commonly used to approximate trigonometric functions in math libraries.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000438CD" data-uri="chapter05.xhtml#P70004970270000000000000000438CD">
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438CE" data-uri="chapter05.xhtml#P70004970270000000000000000438CE"><p id="P70004970270000000000000000438CF" data-uri="chapter05.xhtml#P70004970270000000000000000438CF" class="pcalibre calibre3 pcalibre1">The function performs 2<var class="calibre5 pcalibre pcalibre1">n</var> multiplications and <var class="calibre5 pcalibre pcalibre1">n</var> additions.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438D0" data-uri="chapter05.xhtml#P70004970270000000000000000438D0"><p id="P70004970270000000000000000438D1" data-uri="chapter05.xhtml#P70004970270000000000000000438D1" class="pcalibre calibre3 pcalibre1">We can see that the performance-limiting computation here is the repeated computation of the expression <code id="P70004970270000000000000000438D2" data-uri="chapter05.xhtml#P70004970270000000000000000438D2" class="pcalibre1 calibre8 pcalibre">xpwr = x * xpwr</code>. This requires a floating-point multiplication (5 clock cycles), and the computation for one iteration cannot begin until the one for the previous iteration has completed. The updating of <code id="P70004970270000000000000000438D3" data-uri="chapter05.xhtml#P70004970270000000000000000438D3" class="pcalibre1 calibre8 pcalibre">result</code> only requires a floating-point addition (3 clock cycles) between successive iterations.</p></li>
</ol>
</section>
<section id="P7000497027000000000000000005133" data-uri="chapter05.xhtml#P7000497027000000000000000005133" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438D4" data-uri="chapter05.xhtml#P70004970270000000000000000438D4" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C82"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.6 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004C72">530</a>)</h1></header>
<p id="P70004970270000000000000000438D5" data-uri="chapter05.xhtml#P70004970270000000000000000438D5" class="pcalibre1 pcalibre calibre2">This problem demonstrates that minimizing the number of operations in a computation may not improve its performance.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000438D6" data-uri="chapter05.xhtml#P70004970270000000000000000438D6">
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438D7" data-uri="chapter05.xhtml#P70004970270000000000000000438D7"><p id="P70004970270000000000000000438D8" data-uri="chapter05.xhtml#P70004970270000000000000000438D8" class="pcalibre calibre3 pcalibre1">The function performs <var class="calibre5 pcalibre pcalibre1">n</var> multiplications and <var class="calibre5 pcalibre pcalibre1">n</var> additions, half the number of multiplications as the original function <code id="P70004970270000000000000000438D9" data-uri="chapter05.xhtml#P70004970270000000000000000438D9" class="pcalibre1 calibre8 pcalibre">poly</code>.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438DA" data-uri="chapter05.xhtml#P70004970270000000000000000438DA"><p id="P70004970270000000000000000438DB" data-uri="chapter05.xhtml#P70004970270000000000000000438DB" class="pcalibre calibre3 pcalibre1">We can see that the performance-limiting computation here is the repeated computation of the expression <code id="P70004970270000000000000000438DC" data-uri="chapter05.xhtml#P70004970270000000000000000438DC" class="pcalibre1 calibre8 pcalibre">result = a[i] + x*result.</code> Starting from the value of <code id="P70004970270000000000000000438DD" data-uri="chapter05.xhtml#P70004970270000000000000000438DD" class="pcalibre1 calibre8 pcalibre">result</code> from the previous iteration, we must first multiply it by <code id="P70004970270000000000000000438DE" data-uri="chapter05.xhtml#P70004970270000000000000000438DE" class="pcalibre1 calibre8 pcalibre">x</code> (5 clock cycles) and then add it to <code id="P70004970270000000000000000438DF" data-uri="chapter05.xhtml#P70004970270000000000000000438DF" class="pcalibre1 calibre8 pcalibre">a[i]</code> (3 cycles) before we have the value for this iteration. Thus, each iteration imposes a minimum latency of 8 cycles, exactly our measured CPE.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P70004970270000000000000000438E0" data-uri="chapter05.xhtml#P70004970270000000000000000438E0"><p id="P70004970270000000000000000438E1" data-uri="chapter05.xhtml#P70004970270000000000000000438E1" class="pcalibre calibre3 pcalibre1">Although each iteration in function <code id="P70004970270000000000000000438E2" data-uri="chapter05.xhtml#P70004970270000000000000000438E2" class="pcalibre1 calibre8 pcalibre">poly</code> requires two multiplications rather than one, only a single multiplication occurs along the critical path per iteration.</p></li>
</ol>
</section>
<section id="P7000497027000000000000000005143" data-uri="chapter05.xhtml#P7000497027000000000000000005143" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438E3" data-uri="chapter05.xhtml#P70004970270000000000000000438E3" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004CA9"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.7 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004C94.xhtml#P7000497027000000000000000004C9E">532</a>)</h1></header>
<p id="P70004970270000000000000000438E4" data-uri="chapter05.xhtml#P70004970270000000000000000438E4" class="pcalibre1 pcalibre calibre2">The following code directly follows the rules we have stated for unrolling a loop by some factor <i class="calibre5 pcalibre pcalibre1">k:</i></p>
<pre id="P70004970270000000000000000438E5" data-uri="chapter05.xhtml#P70004970270000000000000000438E5" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000438E6" data-uri="chapter05.xhtml#P70004970270000000000000000438E6" class="calibre10 pcalibre pcalibre1">
1	void unroll5(vec_ptr v, data_t *dest)
2	{
3		long i;
4		long length = vec_length(v);
5		long limit = length-4;
6		data_t *data = get_vec_start(v);
7		data_t acc = IDENT;
8	
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005148" title="576" data-uri="chapter05.xhtml#P7000497027000000000000000005148" epub:type="pagebreak"></span>9		/* Combine 5 elements at a time */
10		for (i = 0; i &lt; limit; i+=5) {
11			acc = acc OP data[i] OP data[i+1];
12			acc = acc OP data[i+2] OP data[i+3];
13			acc = acc OP data[i+4];
14		}
15	
16		/* Finish any remaining elements */
17		for (;i &lt; length; i++) {
18			acc = acc OP data[i];
19		}
20		*dest = ace;
21	}
</code></pre>
</section>
<section id="P7000497027000000000000000005149" data-uri="chapter05.xhtml#P7000497027000000000000000005149" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438E7" data-uri="chapter05.xhtml#P70004970270000000000000000438E7" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004E13"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.8 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004E0B">545</a>)</h1></header>
<p id="P70004970270000000000000000438E8" data-uri="chapter05.xhtml#P70004970270000000000000000438E8" class="pcalibre1 pcalibre calibre2">This problem demonstrates how small changes in a program can yield dramatic performance differences, especially on a machine with out-of-order execution. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000005152"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.39</span></a> diagrams the three multiplication operations for a single iteration of the function. In this figure, the operations shown as blue boxes are along the critical path—they need to be computed in sequence to compute a new value for loop variable <code id="P70004970270000000000000000438E9" data-uri="chapter05.xhtml#P70004970270000000000000000438E9" class="pcalibre1 calibre8 pcalibre">r</code>. The operations shown as light boxes can be computed in parallel with the critical path operations. For a loop with <var class="calibre5 pcalibre pcalibre1">P</var> operations along the critical path, each iteration will require a minimum of 5<var class="calibre5 pcalibre pcalibre1">P</var> clock cycles and will compute the product for three elements, giving a lower bound on the CPE of 5<var class="calibre5 pcalibre pcalibre1">P</var>/3. This implies lower bounds of 5.00 for Al, 3.33 for A2 and A5, and 1.67 for A3 and A4. We ran these functions on an Intel Core i7 Haswell processor and found that it could achieve these CPE values.</p>
</section>
<section id="P700049702700000000000000000514D" data-uri="chapter05.xhtml#P700049702700000000000000000514D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000438EA" data-uri="chapter05.xhtml#P70004970270000000000000000438EA" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004E9A.xhtml#P7000497027000000000000000004F3B"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.9 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004E9A.xhtml#P7000497027000000000000000004F3A">553</a>)</h1></header>
<p id="P70004970270000000000000000438EB" data-uri="chapter05.xhtml#P70004970270000000000000000438EB" class="pcalibre1 pcalibre calibre2">This is another demonstration that a slight change in coding style can make it much easier for the compiler to detect opportunities to use conditional moves:</p>
<pre id="P70004970270000000000000000438EC" data-uri="chapter05.xhtml#P70004970270000000000000000438EC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000438ED" data-uri="chapter05.xhtml#P70004970270000000000000000438ED" class="calibre10 pcalibre pcalibre1">
while (i1 &lt; n &amp;&amp; i2 &lt; n) {
	long v1 = srcl [i1];
</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000005152" data-uri="chapter05.xhtml#P7000497027000000000000000005152">
<img alt="Diagrams depict paths for five cases." id="P70004970270000000000000000438EE" data-uri="P700049702700000000000000000B728" src="../images/p576-1.png" class="calibre192 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000438EF" data-uri="chapter05.xhtml#P70004970270000000000000000438EF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000438F0" data-uri="chapter05.xhtml#P70004970270000000000000000438F0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">5.39 </span>Data dependencies among multiplication operations for cases in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004D16.xhtml#P7000497027000000000000000004E13"><span class="pcalibre1 label2 pcalibre">Problem </span><span class="number pcalibre pcalibre1">5.8</span></a>.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000438F1" data-uri="chapter05.xhtml#P70004970270000000000000000438F1"><p id="P70004970270000000000000000438F2" data-uri="chapter05.xhtml#P70004970270000000000000000438F2" class="pcalibre calibre3 pcalibre1">The operations shown as blue boxes form the critical paths for the iterations.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000023BDE" data-uri="chapter05.xhtml#P7000497027000000000000000023BDE">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<ul id="P70004970270000000000000000438F3" data-uri="chapter05.xhtml#P70004970270000000000000000438F3" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000438F4" data-uri="chapter05.xhtml#P70004970270000000000000000438F4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000438F5" data-uri="chapter05.xhtml#P70004970270000000000000000438F5" class="pcalibre calibre3 pcalibre1">A1: ((r*x)*y)*x: path from r through three blue boxes to r; path from x to first blue box; path from y to second blue box; path from z to third blue box</p></li>
<li id="P70004970270000000000000000438F6" data-uri="chapter05.xhtml#P70004970270000000000000000438F6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000438F7" data-uri="chapter05.xhtml#P70004970270000000000000000438F7" class="pcalibre calibre3 pcalibre1">* A2: (r*(x*y))*z: path from r through two blue boxes to r; paths from x and y to light box, then first blue box; path from z to second blue box</p></li>
<li id="P70004970270000000000000000438F8" data-uri="chapter05.xhtml#P70004970270000000000000000438F8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000438F9" data-uri="chapter05.xhtml#P70004970270000000000000000438F9" class="pcalibre calibre3 pcalibre1">* A3: r*((x*y)*z): path from r through one blue box to r; paths from x and y through two light boxes to blue box; path from z to second light box&gt;</p></li>
<li id="P70004970270000000000000000438FA" data-uri="chapter05.xhtml#P70004970270000000000000000438FA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000438FB" data-uri="chapter05.xhtml#P70004970270000000000000000438FB" class="pcalibre calibre3 pcalibre1">* A4: r*(x*y*z)): path from r through one blue box to r; path from x to lower light box to blue box; paths from y and z to higher light box to lower light box</p></li>
<li id="P70004970270000000000000000438FC" data-uri="chapter05.xhtml#P70004970270000000000000000438FC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000438FD" data-uri="chapter05.xhtml#P70004970270000000000000000438FD" class="pcalibre calibre3 pcalibre1">* A5: (r*x)*(y*z): path from r through two blue boxes to r; path from x to first blue box; paths from y and z to light box to second blue box.</p></li>
</ul>
</details>
</figcaption></figure>
<p id="P70004970270000000000000000438FE" data-uri="chapter05.xhtml#P70004970270000000000000000438FE" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005159" title="577" data-uri="chapter05.xhtml#P7000497027000000000000000005159" epub:type="pagebreak"></span></p>
<pre id="P70004970270000000000000000438FF" data-uri="chapter05.xhtml#P70004970270000000000000000438FF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043900" data-uri="chapter05.xhtml#P7000497027000000000000000043900" class="calibre10 pcalibre pcalibre1">
	long v2 = src2 [i2];
	long takel = v1 &lt; v2;
	dest[id++] = take1 ? v1 : v2;
	i1 += take1;
	i2 += (1-take1);
}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000043901" data-uri="chapter05.xhtml#P7000497027000000000000000043901">We measured a CPE of around 12.0 for this version of the code, a modest improvement over the original CPE of 15.0.</p>
</section>
<section id="P700049702700000000000000000515D" data-uri="chapter05.xhtml#P700049702700000000000000000515D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043902" data-uri="chapter05.xhtml#P7000497027000000000000000043902" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FBF"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.10 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FB4">559</a>)</h1></header>
<p id="P7000497027000000000000000043903" data-uri="chapter05.xhtml#P7000497027000000000000000043903" class="pcalibre1 pcalibre calibre2">This problem requires you to analyze the potential load-store interactions in a program.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000043904" data-uri="chapter05.xhtml#P7000497027000000000000000043904">
<li class="calibre12 pcalibre pcalibre1" id="P7000497027000000000000000043905" data-uri="chapter05.xhtml#P7000497027000000000000000043905"><p id="P7000497027000000000000000043906" data-uri="chapter05.xhtml#P7000497027000000000000000043906" class="pcalibre calibre3 pcalibre1">It will set each element <code id="P7000497027000000000000000043907" data-uri="chapter05.xhtml#P7000497027000000000000000043907" class="pcalibre1 calibre8 pcalibre">a[<var class="calibre5 pcalibre pcalibre1">i</var>]</code> to <var class="calibre5 pcalibre pcalibre1">i</var> + 1, for 0 ≤ <var class="calibre5 pcalibre pcalibre1">i</var> ≤ 998.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P7000497027000000000000000043908" data-uri="chapter05.xhtml#P7000497027000000000000000043908"><p id="P7000497027000000000000000043909" data-uri="chapter05.xhtml#P7000497027000000000000000043909" class="pcalibre calibre3 pcalibre1">It will set each element <code id="P700049702700000000000000004390A" data-uri="chapter05.xhtml#P700049702700000000000000004390A" class="pcalibre1 calibre8 pcalibre">a[<var class="calibre5 pcalibre pcalibre1">i</var>]</code> to 0, for 1 ≤ <var class="calibre5 pcalibre pcalibre1">i</var> ≤ 999.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P700049702700000000000000004390B" data-uri="chapter05.xhtml#P700049702700000000000000004390B"><p id="P700049702700000000000000004390C" data-uri="chapter05.xhtml#P700049702700000000000000004390C" class="pcalibre calibre3 pcalibre1">In the second case, the load of one iteration depends on the result of the store from the previous iteration. Thus, there is a write/read dependency between successive iterations.</p></li>
<li class="calibre12 pcalibre pcalibre1" id="P700049702700000000000000004390D" data-uri="chapter05.xhtml#P700049702700000000000000004390D"><p id="P700049702700000000000000004390E" data-uri="chapter05.xhtml#P700049702700000000000000004390E" class="pcalibre calibre3 pcalibre1">It will give a CPE of 1.2, the same as for Example A, since there are no dependencies between stores and subsequent loads.</p></li>
</ol>
</section>
<section id="P700049702700000000000000000516B" data-uri="chapter05.xhtml#P700049702700000000000000000516B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004390F" data-uri="chapter05.xhtml#P700049702700000000000000004390F" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FDE"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.11 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FE0">561</a>)</h1></header>
<p id="P7000497027000000000000000043910" data-uri="chapter05.xhtml#P7000497027000000000000000043910" class="pcalibre1 pcalibre calibre2">We can see that this function has a write/read dependency between successive iterations—the destination value <code id="P7000497027000000000000000043911" data-uri="chapter05.xhtml#P7000497027000000000000000043911" class="pcalibre1 calibre8 pcalibre">p[i]</code> on one iteration matches the source value <code id="P7000497027000000000000000043912" data-uri="chapter05.xhtml#P7000497027000000000000000043912" class="pcalibre1 calibre8 pcalibre">p[i-1]</code> on the next. A critical path is therefore formed for each iteration consisting of a store (from the previous iteration), a load, and a floating-point addition. The CPE measurement of 9.0 is consistent with our measurement of 7.3 for the CPE of <code id="P7000497027000000000000000043913" data-uri="chapter05.xhtml#P7000497027000000000000000043913" class="pcalibre1 calibre8 pcalibre">write_read</code> when there is a data dependency, since <code id="P7000497027000000000000000043914" data-uri="chapter05.xhtml#P7000497027000000000000000043914" class="pcalibre1 calibre8 pcalibre">write_read</code> involves an integer addition (1 clock-cycle latency), while <code id="P7000497027000000000000000043915" data-uri="chapter05.xhtml#P7000497027000000000000000043915" class="pcalibre1 calibre8 pcalibre">psum1</code> involves a floating-point addition (3 clock-cycle latency).</p>
</section>
<section id="P7000497027000000000000000005173" data-uri="chapter05.xhtml#P7000497027000000000000000005173" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000043916" data-uri="chapter05.xhtml#P7000497027000000000000000043916" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FEC"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">5.12 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004F49.xhtml#P7000497027000000000000000004FE0">561</a>)</h1></header>
<p id="P7000497027000000000000000043917" data-uri="chapter05.xhtml#P7000497027000000000000000043917" class="pcalibre1 pcalibre calibre2">Here is a revised version of the function:</p>
<pre id="P7000497027000000000000000043918" data-uri="chapter05.xhtml#P7000497027000000000000000043918" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043919" data-uri="chapter05.xhtml#P7000497027000000000000000043919" class="calibre10 pcalibre pcalibre1">
1	void psum1a(float a[], float p[], long n)
2	{
3		long i;
4		/* last_val holds p[i-1]; val holds p [i] */
5		float last_val, val;
6		last_val = p[0] = a[0];
7		for (i = 1; i &lt; n; i++) {
8			val = last_val + a[i];
9			p[i] = val;
10			last_val = val;
11		}
12	}
</code></pre>
<p id="P700049702700000000000000004391A" data-uri="chapter05.xhtml#P700049702700000000000000004391A" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000005179" title="578" data-uri="chapter05.xhtml#P7000497027000000000000000005179" epub:type="pagebreak"></span>We introduce a local variable <code id="P700049702700000000000000004391B" data-uri="chapter05.xhtml#P700049702700000000000000004391B" class="pcalibre1 calibre8 pcalibre">last_val</code>. At the start of iteration <code id="P700049702700000000000000004391C" data-uri="chapter05.xhtml#P700049702700000000000000004391C" class="pcalibre1 calibre8 pcalibre">i</code>, it holds the value of <code id="P700049702700000000000000004391D" data-uri="chapter05.xhtml#P700049702700000000000000004391D" class="pcalibre1 calibre8 pcalibre">p[i-1]</code>. We then compute <code id="P700049702700000000000000004391E" data-uri="chapter05.xhtml#P700049702700000000000000004391E" class="pcalibre1 calibre8 pcalibre">val</code> to be the value of <code id="P700049702700000000000000004391F" data-uri="chapter05.xhtml#P700049702700000000000000004391F" class="pcalibre1 calibre8 pcalibre">p[i]</code> and to be the new value for <code id="P7000497027000000000000000043920" data-uri="chapter05.xhtml#P7000497027000000000000000043920" class="pcalibre1 calibre8 pcalibre">last_val</code>.</p>
<p id="P7000497027000000000000000043921" data-uri="chapter05.xhtml#P7000497027000000000000000043921" class="pcalibre1 pcalibre calibre2">This version compiles to the following assembly code:</p>
<pre id="P7000497027000000000000000043922" data-uri="chapter05.xhtml#P7000497027000000000000000043922" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000043923" data-uri="chapter05.xhtml#P7000497027000000000000000043923" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Inner loop of psum1a</i>
	<i class="calibre5 pcalibre pcalibre1">a in %rdi, i in %rax, cnt in %rdx, last_val in %xmm0</i>
1	.L16:					<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	 vaddss (%rdi,%rax, 4), %xmm0, %xmm0	  <i class="calibre5 pcalibre pcalibre1">last_val = val = last_val + a[i]</i>
3	 vmovss %xmm0, (%rsi,%rax,4)		  <i class="calibre5 pcalibre pcalibre1">Store val in p[i]</i>
4	 addq $1, %rax				  <i class="calibre5 pcalibre pcalibre1">Increment i</i>
5	 cmpq %rdx, 7,rax			  <i class="calibre5 pcalibre pcalibre1">Compare i : cnt</i>
6	 jne .L16				  <i class="calibre5 pcalibre pcalibre1">If ! =, goto</i> <b class="calibre4 pcalibre pcalibre1">loop</b>
</code></pre>
<p id="P7000497027000000000000000043924" data-uri="chapter05.xhtml#P7000497027000000000000000043924" class="pcalibre1 pcalibre calibre2">This code holds <code id="P7000497027000000000000000043925" data-uri="chapter05.xhtml#P7000497027000000000000000043925" class="pcalibre1 calibre8 pcalibre">last_val</code> in <code id="P7000497027000000000000000043926" data-uri="chapter05.xhtml#P7000497027000000000000000043926" class="pcalibre1 calibre8 pcalibre">%xmm0</code>, avoiding the need to read <code id="P7000497027000000000000000043927" data-uri="chapter05.xhtml#P7000497027000000000000000043927" class="pcalibre1 calibre8 pcalibre">p[i-1]</code> from memory and thus eliminating the write/read dependency seen in <code id="P7000497027000000000000000043928" data-uri="chapter05.xhtml#P7000497027000000000000000043928" class="pcalibre1 calibre8 pcalibre">psum1</code>.</p>
</section>
</section></body></html>
