<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part361.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part363.htm">下一个 &gt;</a></p><h4 style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">References</h4><p class="s12" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">[A+02] “Cooperative Task Management Without Manual Stack Management” Atul Adya, Jon Howell, Marvin Theimer, William J. Bolosky, John R. Douceur USENIX ATC ’02, Monterey, CA, June 2002</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">This gem of a paper is the first to clearly articulate some of the difficulties of event-based concurrency, and suggests some simple solutions, as well explores the even crazier idea of combining the two types of concurrency management into a single application!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[FHK84] “Programming With Continuations”</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Daniel P. Friedman, Christopher T. Haynes, Eugene E. Kohlbecker</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">In Program Transformation and Programming Environments, Springer Verlag, 1984</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: left;">The classic reference to this old idea from the world of programming languages. Now increasingly popular in some modern languages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: left;"><a href="http://nodejs.org/api/" class="a" target="_blank">[N13] “Node.js Documentation” By the folks who build node.js Available: </a><a href="http://nodejs.org/api/" target="_blank">http://nodejs.org/api/</a></p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">One of the many cool new frameworks that help you readily build web services and applications. Every modern systems hacker should be proficient in frameworks such as this one (and likely, more than one). Spend the time and do some development in one of these worlds and become an expert.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">[O96] “Why Threads Are A Bad Idea (for most purposes)” John Ousterhout</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">Invited Talk at USENIX ’96, San Diego, CA, January 1996</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A great talk about how threads aren’t a great match for GUI-based applications (but the ideas are more general). Ousterhout formed many of these opinions while he was developing Tcl/Tk, a cool scripting language and toolkit that made it 100x easier to develop GUI-based applications than the state of the art at the time. While the Tk GUI toolkit lives on (in Python for example), Tcl seems to be slowly dying (unfortunately).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: left;">[PDZ99] “Flash: An Efficient and Portable Web Server” Vivek S. Pai, Peter Druschel, Willy Zwaenepoel USENIX ’99, Monterey, CA, June 1999</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">A pioneering paper on how to structure web servers in the then-burgeoning Internet era. Read it to understand the basics as well as to see the authors’ ideas on how to build hybrids when support for asynchronous I/O is lacking.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[SR05] “Advanced Programming in the U<span class="s18">NIX </span>Environment”</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 91%;text-align: left;">W. Richard Stevens and Stephen A. Rago Addison-Wesley, 2005</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">Once again, we refer to the classic must-have-on-your-bookshelf book of <span class="s12">U</span><span class="s18">NIX </span>systems programming. If there is some detail you need to know, it is in here.</p><p class="s12" style="padding-top: 6pt;padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[vB+03] “Capriccio: Scalable Threads for Internet Services”</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 91%;text-align: left;">Rob von Behren, Jeremy Condit, Feng Zhou, George C. Necula, Eric Brewer SOSP ’03, Lake George, New York, October 2003</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: left;">A paper about how to make threads work at extreme scale; a counter to all the event-based work ongoing at the time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">[WCB01] “SEDA: An Architecture for Well-Conditioned, Scalable Internet Services” Matt Welsh, David Culler, and Eric Brewer</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">SOSP ’01, Banff, Canada, October 2001</p><p class="s17" style="padding-left: 68pt;text-indent: 0pt;line-height: 94%;text-align: justify;">A nice twist on event-based serving that combines threads, queues, and event-based hanlding into one streamlined whole. Some of these ideas have found their way into the infrastructures of companies such as Google, Amazon, and elsewhere.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part361.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part363.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
