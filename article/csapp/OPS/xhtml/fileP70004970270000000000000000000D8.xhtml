<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>1.2 Programs Are Translated by Other Programs into Different Forms</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000000D8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000003E4D9" data-uri="chapter01.xhtml#P700049702700000000000000003E4D9" epub:type="title"><span class="pcalibre label pcalibre1">1.2 </span>Programs Are Translated by Other Programs into Different Forms</h1></header>
<p id="P700049702700000000000000003E4DA" data-uri="chapter01.xhtml#P700049702700000000000000003E4DA" class="pcalibre1 pcalibre calibre2">The <code id="P700049702700000000000000003E4DB" data-uri="chapter01.xhtml#P700049702700000000000000003E4DB" class="pcalibre1 calibre8 pcalibre">hello</code> program begins life as a high-level C program because it can be read and understood by human beings in that form. However, in order to run <code id="P700049702700000000000000003E4DC" data-uri="chapter01.xhtml#P700049702700000000000000003E4DC" class="pcalibre1 calibre8 pcalibre">hello.c</code> on the system, the individual C statements must be translated by other programs into a sequence of low-level <i class="calibre5 pcalibre pcalibre1">machine-language</i> instructions. These instructions are then packaged in a form called an <i class="calibre5 pcalibre pcalibre1">executable object program</i> and stored as a binary disk file. Object programs are also referred to as <i class="calibre5 pcalibre pcalibre1">executable object files</i>.</p>
<p id="P700049702700000000000000003E4DD" data-uri="chapter01.xhtml#P700049702700000000000000003E4DD" class="pcalibre1 pcalibre calibre2">On a Unix system, the translation from source file to object file is performed by a <i class="calibre5 pcalibre pcalibre1">compiler driver:</i></p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000000DE" data-uri="chapter01.xhtml#P70004970270000000000000000000DE">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000000DF" title="5" data-uri="chapter01.xhtml#P70004970270000000000000000000DF" epub:type="pagebreak"></span>
<img alt="A diagram features a sequence of four phases." id="P700049702700000000000000003E4DE" data-uri="P700049702700000000000000000B70C" src="../images/p5-1.png" class="pcalibre1 calibre29 pcalibre"/>
<figcaption id="P700049702700000000000000003E4DF" data-uri="chapter01.xhtml#P700049702700000000000000003E4DF" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E4E0" data-uri="chapter01.xhtml#P700049702700000000000000003E4E0" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">1.3 </span>The compilation system.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001E7A6" data-uri="chapter01.xhtml#P700049702700000000000000001E7A6">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E4E1" data-uri="chapter01.xhtml#P700049702700000000000000003E4E1" class="pcalibre1 pcalibre calibre2">The four stages are summarized below.</p>
<ul id="P700049702700000000000000003E4E2" data-uri="chapter01.xhtml#P700049702700000000000000003E4E2" class="pcalibre calibre31 pcalibre1">
<li id="P700049702700000000000000003E4E3" data-uri="chapter01.xhtml#P700049702700000000000000003E4E3" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4E4" data-uri="chapter01.xhtml#P700049702700000000000000003E4E4" class="pcalibre calibre3 pcalibre1">Pre-processor (cpp): input from Source program (text) hello.c with output Modified source program (text) hello.i</p></li>
<li id="P700049702700000000000000003E4E5" data-uri="chapter01.xhtml#P700049702700000000000000003E4E5" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4E6" data-uri="chapter01.xhtml#P700049702700000000000000003E4E6" class="pcalibre calibre3 pcalibre1">Compiler (cc1): output Assembly program (text)</p></li>
<li id="P700049702700000000000000003E4E7" data-uri="chapter01.xhtml#P700049702700000000000000003E4E7" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4E8" data-uri="chapter01.xhtml#P700049702700000000000000003E4E8" class="pcalibre calibre3 pcalibre1">Assembler (as): output Relocatable object programs (binary) hello.o</p></li>
<li id="P700049702700000000000000003E4E9" data-uri="chapter01.xhtml#P700049702700000000000000003E4E9" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4EA" data-uri="chapter01.xhtml#P700049702700000000000000003E4EA" class="pcalibre calibre3 pcalibre1">Linker (ld): input as includes printf.o, with output Executable object program (binary) hello.</p></li>
</ul>
</details>
</figcaption></figure>
<pre id="P700049702700000000000000003E4EB" data-uri="chapter01.xhtml#P700049702700000000000000003E4EB" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E4EC" data-uri="chapter01.xhtml#P700049702700000000000000003E4EC" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">gcc -o hello hello.c</i>
</code></pre>
<p id="P700049702700000000000000003E4ED" data-uri="chapter01.xhtml#P700049702700000000000000003E4ED" class="pcalibre1 pcalibre calibre2">Here, the <span class="smallcaps pcalibre pcalibre1">gcc </span>compiler driver reads the source file <code id="P700049702700000000000000003E4EE" data-uri="chapter01.xhtml#P700049702700000000000000003E4EE" class="pcalibre1 calibre8 pcalibre">hello.c</code> and translates it into an executable object file <code id="P700049702700000000000000003E4EF" data-uri="chapter01.xhtml#P700049702700000000000000003E4EF" class="pcalibre1 calibre8 pcalibre">hello</code>. The translation is performed in the sequence of four phases shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000000DE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.3</span></a>. The programs that perform the four phases (<i class="calibre5 pcalibre pcalibre1">preprocessor</i>, <i class="calibre5 pcalibre pcalibre1">compiler</i>, <i class="calibre5 pcalibre pcalibre1">assembler</i>, and <i class="calibre5 pcalibre pcalibre1">linker</i>) are known collectively as the <i class="calibre5 pcalibre pcalibre1">compilation system</i>.</p>
<ul id="P700049702700000000000000003E4F0" data-uri="chapter01.xhtml#P700049702700000000000000003E4F0" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000003E4F1" data-uri="chapter01.xhtml#P700049702700000000000000003E4F1" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4F2" data-uri="chapter01.xhtml#P700049702700000000000000003E4F2" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Preprocessing phase. </span>The preprocessor (cpp) modifies the original C program according to directives that begin with the `<code id="P700049702700000000000000003E4F3" data-uri="chapter01.xhtml#P700049702700000000000000003E4F3" class="pcalibre1 calibre8 pcalibre">#</code>' character. For example, the <code id="P700049702700000000000000003E4F4" data-uri="chapter01.xhtml#P700049702700000000000000003E4F4" class="pcalibre1 calibre8 pcalibre">#include &lt;stdio.h&gt;</code> command in line 1 of <code id="P700049702700000000000000003E4F5" data-uri="chapter01.xhtml#P700049702700000000000000003E4F5" class="pcalibre1 calibre8 pcalibre">hello.c</code> tells the preprocessor to read the contents of the system header file <code id="P700049702700000000000000003E4F6" data-uri="chapter01.xhtml#P700049702700000000000000003E4F6" class="pcalibre1 calibre8 pcalibre">stdio.h</code> and insert it directly into the program text. The result is another C program, typically with the <code id="P700049702700000000000000003E4F7" data-uri="chapter01.xhtml#P700049702700000000000000003E4F7" class="pcalibre1 calibre8 pcalibre">.i</code> suffix.</p></li>
<li id="P700049702700000000000000003E4F8" data-uri="chapter01.xhtml#P700049702700000000000000003E4F8" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E4F9" data-uri="chapter01.xhtml#P700049702700000000000000003E4F9" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Compilation phase. </span>The compiler (<code id="P700049702700000000000000003E4FA" data-uri="chapter01.xhtml#P700049702700000000000000003E4FA" class="pcalibre1 calibre8 pcalibre">cc1</code>) translates the text file <code id="P700049702700000000000000003E4FB" data-uri="chapter01.xhtml#P700049702700000000000000003E4FB" class="pcalibre1 calibre8 pcalibre">hello.i</code> into the text file <code id="P700049702700000000000000003E4FC" data-uri="chapter01.xhtml#P700049702700000000000000003E4FC" class="pcalibre1 calibre8 pcalibre">hello.s</code>, which contains an <i class="calibre5 pcalibre pcalibre1">assembly-language program</i>. This program includes the following definition of <code id="P700049702700000000000000003E4FD" data-uri="chapter01.xhtml#P700049702700000000000000003E4FD" class="pcalibre1 calibre8 pcalibre">function main</code>:</p>
<pre id="P700049702700000000000000003E4FE" data-uri="chapter01.xhtml#P700049702700000000000000003E4FE" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E4FF" data-uri="chapter01.xhtml#P700049702700000000000000003E4FF" class="calibre10 pcalibre pcalibre1">
1	main:	
2	  subq		$8, %rsp
3	  movl		$.LCO, %edi
4	  call		puts
5	  movl		$0, %eax
6	  addq		$8, %rsp
7	  ret	
</code></pre>
<p id="P700049702700000000000000003E500" data-uri="chapter01.xhtml#P700049702700000000000000003E500" class="pcalibre calibre3 pcalibre1">Each of lines 2-7 in this definition describes one low-level machine-language instruction in a textual form. Assembly language is useful because it provides a common output language for different compilers for different high-level languages. For example, C compilers and Fortran compilers both generate output files in the same assembly language.</p></li>
<li id="P700049702700000000000000003E501" data-uri="chapter01.xhtml#P700049702700000000000000003E501" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E502" data-uri="chapter01.xhtml#P700049702700000000000000003E502" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Assembly phase. </span>Next, the assembler (<code id="P700049702700000000000000003E503" data-uri="chapter01.xhtml#P700049702700000000000000003E503" class="pcalibre1 calibre8 pcalibre">as</code>) translates <code id="P700049702700000000000000003E504" data-uri="chapter01.xhtml#P700049702700000000000000003E504" class="pcalibre1 calibre8 pcalibre">hello.s</code> into machine-language instructions, packages them in a form known as a <i class="calibre5 pcalibre pcalibre1">relocatable object program</i>, and stores the result in the object file <code id="P700049702700000000000000003E505" data-uri="chapter01.xhtml#P700049702700000000000000003E505" class="pcalibre1 calibre8 pcalibre">hello.o.</code> This file is a binary file containing 17 bytes to encode the instructions for function main. If we were to view <code id="P700049702700000000000000003E506" data-uri="chapter01.xhtml#P700049702700000000000000003E506" class="pcalibre1 calibre8 pcalibre">hello.o</code> with a text editor, it would appear to be gibberish.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000000FF" data-uri="chapter01.xhtml#P70004970270000000000000000000FF"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000003E507" data-uri="chapter01.xhtml#P700049702700000000000000003E507" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000101" title="6" data-uri="chapter01.xhtml#P7000497027000000000000000000101" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>The GNU project</h1></header>
<p id="P700049702700000000000000003E508" data-uri="chapter01.xhtml#P700049702700000000000000003E508" class="pcalibre calibre3 pcalibre1">G<span class="smallcaps pcalibre pcalibre1">cc </span>is one of many useful tools developed by the GNU (short for GNU's Not Unix) project. The GNU project is a tax-exempt charity started by Richard Stallman in 1984, with the ambitious goal of developing a complete Unix-like system whose source code is unencumbered by restrictions on how it can be modified or distributed. The GNU project has developed an environment with all the major components of a Unix operating system, except for the kernel, which was developed separately by the Linux project. The GNU environment includes the <span class="smallcaps pcalibre pcalibre1">emacs </span>editor, <span class="smallcaps pcalibre pcalibre1">gcc </span>compiler, <span class="smallcaps pcalibre pcalibre1">gdb </span>debugger, assembler, linker, utilities for manipulating binaries, and other components. The <span class="smallcaps pcalibre pcalibre1">gcc </span>compiler has grown to support many different languages, with the ability to generate code for many different machines. Supported languages include C, C++, Fortran, Java, Pascal, Objective-C, and Ada.</p>
<p id="P700049702700000000000000003E509" data-uri="chapter01.xhtml#P700049702700000000000000003E509" class="pcalibre1 calibre32 pcalibre">The GNU project is a remarkable achievement, and yet it is often overlooked. The modern open-source movement (commonly associated with Linux) owes its intellectual origins to the GNU project's notion of <i class="calibre5 pcalibre pcalibre1">free software</i> ("free" as in "free speech," not "free beer"). Further, Linux owes much of its popularity to the GNU tools, which provide the environment for the Linux kernel.</p>
</aside></li>
<li id="P700049702700000000000000003E50A" data-uri="chapter01.xhtml#P700049702700000000000000003E50A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E50B" data-uri="chapter01.xhtml#P700049702700000000000000003E50B" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Linking phase. </span>Notice Notice that our <code id="P700049702700000000000000003E50C" data-uri="chapter01.xhtml#P700049702700000000000000003E50C" class="pcalibre1 calibre8 pcalibre">hello</code> program calls the <code id="P700049702700000000000000003E50D" data-uri="chapter01.xhtml#P700049702700000000000000003E50D" class="pcalibre1 calibre8 pcalibre">printf</code> function, which is part of the <i class="calibre5 pcalibre pcalibre1">standard C library</i> provided by every C compiler. The <code id="P700049702700000000000000003E50E" data-uri="chapter01.xhtml#P700049702700000000000000003E50E" class="pcalibre1 calibre8 pcalibre">printf</code> function resides in a separate precompiled object file called <code id="P700049702700000000000000003E50F" data-uri="chapter01.xhtml#P700049702700000000000000003E50F" class="pcalibre1 calibre8 pcalibre">printf.o</code>, which must somehow be merged with our <code id="P700049702700000000000000003E510" data-uri="chapter01.xhtml#P700049702700000000000000003E510" class="pcalibre1 calibre8 pcalibre">hello.o</code> program. The linker (<code id="P700049702700000000000000003E511" data-uri="chapter01.xhtml#P700049702700000000000000003E511" class="pcalibre1 calibre8 pcalibre">ld</code>) handles this merging. The result is the <code id="P700049702700000000000000003E512" data-uri="chapter01.xhtml#P700049702700000000000000003E512" class="pcalibre1 calibre8 pcalibre">hello</code> file, which is an executable object file (or simply <i class="calibre5 pcalibre pcalibre1">executable</i>) that is ready to be loaded into memory and executed by the system.</p></li>
</ul>
</section></body></html>
