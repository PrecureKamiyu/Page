<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Redundant Arrays of Inexpensive Disks</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part393.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part395.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;line-height: 15pt;text-align: center;">Redundant Arrays of Inexpensive Disks</p><p class="s8" style="padding-left: 38pt;text-indent: 0pt;line-height: 15pt;text-align: right;">(RAIDs)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-bottom: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">When we use a disk, we sometimes wish it to be faster; I/O operations are slow and thus can be the bottleneck for the entire system. When we use a disk, we sometimes wish it to be larger; more and more data is being put online and thus our disks are getting fuller and fuller. When we use a disk, we sometimes wish for it to be more reliable; when a disk fails, if our data isn’t backed up, all that valuable data is gone.</p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>M<span class="s7">AKE </span>A L<span class="s7">ARGE</span>, F<span class="s7">AST</span>, R<span class="s7">ELIABLE </span>D<span class="s7">ISK</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: left;">How can we make a large, fast, and reliable storage system? What are the key techniques? What are trade-offs between different approaches?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In this chapter, we introduce the <b>Redundant Array of Inexpensive Disks </b>better known as <b>RAID </b>[P+88], a technique to use multiple disks in concert to build a faster, bigger, and more reliable disk system. The term was introduced in the late 1980s by a group of researchers at U.C. Berke- ley (led by Professors David Patterson and Randy Katz and then student Garth Gibson); it was around this time that many different researchers si- multaneously arrived upon the basic idea of using multiple disks to build a better storage system [BG88, K86,K88,PB86,SG86].</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Externally, a RAID looks like a disk: a group of blocks one can read or write. Internally, the RAID is a complex beast, consisting of multiple disks, memory (both volatile and non-), and one or more processors to manage the system. A hardware RAID is very much like a computer system, specialized for the task of managing a group of disks.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">RAIDs offer a number of advantages over a single disk. One advan- tage is <i>performance</i>. Using multiple disks in parallel can greatly speed up I/O times. Another benefit is <i>capacity</i>. Large data sets demand large disks. Finally, RAIDs can improve <i>reliability</i>; spreading data across mul- tiple disks (without RAID techniques) makes the data vulnerable to the loss of a single disk; with some form of <b>redundancy</b>, RAIDs can tolerate the loss of a disk and keep operating as if nothing were wrong.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: center;">421</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: T<span class="s7">RANSPARENCY </span>E<span class="s7">NABLES </span>D<span class="s7">EPLOYMENT</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">When considering how to add new functionality to a system, one should always consider whether such functionality can be added <b>transparently</b>, in a way that demands no changes to the rest of the system. Requiring a complete rewrite of the existing software (or radical hardware changes) lessens the chance of impact of an idea. RAID is a perfect example, and certainly its transparency contributed to its success; administrators could install a SCSI-based RAID storage array instead of a SCSI disk, and the rest of the system (host computer, OS, etc.) did not have to change one bit to start using it. By solving this problem of <b>deployment</b>, RAID was made more successful from day one.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Amazingly, RAIDs provide these advantages <b>transparently </b>to systems that use them, i.e., a RAID just looks like a big disk to the host system. The beauty of transparency, of course, is that it enables one to simply replace a disk with a RAID and not change a single line of software; the operat- ing system and client applications continue to operate without modifica- tion. In this manner, transparency greatly improves the <b>deployability </b>of RAID, enabling users and administrators to put a RAID to use without worries of software compatibility.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">We now discuss some of the important aspects of RAIDs. We begin with the interface, fault model, and then discuss how one can evaluate a RAID design along three important axes: capacity, reliability, and perfor- mance. We then discuss a number of other issues that are important to RAID design and implementation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part395.htm">38.1 Interface And RAID Internals</a><a class="toc0" href="part396.htm">38.2 Fault Model</a><a class="toc0" href="part397.htm">38.3 How To Evaluate A RAID</a><a class="toc0" href="part398.htm">38.4 RAID Level 0: Striping</a><a class="toc1" href="part399.htm">Chunk Sizes</a><a class="toc1" href="part400.htm">Back To RAID-0 Analysis</a><a class="toc1" href="part401.htm">Evaluating RAID Performance</a><a class="toc1" href="part402.htm">Back To RAID-0 Analysis, Again</a><a class="toc0" href="part403.htm">38.5 RAID Level 1: Mirroring</a><a class="toc1" href="part404.htm">RAID-1 Analysis</a><a class="toc0" href="part405.htm">38.6 RAID Level 4: Saving Space With Parity</a><a class="toc1" href="part406.htm">RAID-4 Analysis</a><a class="toc2" href="part407.htm">Table 38.5: Example: Writes To 4, 13, And Respective Parity Blocks</a><a class="toc0" href="part408.htm">38.7 RAID Level 5: Rotating Parity</a><a class="toc1" href="part409.htm">RAID-5 Analysis</a><a class="toc0" href="part410.htm">38.8 RAID Comparison: A Summary</a><a class="toc0" href="part411.htm">38.9 Other Interesting RAID Issues</a><a class="toc0" href="part412.htm">38.10 Summary</a><a class="toc0" href="part413.htm">References</a><a class="toc0" href="part414.htm">Homework</a><a class="toc1" href="part415.htm">Questions</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part393.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part395.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
