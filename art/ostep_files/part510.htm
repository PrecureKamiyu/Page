<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>47.2 Unreliable Communication Layers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part509.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part511.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">47.2 Unreliable Communication Layers</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">One simple way is this: we don’t deal with it. Because some appli- cations know how to deal with packet loss, it is sometimes useful to let them communicate with a basic unreliable messaging layer, an example of the <b>end-to-end argument </b>one often hears about (see the <b>Aside </b>at end of chapter). One excellent example of such an unreliable layer is found in the <b>UDP/IP </b>networking stack available today on virtually all modern systems. To use UDP, a process uses the <b>sockets </b>API in order to create a <b>communication endpoint</b>; processes on other machines (or on the same machine) send UDP <b>datagrams </b>to the original process (a datagram is a fixed-sized message up to some max size).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 4pt;padding-left: 85pt;text-indent: -16pt;text-align: left;">int UDP_Open(int port) { int sd;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) { return -1; } struct sockaddr_in myaddr;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">bzero(&amp;myaddr, sizeof(myaddr)); myaddr.sin_family   = AF_INET; myaddr.sin_port   = htons(port); myaddr.sin_addr.s_addr = INADDR_ANY;</p><p class="s38" style="padding-left: 102pt;text-indent: -16pt;line-height: 89%;text-align: left;">if (bind(sd, (struct sockaddr <span class="s39">*</span>) &amp;myaddr, sizeof(myaddr)) == -1) { close(sd);</p><p class="s38" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">return -1;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">}</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">return sd;</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 85pt;text-indent: -16pt;line-height: 89%;text-align: left;">int UDP_FillSockAddr(struct sockaddr_in <span class="s39">*</span>addr, char <span class="s39">*</span>hostName, int port) { bzero(addr, sizeof(struct sockaddr_in));</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">addr-&gt;sin_family = AF_INET;    // host byte order</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;text-align: left;">addr-&gt;sin_port  = htons(port);   // short, network byte order struct in_addr <span class="s39">*</span>inAddr;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 83%;text-align: left;">struct hostent <span class="s39">*</span>hostEntry;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 7pt;text-align: left;">if ((hostEntry = gethostbyname(hostName)) == NULL) { return -1; }</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 89%;text-align: left;">inAddr = (struct in_addr <span class="s39">*</span>) hostEntry-&gt;h_addr; addr-&gt;sin_addr = <span class="s39">*</span>inAddr;</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 7pt;text-align: left;">return 0;</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 85pt;text-indent: -16pt;line-height: 89%;text-align: left;">int UDP_Write(int sd, struct sockaddr_in <span class="s39">*</span>addr, char <span class="s39">*</span>buffer, int n) { int addrLen = sizeof(struct sockaddr_in);</p><p class="s38" style="padding-left: 85pt;text-indent: 0pt;line-height: 8pt;text-align: left;">return sendto(sd, buffer, n, 0, (struct sockaddr <span class="s39">*</span>) addr, addrLen);</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 77pt;text-indent: -8pt;line-height: 89%;text-align: left;">int UDP_Read(int sd, struct sockaddr_in <span class="s39">*</span>addr, char <span class="s39">*</span>buffer, int n) { int len = sizeof(struct sockaddr_in);</p><p class="s38" style="padding-left: 144pt;text-indent: -67pt;line-height: 89%;text-align: left;">return recvfrom(sd, buffer, n, 0, (struct sockaddr <span class="s39">*</span>) addr, (socklen_t <span class="s39">*</span>) &amp;len);</p><p class="s38" style="padding-left: 77pt;text-indent: 0pt;line-height: 7pt;text-align: left;">return rc;</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p><p style="padding-left: 141pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 47.2: <b>A Simple UDP Library</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Figures <span style=" color: #00AEEF;">47.1 </span>and <span style=" color: #00AEEF;">47.2 </span>show a simple client and server built on top of UDP/IP. The client can send a message to the server, which then responds with a reply. With this small amount of code, you have all you need to begin building distributed systems!</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">UDP is a great example of an unreliable communication layer. If you use it, you will encounter situations where packets get lost (dropped) and thus do not reach their destination; the sender is never thus informed of the loss. However, that does not mean that UDP does not guard against any failures at all. For example, UDP includes a <b>checksum </b>to detect some forms of packet corruption.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 90%;text-align: justify;">However, because many applications simply want to send data to a destination and not worry about packet loss, we need more. Specifically, we need reliable communication on top of an unreliable network.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: U<span class="s7">SE </span>C<span class="s7">HECKSUMS </span>F<span class="s7">OR </span>I<span class="s7">NTEGRITY</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Checksums are a commonly-used method to detect corruption quickly and effectively in modern systems. A simple checksum is addition: just sum up the bytes of a chunk of data; of course, many other more sophis- ticated checksums have been created, including basic cyclic redundancy codes (CRCs), the Fletcher checksum, and many others [MK09].</p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In networking, checksums are used as follows. Before sending a message from one machine to another, compute a checksum over the bytes of the message. Then send both the message and the checksum to the desti- nation. At the destination, the receiver computes a checksum over the incoming message as well; if this computed checksum matches the sent checksum, the receiver can feel some assurance that the data likely did not get corrupted during transmission.</p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Checksums can be evaluated along a number of different axes. Effective- ness is one primary consideration: does a change in the data lead to a change in the checksum? The stronger the checksum, the harder it is for changes in the data to go unnoticed. Performance is the other important criterion: how costly is the checksum to compute? Unfortunately, effec- tiveness and performance are often at odds, meaning that checksums of high quality are often expensive to compute. Life, again, isn’t perfect.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part509.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part511.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
