<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>49.2 Problems with Version 1</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part534.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part536.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">49.2 Problems with Version 1</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">A few key problems with this first version of AFS motivated the de- signers to rethink their file system. To study the problems in detail, the designers of AFS spent a great deal of time measuring their existing pro- totype to find what was wrong. Such experimentation is a good thing;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: M<span class="s7">EASURE </span>T<span class="s7">HEN </span>B<span class="s7">UILD </span>(P<span class="s7">ATTERSON</span>’<span class="s7">S </span>L<span class="s7">AW</span>)</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">One of our advisors, David Patterson (of RISC and RAID fame), used to always encourage us to measure a system and demonstrate a problem <i>before </i>building a new system to fix said problem. By using experimen- tal evidence, rather than gut instinct, you can turn the process of system building into a more scientific endeavor. Doing so also has the fringe ben- efit of making you think about how exactly to measure the system before your improved version is developed. When you do finally get around to building the new system, two things are better as a result: first, you have evidence that shows you are solving a real problem; second, you now have a way to measure your new system in place, to show that it actually improves upon the state of the art. And thus we call this <b>Patterson’s Law</b>.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">measurement <span class="p">is the key to understanding how systems work and how to improve them. Hard data helps take intuition and make into a concrete science of deconstructing systems. In their study, the authors found two main problems with AFSv1:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: -9pt;line-height: 89%;text-align: justify;"><span class="s4">• </span><b>Path-traversal costs are too high</b>: When performing a Fetch or Store protocol request, the client passes the entire pathname (e.g., <span class="s41">/home/ remzi/notes.txt</span>) to the server. The server, in order to access the file, must perform a full pathname traversal, first looking in the root directory to find <span class="s41">home</span>, then in <span class="s41">home </span>to find <span class="s41">remzi</span>, and so forth, all the way down the path until finally the desired file is located. With many clients accessing the server at once, the designers of AFS found that the server was spending much of its CPU time simply walking down directory paths.</p><p class="s4" style="padding-top: 5pt;padding-left: 64pt;text-indent: -9pt;line-height: 89%;text-align: justify;">• <span class="s27">The client issues too many TestAuth protocol messages</span><span class="p">: Much like NFS and its overabundance of GETATTR protocol messages, AFSv1 generated a large amount of traffic to check whether a lo- cal file (or its stat information) was valid with the TestAuth proto- col message. Thus, servers spent much of their time telling clients whether it was OK to used their cached copies of a file. Most of the time, the answer was that the file had not changed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">There were actually two other problems with AFSv1: load was not balanced across servers, and the server used a single distinct process per client thus inducing context switching and other overheads. The load imbalance problem was solved by introducing <b>volumes</b>, which an ad- ministrator could move across servers to balance load; the context-switch problem was solved in AFSv2 by building the server with threads instead of processes. However, for the sake of space, we focus here on the main two protocol problems above that limited the scale of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part534.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part536.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
