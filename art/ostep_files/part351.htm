<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part350.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part352.htm">下一个 &gt;</a></p><h4 style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">References</h4><p class="s12" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[C+71] “System Deadlocks”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">E.G. Coffman, M.J. Elphick, A. Shoshani ACM Computing Surveys, 3:2, June 1971</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The classic paper outlining the conditions for deadlock and how you might go about dealing with it. There are certainly some earlier papers on this topic; see the references within this paper for details.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[D64] “Een algorithme ter voorkoming van de dodelijke omarming” Circulated privately, around 1964</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF" class="a" target="_blank">Available: </a><a href="http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF" target="_blank">http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF</a></p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Indeed, not only did Dijkstra come up with a number of solutions to the deadlock problem, he was the first to note its existence, at least in written form. However, he called it the “deadly embrace”, which (thankfully) did not catch on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[GD02] “MapReduce: Simplified Data Processing on Large Clusters” Sanjay Ghemawhat and Jeff Dean</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">OSDI ’04, San Francisco, CA, October 2004</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">The MapReduce paper ushered in the era of large-scale data processing, and proposes a framework for performing such computations on clusters of generally unreliable machines.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[H91] “Wait-free Synchronization” Maurice Herlihy</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">ACM TOPLAS, 13(1), pages 124-149, January 1991</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Herlihy’s work pioneers the ideas behind wait-free approaches to writing concurrent programs. These approaches tend to be complex and hard, often more difficult than using locks correctly, probably limiting their success in the real world.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[J+08] “Deadlock Immunity: Enabling Systems To Defend Against Deadlocks” Horatiu Jula, Daniel Tralamazza, Cristian Zamfir, George Candea</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">OSDI ’08, San Diego, CA, December 2008</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">An excellent recent paper on deadlocks and how to avoid getting caught in the same ones over and over again in a particular system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: justify;">[K81] “Soul of a New Machine” Tracy Kidder, 1980</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">A must-read for any systems builder or engineer, detailing the early days of how a team inside Data General (DG), led by Tom West, worked to produce a “new machine.” Kidder’s other book are also excellent, in particular, “Mountains beyond Mountains”. Or maybe you don’t agree with me, comma?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[L+08] “Learning from Mistakes – A Comprehensive Study on Real World Concurrency Bug Characteristics”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Shan Lu, Soyeon Park, Eunsoo Seo, Yuanyuan Zhou ASPLOS ’08, March 2008, Seattle, Washington</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The first in-depth study of concurrency bugs in real software, and the basis for this chapter. Look at Y.Y. Zhou’s or Shan Lu’s web pages for many more interesting papers on bugs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="57" alt="image" src="Image_498.png"/></span></p><p class="s50" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">33</p><p style="text-indent: 0pt;text-align: left;"/><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part350.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part352.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
