<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>4.1 Overview of Network Layer</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P70010119520000000000000000019CC" class="level1"><header><h1 class="title" id="P700101195200000000000000000A77C" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A77C" epub:type="title"><span class="number">4.1</span> Overview of Network Layer</h1></header>
<p id="P700101195200000000000000000A77D" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A77D"><a class="xref" href="#P70010119520000000000000000019D6" data-foobar="1"><span class="label">Figure</span> <span class="number">4.1</span></a> shows a simple network with two hosts, H1 and H2, and several routers on the path between H1 and H2. Let’s suppose that H1 is sending information to H2, and consider the role of the network layer in these hosts and in the intervening routers. The network layer in H1 takes segments from the transport layer in H1, encapsulates each segment into a datagram, and then sends the datagrams to its nearby router, R1. At the receiving host, H2, the network layer receives the datagrams from its nearby router R2, extracts the transport-layer segments, and delivers the segments up to the transport layer at H2. The primary data-plane role of each router is to forward datagrams from its input links to its output links; the primary role of the network control plane is to coordinate these local, per-router forwarding actions so that datagrams are ultimately transferred end-to-end, along paths of routers between source and destination hosts. Note that the routers in <a class="xref" href="#P70010119520000000000000000019D6" data-foobar="1"><span class="label">Figure</span> <span class="number">4.1</span></a> are shown with a truncated protocol stack, that is, with no upper layers above the network layer, because routers do not run application- and transport-layer protocols such as those we examined in <a class="xref" href="fileP700101195200000000000000000096B.xhtml#P700101195200000000000000000096B" data-foobar="7"><span class="label">Chapters</span> <span class="number">2</span></a> and <a class="xref" href="fileP70010119520000000000000000010EC.xhtml#P70010119520000000000000000010EC" data-foobar="7"><span class="number">3</span></a>.</p>
<section id="P70010119520000000000000000019CF" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019CF" class="level2"><header><h1 class="title" id="P700101195200000000000000000A77E" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A77E" epub:type="title"><span class="number">4.1.1</span> Forwarding and Routing: The Data and Control Planes</h1></header>
<p id="P700101195200000000000000000A77F" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A77F">The primary role of the network layer is deceptively simple—to move packets from a sending host to a receiving host. To do so, two important network-layer functions can be identified:</p>
<ul id="P700101195200000000000000000A780" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A780">
<li id="P700101195200000000000000000A781" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A781"><p id="P700101195200000000000000000A782" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A782"><span class="leadin">Forwarding.</span> When a packet arrives at a router’s input link, the router must move the packet to the appropriate output link. For example, a packet arriving from Host H1 to Router R1 in <a class="xref" href="#P70010119520000000000000000019D6" data-foobar="1"><span class="label">Figure</span> <span class="number">4.1</span></a> must be forwarded to the next router on a path to H2. As we will see, forwarding is but one function (albeit the most<span class="pagebreak" title="307" id="P70010119520000000000000000019D5" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019D5" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000019D6" class="figure" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019D6">
<img alt="Illustration of the network layer." height="961" width="865" aria-describedby="P70010119520000000000000000019DA" id="P700101195200000000000000000A783" data-uri="P7001011952000000000000000005581" src="../images/4055104001.png"></img>
<figcaption id="P700101195200000000000000000A784" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A784"><header><h1 class="title" id="P700101195200000000000000000A785" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A785" epub:type="title"><span class="label">Figure </span><span class="number">4.1</span> The network layer</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000019DA" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019DA" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055104001.xhtml#la_4055104001"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A788" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A788"><span class="pagebreak" title="308" id="P70010119520000000000000000019DE" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019DE" epub:type="pagebreak" role="doc-pagebreak"></span>common and important one!) implemented in the data plane. In the more general case, which we’ll cover in <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a>, a packet might also be blocked from exiting a router (e.g., if the packet originated at a known malicious sending host, or if the packet were destined to a forbidden destination host), or might be duplicated and sent over multiple outgoing links.</p></li>
<li id="P700101195200000000000000000A789" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A789"><p id="P700101195200000000000000000A78A" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78A"><span class="leadin">Routing.</span> The network layer must determine the route or path taken by packets as they flow from a sender to a receiver. The algorithms that calculate these paths are referred to as <span class="keyword" id="P70010119520000000000000000019E1" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019E1"><b>routing algorithms</b></span>. A routing algorithm would determine, for example, the path along which packets flow from H1 to H2 in <a class="xref" href="#P70010119520000000000000000019D6" data-foobar="1"><span class="label">Figure</span> <span class="number">4.1</span></a>. Routing is implemented in the control plane of the network layer.</p></li>
</ul>
<p id="P700101195200000000000000000A78B" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78B">The terms <i>forwarding</i> and <i>routing</i> are often used interchangeably by authors discussing the network layer. We’ll use these terms much more precisely in this book. <span class="keyword" id="P70010119520000000000000000019E3" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019E3"><b>Forwarding</b></span> refers to the router-local action of transferring a packet from an input link interface to the appropriate output link interface. Forwarding takes place at very short timescales (typically a few nanoseconds), and thus is typically implemented in hardware. <span class="keyword" id="P70010119520000000000000000019E4" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019E4"><b>Routing</b></span> refers to the network-wide process that determines the end-to-end paths that packets take from source to destination. Routing takes place on much longer timescales (typically seconds), and as we will see is often implemented in software. Using our driving analogy, consider the trip from Pennsylvania to Florida undertaken by our traveler back in <a class="xref" href="fileP7001011952000000000000000000542.xhtml#P700101195200000000000000000054C" data-foobar="7"><span class="label">Section</span> <span class="number">1.3.1</span></a>. During this trip, our driver passes through many interchanges en route to Florida. We can think of forwarding as the process of getting through a single interchange: A car enters the interchange from one road and determines which road it should take to leave the interchange. We can think of routing as the process of planning the trip from Pennsylvania to Florida: Before embarking on the trip, the driver has consulted a map and chosen one of many paths possible, with each path consisting of a series of road segments connected at interchanges.</p>
<p id="P700101195200000000000000000A78C" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78C">A key element in every network router is its <span class="keyword" id="P70010119520000000000000000019E6" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019E6"><b>forwarding table</b></span>. A router forwards a packet by examining the value of one or more fields in the arriving packet’s header, and then using these header values to index into its forwarding table. The value stored in the forwarding table entry for those values indicates the outgoing link interface at that router to which that packet is to be forwarded. For example, in <a class="xref" href="#P70010119520000000000000000019EC" data-foobar="1"><span class="label">Figure</span> <span class="number">4.2</span></a>, a packet with header field value of <code id="P700101195200000000000000000A78D" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78D"><b>0110</b></code> arrives to a router. The router indexes into its forwarding table and determines that the output link interface for this packet is interface 2. The router then internally forwards the packet to interface 2. In <a class="xref" href="fileP7001011952000000000000000001A2A.xhtml#P7001011952000000000000000001A2A" data-foobar="7"><span class="label">Section</span> <span class="number">4.2</span></a>, we’ll look inside a router and examine the forwarding function in much greater detail. Forwarding is the key function performed by the data-plane functionality of the network layer.</p>
<section id="P70010119520000000000000000019E8" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019E8" class="level3"><header><h1 class="title" id="P700101195200000000000000000A78E" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78E" epub:type="title">Control Plane: The Traditional Approach</h1></header>
<p id="P700101195200000000000000000A78F" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A78F">But now you are undoubtedly wondering how a router’s forwarding tables are configured in the first place. This is a crucial issue, one that exposes the important interplay between forwarding (in data plane) and routing (in control plane). As shown<span class="pagebreak" title="309" id="P70010119520000000000000000019EB" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019EB" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000019EC" class="figure" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019EC">
<img alt="Illustration of the process by which routing algorithms determine values in forward tables." height="442" width="702" aria-describedby="P70010119520000000000000000019F0" id="P700101195200000000000000000A790" data-uri="P7001011952000000000000000005582" src="../images/4055104002.png"></img>
<figcaption id="P700101195200000000000000000A791" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A791"><header><h1 class="title" id="P700101195200000000000000000A792" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A792" epub:type="title"><span class="label">Figure </span><span class="number">4.2</span> Routing algorithms determine values in forward tables</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000019F0" data-uri="M04_KURO4140_07_SE_C04.xhtml#P70010119520000000000000000019F0" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055104002.xhtml#la_4055104002"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A7A1" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A1">in <a class="xref" href="#P70010119520000000000000000019EC" data-foobar="1"><span class="label">Figure</span> <span class="number">4.2</span></a>, the routing algorithm determines the contents of the routers’ forwarding tables. In this example, a routing algorithm runs in each and every router and both forwarding and routing functions are contained within a router. As we’ll see in <a class="xref" href="fileP7001011952000000000000000002092.xhtml#P7001011952000000000000000002092" data-foobar="7"><span class="label">Sections</span> <span class="number">5.3</span></a> and <a class="xref" href="fileP70010119520000000000000000020BA.xhtml#P70010119520000000000000000020BA" data-foobar="7"><span class="number">5.4</span></a>, the routing algorithm function in one router communicates with the routing algorithm function in other routers to compute the values for its forwarding table. How is this communication performed? By exchanging routing messages containing routing information according to a routing protocol! We’ll cover routing algorithms and protocols in <a class="xref" href="fileP7001011952000000000000000001EFF.xhtml#P7001011952000000000000000001EFF" data-foobar="7"><span class="label">Sections</span> <span class="number">5.2</span></a> through <a class="xref" href="fileP70010119520000000000000000020BA.xhtml#P70010119520000000000000000020BA" data-foobar="7"><span class="number">5.4.</span></a></p>
<p id="P700101195200000000000000000A7A2" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A2">The distinct and different purposes of the forwarding and routing functions can be further illustrated by considering the hypothetical (and unrealistic, but technically feasible) case of a network in which all forwarding tables are configured directly by human network operators physically present at the routers. In this case, <i>no</i> routing protocols would be required! Of course, the human operators would need to interact with each other to ensure that the forwarding tables were configured in such a way that packets reached their intended destinations. It’s also likely that human configuration would be more error-prone and much slower to respond to changes in the network topology than a routing protocol. We’re thus fortunate that all networks have both a forwarding <i>and</i> a routing function!</p>
</section>
<section id="P7001011952000000000000000001A01" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A01" class="level3"><header><h1 class="title" id="P700101195200000000000000000A7A3" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A3" epub:type="title"><span class="pagebreak" title="310" id="P7001011952000000000000000001A03" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A03" epub:type="pagebreak" role="doc-pagebreak"></span>Control Plane: The SDN Approach</h1></header>
<p id="P700101195200000000000000000A7A4" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A4">The approach to implementing routing functionality shown in <a class="xref" href="#P70010119520000000000000000019EC" data-foobar="1"><span class="label">Figure</span> <span class="number">4.2</span></a>—with each router having a routing component that communicates with the routing component of other routers—has been the traditional approach adopted by routing vendors in their products, at least until recently. Our observation that humans could manually configure forwarding tables does suggest, however, that there may be other ways for control-plane functionality to determine the contents of the data-plane forwarding tables.</p>
<p id="P700101195200000000000000000A7A5" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A5"><a class="xref" href="#P7001011952000000000000000001A06" data-foobar="1"><span class="label">Figure</span> <span class="number">4.3</span></a> shows an alternate approach in which a physically separate (from the routers), remote controller computes and distributes the forwarding tables to be used by each and every router. Note that the data plane components of <a class="xref" href="#P70010119520000000000000000019EC" data-foobar="1"><span class="label">Figures</span> <span class="number">4.2</span></a> and <a class="xref" href="#P7001011952000000000000000001A06" data-foobar="1"><span class="number">4.3</span></a> are identical. In <a class="xref" href="#P7001011952000000000000000001A06" data-foobar="1"><span class="label">Figure</span> <span class="number">4.3</span></a>, however, control-plane routing functionality is separated</p>
<figure id="P7001011952000000000000000001A06" class="figure" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A06">
<img alt="Illustration of the process by which a remote controller determines and distributes values in forwarding tables." height="562" width="728" aria-describedby="P7001011952000000000000000001A0A" id="P700101195200000000000000000A7A6" data-uri="P7001011952000000000000000005583" src="../images/4055104003.png"></img>
<figcaption id="P700101195200000000000000000A7A7" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A7"><header><h1 class="title" id="P700101195200000000000000000A7A8" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7A8" epub:type="title"><span class="label">Figure </span><span class="number">4.3</span> A remote controller determines and distributes values in ­forwarding tables</h1></header>

</figcaption>
</figure><div class="longdesc" id="P7001011952000000000000000001A0A" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A0A" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055104003.xhtml#la_4055104003"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000A7AA" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AA"><span class="pagebreak" title="311" id="P7001011952000000000000000001A0D" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A0D" epub:type="pagebreak" role="doc-pagebreak"></span>from the physical router—the routing device performs forwarding only, while the remote controller computes and distributes forwarding tables. The remote controller might be implemented in a remote data center with high reliability and redundancy, and might be managed by the ISP or some third party. How might the routers and the remote controller communicate? By exchanging messages containing forwarding tables and other pieces of routing information. The control-plane approach shown in <a class="xref" href="#P7001011952000000000000000001A06" data-foobar="1"><span class="label">Figure</span> <span class="number">4.3</span></a> is at the heart of <span class="keyword" id="P7001011952000000000000000001A0E" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A0E"><b>software-defined networking (SDN)</b></span>, where the network is “software-defined” because the controller that computes forwarding tables and interacts with routers is implemented in software. Increasingly, these software implementations are also open, i.e., similar to Linux OS code, the code is publically available, allowing ISPs (and networking researchers and students!) to innovate and propose changes to the software that controls network-layer functionality. We will cover the SDN control plane in <a class="xref" href="fileP7001011952000000000000000002156.xhtml#P7001011952000000000000000002156" data-foobar="7"><span class="label">Section</span> <span class="number">5.5</span></a>.</p>
</section>
</section>
<section id="P7001011952000000000000000001A0F" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A0F" class="level2"><header><h1 class="title" id="P700101195200000000000000000A7AB" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AB" epub:type="title"><span class="number">4.1.2</span> Network Service Model</h1></header>
<p id="P700101195200000000000000000A7AC" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AC">Before delving into the network layer’s data plane, let’s wrap up our introduction by taking the broader view and consider the different types of service that might be offered by the network layer. When the transport layer at a sending host transmits a packet into the network (that is, passes it down to the network layer at the sending host), can the transport layer rely on the network layer to deliver the packet to the destination? When multiple packets are sent, will they be delivered to the transport layer in the receiving host in the order in which they were sent? Will the amount of time between the sending of two sequential packet transmissions be the same as the amount of time between their reception? Will the network provide any feedback about congestion in the network? The answers to these questions and others are determined by the service model provided by the network layer. The <span class="keyword" id="P7001011952000000000000000001A12" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A12"><b>network service model</b></span> defines the characteristics of end-to-end delivery of packets between sending and receiving hosts.</p>
<p id="P700101195200000000000000000A7AD" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AD">Let’s now consider some possible services that the network layer could provide. These services could include:</p>
<ul id="P700101195200000000000000000A7AE" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AE">
<li id="P700101195200000000000000000A7AF" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7AF"><p id="P700101195200000000000000000A7B0" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B0"><span class="leadin">Guaranteed delivery.</span> This service guarantees that a packet sent by a source host will eventually arrive at the destination host.</p></li>
<li id="P700101195200000000000000000A7B1" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B1"><p id="P700101195200000000000000000A7B2" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B2"><span class="leadin">Guaranteed delivery with bounded delay.</span> This service not only guarantees delivery of the packet, but delivery within a specified host-to-host delay bound (for example, within 100 msec).</p></li>
<li id="P700101195200000000000000000A7B3" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B3"><p id="P700101195200000000000000000A7B4" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B4"><span class="leadin">In-order packet delivery.</span> This service guarantees that packets arrive at the destination in the order that they were sent.</p></li>
<li id="P700101195200000000000000000A7B5" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B5"><p id="P700101195200000000000000000A7B6" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B6"><span class="leadin">Guaranteed minimal bandwidth.</span> This network-layer service emulates the behavior of a transmission link of a specified bit rate (for example, 1 Mbps) between sending and receiving hosts. As long as the sending host transmits bits (as part <span class="pagebreak" title="312" id="P7001011952000000000000000001A1D" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A1D" epub:type="pagebreak" role="doc-pagebreak"></span>of packets) at a rate below the specified bit rate, then all packets are eventually delivered to the destination host.</p></li>
<li id="P700101195200000000000000000A7B7" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B7"><p id="P700101195200000000000000000A7B8" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B8"><span class="leadin">Security.</span> The network layer could encrypt all datagrams at the source and decrypt them at the destination, thereby providing confidentiality to all transport-layer segments.</p></li>
</ul>
<p class="continued" id="P700101195200000000000000000A7B9" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7B9">This is only a partial list of services that a network layer could provide—there are countless variations possible.</p>
<p id="P700101195200000000000000000A7BA" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7BA">The Internet’s network layer provides a single service, known as <span class="keyword" id="P7001011952000000000000000001A22" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A22"><b>best-effort service</b></span>. With best-effort service, packets are neither guaranteed to be received in the order in which they were sent, nor is their eventual delivery even guaranteed. There is no guarantee on the end-to-end delay nor is there a minimal bandwidth guarantee. It might appear that <i>best-effort service</i> is a euphemism for <i>no service at all</i>—a network that delivered <i>no</i> packets to the destination would satisfy the definition of best-effort delivery service! Other network architectures have defined and implemented service models that go beyond the Internet’s best-effort service. For example, the ATM network architecture <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A50" data-foobar="7">[MFA Forum 2016</a>, <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003841" data-foobar="7">Black 1995]</a> provides for guaranteed in-order delay, bounded delay, and guaranteed minimal bandwidth. There have also been proposed service model extensions to the Internet architecture; for example, the Intserv architecture <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003B0E" data-foobar="7">[RFC 1633]</a> aims to provide end-end delay guarantees and congestion-free communication. Interestingly, in spite of these well-developed alternatives, the Internet’s basic best-effort service model combined with adequate bandwidth provisioning have arguably proven to be more than “good enough” to enable an amazing range of applications, including streaming video services such as Netflix and voice-and-video-over-IP, real-time conferencing applications such as Skype and Facetime.</p>
<section id="P7001011952000000000000000001A23" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A23" class="level3"><header><h1 class="title" id="P700101195200000000000000000A7BB" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7BB" epub:type="title">An Overview of <a class="xref" href="fileP70010119520000000000000000019C1.xhtml#P70010119520000000000000000019C1" data-foobar="7"><span class="label">Chapter</span> <span class="number">4</span></a></h1></header>
<p id="P700101195200000000000000000A7BC" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7BC">Having now provided an overview of the network layer, we’ll cover the data-plane component of the network layer in the following sections in this chapter. In <a class="xref" href="fileP7001011952000000000000000001A2A.xhtml#P7001011952000000000000000001A2A" data-foobar="7"><span class="label">Section</span> <span class="number">4.2</span></a>, we’ll dive down into the internal hardware operations of a router, including input and output packet processing, the router’s internal switching mechanism, and packet queueing and scheduling. In Section <a class="xref" href="fileP7001011952000000000000000001B24.xhtml#P7001011952000000000000000001B24" data-foobar="7"><span class="number">4.3</span></a>, we’ll take a look at traditional IP forwarding, in which packets are forwarded to output ports based on their destination IP addresses. We’ll encounter IP addressing, the celebrated IPv4 and IPv6 protocols and more. In <a class="xref" href="fileP7001011952000000000000000001CE3.xhtml#P7001011952000000000000000001CE3" data-foobar="7"><span class="label">Section</span> <span class="number">4.4</span></a>, we’ll cover more generalized forwarding, where packets may be forwarded to output ports based on a large number of header values (i.e., not only based on destination IP address). Packets may be blocked or duplicated at the router, or may have certain header field values rewritten—all under software control. This more generalized form of packet forwarding is a key component of a modern network data plane, including the data plane in software-defined networks (SDN).</p>
<p id="P700101195200000000000000000A7BD" data-uri="M04_KURO4140_07_SE_C04.xhtml#P700101195200000000000000000A7BD">We mention here in passing that the terms <i>forwarding</i> and <i>switching</i> are often used interchangeably by computer-networking researchers and practitioners; we’ll <span class="pagebreak" title="313" id="P7001011952000000000000000001A27" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A27" epub:type="pagebreak" role="doc-pagebreak"></span>use both terms interchangeably in this textbook as well. While we’re on the topic of terminology, it’s also worth mentioning two other terms that are often used interchangeably, but that we will use more carefully. We’ll reserve the term <i>packet switch</i> to mean a general packet-switching device that transfers a packet from input link interface to output link interface, according to values in a packet’s header fields. Some packet switches, called <span class="keyword" id="P7001011952000000000000000001A28" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A28"><b>link-layer switches</b></span> (examined in <a class="xref" href="fileP7001011952000000000000000001EDE.xhtml#P7001011952000000000000000001EDE" data-foobar="7"><span class="label">Chapter</span> <span class="number">6</span></a>), base their forwarding decision on values in the fields of the link-layer frame; switches are thus referred to as link-layer (layer 2) devices. Other packet switches, called <span class="keyword" id="P7001011952000000000000000001A29" data-uri="M04_KURO4140_07_SE_C04.xhtml#P7001011952000000000000000001A29"><b>routers</b></span>, base their forwarding decision on header field values in the network-layer datagram. Routers are thus network-layer (layer 3) devices. (To fully appreciate this important distinction, you might want to review <a class="xref" href="fileP700101195200000000000000000065D.xhtml#P70010119520000000000000000006E3" data-foobar="7"><span class="label">Section</span> <span class="number">1.5.2</span></a>, where we discuss network-layer datagrams and link-layer frames and their relationship.) Since our focus in this chapter is on the network layer, we’ll mostly use the term <i>router</i> in place of <i>packet switch</i>.</p>
</section>
</section>
</section></body></html>