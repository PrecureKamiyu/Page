<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part306.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part308.htm">下一个 &gt;</a></p><h4 style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">References</h4><p class="s12" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">[B+10] “An Analysis of Linux Scalability to Many Cores”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">Silas Boyd-Wickizer, Austin T. Clements, Yandong Mao, Aleksey Pesterev, M. Frans Kaashoek, Robert Morris, Nickolai Zeldovich</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">OSDI ’10, Vancouver, Canada, October 2010</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">A great study of how Linux performs on multicore machines, as well as some simple solutions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[BH73] “Operating System Principles” Per Brinch Hansen, Prentice-Hall, 1973</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://portal.acm.org/citation.cfm?id=540365" class="a" target="_blank">Available: </a><a href="http://portal.acm.org/citation.cfm?id=540365" target="_blank">http://portal.acm.org/citation.cfm?id=540365</a></p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">One of the first books on operating systems; certainly ahead of its time. Introduced monitors as a concurrency primitive.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[BC05] “Understanding the Linux Kernel (Third Edition)” Daniel P. Bovet and Marco Cesati</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">O’Reilly Media, November 2005</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">The classic book on the Linux kernel. You should read it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">[L+13] “A Study of Linux File System Evolution”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Lanyue Lu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau, Shan Lu FAST ’13, San Jose, CA, February 2013</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Our paper that studies every patch to Linux file systems over nearly a decade. Lots of fun findings in there; read it to see! The work was painful to do though; the poor graduate student, Lanyue Lu, had to look through every single patch by hand in order to understand what they did.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[MS98] “Nonblocking Algorithms and Preemption-safe Locking on Multiprogrammed Shared- memory Multiprocessors”</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">M. Michael and M. Scott</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Journal of Parallel and Distributed Computing, Vol. 51, No. 1, 1998</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Professor Scott and his students have been at the forefront of concurrent algorithms and data structures for many years; check out his web page, numerous papers, or books to find out more.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[MS04] “Concurrent Data Structures” Mark Moir and Nir Shavit</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">In Handbook of Data Structures and Applications (Editors D. Metha and S.Sahni)</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Chapman and Hall/CRC Press, 2004</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="http://www.cs.tau.ac.il/" class="a" target="_blank">Available: </a>www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">A short but relatively comprehensive reference on concurrent data structures. Though it is missing some of the latest works in the area (due to its age), it remains an incredibly useful reference.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">[MM00] “Solaris Internals: Core Kernel Architecture” Jim Mauro and Richard McDougall</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">Prentice Hall, October 2000</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: left;">The Solaris book. You should also read this, if you want to learn in great detail about something other than Linux.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: left;">[S+11] “Making the Common Case the Only Case with Anticipatory Memory Allocation” Swaminathan Sundararaman, Yupu Zhang, Sriram Subramanian,</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: left;">Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau FAST ’11, San Jose, CA, February 2011</p><p class="s17" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Our work on removing possibly-failing calls to malloc from kernel code paths. The idea is to allocate all potentially needed memory before doing any of the work, thus avoiding failure deep down in the storage stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="57" alt="image" src="Image_378.png"/></span></p><p class="s50" style="padding-top: 6pt;text-indent: 0pt;text-align: right;">30</p><p style="text-indent: 0pt;text-align: left;"/><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part306.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part308.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
