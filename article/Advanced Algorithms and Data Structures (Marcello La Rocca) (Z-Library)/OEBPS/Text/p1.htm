<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Part 1</title>
    
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-1021506"></a><a id="pgfId-1021490"></a>Part 1. Improving over basic data structures</h1>
  </div>

  <p class="body"><a id="pgfId-1021533"></a><span class="fm-part-initial-cap">T</span>he first part of this book lays the foundations for the more advanced sections that we’ll discuss later. It focuses on discovering advanced data structures that provide an improvement over other more basic structures; for example, how we can improve binary heaps or make trees balanced, and how we can solve problems such as keeping track of things or groups of things?</p>

  <p class="body"><a id="pgfId-1021534"></a>Through these examples, we’ll show that there are many ways to perform operations on data, and as developers we need to get accustomed to the fact that the best way we can choose depends on the context and requirements. We thus need to look at requirements, examine the context, and learn to question our knowledge when we solve a problem, in order to spot the best solution for the specifics we are facing.</p>

  <p class="body"><a id="pgfId-1021536"></a>Chapter 2 introduces an advanced variant of binary heaps, the <i class="calibre17">d-way heap</i>. It also describes the structure we use, in each chapter in this part, to explain topics.</p>

  <p class="body"><a id="pgfId-1021537"></a>Chapter 3 further explores the advanced use of heaps with <i class="calibre17">treap</i>, a hybrid between a binary search tree and a heap that can also help in different contexts.</p>

  <p class="body"><a id="pgfId-1021538"></a>Chapter 4 switches to <i class="calibre17">Bloom filters</i>, an advanced form of hash table that can help save memory while maintaining amortized constant-time search.</p>

  <p class="body"><a id="pgfId-1021539"></a>Chapter 5 introduces a few alternative data structures used to keep track of <i class="calibre17">disjoint sets</i>, a cornerstone needed to build countless advanced algorithms and that is used in several practical real-world applications.</p>

  <p class="body"><a id="pgfId-1021540"></a>Chapter 6 presents two data structures that out-perform general-purpose containers when it comes to storing and searching strings: <i class="calibre17">tries</i> and <i class="calibre17">radix tries</i>, also known as compact prefix trees.</p>

  <p class="body"><a id="pgfId-1021516"></a>Chapter 7 leverages the data structures presented in the first six chapters to build a composed data structure, the <i class="calibre17">LRU- cache</i>, to efficiently handle caching. The <i class="calibre17">LFU- cache</i> variant is also discussed at length, as well as the issues with synchronizing shared containers in multi-thread environments.</p>
</body>
</html>
