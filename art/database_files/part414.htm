<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Further Reading</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part413.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part415.htm">下一个 &gt;</a></p><p class="s45" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">Further Reading</p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Early work on parallel database systems include <span class="s44">GAMMA </span>([DeWitt (1990)]), <span class="s44">XPRS </span>([Stonebraker et al. (1989)]) and Volcano ([Graefe (1990)]). [Graefe (1993)] presents an excellent survey of query processing, including parallel processing of queries. The exchange-operator model was advocated by [Graefe (1990)] and [Graefe and McKenna (1993)]. Skew handling in parallel joins is described by [DeWitt et al. (1992)].</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">[Ganguly et al. (1992)] describe query-optimization techniques based on the response-time cost model for parallel query execution, while [Zhou et al. (2010)] de- scribe how to extend a query optimizer to account for partitioning properties and par- allel plans. View maintenance in parallel data storage systems is described by [Agrawal et al. (2009)].</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A fault-tolerant implementation of the MapReduce framework at Google, which lead to the widespread use of the MapReduce paradigm, is described by [Dean and Ghemawat (2010)]. [Kwon et al. (2013)] provide an overview of skew handling in the Hadoop MapReduce framework. [Herodotou and Babu (2013)] describe how to opti- mize a number of parameters for query execution in the MapReduce framework. An overview of the Apache Spark system is provided by [Zaharia et al. (2016)], while [Za- haria et al. (2012)] describe Resilient Distributed Datasets, a fault-tolerant abstraction which formed a basis for the Spark implementation. Extensions of the exchange op- erator to support fault-tolerance, are described by [Shah et al. (2004)], with a focus on fault-tolerant continuous queries. Fault-tolerant stream processing in the Google MillWheel system is described in [Akidau et al. (2013)].</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The morsel-driven approach to parallel query evaluation in shared-memory sys- tems with multi-core processors is described in [Leis et al. (2014)]. [Kersten et al. (2018)] provides a comparison of vectorwise query processing using optimizations such as <span class="s44">SIMD </span>instructions, with producer-driven pipelining.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;">[Carbone et al. (2015)] describe stream and batch processing in Apache Flink. [Ozsu and Valduriez (2010)] provides textbook coverage of distributed database sys- tems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part413.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part415.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
