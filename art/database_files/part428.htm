<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Practice Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part427.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part429.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 4pt;padding-left: 73pt;text-indent: 0pt;text-align: left;">Practice Exercises</p><p class="s46" style="padding-top: 12pt;padding-left: 156pt;text-indent: -30pt;text-align: justify;">23.1 <span class="p">What are the key diﬀerences between a local-area network and a wide-area network, that aﬀect the design of a distributed database?</span></p><p class="s46" style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;">23.2 <span class="p">To build a highly available distributed system, you must know what kinds of failures can occur.</span></p><p style="padding-top: 6pt;padding-left: 163pt;text-indent: 0pt;text-align: justify;">a. List possible types of failure in a distributed system.</p><p style="padding-top: 6pt;padding-left: 182pt;text-indent: -19pt;text-align: justify;">b.  Which items in your list from part a are also applicable to a centralized system?</p><p style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;"><b>23.3  </b>Consider a failure that occurs during <span class="s44">2PC </span>for a transaction. For each possible failure that you listed in Exercise 23.2a, explain how <span class="s44">2PC </span>ensures transaction atomicity despite the failure.</p><p style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;"><b>23.4 </b>Consider a distributed system with two sites, <i>A </i>and <i>B</i>. Can site <i>A </i>distinguish among the following?</p><p class="s39" style="padding-top: 3pt;padding-left: 159pt;text-indent: 0pt;text-align: justify;">• <span class="s13">B </span><span class="p">goes down.</span></p><p class="s13" style="padding-top: 3pt;padding-left: 159pt;text-indent: 0pt;text-align: justify;"><span class="s39">• </span><span class="s40">The link between </span>A <span class="p">and </span>B <span class="p">goes down.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 175pt;text-indent: -16pt;text-align: justify;">• <span class="s13">B </span><span class="p">is extremely overloaded and response time is 100 times longer than nor- mal.</span></p><p style="padding-top: 6pt;padding-left: 156pt;text-indent: 0pt;text-align: justify;">What implications does your answer have for recovery in distributed systems?</p><p class="s46" style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;">23.5  <span class="p">The persistent messaging scheme described in this chapter depends on time- stamps. A drawback is that they can discard received messages only if they are too old, and may need to keep track of a large number of received messages. Suggest an alternative scheme based on sequence numbers instead of time- stamps, that can discard messages more rapidly.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;">23.6  <span class="p">Explain the diﬀerence between data replication in a distributed system and the maintenance of a remote backup site.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 156pt;text-indent: -31pt;text-align: justify;">23.7  <span class="p">Give an example where lazy replication can lead to an inconsistent database state even when updates get an exclusive lock on the primary (master) copy if data were read from a node other than the master.</span></p><p style="padding-top: 7pt;padding-left: 156pt;text-indent: -31pt;line-height: 87%;text-align: justify;"><b>23.8  </b>Consider the following deadlock-detection algorithm. When transaction <i>T</i><span class="s97">i</span>, at site <i>S</i><span class="s98">1</span>, requests a resource from <i>T</i><span class="s97">j </span>, at site <i>S</i><span class="s98">3</span>, a request message with time-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 5pt;padding-left: 124pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">stamp </span>n <span class="p">is sent. The edge (</span>T<span class="s145">i</span><span class="p">, </span>T<span class="s145">j </span><span class="p">, </span>n<span class="p">) is inserted in the local wait-for graph of </span>S<span class="s130">1</span><span class="s94">. The edge (</span>T<span class="s97">i</span><span class="p">, </span>T<span class="s97">j </span><span class="p">, </span>n<span class="p">) is inserted in the local wait-for graph of </span>S<span class="s130">3 </span><span class="s94">only if </span>T<span class="s97">j </span><span class="p">has received the request message and cannot immediately grant the requested resource. A request from </span>T<span class="s97">i </span><span class="p">to </span>T<span class="s97">j </span><span class="p">in the same site is handled in the usual man- ner; no timestamps are associated with the edge (</span>T<span class="s97">i</span><span class="p">, </span>T<span class="s97">j </span><span class="p">). A central coordinator</span></p><p style="padding-left: 124pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">invokes the detection algorithm by sending an initiating message to each site</p><p style="padding-left: 124pt;text-indent: 0pt;text-align: justify;">in the system.</p><p style="padding-left: 124pt;text-indent: 16pt;text-align: justify;">On receiving this message, a site sends its local wait-for graph to the co- ordinator. Note that such a graph contains all the local information that the site has about the state of the real graph. The wait-for graph reﬂects an instan- taneous state of the site, but it is not synchronized with respect to any other site.</p><p style="padding-left: 124pt;text-indent: 17pt;text-align: left;">When the controller has received a reply from each site, it constructs a graph as follows:</p><p class="s39" style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">• <span class="s40">The graph contains a vertex for every transaction in the system.</span></p><p class="s13" style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span><span class="s40">The graph has an edge (</span>T<span class="s97">i</span><span class="p">, </span>T<span class="s97">j </span><span class="p">) if and only if:</span></p><p class="s13" style="padding-left: 150pt;text-indent: 0pt;line-height: 16pt;text-align: left;"><span class="s50">° </span><span class="s51">There is an edge (</span>T<span class="s145">i</span><span class="p">, </span>T<span class="s145">j </span><span class="p">) in one of the wait-for graphs.</span></p><p class="s13" style="padding-top: 1pt;padding-left: 158pt;text-indent: -8pt;line-height: 77%;text-align: left;"><span class="s50">° </span><span class="s51">An edge (</span>T<span class="s97">i</span><span class="p">, </span>T<span class="s97">j </span><span class="p">, </span>n<span class="p">) (for some </span>n<span class="p">) appears in more than one wait-for graph.</span></p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: 0pt;text-align: justify;">Show that, if there is a cycle in the constructed graph, then the system is in a deadlock state, and that, if there is no cycle in the constructed graph, then the system was not in a deadlock state when the execution of the algorithm began.</p><p class="s46" style="padding-top: 6pt;padding-left: 124pt;text-indent: -31pt;text-align: justify;">23.9  <span class="p">Consider the chain-replication protocol, described in Section 23.4.3.2, which is a variant of the primary-copy protocol.</span></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -18pt;text-align: justify;">a.  If locking is used for concurrency control, what is the earliest point when a process can release an exclusive lock after updatinga data item?</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -19pt;text-align: justify;">b.  While each data item could have its own chain, give two reasons it would be preferable to have a chain deﬁned at a higher level, such as for each partition or tablet.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -18pt;text-align: justify;">c.  How can consensus protocols be used to ensure that the chain is uniquely determined at any point in time?</p><p class="s46" style="padding-top: 6pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;">23.10  <span class="p">If the primary copy scheme is used for replication, and the primary gets dis- connected from the rest of the system, a new node may get elected as primary. But the old primary may not realize it has got disconnected, and may get re- connected subsequently without realizing that there is a new primary.</span></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -18pt;text-align: justify;">a.  What problems can arise if the old primary does not realize that a new one has taken over?</p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;text-align: justify;">b. How can leases be used to avoid these problems?</p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Exercises  <span class="s164">1167</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 182pt;text-indent: -18pt;text-align: justify;">c.  Would such a situation, where a participant node gets disconnected and then reconnected without realizing it was disconnected, cause any prob- lem with the majority or quorum protocols?</p><p class="s46" style="padding-top: 8pt;padding-left: 156pt;text-indent: -35pt;text-align: justify;">23.11  <span class="p">Consider a federated database system in which it is guaranteed that at most one global transaction is active at any time, and every local site ensures local serializability.</span></p><p style="padding-top: 8pt;padding-left: 182pt;text-indent: -18pt;text-align: justify;">a. Suggest ways in which the federated database system can ensure that there is at most one active global transaction at any time.</p><p style="padding-top: 6pt;padding-left: 182pt;text-indent: -19pt;text-align: justify;">b.  Show by example that it is possible for a nonserializable global schedule to result despite the assumptions.</p><p class="s46" style="padding-top: 8pt;padding-left: 156pt;text-indent: -35pt;text-align: justify;">23.12 <span class="p">Consider a federated database system in which every local site ensures local serializability, and all global transactions are read only.</span></p><p style="padding-top: 8pt;padding-left: 182pt;text-indent: -18pt;text-align: justify;">a. Show by example that nonserializable executions may result in such a system.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: justify;">b.  Show how you could use a ticket scheme to ensure global serializability.</p><p style="padding-top: 8pt;padding-left: 156pt;text-indent: -35pt;text-align: justify;"><b>23.13  </b>Suppose you have a large relation <i>r</i>(<i>A</i>, <i>B</i>, <i>C</i>) and a materialized view <i>v </i><span class="s15">= </span><i>A</i><span class="s15">γ</span><span class="s98">sum(</span><i>B</i><span class="s98">)</span>(<i>r</i>). View maintenance can be performed as part of each trans- action that updates <i>r</i>, on a parallel/distributed storage system that supports transactions across multiple nodes. Suppose the system uses two-phase com- mit along with a consensus protocol such as Paxos, across geographically dis- tributed data centers.</p><p style="padding-top: 8pt;padding-left: 182pt;text-indent: -18pt;text-align: justify;">a.  Explain why it is not a good idea to perform view maintenance as part of the update transaction, if some values of attribute <i>A </i>are “hot” at certain points in time, that is, many updates pertain to those values of <i>A</i>.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: justify;">b. Explain how operation locking (if supported) could solve this problem.</p><p style="padding-top: 6pt;padding-left: 182pt;text-indent: -18pt;text-align: justify;">c. Explain the tradeoﬀs of using asynchronous view maintenance in this context.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part427.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part429.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
