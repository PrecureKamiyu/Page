* 数据访问对象模式 (Data Access Object interface) 

在软件中，数据访问对象（DAO）是一种模式，它为某种类型的数据库或其他持
久性机制提供了一个抽象接口。通过将应用程序调用映射到持久层，DAO提供数
据操作而不暴露数据库细节。这种隔离支持单一职责原则。 [[https://en.wikipedia.org/wiki/Data_access_object][wiki]]

数据访问对象接口定义了要在模型对象上执行的标准操作。数据访问对象具体类
实现了上述接口。这个类负责从数据源获取数据，数据源可以是数据库/ xml 或
任何其他存储机制

下面是一个简单的数据访问对象模式的例子：

#+BEGIN_SRC
// interface as you can see
public interface StudentDao {
    public List<Student> getAllStudents();
    public Student getStudent(int rollNo);
    public void updateStudent(Student student);
    public void deleteStudent(Student student);
}

// a class implements the interface as you can see  
public class StudentDaoImpl implements StudentDao {
    // it has a list in Student.
    List<Student> students;

    public StudentDaoImpl(){
        students = new ArrayList<Student>();
        Student student1 = new Student("Robert",0);
        Student student2 = new Student("John",1);
        students.add(student1);
        students.add(student2);      
    }

    // it rewrite the function
    @Override
    public void deleteStudent(Student student) {
        students.remove(student.getRollNo());
        System.out.println("Student: Roll No " + student.getRollNo() +", deleted from database");
    }

    @Override
    public List<Student> getAllStudents() {
        return students;
    }
    @Override
    public Student getStudent(int rollNo) {
        return students.get(rollNo);
    }
    @Override
    public void updateStudent(Student student) {
        students.get(student.getRollNo()).setName(student.getName());
        System.out.println("Student: Roll No " + student.getRollNo() +", updated in the database");
    }
}
#+END_SRC

在这个例子中，StudentDao 是数据访问对象接口，定义了要在学生模型对象上
执行的标准操作。StudentDaoImpl 是实现了数据访问对象接口的实体类，负责
从数据源（在这种情况下是一个简单的列表）获取数据。

* 流家族和输入输出流 (Stream Family and I/O stream)

** 分类学

Java I/O 流分为两大类：字节流和字符流。字节流以字节为单位进行读写操作，
字符流以字符为单位进行读写操作。

字节流的抽象基类是 InputStream 和 OutputStream，它们分别代表了输入流和
输出流。常用的字节流类有 FileInputStream、FileOutputStream、
BufferedInputStream 和 BufferedOutputStream 等。

字符流的抽象基类是 Reader 和 Writer，它们分别代表了输入流和输出流。常
用的字符流类有 FileReader、FileWriter、BufferedReader 和
BufferedWriter 等。

** 字节流和字符流

字节流和字符流是 Java 中两种基本的 I/O 流类型。

字节流以字节为单位进行读写操作，它可以处理所有类型的数据，包括文本数据
和二进制数据。字节流的抽象基类是 InputStream 和 OutputStream，它们分别
代表了输入流和输出流。

字符流以字符为单位进行读写操作，它只能处理文本数据。字符流的抽象基类是
Reader 和 Writer，它们分别代表了输入流和输出流。字符流在读写操作时会自
动进行字符集编码和解码，因此可以方便地处理文本数据。

** 字节流和字符流(不同演绎)

在Java中，字节流（Byte Streams）和字符流（Character Streams）都是用于
I/O操作的流类别。它们的主要区别在于它们处理数据的方式。

字节流以 *8* 位字节为单位进行操作，可以读取和写入二进制数据，如图像、
音频等文件。字节流包括 InputStream 和 OutputStream 类及其子类。

字符流以 *16* 位 Unicode 字符为单位进行操作，主要用于读取和写入文本文
件。 字符流包括 Reader 和 Writer 类及其子类。

读取和写入字节流时，通常使用字节数组作为缓冲区，而读取和写入字符流时，
则通常使用字符数组。

在Java中，由于字符编码和字节编码之间的转换可能会导致数据损坏，因此字符
流提供了一些特殊的辅助类来处理不同的字符编码格式。例如，
InputStreamReader 和 OutputStreamWriter 类可以在字节流和字符流之间进行
转换，并支持指定所需的字符编码格式。

** Reader, BufferedReader

BufferedReader 是 Java 中一个用于读取文本数据的类。它继承自 Reader 类，
提供了一个缓冲区来存储从输入流中读取的数据，以便程序能够更高效地读取数
据。

BufferedReader 类的好处是可以减少读取操作的次数，从而提高程序的性能。
当我们用 BufferedReader 类读取文本数据时，通常将其与 InputStreamReader
一起使用，先将字节流转化为字符流，然后再通过 BufferedReader 类逐行读取
文本数据。下面是一个利用 BufferedReader 包装系统输入的例子.

#+BEGIN_SRC
BufferedReader in = new BufferedReader (new InputStreamReader(System.in));
#+END_SRC

This line of code creates a new BufferedReader object which reads text
from a character-input stream (in this case, System.in) and buffers
the input.

Here’s what each part of the code does:

1. System.in is an input stream that represents the standard input
   (usually the keyboard).

2. InputStreamReader is a bridge from byte streams to character streams.

3. BufferedReader reads text from a character-input stream, buffering
   characters so as to provide for the efficient reading of
   characters, arrays, and lines.

So when you run this line of code, you can read text from the standard
input (usually the keyboard) using the BufferedReader object1.

Reference:
1.  [[https://stackoverflow.com/questions/10547362/bufferedreader-explanation]]

* 操作文件 (manipulating files)

** Path Class
#+BEGIN_SRC
import java.nio.file.Path;
import java.nio.file.Paths;

public class PathDemo {
    public static void main(String[] args) {
        // create a path object
        Path path = Paths.get("C:\\Users\\John\\Documents\\example.txt");

        // print the path
        System.out.println("Path: " + path);

        // get the file name
        Path fileName = path.getFileName();
        System.out.println("File Name: " + fileName);

        // get the parent directory
        Path parentDir = path.getParent();
        System.out.println("Parent Directory: " + parentDir);

        // get the root directory
        Path rootDir = path.getRoot();
        System.out.println("Root Directory: " + rootDir);
    }
}
#+END_SRC

** Files Class

Files 类是一个封装了对文件各种操作的类. 我们可以使用这个类来进行对文件
的操作, 比如说 read file, write file, 创建目录, 复制文件, 移动文件等等.
下面是 Files 类之中的一些方法.

Files类提供了许多方法来处理文件和目录。下面是一些常用的方法：

- createDirectory(Path path)：创建一个新目录。
- createDirectories(Path path)：创建一个新目录，包括所有不存在的父目录。
- delete(Path path)：删除文件或空目录。
- deleteIfExists(Path path)：删除文件或空目录，如果存在。
- copy(Path source, Path target, CopyOption… options)：将源文件复制到目标文件。
- move(Path source, Path target, CopyOption… options)：将源文件移动到目标文件。
- readAllLines(Path path)：读取文件的所有行。
- readAllBytes(Path path)：读取文件的所有字节。

*** Read file

read file 有很多种方法. 因为我们可以将文件内容视为字符或者是字节. 比如
说我们可以使用 ~.readAllBytes~ 来读取所有的字节, 其返回值为 ~byte~ 数
组.

比如说, ~.readString~ 方法, 可以加入一个类型为 Charset 的变量, 那么这
个指令就将根据这个编码, 把文件内容转换为一个字符串. 缺省为 utf-8.

比如说 ~.readAllLines~ 方法, 就可以得到一个 ~String~ 的 List. 每一个
String 是文件内部一行的内容. 也就是说, 其将文件内的字符按照行来划分.

比如说 ~.readLine~ 方法, 就是逐行去读文件. 返回值当然是一个 ~String~.

*** Write to the file

类似地, 我们可以写入一个字符串. 使用

~.writeString(path, content.charset)~

即可. 其中 ~path~ 是一个 Path 类的实例.  ~content~ 是一个字符串. 这个
方法将会把 ~content~ 写在文件的开头. 我们可以使用另一个方法来实现, 将
内容写在文件的末尾. 这个方法为:

~.write(path, content.getBytes(charset), StandardOpenOption.APPEND)~

其中 ~StandardOpenOption.APPEND~ 是一个枚举. ????????????????????????

或者是我们使用 ~.write(path, lines, charset)~ 将很多行写入文件之中. 

*** Create files or directories

你可以使用 ~.createDirectory(path);~ 来创建一个文件夹. 但是只能创建一
个文件夹, 就是说, path 的最后一个名字得是存在的. 如果是能创建的多个文
件夹的命令---其实很好理解---是 ~.createDirectories~.

然后, 我们可以使用 ~.createFile(path)~ 来创建一个尚未存在的文件. 其将
会报错, 如果说文件已经存在.

*** Move files

使用 ~copy(fromPath, toPath)~ 能够将文件进行复制. 然后是移动文件. 我们
将 copy 换为 move 就行了. 但是如果说目标位置已经有文件了, 将会有报错.
但是我们可以使用 一些选项, 将这些文件进行覆盖.

*** 删除文件

如果说要删除的文件并不存在, 那么我们可以使用方法: deleteIfExists 方法
来实现删除文件, 如果文件存在的话; 不删除文件, 如果文件不存在. 

* 对象输入/输出流与序列化 (serialization)

我们可以将实例化了的对象转换为二进制数据, 然后存储在 *文件* 之中, 或者
是在网络上传输. 这个转换过程为 serialization. 同时我们可以读取文件之中
的二进制数据, 获得这个对象. 这个过程为 deserialization.

** write an object

To write an object to a file in Java, you can follow these steps:

1. Create a Java class that implements the *Serializable interface*.
2. Open a new or an existing file using *FileOutputStream*.
3. Create an instance of ObjectOutputStream and pass
   *FileOutputStream* as an argument to its constructor.
4. Use ObjectOutputStream.writeObject() method to write the object to
   the file.

for example, ~One~ is the class that is to be inserted. It should
implements the serializable interface. And then we shall open a
FileOutputStream. We shall use something like fO to denote the
FileOutputStream. And the initialization of the fO should use the path
or the string of the file, that is to say

~FileOutputStream fo = new FileOutputStream (path)~

and then we shall initialize the ObjectOutputStream by using the
sentence:

~ObjectOutputStream ObOut = new ObjectOutputStream (fo)~ 

and then the ObOut is okay to use. then we use the method name
~writeObject()~ to write the object to the file.

** read an object

To read an object from a file in Java, you can follow these steps:

1. Open the file that has the Java Object stored using
   FileInputStream.
2. Create an instance of ObjectInputStream and pass FileInputStream as
   an argument to its constructor.
3. Use ObjectInputStream.readObject() method to read the object from
   the file.1I hope this helps! Let me know if you have any other


Note that when an Object is subtracted from the file. The class of the
object is ~Object~. You may convert the type the result. 