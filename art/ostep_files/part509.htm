<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>47.1 Communication Basics</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part508.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part510.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">47.1 Communication Basics</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The central tenet of modern networking is that communication is fun- damentally unreliable. Whether in the wide-area Internet, or a local-area high-speed network such as Infiniband, packets are regularly lost, cor- rupted, or otherwise do not reach their destination.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">There are a multitude of causes for packet loss or corruption. Some- times, during transmission, some bits get flipped due to electrical or other similar problems. Sometimes, an element in the system, such as a net- work link or packet router or even the remote host, are somehow dam- aged or otherwise not working correctly; network cables do accidentally get severed, at least sometimes.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">More fundamental however is packet loss due to lack of buffering within a network switch, router, or endpoint. Specifically, even if we could guarantee that all links worked correctly, and that all the compo- nents in the system (switches, routers, end hosts) were up and running as expected, loss is still possible, for the following reason. Imagine a packet arrives at a router; for the packet to be processed, it must be placed in memory somewhere within the router. If many such packets arrive at</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// client code</p><p class="s38" style="padding-left: 57pt;text-indent: -16pt;text-align: left;">int main(int argc, char <span class="s39">*</span>argv[]) { int sd = UDP_Open(20000); struct sockaddr_in addr, addr2;</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">int rc = UDP_FillSockAddr(&amp;addr, &quot;machine.cs.wisc.edu&quot;, 10000); char message[BUFFER_SIZE];</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;line-height: 8pt;text-align: left;">sprintf(message, &quot;hello world&quot;);</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">rc = UDP_Write(sd, &amp;addr, message, BUFFER_SIZE); if (rc &gt; 0) {</p><p class="s38" style="padding-left: 74pt;text-indent: 0pt;line-height: 8pt;text-align: left;">int rc = UDP_Read(sd, &amp;addr2, buffer, BUFFER_SIZE);</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">}</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// server code</p><p class="s38" style="padding-left: 57pt;text-indent: -16pt;text-align: left;">int main(int argc, char <span class="s39">*</span>argv[]) { int sd = UDP_Open(10000); assert(sd &gt; -1);</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">while (1) {</p><p class="s38" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">struct sockaddr_in s; char buffer[BUFFER_SIZE];</p><p class="s38" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">int rc = UDP_Read(sd, &amp;s, buffer, BUFFER_SIZE); if (rc &gt; 0) {</p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">char reply[BUFFER_SIZE]; sprintf(reply, &quot;reply&quot;);</p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">rc = UDP_Write(sd, &amp;s, reply, BUFFER_SIZE);</p><p class="s38" style="padding-left: 74pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">}</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p><p style="padding-left: 85pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Figure 47.1: <b>Example UDP/IP Client/Server Code</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">once, it is possible that the memory within the router cannot accommo- date all of the packets. The only choice the router has at that point is to <b>drop </b>one or more of the packets. This same behavior occurs at end hosts as well; when you send a large number of messages to a single ma- chine, the machine’s resources can easily become overwhelmed, and thus packet loss again arises.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Thus, packet loss is fundamental in networking. The question thus becomes: how should we deal with it?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part508.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part510.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
