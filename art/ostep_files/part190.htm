<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Paging: Faster Translations (TLBs)</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part189.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part191.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">Paging: Faster Translations (TLBs)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Using paging as the core mechanism to support virtual memory can lead to high performance overheads. By chopping the address space into small, fixed-sized units (i.e., pages), paging requires a large amount of mapping information. Because that mapping information is generally stored in physical memory, paging logically requires an extra memory lookup for each virtual address generated by the program. Going to memory for translation information before every instruction fetch or explicit load or store is prohibitively slow. And thus our problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">HE </span>C<span class="s7">RUX</span>:</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: center;">H<span class="s7">OW </span>T<span class="s7">O </span>S<span class="s7">PEED </span>U<span class="s7">P </span>A<span class="s7">DDRESS </span>T<span class="s7">RANSLATION</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">How can we speed up address translation, and generally avoid the extra memory reference that paging seems to require? What hardware support is required? What OS involvement is needed?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">When we want to make things fast, the OS usually needs some help. And help often comes from the OS’s old friend: the hardware. To speed address translation, we are going to add what is called (for historical rea- sons [CP78]) a <b>translation-lookaside buffer</b>, or <b>TLB </b>[C68, C95]. A TLB is part of the chip’s <b>memory-management unit </b>(<b>MMU</b>), and is simply a hardware <b>cache </b>of popular virtual-to-physical address translations; thus, a better name would be an <b>address-translation cache</b>. Upon each virtual memory reference, the hardware first checks the TLB to see if the desired translation is held therein; if so, the translation is performed (quickly) <i>without </i>having to consult the page table (which has all translations). Be- cause of their tremendous performance impact, TLBs in a real sense make virtual memory possible [C95].</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part191.htm">19.1 TLB Basic Algorithm</a><a class="toc0" href="part192.htm">19.2 Example: Accessing An Array</a><a class="toc0" href="part193.htm">19.3 Who Handles The TLB Miss?</a><a class="toc0" href="part194.htm">19.4 TLB Contents: What’s In There?</a><a class="toc0" href="part195.htm">19.5 TLB Issue: Context Switches</a><a class="toc0" href="part196.htm">19.6 Issue: Replacement Policy</a><a class="toc0" href="part197.htm">19.7 A Real TLB Entry</a><a class="toc0" href="part198.htm">19.8 Summary</a><a class="toc0" href="part199.htm">References</a><a class="toc0" href="part200.htm">Homework (Measurement)</a><a class="toc1" href="part201.htm">Questions</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part189.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part191.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
