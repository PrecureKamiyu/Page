<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>9.5 VM as a Tool for Memory Protection</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000070EA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000045930" data-uri="chapter09.xhtml#P7000497027000000000000000045930" epub:type="title"><span class="pcalibre label pcalibre1">9.5 </span>VM as a Tool for Memory Protection</h1></header>
<p id="P7000497027000000000000000045931" data-uri="chapter09.xhtml#P7000497027000000000000000045931" class="pcalibre1 pcalibre calibre2">Any modern computer system must provide the means for the operating system to control access to the memory system. A user process should not be allowed</p>
<figure id="P70004970270000000000000000070ED" class="pcalibre5 figure pcalibre" data-uri="chapter09.xhtml#P70004970270000000000000000070ED">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000070EE" title="813" data-uri="chapter09.xhtml#P70004970270000000000000000070EE" epub:type="pagebreak"></span>
<img alt="A diagram illustrates connections from pages tables with permission bits to physical memory, for two processes." id="P7000497027000000000000000045932" data-uri="P700049702700000000000000000B782" src="../images/p813-1.png" class="pcalibre1 calibre266 pcalibre"/>
<figcaption id="P7000497027000000000000000045933" data-uri="chapter09.xhtml#P7000497027000000000000000045933" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000045934" data-uri="chapter09.xhtml#P7000497027000000000000000045934" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">9.10 </span>Using VM to provide page-level memory protection.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000025C6F" data-uri="chapter09.xhtml#P7000497027000000000000000025C6F">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<ul id="P7000497027000000000000000045935" data-uri="chapter09.xhtml#P7000497027000000000000000045935" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000045936" data-uri="chapter09.xhtml#P7000497027000000000000000045936" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045937" data-uri="chapter09.xhtml#P7000497027000000000000000045937" class="pcalibre calibre3 pcalibre1">Process i: page tables with permission bits is summarized below.</p>
<ul id="P7000497027000000000000000045938" data-uri="chapter09.xhtml#P7000497027000000000000000045938" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045939" data-uri="chapter09.xhtml#P7000497027000000000000000045939" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004593A" data-uri="chapter09.xhtml#P700049702700000000000000004593A" class="pcalibre calibre3 pcalibre1">VP 0: Sup No, Read Yes, Write No, Address PP 6, leading to PP 6 in physical memory</p></li>
<li id="P700049702700000000000000004593B" data-uri="chapter09.xhtml#P700049702700000000000000004593B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004593C" data-uri="chapter09.xhtml#P700049702700000000000000004593C" class="pcalibre calibre3 pcalibre1">VP 1: Sup No, Read Yes, Write Yes, Address PP 4, leading to PP 4 in physical memory</p></li>
<li id="P700049702700000000000000004593D" data-uri="chapter09.xhtml#P700049702700000000000000004593D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004593E" data-uri="chapter09.xhtml#P700049702700000000000000004593E" class="pcalibre calibre3 pcalibre1">VP 2: Sup Yes, Read, Yes, Write Yes, Address PP 2, leading to PP 2 in physical memory</p></li>
</ul></li>
<li id="P700049702700000000000000004593F" data-uri="chapter09.xhtml#P700049702700000000000000004593F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045940" data-uri="chapter09.xhtml#P7000497027000000000000000045940" class="pcalibre calibre3 pcalibre1">Process j:</p>
<ul id="P7000497027000000000000000045941" data-uri="chapter09.xhtml#P7000497027000000000000000045941" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000045942" data-uri="chapter09.xhtml#P7000497027000000000000000045942" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045943" data-uri="chapter09.xhtml#P7000497027000000000000000045943" class="pcalibre calibre3 pcalibre1">VP 0: Sup No, Read Yes, Write No, Address PP 9, leading to PP 9 in physical memory</p></li>
<li id="P7000497027000000000000000045944" data-uri="chapter09.xhtml#P7000497027000000000000000045944" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045945" data-uri="chapter09.xhtml#P7000497027000000000000000045945" class="pcalibre calibre3 pcalibre1">VP 1: Sup Yes, Read Yes, Write Yes, Address PP 6, leading to PP 6 in physical memory</p></li>
<li id="P7000497027000000000000000045946" data-uri="chapter09.xhtml#P7000497027000000000000000045946" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000045947" data-uri="chapter09.xhtml#P7000497027000000000000000045947" class="pcalibre calibre3 pcalibre1">VP 2: Sup No, Read, Yes, Write Yes, Address PP 11, leading to PP 11 in physical memory</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000045948" data-uri="chapter09.xhtml#P7000497027000000000000000045948">to modify its read-only code section. Nor should it be allowed to read or modify any of the code and data structures in the kernel. It should not be allowed to read or write the private memory of other processes, and it should not be allowed to modify any virtual pages that are shared with other processes, unless all parties explicitly allow it (via calls to explicit interprocess communication system calls).</p>
<p id="P7000497027000000000000000045949" data-uri="chapter09.xhtml#P7000497027000000000000000045949" class="pcalibre1 pcalibre calibre2">As we have seen, providing separate virtual address spaces makes it easy to isolate the private memories of different processes. But the address translation mechanism can be extended in a natural way to provide even finer access control. Since the address translation hardware reads a PTE each time the CPU generates an address, it is straightforward to control access to the contents of a virtual page by adding some additional permission bits to the PTE. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000070ED"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">9.10</span></a> shows the general idea.</p>
<p id="P700049702700000000000000004594A" data-uri="chapter09.xhtml#P700049702700000000000000004594A" class="pcalibre1 pcalibre calibre2">In this example, we have added three permission bits to each PTE. The SUP bit indicates whether processes must be running in kernel (supervisor) mode to access the page. Processes running in kernel mode can access any page, but processes running in user mode are only allowed to access pages for which SUP is 0. The READ and WRITE bits control read and write access to the page. For example, if process <var class="calibre5 pcalibre pcalibre1">i</var> is running in user mode, then it has permission to read VP 0 and to read or write VP 1. However, it is not allowed to access VP 2.</p>
<p id="P700049702700000000000000004594B" data-uri="chapter09.xhtml#P700049702700000000000000004594B" class="pcalibre1 pcalibre calibre2">If an instruction violates these permissions, then the CPU triggers a general protection fault that transfers control to an exception handler in the kernel, which sends a SIGSEGV signal to the offending process. Linux shells typically report this exception as a "segmentation fault."</p>
</section></body></html>
