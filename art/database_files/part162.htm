<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.11   Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part161.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part163.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">7.11   <span style=" color: #00AEEF;">Summary</span></p><p class="s39" style="padding-top: 9pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">We showed pitfalls in database design and how to design a database schema sys- tematically in a way that avoids those pitfalls. The pitfalls included repeated infor- mation and inability to represent some information.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">• <span class="s40">Chapter 6 showed the development of a relational database design from an </span><span class="s41">E-R</span></p><p style="padding-left: 139pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">design and when schemas may be combined safely.</p><p class="s40" style="padding-top: 2pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Functional dependencies are consistency constraints that are used to deﬁne two widely used normal forms, Boyce– Codd normal form (<span class="s41">BCNF</span>) and third normal form (<span class="s41">3NF</span>).</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">If the decomposition is dependency preserving, all functional dependencies can be inferred logically by considering only those dependencies that apply to one relation. This permits the validity of an update to be tested without the need to compute a join of relations in the decomposition.</span></p><p class="s39" style="padding-top: 2pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">A canonical cover is a set of functional dependencies equivalent to a given set of functional dependencies, that is minimized in a speciﬁc manner to eliminate extraneous attributes.</span></p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>The algorithm for decomposing relations into <span class="s41">BCNF </span>ensures a lossless decompo- sition. There are relation schemas with a given set of functional dependencies for which there is no dependency-preserving <span class="s41">BCNF </span>decomposition.</p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>A canonical cover is used to decompose a relation schema into <span class="s41">3NF</span>, which is a small relaxation of the <span class="s41">BCNF </span>condition. This algorithm produces designs that are both lossless and dependency-preserving. Relations in <span class="s41">3NF </span>may have some redundancy, but that is deemed an acceptable trade-oﬀ in cases where there is no dependency-preserving decomposition into <span class="s41">BCNF</span>.</p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Multivalued dependencies specify certain constraints that cannot be speciﬁed with functional dependencies alone. Fourth normal form (<span class="s41">4NF</span>) is deﬁned using the concept of multivalued dependencies. Section 28.1.1 gives details on reasoning about multivalued dependencies.</p><p class="s40" style="padding-top: 2pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Other normal forms exist, including <span class="s41">PJNF </span>and <span class="s41">DKNF</span>, which eliminate more subtle forms of redundancy. However, these are hard to work with and are rarely used. Chapter 28 gives details on these normal forms. Second normal form is of only historical interest since it provides no beneﬁt over <span class="s41">3NF</span>.</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Relational designs typically are based on simple atomic domains for each attribute. This is called ﬁrst normal form.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Time plays an important role in database systems. Databases are models of the real world. Whereas most databases model the state of the real world at a point in time (at the current time), temporal databases model the states of the real world across time.</span></p><p class="s39" style="padding-top: 2pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">There are possible database designs that are bad despite being lossless, dependency-preserving, and in an appropriate normal form. We showed examples of some such designs to illustrate that functional-dependency-based normalization, though highly important, is not the only aspect of good relational design.</span></p><p class="s39" style="padding-top: 2pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">In order for a database to store not only current data but also historical data, the database must also store for each such tuple the time period for which the tuple is or was valid. It then becomes necessary to deﬁne temporal functional depen- dencies to represent the idea that the functional dependency holds at any point in time but not over the entire relation. Similarly, the join operation needs to be modiﬁed so as to appropriately join only tuples with overlapping time intervals.</span></p><p class="s39" style="padding-top: 2pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">In reviewing the issues in this chapter, note that the reason we could deﬁne rigorous approaches to relational database design is that the relational data model rests on a ﬁrm mathematical foundation. That is one of the primary advantages of the relational model compared with the other data models that we have studied.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part161.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part163.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
