<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.10 Standard I/O</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007ACB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000465B4" data-uri="chapter10.xhtml#P70004970270000000000000000465B4" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007ACD" title="911" data-uri="chapter10.xhtml#P7000497027000000000000000007ACD" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">10.10 </span>Standard I/O</h1></header>
<p id="P70004970270000000000000000465B5" data-uri="chapter10.xhtml#P70004970270000000000000000465B5" class="pcalibre1 pcalibre calibre2">The C language defines a set of higher-level input and output functions, called the <i class="calibre5 pcalibre pcalibre1">standard I/O library</i>, that provides programmers with a higher-level alternative to Unix I/O. The library (<code id="P70004970270000000000000000465B6" data-uri="chapter10.xhtml#P70004970270000000000000000465B6" class="pcalibre1 calibre8 pcalibre">libc</code>) provides functions for opening and closing files (<code id="P70004970270000000000000000465B7" data-uri="chapter10.xhtml#P70004970270000000000000000465B7" class="pcalibre1 calibre8 pcalibre">fopen</code> and <code id="P70004970270000000000000000465B8" data-uri="chapter10.xhtml#P70004970270000000000000000465B8" class="pcalibre1 calibre8 pcalibre">fclose</code>), reading and writing bytes (<code id="P70004970270000000000000000465B9" data-uri="chapter10.xhtml#P70004970270000000000000000465B9" class="pcalibre1 calibre8 pcalibre">fread</code> and <code id="P70004970270000000000000000465BA" data-uri="chapter10.xhtml#P70004970270000000000000000465BA" class="pcalibre1 calibre8 pcalibre">fwrite</code>), reading and writing strings (<code id="P70004970270000000000000000465BB" data-uri="chapter10.xhtml#P70004970270000000000000000465BB" class="pcalibre1 calibre8 pcalibre">fgets</code> and <code id="P70004970270000000000000000465BC" data-uri="chapter10.xhtml#P70004970270000000000000000465BC" class="pcalibre1 calibre8 pcalibre">fputs</code>), and sophisticated formatted I/O (<code id="P70004970270000000000000000465BD" data-uri="chapter10.xhtml#P70004970270000000000000000465BD" class="pcalibre1 calibre8 pcalibre">scanf</code> and <code id="P70004970270000000000000000465BE" data-uri="chapter10.xhtml#P70004970270000000000000000465BE" class="pcalibre1 calibre8 pcalibre">printf</code>).</p>
<p id="P70004970270000000000000000465BF" data-uri="chapter10.xhtml#P70004970270000000000000000465BF" class="pcalibre1 pcalibre calibre2">The standard I/O library models an open file as a <i class="calibre5 pcalibre pcalibre1">stream</i>. To the programmer, a stream is a pointer to a structure of type <code id="P70004970270000000000000000465C0" data-uri="chapter10.xhtml#P70004970270000000000000000465C0" class="pcalibre1 calibre8 pcalibre">FILE</code>. Every ANSI C program begins with three open streams, <code id="P70004970270000000000000000465C1" data-uri="chapter10.xhtml#P70004970270000000000000000465C1" class="pcalibre1 calibre8 pcalibre">stdin, stdout</code>, and <code id="P70004970270000000000000000465C2" data-uri="chapter10.xhtml#P70004970270000000000000000465C2" class="pcalibre1 calibre8 pcalibre">stderr</code>, which correspond to standard input, standard output, and standard error, respectively:</p>
<pre id="P70004970270000000000000000465C3" data-uri="chapter10.xhtml#P70004970270000000000000000465C3" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000465C4" data-uri="chapter10.xhtml#P70004970270000000000000000465C4" class="calibre10 pcalibre pcalibre1">
#include &lt;stdio.h&gt;
extern FILE *stdin;		/* Standard input (descriptor 0) */
extern FILE *stdout;		/* Standard output (descriptor 1) */
extern FILE *stderr;		/* Standard error (descriptor 2) */
</code></pre>
<p id="P70004970270000000000000000465C5" data-uri="chapter10.xhtml#P70004970270000000000000000465C5" class="pcalibre1 pcalibre calibre2">A stream of type FILE is an abstraction for a file descriptor and a <i class="calibre5 pcalibre pcalibre1">stream buffer</i>. The purpose of the stream buffer is the same as the R<span class="smallcaps pcalibre pcalibre1">io </span>read buffer: to minimize the number of expensive Linux I/O system calls. For example, suppose we have a program that makes repeated calls to the standard I/O <code id="P70004970270000000000000000465C6" data-uri="chapter10.xhtml#P70004970270000000000000000465C6" class="pcalibre1 calibre8 pcalibre">getc</code> function, where each invocation returns the next character from a file. When <code id="P70004970270000000000000000465C7" data-uri="chapter10.xhtml#P70004970270000000000000000465C7" class="pcalibre1 calibre8 pcalibre">getc</code> is called the first time, the library fills the stream buffer with a single call to the <code id="P70004970270000000000000000465C8" data-uri="chapter10.xhtml#P70004970270000000000000000465C8" class="pcalibre1 calibre8 pcalibre">read</code> function and then returns the first byte in the buffer to the application. As long as there are unread bytes in the buffer, subsequent calls to <code id="P70004970270000000000000000465C9" data-uri="chapter10.xhtml#P70004970270000000000000000465C9" class="pcalibre1 calibre8 pcalibre">getc</code> can be served directly from the stream buffer.</p>
</section></body></html>
