<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A Solution: Breaking The Dependency</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part329.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part331.htm">下一个 &gt;</a></p><p class="s32" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">A Solution: Breaking The Dependency</p><p style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The simplest way to attack this problem is to change how forks are ac- quired by at least one of the philosophers; indeed, this is how Dijkstra himself solved the problem. Specifically, let’s assume that philosopher 4 (the highest numbered one) acquires the forks in a <i>different </i>order. The code to do so is as follows:</p><p class="s37" style="padding-top: 3pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">1  <span class="s38">void getforks() {</span></p><table style="border-collapse:collapse;margin-left:52.0199pt" cellspacing="0"><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">2</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">if (p == 4) {</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">3</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">sem_wait(forks[right(p)]);</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">4</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">sem_wait(forks[left(p)]);</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">5</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">} else {</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">6</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">sem_wait(forks[left(p)]);</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">7</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 7pt;text-align: right;">sem_wait(forks[right(p)]);</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">8</p></td><td style="width:12pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:122pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: left;">}</p></td></tr><tr style="height:8pt"><td style="width:11pt"><p class="s135" style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;line-height: 5pt;text-align: center;">9</p></td><td style="width:12pt"><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 6pt;text-align: left;">}</p></td><td style="width:122pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Because the last philosopher tries to grab right before left, there is no situation where each philosopher grabs one fork and is stuck waiting for another; the cycle of waiting is broken. Think through the ramifications of this solution, and convince yourself that it works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;text-align: left;"><span class="s37">1  </span>typedef struct <span class="s75">&nbsp;</span>Zem_t {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">2    <span class="s38">int value;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">3    <span class="s38">pthread_cond_t cond;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">4    <span class="s38">pthread_mutex_t lock;</span></p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">5  <span class="s38">} Zem_t;</span></p><p class="s37" style="padding-top: 1pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">6</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">7  <span class="s38">// only one thread can call this</span></p><p class="s38" style="padding-left: 26pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">8  </span>void Zem_init(Zem_t <span class="s39">*</span>s, int value) {</p><p class="s37" style="padding-left: 26pt;text-indent: 0pt;line-height: 7pt;text-align: left;">9    <span class="s38">s-&gt;value = value;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">10    <span class="s38">Cond_init(&amp;s-&gt;cond);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">11    <span class="s38">Mutex_init(&amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">12  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">13</p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s37">14  </span>void Zem_wait(Zem_t <span class="s39">*</span>s) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;">15    <span class="s38">Mutex_lock(&amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">16    <span class="s38">while (s-&gt;value &lt;= 0)</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">17       <span class="s38">Cond_wait(&amp;s-&gt;cond, &amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">18    <span class="s38">s-&gt;value--;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">19    <span class="s38">Mutex_unlock(&amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">20  <span class="s38">}</span></p><p class="s37" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">21</p><p class="s38" style="padding-left: 24pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span class="s37">22  </span>void Zem_post(Zem_t <span class="s39">*</span>s) {</p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;line-height: 7pt;text-align: left;">23    <span class="s38">Mutex_lock(&amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">24    <span class="s38">s-&gt;value++;</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">25    <span class="s38">Cond_signal(&amp;s-&gt;cond);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">26    <span class="s38">Mutex_unlock(&amp;s-&gt;lock);</span></p><p class="s37" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">27  <span class="s38">}</span></p><p style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Figure 31.12: <b>Implementing Zemaphores with Locks and CVs</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">There are other “famous” problems like this one, e.g., the <b>cigarette smoker’s problem </b>or the <b>sleeping barber problem</b>. Most of them are just excuses to think about concurrency; some of them have fascinating names. Look them up if you are interested in learning more, or just get- ting more practice thinking in a concurrent manner [D08].</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part329.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part331.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
