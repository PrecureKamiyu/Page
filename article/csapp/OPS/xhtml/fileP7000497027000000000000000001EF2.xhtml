<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.3 Data Formats</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000001EF2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000040153" data-uri="chapter03.xhtml#P7000497027000000000000000040153" epub:type="title"><span class="pcalibre label pcalibre1">3.3 </span>Data Formats</h1></header>
<p id="P7000497027000000000000000040154" data-uri="chapter03.xhtml#P7000497027000000000000000040154" class="pcalibre1 pcalibre calibre2">Due to its origins as a 16-bit architecture that expanded into a 32-bit one, Intel uses the term "word" to refer to a 16-bit data type. Based on this, they refer to 32-bit quantities as "double words," and 64-bit quantities as "quad words." <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000001EFD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.1</span></a> shows the x86-64 representations used for the primitive data types of C. Standard <code id="P7000497027000000000000000040155" data-uri="chapter03.xhtml#P7000497027000000000000000040155" class="pcalibre1 calibre8 pcalibre">int</code> values are stored as double words (32 bits). Pointers (shown here as char *) are stored as 8-byte quad words, as would be expected in a 64-bit machine. With x86-64, data type long is implemented with 64 bits, allowing a very wide range of values. Most of our code examples in this chapter use pointers and long data</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000001EF6" data-uri="chapter03.xhtml#P7000497027000000000000000001EF6"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000040156" data-uri="chapter03.xhtml#P7000497027000000000000000040156" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001EF8" title="178" data-uri="chapter03.xhtml#P7000497027000000000000000001EF8" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Web Aside ASM:EASM </span>Combining assembly code with C programs</h1></header>
<p id="P7000497027000000000000000040157" data-uri="chapter03.xhtml#P7000497027000000000000000040157" class="calibre13 pcalibre pcalibre1">Although a C compiler does a good job of converting the computations expressed in a program into machine code, there are some features of a machine that cannot be accessed by a C program. For example, every time an x86-64 processor executes an arithmetic or logical operation, it sets a 1-bit <i class="calibre5 pcalibre pcalibre1">condition code</i> flag, named <span class="smallcaps pcalibre pcalibre1">pf </span>(for "parity flag"), to 1 when the lower 8 bits in the resulting computation have an even number of ones and to 0 otherwise. Computing this information in C requires at least seven shifting, masking, and <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>operations (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001498.xhtml#P7000497027000000000000000001543"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">2.65</span></a>). Even though the hardware performs this computation as part of every arithmetic or logical operation, there is no way for a C program to determine the value of the <span class="smallcaps pcalibre pcalibre1">pf </span>condition code flag. This task can readily be performed by incorporating a small number of assembly-code instructions into the program.</p>
<p id="P7000497027000000000000000040158" data-uri="chapter03.xhtml#P7000497027000000000000000040158" class="calibre13 pcalibre pcalibre1">There are two ways to incorporate assembly code into C programs. First, we can write an entire function as a separate assembly-code file and let the assembler and linker combine this with code we have written in C. Second, we can use the <i class="calibre5 pcalibre pcalibre1">inline assembly</i> feature of <span class="smallcaps pcalibre pcalibre1">gcc</span>, where brief sections of assembly code can be incorporated into a C program using the <code id="P7000497027000000000000000040159" data-uri="chapter03.xhtml#P7000497027000000000000000040159" class="pcalibre1 calibre8 pcalibre">asm</code> directive. This approach has the advantage that it minimizes the amount of machine-specific code.</p>
<p id="P700049702700000000000000004015A" data-uri="chapter03.xhtml#P700049702700000000000000004015A" class="pcalibre calibre3 pcalibre1">Of course, including assembly code in a C program makes the code specific to a particular class of machines (such as x86-64), and so it should only be used when the desired feature can only be accessed in this way.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000001EFD" data-uri="chapter03.xhtml#P7000497027000000000000000001EFD">
<table id="P700049702700000000000000004015B" data-uri="chapter03.xhtml#P700049702700000000000000004015B" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004015C" data-uri="chapter03.xhtml#P700049702700000000000000004015C" class="calibre18 pcalibre pcalibre1">C declaration</th>
<th id="P700049702700000000000000004015D" data-uri="chapter03.xhtml#P700049702700000000000000004015D" class="calibre18 pcalibre pcalibre1">Intel data type</th>
<th id="P700049702700000000000000004015E" data-uri="chapter03.xhtml#P700049702700000000000000004015E" class="calibre18 pcalibre pcalibre1">Assembly-code suffix</th>
<th id="P700049702700000000000000004015F" data-uri="chapter03.xhtml#P700049702700000000000000004015F" class="calibre18 pcalibre pcalibre1">Size (bytes)</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040160" data-uri="chapter03.xhtml#P7000497027000000000000000040160" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040161" data-uri="chapter03.xhtml#P7000497027000000000000000040161" class="calibre10 pcalibre pcalibre1">char</code></td>
<td id="P7000497027000000000000000040162" data-uri="chapter03.xhtml#P7000497027000000000000000040162" class="calibre20 pcalibre pcalibre1">Byte</td>
<td id="P7000497027000000000000000040163" data-uri="chapter03.xhtml#P7000497027000000000000000040163" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040164" data-uri="chapter03.xhtml#P7000497027000000000000000040164" class="calibre10 pcalibre pcalibre1">b</code></td>
<td id="P7000497027000000000000000040165" data-uri="chapter03.xhtml#P7000497027000000000000000040165" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040166" data-uri="chapter03.xhtml#P7000497027000000000000000040166" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040167" data-uri="chapter03.xhtml#P7000497027000000000000000040167" class="calibre10 pcalibre pcalibre1">short</code></td>
<td id="P7000497027000000000000000040168" data-uri="chapter03.xhtml#P7000497027000000000000000040168" class="calibre20 pcalibre pcalibre1">Word</td>
<td id="P7000497027000000000000000040169" data-uri="chapter03.xhtml#P7000497027000000000000000040169" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004016A" data-uri="chapter03.xhtml#P700049702700000000000000004016A" class="calibre10 pcalibre pcalibre1">w</code></td>
<td id="P700049702700000000000000004016B" data-uri="chapter03.xhtml#P700049702700000000000000004016B" class="calibre20 pcalibre pcalibre1">2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004016C" data-uri="chapter03.xhtml#P700049702700000000000000004016C" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004016D" data-uri="chapter03.xhtml#P700049702700000000000000004016D" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P700049702700000000000000004016E" data-uri="chapter03.xhtml#P700049702700000000000000004016E" class="calibre20 pcalibre pcalibre1">Double word</td>
<td id="P700049702700000000000000004016F" data-uri="chapter03.xhtml#P700049702700000000000000004016F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040170" data-uri="chapter03.xhtml#P7000497027000000000000000040170" class="calibre10 pcalibre pcalibre1">l</code></td>
<td id="P7000497027000000000000000040171" data-uri="chapter03.xhtml#P7000497027000000000000000040171" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040172" data-uri="chapter03.xhtml#P7000497027000000000000000040172" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040173" data-uri="chapter03.xhtml#P7000497027000000000000000040173" class="calibre10 pcalibre pcalibre1">long</code></td>
<td id="P7000497027000000000000000040174" data-uri="chapter03.xhtml#P7000497027000000000000000040174" class="calibre20 pcalibre pcalibre1">Quad word</td>
<td id="P7000497027000000000000000040175" data-uri="chapter03.xhtml#P7000497027000000000000000040175" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040176" data-uri="chapter03.xhtml#P7000497027000000000000000040176" class="calibre10 pcalibre pcalibre1">q</code></td>
<td id="P7000497027000000000000000040177" data-uri="chapter03.xhtml#P7000497027000000000000000040177" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040178" data-uri="chapter03.xhtml#P7000497027000000000000000040178" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040179" data-uri="chapter03.xhtml#P7000497027000000000000000040179" class="calibre10 pcalibre pcalibre1">char</code> *</td>
<td id="P700049702700000000000000004017A" data-uri="chapter03.xhtml#P700049702700000000000000004017A" class="calibre20 pcalibre pcalibre1">Quad word</td>
<td id="P700049702700000000000000004017B" data-uri="chapter03.xhtml#P700049702700000000000000004017B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004017C" data-uri="chapter03.xhtml#P700049702700000000000000004017C" class="calibre10 pcalibre pcalibre1">q</code></td>
<td id="P700049702700000000000000004017D" data-uri="chapter03.xhtml#P700049702700000000000000004017D" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004017E" data-uri="chapter03.xhtml#P700049702700000000000000004017E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004017F" data-uri="chapter03.xhtml#P700049702700000000000000004017F" class="calibre10 pcalibre pcalibre1">float</code></td>
<td id="P7000497027000000000000000040180" data-uri="chapter03.xhtml#P7000497027000000000000000040180" class="calibre20 pcalibre pcalibre1">Single precision</td>
<td id="P7000497027000000000000000040181" data-uri="chapter03.xhtml#P7000497027000000000000000040181" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040182" data-uri="chapter03.xhtml#P7000497027000000000000000040182" class="calibre10 pcalibre pcalibre1">s</code></td>
<td id="P7000497027000000000000000040183" data-uri="chapter03.xhtml#P7000497027000000000000000040183" class="calibre20 pcalibre pcalibre1">4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040184" data-uri="chapter03.xhtml#P7000497027000000000000000040184" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040185" data-uri="chapter03.xhtml#P7000497027000000000000000040185" class="calibre10 pcalibre pcalibre1">double</code></td>
<td id="P7000497027000000000000000040186" data-uri="chapter03.xhtml#P7000497027000000000000000040186" class="calibre20 pcalibre pcalibre1">Double precision</td>
<td id="P7000497027000000000000000040187" data-uri="chapter03.xhtml#P7000497027000000000000000040187" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040188" data-uri="chapter03.xhtml#P7000497027000000000000000040188" class="calibre10 pcalibre pcalibre1">l</code></td>
<td id="P7000497027000000000000000040189" data-uri="chapter03.xhtml#P7000497027000000000000000040189" class="calibre20 pcalibre pcalibre1">8</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004018A" data-uri="chapter03.xhtml#P700049702700000000000000004018A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004018B" data-uri="chapter03.xhtml#P700049702700000000000000004018B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.1 </span>Sizes of C data types in x86-64.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000004018C" data-uri="chapter03.xhtml#P700049702700000000000000004018C"><p id="P700049702700000000000000004018D" data-uri="chapter03.xhtml#P700049702700000000000000004018D" class="pcalibre calibre3 pcalibre1">With a 64-bit machine, pointers are 8 bytes long.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004018E" data-uri="chapter03.xhtml#P700049702700000000000000004018E">types, and so they will operate on quad words. The x86-64 instruction set includes a full complement of instructions for bytes, words, and double words as well.</p>
<p id="P700049702700000000000000004018F" data-uri="chapter03.xhtml#P700049702700000000000000004018F" class="pcalibre1 pcalibre calibre2">Floating-point numbers come in two principal formats: single-precision (4-byte) values, corresponding to C data type <code id="P7000497027000000000000000040190" data-uri="chapter03.xhtml#P7000497027000000000000000040190" class="pcalibre1 calibre8 pcalibre">float</code>, and double-precision (8-byte) values, corresponding to C data type double. Microprocessors in the x86 family historically implemented all floating-point operations with a special 80-bit (10-byte) floating-point format (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001498.xhtml#P700049702700000000000000000167D"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">2.86</span></a>). This format can be specified in C programs using the declaration long double. We recommend against using this format, however. It is not portable to other classes of machines, and it is typically <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000001F34" title="179" data-uri="chapter03.xhtml#P7000497027000000000000000001F34" epub:type="pagebreak"></span>not implemented with the same high-performance hardware as is the case for single- and double-precision arithmetic.</p>
<p id="P7000497027000000000000000040191" data-uri="chapter03.xhtml#P7000497027000000000000000040191" class="pcalibre1 pcalibre calibre2">As the table of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000001EFD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.1</span></a> indicates, most assembly-code instructions generated by <span class="smallcaps pcalibre pcalibre1">gcc </span>have a single-character suffix denoting the size of the operand. For example, the data movement instruction has four variants: <code id="P7000497027000000000000000040192" data-uri="chapter03.xhtml#P7000497027000000000000000040192" class="pcalibre1 calibre8 pcalibre">movb</code> (move byte), <code id="P7000497027000000000000000040193" data-uri="chapter03.xhtml#P7000497027000000000000000040193" class="pcalibre1 calibre8 pcalibre">movw</code> (move word), <code id="P7000497027000000000000000040194" data-uri="chapter03.xhtml#P7000497027000000000000000040194" class="pcalibre1 calibre8 pcalibre">movl</code> (move double word), and <code id="P7000497027000000000000000040195" data-uri="chapter03.xhtml#P7000497027000000000000000040195" class="pcalibre1 calibre8 pcalibre">movq</code> (move quad word). The suffix `<code id="P7000497027000000000000000040196" data-uri="chapter03.xhtml#P7000497027000000000000000040196" class="pcalibre1 calibre8 pcalibre">l</code>' is used for double words, since 32-bit quantities are considered to be "long words." The assembly code uses the suffix `<code id="P7000497027000000000000000040197" data-uri="chapter03.xhtml#P7000497027000000000000000040197" class="pcalibre1 calibre8 pcalibre">l</code>' to denote a 4-byte integer as well as an 8-byte double-precision floating-point number. This causes no ambiguity, since floating-point code involves an entirely different set of instructions and registers.</p>
</section></body></html>
