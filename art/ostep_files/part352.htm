<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Event-based Concurrency (Advanced)</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part351.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part353.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">Event-based Concurrency (Advanced)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Thus far, we’ve written about concurrency as if the only way to build concurrent applications is to use threads. Like many things in life, this is not completely true. Specifically, a different style of concurrent pro- gramming is often used in both GUI-based applications [O96] as well as some types of internet servers [PDZ99]. This style, known as <b>event-based concurrency</b>, has become popular in some modern systems, including server-side frameworks such as <b>node.js </b>[N13], but its roots are found in C/U<span class="s7">NIX </span>systems that we’ll discuss below.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">The problem that event-based concurrency addresses is two-fold. The first is that managing concurrency correctly in multi-threaded applica- tions can be challenging; as we’ve discussed, missing locks, deadlock, and other nasty problems can arise. The second is that in a multi-threaded application, the developer has little or no control over what is scheduled at a given moment in time; rather, the programmer simply creates threads and then hopes that the underlying OS schedules them in a reasonable manner across available CPUs. Given the difficulty of building a general- purpose scheduler that works well in all cases for all workloads, some- times the OS will schedule work in a manner that is less than optimal. The crux:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">T<span class="s7">HE </span>C<span class="s7">RUX</span>:</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: center;">H<span class="s7">OW </span>T<span class="s7">O </span>B<span class="s7">UILD </span>C<span class="s7">ONCURRENT </span>S<span class="s7">ERVERS </span>W<span class="s7">ITHOUT </span>T<span class="s7">HREADS</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">How can we build a concurrent server without using threads, and thus retain control over concurrency as well as avoid some of the problems that seem to plague multi-threaded applications?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part353.htm">33.1 The Basic Idea: An Event Loop</a><a class="toc0" href="part354.htm">33.2 An Important API: select() (or poll())</a><a class="toc0" href="part355.htm">33.3 Using select()</a><a class="toc0" href="part356.htm">33.4 Why Simpler? No Locks Needed</a><a class="toc0" href="part357.htm">33.5 A Problem: Blocking System Calls</a><a class="toc0" href="part358.htm">33.6 A Solution: Asynchronous I/O</a><a class="toc0" href="part359.htm">33.7 Another Problem: State Management</a><a class="toc0" href="part360.htm">33.8 What Is Still Difficult With Events</a><a class="toc0" href="part361.htm">33.9 Summary</a><a class="toc0" href="part362.htm">References</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part351.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part353.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
