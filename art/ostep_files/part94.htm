<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Scheduling: Proportional Share</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part93.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part95.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">Scheduling: Proportional Share</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In this chapter, we’ll examine a different type of scheduler known as a <b>proportional-share </b>scheduler, also sometimes referred to as a <b>fair-share </b>scheduler. Proportional-share is based around a simple concept: instead of optimizing for turnaround or response time, a scheduler might instead try to guarantee that each job obtain a certain percentage of CPU time.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: left;">An excellent modern example of proportional-share scheduling is found in research by Waldspurger and Weihl [WW94], and is known as <b>lottery scheduling</b>; however, the idea is certainly much older [KL88]. The basic idea is quite simple: every so often, hold a lottery to determine which pro- cess should get to run next; processes that should run more often should be given more chances to win the lottery. Easy, no? Now, onto the details! But not before our crux:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: center;">C<span class="s7">RUX</span>: H<span class="s7">OW </span>T<span class="s7">O </span>S<span class="s7">HARE </span>T<span class="s7">HE </span>CPU P<span class="s7">ROPORTIONALLY</span></p><p style="padding-left: 9pt;text-indent: 11pt;line-height: 89%;text-align: justify;">How can we design a scheduler to share the CPU in a proportional manner? What are the key mechanisms for doing so? How effective are they?</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part95.htm">9.1 Basic Concept: Tickets Represent Your Share</a><a class="toc0" href="part96.htm">9.2 Ticket Mechanisms</a><a class="toc0" href="part97.htm">9.3 Implementation</a><a class="toc0" href="part98.htm">9.4 An Example</a><a class="toc0" href="part99.htm">9.5 How To Assign Tickets?</a><a class="toc0" href="part100.htm">9.6 Why Not Deterministic?</a><a class="toc0" href="part101.htm">9.7 Summary</a><a class="toc0" href="part102.htm">References</a><a class="toc0" href="part103.htm">Homework</a><a class="toc1" href="part104.htm">Questions</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part93.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part95.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
