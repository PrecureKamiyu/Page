<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.9 I/O Redirection</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007A9B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000004658A" data-uri="chapter10.xhtml#P700049702700000000000000004658A" epub:type="title"><span class="pcalibre label pcalibre1">10.9 </span>I/O Redirection</h1></header>
<p id="P700049702700000000000000004658B" data-uri="chapter10.xhtml#P700049702700000000000000004658B" class="pcalibre1 pcalibre calibre2">Linux shells provide <i class="calibre5 pcalibre pcalibre1">I/O redirection</i> operators that allow users to associate standard input and output with disk files. For example, typing</p>
<pre id="P700049702700000000000000004658C" data-uri="chapter10.xhtml#P700049702700000000000000004658C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004658D" data-uri="chapter10.xhtml#P700049702700000000000000004658D" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">ls &gt; foo.txt</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004658E" data-uri="chapter10.xhtml#P700049702700000000000000004658E">causes the shell to load and execute the <code id="P700049702700000000000000004658F" data-uri="chapter10.xhtml#P700049702700000000000000004658F" class="pcalibre1 calibre8 pcalibre">ls</code> program, with standard output redirected to disk file <code id="P7000497027000000000000000046590" data-uri="chapter10.xhtml#P7000497027000000000000000046590" class="pcalibre1 calibre8 pcalibre">foo.txt</code>. As we will see in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007E82.xhtml#P7000497027000000000000000007E82"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">11.5</span></a>, a Web server performs a similar kind of redirection when it runs a CGI program on behalf of the client. So how does I/O redirection work? One way is to use the <code id="P7000497027000000000000000046591" data-uri="chapter10.xhtml#P7000497027000000000000000046591" class="pcalibre1 calibre8 pcalibre">dup2</code> function.</p>
<pre id="P7000497027000000000000000046592" data-uri="chapter10.xhtml#P7000497027000000000000000046592" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046593" data-uri="chapter10.xhtml#P7000497027000000000000000046593" class="calibre10 pcalibre pcalibre1">
#include &lt;unistd.h&gt;
int dup2(int oldfd, int newfd);
					Returns: nonnegative descriptor if OK, âˆ’1 on error
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046594" data-uri="chapter10.xhtml#P7000497027000000000000000046594">The <code id="P7000497027000000000000000046595" data-uri="chapter10.xhtml#P7000497027000000000000000046595" class="pcalibre1 calibre8 pcalibre">dup2</code> function copies descriptor table entry <code id="P7000497027000000000000000046596" data-uri="chapter10.xhtml#P7000497027000000000000000046596" class="pcalibre1 calibre8 pcalibre">oldfd</code> to descriptor table entry <code id="P7000497027000000000000000046597" data-uri="chapter10.xhtml#P7000497027000000000000000046597" class="pcalibre1 calibre8 pcalibre">newfd</code>, overwriting the previous contents of descriptor table entry <code id="P7000497027000000000000000046598" data-uri="chapter10.xhtml#P7000497027000000000000000046598" class="pcalibre1 calibre8 pcalibre">newfd</code>. If <code id="P7000497027000000000000000046599" data-uri="chapter10.xhtml#P7000497027000000000000000046599" class="pcalibre1 calibre8 pcalibre">newfd</code> was already open, then <code id="P700049702700000000000000004659A" data-uri="chapter10.xhtml#P700049702700000000000000004659A" class="pcalibre1 calibre8 pcalibre">dup2</code> closes <code id="P700049702700000000000000004659B" data-uri="chapter10.xhtml#P700049702700000000000000004659B" class="pcalibre1 calibre8 pcalibre">newfd</code> before it copies <code id="P700049702700000000000000004659C" data-uri="chapter10.xhtml#P700049702700000000000000004659C" class="pcalibre1 calibre8 pcalibre">oldfd</code>.</p>
<p id="P700049702700000000000000004659D" data-uri="chapter10.xhtml#P700049702700000000000000004659D" class="pcalibre1 pcalibre calibre2">Suppose that before calling <code id="P700049702700000000000000004659E" data-uri="chapter10.xhtml#P700049702700000000000000004659E" class="pcalibre1 calibre8 pcalibre">dup2(4, 1)</code>, we have the situation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007A61.xhtml#P7000497027000000000000000007A6E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.12</span></a>, where descriptor 1 (standard output) corresponds to file A (say, a terminal) and descriptor 4 corresponds to file B (say, a disk file). The reference counts for A and B are both equal to 1. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007ABD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.15</span></a> shows the situation after calling <code id="P700049702700000000000000004659F" data-uri="chapter10.xhtml#P700049702700000000000000004659F" class="pcalibre1 calibre8 pcalibre">dup2(4, 1)</code>. Both descriptors now point to file B; file A has been closed and its file table and v-node table entries deleted; and the reference count for file B has been incremented. From this point on, any data written to standard output are redirected to file B.</p>
<section id="P7000497027000000000000000007AB2" data-uri="chapter10.xhtml#P7000497027000000000000000007AB2" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000465A0" data-uri="chapter10.xhtml#P70004970270000000000000000465A0" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">10.4 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000007B24.xhtml#P7000497027000000000000000007B41">915</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000465A1" data-uri="chapter10.xhtml#P70004970270000000000000000465A1">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000465A2" data-uri="chapter10.xhtml#P70004970270000000000000000465A2">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000465A3" data-uri="chapter10.xhtml#P70004970270000000000000000465A3"><p id="P70004970270000000000000000465A4" data-uri="chapter10.xhtml#P70004970270000000000000000465A4" class="pcalibre calibre3 pcalibre1">How would you use <code id="P70004970270000000000000000465A5" data-uri="chapter10.xhtml#P70004970270000000000000000465A5" class="pcalibre1 calibre8 pcalibre">dup2</code> to redirect standard input to descriptor 5?</p>
</div></li>
</ol>
</section>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000007AB9" data-uri="chapter10.xhtml#P7000497027000000000000000007AB9"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P70004970270000000000000000465A6" data-uri="chapter10.xhtml#P70004970270000000000000000465A6" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007ABB" title="910" data-uri="chapter10.xhtml#P7000497027000000000000000007ABB" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Right and left hoinkies</h1></header>
<p id="P70004970270000000000000000465A7" data-uri="chapter10.xhtml#P70004970270000000000000000465A7" class="pcalibre calibre3 pcalibre1">To avoid confusion with other bracket-type operators such as `]' and `[', we have always referred to the shell's `&gt;' operator as a "right hoinky" and the `&lt;' operator as a "left hoinky."</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007ABD" data-uri="chapter10.xhtml#P7000497027000000000000000007ABD">
<img alt="A diagram depicts arrows from descriptor table to open file table File B, which has entry refcnt=2. Arrows from File A and File B lead to separate v-node tables." id="P70004970270000000000000000465A8" data-uri="P700049702700000000000000000B7B8" src="../images/p910-1.png" class="calibre313 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000465A9" data-uri="chapter10.xhtml#P70004970270000000000000000465A9" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000465AA" data-uri="chapter10.xhtml#P70004970270000000000000000465AA" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">10.15 </span>Kernel data structures after redirecting standard output by calling <code id="P70004970270000000000000000465AB" data-uri="chapter10.xhtml#P70004970270000000000000000465AB" class="pcalibre1 calibre8 pcalibre">dup2(4, 1)</code>.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000465AC" data-uri="chapter10.xhtml#P70004970270000000000000000465AC"><p id="P70004970270000000000000000465AD" data-uri="chapter10.xhtml#P70004970270000000000000000465AD" class="pcalibre calibre3 pcalibre1">The initial situation is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007A61.xhtml#P7000497027000000000000000007A6E"><span class="pcalibre label pcalibre1">Figure </span><span class="number pcalibre pcalibre1">10.12</span></a>.</p></div></figcaption>
</figure>
<section id="P7000497027000000000000000007AC4" data-uri="chapter10.xhtml#P7000497027000000000000000007AC4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000465AE" data-uri="chapter10.xhtml#P70004970270000000000000000465AE" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">10.5 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000007B49.xhtml#P7000497027000000000000000007B6D">916</a>)</h1></header>
<p id="P70004970270000000000000000465AF" data-uri="chapter10.xhtml#P70004970270000000000000000465AF" class="pcalibre1 pcalibre calibre2">Assuming that the disk file <code id="P70004970270000000000000000465B0" data-uri="chapter10.xhtml#P70004970270000000000000000465B0" class="pcalibre1 calibre8 pcalibre">foobar.txt</code> consists of the six ASCII characters <code id="P70004970270000000000000000465B1" data-uri="chapter10.xhtml#P70004970270000000000000000465B1" class="pcalibre1 calibre8 pcalibre">foobar</code>, what is the output of the following program?</p>
<pre id="P70004970270000000000000000465B2" data-uri="chapter10.xhtml#P70004970270000000000000000465B2" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000465B3" data-uri="chapter10.xhtml#P70004970270000000000000000465B3" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main()
4	{
5		int fd1, fd2;
6		char c; 7
8		fd1 = Open("foobar.txt", O_RDONLY, 0);
9		fd2 = Open("foobar.txt", O_RDONLY, 0);
10		Read(fd2, &amp;c, 1);
11		Dup2(fd2, fd1);
12		Read(fd1, &amp;c, 1);
13		printf("c = %c\n", c);
14		exit(0);
15	}
</code></pre>
</section>
</section></body></html>
