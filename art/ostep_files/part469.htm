<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Recovery</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part468.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part470.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Recovery</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Let’s now understand how a file system can use the contents of the jour- nal to <b>recover </b>from a crash. A crash may happen at any time during this sequence of updates. If the crash happens before the transaction is writ- ten safely to the log (i.e., before Step 2 above completes), then our job is easy: the pending update is simply skipped. If the crash happens af- ter the transaction has committed to the log, but before the checkpoint is complete, the file system can <b>recover </b>the update as follows. When the system boots, the file system recovery process will scan the log and look for transactions that have committed to the disk; these transactions are thus <b>replayed </b>(in order), with the file system again attempting to write out the blocks in the transaction to their final on-disk locations. This form of logging is one of the simplest forms there is, and is called <b>redo logging</b>. By recovering the committed transactions in the journal, the file system ensures that the on-disk structures are consistent, and thus can proceed by mounting the file system and readying itself for new requests.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Note that it is fine for a crash to happen at any point during check- pointing, even after some of the updates to the final locations of the blocks have completed. In the worst case, some of these updates are simply per- formed again during recovery. Because recovery is a rare operation (only taking place after an unexpected system crash), a few redundant writes</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">are nothing to worry about<span class="s35">3</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part468.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part470.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
