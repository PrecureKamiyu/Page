<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>12.5 Synchronizing Threads with Semaphores</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000827E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000046D48" data-uri="chapter12.xhtml#P7000497027000000000000000046D48" epub:type="title"><span class="pcalibre label pcalibre1">12.5 </span>Synchronizing Threads with Semaphores</h1></header>
<p id="P7000497027000000000000000046D49" data-uri="chapter12.xhtml#P7000497027000000000000000046D49" class="pcalibre1 pcalibre calibre2">Shared variables can be convenient, but they introduce the possibility of nasty <i class="calibre5 pcalibre pcalibre1">synchronization errors</i>. Consider the <code id="P7000497027000000000000000046D4A" data-uri="chapter12.xhtml#P7000497027000000000000000046D4A" class="pcalibre1 calibre8 pcalibre">badcnt.c</code> program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008286"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.16</span></a>, which creates two threads, each of which increments a global shared counter variable called <code id="P7000497027000000000000000046D4B" data-uri="chapter12.xhtml#P7000497027000000000000000046D4B" class="pcalibre1 calibre8 pcalibre">cnt</code>.</p>
<p id="P7000497027000000000000000046D4C" data-uri="chapter12.xhtml#P7000497027000000000000000046D4C" class="pcalibre1 pcalibre calibre2">Since each thread increments the counter niters times, we expect its final value to be <code id="P7000497027000000000000000046D4D" data-uri="chapter12.xhtml#P7000497027000000000000000046D4D" class="pcalibre1 calibre8 pcalibre">2 × niters</code>. This seems quite simple and straightforward. However, when we run <code id="P7000497027000000000000000046D4E" data-uri="chapter12.xhtml#P7000497027000000000000000046D4E" class="pcalibre1 calibre8 pcalibre">badcnt.c</code> on our Linux system, we not only get wrong answers, we get different answers each time!</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008286" data-uri="chapter12.xhtml#P7000497027000000000000000008286">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008287" title="996" data-uri="chapter12.xhtml#P7000497027000000000000000008287" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046D4F" data-uri="chapter12.xhtml#P7000497027000000000000000046D4F" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/badcnt.c</i></p>
<pre id="P7000497027000000000000000046D50" data-uri="chapter12.xhtml#P7000497027000000000000000046D50" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046D51" data-uri="chapter12.xhtml#P7000497027000000000000000046D51" class="calibre10 pcalibre pcalibre1">
1	/* WARNING: This code is buggy! */
2	#include "csapp.h"
3	
4	void *thread(void *vargp); /* Thread routine prototype */
5	
6	/* Global shared variable */
7	volatile long cnt = 0; /* Counter */ 8
9	int main(int argc, char **argv)
10	{
11		long niters;
12		pthread_t tid1, tid2;
13	
14		/* Check input argument */
15		if (argc != 2) {
16			printf("usage: %s &lt;niters&gt;\n", argv[0]);
17			exit(0);
18		}
19		niters = atoi(argv[1]);
20	
21		/* Create threads and wait for them to finish */
22		Pthread_create(&amp;tid1, NULL, thread, &amp;niters);
23		Pthread_create(&amp;tid2, NULL, thread, &amp;niters);
24		Pthread_join(tid1, NULL);
25		Pthread_join(tid2, NULL);
26	
27		/* Check result */
28		if (cnt != (2 * niters))
29			printf("BOOM! cnt=%ld\n", cnt);
30		else
31			printf("OK cnt=%ld\n", cnt);
32		exit(0);
33	}
34	
35	/* Thread routine */
36	void *thread(void *vargp)
37	{
38		long i, niters = *((long *)vargp);
39	
40		for (i = 0; i &lt; niters; i++)
41			cnt++;
42	
43		return NULL;
44	}
</code></pre>
<p id="P7000497027000000000000000046D52" data-uri="chapter12.xhtml#P7000497027000000000000000046D52" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/badcnt.c</i></p>
<figcaption id="P7000497027000000000000000046D53" data-uri="chapter12.xhtml#P7000497027000000000000000046D53" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046D54" data-uri="chapter12.xhtml#P7000497027000000000000000046D54" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.16 </span><code id="P7000497027000000000000000046D55" data-uri="chapter12.xhtml#P7000497027000000000000000046D55" class="pcalibre1 calibre8 pcalibre">badcnt.c</code>: An improperly synchronized counter program.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046D56" data-uri="chapter12.xhtml#P7000497027000000000000000046D56" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008290" title="997" data-uri="chapter12.xhtml#P7000497027000000000000000008290" epub:type="pagebreak"></span></p>
<pre id="P7000497027000000000000000046D57" data-uri="chapter12.xhtml#P7000497027000000000000000046D57" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046D58" data-uri="chapter12.xhtml#P7000497027000000000000000046D58" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./badcnt 1000000</i>
BOOM! cnt=1445085
linux&gt; <i class="calibre5 pcalibre pcalibre1">./badcnt 1000000</i>
BOOM! cnt=1915220
linux&gt; <i class="calibre5 pcalibre pcalibre1">./badcnt 1000000</i>
BOOM! cnt=1404746
</code></pre>
<p id="P7000497027000000000000000046D59" data-uri="chapter12.xhtml#P7000497027000000000000000046D59" class="pcalibre1 pcalibre calibre2">So what went wrong? To understand the problem clearly, we need to study the assembly code for the counter loop (lines 40−41), as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000082A5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.17</span></a>. We will find it helpful to partition the loop code for thread <var class="calibre5 pcalibre pcalibre1">i</var> into five parts:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046D5A" data-uri="chapter12.xhtml#P7000497027000000000000000046D5A">
<li id="P7000497027000000000000000046D5B" data-uri="chapter12.xhtml#P7000497027000000000000000046D5B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D5C" data-uri="chapter12.xhtml#P7000497027000000000000000046D5C" class="calibre13 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">H<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>: The block of instructions at the head of the loop</p></li>
<li id="P7000497027000000000000000046D5D" data-uri="chapter12.xhtml#P7000497027000000000000000046D5D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D5E" data-uri="chapter12.xhtml#P7000497027000000000000000046D5E" class="calibre13 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">L<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>: The instruction that loads the shared variable <code id="P7000497027000000000000000046D5F" data-uri="chapter12.xhtml#P7000497027000000000000000046D5F" class="pcalibre1 calibre8 pcalibre">cnt</code> into the accumulator register %rdx<sub class="pcalibre1 calibre47 pcalibre"><var class="calibre5 pcalibre pcalibre1">i</var></sub>, where %rdx<sub class="pcalibre1 calibre47 pcalibre"><var class="calibre5 pcalibre pcalibre1">i</var></sub> denotes the value of register %rdx in thread <var class="calibre5 pcalibre pcalibre1">i</var></p></li>
<li id="P7000497027000000000000000046D60" data-uri="chapter12.xhtml#P7000497027000000000000000046D60" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D61" data-uri="chapter12.xhtml#P7000497027000000000000000046D61" class="calibre13 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">U<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>: The instruction that updates (increments) %rdx<sub class="pcalibre1 calibre47 pcalibre"><var class="calibre5 pcalibre pcalibre1">i</var></sub></p></li>
<li id="P7000497027000000000000000046D62" data-uri="chapter12.xhtml#P7000497027000000000000000046D62" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D63" data-uri="chapter12.xhtml#P7000497027000000000000000046D63" class="calibre13 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">S<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>: The instruction that stores the updated value of <code id="P7000497027000000000000000046D64" data-uri="chapter12.xhtml#P7000497027000000000000000046D64" class="pcalibre1 calibre8 pcalibre">%rdx<sub class="calibre59 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">i</var></sub></code> back to the shared variable <code id="P7000497027000000000000000046D65" data-uri="chapter12.xhtml#P7000497027000000000000000046D65" class="pcalibre1 calibre8 pcalibre">cnt</code></p></li>
<li id="P7000497027000000000000000046D66" data-uri="chapter12.xhtml#P7000497027000000000000000046D66" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D67" data-uri="chapter12.xhtml#P7000497027000000000000000046D67" class="calibre13 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">T<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>: The block of instructions at the tail of the loop</p></li>
</ul>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046D68" data-uri="chapter12.xhtml#P7000497027000000000000000046D68">Notice that the head and tail manipulate only local stack variables, while <i class="calibre5 pcalibre pcalibre1">L<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>, <i class="calibre5 pcalibre pcalibre1">U<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>, and <i class="calibre5 pcalibre pcalibre1">S<sub class="pcalibre1 calibre47 pcalibre">i</sub></i> manipulate the contents of the shared counter variable.</p>
<p id="P7000497027000000000000000046D69" data-uri="chapter12.xhtml#P7000497027000000000000000046D69" class="pcalibre1 pcalibre calibre2">When the two peer threads in <code id="P7000497027000000000000000046D6A" data-uri="chapter12.xhtml#P7000497027000000000000000046D6A" class="pcalibre1 calibre8 pcalibre">badcnt.c</code> run concurrently on a uniprocessor, the machine instructions are completed one after the other in some order. Thus, each concurrent execution defines some total ordering (or interleaving) of the instructions in the two threads. Unfortunately, some of these orderings will produce correct results, but others will not.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000082A5" data-uri="chapter12.xhtml#P70004970270000000000000000082A5">
<img alt="A diagram shows asm code for thread i." id="P7000497027000000000000000046D6B" data-uri="P700049702700000000000000000B7D1" src="../images/p997-1.png" class="calibre336 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046D6C" data-uri="chapter12.xhtml#P7000497027000000000000000046D6C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046D6D" data-uri="chapter12.xhtml#P7000497027000000000000000046D6D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.17 </span>Assembly code for the counter loop (lines 40−41) in <code id="P7000497027000000000000000046D6E" data-uri="chapter12.xhtml#P7000497027000000000000000046D6E" class="pcalibre1 calibre8 pcalibre">badcnt.c.</code></h1></header>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000270DD" data-uri="chapter12.xhtml#P70004970270000000000000000270DD">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046D6F" data-uri="chapter12.xhtml#P7000497027000000000000000046D6F" class="pcalibre1 pcalibre calibre2">A diagram shows C code for thread I leading to asm code for thread i. The c code reads: for (i = 0; i &lt; niters; i++) cnt++;. The asm code of thread i is divided into three parts:</p>
<ul id="P7000497027000000000000000046D70" data-uri="chapter12.xhtml#P7000497027000000000000000046D70" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000046D71" data-uri="chapter12.xhtml#P7000497027000000000000000046D71" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D72" data-uri="chapter12.xhtml#P7000497027000000000000000046D72" class="pcalibre calibre3 pcalibre1">H<sub class="pcalibre1 calibre47 pcalibre">i</sub>: Head:</p>
<ul id="P7000497027000000000000000046D73" data-uri="chapter12.xhtml#P7000497027000000000000000046D73" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046D74" data-uri="chapter12.xhtml#P7000497027000000000000000046D74" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D75" data-uri="chapter12.xhtml#P7000497027000000000000000046D75" class="pcalibre calibre3 pcalibre1">movq (%rdi), %rcx</p></li>
<li id="P7000497027000000000000000046D76" data-uri="chapter12.xhtml#P7000497027000000000000000046D76" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D77" data-uri="chapter12.xhtml#P7000497027000000000000000046D77" class="pcalibre calibre3 pcalibre1">testq %rcx, %rcx</p></li>
<li id="P7000497027000000000000000046D78" data-uri="chapter12.xhtml#P7000497027000000000000000046D78" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D79" data-uri="chapter12.xhtml#P7000497027000000000000000046D79" class="pcalibre calibre3 pcalibre1">jle .L2</p></li>
<li id="P7000497027000000000000000046D7A" data-uri="chapter12.xhtml#P7000497027000000000000000046D7A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D7B" data-uri="chapter12.xhtml#P7000497027000000000000000046D7B" class="pcalibre calibre3 pcalibre1">movl $0, %eax</p></li>
</ul></li>
<li id="P7000497027000000000000000046D7C" data-uri="chapter12.xhtml#P7000497027000000000000000046D7C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D7D" data-uri="chapter12.xhtml#P7000497027000000000000000046D7D" class="pcalibre calibre3 pcalibre1">L<sub class="pcalibre1 calibre47 pcalibre">i</sub>: Load cnt, U<sub class="pcalibre1 calibre47 pcalibre">i</sub>: Update cnt, S<sub class="pcalibre1 calibre47 pcalibre">i</sub>: Store cnt:</p>
<ul id="P7000497027000000000000000046D7E" data-uri="chapter12.xhtml#P7000497027000000000000000046D7E" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046D7F" data-uri="chapter12.xhtml#P7000497027000000000000000046D7F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D80" data-uri="chapter12.xhtml#P7000497027000000000000000046D80" class="pcalibre calibre3 pcalibre1">.L3:</p>
<ul id="P7000497027000000000000000046D81" data-uri="chapter12.xhtml#P7000497027000000000000000046D81" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000046D82" data-uri="chapter12.xhtml#P7000497027000000000000000046D82" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D83" data-uri="chapter12.xhtml#P7000497027000000000000000046D83" class="pcalibre calibre3 pcalibre1">movq cnt(%rip), %rdx</p></li>
<li id="P7000497027000000000000000046D84" data-uri="chapter12.xhtml#P7000497027000000000000000046D84" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D85" data-uri="chapter12.xhtml#P7000497027000000000000000046D85" class="pcalibre calibre3 pcalibre1">addq %eax</p></li>
<li id="P7000497027000000000000000046D86" data-uri="chapter12.xhtml#P7000497027000000000000000046D86" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D87" data-uri="chapter12.xhtml#P7000497027000000000000000046D87" class="pcalibre calibre3 pcalibre1">movq %eax, cnt(%rip)</p></li>
</ul></li>
</ul></li>
<li id="P7000497027000000000000000046D88" data-uri="chapter12.xhtml#P7000497027000000000000000046D88" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D89" data-uri="chapter12.xhtml#P7000497027000000000000000046D89" class="pcalibre calibre3 pcalibre1">T<sub class="pcalibre1 calibre47 pcalibre">i</sub>: Tail:</p>
<ul id="P7000497027000000000000000046D8A" data-uri="chapter12.xhtml#P7000497027000000000000000046D8A" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046D8B" data-uri="chapter12.xhtml#P7000497027000000000000000046D8B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D8C" data-uri="chapter12.xhtml#P7000497027000000000000000046D8C" class="pcalibre calibre3 pcalibre1">Addq $1, %rax</p></li>
<li id="P7000497027000000000000000046D8D" data-uri="chapter12.xhtml#P7000497027000000000000000046D8D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D8E" data-uri="chapter12.xhtml#P7000497027000000000000000046D8E" class="pcalibre calibre3 pcalibre1">Cmpq %rcx, %rax</p></li>
<li id="P7000497027000000000000000046D8F" data-uri="chapter12.xhtml#P7000497027000000000000000046D8F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D90" data-uri="chapter12.xhtml#P7000497027000000000000000046D90" class="pcalibre calibre3 pcalibre1">Jne .L3</p></li>
<li id="P7000497027000000000000000046D91" data-uri="chapter12.xhtml#P7000497027000000000000000046D91" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046D92" data-uri="chapter12.xhtml#P7000497027000000000000000046D92" class="pcalibre calibre3 pcalibre1">.L2:</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000082AA" data-uri="chapter12.xhtml#P70004970270000000000000000082AA">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000082AB" title="998" data-uri="chapter12.xhtml#P70004970270000000000000000082AB" epub:type="pagebreak"></span>
<table id="P7000497027000000000000000046D93" data-uri="chapter12.xhtml#P7000497027000000000000000046D93" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="6" id="P7000497027000000000000000046D94" data-uri="chapter12.xhtml#P7000497027000000000000000046D94" class="calibre18 pcalibre pcalibre1">(a) Correct ordering</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046D95" data-uri="chapter12.xhtml#P7000497027000000000000000046D95" class="calibre18 pcalibre pcalibre1">Step</th>
<th id="P7000497027000000000000000046D96" data-uri="chapter12.xhtml#P7000497027000000000000000046D96" class="calibre18 pcalibre pcalibre1">Thread</th>
<th id="P7000497027000000000000000046D97" data-uri="chapter12.xhtml#P7000497027000000000000000046D97" class="calibre18 pcalibre pcalibre1">Instr.</th>
<th id="P7000497027000000000000000046D98" data-uri="chapter12.xhtml#P7000497027000000000000000046D98" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046D99" data-uri="chapter12.xhtml#P7000497027000000000000000046D99" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">1</sub></code></th>
<th id="P7000497027000000000000000046D9A" data-uri="chapter12.xhtml#P7000497027000000000000000046D9A" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046D9B" data-uri="chapter12.xhtml#P7000497027000000000000000046D9B" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">2</sub></code></th>
<th id="P7000497027000000000000000046D9C" data-uri="chapter12.xhtml#P7000497027000000000000000046D9C" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046D9D" data-uri="chapter12.xhtml#P7000497027000000000000000046D9D" class="calibre10 pcalibre pcalibre1">cnt</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046D9E" data-uri="chapter12.xhtml#P7000497027000000000000000046D9E" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046D9F" data-uri="chapter12.xhtml#P7000497027000000000000000046D9F" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DA0" data-uri="chapter12.xhtml#P7000497027000000000000000046DA0" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DA1" data-uri="chapter12.xhtml#P7000497027000000000000000046DA1" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DA2" data-uri="chapter12.xhtml#P7000497027000000000000000046DA2" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DA3" data-uri="chapter12.xhtml#P7000497027000000000000000046DA3" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DA4" data-uri="chapter12.xhtml#P7000497027000000000000000046DA4" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DA5" data-uri="chapter12.xhtml#P7000497027000000000000000046DA5" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DA6" data-uri="chapter12.xhtml#P7000497027000000000000000046DA6" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DA7" data-uri="chapter12.xhtml#P7000497027000000000000000046DA7" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P7000497027000000000000000046DA8" data-uri="chapter12.xhtml#P7000497027000000000000000046DA8" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DA9" data-uri="chapter12.xhtml#P7000497027000000000000000046DA9" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DAA" data-uri="chapter12.xhtml#P7000497027000000000000000046DAA" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P7000497027000000000000000046DAB" data-uri="chapter12.xhtml#P7000497027000000000000000046DAB" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DAC" data-uri="chapter12.xhtml#P7000497027000000000000000046DAC" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DAD" data-uri="chapter12.xhtml#P7000497027000000000000000046DAD" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DAE" data-uri="chapter12.xhtml#P7000497027000000000000000046DAE" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DAF" data-uri="chapter12.xhtml#P7000497027000000000000000046DAF" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DB0" data-uri="chapter12.xhtml#P7000497027000000000000000046DB0" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046DB1" data-uri="chapter12.xhtml#P7000497027000000000000000046DB1" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DB2" data-uri="chapter12.xhtml#P7000497027000000000000000046DB2" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DB3" data-uri="chapter12.xhtml#P7000497027000000000000000046DB3" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DB4" data-uri="chapter12.xhtml#P7000497027000000000000000046DB4" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DB5" data-uri="chapter12.xhtml#P7000497027000000000000000046DB5" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DB6" data-uri="chapter12.xhtml#P7000497027000000000000000046DB6" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P7000497027000000000000000046DB7" data-uri="chapter12.xhtml#P7000497027000000000000000046DB7" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DB8" data-uri="chapter12.xhtml#P7000497027000000000000000046DB8" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DB9" data-uri="chapter12.xhtml#P7000497027000000000000000046DB9" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DBA" data-uri="chapter12.xhtml#P7000497027000000000000000046DBA" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DBB" data-uri="chapter12.xhtml#P7000497027000000000000000046DBB" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DBC" data-uri="chapter12.xhtml#P7000497027000000000000000046DBC" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P7000497027000000000000000046DBD" data-uri="chapter12.xhtml#P7000497027000000000000000046DBD" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DBE" data-uri="chapter12.xhtml#P7000497027000000000000000046DBE" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DBF" data-uri="chapter12.xhtml#P7000497027000000000000000046DBF" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DC0" data-uri="chapter12.xhtml#P7000497027000000000000000046DC0" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DC1" data-uri="chapter12.xhtml#P7000497027000000000000000046DC1" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DC2" data-uri="chapter12.xhtml#P7000497027000000000000000046DC2" class="calibre20 pcalibre pcalibre1">7</td>
<td id="P7000497027000000000000000046DC3" data-uri="chapter12.xhtml#P7000497027000000000000000046DC3" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DC4" data-uri="chapter12.xhtml#P7000497027000000000000000046DC4" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DC5" data-uri="chapter12.xhtml#P7000497027000000000000000046DC5" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DC6" data-uri="chapter12.xhtml#P7000497027000000000000000046DC6" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DC7" data-uri="chapter12.xhtml#P7000497027000000000000000046DC7" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DC8" data-uri="chapter12.xhtml#P7000497027000000000000000046DC8" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000046DC9" data-uri="chapter12.xhtml#P7000497027000000000000000046DC9" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DCA" data-uri="chapter12.xhtml#P7000497027000000000000000046DCA" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DCB" data-uri="chapter12.xhtml#P7000497027000000000000000046DCB" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DCC" data-uri="chapter12.xhtml#P7000497027000000000000000046DCC" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DCD" data-uri="chapter12.xhtml#P7000497027000000000000000046DCD" class="calibre20 pcalibre pcalibre1">2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DCE" data-uri="chapter12.xhtml#P7000497027000000000000000046DCE" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P7000497027000000000000000046DCF" data-uri="chapter12.xhtml#P7000497027000000000000000046DCF" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DD0" data-uri="chapter12.xhtml#P7000497027000000000000000046DD0" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DD1" data-uri="chapter12.xhtml#P7000497027000000000000000046DD1" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DD2" data-uri="chapter12.xhtml#P7000497027000000000000000046DD2" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DD3" data-uri="chapter12.xhtml#P7000497027000000000000000046DD3" class="calibre20 pcalibre pcalibre1">2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DD4" data-uri="chapter12.xhtml#P7000497027000000000000000046DD4" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P7000497027000000000000000046DD5" data-uri="chapter12.xhtml#P7000497027000000000000000046DD5" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DD6" data-uri="chapter12.xhtml#P7000497027000000000000000046DD6" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DD7" data-uri="chapter12.xhtml#P7000497027000000000000000046DD7" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DD8" data-uri="chapter12.xhtml#P7000497027000000000000000046DD8" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DD9" data-uri="chapter12.xhtml#P7000497027000000000000000046DD9" class="calibre20 pcalibre pcalibre1">2</td>
</tr>
</tbody>
</table>
<table id="P7000497027000000000000000046DDA" data-uri="chapter12.xhtml#P7000497027000000000000000046DDA" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th colspan="6" id="P7000497027000000000000000046DDB" data-uri="chapter12.xhtml#P7000497027000000000000000046DDB" class="calibre18 pcalibre pcalibre1">(b) Incorrect ordering</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046DDC" data-uri="chapter12.xhtml#P7000497027000000000000000046DDC" class="calibre18 pcalibre pcalibre1">Step</th>
<th id="P7000497027000000000000000046DDD" data-uri="chapter12.xhtml#P7000497027000000000000000046DDD" class="calibre18 pcalibre pcalibre1">Thread</th>
<th id="P7000497027000000000000000046DDE" data-uri="chapter12.xhtml#P7000497027000000000000000046DDE" class="calibre18 pcalibre pcalibre1">Instr.</th>
<th id="P7000497027000000000000000046DDF" data-uri="chapter12.xhtml#P7000497027000000000000000046DDF" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046DE0" data-uri="chapter12.xhtml#P7000497027000000000000000046DE0" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">1</sub></code></th>
<th id="P7000497027000000000000000046DE1" data-uri="chapter12.xhtml#P7000497027000000000000000046DE1" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046DE2" data-uri="chapter12.xhtml#P7000497027000000000000000046DE2" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">2</sub></code></th>
<th id="P7000497027000000000000000046DE3" data-uri="chapter12.xhtml#P7000497027000000000000000046DE3" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046DE4" data-uri="chapter12.xhtml#P7000497027000000000000000046DE4" class="calibre10 pcalibre pcalibre1">cnt</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DE5" data-uri="chapter12.xhtml#P7000497027000000000000000046DE5" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DE6" data-uri="chapter12.xhtml#P7000497027000000000000000046DE6" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DE7" data-uri="chapter12.xhtml#P7000497027000000000000000046DE7" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DE8" data-uri="chapter12.xhtml#P7000497027000000000000000046DE8" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DE9" data-uri="chapter12.xhtml#P7000497027000000000000000046DE9" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DEA" data-uri="chapter12.xhtml#P7000497027000000000000000046DEA" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DEB" data-uri="chapter12.xhtml#P7000497027000000000000000046DEB" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DEC" data-uri="chapter12.xhtml#P7000497027000000000000000046DEC" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DED" data-uri="chapter12.xhtml#P7000497027000000000000000046DED" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DEE" data-uri="chapter12.xhtml#P7000497027000000000000000046DEE" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P7000497027000000000000000046DEF" data-uri="chapter12.xhtml#P7000497027000000000000000046DEF" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DF0" data-uri="chapter12.xhtml#P7000497027000000000000000046DF0" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DF1" data-uri="chapter12.xhtml#P7000497027000000000000000046DF1" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P7000497027000000000000000046DF2" data-uri="chapter12.xhtml#P7000497027000000000000000046DF2" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DF3" data-uri="chapter12.xhtml#P7000497027000000000000000046DF3" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046DF4" data-uri="chapter12.xhtml#P7000497027000000000000000046DF4" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046DF5" data-uri="chapter12.xhtml#P7000497027000000000000000046DF5" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DF6" data-uri="chapter12.xhtml#P7000497027000000000000000046DF6" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DF7" data-uri="chapter12.xhtml#P7000497027000000000000000046DF7" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046DF8" data-uri="chapter12.xhtml#P7000497027000000000000000046DF8" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DF9" data-uri="chapter12.xhtml#P7000497027000000000000000046DF9" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046DFA" data-uri="chapter12.xhtml#P7000497027000000000000000046DFA" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DFB" data-uri="chapter12.xhtml#P7000497027000000000000000046DFB" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046DFC" data-uri="chapter12.xhtml#P7000497027000000000000000046DFC" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046DFD" data-uri="chapter12.xhtml#P7000497027000000000000000046DFD" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P7000497027000000000000000046DFE" data-uri="chapter12.xhtml#P7000497027000000000000000046DFE" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046DFF" data-uri="chapter12.xhtml#P7000497027000000000000000046DFF" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E00" data-uri="chapter12.xhtml#P7000497027000000000000000046E00" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E01" data-uri="chapter12.xhtml#P7000497027000000000000000046E01" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P7000497027000000000000000046E02" data-uri="chapter12.xhtml#P7000497027000000000000000046E02" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E03" data-uri="chapter12.xhtml#P7000497027000000000000000046E03" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P7000497027000000000000000046E04" data-uri="chapter12.xhtml#P7000497027000000000000000046E04" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E05" data-uri="chapter12.xhtml#P7000497027000000000000000046E05" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E06" data-uri="chapter12.xhtml#P7000497027000000000000000046E06" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E07" data-uri="chapter12.xhtml#P7000497027000000000000000046E07" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E08" data-uri="chapter12.xhtml#P7000497027000000000000000046E08" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E09" data-uri="chapter12.xhtml#P7000497027000000000000000046E09" class="calibre20 pcalibre pcalibre1">7</td>
<td id="P7000497027000000000000000046E0A" data-uri="chapter12.xhtml#P7000497027000000000000000046E0A" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E0B" data-uri="chapter12.xhtml#P7000497027000000000000000046E0B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E0C" data-uri="chapter12.xhtml#P7000497027000000000000000046E0C" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E0D" data-uri="chapter12.xhtml#P7000497027000000000000000046E0D" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E0E" data-uri="chapter12.xhtml#P7000497027000000000000000046E0E" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E0F" data-uri="chapter12.xhtml#P7000497027000000000000000046E0F" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000046E10" data-uri="chapter12.xhtml#P7000497027000000000000000046E10" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E11" data-uri="chapter12.xhtml#P7000497027000000000000000046E11" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E12" data-uri="chapter12.xhtml#P7000497027000000000000000046E12" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E13" data-uri="chapter12.xhtml#P7000497027000000000000000046E13" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E14" data-uri="chapter12.xhtml#P7000497027000000000000000046E14" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E15" data-uri="chapter12.xhtml#P7000497027000000000000000046E15" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P7000497027000000000000000046E16" data-uri="chapter12.xhtml#P7000497027000000000000000046E16" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E17" data-uri="chapter12.xhtml#P7000497027000000000000000046E17" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E18" data-uri="chapter12.xhtml#P7000497027000000000000000046E18" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E19" data-uri="chapter12.xhtml#P7000497027000000000000000046E19" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E1A" data-uri="chapter12.xhtml#P7000497027000000000000000046E1A" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E1B" data-uri="chapter12.xhtml#P7000497027000000000000000046E1B" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P7000497027000000000000000046E1C" data-uri="chapter12.xhtml#P7000497027000000000000000046E1C" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E1D" data-uri="chapter12.xhtml#P7000497027000000000000000046E1D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E1E" data-uri="chapter12.xhtml#P7000497027000000000000000046E1E" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E1F" data-uri="chapter12.xhtml#P7000497027000000000000000046E1F" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E20" data-uri="chapter12.xhtml#P7000497027000000000000000046E20" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000046E21" data-uri="chapter12.xhtml#P7000497027000000000000000046E21" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046E22" data-uri="chapter12.xhtml#P7000497027000000000000000046E22" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.18 </span>Instruction orderings for the first loop iteration in <code id="P7000497027000000000000000046E23" data-uri="chapter12.xhtml#P7000497027000000000000000046E23" class="pcalibre1 calibre8 pcalibre">badcnt.c.</code></h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046E24" data-uri="chapter12.xhtml#P7000497027000000000000000046E24" class="pcalibre1 pcalibre calibre2">Here is the crucial point: <i class="calibre5 pcalibre pcalibre1">In general, there is no way for you to predict whether the operating system will choose a correct ordering for your threads.</i> For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000082AA"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.18(a)</span></a> shows the step-by-step operation of a correct instruction ordering. After each thread has updated the shared variable cnt, its value in memory is 2, which is the expected result.</p>
<p id="P7000497027000000000000000046E25" data-uri="chapter12.xhtml#P7000497027000000000000000046E25" class="pcalibre1 pcalibre calibre2">Ontheother hand, the ordering in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000082AA"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.18(b)</span></a> produces an incorrect value for <code id="P7000497027000000000000000046E26" data-uri="chapter12.xhtml#P7000497027000000000000000046E26" class="pcalibre1 calibre8 pcalibre">cnt</code>. The problem occurs because thread 2 loads <code id="P7000497027000000000000000046E27" data-uri="chapter12.xhtml#P7000497027000000000000000046E27" class="pcalibre1 calibre8 pcalibre">cnt</code> in step 5, after thread 1 loads <code id="P7000497027000000000000000046E28" data-uri="chapter12.xhtml#P7000497027000000000000000046E28" class="pcalibre1 calibre8 pcalibre">cnt</code>in step 2 but before thread 1 stores its updated value in step 6. Thus, each thread ends up storing an updated counter value of 1. We can clarify these notions of correct and incorrect instruction orderings with the help of a device known as a <i class="calibre5 pcalibre pcalibre1">progress graph</i>, which we introduce in the next section.</p>
<section id="P7000497027000000000000000008342" data-uri="chapter12.xhtml#P7000497027000000000000000008342" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046E29" data-uri="chapter12.xhtml#P7000497027000000000000000046E29" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.7 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000875E.xhtml#P700049702700000000000000000877A">1037</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046E2A" data-uri="chapter12.xhtml#P7000497027000000000000000046E2A">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046E2B" data-uri="chapter12.xhtml#P7000497027000000000000000046E2B">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046E2C" data-uri="chapter12.xhtml#P7000497027000000000000000046E2C"><p id="P7000497027000000000000000046E2D" data-uri="chapter12.xhtml#P7000497027000000000000000046E2D" class="pcalibre calibre3 pcalibre1">Complete the table for the following instruction ordering of <code id="P7000497027000000000000000046E2E" data-uri="chapter12.xhtml#P7000497027000000000000000046E2E" class="pcalibre1 calibre8 pcalibre">badcnt.c</code>:</p>
<table id="P7000497027000000000000000046E2F" data-uri="chapter12.xhtml#P7000497027000000000000000046E2F" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046E30" data-uri="chapter12.xhtml#P7000497027000000000000000046E30" class="calibre18 pcalibre pcalibre1">Step</th>
<th id="P7000497027000000000000000046E31" data-uri="chapter12.xhtml#P7000497027000000000000000046E31" class="calibre18 pcalibre pcalibre1">Thread</th>
<th id="P7000497027000000000000000046E32" data-uri="chapter12.xhtml#P7000497027000000000000000046E32" class="calibre18 pcalibre pcalibre1">Instr.</th>
<th id="P7000497027000000000000000046E33" data-uri="chapter12.xhtml#P7000497027000000000000000046E33" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E34" data-uri="chapter12.xhtml#P7000497027000000000000000046E34" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">1</sub></code></th>
<th id="P7000497027000000000000000046E35" data-uri="chapter12.xhtml#P7000497027000000000000000046E35" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E36" data-uri="chapter12.xhtml#P7000497027000000000000000046E36" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">2</sub></code></th>
<th id="P7000497027000000000000000046E37" data-uri="chapter12.xhtml#P7000497027000000000000000046E37" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E38" data-uri="chapter12.xhtml#P7000497027000000000000000046E38" class="calibre10 pcalibre pcalibre1">cnt</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E39" data-uri="chapter12.xhtml#P7000497027000000000000000046E39" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E3A" data-uri="chapter12.xhtml#P7000497027000000000000000046E3A" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E3B" data-uri="chapter12.xhtml#P7000497027000000000000000046E3B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E3C" data-uri="chapter12.xhtml#P7000497027000000000000000046E3C" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E3D" data-uri="chapter12.xhtml#P7000497027000000000000000046E3D" class="calibre20 pcalibre pcalibre1">—</td>
<td id="P7000497027000000000000000046E3E" data-uri="chapter12.xhtml#P7000497027000000000000000046E3E" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E3F" data-uri="chapter12.xhtml#P7000497027000000000000000046E3F" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E40" data-uri="chapter12.xhtml#P7000497027000000000000000046E40" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E41" data-uri="chapter12.xhtml#P7000497027000000000000000046E41" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E42" data-uri="chapter12.xhtml#P7000497027000000000000000046E42" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E43" data-uri="chapter12.xhtml#P7000497027000000000000000046E43" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E44" data-uri="chapter12.xhtml#P7000497027000000000000000046E44" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E45" data-uri="chapter12.xhtml#P7000497027000000000000000046E45" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P7000497027000000000000000046E46" data-uri="chapter12.xhtml#P7000497027000000000000000046E46" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E47" data-uri="chapter12.xhtml#P7000497027000000000000000046E47" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E48" data-uri="chapter12.xhtml#P7000497027000000000000000046E48" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E49" data-uri="chapter12.xhtml#P7000497027000000000000000046E49" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E4A" data-uri="chapter12.xhtml#P7000497027000000000000000046E4A" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E4B" data-uri="chapter12.xhtml#P7000497027000000000000000046E4B" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000046E4C" data-uri="chapter12.xhtml#P7000497027000000000000000046E4C" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E4D" data-uri="chapter12.xhtml#P7000497027000000000000000046E4D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">L</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E4E" data-uri="chapter12.xhtml#P7000497027000000000000000046E4E" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E4F" data-uri="chapter12.xhtml#P7000497027000000000000000046E4F" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E50" data-uri="chapter12.xhtml#P7000497027000000000000000046E50" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E51" data-uri="chapter12.xhtml#P7000497027000000000000000046E51" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P7000497027000000000000000046E52" data-uri="chapter12.xhtml#P7000497027000000000000000046E52" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E53" data-uri="chapter12.xhtml#P7000497027000000000000000046E53" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E54" data-uri="chapter12.xhtml#P7000497027000000000000000046E54" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E55" data-uri="chapter12.xhtml#P7000497027000000000000000046E55" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E56" data-uri="chapter12.xhtml#P7000497027000000000000000046E56" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E57" data-uri="chapter12.xhtml#P7000497027000000000000000046E57" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P7000497027000000000000000046E58" data-uri="chapter12.xhtml#P7000497027000000000000000046E58" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E59" data-uri="chapter12.xhtml#P7000497027000000000000000046E59" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E5A" data-uri="chapter12.xhtml#P7000497027000000000000000046E5A" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E5B" data-uri="chapter12.xhtml#P7000497027000000000000000046E5B" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E5C" data-uri="chapter12.xhtml#P7000497027000000000000000046E5C" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E5D" data-uri="chapter12.xhtml#P7000497027000000000000000046E5D" class="calibre20 pcalibre pcalibre1">7</td>
<td id="P7000497027000000000000000046E5E" data-uri="chapter12.xhtml#P7000497027000000000000000046E5E" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E5F" data-uri="chapter12.xhtml#P7000497027000000000000000046E5F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">U</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E60" data-uri="chapter12.xhtml#P7000497027000000000000000046E60" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E61" data-uri="chapter12.xhtml#P7000497027000000000000000046E61" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E62" data-uri="chapter12.xhtml#P7000497027000000000000000046E62" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
</tbody>
</table>
<table id="P7000497027000000000000000046E63" data-uri="chapter12.xhtml#P7000497027000000000000000046E63" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000046E64" data-uri="chapter12.xhtml#P7000497027000000000000000046E64" class="calibre18 pcalibre pcalibre1">Step</th>
<th id="P7000497027000000000000000046E65" data-uri="chapter12.xhtml#P7000497027000000000000000046E65" class="calibre18 pcalibre pcalibre1">Thread</th>
<th id="P7000497027000000000000000046E66" data-uri="chapter12.xhtml#P7000497027000000000000000046E66" class="calibre18 pcalibre pcalibre1">Instr.</th>
<th id="P7000497027000000000000000046E67" data-uri="chapter12.xhtml#P7000497027000000000000000046E67" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E68" data-uri="chapter12.xhtml#P7000497027000000000000000046E68" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">1</sub></code></th>
<th id="P7000497027000000000000000046E69" data-uri="chapter12.xhtml#P7000497027000000000000000046E69" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E6A" data-uri="chapter12.xhtml#P7000497027000000000000000046E6A" class="calibre10 pcalibre pcalibre1">%rdx<sub class="calibre85 pcalibre pcalibre1">2</sub></code></th>
<th id="P7000497027000000000000000046E6B" data-uri="chapter12.xhtml#P7000497027000000000000000046E6B" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000046E6C" data-uri="chapter12.xhtml#P7000497027000000000000000046E6C" class="calibre10 pcalibre pcalibre1">cnt</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E6D" data-uri="chapter12.xhtml#P7000497027000000000000000046E6D" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000046E6E" data-uri="chapter12.xhtml#P7000497027000000000000000046E6E" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E6F" data-uri="chapter12.xhtml#P7000497027000000000000000046E6F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E70" data-uri="chapter12.xhtml#P7000497027000000000000000046E70" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E71" data-uri="chapter12.xhtml#P7000497027000000000000000046E71" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E72" data-uri="chapter12.xhtml#P7000497027000000000000000046E72" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E73" data-uri="chapter12.xhtml#P7000497027000000000000000046E73" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P7000497027000000000000000046E74" data-uri="chapter12.xhtml#P7000497027000000000000000046E74" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000046E75" data-uri="chapter12.xhtml#P7000497027000000000000000046E75" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000046E76" data-uri="chapter12.xhtml#P7000497027000000000000000046E76" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E77" data-uri="chapter12.xhtml#P7000497027000000000000000046E77" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E78" data-uri="chapter12.xhtml#P7000497027000000000000000046E78" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000046E79" data-uri="chapter12.xhtml#P7000497027000000000000000046E79" class="calibre20 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008394" title="999" data-uri="chapter12.xhtml#P7000497027000000000000000008394" epub:type="pagebreak"></span>10</td>
<td id="P7000497027000000000000000046E7A" data-uri="chapter12.xhtml#P7000497027000000000000000046E7A" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000046E7B" data-uri="chapter12.xhtml#P7000497027000000000000000046E7B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P7000497027000000000000000046E7C" data-uri="chapter12.xhtml#P7000497027000000000000000046E7C" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E7D" data-uri="chapter12.xhtml#P7000497027000000000000000046E7D" class="calibre20 pcalibre pcalibre1">_____</td>
<td id="P7000497027000000000000000046E7E" data-uri="chapter12.xhtml#P7000497027000000000000000046E7E" class="calibre20 pcalibre pcalibre1">_____</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000046E7F" data-uri="chapter12.xhtml#P7000497027000000000000000046E7F" class="pcalibre calibre3 pcalibre1">Does this ordering result in a correct value for <code id="P7000497027000000000000000046E80" data-uri="chapter12.xhtml#P7000497027000000000000000046E80" class="pcalibre1 calibre8 pcalibre">cnt</code>?</p>
</div></li>
</ol>
</section>
<section id="P700049702700000000000000000839C" data-uri="chapter12.xhtml#P700049702700000000000000000839C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046E81" data-uri="chapter12.xhtml#P7000497027000000000000000046E81" epub:type="title"><span class="pcalibre label pcalibre1">12.5.1 </span>Progress Graphs</h1></header>
<p id="P7000497027000000000000000046E82" data-uri="chapter12.xhtml#P7000497027000000000000000046E82" class="pcalibre1 pcalibre calibre2">A <i class="calibre5 pcalibre pcalibre1">progress graph</i> models the execution of <var class="calibre5 pcalibre pcalibre1">n</var> concurrent threads as a trajectory through an <var class="calibre5 pcalibre pcalibre1">n</var>-dimensional Cartesian space. Each axis <var class="calibre5 pcalibre pcalibre1">k</var> corresponds to the progress of thread <var class="calibre5 pcalibre pcalibre1">k</var>. Each point (<var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">I</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, . . . , <i class="calibre5 pcalibre pcalibre1">I<sub class="pcalibre1 calibre47 pcalibre">n</sub></i>) represents the state where thread <var class="calibre5 pcalibre pcalibre1">k</var> (<var class="calibre5 pcalibre pcalibre1">k</var> = 1, . . . , <var class="calibre5 pcalibre pcalibre1">n</var>) has completed instruction <i class="calibre5 pcalibre pcalibre1">I<sub class="pcalibre1 calibre47 pcalibre">k</sub></i>. The origin of the graph corresponds to the <i class="calibre5 pcalibre pcalibre1">initial state</i> where none of the threads has yet completed an instruction.</p>
<p id="P7000497027000000000000000046E83" data-uri="chapter12.xhtml#P7000497027000000000000000046E83" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083A2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.19</span></a> shows the two-dimensional progress graph for the first loop iteration of the <code id="P7000497027000000000000000046E84" data-uri="chapter12.xhtml#P7000497027000000000000000046E84" class="pcalibre1 calibre8 pcalibre">badcnt.c</code> program. The horizontal axis corresponds to thread 1, the vertical axis to thread 2. Point (<var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>) corresponds to the state where thread 1 has completed <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> and thread 2 has completed <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>.</p>
<p id="P7000497027000000000000000046E85" data-uri="chapter12.xhtml#P7000497027000000000000000046E85" class="pcalibre1 pcalibre calibre2">A progress graph models instruction execution as a <i class="calibre5 pcalibre pcalibre1">transition</i> from one state to another. A transition is represented as a directed edge from one point to an adjacent point. Legal transitions move to the right (an instruction in thread 1 completes) or up (an instruction in thread 2 completes). Two instructions cannot complete at the same time—diagonal transitions are not allowed. Programs never run backward so transitions that move down or to the left are not legal either.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000083A2" data-uri="chapter12.xhtml#P70004970270000000000000000083A2">
<img alt="A graph plots thread 2 versus thread 1." id="P7000497027000000000000000046E86" data-uri="P700049702700000000000000000B7D2" src="../images/p999-1.png" class="calibre337 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046E87" data-uri="chapter12.xhtml#P7000497027000000000000000046E87" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046E88" data-uri="chapter12.xhtml#P7000497027000000000000000046E88" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.19 </span>Progress graph for the first loop iteration of <code id="P7000497027000000000000000046E89" data-uri="chapter12.xhtml#P7000497027000000000000000046E89" class="pcalibre1 calibre8 pcalibre">badcnt.c</code>.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000271F8" data-uri="chapter12.xhtml#P70004970270000000000000000271F8">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046E8A" data-uri="chapter12.xhtml#P7000497027000000000000000046E8A" class="pcalibre calibre3 pcalibre1">A graph has Thread 1 on the horizontal axis and Thread 2 on the vertical axis, each with values for H, L, U, S, and T. Point (L<sub class="pcalibre1 calibre47 pcalibre">1</sub>, S<sub class="pcalibre1 calibre47 pcalibre">2</sub>) is aligned with thread 1 L and thread 2 S.</p>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000083A7" data-uri="chapter12.xhtml#P70004970270000000000000000083A7">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000083A8" title="1000" data-uri="chapter12.xhtml#P70004970270000000000000000083A8" epub:type="pagebreak"></span>
<img alt="A graph of a trajectory flows through thread 1 H and L and U, up to thread 2 L, right to thread 1 T, then up to thread 2 T." id="P7000497027000000000000000046E8B" data-uri="P700049702700000000000000000B694" src="../images/p1000-1.png" class="pcalibre1 calibre338 pcalibre"/>
<figcaption id="P7000497027000000000000000046E8C" data-uri="chapter12.xhtml#P7000497027000000000000000046E8C" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046E8D" data-uri="chapter12.xhtml#P7000497027000000000000000046E8D" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.20 </span>An example trajectory.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046E8E" data-uri="chapter12.xhtml#P7000497027000000000000000046E8E" class="pcalibre1 pcalibre calibre2">The execution history of a program is modeled as a <i class="calibre5 pcalibre pcalibre1">trajectory</i> through the state space. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083A7"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.20</span></a> shows the trajectory that corresponds to the following instruction ordering:</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000046E8F" data-uri="chapter12.xhtml#P7000497027000000000000000046E8F">
<m:math display="block" alttext="" data-uri="" altimg-width="317" altimg-height="19" altimg="../images/ch12-02.png"><m:mrow><m:msub><m:mi>H</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>L</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>U</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>H</m:mi><m:mn>2</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>L</m:mi><m:mn>2</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>T</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>U</m:mi><m:mn>2</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>S</m:mi><m:mn>2</m:mn></m:msub><m:mo>,</m:mo><m:mtext> </m:mtext><m:msub><m:mi>T</m:mi><m:mn>2</m:mn></m:msub></m:mrow></m:math>
</div>
<p id="P7000497027000000000000000046E90" data-uri="chapter12.xhtml#P7000497027000000000000000046E90" class="pcalibre1 pcalibre calibre2">For thread <var class="calibre5 pcalibre pcalibre1">i</var>, the instructions (<i class="calibre5 pcalibre pcalibre1">L<sub class="pcalibre1 calibre47 pcalibre">i</sub>, U<sub class="pcalibre1 calibre47 pcalibre">i</sub>, S<sub class="pcalibre1 calibre47 pcalibre">i</sub></i>) that manipulate the contents of the shared variable <code id="P7000497027000000000000000046E91" data-uri="chapter12.xhtml#P7000497027000000000000000046E91" class="pcalibre1 calibre8 pcalibre">cnt</code>constitute a <i class="calibre5 pcalibre pcalibre1">critical section</i> (with respect to shared variable <code id="P7000497027000000000000000046E92" data-uri="chapter12.xhtml#P7000497027000000000000000046E92" class="pcalibre1 calibre8 pcalibre">cnt</code>) that should not be interleaved with the critical section of the other thread. In other words, we want to ensure that each thread has <i class="calibre5 pcalibre pcalibre1">mutually exclusive access</i> to the shared variable while it is executing the instructions in its critical section. The phenomenon in general is known as <i class="calibre5 pcalibre pcalibre1">mutual exclusion</i>.</p>
<p id="P7000497027000000000000000046E93" data-uri="chapter12.xhtml#P7000497027000000000000000046E93" class="pcalibre1 pcalibre calibre2">On the progress graph, the intersection of the two critical sections defines a region of the state space known as an <i class="calibre5 pcalibre pcalibre1">unsafe region</i>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083B5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.21</span></a> shows the unsafe region for the variable <code id="P7000497027000000000000000046E94" data-uri="chapter12.xhtml#P7000497027000000000000000046E94" class="pcalibre1 calibre8 pcalibre">cnt</code>. Notice that the unsafe region abuts, but does not include, the states along its perimeter. For example, states (<var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">1</sub><i class="calibre5 pcalibre pcalibre1">, H</i><sub class="pcalibre1 calibre47 pcalibre">2</sub>) and (<var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub><i class="calibre5 pcalibre pcalibre1">, U</i><sub class="pcalibre1 calibre47 pcalibre">2</sub>) abut the unsafe region, but they are not part of it. A trajectory that skirts the unsafe region is known as a <i class="calibre5 pcalibre pcalibre1">safe trajectory</i>. Conversely, a trajectory that touches any part of the unsafe region is an <i class="calibre5 pcalibre pcalibre1">unsafe trajectory</i>. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083B5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.21</span></a> shows examples of safe and unsafe trajectories through the state space of our example <code id="P7000497027000000000000000046E95" data-uri="chapter12.xhtml#P7000497027000000000000000046E95" class="pcalibre1 calibre8 pcalibre">badcnt.c</code> program. The upper trajectory skirts the unsafe region along its left and top sides, and thus is safe. The lower trajectory crosses the unsafe region, and thus is unsafe.</p>
<p id="P7000497027000000000000000046E96" data-uri="chapter12.xhtml#P7000497027000000000000000046E96" class="pcalibre1 pcalibre calibre2">Any safe trajectory will correctly update the shared counter. In order to guarantee correct execution of our example threaded program—and indeed any concurrent program that shares global data structures—we must somehow <i class="calibre5 pcalibre pcalibre1">synchronize</i> the threads so that they always have a safe trajectory. A classic approach is based on the idea of a semaphore, which we introduce next.</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000083B5" data-uri="chapter12.xhtml#P70004970270000000000000000083B5">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000083B6" title="1001" data-uri="chapter12.xhtml#P70004970270000000000000000083B6" epub:type="pagebreak"></span>
<img alt="A graph depicts safe and unsafe trajectories." id="P7000497027000000000000000046E97" data-uri="P700049702700000000000000000B695" src="../images/p1001-1.png" class="calibre339 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046E98" data-uri="chapter12.xhtml#P7000497027000000000000000046E98" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046E99" data-uri="chapter12.xhtml#P7000497027000000000000000046E99" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.21 </span>Safe and unsafe trajectories.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046E9A" data-uri="chapter12.xhtml#P7000497027000000000000000046E9A"><p id="P7000497027000000000000000046E9B" data-uri="chapter12.xhtml#P7000497027000000000000000046E9B" class="pcalibre calibre3 pcalibre1">The intersection of the critical regions forms an unsafe region. Trajectories that skirt the unsafe region correctly update the counter variable.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002720B" data-uri="chapter12.xhtml#P700049702700000000000000002720B">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046E9C" data-uri="chapter12.xhtml#P7000497027000000000000000046E9C" class="pcalibre calibre3 pcalibre1">A graph of thread 2 versus thread 1 shows an unsafe region between H<sub class="pcalibre1 calibre47 pcalibre">1</sub> and S<sub class="pcalibre1 calibre47 pcalibre">1</sub> (critical section wrt cnt) and H<sub class="pcalibre1 calibre47 pcalibre">2</sub> and S<sub class="pcalibre1 calibre47 pcalibre">2</sub> (critical section wrt cnt). The unsafe trajectory travels horizontal to U<sub class="pcalibre1 calibre47 pcalibre">1</sub>, up into the unsafe region to L<sub class="pcalibre1 calibre47 pcalibre">2</sub>, right to T<sub class="pcalibre1 calibre47 pcalibre">1</sub>, and up to T<sub class="pcalibre1 calibre47 pcalibre">2</sub>. A safe trajectory travels vertical to U<sub class="pcalibre1 calibre47 pcalibre">2</sub>, right to H<sub class="pcalibre1 calibre47 pcalibre">1</sub>, up to S<sub class="pcalibre1 calibre47 pcalibre">2</sub>, right to U<sub class="pcalibre1 calibre47 pcalibre">1</sub>, up to T<sub class="pcalibre1 calibre47 pcalibre">2</sub>, and right to T<sub class="pcalibre1 calibre47 pcalibre">1</sub>.</p>
</details>
</figcaption>
</figure>
<section id="P70004970270000000000000000083BC" data-uri="chapter12.xhtml#P70004970270000000000000000083BC" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046E9D" data-uri="chapter12.xhtml#P7000497027000000000000000046E9D" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.8 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000875E.xhtml#P7000497027000000000000000008803">1038</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046E9E" data-uri="chapter12.xhtml#P7000497027000000000000000046E9E">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046E9F" data-uri="chapter12.xhtml#P7000497027000000000000000046E9F">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046EA0" data-uri="chapter12.xhtml#P7000497027000000000000000046EA0"><p id="P7000497027000000000000000046EA1" data-uri="chapter12.xhtml#P7000497027000000000000000046EA1" class="pcalibre calibre3 pcalibre1">Using the progress graph in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083B5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.21</span></a>, classify the following trajectories as either <i class="calibre5 pcalibre pcalibre1">safe</i> or <i class="calibre5 pcalibre pcalibre1">unsafe</i>.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000046EA2" data-uri="chapter12.xhtml#P7000497027000000000000000046EA2">
<li id="P7000497027000000000000000046EA3" data-uri="chapter12.xhtml#P7000497027000000000000000046EA3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046EA4" data-uri="chapter12.xhtml#P7000497027000000000000000046EA4" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">1</sub></p></li>
<li id="P7000497027000000000000000046EA5" data-uri="chapter12.xhtml#P7000497027000000000000000046EA5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046EA6" data-uri="chapter12.xhtml#P7000497027000000000000000046EA6" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">2</sub></p></li>
<li id="P7000497027000000000000000046EA7" data-uri="chapter12.xhtml#P7000497027000000000000000046EA7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046EA8" data-uri="chapter12.xhtml#P7000497027000000000000000046EA8" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">H</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">L</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">U</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">T</var><sub class="pcalibre1 calibre47 pcalibre">2</sub></p></li>
</ol></div></li>
</ol>
</section>
</section>
<section id="P70004970270000000000000000083C9" data-uri="chapter12.xhtml#P70004970270000000000000000083C9" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046EA9" data-uri="chapter12.xhtml#P7000497027000000000000000046EA9" epub:type="title"><span class="pcalibre label pcalibre1">12.5.2 </span>Semaphores</h1></header>
<p id="P7000497027000000000000000046EAA" data-uri="chapter12.xhtml#P7000497027000000000000000046EAA" class="pcalibre1 pcalibre calibre2">Edsger Dijkstra, a pioneer of concurrent programming, proposed a classic solution to the problem of synchronizing different execution threads based on a special type of variable called a <i class="calibre5 pcalibre pcalibre1">semaphore</i>. A semaphore, <var class="calibre5 pcalibre pcalibre1">s</var>, is a global variable with a nonnegative integer value that can only be manipulated by two special operations, called <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var>:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046EAB" data-uri="chapter12.xhtml#P7000497027000000000000000046EAB">
<li id="P7000497027000000000000000046EAC" data-uri="chapter12.xhtml#P7000497027000000000000000046EAC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046EAD" data-uri="chapter12.xhtml#P7000497027000000000000000046EAD" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">P (s:</span> If <var class="calibre5 pcalibre pcalibre1">s</var> is nonzero, then <var class="calibre5 pcalibre pcalibre1">P</var> decrements <var class="calibre5 pcalibre pcalibre1">s</var> and returns immediately. If <var class="calibre5 pcalibre pcalibre1">s</var> is zero, then suspend the thread until <var class="calibre5 pcalibre pcalibre1">s</var> becomes nonzero and the thread is restarted by a <var class="calibre5 pcalibre pcalibre1">V</var> operation. After restarting, the <var class="calibre5 pcalibre pcalibre1">P</var> operation decrements <var class="calibre5 pcalibre pcalibre1">s</var> and returns control to the caller.</p></li>
<li id="P7000497027000000000000000046EAE" data-uri="chapter12.xhtml#P7000497027000000000000000046EAE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046EAF" data-uri="chapter12.xhtml#P7000497027000000000000000046EAF" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">V (s):</span> The <var class="calibre5 pcalibre pcalibre1">V</var> operation increments <var class="calibre5 pcalibre pcalibre1">s</var> by 1. If there are any threads blocked at a <var class="calibre5 pcalibre pcalibre1">P</var> operation waiting for <var class="calibre5 pcalibre pcalibre1">s</var> to become nonzero, then the <var class="calibre5 pcalibre pcalibre1">V</var> operation restarts exactly one of these threads, which then completes its <var class="calibre5 pcalibre pcalibre1">P</var> operation by decrementing <var class="calibre5 pcalibre pcalibre1">s</var>.</p></li>
</ul>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000083D1" data-uri="chapter12.xhtml#P70004970270000000000000000083D1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046EB0" data-uri="chapter12.xhtml#P7000497027000000000000000046EB0" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000083D3" title="1002" data-uri="chapter12.xhtml#P70004970270000000000000000083D3" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Origin of the names <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var></h1></header>
<p id="P7000497027000000000000000046EB1" data-uri="chapter12.xhtml#P7000497027000000000000000046EB1" class="pcalibre calibre3 pcalibre1">Edsger Dijkstra (1930−2002) was originally from the Netherlands. The names <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> come from the Dutch words <i class="calibre5 pcalibre pcalibre1">proberen</i> (to test) and <i class="calibre5 pcalibre pcalibre1">verhogen</i> (to increment).</p>
</aside>
<p id="P7000497027000000000000000046EB2" data-uri="chapter12.xhtml#P7000497027000000000000000046EB2" class="pcalibre1 pcalibre calibre2">The test and decrement operations in <var class="calibre5 pcalibre pcalibre1">P</var> occur indivisibly, in the sense that once the semaphore <var class="calibre5 pcalibre pcalibre1">s</var> becomes nonzero, the decrement of <var class="calibre5 pcalibre pcalibre1">s</var> occurs without interruption. The increment operation in <var class="calibre5 pcalibre pcalibre1">V</var> also occurs indivisibly, in that it loads, increments, and stores the semaphore without interruption. Notice that the definition of <var class="calibre5 pcalibre pcalibre1">V</var> does <i class="calibre5 pcalibre pcalibre1">not</i> define the order in which waiting threads are restarted. The only requirement is that the <var class="calibre5 pcalibre pcalibre1">V</var> must restart exactly one waiting thread. <i class="calibre5 pcalibre pcalibre1">Thus, when several threads are waiting at a semaphore, you cannot predict which one will be restarted as a result of the V.</i></p>
<p id="P7000497027000000000000000046EB3" data-uri="chapter12.xhtml#P7000497027000000000000000046EB3" class="pcalibre1 pcalibre calibre2">The definitions of <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> ensure that a running program can never enter a state where a properly initialized semaphore has a negative value. This property, known as the <i class="calibre5 pcalibre pcalibre1">semaphore invariant</i>, provides a powerful tool for controlling the trajectories of concurrent programs, as we shall see in the next section.</p>
<p id="P7000497027000000000000000046EB4" data-uri="chapter12.xhtml#P7000497027000000000000000046EB4" class="pcalibre1 pcalibre calibre2">The Posix standard defines a variety of functions for manipulating semaphores.</p>
<pre id="P7000497027000000000000000046EB5" data-uri="chapter12.xhtml#P7000497027000000000000000046EB5" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046EB6" data-uri="chapter12.xhtml#P7000497027000000000000000046EB6" class="calibre10 pcalibre pcalibre1">
#include &lt;semaphore.h&gt;
int sem_init(sem_t *sem, 0, unsigned int value);
int sem_wait(sem_t *s); /* P(s) */
int sem_post(sem_t *s); /* V(s) */
						Returns: 0 if OK, −1 on error
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046EB7" data-uri="chapter12.xhtml#P7000497027000000000000000046EB7">The <code id="P7000497027000000000000000046EB8" data-uri="chapter12.xhtml#P7000497027000000000000000046EB8" class="pcalibre1 calibre8 pcalibre">sem_init</code> function initializes semaphore <code id="P7000497027000000000000000046EB9" data-uri="chapter12.xhtml#P7000497027000000000000000046EB9" class="pcalibre1 calibre8 pcalibre">sem</code> to <code id="P7000497027000000000000000046EBA" data-uri="chapter12.xhtml#P7000497027000000000000000046EBA" class="pcalibre1 calibre8 pcalibre">value</code>. Each semaphore must be initialized before it can be used. For our purposes, the middle argument is always 0. Programs perform <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> operations by calling the <code id="P7000497027000000000000000046EBB" data-uri="chapter12.xhtml#P7000497027000000000000000046EBB" class="pcalibre1 calibre8 pcalibre">sem_wait</code> and <code id="P7000497027000000000000000046EBC" data-uri="chapter12.xhtml#P7000497027000000000000000046EBC" class="pcalibre1 calibre8 pcalibre">sem_post</code> functions, respectively. For conciseness, we prefer to use the following equivalent <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> wrapper functions instead:</p>
<pre id="P7000497027000000000000000046EBD" data-uri="chapter12.xhtml#P7000497027000000000000000046EBD" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046EBE" data-uri="chapter12.xhtml#P7000497027000000000000000046EBE" class="calibre10 pcalibre pcalibre1">
#include "csapp.h"
void P(sem_t *s);	/* Wrapper function for sem_wait */
void V(sem_t *s);	/* Wrapper function for sem_post */
						Returns: nothing
</code></pre>
</section>
<section id="P70004970270000000000000000083E2" data-uri="chapter12.xhtml#P70004970270000000000000000083E2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046EBF" data-uri="chapter12.xhtml#P7000497027000000000000000046EBF" epub:type="title"><span class="pcalibre label pcalibre1">12.5.3 </span>Using Semaphores for Mutual Exclusion</h1></header>
<p id="P7000497027000000000000000046EC0" data-uri="chapter12.xhtml#P7000497027000000000000000046EC0" class="pcalibre1 pcalibre calibre2">Semaphores provide a convenient way to ensure mutually exclusive access to shared variables. The basic idea is to associate a semaphore <var class="calibre5 pcalibre pcalibre1">s</var>, initially 1, with</p>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000083E5" data-uri="chapter12.xhtml#P70004970270000000000000000083E5">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000083E6" title="1003" data-uri="chapter12.xhtml#P70004970270000000000000000083E6" epub:type="pagebreak"></span>
<img alt="A graph plots thread 2 versus thread 1, suing semaphores for mutual exclusion." id="P7000497027000000000000000046EC1" data-uri="P700049702700000000000000000B696" src="../images/p1003-1.png" class="calibre340 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046EC2" data-uri="chapter12.xhtml#P7000497027000000000000000046EC2" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046EC3" data-uri="chapter12.xhtml#P7000497027000000000000000046EC3" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.22 </span>Using semaphores for mutual exclusion.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046EC4" data-uri="chapter12.xhtml#P7000497027000000000000000046EC4"><p id="P7000497027000000000000000046EC5" data-uri="chapter12.xhtml#P7000497027000000000000000046EC5" class="pcalibre calibre3 pcalibre1">The infeasible states where <var class="calibre5 pcalibre pcalibre1">s</var> &lt; 0 define a <i class="calibre5 pcalibre pcalibre1">forbidden region</i> that surrounds the unsafe region and prevents any feasible trajectory from touching the unsafe region.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000027236" data-uri="chapter12.xhtml#P7000497027000000000000000027236">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046EC6" data-uri="chapter12.xhtml#P7000497027000000000000000046EC6" class="pcalibre calibre3 pcalibre1">A graph of thread 2 versus thread 1 has H, P(s), L, U, S, V(s), and T on each axis. The unsafe region is marked just within the forbidden region, with all values of negative 1 from P(s) to S<sub class="pcalibre1 calibre47 pcalibre">1</sub> and P(s) to S<sub class="pcalibre1 calibre47 pcalibre">2</sub>. All values aligned within the region are 0, and all other values are 1.</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046EC7" data-uri="chapter12.xhtml#P7000497027000000000000000046EC7">each shared variable (or related set of shared variables) and then surround the corresponding critical section with <i class="calibre5 pcalibre pcalibre1">P (s)</i> and <i class="calibre5 pcalibre pcalibre1">V (s)</i> operations.</p>
<p id="P7000497027000000000000000046EC8" data-uri="chapter12.xhtml#P7000497027000000000000000046EC8" class="pcalibre1 pcalibre calibre2">A semaphore that is used in this way to protect shared variables is called a <i class="calibre5 pcalibre pcalibre1">binary semaphore</i> because its value is always 0 or 1. Binary semaphores whose purpose is to provide mutual exclusion are often called <i class="calibre5 pcalibre pcalibre1">mutexes</i>. Performing a <var class="calibre5 pcalibre pcalibre1">P</var> operation on a mutex is called <i class="calibre5 pcalibre pcalibre1">locking</i> the mutex. Similarly, performing the <var class="calibre5 pcalibre pcalibre1">V</var> operation is called <i class="calibre5 pcalibre pcalibre1">unlocking</i> the mutex. A thread that has locked but not yet unlocked a mutex is said to be <i class="calibre5 pcalibre pcalibre1">holding</i> the mutex. A semaphore that is used as a counter for a set of available resources is called a <i class="calibre5 pcalibre pcalibre1">counting semaphore</i>.</p>
<p id="P7000497027000000000000000046EC9" data-uri="chapter12.xhtml#P7000497027000000000000000046EC9" class="pcalibre1 pcalibre calibre2">The progress graph in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000083E5"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.22</span></a> shows how we would use binary semaphores to properly synchronize our example counter program.</p>
<p id="P7000497027000000000000000046ECA" data-uri="chapter12.xhtml#P7000497027000000000000000046ECA" class="pcalibre1 pcalibre calibre2">Each state is labeled with the value of semaphore <var class="calibre5 pcalibre pcalibre1">s</var> in that state. The crucial idea is that this combination of <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> operations creates a collection of states, called a <i class="calibre5 pcalibre pcalibre1">forbidden region</i>, where <var class="calibre5 pcalibre pcalibre1">s</var> &lt; 0. Because of the semaphore invariant, no feasible trajectory can include one of the states in the forbidden region. And since the forbidden region completely encloses the unsafe region, no feasible trajectory can touch any part of the unsafe region. Thus, every feasible trajectory is safe, and regardless of the ordering of the instructions at run time, the program correctly increments the counter.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000083F0" data-uri="chapter12.xhtml#P70004970270000000000000000083F0"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046ECB" data-uri="chapter12.xhtml#P7000497027000000000000000046ECB" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000083F2" title="1004" data-uri="chapter12.xhtml#P70004970270000000000000000083F2" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Limitations of progress graphs</h1></header>
<p id="P7000497027000000000000000046ECC" data-uri="chapter12.xhtml#P7000497027000000000000000046ECC" class="pcalibre calibre3 pcalibre1">Progress graphs give us a nice way to visualize concurrent program execution on uniprocessors and to understand why we need synchronization. However, they do have limitations, particularly with respect to concurrent execution on multiprocessors, where a set of CPU/cache pairs share the same main memory. Multiprocessors behave in ways that cannot be explained by progress graphs. In particular, a multiprocessor memory system can be in a state that does not correspond to any trajectory in a progress graph. Regardless, the message remains the same: always synchronize accesses to your shared variables, regardless if you're running on a uniprocessor or a multiprocessor.</p>
</aside>
<p id="P7000497027000000000000000046ECD" data-uri="chapter12.xhtml#P7000497027000000000000000046ECD" class="pcalibre1 pcalibre calibre2">In an operational sense, the forbidden region created by the <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> operations makes it impossible for multiple threads to be executing instructions in the enclosed critical region at any point in time. In other words, the semaphore operations ensure mutually exclusive access to the critical region.</p>
<p id="P7000497027000000000000000046ECE" data-uri="chapter12.xhtml#P7000497027000000000000000046ECE" class="pcalibre1 pcalibre calibre2">Putting it all together, to properly synchronize the example counter program in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008286"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.16</span></a> using semaphores, we first declare a semaphore called mutex:</p>
<pre id="P7000497027000000000000000046ECF" data-uri="chapter12.xhtml#P7000497027000000000000000046ECF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046ED0" data-uri="chapter12.xhtml#P7000497027000000000000000046ED0" class="calibre10 pcalibre pcalibre1">
volatile long cnt= 0;	/* Counter */
sem_t mutex;		/* Semaphore that protects counter */
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046ED1" data-uri="chapter12.xhtml#P7000497027000000000000000046ED1">and then we initialize it to unity in the main routine:</p>
<pre id="P7000497027000000000000000046ED2" data-uri="chapter12.xhtml#P7000497027000000000000000046ED2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046ED3" data-uri="chapter12.xhtml#P7000497027000000000000000046ED3" class="calibre10 pcalibre pcalibre1">Sem_init(&amp;mutex, 0, 1); /* mutex = 1 */</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046ED4" data-uri="chapter12.xhtml#P7000497027000000000000000046ED4">Finally, we protect the update of the shared <code id="P7000497027000000000000000046ED5" data-uri="chapter12.xhtml#P7000497027000000000000000046ED5" class="pcalibre1 calibre8 pcalibre">cnt</code>variable in the thread routine by surrounding it with	<b class="calibre4 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">P</var></b> and	<b class="calibre4 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">V</var></b> operations:</p>
<pre id="P7000497027000000000000000046ED6" data-uri="chapter12.xhtml#P7000497027000000000000000046ED6" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046ED7" data-uri="chapter12.xhtml#P7000497027000000000000000046ED7" class="calibre10 pcalibre pcalibre1">
for (i = 0; i &lt; niters; i++) {
	P(&amp;mutex);
	cnt++;
	V(&amp;mutex);
}
</code></pre>
<p id="P7000497027000000000000000046ED8" data-uri="chapter12.xhtml#P7000497027000000000000000046ED8" class="pcalibre1 pcalibre calibre2">When we run the properly synchronized program, it now produces the correct answer each time.</p>
<pre id="P7000497027000000000000000046ED9" data-uri="chapter12.xhtml#P7000497027000000000000000046ED9" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046EDA" data-uri="chapter12.xhtml#P7000497027000000000000000046EDA" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./goodcnt 1000000</i>
OK cnt=2000000
linux&gt; <i class="calibre5 pcalibre pcalibre1">./goodcnt 1000000</i>
OK cnt=2000000
</code></pre>
</section>
<section id="P7000497027000000000000000008402" data-uri="chapter12.xhtml#P7000497027000000000000000008402" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046EDB" data-uri="chapter12.xhtml#P7000497027000000000000000046EDB" epub:type="title"><span class="pcalibre label pcalibre1">12.5.4 </span>Using Semaphores to Schedule Shared Resources</h1></header>
<p id="P7000497027000000000000000046EDC" data-uri="chapter12.xhtml#P7000497027000000000000000046EDC" class="pcalibre1 pcalibre calibre2">Another important use of semaphores, besides providing mutual exclusion, is to schedule accesses to shared resources. In this scenario, a thread uses a semaphore</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008405" data-uri="chapter12.xhtml#P7000497027000000000000000008405">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008406" title="1005" data-uri="chapter12.xhtml#P7000497027000000000000000008406" epub:type="pagebreak"></span>
<img alt="A diagram shows a producer thread leading to a bounded buffer leading to a consumer thread." id="P7000497027000000000000000046EDD" data-uri="P700049702700000000000000000B697" src="../images/p1005-1.png" class="calibre341 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046EDE" data-uri="chapter12.xhtml#P7000497027000000000000000046EDE" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046EDF" data-uri="chapter12.xhtml#P7000497027000000000000000046EDF" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.23 </span>Producer-consumer problem.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046EE0" data-uri="chapter12.xhtml#P7000497027000000000000000046EE0"><p id="P7000497027000000000000000046EE1" data-uri="chapter12.xhtml#P7000497027000000000000000046EE1" class="pcalibre calibre3 pcalibre1">The producer generates items and inserts them into a bounded buffer. The consumer removes items from the buffer and then consumes them.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046EE2" data-uri="chapter12.xhtml#P7000497027000000000000000046EE2">operation to notify another thread that some condition in the program state has become true. Two classical and useful examples are the <i class="calibre5 pcalibre pcalibre1">producer-consumer</i> and <i class="calibre5 pcalibre pcalibre1">readers-writers</i> problems.</p>
<section id="P700049702700000000000000000840D" data-uri="chapter12.xhtml#P700049702700000000000000000840D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046EE3" data-uri="chapter12.xhtml#P7000497027000000000000000046EE3" epub:type="title">Producer-Consumer Problem</h1></header>
<p id="P7000497027000000000000000046EE4" data-uri="chapter12.xhtml#P7000497027000000000000000046EE4" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">producer-consumer</i> problem is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008405"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.23</span></a>. A producer and consumer thread share a <i class="calibre5 pcalibre pcalibre1">bounded buffer</i> with <i class="calibre5 pcalibre pcalibre1">n slots</i>. The producer thread repeatedly produces new <i class="calibre5 pcalibre pcalibre1">items</i> and inserts them in the buffer. The consumer thread repeatedly removes items from the buffer and then consumes (uses) them. Variants with multiple producers and consumers are also possible.</p>
<p id="P7000497027000000000000000046EE5" data-uri="chapter12.xhtml#P7000497027000000000000000046EE5" class="pcalibre1 pcalibre calibre2">Since inserting and removing items involves updating shared variables, we must guarantee mutually exclusive access to the buffer. But guaranteeing mutual exclusion is not sufficient. We also need to schedule accesses to the buffer. If the buffer is full (there are no empty slots), then the producer must wait until a slot becomes available. Similarly, if the buffer is empty (there are no available items), then the consumer must wait until an item becomes available.</p>
<p id="P7000497027000000000000000046EE6" data-uri="chapter12.xhtml#P7000497027000000000000000046EE6" class="pcalibre1 pcalibre calibre2">Producer-consumer interactions occur frequently in real systems. For example, in a multimedia system, the producer might encode video frames while the consumer decodes and renders them on the screen. The purpose of the buffer is to reduce jitter in the video stream caused by data-dependent differences in the encoding and decoding times for individual frames. The buffer provides a reservoir of slots to the producer and a reservoir of encoded frames to the consumer. Another common example is the design of graphical user interfaces. The producer detects mouse and keyboard events and inserts them in the buffer. The consumer removes the events from the buffer in some priority-based manner and paints the screen.</p>
<p id="P7000497027000000000000000046EE7" data-uri="chapter12.xhtml#P7000497027000000000000000046EE7" class="pcalibre1 pcalibre calibre2">In this section, we will develop a simple package, called S<span class="smallcaps pcalibre pcalibre1">buf</span>, for building producer-consumer programs. In the next section, we look at how to use it to build an interesting concurrent server based on prethreading. S<span class="smallcaps pcalibre pcalibre1">buf </span>manipulates bounded buffers of type <code id="P7000497027000000000000000046EE8" data-uri="chapter12.xhtml#P7000497027000000000000000046EE8" class="pcalibre1 calibre8 pcalibre">sbuf_t</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000841A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.24</span></a>). Items are stored in a dynamically allocated integer array (<code id="P7000497027000000000000000046EE9" data-uri="chapter12.xhtml#P7000497027000000000000000046EE9" class="pcalibre1 calibre8 pcalibre">buf</code>) with n items. The <code id="P7000497027000000000000000046EEA" data-uri="chapter12.xhtml#P7000497027000000000000000046EEA" class="pcalibre1 calibre8 pcalibre">front</code> and <code id="P7000497027000000000000000046EEB" data-uri="chapter12.xhtml#P7000497027000000000000000046EEB" class="pcalibre1 calibre8 pcalibre">rear</code> indices keep track of the first and last items in the array. Three semaphores synchronize access to the buffer. The <code id="P7000497027000000000000000046EEC" data-uri="chapter12.xhtml#P7000497027000000000000000046EEC" class="pcalibre1 calibre8 pcalibre">mutex</code> semaphore provides mutually exclusive buffer access. Semaphores <code id="P7000497027000000000000000046EED" data-uri="chapter12.xhtml#P7000497027000000000000000046EED" class="pcalibre1 calibre8 pcalibre">slots</code> and <code id="P7000497027000000000000000046EEE" data-uri="chapter12.xhtml#P7000497027000000000000000046EEE" class="pcalibre1 calibre8 pcalibre">items</code> are counting semaphores that count the number of empty slots and available items, respectively.</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000841A" data-uri="chapter12.xhtml#P700049702700000000000000000841A">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000841B" title="1006" data-uri="chapter12.xhtml#P700049702700000000000000000841B" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046EEF" data-uri="chapter12.xhtml#P7000497027000000000000000046EEF" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sbuf.h</i></p>
<pre id="P7000497027000000000000000046EF0" data-uri="chapter12.xhtml#P7000497027000000000000000046EF0" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046EF1" data-uri="chapter12.xhtml#P7000497027000000000000000046EF1" class="calibre10 pcalibre pcalibre1">
1	typedef struct {	
2		int *buf;		/* Buffer array */
3		int n;			/* Maximum number of slots */
4		int front;		/* buf[(front+1)%n] is first item */
5		int rear;		/* buf[rear%n] is last item */
6		sem_t mutex;		/* Protects accesses to buf */
7		sem_t slots;		/* Counts available slots */
8		sem_t items;		/* Counts available items */
9	} sbuf_t;	
</code></pre>
<p id="P7000497027000000000000000046EF2" data-uri="chapter12.xhtml#P7000497027000000000000000046EF2" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sbuf.h</i></p>
<figcaption id="P7000497027000000000000000046EF3" data-uri="chapter12.xhtml#P7000497027000000000000000046EF3" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046EF4" data-uri="chapter12.xhtml#P7000497027000000000000000046EF4" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.24 </span><code id="P7000497027000000000000000046EF5" data-uri="chapter12.xhtml#P7000497027000000000000000046EF5" class="pcalibre1 calibre8 pcalibre">sbuf_t</code>: Bounded buffer used by the <code id="P7000497027000000000000000046EF6" data-uri="chapter12.xhtml#P7000497027000000000000000046EF6" class="pcalibre1 calibre8 pcalibre">S<span class="smallcaps1 pcalibre pcalibre1">buf</span></code> package.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046EF7" data-uri="chapter12.xhtml#P7000497027000000000000000046EF7" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000843D"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.25</span></a> shows the implementation of the S<span class="smallcaps pcalibre pcalibre1">buf </span>package. The <code id="P7000497027000000000000000046EF8" data-uri="chapter12.xhtml#P7000497027000000000000000046EF8" class="pcalibre1 calibre8 pcalibre">sbuf_init</code> function allocates heap memory for the buffer, sets <code id="P7000497027000000000000000046EF9" data-uri="chapter12.xhtml#P7000497027000000000000000046EF9" class="pcalibre1 calibre8 pcalibre">front</code> and <code id="P7000497027000000000000000046EFA" data-uri="chapter12.xhtml#P7000497027000000000000000046EFA" class="pcalibre1 calibre8 pcalibre">rear</code> to indicate an empty buffer, and assigns initial values to the three semaphores. This function is called once, before calls to any of the other three functions. The <code id="P7000497027000000000000000046EFB" data-uri="chapter12.xhtml#P7000497027000000000000000046EFB" class="pcalibre1 calibre8 pcalibre">sbuf_deinit</code> function frees the buffer storage when the application is through using it. The <code id="P7000497027000000000000000046EFC" data-uri="chapter12.xhtml#P7000497027000000000000000046EFC" class="pcalibre1 calibre8 pcalibre">sbuf_insert</code> function waits for an available slot, locks the mutex, adds the item, unlocks the mutex, and then announces the availability of a new item. The <code id="P7000497027000000000000000046EFD" data-uri="chapter12.xhtml#P7000497027000000000000000046EFD" class="pcalibre1 calibre8 pcalibre">sbuf_remove</code> function is symmetric. After waiting for an available buffer item, it locks the mutex, removes the item from the front of the buffer, unlocks the mutex, and then signals the availability of a new slot.</p>
<section id="P700049702700000000000000000842B" data-uri="chapter12.xhtml#P700049702700000000000000000842B" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000046EFE" data-uri="chapter12.xhtml#P7000497027000000000000000046EFE" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.9 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000875E.xhtml#P7000497027000000000000000008803">1038</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046EFF" data-uri="chapter12.xhtml#P7000497027000000000000000046EFF">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000000842E" data-uri="chapter12.xhtml#P700049702700000000000000000842E">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046F00" data-uri="chapter12.xhtml#P7000497027000000000000000046F00"><p id="P7000497027000000000000000046F01" data-uri="chapter12.xhtml#P7000497027000000000000000046F01" class="pcalibre calibre3 pcalibre1">Let <var class="calibre5 pcalibre pcalibre1">p</var> denote the number of producers, <var class="calibre5 pcalibre pcalibre1">c</var> the number of consumers, and <var class="calibre5 pcalibre pcalibre1">n</var> the buffer size in units of items. For each of the following scenarios, indicate whether the mutex semaphore in <code id="P7000497027000000000000000046F02" data-uri="chapter12.xhtml#P7000497027000000000000000046F02" class="pcalibre1 calibre8 pcalibre">sbuf_insert</code> and <code id="P7000497027000000000000000046F03" data-uri="chapter12.xhtml#P7000497027000000000000000046F03" class="pcalibre1 calibre8 pcalibre">sbuf_remove</code> is necessary or not.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000046F04" data-uri="chapter12.xhtml#P7000497027000000000000000046F04">
<li id="P7000497027000000000000000046F05" data-uri="chapter12.xhtml#P7000497027000000000000000046F05" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046F06" data-uri="chapter12.xhtml#P7000497027000000000000000046F06" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">p</var> = 1, <var class="calibre5 pcalibre pcalibre1">c</var> = 1, <var class="calibre5 pcalibre pcalibre1">n</var> &gt; 1</p></li>
<li id="P7000497027000000000000000046F07" data-uri="chapter12.xhtml#P7000497027000000000000000046F07" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046F08" data-uri="chapter12.xhtml#P7000497027000000000000000046F08" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">p</var> = 1, <var class="calibre5 pcalibre pcalibre1">c</var> = 1, <var class="calibre5 pcalibre pcalibre1">n</var> = 1</p></li>
<li id="P7000497027000000000000000046F09" data-uri="chapter12.xhtml#P7000497027000000000000000046F09" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046F0A" data-uri="chapter12.xhtml#P7000497027000000000000000046F0A" class="pcalibre calibre3 pcalibre1"><var class="calibre5 pcalibre pcalibre1">p</var> &gt; 1, <var class="calibre5 pcalibre pcalibre1">c</var> &gt; 1, <var class="calibre5 pcalibre pcalibre1">n</var> = 1</p></li>
</ol></div></li>
</ol>
</section>
</section>
<section id="P700049702700000000000000000843A" data-uri="chapter12.xhtml#P700049702700000000000000000843A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000046F0B" data-uri="chapter12.xhtml#P7000497027000000000000000046F0B" epub:type="title">Readers-Writers Problem</h1></header>
<p id="P7000497027000000000000000046F0C" data-uri="chapter12.xhtml#P7000497027000000000000000046F0C" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">readers-writers problem</i> is a generalization of the mutual exclusion problem. A collection of concurrent threads is accessing a shared object such as a data structure in main memory or a database on disk. Some threads only read the object, while others modify it. Threads that modify the object are called <i class="calibre5 pcalibre pcalibre1">writers</i>. Threads that only read it are called <i class="calibre5 pcalibre pcalibre1">readers</i>. Writers must have exclusive access to the object, but readers may share the object with an unlimited number of other readers. In general, there are an unbounded number of concurrent readers and writers.</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000843D" data-uri="chapter12.xhtml#P700049702700000000000000000843D">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000843E" title="1007" data-uri="chapter12.xhtml#P700049702700000000000000000843E" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046F0D" data-uri="chapter12.xhtml#P7000497027000000000000000046F0D" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sbuf.c</i></p>
<pre id="P7000497027000000000000000046F0E" data-uri="chapter12.xhtml#P7000497027000000000000000046F0E" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F0F" data-uri="chapter12.xhtml#P7000497027000000000000000046F0F" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	#include "sbuf.h"
3	
4	/* Create an empty, bounded, shared FIFO buffer with n slots */
5	void sbuf_init(sbuf_t *sp, int n)
6	{
7		sp-&gt;buf = Calloc(n, sizeof(int));
8		sp-&gt;n =n;			/*Buffer holds maxofnitems */
9		sp-&gt;front = sp-&gt;rear = 0;	/* Empty buffer iff front == rear */
10		Sem_init(&amp;sp-&gt;mutex, 0, 1);	/* Binary semaphore for locking */
11		Sem_init(&amp;sp-&gt;slots, 0, n);	/* Initially, buf has n empty slots */
12		Sem_init(&amp;sp-&gt;items, 0, 0);	/* Initially, buf has zero data items */
13	}
14	
15	/* Clean up buffer sp */
16	void sbuf_deinit(sbuf_t *sp)
17	{
18		Free(sp-&gt;buf);
19	}
20	
21	/* Insert item onto the rear of shared buffer sp */
22	void sbuf_insert(sbuf_t *sp, int item)
23	{
24		P(&amp;sp-&gt;slots);				/* Wait for available slot */
25		P(&amp;sp-&gt;mutex);				/*Lock the buffer */
26		sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item;	/* Insert the item */
27		V(&amp;sp-&gt;mutex);				/* Unlock the buffer */
28		V(&amp;sp-&gt;items);				/* Announce available item */
29	}
30	
31	/* Remove and return the first item from buffer sp */
32	int sbuf_remove(sbuf_t *sp)
33	{
34		int item;
35		P(&amp;sp-&gt;items);				/* Wait for available item */
36		P(&amp;sp-&gt;mutex);				/*Lock the buffer */
37		item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)];	/* Remove the item */
38		V(&amp;sp-&gt;mutex);				/* Unlock the buffer */
39		V(&amp;sp-&gt;slots);				/* Announce available slot */
40		return item;
41	}
</code></pre>
<p id="P7000497027000000000000000046F10" data-uri="chapter12.xhtml#P7000497027000000000000000046F10" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/sbuf.c</i></p>
<figcaption id="P7000497027000000000000000046F11" data-uri="chapter12.xhtml#P7000497027000000000000000046F11" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F12" data-uri="chapter12.xhtml#P7000497027000000000000000046F12" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.25 </span><code id="P7000497027000000000000000046F13" data-uri="chapter12.xhtml#P7000497027000000000000000046F13" class="pcalibre1 calibre8 pcalibre">S<span class="smallcaps1 pcalibre pcalibre1">buf</span></code>: A package for synchronizing concurrent access to bounded buffers.</h1></header>
</figcaption>
</figure>
<p id="P7000497027000000000000000046F14" data-uri="chapter12.xhtml#P7000497027000000000000000046F14" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008447" title="1008" data-uri="chapter12.xhtml#P7000497027000000000000000008447" epub:type="pagebreak"></span>Readers-writers interactions occur frequently in real systems. For example, in an online airline reservation system, an unlimited number of customers are al-lowed to concurrently inspect the seat assignments, but a customer who is booking a seat must have exclusive access to the database. As another example, in a multithreaded caching Web proxy, an unlimited number of threads can fetch existing pages from the shared page cache, but any thread that writes a new page to the cache must have exclusive access.</p>
<p id="P7000497027000000000000000046F15" data-uri="chapter12.xhtml#P7000497027000000000000000046F15" class="pcalibre1 pcalibre calibre2">The readers-writers problem has several variations, each based on the priorities of readers and writers. The <i class="calibre5 pcalibre pcalibre1">first readers-writers problem</i>, which favors readers, requires that no reader be kept waiting unless a writer has already been granted permission to use the object. In other words, no reader should wait simply because a writer is waiting. The <i class="calibre5 pcalibre pcalibre1">second readers-writers problem</i>, which favors writers, requires that once a writer is ready to write, it performs its write as soon as possible. Unlike the first problem, a reader that arrives after a writer must wait, even if the writer is also waiting.</p>
<p id="P7000497027000000000000000046F16" data-uri="chapter12.xhtml#P7000497027000000000000000046F16" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008459"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.26</span></a> shows a solution to the first readers-writers problem. Like the solutions to many synchronization problems, it is subtle and deceptively simple. The <code id="P7000497027000000000000000046F17" data-uri="chapter12.xhtml#P7000497027000000000000000046F17" class="pcalibre1 calibre8 pcalibre">w</code> semaphore controls access to the critical sections that access the shared object. The mutex semaphore protects access to the shared <code id="P7000497027000000000000000046F18" data-uri="chapter12.xhtml#P7000497027000000000000000046F18" class="pcalibre1 calibre8 pcalibre">readcnt</code> variable, which counts the number of readers currently in the critical section. A writer locks thew mutex each time it enters the critical section and unlocks it each time it leaves. This guarantees that there is at most one writer in the critical section at any point in time. On the other hand, only the first reader to enter the critical section locks <code id="P7000497027000000000000000046F19" data-uri="chapter12.xhtml#P7000497027000000000000000046F19" class="pcalibre1 calibre8 pcalibre">w</code>, and only the last reader to leave the critical section unlocks it. The <code id="P7000497027000000000000000046F1A" data-uri="chapter12.xhtml#P7000497027000000000000000046F1A" class="pcalibre1 calibre8 pcalibre">w</code> mutex is ignored by readers who enter and leave while other readers are present. This means that as long as a single reader holds the <code id="P7000497027000000000000000046F1B" data-uri="chapter12.xhtml#P7000497027000000000000000046F1B" class="pcalibre1 calibre8 pcalibre">w</code> mutex, an unbounded number of readers can enter the critical section unimpeded.</p>
<p id="P7000497027000000000000000046F1C" data-uri="chapter12.xhtml#P7000497027000000000000000046F1C" class="pcalibre1 pcalibre calibre2">A correct solution to either of the readers-writers problems can result in <i class="calibre5 pcalibre pcalibre1">starvation</i>, where a thread blocks indefinitely and fails to make progress. For example, in the solution in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008459"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.26</span></a>, a writer could wait indefinitely while a stream of readers arrived.</p>
<section id="P7000497027000000000000000008450" data-uri="chapter12.xhtml#P7000497027000000000000000008450" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title10 pcalibre pcalibre1" id="P7000497027000000000000000046F1D" data-uri="chapter12.xhtml#P7000497027000000000000000046F1D" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">12.10 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000875E.xhtml#P7000497027000000000000000008803">1038</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000046F1E" data-uri="chapter12.xhtml#P7000497027000000000000000046F1E">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000046F1F" data-uri="chapter12.xhtml#P7000497027000000000000000046F1F">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046F20" data-uri="chapter12.xhtml#P7000497027000000000000000046F20"><p id="P7000497027000000000000000046F21" data-uri="chapter12.xhtml#P7000497027000000000000000046F21" class="pcalibre calibre3 pcalibre1">The solution to the first readers-writers problem in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008459"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.26</span></a> gives priority to readers, but this priority is weak in the sense that a writer leaving its critical section might restart a waiting writer instead of a waiting reader. Describe a scenario where this weak priority would allow a collection of writers to starve a reader.</p></div></li>
</ol>
</section>
</section>
</section>
<section id="P7000497027000000000000000008456" data-uri="chapter12.xhtml#P7000497027000000000000000008456" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046F22" data-uri="chapter12.xhtml#P7000497027000000000000000046F22" epub:type="title"><span class="pcalibre label pcalibre1">12.5.5 </span>Putting It Together: A Concurrent Server Based on Prethreading</h1></header>
<p id="P7000497027000000000000000046F23" data-uri="chapter12.xhtml#P7000497027000000000000000046F23" class="pcalibre1 pcalibre calibre2">We have seen how semaphores can be used to access shared variables and to schedule accesses to shared resources. To help you understand these ideas more clearly, let us apply them to a concurrent server based on a technique called <i class="calibre5 pcalibre pcalibre1">prethreading</i>.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008459" data-uri="chapter12.xhtml#P7000497027000000000000000008459">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000845A" title="1009" data-uri="chapter12.xhtml#P700049702700000000000000000845A" epub:type="pagebreak"></span>
<pre id="P7000497027000000000000000046F24" data-uri="chapter12.xhtml#P7000497027000000000000000046F24" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F25" data-uri="chapter12.xhtml#P7000497027000000000000000046F25" class="calibre10 pcalibre pcalibre1">
/* Global variables */
int readcnt; /* Initially = 0 */
sem_t mutex, w; /* Both initially = 1 */
void reader(void)
{
	while (1) {
		P(&amp;mutex);
		readcnt++;
		if (readcnt == 1) /* First in */
			P(&amp;w);
		V(&amp;mutex);
		/* Critical section */
		/* Reading happens */
		P(&amp;mutex);
		readcnt−;
		if (readcnt == 0) /* Last out */
			V(&amp;w);
		V(&amp;mutex);
	}
}
void writer(void)
{
	while (1) {
		P(&amp;w);
		/* Critical section */
		/* Writing happens */
		V(&amp;w);
	}
}
</code></pre>
<figcaption id="P7000497027000000000000000046F26" data-uri="chapter12.xhtml#P7000497027000000000000000046F26" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F27" data-uri="chapter12.xhtml#P7000497027000000000000000046F27" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.26 </span>Solution to the first readers-writers problem.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046F28" data-uri="chapter12.xhtml#P7000497027000000000000000046F28"><p id="P7000497027000000000000000046F29" data-uri="chapter12.xhtml#P7000497027000000000000000046F29" class="pcalibre calibre3 pcalibre1">Favors readers over writers.</p></div></figcaption>
</figure>
<p id="P7000497027000000000000000046F2A" data-uri="chapter12.xhtml#P7000497027000000000000000046F2A" class="pcalibre1 pcalibre calibre2">In the concurrent server in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000817D.xhtml#P7000497027000000000000000008200"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.14</span></a>, we created a new thread for each new client. A disadvantage of this approach is that we incur the nontrivial cost of creating a new thread for each new client. A server based on prethreading tries to reduce this overhead by using the producer-consumer model shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008466"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.27</span></a>. The server consists of a main thread and a set of worker threads. The main thread repeatedly accepts connection requests from clients and places</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000008462" data-uri="chapter12.xhtml#P7000497027000000000000000008462"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046F2B" data-uri="chapter12.xhtml#P7000497027000000000000000046F2B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008464" title="1010" data-uri="chapter12.xhtml#P7000497027000000000000000008464" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Other synchronization mechanisms</h1></header>
<p id="P7000497027000000000000000046F2C" data-uri="chapter12.xhtml#P7000497027000000000000000046F2C" class="pcalibre calibre3 pcalibre1">We have shown you how to synchronize threads using semaphores, mainly because they are simple, classical, and have a clean semantic model. But you should know that other synchronization techniques exist as well. For example, Java threads are synchronized with a mechanism called a <i class="calibre5 pcalibre pcalibre1">Java monitor</i> [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B402">48</a>], which provides a higher-level abstraction of the mutual exclusion and scheduling capabilities of semaphores; in fact, monitors can be implemented with semaphores. As another example, the Pthreads interface defines a set of synchronization operations on <i class="calibre5 pcalibre pcalibre1">mutex</i> and <i class="calibre5 pcalibre pcalibre1">condition</i> variables. Pthreads mutexes are used for mutual exclusion. Condition variables are used for scheduling accesses to shared resources, such as the bounded buffer in a producer-consumer program.</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008466" data-uri="chapter12.xhtml#P7000497027000000000000000008466">
<img alt="A diagram illustrates the organization of a prethreaded concurrent server." id="P7000497027000000000000000046F2D" data-uri="P700049702700000000000000000B698" src="../images/p1010-1.png" class="calibre342 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046F2E" data-uri="chapter12.xhtml#P7000497027000000000000000046F2E" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F2F" data-uri="chapter12.xhtml#P7000497027000000000000000046F2F" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.27 </span>Organization of a prethreaded concurrent server.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046F30" data-uri="chapter12.xhtml#P7000497027000000000000000046F30"><p id="P7000497027000000000000000046F31" data-uri="chapter12.xhtml#P7000497027000000000000000046F31" class="pcalibre calibre3 pcalibre1">A set of existing threads repeatedly remove and process connected descriptors from a bounded buffer.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000272A3" data-uri="chapter12.xhtml#P70004970270000000000000000272A3">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046F32" data-uri="chapter12.xhtml#P7000497027000000000000000046F32" class="pcalibre calibre3 pcalibre1">A diagram shows accepted connections from clients to a master thread; insert descriptors from master thread to buffer; remove descriptors from buffer to worker threads (within a pool of worker threads); and service client from the worker threads back to separate clients.</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046F33" data-uri="chapter12.xhtml#P7000497027000000000000000046F33">the resulting connected descriptors in a bounded buffer. Each worker thread repeatedly removes a descriptor from the buffer, services the client, and then waits for the next descriptor.</p>
<p id="P7000497027000000000000000046F34" data-uri="chapter12.xhtml#P7000497027000000000000000046F34" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008478"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.28</span></a> shows how we would use the S<span class="smallcaps pcalibre pcalibre1">buf </span>package to implement a prethreaded concurrent echo server. After initializing buffer <code id="P7000497027000000000000000046F35" data-uri="chapter12.xhtml#P7000497027000000000000000046F35" class="pcalibre1 calibre8 pcalibre">sbuf</code> (line 24), the main thread creates the set of worker threads (lines 25−26). Then it enters the infinite server loop, accepting connection requests and inserting the resulting connected descriptors in <code id="P7000497027000000000000000046F36" data-uri="chapter12.xhtml#P7000497027000000000000000046F36" class="pcalibre1 calibre8 pcalibre">sbuf</code>. Each worker thread has a very simple behavior. It waits until it is able to remove a connected descriptor from the buffer (line 39) and then calls the <code id="P7000497027000000000000000046F37" data-uri="chapter12.xhtml#P7000497027000000000000000046F37" class="pcalibre1 calibre8 pcalibre">echo_cnt</code> function to echo client input.</p>
<p id="P7000497027000000000000000046F38" data-uri="chapter12.xhtml#P7000497027000000000000000046F38" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000046F39" data-uri="chapter12.xhtml#P7000497027000000000000000046F39" class="pcalibre1 calibre8 pcalibre">echo_cnt</code> function in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000008482"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">12.29</span></a> is a version of the <code id="P7000497027000000000000000046F3A" data-uri="chapter12.xhtml#P7000497027000000000000000046F3A" class="pcalibre1 calibre8 pcalibre">echo</code> function from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E78"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">11.22</span></a> that records the cumulative number of bytes received from all clients in a global variable called <code id="P7000497027000000000000000046F3B" data-uri="chapter12.xhtml#P7000497027000000000000000046F3B" class="pcalibre1 calibre8 pcalibre">byte_cnt</code>. This is interesting code to study because it shows you a general technique for initializing packages that are called from thread routines. In our case, we need to initialize the <code id="P7000497027000000000000000046F3C" data-uri="chapter12.xhtml#P7000497027000000000000000046F3C" class="pcalibre1 calibre8 pcalibre">byte_cnt</code> counter and the <code id="P7000497027000000000000000046F3D" data-uri="chapter12.xhtml#P7000497027000000000000000046F3D" class="pcalibre1 calibre8 pcalibre">mutex</code> semaphore. One approach, which we used for the S<span class="smallcaps pcalibre pcalibre1">buf </span>and R<span class="smallcaps pcalibre pcalibre1">io </span>packages, is to require the main thread to explicitly call an initialization function. Another approach, shown here, uses the <code id="P7000497027000000000000000046F3E" data-uri="chapter12.xhtml#P7000497027000000000000000046F3E" class="pcalibre1 calibre8 pcalibre">pthread_once</code> function (line 19) to call</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008478" data-uri="chapter12.xhtml#P7000497027000000000000000008478">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008479" title="1011" data-uri="chapter12.xhtml#P7000497027000000000000000008479" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046F3F" data-uri="chapter12.xhtml#P7000497027000000000000000046F3F" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/echoservert-pre.c</i></p>
<pre id="P7000497027000000000000000046F40" data-uri="chapter12.xhtml#P7000497027000000000000000046F40" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F41" data-uri="chapter12.xhtml#P7000497027000000000000000046F41" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	#include "sbuf.h"
3	#define NTHREADS 4
4	#define SBUFSIZE 16
5	
6	void echo_cnt(int connfd);
7	void *thread(void *vargp);
8	
9	sbuf_t sbuf; /* Shared buffer of connected descriptors */
10	
11	int main(int argc, char **argv)
12	{
13		int i, listenfd, connfd;
14		socklen_t clientlen;
15		struct sockaddr_storage clientaddr;
16		pthread_t tid;
17	
18		if (argc != 2) {
19			fprintf(stderr, "usage: %s &lt;port&gt;\n", argv[0]);
20			exit(0);
21		}
22		listenfd = Open_listenfd(argv[1]);
23	
24		sbuf_init(&amp;sbuf, SBUFSIZE);
25		for (i = 0; i &lt; NTHREADS; i++)	/* Create worker threads */
26			Pthread_create(&amp;tid, NULL, thread, NULL);
27	
28		while (1) {
29			clientlen = sizeof(struct sockaddr_storage);
30			connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);
31			sbuf_insert(&amp;sbuf, connfd); /* Insert connfd in buffer */
32		}
33	}
34	
35	void *thread(void *vargp)
36	{
37		Pthread_detach(pthread_self());
38		while (1) {
39			int connfd = sbuf_remove(&amp;sbuf);	/* Remove connfd from buffer */
40			echo_cnt(connfd);			/* Service client */
41			Close(connfd);
42		}
43	}
</code></pre>
<p id="P7000497027000000000000000046F42" data-uri="chapter12.xhtml#P7000497027000000000000000046F42" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/echoservert-pre.c</i></p>
<figcaption id="P7000497027000000000000000046F43" data-uri="chapter12.xhtml#P7000497027000000000000000046F43" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F44" data-uri="chapter12.xhtml#P7000497027000000000000000046F44" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.28 </span>A prethreaded concurrent echo server.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046F45" data-uri="chapter12.xhtml#P7000497027000000000000000046F45"><p id="P7000497027000000000000000046F46" data-uri="chapter12.xhtml#P7000497027000000000000000046F46" class="pcalibre calibre3 pcalibre1">The server uses a producer-consumer model with one producer and multiple consumers.</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008482" data-uri="chapter12.xhtml#P7000497027000000000000000008482">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008483" title="1012" data-uri="chapter12.xhtml#P7000497027000000000000000008483" epub:type="pagebreak"></span>
<p id="P7000497027000000000000000046F47" data-uri="chapter12.xhtml#P7000497027000000000000000046F47" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/echo-cnt.c</i></p>
<pre id="P7000497027000000000000000046F48" data-uri="chapter12.xhtml#P7000497027000000000000000046F48" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046F49" data-uri="chapter12.xhtml#P7000497027000000000000000046F49" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	static int byte_cnt;	/* Byte counter */
4	static sem_t mutex;	/* and the mutex that protects it */
5	
6	static void init_echo_cnt(void)
7	{
8		Sem_init(&amp;mutex, 0, 1);
9		byte_cnt = 0;
10	}
11	
12	void echo_cnt(int connfd)
13	{
14		int n;
15		char buf[MAXLINE];
16		rio_t rio;
17		static pthread_once_t once = PTHREAD_ONCE_INIT;
18	
19		Pthread_once(&amp;once, init_echo_cnt);
20		Rio_readinitb(&amp;rio, connfd);
21		while((n = Rio_readlineb(&amp;rio, buf, MAXLINE)) != 0) {
22			P(&amp;mutex);
23			byte_cnt += n;
24			printf("server received %d (%d total) bytes on fd %d\n",
25				n, byte_cnt, connfd);
26			V(&amp;mutex);
27			Rio_writen(connfd, buf, n);
28		}
29	}
</code></pre>
<p id="P7000497027000000000000000046F4A" data-uri="chapter12.xhtml#P7000497027000000000000000046F4A" class="pcalibre1 pcalibre calibre2">-------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/conc/echo-cnt.c</i></p>
<figcaption id="P7000497027000000000000000046F4B" data-uri="chapter12.xhtml#P7000497027000000000000000046F4B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F4C" data-uri="chapter12.xhtml#P7000497027000000000000000046F4C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">12.29 </span><code id="P7000497027000000000000000046F4D" data-uri="chapter12.xhtml#P7000497027000000000000000046F4D" class="pcalibre1 calibre8 pcalibre">echo_cnt</code>: A version of <code id="P7000497027000000000000000046F4E" data-uri="chapter12.xhtml#P7000497027000000000000000046F4E" class="pcalibre1 calibre8 pcalibre">echo</code> that counts all bytes received from clients.</h1></header>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046F4F" data-uri="chapter12.xhtml#P7000497027000000000000000046F4F">the initialization function the first time some thread calls the <code id="P7000497027000000000000000046F50" data-uri="chapter12.xhtml#P7000497027000000000000000046F50" class="pcalibre1 calibre8 pcalibre">echo_cnt</code> function. The advantage of this approach is that it makes the package easier to use. The disadvantage is that every call to <code id="P7000497027000000000000000046F51" data-uri="chapter12.xhtml#P7000497027000000000000000046F51" class="pcalibre1 calibre8 pcalibre">echo_cnt</code> makes a call to <code id="P7000497027000000000000000046F52" data-uri="chapter12.xhtml#P7000497027000000000000000046F52" class="pcalibre1 calibre8 pcalibre">pthread_once</code>, which most times does nothing useful.</p>
<p id="P7000497027000000000000000046F53" data-uri="chapter12.xhtml#P7000497027000000000000000046F53" class="pcalibre1 pcalibre calibre2">Once the package is initialized, the <code id="P7000497027000000000000000046F54" data-uri="chapter12.xhtml#P7000497027000000000000000046F54" class="pcalibre1 calibre8 pcalibre">echo_cnt</code> function initializes the R<span class="smallcaps pcalibre pcalibre1">io </span>buffered I/O package (line 20) and then echoes each text line that is received from the client. Notice that the accesses to the shared <code id="P7000497027000000000000000046F55" data-uri="chapter12.xhtml#P7000497027000000000000000046F55" class="pcalibre1 calibre8 pcalibre">byte_cnt</code> variable in lines 23−25 are protected by <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> operations.</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000008493" data-uri="chapter12.xhtml#P7000497027000000000000000008493"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000046F56" data-uri="chapter12.xhtml#P7000497027000000000000000046F56" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008495" title="1013" data-uri="chapter12.xhtml#P7000497027000000000000000008495" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Event-driven programs based on threads</h1></header>
<p id="P7000497027000000000000000046F57" data-uri="chapter12.xhtml#P7000497027000000000000000046F57" class="pcalibre calibre3 pcalibre1">I/O multiplexing is not the only way to write an event-driven program. For example, you might have noticed that the concurrent prethreaded server that we just developed is really an event-driven server with simple state machines for the main and worker threads. The main thread has two states ("waiting for connection request" and "waiting for available buffer slot"), two I/O events ("connection request arrives" and "buffer slot becomes available"), and two transitions ("accept connection request" and "insert buffer item"). Similarly, each worker thread has one state ("waiting for available buffer item"), one I/O event ("buffer item becomes available"), and one transition ("remove buffer item").</p>
</aside>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008497" data-uri="chapter12.xhtml#P7000497027000000000000000008497">
<img alt="A diagram shows all programs divided among concurrent programs and sequential programs. Parallel programs are within concurrent programs." id="P7000497027000000000000000046F58" data-uri="P700049702700000000000000000B699" src="../images/p1013-1.png" class="calibre343 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000046F59" data-uri="chapter12.xhtml#P7000497027000000000000000046F59" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046F5A" data-uri="chapter12.xhtml#P7000497027000000000000000046F5A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">12.30 </span>Relationships between the sets of sequential, concurrent, and parallel programs.</h1></header>
</figcaption>
</figure>
</section>
</section></body></html>
