<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>43.5 Solution Through Indirection: The Inode Map</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part482.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part484.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">43.5 Solution Through Indirection: The Inode Map</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">To remedy this, the designers of LFS introduced a <b>level of indirection </b>between inode numbers and the inodes through a data structure called the <b>inode map (imap)</b>. The imap is a structure that takes an inode number as input and produces the disk address of the most recent version of the inode. Thus, you can imagine it would often be implemented as a simple <i>array</i>, with 4 bytes (a disk pointer) per entry. Any time an inode is written to disk, the imap is updated with its new location.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 80pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: U<span class="s7">SE </span>A L<span class="s7">EVEL </span>O<span class="s7">F </span>I<span class="s7">NDIRECTION</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">People often say that the solution to all problems in Computer Science is simply a <b>level of indirection</b>. This is clearly not true; it is just the solution to <i>most </i>problems. You certainly can think of every virtualization we have studied, e.g., virtual memory, as simply a level of indirection. And certainly the inode map in LFS is a virtualization of inode numbers. Hopefully you can see the great power of indirection in these examples, allowing us to freely move structures around (such as pages in the VM example, or inodes in LFS) without having to change every reference to them. Of course, indirection can have a downside too: <b>extra overhead. </b>So next time you have a problem, try solving it with indirection. But make sure to think about the overheads of doing so first.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The imap, unfortunately, needs to be kept persistent (i.e., written to disk); doing so allows LFS to keep track of the locations of inodes across crashes, and thus operate as desired. Thus, a question: where should the imap reside on disk?</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">It could live on a fixed part of the disk, of course. Unfortunately, as it gets updated frequently, this would then require updates to file structures to be followed by writes to the imap, and hence performance would suffer (i.e., there would be more disk seeks, between each update and the fixed location of the imap).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="348" height="26" alt="image" src="Image_643.png"/></span></p><p class="s47" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">map[k]:A1</p><p class="s227" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">imap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">blk[0]:A0</p><p class="s227" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: center;">I[k]</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s227" style="text-indent: 0pt;text-align: center;">D</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Instead, LFS places chunks of the inode map right next to where it is writing all of the other new information. Thus, when appending a data block to a file <span class="s43">k</span>, LFS actually writes the new data block, its inode, and a piece of the inode map all together onto the disk, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="348" height="1" alt="image" src="Image_644.png"/></span></p><p class="s47" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">A0   A1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 90%;text-align: justify;">In this picture, the piece of the imap array stored in the block marked <i>imap </i>tells LFS that the inode <span class="s43">k </span>is at disk address <span class="s43">A</span><span class="s44">1</span>; this inode, in turn, tells LFS that its data block <span class="s43">D </span>is at address <span class="s43">A</span><span class="s44">0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part482.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part484.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
