<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.2   Web Fundamentals</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part183.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part185.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 10pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">9.2   <span style=" color: #00AEEF;">Web Fundamentals</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">In this section, we review some of the fundamental technology behind the World Wide Web, for readers who are not familiar with the technology underlying the web.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">9.2.1 Uniform Resource Locators</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">A <span class="s63">uniform resource locator </span>(<span class="s64">URL</span>) is a globally unique name for each document that can be accessed on the web. An example of a <span class="s44">URL </span>is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 241pt;text-indent: 0pt;text-align: left;"><a href="http://www.acm.org/sigmod" class="s56">http://www.acm.org/sigmod</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The ﬁrst part of the <span class="s44">URL </span>indicates how the document is to be accessed: “http” indi- cates that the document is to be accessed by the <span class="s63">HyperText Transfer Protocol </span>(<span class="s64">HTTP</span>),</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2201.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">html</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">body</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">table border</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">tr</span>&gt; &lt;<span class="s49">th</span>&gt;<span class="s151">ID</span>&lt;<span class="s49">/th</span>&gt;  &lt;<span class="s49">th</span>&gt;<span class="s49">Name</span>&lt;<span class="s49">/th</span>&gt;  &lt;<span class="s49">th</span>&gt;<span class="s49">Department</span>&lt;<span class="s49">/th</span>&gt; &lt;<span class="s49">/tr</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">tr</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">00128</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">Zhang</span>&lt;<span class="s49">/td</span>&gt;  &lt;<span class="s49">td</span>&gt;<span class="s49">Comp. Sci.</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">/tr</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">tr</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">12345</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">Shankar</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">Comp. Sci.</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">/tr</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">tr</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">19991</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">Brandt</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">td</span>&gt;<span class="s49">History</span>&lt;<span class="s49">/td</span>&gt; &lt;<span class="s49">/tr</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/table</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/body</span>&gt;</p><p class="s186" style="padding-left: 103pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/html</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2202.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 9.1 </span>Tabular data in <span class="s157">HTML </span>format.</p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">which is a protocol for transferring <span class="s44">HTML </span>documents; “<span class="s49">https</span>” would indicate that the secure version of the <span class="s44">HTTP </span>protocol must be used, and is the preferred mode today. The second part gives the name of a machine that has a web server. The rest of the <span class="s44">URL </span>is the path name of the ﬁle on the machine, or other unique identiﬁer of a document within the machine.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A <span class="s44">URL </span>can contain the identiﬁer of a program located on the web server machine, as well as arguments to be given to the program. An example of such a <span class="s44">URL </span>is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: center;"><a href="http://www.google.com/search?q=silberschatz" class="s56" target="_blank">https://www.google.com/search?q=silberschatz</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">which says that the program <span class="s49">search </span><a href="http://www.google.com/" class="s87" target="_blank">on the server </a><a href="http://www.google.com/" class="s56" target="_blank">www.google.com</a><span class="s49"> </span>should be executed with the argument <span class="s49">q=silberschatz</span>. On receiving a request for such a <span class="s44">URL</span>, the web server executes the program, using the given arguments. The program returns an <span class="s44">HTML </span>document to the web server, which sends it back to the front end.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.2.2 HyperText Markup Language</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Figure 9.1 is an example of a table represented in the <span class="s44">HTML </span>format, while Figure 9.2 shows the displayed image generated by a browser from the <span class="s44">HTML </span>representation of the table. The <span class="s44">HTML </span>source shows a few of the <span class="s44">HTML </span>tags. Every <span class="s44">HTML </span>page should be enclosed in an <span class="s49">html </span>tag, while the body of the page is enclosed in a <span class="s49">body </span>tag. A table</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:209.43pt" cellspacing="0"><tr style="height:12pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">ID</p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 8pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Name</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Department</p></td></tr><tr style="height:12pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: center;">00128</p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Zhang</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Comp. Sci.</p></td></tr><tr style="height:12pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 2pt;padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">12345</p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Shankar</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Comp. Sci.</p></td></tr><tr style="height:12pt"><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 1pt;padding-right: 1pt;text-indent: 0pt;line-height: 11pt;text-align: center;">19991</p></td><td style="width:38pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 1pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Brandt</p></td><td style="width:60pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20" bgcolor="#C7EAFB"><p class="s262" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">History</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 9.2 </span>Display of <span class="s157">HTML </span>source from Figure 9.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2203.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-top: 2pt;padding-left: 170pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">html</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">body</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 70%;text-align: left;">&lt;<span class="s49">form action=&quot;PersonQuery&quot; method=get</span>&gt; <span class="s49">Search for:</span></p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 14pt;text-align: left;">&lt;<span class="s49">select name=&quot;persontype&quot;</span>&gt;</p><p class="s186" style="padding-left: 191pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">option value=&quot;student&quot; selected</span>&gt;<span class="s49">Student </span>&lt;<span class="s49">/option</span>&gt;</p><p class="s186" style="padding-left: 191pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">option value=&quot;instructor&quot;</span>&gt; <span class="s49">Instructor </span>&lt;<span class="s49">/option</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/select</span>&gt; &lt;<span class="s49">br</span>&gt;</p><p class="s49" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Name: <span class="s186">&lt;</span>input type=text size=20 name=&quot;name&quot;<span class="s186">&gt;</span></p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">input type=submit value=&quot;submit&quot;</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/form</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<span class="s49">/body</span>&gt;</p><p class="s186" style="padding-left: 170pt;text-indent: 0pt;line-height: 16pt;text-align: left;">&lt;<span class="s49">/html</span>&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2204.png"/></span></p><p class="s74" style="padding-top: 8pt;padding-left: 246pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 9.3 </span>An <span class="s157">HTML </span>form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">is speciﬁed by a <span class="s49">table </span>tag, which contains rows speciﬁed by a <span class="s49">tr </span>tag. The header row of the table has table cells speciﬁed by a <span class="s49">th </span>tag, while regular rows have table cells speciﬁed by a <span class="s49">td </span>tag. We do not go into more details about the tags here; see the bibliographical notes for references containing more detailed descriptions of <span class="s44">HTML</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 9.3 shows how to specify an <span class="s44">HTML </span>form that allows users to select the person type (student or instructor) from a menu and to input a number in a text box. Figure 9.4 shows how the above form is displayed in a web browser. Two methods of accepting input are illustrated in the form, but <span class="s44">HTML </span>also supports several other input methods. The <span class="s49">action </span>attribute of the <span class="s49">form </span>tag speciﬁes that when the form is submitted (by clicking on the submit button), the form data should be sent to the <span class="s44">URL </span><span class="s49">PersonQuery </span>(the <span class="s44">URL </span>is relative to that of the page). The web server is conﬁgured such that when this <span class="s44">URL </span>is accessed, a corresponding application program is invoked, with the user-provided values for the arguments <span class="s49">persontype </span>and <span class="s49">name </span>(speciﬁed in the <span class="s49">select </span>and <span class="s49">input </span>ﬁelds). The application program generates an <span class="s44">HTML </span>document, which is then sent back and displayed to the user; we shall see how to construct such programs later in this chapter.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s42">HTTP </span><span class="s43">deﬁnes two ways in which values entered by a user at the browser can be sent to the web server. The </span><span class="s49">get </span>method encodes the values as part of the <span class="s44">URL</span>. For example, if the Google search page used a form with an input parameter named <span class="s49">q </span>with the <span class="s49">get</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="173" height="42" alt="image" src="Image_2205.png"/></span></p><p class="s42" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Search for: <span class="s263">Student</span></p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Name:</p><p class="s80" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">submit</p><p style="text-indent: 0pt;text-align: left;"/><p class="s74" style="padding-top: 4pt;padding-left: 192pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 9.4 </span>Display of <span class="s157">HTML </span>source from Figure 9.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">method, and the user typed in the string “silberschatz” and submitted the form, the browser would request the following <span class="s44">URL </span>from the web server:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: center;"><a href="http://www.google.com/search?q=silberschatz" class="s56" target="_blank">https://www.google.com/search?q=silberschatz</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <span class="s49">post </span>method would instead send a request for the <a href="http://www.google.com/" style=" color: #231F20; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">URL </a><a href="http://www.google.com/" class="s56" target="_blank">https://www.google.com</a>, and send the parameter values as part of the <span class="s44">HTTP </span>protocol exchange between the web server and the browser. The form in Figure 9.3 speciﬁes that the form uses the <span class="s49">get </span>method.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Although <span class="s44">HTML </span>code can be created using a plain text editor, there are a number of editors that permit direct creation of <span class="s44">HTML </span>text by using a graphical interface. Such editors allow constructs such as forms, menus, and tables to be inserted into the <span class="s44">HTML </span>document from a menu of choices, instead of manually typing in the code to generate the constructs.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">HTML </span><span class="s43">supports </span><i>stylesheets</i>, which can alter the default deﬁnitions of how an <span class="s44">HTML </span>formatting construct is displayed, as well as other display attributes such as background color of the page. The <i>cascading stylesheet </i>(<span class="s44">CSS</span>) standard allows the same stylesheet to be used for multiple <span class="s44">HTML </span><a href="http://www.w3schools.com/css/" class="s87" target="_blank">documents, giving a distinctive but uniform look to all the pages on a web site. You can ﬁnd more information on stylesheets online, for example at </a><a href="http://www.w3schools.com/css/" class="s56" target="_blank">www.w3schools.com/css/</a><a href="http://www.w3schools.com/css/" class="s87" target="_blank">.</a></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The <span class="s44">HTML</span>5 standard, which was released in 2014, provides a wide variety of form input types, including the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s186" style="padding-left: 107pt;text-indent: -16pt;line-height: 70%;text-align: justify;"><span class="s39">• </span><span class="s40">Date and time selection, using </span>&lt;<span class="s49">input type=&quot;date&quot; name=&quot;abc&quot;</span>&gt;<span class="p">, and </span>&lt;<span class="s49">input type=&quot;time&quot; name=&quot;xyz&quot;</span>&gt;<span class="p">. Browsers would typically display a graphical date or time picker for such an input ﬁeld; the input value is saved in the form attributes</span></p><p class="s49" style="padding-left: 107pt;text-indent: 0pt;text-align: justify;">abc <span class="p">and </span>xyz<span class="p">. The optional attributes </span>min <span class="p">and </span>max <span class="p">can be used to specify minimum and maximum values that can be chosen.</span></p><p class="s186" style="padding-top: 6pt;padding-left: 107pt;text-indent: -16pt;line-height: 73%;text-align: justify;"><span class="s39">• </span><span class="s40">File selection, using </span>&lt;<span class="s49">input type=&quot;file&quot;, name=&quot;xyz&quot;</span>&gt;<span class="p">, which allows a ﬁle to be chosen, and its name saved in the form attribute </span><span class="s49">xyz</span><span class="p">.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Input restrictions (constraints) on a variety of input types, including minimum, maximum, format matching a regular expression, and so on. For example,</span></p><p class="s186" style="padding-left: 107pt;text-indent: 0pt;line-height: 16pt;text-align: justify;">&lt;<span class="s49">input type=&quot;number&quot; name=&quot;start&quot; min=&quot;0&quot; max=&quot;55&quot; step=&quot;5&quot; value=&quot;0&quot;</span>&gt;</p><p style="padding-left: 107pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">allows the user to choose one of 0, 5, 10, 15, and so on till 55, with a default value</p><p style="padding-left: 107pt;text-indent: 0pt;text-align: justify;">of 0.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">9.2.3 Web Servers and Sessions</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A <span class="s63">web server </span>is a program running on the server machine that accepts requests from a web browser and sends back results in the form of <span class="s44">HTML </span>documents. The browser and web server communicate via <span class="s44">HTTP</span>. Web servers provide powerful features, beyond the simple transfer of documents. The most important feature is the ability to execute</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="371" height="188" alt="image" src="Image_2206.png"/></span></p><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">network</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-left: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">web server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="text-indent: 0pt;text-align: center;">application server</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">HTTP</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">database server</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">browser</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-left: 119pt;text-indent: 0pt;line-height: 9pt;text-align: right;">server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 188pt;text-indent: 0pt;text-align: left;">Figure 9.5 <span class="s74">Three-layer web application architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">programs, with arguments supplied by the user, and to deliver the results back as an</p><p class="s42" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">HTML <span class="s43">document.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">As a result, a web server can act as an intermediary to provide access to a variety of information services. A new service can be created by creating and installing an application program that provides the service. The <span class="s63">common gateway interface (</span><span class="s82">CGI</span><span class="s63">) </span>standard deﬁnes how the web server communicates with application programs. The application program typically communicates with a database server, through <span class="s44">ODBC</span>, <span class="s44">JDBC</span>, or other protocols, in order to get or store data.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 9.5 shows a web application built using a three-layer architecture, with a web server, an application server, and a database server. Using multiple levels of servers in- creases system overhead; the <span class="s44">CGI </span>interface starts a new process to service each request, which results in even greater overhead.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Most web applications today therefore use a two-layer web application architecture, where the web and application servers are combined into a single server, as shown in Figure 9.6. We study systems based on the two-layer architecture in more detail in subsequent sections.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">There is no continuous connection between the client and the web server; when a web server receives a request, a connection is temporarily created to send the request and receive the response from the web server. But the connection may then be closed, and the next request could come over a new connection. In contrast, when a user logs on to a computer, or connects to a database using <span class="s44">ODBC </span>or <span class="s44">JDBC</span>, a session is created, and session information is retained at the server and the client until the session is termi- nated— information such as the user-identiﬁer of the user and session options that the user has set. One important reason that <span class="s44">HTTP </span>is <span class="s63">connectionless </span>is that most computers have limits on the number of simultaneous connections they can accommodate, and if a large number of sites on the web open connections to a single server, this limit would be exceeded, denying service to further users. With a connectionless protocol, the con-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="371" height="188" alt="image" src="Image_2207.png"/></span></p><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">network</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 4pt;text-align: left;">web server and application server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">database server</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">HTTP</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">browser</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 9pt;text-align: left;">data</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-left: 119pt;text-indent: 0pt;line-height: 9pt;text-align: right;">server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.6 <span class="s74">Two-layer web application architecture.</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">nection can be broken as soon as a request is satisﬁed, leaving connections available for other requests.<span class="s76">1</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most web applications, however, need session information to allow meaningful user interaction. For instance, applications typically restrict access to information, and therefore need to authenticate users. Authentication should be done once per session, and further interactions in the session should not require reauthentication.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To implement sessions in spite of connections getting closed, extra information has to be stored at the client and returned with each request in a session; the server uses this information to identify that a request is part of a user session. Extra information about the session also has to be maintained at the server.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">This extra information is usually maintained in the form of a <span class="s63">cookie </span>at the client; a cookie is simply a small piece of text containing identifying information and with an associated name. For example, <span class="s49">google.com </span>may set a cookie with the name <span class="s49">prefs</span>, which encodes preferences set by the user such as the preferred language and the num- ber of answers displayed per page. On each search request, <span class="s49">google.com </span>can retrieve the cookie named <span class="s49">prefs </span>from the user’s browser, and display results according to the speciﬁed preferences. A domain (web site) is permitted to retrieve only cookies that it has set, not cookies set by other domains, and cookie names can be reused across domains.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For the purpose of tracking a user session, an application may generate a session identiﬁer (usually a random number not currently in use as a session identiﬁer), and send a cookie named (for instance) <span class="s49">sessionid </span>containing the session identiﬁer. The session identiﬁer is also stored locally at the server. When a request comes in, the application server requests the cookie named <span class="s49">sessionid </span>from the client. If the client</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_2208.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">1<span class="s78">For performance reasons, connections may be kept open for a short while, to allow subsequent requests to reuse the connection. However, there is no guarantee that the connection will be kept open, and applications must be designed assuming the connection may be closed as soon as a request is serviced.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark187">does not have the cookie stored, or returns a value that is not currently recorded as a valid session identiﬁer at the server, the application concludes that the request is not part of a current session. If the cookie value matches a stored session identiﬁer, the request is identiﬁed as part of an ongoing session.</a><a name="bookmark207">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If an application needs to identify users securely, it can set the cookie only after authenticating the user; for example a user may be authenticated only when a valid user name and password are submitted.<span class="s76">2</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">For applications that do not require high security, such as publicly available news sites, cookies can be stored permanently at the browser and at the server; they identify the user on subsequent visits to the same site, without any identiﬁcation information being typed in. For applications that require higher security, the server may invalidate (drop) the session after a time-out period, or when the user logs out. (Typically a user logs out by clicking on a logout button, which submits a logout form, whose action is to invalidate the current session.) Invalidating a session merely consists of dropping the session identiﬁer from the list of active sessions at the application server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part183.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part185.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
