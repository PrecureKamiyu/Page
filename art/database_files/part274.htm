<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part273.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part275.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Exercises</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 124pt;text-indent: -34pt;text-align: left;">14.16  <span class="p">When is it preferable to use a dense index rather than a sparse index? Explain your answer.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 89pt;text-indent: 0pt;text-align: left;">14.17  <span class="p">What is the diﬀerence between a clustering index and a secondary index?</span></p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -34pt;text-align: left;"><b>14.18 </b>For each B<span class="s181">+</span>-tree of Exercise 14.3, show the steps involved in the following queries:</p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;text-align: left;">a.  Find records with a search-key value of 11.</p><p style="padding-top: 6pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">b.  Find records with a search-key value between 7 and 17, inclusive.</p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -34pt;text-align: justify;"><b>14.19  </b>The solution presented in Section 14.3.5 to deal with nonunique search keys added an extra attribute to the search key. What eﬀect could this change have on the height of the B<span class="s181">+</span>-tree?</p><p style="padding-top: 5pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>14.20  </b>Suppose there is a relation <i>r</i>(<i>A</i>, <i>B</i>, <i>C</i>), with a B<span class="s181">+</span>-tree index with search key (<i>A</i>, <i>B</i>).</p><p style="padding-top: 7pt;padding-left: 150pt;text-indent: -18pt;line-height: 70%;text-align: justify;">a.  What is the worst-case cost of ﬁnding records satisfying 10 <span class="s83">&lt; </span><i>A </i><span class="s83">&lt; </span>50 using this index, in terms of the number of records retrieved <i>n</i><span class="s98">1</span> and the</p><p style="padding-top: 1pt;padding-left: 149pt;text-indent: 0pt;text-align: left;">height <i>h </i>of the tree?</p><p style="padding-top: 8pt;padding-left: 149pt;text-indent: -19pt;line-height: 65%;text-align: justify;">b.  What is the worst-case cost of ﬁnding records satisfying 10 <span class="s83">&lt; </span><i>A </i><span class="s83">&lt; </span>50 <span class="s15">∧ </span>5 <span class="s83">&lt; </span><i>B </i><span class="s83">&lt; </span>10 using this index, in terms of the number of records <i>n</i><span class="s98">2</span> that satisfy this selection, as well as <i>n</i><span class="s98">1</span> and <i>h </i>deﬁned above?</p><p style="padding-top: 8pt;padding-left: 150pt;text-indent: -18pt;line-height: 84%;text-align: justify;">c.  Under what conditions on <i>n</i><span class="s98">1</span> and <i>n</i><span class="s98">2</span> would the index be an eﬃcient way of ﬁnding records satisfying 10 <span class="s83">&lt; </span><i>A </i><span class="s83">&lt; </span>50 <span class="s15">∧ </span>5 <span class="s83">&lt; </span><i>B </i><span class="s83">&lt; </span>10?</p><p style="padding-top: 2pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>14.21 </b>Suppose you have to createa B<span class="s181">+</span>-tree index on a large number of names, where the maximum size of a name may be quite large (say 40 characters) and the av- erage name is itself large (say 10 characters). Explain how preﬁx compression can be used to maximize the average fanout of nonleaf nodes.</p><p style="padding-top: 5pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>14.22  </b>Suppose a relation is stored in a B<span class="s181">+</span>-tree ﬁle organization. Suppose secondary indices store record identiﬁers that are pointers to records on disk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 181pt;text-indent: -18pt;text-align: left;"><a name="bookmark288">a.  What would be the eﬀect on the secondary indices if a node split hap- pened in the ﬁle organization?</a><a name="bookmark321">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: -19pt;text-align: left;">b. What would be the cost of updating all aﬀected records in a secondary index?</p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: -18pt;text-align: left;">c.  How does using the search key of the ﬁle organization as a logical record identiﬁer solve this problem?</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">d.  What is the extra cost due to the use of such logical record identiﬁers?</p><p style="padding-top: 8pt;padding-left: 155pt;text-indent: -35pt;text-align: justify;"><b>14.23 </b>What trade-oﬀs do write-optimized indices pose as compared to B<span class="s181">+</span>-tree in- dices?</p><p style="padding-top: 6pt;padding-left: 155pt;text-indent: -35pt;text-align: justify;"><b>14.24  </b>An <i>existence bitmap </i>has a bit for each record position, with the bit set to 1 if the record exists, and 0 if there is no record at that position (for example, if the record were deleted). Show how to compute the existence bitmap from other bitmaps. Make sure that your technique works even in the presence of null values by using a bitmap for the value <i>null</i>.</p><p class="s46" style="padding-top: 6pt;padding-left: 155pt;text-indent: -35pt;text-align: justify;">14.25 <span class="p">Spatial indices that can index spatial intervals can conceptually be used to in- dex temporal data by treating valid time as a time interval. What is the problem with doing so, and how is the problem solved?</span></p><p class="s46" style="padding-top: 6pt;padding-left: 155pt;text-indent: -35pt;text-align: justify;">14.26  <span class="p">Some attributes of relations may contain sensitive data, and may be required to be stored in an encrypted fashion. How does data encryption aﬀect index schemes? In particular, how might it aﬀect schemes that attempt to store data in sorted order?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part273.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part275.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
