<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary Dialogue on Memory Virtualization</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part257.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part259.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 2pt;padding-left: 43pt;text-indent: 0pt;text-align: left;">Summary Dialogue on Memory Virtualization</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Student: <i>(Gulps) Wow, that was a lot of material.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Professor: <i>Yes, and?</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Student: <i>Well, how am I supposed to remember it all? You know, for the exam?</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Professor: <i>Goodness, I hope that’s not why you are trying to remember it.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Student: <i>Why should I then?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Come on, I thought you knew better. You’re trying to learn some- thing here, so that when you go off into the world, you’ll understand how systems actually work.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>Hmm... can you give an example?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Sure! One time back in graduate school, my friends and I were measuring how long memory accesses took, and once in a while the numbers were way higher than we expected; we thought all the data was fitting nicely into the second-level hardware cache, you see, and thus should have been really fast to access.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Student: <i>(nods)</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>We couldn’t figure out what was going on. So what do you do in such a case? Easy, ask a professor! So we went and asked one of our professors, who looked at the graph we had produced, and simply said “TLB”. Aha! Of course, TLB misses! Why didn’t we think of that? Having a good model of how virtual memory works helps diagnose all sorts of interesting performance problems.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>I think I see. I’m trying to build these mental models of how things work, so that when I’m out there working on my own, I won’t be surprised when a system doesn’t quite behave as expected. I should even be able to anticipate how the system will work just by thinking about it.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Exactly. So what have you learned? What’s in your mental model of how virtual memory works?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Well, I think I now have a pretty good idea of what happens when memory is referenced by a process, which, as you’ve said many times, happens</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: center;">255</p><p style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">256                 S<span class="s7">UMMARY </span>D<span class="s7">IALOGUE ON </span>M<span class="s7">EMORY </span>V<span class="s7">IRTUALIZATION</span></p><p style="padding-left: 12pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="460" height="1" alt="image" src="Image_306.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">on each instruction fetch as well as explicit loads and stores.</p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">Professor: <i>Sounds good – tell me more.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: left;">Student: <i>Well, one thing I’ll always remember is that the addresses we see in a user program, written in C for example...</i></p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">Professor: <i>What other language is there?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>(continuing) ... Yes, I know you like C. So do I! Anyhow, as I was saying, I now really know that all addresses that we can observe within a program are virtual addresses; that I, as a programmer, am just given this illusion of where data and code are in memory. I used to think it was cool that I could print the address of a pointer, but now I find it frustrating – it’s just a virtual address! I can’t see the real physical address where the data lives.</i></p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">Professor: <i>Nope, the OS definitely hides that from you. What else?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Well, I think the TLB is a really key piece, providing the system with a small hardware cache of address translations. Page tables are usually quite large and hence live in big and slow memories. Without that TLB, programs would certainly run a great deal more slowly. Seems like the TLB truly makes virtualizing memory possible. I couldn’t imagine building a system without one! And I shudder at the thought of a program with a working set that exceeds the coverage of the TLB: with all those TLB misses, it would be hard to watch.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Yes, cover the eyes of the children! Beyond the TLB, what did you learn?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>I also now understand that the page table is one of those data structures you need to know about; it’s just a data structure, though, and that means almost any structure could be used. We started with simple structures, like arrays (a.k.a. linear page tables), and advanced all the way up to multi-level tables (which look like trees), and even crazier things like pageable page tables in kernel virtual memory. All to save a little space in memory!</i></p><p class="s27" style="padding-top: 2pt;padding-left: 68pt;text-indent: 0pt;text-align: justify;">Professor: <i>Indeed.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>And here’s one more important thing: I learned that the address trans- lation structures need to be flexible enough to support what programmers want to do with their address spaces. Structures like the multi-level table are perfect in this sense; they only create table space when the user needs a portion of the address space, and thus there is little waste. Earlier attempts, like the simple base and bounds register, just weren’t flexible enough; the structures need to match what users expect and want out of their virtual memory system.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>That’s a nice perspective. What about all of the stuff we learned about swapping to disk?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Well, it’s certainly fun to study, and good to know how page replace- ment works. Some of the basic policies are kind of obvious (like LRU, for ex- ample), but building a real virtual memory system seems more interesting, like we saw in the VMS case study. But somehow, I found the mechanisms more interesting, and the policies less so.</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="460" height="1" alt="image" src="Image_307.png"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">S<span class="s7">UMMARY </span>D<span class="s7">IALOGUE ON </span>M<span class="s7">EMORY </span>V<span class="s7">IRTUALIZATION</span><span class="s133">                   </span>257</p><p class="s27" style="padding-top: 17pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Professor: <i>Oh, why is that?</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Well, as you said, in the end the best solution to policy problems is simple: buy more memory. But the mechanisms you need to understand to know how stuff really works. Speaking of which...</i></p><p class="s27" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Professor: <i>Yes?</i></p><p class="s6" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><b>Student: </b>Well, my machine is running a little slowly these days<span class="s53"> </span>and memory</p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">certainly doesn’t cost that much...</p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Professor: <i>Oh fine, fine! Here’s a few bucks. Go and get yourself some DRAM, cheapskate.</i></p><p class="s27" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 92%;text-align: justify;">Student: <i>Thanks professor! I’ll never swap to disk again – or, if I do, at least I’ll know what’s actually going on!</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span class="s4">Q</span>c 2014, A<span class="s7">RPACI</span>-D<span class="s7">USSEAU</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 117pt;text-indent: 0pt;line-height: 89%;text-align: right;">T<span class="s7">HREE </span>E<span class="s7">ASY </span>P<span class="s7">IECES</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: center;">Part II</h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part257.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part259.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
