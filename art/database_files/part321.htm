<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>17.11  Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part320.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part322.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">17.11  <span style=" color: #00AEEF;">Summary</span></p><p class="s13" style="padding-top: 9pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">A </span>transaction <span class="p">is a </span>unit <span class="p">of program execution that accesses and possibly updates various data items. Understanding the concept of a transaction is critical for un- derstanding and implementing updates of data in a database in such a way that concurrent executions and failures of various forms do not result in the database becoming inconsistent.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Transactions are required to have the <span class="s41">ACID </span>properties: atomicity, consistency, iso- lation, and durability.</p><p class="s50" style="padding-top: 9pt;padding-left: 122pt;text-indent: -8pt;line-height: 76%;text-align: justify;">° <span class="s51">Atomicity ensures that either all the eﬀects of a transaction are reﬂected in the database, or none are; a failure cannot leave the database in a state where a</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;">transaction is partially executed.</p><p class="s50" style="padding-top: 8pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s51">Consistency ensures that, if the database is initially consistent, the execution of the transaction (by itself) leaves the database in a consistent state.</span></p><p class="s50" style="padding-top: 9pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s51">Isolation ensures that concurrently executing transactions are isolated from one another, so that each has the impression that no other transaction is exe-</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: left;">cuting concurrently with it.</p><p class="s50" style="padding-top: 8pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s51">Durability ensures that, once a transaction has been committed, that transac- tion’s updates do not get lost, even if there is a system failure.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Concurrent execution of transactions improves throughput of transactions and system utilization and also reduces the waiting time of transactions.</span></p><p class="s40" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>The various types of storage in a computer are volatile storage, non-volatile storage, and stable storage. Data in volatile storage, such as in <span class="s41">RAM</span>, are lost when the computer crashes. Data in non-volatile storage, such as disk, are not lost when</p><p class="s66" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">17.11 <span style=" color: #00AEEF;">Summary  </span><span class="s164">829</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: justify;">the computer crashes but may occasionally be lost because of failures such as disk crashes. Data in stable storage are never lost.</p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Stable storage that must be accessible online is approximated with mirrored disks, or other forms of <span class="s41">RAID</span>, which provide redundant data storage. Oﬄine, or archival, stable storage may consist of multiple tape copies of data stored in physically se- cure locations.</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">When several transactions execute concurrently on the database, the consistency of data may no longer be preserved. It is therefore necessary for the system to control the interaction among the concurrent transactions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: left;">° <span class="s51">Since a transaction is a unit that preserves consistency, a serial execution of transactions guarantees that consistency is preserved.</span></p><p style="padding-top: 9pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: left;"><span class="s50">° </span><span class="s51">A </span><i>schedule </i>captures the key actions of transactions that aﬀect concurrent ex- ecution, such as <span class="s49">read </span>and <span class="s49">write </span>operations, while abstracting away internal</p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;">details of the execution of the transaction.</p><p class="s50" style="padding-top: 8pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: left;">° <span class="s51">We require that any schedule produced by concurrent processing of a set of transactions will have an eﬀect equivalent to a schedule produced when these</span></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: left;">transactions are run serially in some order.</p><p class="s50" style="padding-top: 6pt;padding-left: 145pt;text-indent: 0pt;text-align: justify;">° <span class="s51">A system that guarantees this property is said to ensure </span><span class="s13">serializability</span><span class="p">.</span></p><p class="s50" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">° <span class="s51">There are several diﬀerent notions of equivalence leading to the concepts of</span></p><p class="s13" style="padding-left: 153pt;text-indent: 0pt;line-height: 11pt;text-align: left;">conflict serializability <span class="p">and </span>view serializability<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Serializability of schedules generated by concurrently executing transactions can be ensured through one of a variety of mechanisms called </span><span class="s13">concurrency-control </span><span class="p">poli- cies.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">We can test a given schedule for conﬂict serializability by constructing a </span><span class="s13">prece- dence graph </span><span class="p">for the schedule and by searching for the absence of cycles in the graph. However, there are more eﬃcient concurrency-control policies for ensur- ing serializability.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">Schedules must be recoverable, to make sure that if transaction </span>a <span class="p">sees the eﬀects of transaction </span>b<span class="p">, and </span>b <span class="p">then aborts, then </span>a <span class="p">also gets aborted.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Schedules should preferably be cascadeless, so that the abort of a transaction does not result in cascading aborts of other transactions. Cascadelessness is ensured by allowing transactions to only read committed data.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The concurrency-control management component of the database is responsible for handling the concurrency-control policies. Techniques include locking, times- tamp ordering, and snapshot isolation. Chapter 18 describes concurrency-control policies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">Database systems oﬀer isolation levels weaker than serializability to allow less re- striction of concurrency and thus improved performance. This introduces a risk of inconsistency that some applications ﬁnd acceptable.</span></p><p class="s46" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;line-height: 15pt;text-align: justify;"><span class="s39">• </span><span class="s40">Ensuring correct concurrent execution in the presence of </span><span class="s41">SQL </span>update<span class="p">, </span>insert<span class="p">, and</span></p><p class="s46" style="padding-left: 56pt;text-indent: 0pt;line-height: 13pt;text-align: center;">delete <span class="p">operations requires additional care due to the phantom phenomenon.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part320.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part322.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
