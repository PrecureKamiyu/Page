<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Relational Database Design</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part150.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part152.htm">下一个 &gt;</a></p><p class="s62" style="padding-top: 11pt;padding-left: 39pt;text-indent: 0pt;text-align: center;"><a name="bookmark133">Relational Database Design</a><a name="bookmark134">&zwnj;</a><a name="bookmark162">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">In this chapter, we consider the problem of designing a schema for a relational database. Many of the issues in doing so are similar to design issues we considered in Chapter 6 using the <span class="s44">E-R </span>model.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In general, the goal of relational database design is to generate a set of relation schemas that allows us to store information without unnecessary redundancy, yet also allows us to retrieve information easily. This is accomplished by designing schemas that are in an appropriate <i>normal form</i>. To determine whether a relation schema is in one of the desirable normal forms, we need information about the real-world enterprise that we are modeling with the database. Some of this information exists in a well-designed <span class="s44">E-R </span>diagram, but additional information about the enterprise may be needed as well.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In this chapter, we introduce a formal approach to relational database design based on the notion of functional dependencies. We then deﬁne normal forms in terms of functional dependencies and other types of data dependencies. First, however, we view the problem of relational design from the standpoint of the schemas derived from a given entity-relationship design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part152.htm">7.1   Features of Good Relational Designs</a><a class="toc0" href="part153.htm">7.2   Decomposition Using Functional Dependencies</a><a class="toc0" href="part154.htm">7.3   Normal Forms</a><a class="toc0" href="part155.htm">7.4   Functional-Dependency Theory</a><a class="toc0" href="part156.htm">7.5   Algorithms for Decomposition Using Functional Dependencies</a><a class="toc0" href="part157.htm">7.6   Decomposition Using Multivalued Dependencies</a><a class="toc0" href="part158.htm">7.7   More Normal Forms</a><a class="toc0" href="part159.htm">7.8   Atomic Domains and First Normal Form</a><a class="toc0" href="part160.htm">7.9   Database-Design Process</a><a class="toc0" href="part161.htm">7.10  Modeling Temporal Data</a><a class="toc0" href="part162.htm">7.11   Summary</a><a class="toc0" href="part163.htm">Review Terms</a><a class="toc0" href="part164.htm">Practice Exercises</a><a class="toc0" href="part165.htm">Exercises</a><a class="toc0" href="part166.htm">Further Reading</a><a class="toc0" href="part167.htm">Bibliography</a><a class="toc0" href="part168.htm">Credits</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part150.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part152.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
