<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Further Reading</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part305.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part307.htm">下一个 &gt;</a></p><p class="s45" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Further Reading</p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The seminal work of [Selinger et al. (1979)] describes access-path selection in the System R optimizer, which was one of the earliest relational-query optimizers. Query processing in Starburst, described in [Haas et al. (1989)], forms the basis for query optimization in <span class="s44">IBM DB2</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">[Graefe and McKenna (1993)] describes Volcano, an equivalence-rule–based query optimizer that, along with its successor Cascades ([Graefe (1995)]), forms the basis of query optimization in Microsoft <span class="s44">SQL S</span>erver. [Moerkotte (2014)] provides ex- tensive textbook coverage of query optimization, including optimizations of the dy- namic programming algorithm for join order optimization to avoid considering Carte- sian products. Avoiding generation of plans with Cartesian products can result in sub- stantial reduction in optimization cost for common queries.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The bibliographic notes for this chapter, available online, provides references to research on a variety of optimization techniques, including optimization of queries with aggregates, with outer joins, nested subqueries, top-K queries, join minimization, optimization of update queries, materialized view maintenance and view matching, index and materialized view selection, parametric query optimization, and multiquery optimization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part305.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part307.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
