<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Practice Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 12pt;padding-left: 36pt;text-indent: 0pt;text-align: left;">Practice Exercises</p><p class="s46" style="padding-top: 12pt;padding-left: 94pt;text-indent: 0pt;text-align: left;">5.1 <span class="p">Consider the following relations for a company database:</span></p><p class="s13" style="padding-top: 5pt;padding-left: 122pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>emp <span class="p">(</span>ename<span class="p">, </span>dname<span class="p">, </span>salary<span class="p">)</span></p><p class="s13" style="padding-top: 3pt;padding-left: 122pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>mgr <span class="p">(</span>ename<span class="p">, </span>mname<span class="p">)</span></p><p style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">and the Java code in Figure 5.20, which uses the <span class="s44">JDBC API</span>. Assume that the userid, password, machine name, etc. are all okay. Describe in concise English what the Java program does. (That is, produce an English sentence like “It ﬁnds the manager of the toy department,” not a line-by-line description of what each Java statement does.)</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.2  </b>Write a Java method using <span class="s44">JDBC </span>metadata features that takes a <span class="s49">ResultSet </span>as an input parameter and prints out the result in tabular form, with appropriate names as column headings.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.3  </b>Suppose that we wish to ﬁnd all courses that must be taken before some given course. That means ﬁnding not only the prerequisites of that course, but prereq- uisites of prerequisites, and so on. Write a complete Java program using <span class="s44">JDBC </span>that:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1304.png"/></span></p><p class="s39" style="padding-top: 5pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">• <span class="s40">Takes a </span><span class="s13">course id </span><span class="p">value from the keyboard.</span></p><p class="s40" style="padding-top: 3pt;padding-left: 122pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>Finds prerequisites of that course using an <span class="s41">SQL </span>query submitted via <span class="s41">JDBC</span>.</p><p class="s39" style="padding-top: 3pt;padding-left: 138pt;text-indent: -16pt;text-align: left;">• <span class="s40">For each course returned, ﬁnds its prerequisites and continues this process iteratively until no new prerequisite courses are found.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">• <span class="s40">Prints out the result.</span></p><p style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">For this exercise, do not use a recursive <span class="s44">SQL </span>query, but rather use the iterative approach described previously. A well-developed solution will be robust to the error case where a university has accidentally created a cycle of prerequisites (that is, for example, course <i>A </i>is a prerequisite for course <i>B</i>, course <i>B </i>is a pre- requisite for course <i>C</i>, and course <i>C </i>is a prerequisite for course <i>A</i>).</p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Practice Exercises  <span class="s164">233</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1305.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 143pt;text-indent: 0pt;text-align: left;">import java.sql.*; public class Mystery {</p><p class="s49" style="padding-left: 167pt;text-indent: -15pt;text-align: left;">public static void main(String[] args) { try (</p><p class="s49" style="padding-left: 198pt;text-indent: -15pt;text-align: left;">Connection con=DriverManager.getConnection( &quot;jdbc:oracle:thin:star/X@//edgar.cse.lehigh.edu:1521/XE&quot;);</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">q = &quot;select mname from mgr where ename = ?&quot;; PreparedStatement stmt=con.prepareStatement();</p><p class="s49" style="padding-left: 167pt;text-indent: 0pt;line-height: 12pt;text-align: left;">)</p><p class="s49" style="padding-left: 167pt;text-indent: 0pt;text-align: left;">{</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">String q;</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">String empName = &quot;dog&quot;; boolean more;</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">ResultSet result; do {</p><p class="s49" style="padding-left: 198pt;text-indent: 0pt;text-align: left;">stmt.setString(1, empName); result = stmt.executeQuery(q); more = result.next();</p><p class="s49" style="padding-left: 198pt;text-indent: 0pt;line-height: 12pt;text-align: left;">if (more) {</p><p class="s49" style="padding-left: 213pt;text-indent: 0pt;text-align: left;">empName = result.getString(&quot;mname&quot;); System.out.println (empName);</p><p class="s49" style="padding-left: 198pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">} while (more);</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">s.close();</p><p class="s49" style="padding-left: 183pt;text-indent: 0pt;text-align: left;">con.close();</p><p class="s49" style="padding-left: 167pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 183pt;text-indent: -15pt;text-align: left;">catch(Exception e){ e.printStackTrace();</p><p class="s49" style="padding-left: 167pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 152pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 143pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1306.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 84pt;text-indent: 0pt;text-align: center;"><span class="s73">Figure 5.20 </span>Java code for Exercise 5.1 (using Oracle <span class="s157">JDBC</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">5.4 <span class="p">Describe the circumstances in which you would choose to use embedded </span><span class="s44">SQL</span></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: center;">rather than <span class="s44">SQL </span>alone or only a general-purpose programming language.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -25pt;text-align: justify;"><b>5.5  </b>Show how to enforce the constraint “an instructor cannot teach two diﬀerent sections in a semester in the same time slot.” using a trigger (remember that the constraint can be violated by changes to the <i>teaches </i>relation as well as to the <i>section </i>relation).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1307.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1308.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1309.png"/></span></p><p style="padding-top: 4pt;padding-left: 154pt;text-indent: 0pt;text-align: left;"><i>branch </i>(<u><i>branch name</i></u>, <i>branch city, assets</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1310.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1311.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1312.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1313.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1314.png"/></span></p><p style="padding-left: 154pt;text-indent: 0pt;text-align: left;"><i>customer </i>(<u><i>customer name</i></u>, <i>customer street, cust omer city</i>) <i>loan </i>(<u><i>loan number</i></u>, <i>branch name, amount</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1315.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1316.png"/></span></p><p style="padding-left: 154pt;text-indent: 0pt;text-align: left;"><i>borrower </i>(<u><i>customer name</i></u>, <u><i>loan number</i></u>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1317.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1318.png"/></span></p><p style="padding-left: 154pt;text-indent: 0pt;text-align: left;"><i>account </i>(<u><i>account number</i></u>, <i>branch name, balance </i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1319.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1320.png"/></span></p><p style="padding-left: 154pt;text-indent: 0pt;text-align: left;"><i>depositor </i>(<u><i>customer name</i></u>, <u><i>account number</i></u>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_1321.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 171pt;text-indent: 0pt;text-align: left;">Figure 5.21 <span class="s74">Banking database for Exercise 5.6.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1322.png"/></span></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.6 </b>Consider the bank database of Figure 5.21. Let us deﬁne a view <i>branch cust </i>as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1323.png"/></span></p><p class="s46" style="padding-top: 7pt;padding-left: 152pt;text-indent: 0pt;text-align: left;">create view <i>branch cust </i>as</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1324.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1325.png"/></span></p><p class="s46" style="padding-left: 173pt;text-indent: 0pt;text-align: left;">select <i>branch name, customer name</i></p><p class="s46" style="padding-left: 173pt;text-indent: 0pt;text-align: left;">from <i>depositor, account</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1326.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1327.png"/></span></p><p class="s13" style="padding-left: 173pt;text-indent: 0pt;text-align: left;"><b>where </b>depositor.account number <span class="p">= </span>account.account number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Suppose that the view is <i>materialized</i>; that is, the view is computed and stored. Write triggers to <i>maintain </i>the view, that is, to keep it up-to-date on insertions to <i>depositor </i>or <i>account</i>. It is not necessary to handle deletions or updates. Note that, for simplicity, we have not required the elimination of duplicates.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.7  </b>Consider the bank database of Figure 5.21. Write an <span class="s44">SQL </span>trigger to carry out the following action: On <b>delete </b>of an account, for each customer-owner of the account, check if the owner has any remaining accounts, and if she does not, delete her from the <i>depositor </i>relation.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.8 </b>Given a relation <i>S</i>(<i>student</i>, <i>subject</i>, <i>marks</i>), write a query to ﬁnd the top 10 stu- dents by total marks, by using <span class="s44">SQL </span>ranking. Include all students tied for the ﬁnal spot in the ranking, even if that results in more than 10 total students.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1328.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1329.png"/></span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>5.9 </b>Given a relation <i>nyse</i>(<i>year, month, day, shares traded, dollar volume</i>) with trad- ing data from the New York Stock Exchange, list each trading day in order of number of shares traded, and show each day’s rank.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -29pt;text-align: justify;"><b>5.10  </b>Using the relation from Exercise 5.9, write an <span class="s44">SQL </span>query to generate a report showing the number of shares traded, number of trades, and total dollar volume broken down by year, each month of each year, and each trading day.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -29pt;text-align: justify;"><b>5.11 </b>Show how to express <b>group by cube</b>(<i>a</i>, <i>b</i>, <i>c</i>, <i>d</i>) using <b>rollup</b>; your answer should have only one <b>group by </b>clause.</p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Exercises  <span class="s164">235</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
