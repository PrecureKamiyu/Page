<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>5.6 ICMP: The Internet Control Message Protocol</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link></head><body epub:type="bodymatter">
<section id="P70010119520000000000000000021F0" class="level1"><header><h1 class="title" id="P700101195200000000000000000ADC9" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADC9" epub:type="title"><span class="number">5.6</span> ICMP: The Internet Control Message Protocol</h1></header>
<p id="P700101195200000000000000000ADCA" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADCA">The Internet Control Message Protocol (ICMP), specified in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003ADE" data-foobar="7">[RFC 792]</a>, is used by hosts and routers to communicate network-layer information to each other. The most typical use of ICMP is for error reporting. For example, when running an HTTP session, you may have encountered an error message such as “Destination network unreachable.” This message had its origins in ICMP. At some point, an IP router was unable to find a path to the host specified in your HTTP request. That router created and sent an ICMP message to your host indicating the error.</p>
<p id="P700101195200000000000000000ADCB" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADCB">ICMP is often considered part of IP, but architecturally it lies just above IP, as ICMP messages are carried inside IP datagrams. That is, ICMP messages are carried as IP payload, just as TCP or UDP segments are carried as IP payload. Similarly, when a host receives an IP datagram with ICMP specified as the upper-layer protocol (an upper-layer protocol number of 1), it demultiplexes the datagram’s contents to ICMP, just as it would demultiplex a datagram’s content to TCP or UDP.</p>
<p id="P700101195200000000000000000ADCC" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADCC">ICMP messages have a type and a code field, and contain the header and the first 8 bytes of the IP datagram that caused the ICMP message to be generated in the first place (so that the sender can determine the datagram that caused the error). Selected ICMP message types are shown in <a class="xref" href="#P70010119520000000000000000021F8" data-foobar="1"><span class="label">Figure</span> <span class="number">5.19</span></a>. Note that ICMP messages are used not only for signaling error conditions.</p>
<p id="P700101195200000000000000000ADCD" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADCD">The well-known ping program sends an ICMP type 8 code 0 message to the specified host. The destination host, seeing the echo request, sends back a type 0 code 0 ICMP echo reply. Most TCP/IP implementations support the ping server directly in the operating system; that is, the server is not a process. <span class="label">Chapter</span> <span class="number">11</span> of <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C24" data-foobar="7">[Stevens 1990]</a> provides the source code for the ping client program. Note that the client program needs to be able to instruct the operating system to generate an ICMP message of type 8 code 0.</p>
<p id="P700101195200000000000000000ADCE" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADCE">Another interesting ICMP message is the source quench message. This message is seldom used in practice. Its original purpose was to perform congestion control—to allow a congested router to send an ICMP source quench message to a host to force<span class="pagebreak" title="420" id="P70010119520000000000000000021F7" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021F7" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000021F8" class="figure" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021F8"><img alt="" height="488" width="672" id="P700101195200000000000000000ADCF" data-uri="P70010119520000000000000000055B9" src="../images/4055105019.png"></img>
<figcaption id="P700101195200000000000000000ADD0" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD0"><header><h1 class="title" id="P700101195200000000000000000ADD1" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD1" epub:type="title"><span class="label">Figure </span><span class="number">5.19</span> ICMP message types</h1></header>
</figcaption>
</figure>
<p class="continued" id="P700101195200000000000000000ADD2" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD2">that host to reduce its transmission rate. We have seen in <a class="xref" href="fileP70010119520000000000000000010EC.xhtml#P70010119520000000000000000010EC" data-foobar="7"><span class="label">Chapter</span> <span class="number">3</span></a> that TCP has its own congestion-control mechanism that operates at the transport layer, without the use of network-layer feedback such as the ICMP source quench message.</p>
<p id="P700101195200000000000000000ADD3" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD3">In <a class="xref" href="fileP7001011952000000000000000000458.xhtml#P7001011952000000000000000000458" data-foobar="7"><span class="label">Chapter</span> <span class="number">1</span></a> we introduced the Traceroute program, which allows us to trace a route from a host to any other host in the world.  Interestingly, Traceroute is implemented with ICMP messages. To determine the names and addresses of the routers between source and destination, Traceroute in the source sends a series of ordinary IP datagrams to the destination. Each of these datagrams carries a UDP segment with an unlikely UDP port number. The first of these datagrams has a TTL of 1, the second of 2, the third of 3, and so on. The source also starts timers for each of the datagrams. When the <i>n</i>th datagram arrives at the <i>n</i>th router, the <i>n</i>th router observes that the TTL of the datagram has just expired. According to the rules of the IP protocol, the router discards the datagram and sends an ICMP warning message to the source (type 11 code 0). This warning message includes the name of the router and its IP address. When this ICMP message arrives back at the source, the source obtains the round-trip time from the timer and the name and IP address of the <i>n</i>th router from the ICMP message.</p>
<p id="P700101195200000000000000000ADD4" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD4">How does a Traceroute source know when to stop sending UDP segments? Recall that the source increments the TTL field for each datagram it sends. Thus, one of the datagrams will eventually make it all the way to the destination host. Because this datagram contains a UDP segment with an unlikely port number, the destination <span class="pagebreak" title="421" id="P70010119520000000000000000021FF" data-uri="M05_KURO4140_07_SE_C05.xhtml#P70010119520000000000000000021FF" epub:type="pagebreak" role="doc-pagebreak"></span>host sends a port unreachable ICMP message (type 3 code 3) back to the source. When the source host receives this particular ICMP message, it knows it does not need to send additional probe packets. (The standard Traceroute program actually sends sets of three packets with the same TTL; thus the Traceroute output provides three results for each TTL.)</p>
<p id="P700101195200000000000000000ADD5" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD5">In this manner, the source host learns the number and the identities of routers that lie between it and the destination host and the round-trip time between the two hosts. Note that the Traceroute client program must be able to instruct the operating system to generate UDP datagrams with specific TTL values and must also be able to be notified by its operating system when ICMP messages arrive. Now that you understand how Traceroute works, you may want to go back and play with it some more.</p>
<p id="P700101195200000000000000000ADD6" data-uri="M05_KURO4140_07_SE_C05.xhtml#P700101195200000000000000000ADD6">A new version of ICMP has been defined for IPv6 in RFC 4443. In addition to reorganizing the existing ICMP type and code definitions, ICMPv6 also added new types and codes required by the new IPv6 functionality. These include the “Packet Too Big” type and an “unrecognized IPv6 options” error code.</p>
</section></body></html>