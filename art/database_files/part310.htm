<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Transactions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part309.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part311.htm">下一个 &gt;</a></p><p class="s62" style="padding-top: 4pt;padding-left: 71pt;text-indent: 0pt;text-align: left;"><a name="bookmark366">Transactions</a><a name="bookmark367">&zwnj;</a><a name="bookmark409">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: right;">Often, a collection of several operations on the database appears to be a single unit from the point of view of the database user. For example, a transfer of funds from a checking account to a savings account is a single operation from the customer’s standpoint; within the database system, however, it consists of several operations. It is essential that all these operations occur, or that, in case of a failure, none occur. It would be unacceptable if the checking account were debited but the savings account not credited. Collections of operations that form a single logical unit of work are called trans- actions. A database system must ensure proper execution of transactions despite fail- ures— either the entire transaction executes, or none of it does. Furthermore, it must manage concurrent execution of transactions in a way that avoids the introduction of inconsistency. In our funds-transfer example, a transaction computing the customer’s total balance might see the checking-account balance before it is debited by the funds- transfer transaction, but see the savings balance after it is credited. As a result, it would</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">obtain an incorrect result.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">This chapter introduces the basic concepts of transaction processing. Details on concurrent transaction processing and recovery from failures are in Chapter 18 and Chapter 19, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part311.htm">17.1   Transaction Concept</a><a class="toc0" href="part312.htm">17.2  A Simple Transaction Model</a><a class="toc0" href="part313.htm">17.3  Storage Structure</a><a class="toc0" href="part314.htm">17.4  Transaction Atomicity and Durability</a><a class="toc0" href="part315.htm">17.5  Transaction Isolation</a><a class="toc0" href="part316.htm">17.6  Serializability</a><a class="toc0" href="part317.htm">17.7  Transaction Isolation and Atomicity</a><a class="toc0" href="part318.htm">17.8  Transaction Isolation Levels</a><a class="toc0" href="part319.htm">17.9  Implementation of Isolation Levels</a><a class="toc0" href="part320.htm">17.10  Transactions as SQL Statements</a><a class="toc0" href="part321.htm">17.11  Summary</a><a class="toc0" href="part322.htm">Review Terms</a><a class="toc0" href="part323.htm">Practice Exercises</a><a class="toc0" href="part324.htm">Exercises</a><a class="toc0" href="part325.htm">Further Reading</a><a class="toc0" href="part326.htm">Bibliography</a><a class="toc0" href="part327.htm">Credits</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part309.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part311.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
