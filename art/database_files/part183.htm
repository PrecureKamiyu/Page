<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.1   Application Programs and User Interfaces</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part182.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part184.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">9.1   <span style=" color: #00AEEF;">Application Programs and User Interfaces</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Although many people interact with databases, very few people use a query language to interact with a database system directly. The most common way in which users interact with databases is through an <span class="s63">application program </span>that provides a user interface at the front end and interfaces with a database at the back end. Such applications take input from users, typically through a forms-based interface, and either enter data into a database or extract information from a database based on the user input, and they then generate output, which is displayed to the user.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">As an example of an application, consider a university registration system. Like other such applications, the registration system ﬁrst requires you to identify and authen- ticate yourself, typically by a user name and password. The application then uses your</p><p class="s20" style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">403</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">identity to extract information, such as your name and the courses for which you have registered, from the database and displays the information. The application provides a number of interfaces that let you register for courses and query other information, such as course and instructor information. Organizations use such applications to automate a variety of tasks, such as sales, purchases, accounting and payroll, human-resources management, and inventory management, among many others.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Application programs may be used even when it is not apparent that they are being used. For example, a news site may provide a page that is transparently customized to individual users, even if the user does not explicitly ﬁll any forms when interacting with the site. To do so, it actually runs an application program that generates a customized page for each user; customization can, for example, be based on the history of articles browsed by the user.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">A typical application program includes a front-end component, which deals with the user interface, a backend component, which communicates with a database, and a middle layer, which contains “business logic,” that is, code that executes speciﬁc requests for information or updates, enforcing rules of business such as what actions should be carried out to execute a given task or who can carry out what task.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Applications such as airline reservations have been around since the 1960s. In the early days of computer applications, applications ran on large “mainframe” com- puters, and users interacted with the application through terminals, some of which even supported forms. The growth of personal computers resulted in the development of database applications with graphical user interfaces, or <span class="s44">GUI</span>s. These interfaces de- pended on code running on a personal computer that directly communicated with a shared database. Such an architecture was called a <i>client–server architecture</i>. There were two drawbacks to using such applications: ﬁrst, user machines had direct access to databases, leading to security risks. Second, any change to the application or the database required all the copies of the application, located on individual computers, to be updated together.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">Two approaches have evolved to avoid the above problems:</p><p style="padding-top: 5pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">Web browsers provide a </span><i>universal front end</i>, used by all kinds of information services. Browsers use a standardized syntax, the <span class="s63">HyperText Markup Language (</span><span class="s82">HTML</span><span class="s63">) </span>standard, which supports both formatted display of information and cre- ation of forms-based interfaces. The <span class="s44">HTML </span>standard is independent of the operat- ing system or browser, and pretty much every computer today has a web browser installed. Thus a web-based application can be accessed from any computer that is connected to the internet.</p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">Unlike client–server architectures, there is no need to install any application- speciﬁc software on client machines in order to use web-based applications.</p><p style="padding-left: 107pt;text-indent: 15pt;text-align: justify;">However, sophisticated user interfaces, supporting features well beyond what is possible using plain <span class="s44">HTML</span>, are now widely used, and are built with the scripting language JavaScript, which is supported by most web browsers. JavaScript pro- grams, unlike programs written in C, can be run in a safe mode, guaranteeing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 139pt;text-indent: 0pt;text-align: justify;"><a name="bookmark186">they cannot cause security problems. JavaScript programs are downloaded trans- parently to the browser and do not need any explicit software installation on the user’s computer.</a><a name="bookmark206">&zwnj;</a></p><p style="padding-left: 139pt;text-indent: 14pt;text-align: justify;">While the web browser provides the front end for user interaction, application programs constitute the back end. Typically, requests from a browser are sent to a web server, which in turn executes an application program to process the request. A variety of technologies are available for creating application programs that run at the back end, including Java servlets, Java Server Pages (<span class="s44">JSP</span>), Active Server Page (<span class="s44">ASP</span>), or scripting languages such as <span class="s44">PHP </span>and Python.</p><p class="s40" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span>Application programs are installed on individual devices, which are primarily mo- bile devices. They communicate with backend applications through an <span class="s41">API </span>and do not have direct access to the database. The back end application provides services, including user authentication, and ensures that users can only access services that they are authorized to access.</p><p style="padding-left: 139pt;text-indent: 15pt;text-align: justify;">This approach is widely used in mobile applications. One of the motivations for building such applications was to customize the display for the small screen of mobile devices. A second was to allow application code, which can be relatively large, to be downloaded or updated when the device is connected to a high-speed network, instead of downloading such code when a web page is accessed, perhaps over a lower bandwidth or more expensive mobile network.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">With the increasing use of JavaScript code as part of web front ends, the diﬀerence between the two approaches above has today signiﬁcantly decreased. The back end often provides an <span class="s44">API </span>that can be invoked from either mobile app or JavaScript code to carry out any required task at the back end. In fact, the same back end is often used to build multiple front ends, which could include web front ends with JavaScript, and multiple mobile platforms (primarily Android and iOS, today).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part182.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part184.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
