<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Practice Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part289.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part291.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 12pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Practice Exercises</p><p class="s39" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Spatial join</span></p><p class="s39" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Operator tree</span></p><p class="s39" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Materialized evaluation</span></p><p class="s39" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Double buﬀering</span></p><p class="s39" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Pipelined evaluation</span></p><p class="s50" style="padding-top: 12pt;padding-left: 72pt;text-indent: -8pt;line-height: 77%;text-align: left;">° <span class="s51">Demand-driven pipeline (lazy, pulling)</span></p><p class="s50" style="padding-top: 9pt;padding-left: 72pt;text-indent: -8pt;line-height: 77%;text-align: left;">° <span class="s51">Producer-driven pipeline (eager, pushing)</span></p><p class="s50" style="padding-top: 6pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">° <span class="s51">Iterator</span></p><p class="s50" style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">° <span class="s51">Pipeline stages</span></p><p class="s39" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Double-pipelined join</span></p><p class="s39" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">• <span class="s40">Continuous query evaluation</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 124pt;text-indent: -30pt;text-align: justify;">15.1  <span class="p">Assume (for simplicity in this exercise) that only one tuple ﬁts in a block and memory holds at most three blocks. Show the runs created on each pass of the sort-merge algorithm when applied to sort the following tuples on the ﬁrst attribute: (kangaroo, 17), (wallaby, 21), (emu, 1), (wombat, 13), (platypus, 3), (lion, 8), (warthog, 4), (zebra, 11), (meerkat, 6), (hyena, 9), (hornbill, 2), (baboon, 12).</span></p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -30pt;text-align: justify;"><b>15.2 </b>Consider the bank database of Figure 15.14, where the primary keys are un- derlined, and the following <span class="s44">SQL </span>query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2794.png"/></span></p><p class="s13" style="padding-left: 173pt;text-indent: 0pt;text-align: left;"><b>select </b>T<span class="p">.</span>branch name</p><p class="s13" style="padding-left: 173pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><b>from </b>branch T<span class="p">, </span>branch S</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2795.png"/></span></p><p class="s13" style="padding-left: 173pt;text-indent: 0pt;line-height: 20pt;text-align: left;"><b>where </b>T.assets <span class="s83">&gt; </span>S.assets <b>and </b>S.branch city <span class="p">= “Brooklyn”</span></p><p style="padding-top: 7pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">Write an eﬃcient relational-algebra expression that is equivalent to this query. Justify your choice.</p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -30pt;text-align: justify;"><b>15.3  </b>Let relations <i>r</i><span class="s98">1</span>(<i>A</i>, <i>B</i>, <i>C</i>) and <i>r</i><span class="s98">2</span>(<i>C</i>, <i>D</i>, <i>E</i>) have the following properties: <i>r</i><span class="s98">1</span> has 20,000 tuples, <i>r</i><span class="s98">2</span> has 45,000 tuples, 25 tuples of <i>r</i><span class="s98">1</span> ﬁt on one block, and 30 tuples of <i>r</i><span class="s98">2</span> ﬁt on one block. Estimate the number of block transfers and seeks required using each of the following join strategies for <i>r</i><span class="s98">1</span> <span class="s86">⋈ </span><i>r</i><span class="s98">2</span>:</p><p style="padding-top: 4pt;padding-left: 131pt;text-indent: 0pt;text-align: justify;">a. Nested-loop join.</p><p style="padding-top: 6pt;padding-left: 131pt;text-indent: 0pt;text-align: justify;">b. Block nested-loop join.</p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Practice Exercises  <span class="s164">737</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 163pt;text-indent: 0pt;text-align: left;">c. Merge join.</p><p style="padding-top: 6pt;padding-left: 162pt;text-indent: 0pt;text-align: left;">d. Hash join.</p><p class="s46" style="padding-top: 10pt;padding-left: 155pt;text-indent: -30pt;text-align: justify;">15.4 <span class="p">The indexed nested-loop join algorithm described in Section 15.5.3 can be ineﬃcient if the index is a secondary index and there are multiple tuples with the same value for the join attributes. Why is it ineﬃcient? Describe a way, using sorting, to reduce the cost of retrieving tuples of the inner relation. Under what conditions would this algorithm be more eﬃcient than hybrid merge join?</span></p><p style="padding-top: 7pt;padding-left: 155pt;text-indent: -30pt;line-height: 92%;text-align: justify;"><b>15.5  </b>Let <i>r </i>and <i>s </i>be relations with no indices, and assume that the relations are not sorted. Assuming inﬁnite memory, what is the lowest-cost way (in terms of <span class="s44">I/O </span>operations) to compute <i>r </i><span class="s86">⋈ </span><i>s</i>? What is the amount of memory required for this algorithm?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2796.png"/></span></p><p style="padding-top: 6pt;padding-left: 155pt;text-indent: -30pt;text-align: justify;"><b>15.6 </b>Consider the bank database of Figure 15.14, where the primary keys are un- derlined. Suppose that a B<span class="s181">+</span>-tree index on <i>branch city </i>is available on relation <i>branch</i>, and that no other index is available. List diﬀerent ways to handle the following selections that involve negation:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_2797.png"/></span></p><p class="s119" style="padding-top: 9pt;padding-left: 163pt;text-indent: 0pt;text-align: left;"><span class="s122">a. </span><span class="s117">σ</span><span class="s370">¬</span>(<i>branch city</i><span class="s126">&lt;</span>“Brooklyn”)<span class="s120">(</span><span class="s121">branch</span><span class="s122">)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_2798.png"/></span></p><p class="s119" style="padding-left: 162pt;text-indent: 0pt;text-align: left;"><span class="s129">b. </span><span class="s125">σ</span><span class="s370">¬</span>(<i>branch city</i><span class="s118">=</span>“Brooklyn”)<span class="s127">(</span><span class="s128">branch</span><span class="s129">)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="1" alt="image" src="Image_2799.png"/></span></p><p class="s119" style="padding-top: 3pt;padding-left: 163pt;text-indent: 0pt;text-align: left;"><span class="s122">c. </span><span class="s117">σ</span><span class="s370">¬</span>(<i>branch city</i><span class="s126">&lt;</span>“Brooklyn” <span class="s118">∨ </span><i>assets</i><span class="s126">&lt;</span>5000)<span class="s120">(</span><span class="s121">branch</span><span class="s122">)</span></p><p style="padding-top: 4pt;padding-left: 155pt;text-indent: -30pt;text-align: justify;"><b>15.7 </b>Write pseudocode for an iterator that implements indexed nested-loop join, where the outer relation is pipelined. Your pseudocode must deﬁne the stan- dard iterator functions <i>open</i>(), <i>next</i>(), and <i>close</i>(). Show what state information the iterator must maintain between calls.</p><p class="s46" style="padding-top: 6pt;padding-left: 155pt;text-indent: -30pt;text-align: justify;">15.8 <span class="p">Design sort-based and hash-based algorithms for computing the relational di- vision operation (see Practice Exercise 2.9 for a deﬁnition of the division op- eration).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2800.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2801.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2802.png"/></span></p><p style="padding-top: 4pt;padding-left: 187pt;text-indent: 0pt;text-align: left;"><i>branch</i>(<u><i>branch name</i></u>, <i>branch city, assets</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2803.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2804.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2805.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2806.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2807.png"/></span></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><i>customer </i>(<u><i>customer name</i></u>, <i>customer street, customer city</i>) <i>loan </i>(<u><i>loan number</i></u>, <i>branch name, amount</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2808.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2809.png"/></span></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><i>borrower </i>(<u><i>customer name</i></u>, <u><i>loan number</i></u>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2810.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2811.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2812.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2813.png"/></span></p><p style="padding-left: 187pt;text-indent: 0pt;text-align: left;"><i>account </i>(<u><i>account number</i></u>, <i>branch name, balance</i>) <i>depositor </i>(<u><i>customer name</i></u>, <u><i>account number</i></u>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2814.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 241pt;text-indent: 0pt;text-align: left;">Figure 15.14 <span class="s74">Bank database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 124pt;text-indent: -30pt;text-align: justify;">15.9  <span class="p">What is the eﬀect on the cost of merging runs if the number of buﬀer blocks per run is increased while overall memory available for buﬀering runs remains ﬁxed?</span></p><p class="s46" style="padding-top: 6pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;">15.10  <span class="p">Consider the following extended relational-algebra operators. Describe how to implement each operation using sorting and using hashing.</span></p><p style="padding-top: 2pt;padding-left: 150pt;text-indent: -18pt;line-height: 83%;text-align: justify;">a. <span class="s63">Semijoin </span>(<span class="s86">⋉</span><span class="s136">θ</span>): The multiset semijoin operator <i>r</i><span class="s86">⋉</span><span class="s136">θ </span><i>s </i>is deﬁned as follows: if a tuple <i>r</i><span class="s97">i </span>appears <i>n </i>times in <i>r</i>, it appears <i>n </i>times in the result of <i>r</i><span class="s86">⋉</span><span class="s136">θ </span>if there is at least one tuple <i>s</i><span class="s97">j </span>such that <i>r</i><span class="s97">i </span>and <i>s</i><span class="s97">j </span>satisfy predicate <span class="s15">θ</span>; otherwise <i>r</i><span class="s97">i </span>does not appear in the result.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="12" height="1" alt="image" src="Image_2815.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="12" height="1" alt="image" src="Image_2816.png"/></span></p><p style="padding-top: 4pt;padding-left: 150pt;text-indent: -19pt;line-height: 82%;text-align: justify;">b. <span class="s63">Anti-semijoin </span>(<span class="s86">⋉</span><span class="s171">θ</span>): The multiset anti-semijoin operator <i>r</i><span class="s86">⋉</span><span class="s171">θ</span><i>s </i>is deﬁned as follows: if a tuple <i>r</i><span class="s97">i </span>appears <i>n </i>times in <i>r</i>, it appears <i>n </i>times in the result of <i>r</i><span class="s86">⋉</span><span class="s136">θ </span>if there does not exist any tuple <i>s</i><span class="s97">j </span>in <i>s </i>such that <i>r</i><span class="s97">i </span>and <i>s</i><span class="s97">j </span>satisfy predicate <span class="s15">θ</span>; otherwise <i>r</i><span class="s97">i </span>does not appear in the result.</p><p style="padding-top: 4pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>15.11 </b>Suppose a query retrieves only the ﬁrst <i>K </i>results of an operation and termi- nates after that. Which choice of demand-driven or producer-driven pipelining (with buﬀering) would be a good choice for such a query? Explain your an- swer.</p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>15.12  </b>Current generation <span class="s44">CPU</span>s include an <i>instruction cache</i>, which caches recently used instructions. A function call then has a signiﬁcant overhead because the set of instructions being executed changes, resulting in cache misses on the instruction cache.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -18pt;text-align: justify;">a. Explain why producer-driven pipelining with buﬀering is likely to result in a better instruction cache hit rate, as compared to demand-driven pipelining.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -19pt;text-align: justify;">b.  Explain why modifying demand-driven pipelining by generating multiple results on one call to <i>next</i>(), and returning them together, can improve the instruction cache hit rate.</p><p style="padding-top: 6pt;padding-left: 124pt;text-indent: -35pt;text-align: justify;"><b>15.13  </b>Suppose you want to ﬁnd documents that contain at least <i>k </i>of a given set of <i>n </i>keywords. Suppose also you have a keyword index that gives you a (sorted) list of identiﬁers of documents that contain a speciﬁed keyword. Give an eﬃcient algorithm to ﬁnd the desired set of documents.</p><p class="s46" style="padding-top: 6pt;padding-left: 124pt;text-indent: -34pt;text-align: justify;">15.14 <span class="p">Suggest how a document containing a word (such as “leopard”) can be in- dexed such that it is eﬃciently retrieved by queries using a more general con- cept (such as “carnivore” or “mammal”). You can assume that the concept hierarchy is not very deep, so each concept has only a few generalizations (a concept can, however, have a large number of specializations). You can also assume that you are provided with a function that returns the concept for each word in a document. Also suggest how a query using a specialized concept can retrieve documents using a more general concept.</span></p><p class="s64" style="padding-top: 3pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">Exercises  <span class="s164">739</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 155pt;text-indent: -35pt;text-align: justify;">15.15 <span class="p">Explain why the nested-loops join algorithm (see Section 15.5.1) would work poorly on a database stored in a column-oriented manner. Describe an alterna- tive algorithm that would work better, and explain why your solution is better.</span></p><p class="s46" style="padding-top: 6pt;padding-left: 155pt;text-indent: -35pt;text-align: justify;">15.16 <span class="p">Consider the following queries. For each query, indicate if column-oriented storage is likely to be beneﬁcial or not, and explain why.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2817.png"/></span></p><p style="padding-top: 9pt;padding-left: 163pt;text-indent: 0pt;text-align: justify;">a.  Fetch <span class="s44">ID</span>, <i>name </i>and <i>dept name </i>of the student with ID 12345.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2818.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2819.png"/></span></p><p style="padding-top: 6pt;padding-left: 181pt;text-indent: -19pt;text-align: justify;">b.  Group the <i>takes </i>relation by <i>year </i>and <i>course id</i>, and ﬁnd the total number of students for each (<i>year</i>, <i>course id</i>) combination.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part289.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part291.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
