<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Part 2</title>
    
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-1010525"></a><a id="pgfId-1010509"></a>Part 2. Multidimensional queries</h1>
  </div>

  <p class="body"><a id="pgfId-1010542"></a><span class="fm-part-initial-cap">T</span>he common thread for the central part of this book is <i class="calibre17">nearest neighbor search</i>. It is first introduced as yet another special case in search, then used as a building block of more advanced algorithms.</p>

  <p class="body"><a id="pgfId-1010543"></a>This section opens with a description of the issues and challenges that are found when dealing with multi-dimensional data: indexing these data and performing spatial queries. We will once again show how ad hoc data structures can provide drastic improvements over using basic search algorithms.</p>

  <p class="body"><a id="pgfId-1010544"></a>Next, this section describes two advanced data structures that can be used to search multi-dimensional data.</p>

  <p class="body"><a id="pgfId-1010545"></a>In the second half of this part, we’ll check out applications of nearest neighbor search, starting with some practical examples, and then focusing on clustering, which heavily leverages spatial queries. Talking about clustering also allows us to introduce distributed computing, in particular the MapReduce programming model, which can be used to process volumes of data that are too large to be handled by any single machine.</p>

  <p class="body"><a id="pgfId-1010546"></a>There is an important difference in the structure of part 2 in comparison to the first seven chapters. As we’ll see, the discussion about these topics is particularly rich, and there is no way that we can cover them, or even just their crucial bits, in a single chapter. Therefore, while in part 1 each chapter followed a different pattern to explain topics, we’ll have to follow a single pattern throughout part 2, where each chapter will cover only one piece of our usual discussion.</p>

  <p class="body"><a id="pgfId-1010547"></a>Chapter 8 introduces the nearest neighbor problem, discusses a few naïve approaches to multi-dimensional queries, and introduces the problem used as an example for most of part 2.</p>

  <p class="body"><a id="pgfId-1010548"></a>Chapter 9 describes <i class="calibre17">k-d trees</i>, a solution for efficient search in multidimensional data sets, focusing on the 2D case (for the sake of visualization).</p>

  <p class="body"><a id="pgfId-1010549"></a>Chapter 10 presents more advanced versions of these trees, <i class="calibre17">r-trees</i>, which are briefly illustrated, and <i class="calibre17">ss-trees</i>, for which we’ll instead delve into specifications for each method. In the final sections of this chapter we also discuss the performance of ss-trees and how they can be improved further, and then compare them to k-d trees.</p>

  <p class="body"><a id="pgfId-1010550"></a>Chapter 11 focuses on the applications of nearest neighbor search, with a use case described in depth (finding the closest warehouse from which goods should be shipped to customers), but also introducing several problems that can benefit from the application of k-d trees or ss-trees.</p>

  <p class="body"><a id="pgfId-1010551"></a>Chapter 12 focuses on an interesting use case that leverages the efficient nearest neighbor search algorithms presented so far. It enters the machine-learning world and describes three clustering algorithms, <i class="calibre17">k-means</i>, <i class="calibre17">DBSCAN,</i> and <i class="calibre17">OPTICS</i>.</p>

  <p class="body"><a id="pgfId-1010535"></a>Chapter 13 concludes this part by introducing <i class="calibre17">MapReduce</i>, a powerful computational model for distributed computing, and applies it to the three clustering algorithms: <i class="calibre17">k-mean</i> and <i class="calibre17">DBSCAN</i>, discussed in chapter 12, and <i class="calibre17">canopy clustering</i>, introduced in this chapter.</p>

  <p class="calibre16">  </p>
</body>
</html>
