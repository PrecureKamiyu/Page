<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Practice Exercises</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part111.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part113.htm">下一个 &gt;</a></p><p class="s45" style="padding-top: 4pt;padding-left: 36pt;text-indent: 0pt;text-align: left;"><a name="bookmark66">Practice Exercises</a><a name="bookmark107">&zwnj;</a></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: -24pt;text-align: justify;"><b>4.1  </b>Consider the following <span class="s44">SQL </span>query that seeks to ﬁnd a list of titles of all courses taught in Spring 2017 along with the name of the instructor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">select <span class="p">name, title</span></p><p class="s46" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">from <i>instructor </i>natural join <i>teaches </i>natural join <i>section </i>natural join <i>course</i></p><p class="s46" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">where <i>semester </i><span class="p">= &#39;Spring&#39; </span>and <span class="p">year = 2017</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">What is wrong with this query?</p><p style="padding-top: 6pt;padding-left: 93pt;text-indent: 0pt;text-align: left;"><b>4.2 </b>Write the following queries in <span class="s44">SQL</span>:</p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -18pt;text-align: justify;">a.  Display a list of all instructors, showing each instructor’s <span class="s44">ID </span>and the num- ber of sections taught. Make sure to show the number of sections as 0 for instructors who have not taught any section. Your query should use an outer join, and should not use subqueries.</p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -19pt;text-align: justify;">b.  Write the same query as in part a, but using a scalar subquery and not using outer join.</p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -18pt;text-align: justify;">c.  Display the list of all course sections oﬀered in Spring 2018, along with the <span class="s44">ID </span>and name of each instructor teaching the section. If a section has more than one instructor, that section should appear as many times in the result as it has instructors. If a section does not have any instructor, it should still appear in the result with the instructor name set to “—”.</p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -19pt;text-align: justify;">d.  Display the list of all departments, with the total number of instructors in each department, without using subqueries. Make sure to show depart- ments that have no instructors, and list those departments with an instruc- tor count of zero.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;"><b>4.3 </b>Outer join expressions can be computed in <span class="s44">SQL </span>without using the <span class="s44">SQL </span><b>outer join </b>operation. To illustrate this fact, show how to rewrite each of the following <span class="s44">SQL </span>queries without using the <b>outer join </b>expression.</p><p class="s46" style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: justify;"><span class="p">a.  </span>select <span class="p">* </span>from <i>student </i>natural left outer join <i>takes</i></p><p class="s46" style="padding-top: 6pt;padding-left: 125pt;text-indent: 0pt;text-align: justify;"><span class="p">b. </span>select <span class="p">* </span>from <i>student </i>natural full outer join <i>takes</i></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: left;"><b>4.4  </b>Suppose we have three relations <i>r</i>(<i>A</i>, <i>B</i>), <i>s</i>(<i>B</i>, <i>C</i>), and <i>t</i>(<i>B</i>, <i>D</i>), with all attributes declared as <b>not null</b>.</p><p class="s13" style="padding-top: 6pt;padding-left: 145pt;text-indent: -18pt;text-align: left;"><span class="p">a. Give instances of relations </span>r<span class="p">, </span>s<span class="p">, and </span>t <span class="p">such that in the result of (</span>r <b>natural left outer join </b>s<span class="p">) </span><b>natural left outer join </b>t</p><p style="padding-left: 145pt;text-indent: 0pt;text-align: left;">attribute <i>C </i>has a null value but attribute <i>D </i>has a non-null value.</p><p style="padding-top: 6pt;padding-left: 126pt;text-indent: 0pt;text-align: left;">b.  Are there instances of <i>r</i>, <i>s</i>, and <i>t </i>such that the result of</p><p class="s13" style="padding-left: 145pt;text-indent: 0pt;text-align: left;">r <b>natural left outer join </b><span class="p">(</span>s <b>natural left outer join </b>t<span class="p">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_862.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_863.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_864.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_865.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="85" height="1" alt="image" src="Image_866.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_867.png"/></span></p><p style="padding-top: 4pt;padding-left: 224pt;text-indent: 0pt;line-height: 106%;text-align: left;"><i>employee </i>(<span class="s99">ID</span>, <i>person name</i>, <i>street</i>, <i>city</i>) <i>works </i>(<span class="s99">ID</span>, <i>company name</i>, <i>salary</i>) <i>company </i>(<i>company name</i>, <i>city</i>) <i>manages </i>(<span class="s99">ID</span>, <i>manager id</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_868.png"/></span></p><p class="s73" style="padding-top: 8pt;padding-left: 233pt;text-indent: 0pt;text-align: left;">Figure 4.12 <span class="s74">Employee database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 176pt;text-indent: 0pt;text-align: left;">has a null value for <i>C </i>but a non-null value for <i>D</i>? Explain why or why not.</p><p style="padding-top: 9pt;padding-left: 150pt;text-indent: -25pt;text-align: justify;"><b>4.5  </b><span class="s63">Testing </span><span class="s82">SQL </span><span class="s63">queries</span>: To test if a query speciﬁed in English has been correctly written in <span class="s44">SQL</span>, the <span class="s44">SQL </span>query is typically executed on multiple test databases, and a human checks if the <span class="s44">SQL </span>query result on each test database matches the intention of the speciﬁcation in English.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_869.png"/></span></p><p style="padding-top: 9pt;padding-left: 176pt;text-indent: -18pt;text-align: justify;">a. In Section 4.1.1 we saw an example of an erroneous <span class="s44">SQL </span>query which was intended to ﬁnd which courses had been taught by each instructor; the query computed the natural join of <i>instructor</i>, <i>teaches</i>, and <i>course</i>, and as a result it unintentionally equated the <i>dept name </i>attribute of <i>instructor </i>and <i>course</i>. Give an example of a dataset that would help catch this particular error.</p><p style="padding-top: 6pt;padding-left: 176pt;text-indent: -19pt;text-align: justify;">b. When creating test databases, it is important to create tuples in referenced relations that do not have any matching tuple in the referencing relation for each foreign key. Explain why, using an example query on the univer- sity database.</p><p style="padding-top: 6pt;padding-left: 176pt;text-indent: -18pt;text-align: justify;">c.  When creating test databases, it is important to create tuples with null values for foreign-key attributes, provided the attribute is nullable (<span class="s44">SQL </span>allows foreign-key attributes to take on null values, as long as they are not part of the primary key and have not been declared as <b>not null</b>). Explain why, using an example query on the university database.</p><p class="s13" style="padding-top: 9pt;padding-left: 150pt;text-indent: 0pt;text-align: justify;">Hint<span class="p">: Use the queries from Exercise 4.2.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_870.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_871.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="31" height="1" alt="image" src="Image_872.png"/></span></p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -25pt;text-align: justify;"><b>4.6 </b>Show how to deﬁne the view <i>student grades </i>(<i>ID, GPA</i>) giving the grade-point average of each student, based on the query in Exercise 3.2; recall that we used a relation <i>grade points</i>(<i>grade</i>, <i>points</i>) to get the numeric points associated with a letter grade. Make sure your view deﬁnition correctly handles the case of <i>null </i>values for the <i>grade </i>attribute of the <i>takes </i>relation.</p><p style="padding-top: 6pt;padding-left: 150pt;text-indent: -25pt;text-align: justify;"><b>4.7  </b>Consider the employee database of Figure 4.12. Give an <span class="s44">SQL DDL </span>deﬁnition of this database. Identify referential-integrity constraints that should hold, and include them in the <span class="s44">DDL </span>deﬁnition.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;">4.8  <span class="p">As discussed in Section 4.4.8, we expect the constraint “an instructor cannot teach sections in two diﬀerent classrooms in a semester in the same time slot” to hold.</span></p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -18pt;text-align: justify;">a.  Write an <span class="s44">SQL </span>query that returns all (<i>instructor</i>, <i>section</i>) combinations that violate this constraint.</p><p style="padding-top: 6pt;padding-left: 145pt;text-indent: -19pt;text-align: justify;">b.  Write an <span class="s44">SQL </span>assertion to enforce this constraint (as discussed in Sec- tion 4.4.8, current generation database systems do not support such as- sertions, although they are part of the <span class="s44">SQL </span>standard).</p><p class="s46" style="padding-top: 6pt;padding-left: 119pt;text-indent: -25pt;text-align: justify;">4.9 <span class="s42">SQL </span><span class="s43">allows a foreign-key dependency to refer to the same relation, as in the following example:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_873.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_874.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_875.png"/></span></p><p class="s46" style="padding-left: 167pt;text-indent: -13pt;text-align: left;">create table <i>manager </i><span class="p">(</span><i>employee </i><span class="s101">ID  </span>char<span class="p">(20), </span><i>manager </i><span class="s101">ID  </span>char<span class="p">(20), </span>primary key <i>employee </i><span class="s101">ID</span><span class="p">,</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_876.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_877.png"/></span></p><p style="padding-left: 170pt;text-indent: 0pt;text-align: left;"><b>foreign key </b>(<i>manager </i><span class="s101">ID</span>) <b>references </b><i>manager</i>(<i>employee </i><span class="s101">ID</span>)</p><p class="s46" style="padding-left: 287pt;text-indent: 0pt;text-align: left;">on delete cascade <span class="p">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_878.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">Here, <i>employee </i><span class="s101">ID </span>is a key to the table <i>manager</i>, meaning that each employee has at most one manager. The foreign-key clause requires that every manager also be an employee. Explain exactly what happens when a tuple in the relation <i>manager </i>is deleted.</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: -29pt;text-align: justify;"><b>4.10 </b>Given the relations <i>a</i>(<i>name, address, title</i>) and <i>b</i>(<i>name, address, salary</i>), show how to express <i>a </i><b>natural full outer join </b><i>b </i>using the <b>full outer-join </b>operation with an <b>on </b>condition rather than using the <b>natural join </b>syntax. This can be done using the <b>coalesce </b>operation. Make sure that the result relation does not contain two copies of the attributes <i>name </i>and <i>address </i>and that the solution is correct even if some tuples in <i>a </i>and <i>b </i>have null values for attributes <i>name </i>or <i>address</i>.</p><p class="s46" style="padding-top: 6pt;padding-left: 119pt;text-indent: -29pt;text-align: justify;">4.11  <span class="p">Operating systems usually oﬀer only two types of authorization control for data ﬁles: read access and write access. Why do database systems oﬀer so many kinds of authorization?</span></p><p class="s46" style="padding-top: 6pt;padding-left: 119pt;text-indent: -30pt;text-align: justify;">4.12 <span class="p">Suppose a user wants to grant </span>select <span class="p">access on a relation to another user. Why should the user include (or not include) the clause </span>granted by current role <span class="p">in the </span>grant <span class="p">statement?</span></p><p style="padding-top: 6pt;padding-left: 89pt;text-indent: 0pt;text-align: justify;"><b>4.13  </b>Consider a view <i>v </i>whose deﬁnition references only relation <i>r</i>.</p><p style="padding-top: 4pt;padding-left: 122pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span class="s39">• </span><span class="s40">If a user is granted </span><b>select </b>authorization on <i>v</i>, does that user need to have</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><b>select </b>authorization on <i>r </i>as well? Why or why not?</p><p style="padding-top: 4pt;padding-left: 122pt;text-indent: 0pt;line-height: 15pt;text-align: left;"><span class="s39">• </span><span class="s40">If a user is granted </span><b>update </b>authorization on <i>v</i>, does that user need to have</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><b>update </b>authorization on <i>r </i>as well? Why or why not?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 170pt;text-indent: -16pt;text-align: left;"><span class="s39">• </span><span class="s40">Give an example of an </span><b>insert </b>operation on a view <i>v </i>to add a tuple <i>t </i>that is not visible in the result of <b>select * from </b><i>v</i>. Explain your answer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part111.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part113.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
