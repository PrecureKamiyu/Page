<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>41.7 A Few Other Things About FFS</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part458.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part460.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">41.7 A Few Other Things About FFS</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">FFS introduced a few other innovations too. In particular, the design- ers were extremely worried about accommodating small files; as it turned out, many files were 2 KB or so in size back then, and using 4-KB blocks, while good for transferring data, was not so good for space efficiency. This <b>internal fragmentation </b>could thus lead to roughly half the disk be- ing wasted for a typical file system.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The solution the FFS designers hit upon was simple and solved the problem. They decided to introduce <b>sub-blocks</b>, which were 512-byte lit- tle blocks that the file system could allocate to files. Thus, if you created a small file (say 1 KB in size), it would occupy two sub-blocks and thus not waste an entire 4-KB block. As the file grew, the file system will continue allocating 512-byte blocks to it until it acquires a full 4-KB of data. At that point, FFS will find a 4-KB block, <i>copy </i>the sub-blocks into it, and free the sub-blocks for future use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s151" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="78" height="78" alt="image" src="Image_605.png"/></span></p><p class="s46" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: center;">8 <span class="s155">9 </span>10</p><p class="s46" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">7    11</p><p class="s84" style="padding-top: 1pt;padding-left: 11pt;text-indent: 0pt;line-height: 4pt;text-align: center;">Spindle</p><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">6     0</p><p class="s46" style="padding-top: 5pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">5    1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">4  2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="78" height="78" alt="image" src="Image_606.png"/></span></p><p class="s218" style="padding-left: 11pt;text-indent: 0pt;line-height: 82%;text-align: center;">4 <span class="s46">10 </span>5</p><p class="s46" style="padding-top: 2pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">9    11</p><p class="s84" style="padding-top: 1pt;padding-left: 11pt;text-indent: 0pt;line-height: 4pt;text-align: center;">Spindle</p><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">3     0</p><p class="s46" style="padding-top: 5pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">8    6</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">2  1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="text-indent: 0pt;line-height: 6pt;text-align: left;">7</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 64pt;text-indent: 0pt;text-align: left;">Figure 41.3: <b>FFS: Standard Versus Parameterized Placement</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You might observe that this process is inefficient, requiring a lot of ex- tra work for the file system (in particular, a lot of extra I/O to perform the copy). And you’d be right again! Thus, FFS generally avoided this pes- simal behavior by modifying the <span class="s41">libc </span>library; the library would buffer writes and then issue them in 4-KB chunks to the file system, thus avoid- ing the sub-block specialization entirely in most cases.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">A second neat thing that FFS introduced was a disk layout that was optimized for performance. In those times (before SCSI and other more modern device interfaces), disks were much less sophisticated and re- quired the host CPU to control their operation in a more hands-on way. A problem arose in FFS when a file was placed on consecutive sectors of the disk, as on the left in Figure <span style=" color: #00AEEF;">41.3</span>.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In particular, the problem arose during sequential reads. FFS would first issue a read to block 0; by the time the read was complete, and FFS issued a read to block 1, it was too late: block 1 had rotated under the head and now the read to block 1 would incur a full rotation.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">FFS solved this problem with a different layout, as you can see on the right in Figure <span style=" color: #00AEEF;">41.3</span>. By skipping over every other block (in the example), FFS has enough time to request the next block before it went past the disk head. In fact, FFS was smart enough to figure out for a particular disk <i>how many </i>blocks it should skip in doing layout in order to avoid the extra rotations; this technique was called <b>parameterization</b>, as FFS would figure out the specific performance parameters of the disk and use those to decide on the exact staggered layout scheme.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">You might be thinking: this scheme isn’t so great after all. In fact, you will only get 50% of peak bandwidth with this type of layout, because you have to go around each track twice just to read each block once. For- tunately, modern disks are much smarter: they internally read the entire track in and buffer it in an internal disk cache (often called a <b>track buffer </b>for this very reason). Then, on subsequent reads to the track, the disk will just return the desired data from its cache. File systems thus no longer have to worry about these incredibly low-level details. Abstraction and higher-level interfaces can be a good thing, when designed properly.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Some other usability improvements were added as well. FFS was one of the first file systems to allow for <b>long file names</b>, thus enabling more expressive names in the file system instead of a the traditional fixed-size approach (e.g., 8 characters). Further, a new concept was introduced</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 87pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: M<span class="s7">AKE </span>T<span class="s7">HE </span>S<span class="s7">YSTEM </span>U<span class="s7">SABLE</span></p><p style="padding-left: 8pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Probably the most basic lesson from FFS is that not only did it intro- duce the conceptually good idea of disk-aware layout, but it also added a number of features that simply made the system more usable. Long file names, symbolic links, and a rename operation that worked atomically all improved the utility of a system; while hard to write a research pa- per about (imagine trying to read a 14-pager about “The Symbolic Link: Hard Link’s Long Lost Cousin”), such small features made FFS more use- ful and thus likely increased its chances for adoption. Making a system usable is often as or more important than its deep technical innovations.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 0pt;line-height: 89%;text-align: justify;">called a <b>symbolic link</b>. As discussed in a previous chapter, hard links are limited in that they both could not point to directories (for fear of intro- ducing loops in the file system hierarchy) and that they can only point to files within the same volume (i.e., the inode number must still be mean- ingful). Symbolic links allow the user to create an “alias” to any other file or directory on a system and thus are much more flexible. FFS also introduced an atomic <span class="s41">rename() </span>operation for renaming files. Usabil- ity improvements, beyond the basic technology, also likely gained FFS a stronger user base.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part458.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part460.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
