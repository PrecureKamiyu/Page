<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.11 Floating-Point Code</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000003080" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000412B4" data-uri="chapter03.xhtml#P70004970270000000000000000412B4" epub:type="title"><span class="pcalibre label pcalibre1">3.11 </span>Floating-Point Code</h1></header>
<p id="P70004970270000000000000000412B5" data-uri="chapter03.xhtml#P70004970270000000000000000412B5" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">floating-point architecture</i> for a processor consists of the different aspects that affect how programs operating on floating-point data are mapped onto the machine, including</p>
<ul id="P70004970270000000000000000412B6" data-uri="chapter03.xhtml#P70004970270000000000000000412B6" class="calibre28 pcalibre pcalibre1">
<li id="P70004970270000000000000000412B7" data-uri="chapter03.xhtml#P70004970270000000000000000412B7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000412B8" data-uri="chapter03.xhtml#P70004970270000000000000000412B8" class="pcalibre calibre3 pcalibre1">How floating-point values are stored and accessed. This is typically via some form of registers.</p></li>
<li id="P70004970270000000000000000412B9" data-uri="chapter03.xhtml#P70004970270000000000000000412B9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000412BA" data-uri="chapter03.xhtml#P70004970270000000000000000412BA" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003088" title="294" data-uri="chapter03.xhtml#P7000497027000000000000000003088" epub:type="pagebreak"></span>The instructions that operate on floating-point data.</p></li>
<li id="P70004970270000000000000000412BB" data-uri="chapter03.xhtml#P70004970270000000000000000412BB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000412BC" data-uri="chapter03.xhtml#P70004970270000000000000000412BC" class="pcalibre calibre3 pcalibre1">The conventions used for passing floating-point values as arguments to functions and for returning them as results.</p></li>
<li id="P70004970270000000000000000412BD" data-uri="chapter03.xhtml#P70004970270000000000000000412BD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000412BE" data-uri="chapter03.xhtml#P70004970270000000000000000412BE" class="pcalibre calibre3 pcalibre1">The conventions for how registers are preserved during function calls—for example, with some registers designated as caller saved, and others as callee saved.</p></li>
</ul>
<p id="P70004970270000000000000000412BF" data-uri="chapter03.xhtml#P70004970270000000000000000412BF" class="pcalibre1 pcalibre calibre2">To understand the x86-64 floating-point architecture, it is helpful to have a brief historical perspective. Since the introduction of the Pentium/MMX in 1997, both Intel and AMD have incorporated successive generations of <i class="calibre5 pcalibre pcalibre1">media</i> instructions to support graphics and image processing. These instructions originally focused on allowing multiple operations to be performed in a parallel mode known as <i class="calibre5 pcalibre pcalibre1">single instruction, multiple data</i>, or <i class="calibre5 pcalibre pcalibre1">SIMD</i> (pronounced sim-dee). In this mode the same operation is performed on a number of different data values in parallel. Over the years, there has been a progression of these extensions. The names have changed through a series of major revisions from MMX to SSE (for "streaming SIMD extensions") and most recently AVX (for "advanced vector extensions"). Within each generation, there have also been different versions. Each of these extensions manages datainsetsofregisters, referredto as"MM" registers for MMX, "XMM" for SSE, and "YMM" for AVX, ranging from 64 bits for MM registers, to 128 for XMM, to 256 for YMM. So, for example, each YMM register can hold eight 32-bit values, or four 64-bit values, where these values can be either integer or floating point.</p>
<p id="P70004970270000000000000000412C0" data-uri="chapter03.xhtml#P70004970270000000000000000412C0" class="pcalibre1 pcalibre calibre2">Starting with SSE2, introduced with the Pentium 4 in 2000, the media instructions have included ones to operate on <i class="calibre5 pcalibre pcalibre1">scalar</i> floating-point data, using single values in the low-order 32 or 64 bits of XMM or YMM registers. This scalar mode provides a set of registers and instructions that are more typical of the way other processors support floating point. All processors capable of executing x86-64 code support SSE2 or higher, and hence x86-64 floating point is based on SSE or AVX, including conventions for passing procedure arguments and return values <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B43D">[77]</a>.</p>
<p id="P70004970270000000000000000412C1" data-uri="chapter03.xhtml#P70004970270000000000000000412C1" class="pcalibre1 pcalibre calibre2">Our presentation is based on AVX2, the second version of AVX, introduced with the Core i7 Haswell processor in 2013. G<span class="smallcaps pcalibre pcalibre1">cc</span> will generate AVX2 code when given the command-line parameter <code id="P70004970270000000000000000412C2" data-uri="chapter03.xhtml#P70004970270000000000000000412C2" class="pcalibre1 calibre8 pcalibre">-mavx2</code>. Code based on the different versions of SSE, as well as the first version of AVX, is conceptually similar, although they differ in the instruction names and formats. We present only instructions that arise in compiling floating-point programs with <span class="smallcaps pcalibre pcalibre1">gcc</span>. These are, for the most part, the scalar AVX instructions, although we document occasions where instructions intended for operating on entire data vectors arise. A more complete coverage of how to exploit the SIMD capabilities of SSE and AVX is presented in Web Aside <span class="smallcaps pcalibre pcalibre1">opt:simd</span> on page 546. Readers may wish to refer to the AMD and Intel documentation for the individual instructions <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3A8">[4,</a> <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B408">51]</a>. As with integer operations, note that the ATT format we use in our presentation differs from the Intel format used in these documents. In particular, the instruction operands are listed in a different order in these two versions.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003091" data-uri="chapter03.xhtml#P7000497027000000000000000003091">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003092" title="295" data-uri="chapter03.xhtml#P7000497027000000000000000003092" epub:type="pagebreak"></span>
<img alt="A diagram lists 16 media registers." id="P70004970270000000000000000412C3" data-uri="P700049702700000000000000000B6C5" src="../images/p295-1.png" class="pcalibre calibre100 pcalibre1"/>
<figcaption id="P70004970270000000000000000412C4" data-uri="chapter03.xhtml#P70004970270000000000000000412C4" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000412C5" data-uri="chapter03.xhtml#P70004970270000000000000000412C5" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.45 </span>Media registers.</h1></header><div class="edition pcalibre pcalibre1" id="P70004970270000000000000000412C6" data-uri="chapter03.xhtml#P70004970270000000000000000412C6"><p id="P70004970270000000000000000412C7" data-uri="chapter03.xhtml#P70004970270000000000000000412C7" class="pcalibre calibre3 pcalibre1">These registers are used to hold floating-point data. Each YMM register holds 32 bytes. The low-order 16 bytes can be accessed as an XMM register.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000215A1" data-uri="chapter03.xhtml#P70004970270000000000000000215A1">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000412C8" data-uri="chapter03.xhtml#P70004970270000000000000000412C8" class="pcalibre1 pcalibre calibre2">A diagram lists 16 registers, each with values from 0 to 127 within values from 0 to 255, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P70004970270000000000000000412C9" data-uri="chapter03.xhtml#P70004970270000000000000000412C9">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000412CA" data-uri="chapter03.xhtml#P70004970270000000000000000412CA" class="calibre18 pcalibre pcalibre1">Register</th>
<th id="P70004970270000000000000000412CB" data-uri="chapter03.xhtml#P70004970270000000000000000412CB" class="calibre18 pcalibre pcalibre1">127</th>
<th id="P70004970270000000000000000412CC" data-uri="chapter03.xhtml#P70004970270000000000000000412CC" class="calibre18 pcalibre pcalibre1">255</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412CD" data-uri="chapter03.xhtml#P70004970270000000000000000412CD" class="calibre20 pcalibre pcalibre1">1st FP arg./Return value</td>
<td id="P70004970270000000000000000412CE" data-uri="chapter03.xhtml#P70004970270000000000000000412CE" class="calibre20 pcalibre pcalibre1">%xmm0</td>
<td id="P70004970270000000000000000412CF" data-uri="chapter03.xhtml#P70004970270000000000000000412CF" class="calibre20 pcalibre pcalibre1">%ymm0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412D0" data-uri="chapter03.xhtml#P70004970270000000000000000412D0" class="calibre20 pcalibre pcalibre1">2nd FP argument</td>
<td id="P70004970270000000000000000412D1" data-uri="chapter03.xhtml#P70004970270000000000000000412D1" class="calibre20 pcalibre pcalibre1">%xmm1</td>
<td id="P70004970270000000000000000412D2" data-uri="chapter03.xhtml#P70004970270000000000000000412D2" class="calibre20 pcalibre pcalibre1">%ymm1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412D3" data-uri="chapter03.xhtml#P70004970270000000000000000412D3" class="calibre20 pcalibre pcalibre1">3rd FP argument</td>
<td id="P70004970270000000000000000412D4" data-uri="chapter03.xhtml#P70004970270000000000000000412D4" class="calibre20 pcalibre pcalibre1">%xmm2</td>
<td id="P70004970270000000000000000412D5" data-uri="chapter03.xhtml#P70004970270000000000000000412D5" class="calibre20 pcalibre pcalibre1">%ymm2</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412D6" data-uri="chapter03.xhtml#P70004970270000000000000000412D6" class="calibre20 pcalibre pcalibre1">4th FP argument</td>
<td id="P70004970270000000000000000412D7" data-uri="chapter03.xhtml#P70004970270000000000000000412D7" class="calibre20 pcalibre pcalibre1">%xmm3</td>
<td id="P70004970270000000000000000412D8" data-uri="chapter03.xhtml#P70004970270000000000000000412D8" class="calibre20 pcalibre pcalibre1">%ymm3</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412D9" data-uri="chapter03.xhtml#P70004970270000000000000000412D9" class="calibre20 pcalibre pcalibre1">5th FP argument</td>
<td id="P70004970270000000000000000412DA" data-uri="chapter03.xhtml#P70004970270000000000000000412DA" class="calibre20 pcalibre pcalibre1">%xmm4</td>
<td id="P70004970270000000000000000412DB" data-uri="chapter03.xhtml#P70004970270000000000000000412DB" class="calibre20 pcalibre pcalibre1">%ymm4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412DC" data-uri="chapter03.xhtml#P70004970270000000000000000412DC" class="calibre20 pcalibre pcalibre1">6th FP argument</td>
<td id="P70004970270000000000000000412DD" data-uri="chapter03.xhtml#P70004970270000000000000000412DD" class="calibre20 pcalibre pcalibre1">%xmm5</td>
<td id="P70004970270000000000000000412DE" data-uri="chapter03.xhtml#P70004970270000000000000000412DE" class="calibre20 pcalibre pcalibre1">%ymm5</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412DF" data-uri="chapter03.xhtml#P70004970270000000000000000412DF" class="calibre20 pcalibre pcalibre1">7th FP argument</td>
<td id="P70004970270000000000000000412E0" data-uri="chapter03.xhtml#P70004970270000000000000000412E0" class="calibre20 pcalibre pcalibre1">%xmm6</td>
<td id="P70004970270000000000000000412E1" data-uri="chapter03.xhtml#P70004970270000000000000000412E1" class="calibre20 pcalibre pcalibre1">%ymm6</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412E2" data-uri="chapter03.xhtml#P70004970270000000000000000412E2" class="calibre20 pcalibre pcalibre1">8th FP argument</td>
<td id="P70004970270000000000000000412E3" data-uri="chapter03.xhtml#P70004970270000000000000000412E3" class="calibre20 pcalibre pcalibre1">%xmm7</td>
<td id="P70004970270000000000000000412E4" data-uri="chapter03.xhtml#P70004970270000000000000000412E4" class="calibre20 pcalibre pcalibre1">%ymm7</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412E5" data-uri="chapter03.xhtml#P70004970270000000000000000412E5" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412E6" data-uri="chapter03.xhtml#P70004970270000000000000000412E6" class="calibre20 pcalibre pcalibre1">%xmm8</td>
<td id="P70004970270000000000000000412E7" data-uri="chapter03.xhtml#P70004970270000000000000000412E7" class="calibre20 pcalibre pcalibre1">%ymm8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412E8" data-uri="chapter03.xhtml#P70004970270000000000000000412E8" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412E9" data-uri="chapter03.xhtml#P70004970270000000000000000412E9" class="calibre20 pcalibre pcalibre1">%xmm9</td>
<td id="P70004970270000000000000000412EA" data-uri="chapter03.xhtml#P70004970270000000000000000412EA" class="calibre20 pcalibre pcalibre1">%ymm9</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412EB" data-uri="chapter03.xhtml#P70004970270000000000000000412EB" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412EC" data-uri="chapter03.xhtml#P70004970270000000000000000412EC" class="calibre20 pcalibre pcalibre1">%xmm10</td>
<td id="P70004970270000000000000000412ED" data-uri="chapter03.xhtml#P70004970270000000000000000412ED" class="calibre20 pcalibre pcalibre1">%ymm10</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412EE" data-uri="chapter03.xhtml#P70004970270000000000000000412EE" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412EF" data-uri="chapter03.xhtml#P70004970270000000000000000412EF" class="calibre20 pcalibre pcalibre1">%xmm11</td>
<td id="P70004970270000000000000000412F0" data-uri="chapter03.xhtml#P70004970270000000000000000412F0" class="calibre20 pcalibre pcalibre1">%ymm11</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412F1" data-uri="chapter03.xhtml#P70004970270000000000000000412F1" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412F2" data-uri="chapter03.xhtml#P70004970270000000000000000412F2" class="calibre20 pcalibre pcalibre1">%xmm12</td>
<td id="P70004970270000000000000000412F3" data-uri="chapter03.xhtml#P70004970270000000000000000412F3" class="calibre20 pcalibre pcalibre1">%ymm12</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412F4" data-uri="chapter03.xhtml#P70004970270000000000000000412F4" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412F5" data-uri="chapter03.xhtml#P70004970270000000000000000412F5" class="calibre20 pcalibre pcalibre1">%xmm13</td>
<td id="P70004970270000000000000000412F6" data-uri="chapter03.xhtml#P70004970270000000000000000412F6" class="calibre20 pcalibre pcalibre1">%ymm13</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412F7" data-uri="chapter03.xhtml#P70004970270000000000000000412F7" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412F8" data-uri="chapter03.xhtml#P70004970270000000000000000412F8" class="calibre20 pcalibre pcalibre1">%xmm14</td>
<td id="P70004970270000000000000000412F9" data-uri="chapter03.xhtml#P70004970270000000000000000412F9" class="calibre20 pcalibre pcalibre1">%ymm14</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000412FA" data-uri="chapter03.xhtml#P70004970270000000000000000412FA" class="calibre20 pcalibre pcalibre1">Caller saved</td>
<td id="P70004970270000000000000000412FB" data-uri="chapter03.xhtml#P70004970270000000000000000412FB" class="calibre20 pcalibre pcalibre1">%xmm15</td>
<td id="P70004970270000000000000000412FC" data-uri="chapter03.xhtml#P70004970270000000000000000412FC" class="calibre20 pcalibre pcalibre1">%ymm15</td>
</tr>
</tbody>
</table>
</details>
</figcaption></figure>
<p id="P70004970270000000000000000412FD" data-uri="chapter03.xhtml#P70004970270000000000000000412FD" class="pcalibre1 pcalibre calibre2">As is illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003091"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.45</span></a>, the AVX floating-point architecture allows data to be stored in 16 YMM registers, named <code id="P70004970270000000000000000412FE" data-uri="chapter03.xhtml#P70004970270000000000000000412FE" class="pcalibre1 calibre8 pcalibre">%ymm0-%ymm15</code>. Each YMM register is 256 bits (32 bytes) long. When operating on scalar data, these registers only hold floating-point data, and only the low-order 32 bits (for float) or 64 bits (for double) are used. The assembly code refers to the registers by their SSE XMM register names <code id="P70004970270000000000000000412FF" data-uri="chapter03.xhtml#P70004970270000000000000000412FF" class="pcalibre1 calibre8 pcalibre">%xmm0-%xmm15</code>, where each XMM register is the low-order 128 bits (16 bytes) of the corresponding YMM register.</p>
<figure class="pcalibre5 figure pcalibre" id="P700049702700000000000000000309B" data-uri="chapter03.xhtml#P700049702700000000000000000309B">
<table id="P7000497027000000000000000041300" data-uri="chapter03.xhtml#P7000497027000000000000000041300" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041301" data-uri="chapter03.xhtml#P7000497027000000000000000041301" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000309E" title="296" data-uri="chapter03.xhtml#P700049702700000000000000000309E" epub:type="pagebreak"></span>Instruction</th>
<th id="P7000497027000000000000000041302" data-uri="chapter03.xhtml#P7000497027000000000000000041302" class="calibre18 pcalibre pcalibre1">Source</th>
<th id="P7000497027000000000000000041303" data-uri="chapter03.xhtml#P7000497027000000000000000041303" class="calibre18 pcalibre pcalibre1">Destination</th>
<th id="P7000497027000000000000000041304" data-uri="chapter03.xhtml#P7000497027000000000000000041304" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041305" data-uri="chapter03.xhtml#P7000497027000000000000000041305" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041306" data-uri="chapter03.xhtml#P7000497027000000000000000041306" class="calibre10 pcalibre pcalibre1">vmovss</code></td>
<td id="P7000497027000000000000000041307" data-uri="chapter03.xhtml#P7000497027000000000000000041307" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P7000497027000000000000000041308" data-uri="chapter03.xhtml#P7000497027000000000000000041308" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041309" data-uri="chapter03.xhtml#P7000497027000000000000000041309" class="calibre20 pcalibre pcalibre1">Move single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004130A" data-uri="chapter03.xhtml#P700049702700000000000000004130A" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004130B" data-uri="chapter03.xhtml#P700049702700000000000000004130B" class="calibre10 pcalibre pcalibre1">vmovss</code></td>
<td id="P700049702700000000000000004130C" data-uri="chapter03.xhtml#P700049702700000000000000004130C" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004130D" data-uri="chapter03.xhtml#P700049702700000000000000004130D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P700049702700000000000000004130E" data-uri="chapter03.xhtml#P700049702700000000000000004130E" class="calibre20 pcalibre pcalibre1">Move single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004130F" data-uri="chapter03.xhtml#P700049702700000000000000004130F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041310" data-uri="chapter03.xhtml#P7000497027000000000000000041310" class="calibre10 pcalibre pcalibre1">vmovsd</code></td>
<td id="P7000497027000000000000000041311" data-uri="chapter03.xhtml#P7000497027000000000000000041311" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041312" data-uri="chapter03.xhtml#P7000497027000000000000000041312" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041313" data-uri="chapter03.xhtml#P7000497027000000000000000041313" class="calibre20 pcalibre pcalibre1">Move double precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041314" data-uri="chapter03.xhtml#P7000497027000000000000000041314" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041315" data-uri="chapter03.xhtml#P7000497027000000000000000041315" class="calibre10 pcalibre pcalibre1">vmovsd</code></td>
<td id="P7000497027000000000000000041316" data-uri="chapter03.xhtml#P7000497027000000000000000041316" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041317" data-uri="chapter03.xhtml#P7000497027000000000000000041317" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041318" data-uri="chapter03.xhtml#P7000497027000000000000000041318" class="calibre20 pcalibre pcalibre1">Move double precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041319" data-uri="chapter03.xhtml#P7000497027000000000000000041319" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004131A" data-uri="chapter03.xhtml#P700049702700000000000000004131A" class="calibre10 pcalibre pcalibre1">vmovaps</code></td>
<td id="P700049702700000000000000004131B" data-uri="chapter03.xhtml#P700049702700000000000000004131B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004131C" data-uri="chapter03.xhtml#P700049702700000000000000004131C" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004131D" data-uri="chapter03.xhtml#P700049702700000000000000004131D" class="calibre20 pcalibre pcalibre1">Move aligned, packed single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004131E" data-uri="chapter03.xhtml#P700049702700000000000000004131E" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004131F" data-uri="chapter03.xhtml#P700049702700000000000000004131F" class="calibre10 pcalibre pcalibre1">vmovapd</code></td>
<td id="P7000497027000000000000000041320" data-uri="chapter03.xhtml#P7000497027000000000000000041320" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041321" data-uri="chapter03.xhtml#P7000497027000000000000000041321" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041322" data-uri="chapter03.xhtml#P7000497027000000000000000041322" class="calibre20 pcalibre pcalibre1">Move aligned, packed double precision</td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000041323" data-uri="chapter03.xhtml#P7000497027000000000000000041323" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000041324" data-uri="chapter03.xhtml#P7000497027000000000000000041324" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.46 </span>Floating-point movement instructions.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000041325" data-uri="chapter03.xhtml#P7000497027000000000000000041325"><p id="P7000497027000000000000000041326" data-uri="chapter03.xhtml#P7000497027000000000000000041326" class="pcalibre calibre3 pcalibre1">These operations transfer values between memory and registers, as well as between pairs of registers. (<var class="calibre5 pcalibre pcalibre1">X</var>: XMM register (e.g., <code id="P7000497027000000000000000041327" data-uri="chapter03.xhtml#P7000497027000000000000000041327" class="pcalibre1 calibre8 pcalibre">%xmm3</code>); <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">32</sub>: 32-bit memory range; <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">64</sub>: 64-bit memory range)</p></div></figcaption>
</figure>
<section id="P70004970270000000000000000030C5" data-uri="chapter03.xhtml#P70004970270000000000000000030C5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000041328" data-uri="chapter03.xhtml#P7000497027000000000000000041328" epub:type="title"><span class="pcalibre label pcalibre1">3.11.1 </span>Floating-Point Movement and Conversion Operations</h1></header>
<p id="P7000497027000000000000000041329" data-uri="chapter03.xhtml#P7000497027000000000000000041329" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000309B"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.46</span></a> shows a set of instructions for transferring floating-point data between memory and XMM registers, as well as from one XMM register to another without any conversions. Those that reference memory are <i class="calibre5 pcalibre pcalibre1">scalar</i> instructions, meaning that they operate on individual, rather than packed, data values. The data are held either in memory (indicated in the table as <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">32</sub> and <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">64</sub>) or in XMM registers (shown in the table as <var class="calibre5 pcalibre pcalibre1">X</var>). These instructions will work correctly regardless of the alignment of data, although the code optimization guidelines recommend that 32-bit memory data satisfy a 4-byte alignment and that 64-bit data satisfy an 8-byte alignment. Memory references are specified in the same way as for the integer <span class="smallcaps pcalibre pcalibre1">mov </span>instructions, with all of the different possible combinations of displacement, base register, index register, and scaling factor.</p>
<p id="P700049702700000000000000004132A" data-uri="chapter03.xhtml#P700049702700000000000000004132A" class="pcalibre1 pcalibre calibre2">G<span class="smallcaps pcalibre pcalibre1">cc </span>uses the scalar movement operations only to transfer data from memory to an XMM register or from an XMM register to memory. For transferring data between two XMM registers, it uses one of two different instructions for copying the entire contents of one XMM register to another—namely, <code id="P700049702700000000000000004132B" data-uri="chapter03.xhtml#P700049702700000000000000004132B" class="pcalibre1 calibre8 pcalibre">vmovaps</code> for single-precision and <code id="P700049702700000000000000004132C" data-uri="chapter03.xhtml#P700049702700000000000000004132C" class="pcalibre1 calibre8 pcalibre">vmovapd</code> for double-precision values. For these cases, whether the program copies the entire register or just the low-order value affects neither the program functionality nor the execution speed, and so using these instructions rather than ones specific to scalar data makes no real difference. The letter `<code id="P700049702700000000000000004132D" data-uri="chapter03.xhtml#P700049702700000000000000004132D" class="pcalibre1 calibre8 pcalibre">a</code>' in these instruction names stands for "aligned." When used to read and write memory, they will cause an exception if the address does not satisfy a 16-byte alignment. For transferring between two registers, there is no possibility of an incorrect alignment.</p>
<p id="P700049702700000000000000004132E" data-uri="chapter03.xhtml#P700049702700000000000000004132E" class="pcalibre1 pcalibre calibre2">As an example of the different floating-point move operations, consider the C function</p>
<pre id="P700049702700000000000000004132F" data-uri="chapter03.xhtml#P700049702700000000000000004132F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041330" data-uri="chapter03.xhtml#P7000497027000000000000000041330" class="calibre10 pcalibre pcalibre1">
float float_mov(float v1, float *src, float *dst) {
	float v2 = *src;
	*dst = v1;
	return v2;
}
</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000030CF" data-uri="chapter03.xhtml#P70004970270000000000000000030CF">
<table id="P7000497027000000000000000041331" data-uri="chapter03.xhtml#P7000497027000000000000000041331" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16"><tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041332" data-uri="chapter03.xhtml#P7000497027000000000000000041332" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P70004970270000000000000000030D2" title="297" data-uri="chapter03.xhtml#P70004970270000000000000000030D2" epub:type="pagebreak"></span>Instruction</th>
<th id="P7000497027000000000000000041333" data-uri="chapter03.xhtml#P7000497027000000000000000041333" class="calibre18 pcalibre pcalibre1">Source</th>
<th id="P7000497027000000000000000041334" data-uri="chapter03.xhtml#P7000497027000000000000000041334" class="calibre18 pcalibre pcalibre1">Destination</th>
<th id="P7000497027000000000000000041335" data-uri="chapter03.xhtml#P7000497027000000000000000041335" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041336" data-uri="chapter03.xhtml#P7000497027000000000000000041336" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041337" data-uri="chapter03.xhtml#P7000497027000000000000000041337" class="calibre10 pcalibre pcalibre1">vcvttss2si</code></td>
<td id="P7000497027000000000000000041338" data-uri="chapter03.xhtml#P7000497027000000000000000041338" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var>/<var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P7000497027000000000000000041339" data-uri="chapter03.xhtml#P7000497027000000000000000041339" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P700049702700000000000000004133A" data-uri="chapter03.xhtml#P700049702700000000000000004133A" class="calibre20 pcalibre pcalibre1">Convert with truncation single precision to integer</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004133B" data-uri="chapter03.xhtml#P700049702700000000000000004133B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004133C" data-uri="chapter03.xhtml#P700049702700000000000000004133C" class="calibre10 pcalibre pcalibre1">vcvttsd2si</code></td>
<td id="P700049702700000000000000004133D" data-uri="chapter03.xhtml#P700049702700000000000000004133D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var>/<var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P700049702700000000000000004133E" data-uri="chapter03.xhtml#P700049702700000000000000004133E" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P700049702700000000000000004133F" data-uri="chapter03.xhtml#P700049702700000000000000004133F" class="calibre20 pcalibre pcalibre1">Convert with truncation double precision to integer</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041340" data-uri="chapter03.xhtml#P7000497027000000000000000041340" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041341" data-uri="chapter03.xhtml#P7000497027000000000000000041341" class="calibre10 pcalibre pcalibre1">vcvttss2siq</code></td>
<td id="P7000497027000000000000000041342" data-uri="chapter03.xhtml#P7000497027000000000000000041342" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var>/<var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P7000497027000000000000000041343" data-uri="chapter03.xhtml#P7000497027000000000000000041343" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041344" data-uri="chapter03.xhtml#P7000497027000000000000000041344" class="calibre20 pcalibre pcalibre1">Convert with truncation single precision to quad word integer</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041345" data-uri="chapter03.xhtml#P7000497027000000000000000041345" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041346" data-uri="chapter03.xhtml#P7000497027000000000000000041346" class="calibre10 pcalibre pcalibre1">vcvttsd2siq</code></td>
<td id="P7000497027000000000000000041347" data-uri="chapter03.xhtml#P7000497027000000000000000041347" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var>/<var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041348" data-uri="chapter03.xhtml#P7000497027000000000000000041348" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041349" data-uri="chapter03.xhtml#P7000497027000000000000000041349" class="calibre20 pcalibre pcalibre1">Convert with truncation double precision to quad word integer</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004134A" data-uri="chapter03.xhtml#P700049702700000000000000004134A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004134B" data-uri="chapter03.xhtml#P700049702700000000000000004134B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.47 </span>Two-operand floating-point conversion operations.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000004134C" data-uri="chapter03.xhtml#P700049702700000000000000004134C"><p id="P700049702700000000000000004134D" data-uri="chapter03.xhtml#P700049702700000000000000004134D" class="pcalibre calibre3 pcalibre1">These convert floating-point data to integers. (<var class="calibre5 pcalibre pcalibre1">X</var>: XMM register (e.g., <code id="P700049702700000000000000004134E" data-uri="chapter03.xhtml#P700049702700000000000000004134E" class="pcalibre1 calibre8 pcalibre">%xmm3</code>); <var class="calibre5 pcalibre pcalibre1">R</var><sub class="pcalibre1 calibre47 pcalibre">32</sub>: 32-bit general-purpose register (e.g., <code id="P700049702700000000000000004134F" data-uri="chapter03.xhtml#P700049702700000000000000004134F" class="pcalibre1 calibre8 pcalibre">%eax</code>); <var class="calibre5 pcalibre pcalibre1">R</var><sub class="pcalibre1 calibre47 pcalibre">64</sub>: 64-bit general-purpose register (e.g., <code id="P7000497027000000000000000041350" data-uri="chapter03.xhtml#P7000497027000000000000000041350" class="pcalibre1 calibre8 pcalibre">%rax</code>); <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">32</sub>: 32-bit memory range; <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">64</sub>: 64-bit memory range)</p></div></figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000030F1" data-uri="chapter03.xhtml#P70004970270000000000000000030F1">
<table id="P7000497027000000000000000041351" data-uri="chapter03.xhtml#P7000497027000000000000000041351" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16"><tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041352" data-uri="chapter03.xhtml#P7000497027000000000000000041352" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P7000497027000000000000000041353" data-uri="chapter03.xhtml#P7000497027000000000000000041353" class="calibre18 pcalibre pcalibre1">Source 1</th>
<th id="P7000497027000000000000000041354" data-uri="chapter03.xhtml#P7000497027000000000000000041354" class="calibre18 pcalibre pcalibre1">Source 2</th>
<th id="P7000497027000000000000000041355" data-uri="chapter03.xhtml#P7000497027000000000000000041355" class="calibre18 pcalibre pcalibre1">Destination</th>
<th id="P7000497027000000000000000041356" data-uri="chapter03.xhtml#P7000497027000000000000000041356" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041357" data-uri="chapter03.xhtml#P7000497027000000000000000041357" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041358" data-uri="chapter03.xhtml#P7000497027000000000000000041358" class="calibre10 pcalibre pcalibre1">vcvtsi2ss</code></td>
<td id="P7000497027000000000000000041359" data-uri="chapter03.xhtml#P7000497027000000000000000041359" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub>/<var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P700049702700000000000000004135A" data-uri="chapter03.xhtml#P700049702700000000000000004135A" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004135B" data-uri="chapter03.xhtml#P700049702700000000000000004135B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004135C" data-uri="chapter03.xhtml#P700049702700000000000000004135C" class="calibre20 pcalibre pcalibre1">Convert integer to single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004135D" data-uri="chapter03.xhtml#P700049702700000000000000004135D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004135E" data-uri="chapter03.xhtml#P700049702700000000000000004135E" class="calibre10 pcalibre pcalibre1">vcvtsi2sd</code></td>
<td id="P700049702700000000000000004135F" data-uri="chapter03.xhtml#P700049702700000000000000004135F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub>/<var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">32</sub></td>
<td id="P7000497027000000000000000041360" data-uri="chapter03.xhtml#P7000497027000000000000000041360" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041361" data-uri="chapter03.xhtml#P7000497027000000000000000041361" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041362" data-uri="chapter03.xhtml#P7000497027000000000000000041362" class="calibre20 pcalibre pcalibre1">Convert integer to double precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041363" data-uri="chapter03.xhtml#P7000497027000000000000000041363" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041364" data-uri="chapter03.xhtml#P7000497027000000000000000041364" class="calibre10 pcalibre pcalibre1">vcvtsi2ssq</code></td>
<td id="P7000497027000000000000000041365" data-uri="chapter03.xhtml#P7000497027000000000000000041365" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var><sub class="calibre59 pcalibre pcalibre1">32</sub>/<var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P7000497027000000000000000041366" data-uri="chapter03.xhtml#P7000497027000000000000000041366" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041367" data-uri="chapter03.xhtml#P7000497027000000000000000041367" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P7000497027000000000000000041368" data-uri="chapter03.xhtml#P7000497027000000000000000041368" class="calibre20 pcalibre pcalibre1">Convert quad word integer to single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041369" data-uri="chapter03.xhtml#P7000497027000000000000000041369" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004136A" data-uri="chapter03.xhtml#P700049702700000000000000004136A" class="calibre10 pcalibre pcalibre1">vcvtsi2sdq</code></td>
<td id="P700049702700000000000000004136B" data-uri="chapter03.xhtml#P700049702700000000000000004136B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">M</var>/<var class="calibre5 pcalibre pcalibre1">R</var><sub class="calibre59 pcalibre pcalibre1">64</sub></td>
<td id="P700049702700000000000000004136C" data-uri="chapter03.xhtml#P700049702700000000000000004136C" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004136D" data-uri="chapter03.xhtml#P700049702700000000000000004136D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">X</var></td>
<td id="P700049702700000000000000004136E" data-uri="chapter03.xhtml#P700049702700000000000000004136E" class="calibre20 pcalibre pcalibre1">Convert quad word integer to double precision</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004136F" data-uri="chapter03.xhtml#P700049702700000000000000004136F" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000041370" data-uri="chapter03.xhtml#P7000497027000000000000000041370" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.48 </span>Three-operand floating-point conversion operations.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000041371" data-uri="chapter03.xhtml#P7000497027000000000000000041371"><p id="P7000497027000000000000000041372" data-uri="chapter03.xhtml#P7000497027000000000000000041372" class="pcalibre calibre3 pcalibre1">These instructions convert from the data type of the first source to the data type of the destination. The second source value has no effect on the low-order bytes of the result. (<var class="calibre5 pcalibre pcalibre1">X</var>: XMM register (e.g., <code id="P7000497027000000000000000041373" data-uri="chapter03.xhtml#P7000497027000000000000000041373" class="pcalibre1 calibre8 pcalibre">%xmm3</code>); <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">32</sub>: 32-bit memory range; <var class="calibre5 pcalibre pcalibre1">M</var><sub class="pcalibre1 calibre47 pcalibre">64</sub>: 64-bit memory range)</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041374" data-uri="chapter03.xhtml#P7000497027000000000000000041374">and its associated x86-64 assembly code</p>
<pre id="P7000497027000000000000000041375" data-uri="chapter03.xhtml#P7000497027000000000000000041375" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041376" data-uri="chapter03.xhtml#P7000497027000000000000000041376" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">float float_mov(float v1, float *src, float *dst)</i>
	<i class="calibre5 pcalibre pcalibre1">v1 in %xmm0, src in %rdi, dst in %rsi</i>
1	float_mov:
2	vmovaps	%xmm0, %xmm1	<i class="calibre5 pcalibre pcalibre1">Copy v1</i>
3	vmovss	(%rdi), %xmm0	<i class="calibre5 pcalibre pcalibre1">Read v2 from src</i>
4	vmovss	%xmm1, (%rsi)	<i class="calibre5 pcalibre pcalibre1">Write v1 to dst</i>
5	ret			<i class="calibre5 pcalibre pcalibre1">Return v2 in %xmm0</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041377" data-uri="chapter03.xhtml#P7000497027000000000000000041377">We can see in this example the use of the <code id="P7000497027000000000000000041378" data-uri="chapter03.xhtml#P7000497027000000000000000041378" class="pcalibre1 calibre8 pcalibre">vmovaps</code> instruction to copy data from one register to another and the use of the <code id="P7000497027000000000000000041379" data-uri="chapter03.xhtml#P7000497027000000000000000041379" class="pcalibre1 calibre8 pcalibre">vmovss</code> instruction to copy data from memory to an XMM register and from an XMM register to memory.</p>
<p id="P700049702700000000000000004137A" data-uri="chapter03.xhtml#P700049702700000000000000004137A" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000030CF"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">3.47</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000030F1"><span class="pcalibre label pcalibre1">3.48</span></a> show sets of instructions for converting between floating-point and integer data types, as well as between different floating-point formats. These are all scalar instructions operating on individual data values. Those in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000030CF"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.47</span></a> convert from a floating-point value read from either an XMM register or memory and write the result to a general-purpose register (e.g., <code id="P700049702700000000000000004137B" data-uri="chapter03.xhtml#P700049702700000000000000004137B" class="pcalibre1 calibre8 pcalibre">%rax, %ebx</code>, etc.). When converting floating-point values to integers, they perform <i class="calibre5 pcalibre pcalibre1">truncation</i>, rounding values toward zero, as is required by C and most other programming languages.</p>
<p id="P700049702700000000000000004137C" data-uri="chapter03.xhtml#P700049702700000000000000004137C" class="pcalibre1 pcalibre calibre2">The instructions in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000030F1"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.48</span></a> convert from integer to floating point. They use an unusual three-operand format, with two sources and a destination. The <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000311E" title="298" data-uri="chapter03.xhtml#P700049702700000000000000000311E" epub:type="pagebreak"></span>first operand is read from memory or from a general-purpose register. For our purposes, we can ignore the second operand, since its value only affects the upper bytes of the result. The destination must be an XMM register. In common usage, both the second source and the destination operands are identical, as in the instruction</p>
<pre id="P700049702700000000000000004137D" data-uri="chapter03.xhtml#P700049702700000000000000004137D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004137E" data-uri="chapter03.xhtml#P700049702700000000000000004137E" class="calibre10 pcalibre pcalibre1">
vcvtsi2sdq	%rax, %xmm1, %xmm1
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004137F" data-uri="chapter03.xhtml#P700049702700000000000000004137F">This instruction reads a long integer from register <code id="P7000497027000000000000000041380" data-uri="chapter03.xhtml#P7000497027000000000000000041380" class="pcalibre1 calibre8 pcalibre">%rax</code>, converts it to data type double, and stores the result in the lower bytes of XMM register <code id="P7000497027000000000000000041381" data-uri="chapter03.xhtml#P7000497027000000000000000041381" class="pcalibre1 calibre8 pcalibre">%xmm1</code>.</p>
<p id="P7000497027000000000000000041382" data-uri="chapter03.xhtml#P7000497027000000000000000041382" class="pcalibre1 pcalibre calibre2">Finally, for converting between two different floating-point formats, current versions of <span class="smallcaps pcalibre pcalibre1">gcc </span>generate code that requires separate documentation. Suppose the low-order 4 bytes of <code id="P7000497027000000000000000041383" data-uri="chapter03.xhtml#P7000497027000000000000000041383" class="pcalibre1 calibre8 pcalibre">%xmm0</code> hold a single-precision value; then it would seem straightforward to use the instruction</p>
<pre id="P7000497027000000000000000041384" data-uri="chapter03.xhtml#P7000497027000000000000000041384" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041385" data-uri="chapter03.xhtml#P7000497027000000000000000041385" class="calibre10 pcalibre pcalibre1">
vcvtss2sd	%xmm0, %xmm0, %xmm0
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041386" data-uri="chapter03.xhtml#P7000497027000000000000000041386">to convert this to a double-precision value and store the result in the lower 8 bytes of register <code id="P7000497027000000000000000041387" data-uri="chapter03.xhtml#P7000497027000000000000000041387" class="pcalibre1 calibre8 pcalibre">%xmm0</code>. Instead, we find the following code generated by <span class="smallcaps pcalibre pcalibre1">gcc</span>:</p>
<pre id="P7000497027000000000000000041388" data-uri="chapter03.xhtml#P7000497027000000000000000041388" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041389" data-uri="chapter03.xhtml#P7000497027000000000000000041389" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Conversion from single to double precision</i>
1	vunpcklps	%xmm0, %xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Replicate first vector element</i>
2	vcvtps2pd	%xmm0, %xmm0		<i class="calibre5 pcalibre pcalibre1">Convert two vector elements to double</i>
</code></pre>
<p id="P700049702700000000000000004138A" data-uri="chapter03.xhtml#P700049702700000000000000004138A" class="pcalibre1 pcalibre calibre2">The <code id="P700049702700000000000000004138B" data-uri="chapter03.xhtml#P700049702700000000000000004138B" class="pcalibre1 calibre8 pcalibre">vunpcklps</code> instruction is normally used to interleave the values in two XMM registers and store them in a third. That is, if one source register contains words [<var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">3</sub>, <var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>] and the other contains words [<var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">3</sub>, <var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>], then the value of the destination register will be [<var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">s</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>, <var class="calibre5 pcalibre pcalibre1">d</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>]. In the code above, we see the same register being used for all three operands, and so if the original register held values [<var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">3</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>], then the instruction will update the register to hold values [<var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>]. The <code id="P700049702700000000000000004138C" data-uri="chapter03.xhtml#P700049702700000000000000004138C" class="pcalibre1 calibre8 pcalibre">vcvtps2pd</code> instruction expands the two low-order single-precision values in the source XMM register to be the two double-precision values in the destination XMM register. Applying this to the result of the preceding <code id="P700049702700000000000000004138D" data-uri="chapter03.xhtml#P700049702700000000000000004138D" class="pcalibre1 calibre8 pcalibre">vunpcklps</code> instruction would give values [<i class="calibre5 pcalibre pcalibre1">dx</i><sub class="pcalibre1 calibre47 pcalibre">0</sub>, <i class="calibre5 pcalibre pcalibre1">dx</i><sub class="pcalibre1 calibre47 pcalibre">0</sub>], where <i class="calibre5 pcalibre pcalibre1">dx</i><sub class="pcalibre1 calibre47 pcalibre">0</sub> is the result of converting <var class="calibre5 pcalibre pcalibre1">x</var> to double precision. That is, the net effect of the two instructions is to convert the original single-precision value in the low-order 4 bytes of <code id="P700049702700000000000000004138E" data-uri="chapter03.xhtml#P700049702700000000000000004138E" class="pcalibre1 calibre8 pcalibre">%xmm0</code> to double precision and store two copies of it in <code id="P700049702700000000000000004138F" data-uri="chapter03.xhtml#P700049702700000000000000004138F" class="pcalibre1 calibre8 pcalibre">%xmm0</code>. It is unclear why <span class="smallcaps pcalibre pcalibre1">gcc </span>generates this code. There is neither benefit nor need to have the value duplicated within the XMM register.</p>
<p id="P7000497027000000000000000041390" data-uri="chapter03.xhtml#P7000497027000000000000000041390" class="pcalibre1 pcalibre calibre2">G<span class="smallcaps pcalibre pcalibre1">cc </span>generates similar code for converting from double precision to single precision:</p>
<pre id="P7000497027000000000000000041391" data-uri="chapter03.xhtml#P7000497027000000000000000041391" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041392" data-uri="chapter03.xhtml#P7000497027000000000000000041392" class="calibre10 pcalibre pcalibre1">
<i class="calibre5 pcalibre pcalibre1">Conversion from double to single precision</i>
1	vmovddup	%xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Replicate first vector element</i>
2	vcvtpd2psx	%xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Convert two vector elements to single</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000041393" data-uri="chapter03.xhtml#P7000497027000000000000000041393"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003136" title="299" data-uri="chapter03.xhtml#P7000497027000000000000000003136" epub:type="pagebreak"></span>Suppose these instructions start with register <code id="P7000497027000000000000000041394" data-uri="chapter03.xhtml#P7000497027000000000000000041394" class="pcalibre1 calibre8 pcalibre">%xmm0</code> holding two double-precision values [<var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>]. Then the <code id="P7000497027000000000000000041395" data-uri="chapter03.xhtml#P7000497027000000000000000041395" class="pcalibre1 calibre8 pcalibre">vmovddup</code> instruction will set it to [<var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>]. The <code id="P7000497027000000000000000041396" data-uri="chapter03.xhtml#P7000497027000000000000000041396" class="pcalibre1 calibre8 pcalibre">vcvtpd2psx</code> instruction will convert these values to single precision, pack them into the low-order half of the register, and set the upper half to 0, yielding a result [0.0, 0.0, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>, <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre">0</sub>] (recall that floating-point value 0.0 is represented by a bit pattern of all zeros). Again, there is no clear value in computing the conversion from one precision to another this way, rather than by using the single instruction</p>
<pre id="P7000497027000000000000000041397" data-uri="chapter03.xhtml#P7000497027000000000000000041397" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041398" data-uri="chapter03.xhtml#P7000497027000000000000000041398" class="calibre10 pcalibre pcalibre1">
vcvtsd2ss %xmm0, %xmm0, %xmm0
</code></pre>
<p id="P7000497027000000000000000041399" data-uri="chapter03.xhtml#P7000497027000000000000000041399" class="pcalibre1 pcalibre calibre2">As an example of the different floating-point conversion operations, consider the C function</p>
<pre id="P700049702700000000000000004139A" data-uri="chapter03.xhtml#P700049702700000000000000004139A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004139B" data-uri="chapter03.xhtml#P700049702700000000000000004139B" class="calibre10 pcalibre pcalibre1">
double fcvt(int i, float *fp, double *dp, long *lp)
{
	float f = *fp; double d = *dp; long l = *lp;
	*lp = (long) d;
	*fp = (float) i;
	*dp = (double) l;
	return (double) f;
}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004139C" data-uri="chapter03.xhtml#P700049702700000000000000004139C">and its associated x86-64 assembly code</p>
<pre id="P700049702700000000000000004139D" data-uri="chapter03.xhtml#P700049702700000000000000004139D" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004139E" data-uri="chapter03.xhtml#P700049702700000000000000004139E" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double fcvt(int i, float *fp, double *dp, long *lp)</i>
	<i class="calibre5 pcalibre pcalibre1">i in %edi, fp in %rsi, dp in %rdx, lp in %rcx</i>
1	fcvt:
2	 vmovss	(%rsi), %xmm0			<i class="calibre5 pcalibre pcalibre1">Get f = *fp</i>
3	 movq	(%rcx), %rax			<i class="calibre5 pcalibre pcalibre1">Get l = *lp</i>
4	 vcvttsd2siq	(%rdx), %r8		<i class="calibre5 pcalibre pcalibre1">Get d = *dp and convert to long</i>
5	 movq	%r8, (%rcx)			<i class="calibre5 pcalibre pcalibre1">Store at lp</i>
6	 vcvtsi2ss	%edi, %xmm1, %xmm1	<i class="calibre5 pcalibre pcalibre1">Convert i to float</i>
7	 vmovss	%xmm1, (%rsi)			<i class="calibre5 pcalibre pcalibre1">Store at fp</i>
8	 vcvtsi2sdq	%rax, %xmm1, %xmm1	<i class="calibre5 pcalibre pcalibre1">Convert l to double</i>
9	 vmovsd	%xmm1, (%rdx)			<i class="calibre5 pcalibre pcalibre1">Store at dp</i>
	<i class="calibre5 pcalibre pcalibre1">The following two instructions convert f to double</i>
10	 vunpcklps	%xmm0, %xmm0, %xmm0
11	 vcvtps2pd	%xmm0, %xmm0
12	 ret					<i class="calibre5 pcalibre pcalibre1">Return f</i>
</code></pre>
<p id="P700049702700000000000000004139F" data-uri="chapter03.xhtml#P700049702700000000000000004139F" class="pcalibre1 pcalibre calibre2">All of the arguments to <code id="P70004970270000000000000000413A0" data-uri="chapter03.xhtml#P70004970270000000000000000413A0" class="pcalibre1 calibre8 pcalibre">fcvt</code> are passed through the general-purpose registers, since they are either integers or pointers. The result is returned in register <code id="P70004970270000000000000000413A1" data-uri="chapter03.xhtml#P70004970270000000000000000413A1" class="pcalibre1 calibre8 pcalibre">%xmm0</code>. As is documented in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003091"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.45</span></a>, this is the designated return register for float or double values. In this code, we see a number of the movement and conversion instructions of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000309B"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">3.46</span></a>–<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000030F1"><span class="pcalibre label pcalibre1">3.48</span></a>, as well as <span class="smallcaps pcalibre pcalibre1">gcc</span>'s preferred method of converting from single to double precision.</p>
<section id="P7000497027000000000000000003145" data-uri="chapter03.xhtml#P7000497027000000000000000003145" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000413A2" data-uri="chapter03.xhtml#P70004970270000000000000000413A2" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003147" title="300" data-uri="chapter03.xhtml#P7000497027000000000000000003147" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.50 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003968">347</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000413A3" data-uri="chapter03.xhtml#P70004970270000000000000000413A3">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000413A4" data-uri="chapter03.xhtml#P70004970270000000000000000413A4">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000413A5" data-uri="chapter03.xhtml#P70004970270000000000000000413A5"><p id="P70004970270000000000000000413A6" data-uri="chapter03.xhtml#P70004970270000000000000000413A6" class="pcalibre calibre3 pcalibre1">For the following C code, the expressions <code id="P70004970270000000000000000413A7" data-uri="chapter03.xhtml#P70004970270000000000000000413A7" class="pcalibre1 calibre8 pcalibre">val1-val4</code> all map to the program values <code id="P70004970270000000000000000413A8" data-uri="chapter03.xhtml#P70004970270000000000000000413A8" class="pcalibre1 calibre8 pcalibre">i, f, d</code>, and <code id="P70004970270000000000000000413A9" data-uri="chapter03.xhtml#P70004970270000000000000000413A9" class="pcalibre1 calibre8 pcalibre">l</code>:</p>
<pre id="P70004970270000000000000000413AA" data-uri="chapter03.xhtml#P70004970270000000000000000413AA" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413AB" data-uri="chapter03.xhtml#P70004970270000000000000000413AB" class="calibre10 pcalibre pcalibre1">
double fcvt2(int *ip, float *fp, double *dp, long l)
{
	int i = *ip; float f = *fp; double d = *dp;
	*ip = (int)	val1;
	*fp = (float)	val2;
	*dp = (double)	val3;
	return (double)	val4;
}
</code></pre>
<p id="P70004970270000000000000000413AC" data-uri="chapter03.xhtml#P70004970270000000000000000413AC" class="pcalibre calibre3 pcalibre1">Determine the mapping, based on the following x86-64 code for the function:</p>
<pre id="P70004970270000000000000000413AD" data-uri="chapter03.xhtml#P70004970270000000000000000413AD" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413AE" data-uri="chapter03.xhtml#P70004970270000000000000000413AE" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double fcvt2(int *ip, float *fp, double *dp, long l) ip in %rdi, fp in %rsi, dp in %rdx, l in %rcx Result returned in %xmm0</i>
1	fcvt2:
2	 movl	(%rdi), %eax
3	 vmovss	(%rsi), %xmm0
4	 vcvttsd2si	(%rdx), %r8d
5	 movl %r8d,	(%rdi)
6	 vcvtsi2ss	%eax, %xmm1, %xmm1
7	 vmovss %xmm1,	(%rsi)
8	 vcvtsi2sdq	%rcx, %xmm1, %xmm1
9	 vmovsd	%xmm1, (%rdx)
10	 vunpcklps	%xmm0, %xmm0, %xmm0
11	 vcvtps2pd	%xmm0, %xmm0
12	 ret
</code></pre>
</div></li></ol>
</section>
<section id="P7000497027000000000000000003154" data-uri="chapter03.xhtml#P7000497027000000000000000003154" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000413AF" data-uri="chapter03.xhtml#P70004970270000000000000000413AF" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.51 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000039B2">348</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000413B0" data-uri="chapter03.xhtml#P70004970270000000000000000413B0">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000413B1" data-uri="chapter03.xhtml#P70004970270000000000000000413B1">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000413B2" data-uri="chapter03.xhtml#P70004970270000000000000000413B2"><p id="P70004970270000000000000000413B3" data-uri="chapter03.xhtml#P70004970270000000000000000413B3" class="pcalibre calibre3 pcalibre1">The following C function converts an argument of type <code id="P70004970270000000000000000413B4" data-uri="chapter03.xhtml#P70004970270000000000000000413B4" class="pcalibre1 calibre8 pcalibre">src_t</code> to a return value of type <code id="P70004970270000000000000000413B5" data-uri="chapter03.xhtml#P70004970270000000000000000413B5" class="pcalibre1 calibre8 pcalibre">dst_t</code>, where these two types are defined using <code id="P70004970270000000000000000413B6" data-uri="chapter03.xhtml#P70004970270000000000000000413B6" class="pcalibre1 calibre8 pcalibre">typedef</code>:</p>
<pre id="P70004970270000000000000000413B7" data-uri="chapter03.xhtml#P70004970270000000000000000413B7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413B8" data-uri="chapter03.xhtml#P70004970270000000000000000413B8" class="calibre10 pcalibre pcalibre1">
dest_t cvt(src_t x)
{
	dest_t y = (dest_t) x;
	return y;
}
</code></pre>
<p id="P70004970270000000000000000413B9" data-uri="chapter03.xhtml#P70004970270000000000000000413B9" class="pcalibre calibre3 pcalibre1">For execution on x86-64, assume that argument <code id="P70004970270000000000000000413BA" data-uri="chapter03.xhtml#P70004970270000000000000000413BA" class="pcalibre1 calibre8 pcalibre">x</code> is either in <code id="P70004970270000000000000000413BB" data-uri="chapter03.xhtml#P70004970270000000000000000413BB" class="pcalibre1 calibre8 pcalibre">%xmm0</code> or in the appropriately named portion of register <code id="P70004970270000000000000000413BC" data-uri="chapter03.xhtml#P70004970270000000000000000413BC" class="pcalibre1 calibre8 pcalibre">%rdi</code> (i.e., <code id="P70004970270000000000000000413BD" data-uri="chapter03.xhtml#P70004970270000000000000000413BD" class="pcalibre1 calibre8 pcalibre">%rdi</code> or <code id="P70004970270000000000000000413BE" data-uri="chapter03.xhtml#P70004970270000000000000000413BE" class="pcalibre1 calibre8 pcalibre">%edi</code>). One or two instructions are to be used to perform the type conversion and to copy the value to the appropriately named portion of register <code id="P70004970270000000000000000413BF" data-uri="chapter03.xhtml#P70004970270000000000000000413BF" class="pcalibre1 calibre8 pcalibre">%rax</code> (integer result) or <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003166" title="301" data-uri="chapter03.xhtml#P7000497027000000000000000003166" epub:type="pagebreak"></span><code id="P70004970270000000000000000413C0" data-uri="chapter03.xhtml#P70004970270000000000000000413C0" class="pcalibre1 calibre8 pcalibre">%xmm0</code> (floating-point result). Show the instruction(s), including the source and destination registers.</p>
<table id="P70004970270000000000000000413C1" data-uri="chapter03.xhtml#P70004970270000000000000000413C1" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000413C2" data-uri="chapter03.xhtml#P70004970270000000000000000413C2" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">x</sub></th>
<th id="P70004970270000000000000000413C3" data-uri="chapter03.xhtml#P70004970270000000000000000413C3" class="calibre18 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">T</var><sub class="calibre59 pcalibre pcalibre1">y</sub></th>
<th id="P70004970270000000000000000413C4" data-uri="chapter03.xhtml#P70004970270000000000000000413C4" class="calibre18 pcalibre pcalibre1">Instruction(s)</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000413C5" data-uri="chapter03.xhtml#P70004970270000000000000000413C5" class="calibre20 pcalibre pcalibre1">long</td>
<td id="P70004970270000000000000000413C6" data-uri="chapter03.xhtml#P70004970270000000000000000413C6" class="calibre20 pcalibre pcalibre1">double</td>
<td id="P70004970270000000000000000413C7" data-uri="chapter03.xhtml#P70004970270000000000000000413C7" class="calibre20 pcalibre pcalibre1">vcvtsi2sdq %rdi, %xmm0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000413C8" data-uri="chapter03.xhtml#P70004970270000000000000000413C8" class="calibre20 pcalibre pcalibre1">double</td>
<td id="P70004970270000000000000000413C9" data-uri="chapter03.xhtml#P70004970270000000000000000413C9" class="calibre20 pcalibre pcalibre1">int</td>
<td id="P70004970270000000000000000413CA" data-uri="chapter03.xhtml#P70004970270000000000000000413CA" class="calibre20 pcalibre pcalibre1">____________________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000413CB" data-uri="chapter03.xhtml#P70004970270000000000000000413CB" class="calibre20 pcalibre pcalibre1">double</td>
<td id="P70004970270000000000000000413CC" data-uri="chapter03.xhtml#P70004970270000000000000000413CC" class="calibre20 pcalibre pcalibre1">float</td>
<td id="P70004970270000000000000000413CD" data-uri="chapter03.xhtml#P70004970270000000000000000413CD" class="calibre20 pcalibre pcalibre1">____________________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000413CE" data-uri="chapter03.xhtml#P70004970270000000000000000413CE" class="calibre20 pcalibre pcalibre1">long</td>
<td id="P70004970270000000000000000413CF" data-uri="chapter03.xhtml#P70004970270000000000000000413CF" class="calibre20 pcalibre pcalibre1">float</td>
<td id="P70004970270000000000000000413D0" data-uri="chapter03.xhtml#P70004970270000000000000000413D0" class="calibre20 pcalibre pcalibre1">____________________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000413D1" data-uri="chapter03.xhtml#P70004970270000000000000000413D1" class="calibre20 pcalibre pcalibre1">float</td>
<td id="P70004970270000000000000000413D2" data-uri="chapter03.xhtml#P70004970270000000000000000413D2" class="calibre20 pcalibre pcalibre1">long</td>
<td id="P70004970270000000000000000413D3" data-uri="chapter03.xhtml#P70004970270000000000000000413D3" class="calibre20 pcalibre pcalibre1">____________________</td>
</tr>
</tbody>
</table>
</div></li></ol>
</section>
</section>
<section id="P700049702700000000000000000317B" data-uri="chapter03.xhtml#P700049702700000000000000000317B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000413D4" data-uri="chapter03.xhtml#P70004970270000000000000000413D4" epub:type="title"><span class="pcalibre label pcalibre1">3.11.2 </span>Floating-Point Code in Procedures</h1></header>
<p id="P70004970270000000000000000413D5" data-uri="chapter03.xhtml#P70004970270000000000000000413D5" class="pcalibre1 pcalibre calibre2">With x86-64, the XMM registers are used for passing floating-point arguments to functions and for returning floating-point values from them. As is illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003091"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.45</span></a>, the following conventions are observed:</p>
<ul id="P70004970270000000000000000413D6" data-uri="chapter03.xhtml#P70004970270000000000000000413D6" class="calibre28 pcalibre pcalibre1">
<li id="P70004970270000000000000000413D7" data-uri="chapter03.xhtml#P70004970270000000000000000413D7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000413D8" data-uri="chapter03.xhtml#P70004970270000000000000000413D8" class="pcalibre calibre3 pcalibre1">Up to eight floating-point arguments can be passed in XMM registers <code id="P70004970270000000000000000413D9" data-uri="chapter03.xhtml#P70004970270000000000000000413D9" class="pcalibre1 calibre8 pcalibre">%xmm0–%xmm7</code>. These registers are used in the order the arguments are listed. Additional floating-point arguments can be passed on the stack.</p></li>
<li id="P70004970270000000000000000413DA" data-uri="chapter03.xhtml#P70004970270000000000000000413DA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000413DB" data-uri="chapter03.xhtml#P70004970270000000000000000413DB" class="pcalibre calibre3 pcalibre1">A function that returns a floating-point value does so in register <code id="P70004970270000000000000000413DC" data-uri="chapter03.xhtml#P70004970270000000000000000413DC" class="pcalibre1 calibre8 pcalibre">%xmm0</code>.</p></li>
<li id="P70004970270000000000000000413DD" data-uri="chapter03.xhtml#P70004970270000000000000000413DD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000413DE" data-uri="chapter03.xhtml#P70004970270000000000000000413DE" class="pcalibre calibre3 pcalibre1">All XMM registers are caller saved. The callee may overwrite any of these registers without first saving it.</p></li>
</ul>
<p id="P70004970270000000000000000413DF" data-uri="chapter03.xhtml#P70004970270000000000000000413DF" class="pcalibre1 pcalibre calibre2">When a function contains a combination of pointer, integer, and floating-point arguments, the pointers and integers are passed in general-purpose registers, while the floating-point values are passed in XMM registers. This means that the mapping of arguments to registers depends on both their types and their ordering. Here are several examples:</p>
<pre id="P70004970270000000000000000413E0" data-uri="chapter03.xhtml#P70004970270000000000000000413E0" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413E1" data-uri="chapter03.xhtml#P70004970270000000000000000413E1" class="calibre10 pcalibre pcalibre1">
double f1(int x, double y, long z);
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000413E2" data-uri="chapter03.xhtml#P70004970270000000000000000413E2">This function would have <code id="P70004970270000000000000000413E3" data-uri="chapter03.xhtml#P70004970270000000000000000413E3" class="pcalibre1 calibre8 pcalibre">x</code> in <code id="P70004970270000000000000000413E4" data-uri="chapter03.xhtml#P70004970270000000000000000413E4" class="pcalibre1 calibre8 pcalibre">%edi, y</code> in <code id="P70004970270000000000000000413E5" data-uri="chapter03.xhtml#P70004970270000000000000000413E5" class="pcalibre1 calibre8 pcalibre">%xmm0,</code> and <code id="P70004970270000000000000000413E6" data-uri="chapter03.xhtml#P70004970270000000000000000413E6" class="pcalibre1 calibre8 pcalibre">z</code> in <code id="P70004970270000000000000000413E7" data-uri="chapter03.xhtml#P70004970270000000000000000413E7" class="pcalibre1 calibre8 pcalibre">%rsi</code>.</p>
<pre id="P70004970270000000000000000413E8" data-uri="chapter03.xhtml#P70004970270000000000000000413E8" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413E9" data-uri="chapter03.xhtml#P70004970270000000000000000413E9" class="calibre10 pcalibre pcalibre1">
double f2(double y, int x, long z);
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000413EA" data-uri="chapter03.xhtml#P70004970270000000000000000413EA">This function would have the same register assignment as function <code id="P70004970270000000000000000413EB" data-uri="chapter03.xhtml#P70004970270000000000000000413EB" class="pcalibre1 calibre8 pcalibre">f1</code>.</p>
<pre id="P70004970270000000000000000413EC" data-uri="chapter03.xhtml#P70004970270000000000000000413EC" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000413ED" data-uri="chapter03.xhtml#P70004970270000000000000000413ED" class="calibre10 pcalibre pcalibre1">
double f1(float x, double *y, long *z);
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000413EE" data-uri="chapter03.xhtml#P70004970270000000000000000413EE">This function would have <code id="P70004970270000000000000000413EF" data-uri="chapter03.xhtml#P70004970270000000000000000413EF" class="pcalibre1 calibre8 pcalibre">x</code> in <code id="P70004970270000000000000000413F0" data-uri="chapter03.xhtml#P70004970270000000000000000413F0" class="pcalibre1 calibre8 pcalibre">%xmm0, y</code> in <code id="P70004970270000000000000000413F1" data-uri="chapter03.xhtml#P70004970270000000000000000413F1" class="pcalibre1 calibre8 pcalibre">%rdi</code>, and <code id="P70004970270000000000000000413F2" data-uri="chapter03.xhtml#P70004970270000000000000000413F2" class="pcalibre1 calibre8 pcalibre">z</code> in <code id="P70004970270000000000000000413F3" data-uri="chapter03.xhtml#P70004970270000000000000000413F3" class="pcalibre1 calibre8 pcalibre">%rsi.</code></p>
<section id="P700049702700000000000000000319C" data-uri="chapter03.xhtml#P700049702700000000000000000319C" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000413F4" data-uri="chapter03.xhtml#P70004970270000000000000000413F4" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.52 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000039B2">348</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P70004970270000000000000000413F5" data-uri="chapter03.xhtml#P70004970270000000000000000413F5">
<li class="general-problem pcalibre pcalibre1" id="P70004970270000000000000000413F6" data-uri="chapter03.xhtml#P70004970270000000000000000413F6">
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000413F7" data-uri="chapter03.xhtml#P70004970270000000000000000413F7"><p id="P70004970270000000000000000413F8" data-uri="chapter03.xhtml#P70004970270000000000000000413F8" class="pcalibre calibre3 pcalibre1">For each of the following function declarations, determine the register assignments for the arguments:</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P70004970270000000000000000413F9" data-uri="chapter03.xhtml#P70004970270000000000000000413F9">
<li id="P70004970270000000000000000413FA" data-uri="chapter03.xhtml#P70004970270000000000000000413FA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000413FB" data-uri="chapter03.xhtml#P70004970270000000000000000413FB" class="pcalibre calibre3 pcalibre1"><code id="P70004970270000000000000000413FC" data-uri="chapter03.xhtml#P70004970270000000000000000413FC" class="pcalibre1 calibre8 pcalibre">double g1(double a, long b, float c, int d);</code></p></li>
<li id="P70004970270000000000000000413FD" data-uri="chapter03.xhtml#P70004970270000000000000000413FD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000413FE" data-uri="chapter03.xhtml#P70004970270000000000000000413FE" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000031A8" title="302" data-uri="chapter03.xhtml#P70004970270000000000000000031A8" epub:type="pagebreak"></span><code id="P70004970270000000000000000413FF" data-uri="chapter03.xhtml#P70004970270000000000000000413FF" class="pcalibre1 calibre8 pcalibre">double g2(int a, double *b, float *c, long d);</code></p></li>
<li id="P7000497027000000000000000041400" data-uri="chapter03.xhtml#P7000497027000000000000000041400" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041401" data-uri="chapter03.xhtml#P7000497027000000000000000041401" class="pcalibre calibre3 pcalibre1"><code id="P7000497027000000000000000041402" data-uri="chapter03.xhtml#P7000497027000000000000000041402" class="pcalibre1 calibre8 pcalibre">double g3(double *a, double b, int c, float d);</code></p></li>
<li id="P7000497027000000000000000041403" data-uri="chapter03.xhtml#P7000497027000000000000000041403" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000041404" data-uri="chapter03.xhtml#P7000497027000000000000000041404" class="pcalibre calibre3 pcalibre1"><code id="P7000497027000000000000000041405" data-uri="chapter03.xhtml#P7000497027000000000000000041405" class="pcalibre1 calibre8 pcalibre">double g4(float a, int *b, float c, double d);</code></p></li>
</ol></div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000031B0" data-uri="chapter03.xhtml#P70004970270000000000000000031B0" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000041406" data-uri="chapter03.xhtml#P7000497027000000000000000041406" epub:type="title"><span class="pcalibre label pcalibre1">3.11.3 </span>Floating-Point Arithmetic Operations</h1></header>
<p id="P7000497027000000000000000041407" data-uri="chapter03.xhtml#P7000497027000000000000000041407" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P70004970270000000000000000031B9"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.49</span></a> documents a set of scalar AVX2 floating-point instructions that perform arithmetic operations. Each has either one (<var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>) or two (<var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub>) source operands and a destination operand <var class="calibre5 pcalibre pcalibre1">D</var>. The first source operand <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> can be either an XMM register or a memory location. The second source operand and the destination operands must be XMM registers. Each operation has an instruction for single precision and an instruction for double precision. The result is stored in the destination register.</p>
<p id="P7000497027000000000000000041408" data-uri="chapter03.xhtml#P7000497027000000000000000041408" class="pcalibre1 pcalibre calibre2">As an example, consider the following floating-point function:</p>
<pre id="P7000497027000000000000000041409" data-uri="chapter03.xhtml#P7000497027000000000000000041409" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004140A" data-uri="chapter03.xhtml#P700049702700000000000000004140A" class="calibre10 pcalibre pcalibre1">
double funct(double a, float x, double b, int i)
{
	return a*x - b/i;
}
</code></pre>
<p id="P700049702700000000000000004140B" data-uri="chapter03.xhtml#P700049702700000000000000004140B" class="pcalibre1 pcalibre calibre2">The x86-64 code is as follows:</p>
<pre id="P700049702700000000000000004140C" data-uri="chapter03.xhtml#P700049702700000000000000004140C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004140D" data-uri="chapter03.xhtml#P700049702700000000000000004140D" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double funct(double a, float x, double b, int i)</i>
	<i class="calibre5 pcalibre pcalibre1">a in %xmm0, x in %xmm1, b in %xmm2, i in %edi</i>
1	funct:
	<i class="calibre5 pcalibre pcalibre1">The following two instructions convert x to double</i>
2	vunpcklps	%xmm1, %xmm1, %xmm1
3	vcvtps2pd	%xmm1, %xmm1
4	vmulsd	%xmm0, %xmm1, %xmm0		<i class="calibre5 pcalibre pcalibre1">Multiply a by x</i>
5	vcvtsi2sd	%edi, %xmm1, %xmm1	<i class="calibre5 pcalibre pcalibre1">Convert i to double</i>
6	vdivsd	%xmm1, %xmm2, %xmm2		<i class="calibre5 pcalibre pcalibre1">Compute b/i</i>
</code></pre>
<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000031B9" data-uri="chapter03.xhtml#P70004970270000000000000000031B9">
<table id="P700049702700000000000000004140E" data-uri="chapter03.xhtml#P700049702700000000000000004140E" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004140F" data-uri="chapter03.xhtml#P700049702700000000000000004140F" class="calibre18 pcalibre pcalibre1">Single</th>
<th id="P7000497027000000000000000041410" data-uri="chapter03.xhtml#P7000497027000000000000000041410" class="calibre18 pcalibre pcalibre1">Double</th>
<th id="P7000497027000000000000000041411" data-uri="chapter03.xhtml#P7000497027000000000000000041411" class="calibre18 pcalibre pcalibre1">Effect</th>
<th id="P7000497027000000000000000041412" data-uri="chapter03.xhtml#P7000497027000000000000000041412" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041413" data-uri="chapter03.xhtml#P7000497027000000000000000041413" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041414" data-uri="chapter03.xhtml#P7000497027000000000000000041414" class="calibre10 pcalibre pcalibre1">vaddss</code></td>
<td id="P7000497027000000000000000041415" data-uri="chapter03.xhtml#P7000497027000000000000000041415" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041416" data-uri="chapter03.xhtml#P7000497027000000000000000041416" class="calibre10 pcalibre pcalibre1">vaddsd</code></td>
<td id="P7000497027000000000000000041417" data-uri="chapter03.xhtml#P7000497027000000000000000041417" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> +<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000041418" data-uri="chapter03.xhtml#P7000497027000000000000000041418" class="calibre20 pcalibre pcalibre1">Floating-point add</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041419" data-uri="chapter03.xhtml#P7000497027000000000000000041419" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004141A" data-uri="chapter03.xhtml#P700049702700000000000000004141A" class="calibre10 pcalibre pcalibre1">vsubss</code></td>
<td id="P700049702700000000000000004141B" data-uri="chapter03.xhtml#P700049702700000000000000004141B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004141C" data-uri="chapter03.xhtml#P700049702700000000000000004141C" class="calibre10 pcalibre pcalibre1">vsubsd</code></td>
<td id="P700049702700000000000000004141D" data-uri="chapter03.xhtml#P700049702700000000000000004141D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> -<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P700049702700000000000000004141E" data-uri="chapter03.xhtml#P700049702700000000000000004141E" class="calibre20 pcalibre pcalibre1">Floating-point subtract</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004141F" data-uri="chapter03.xhtml#P700049702700000000000000004141F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041420" data-uri="chapter03.xhtml#P7000497027000000000000000041420" class="calibre10 pcalibre pcalibre1">vmulss</code></td>
<td id="P7000497027000000000000000041421" data-uri="chapter03.xhtml#P7000497027000000000000000041421" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041422" data-uri="chapter03.xhtml#P7000497027000000000000000041422" class="calibre10 pcalibre pcalibre1">vmulsd</code></td>
<td id="P7000497027000000000000000041423" data-uri="chapter03.xhtml#P7000497027000000000000000041423" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> × <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000041424" data-uri="chapter03.xhtml#P7000497027000000000000000041424" class="calibre20 pcalibre pcalibre1">Floating-point multiply</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041425" data-uri="chapter03.xhtml#P7000497027000000000000000041425" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041426" data-uri="chapter03.xhtml#P7000497027000000000000000041426" class="calibre10 pcalibre pcalibre1">vdivss</code></td>
<td id="P7000497027000000000000000041427" data-uri="chapter03.xhtml#P7000497027000000000000000041427" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041428" data-uri="chapter03.xhtml#P7000497027000000000000000041428" class="calibre10 pcalibre pcalibre1">vdivsd</code></td>
<td id="P7000497027000000000000000041429" data-uri="chapter03.xhtml#P7000497027000000000000000041429" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>/<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P700049702700000000000000004142A" data-uri="chapter03.xhtml#P700049702700000000000000004142A" class="calibre20 pcalibre pcalibre1">Floating-point divide</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004142B" data-uri="chapter03.xhtml#P700049702700000000000000004142B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004142C" data-uri="chapter03.xhtml#P700049702700000000000000004142C" class="calibre10 pcalibre pcalibre1">vmaxss</code></td>
<td id="P700049702700000000000000004142D" data-uri="chapter03.xhtml#P700049702700000000000000004142D" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004142E" data-uri="chapter03.xhtml#P700049702700000000000000004142E" class="calibre10 pcalibre pcalibre1">vmaxsd</code></td>
<td id="P700049702700000000000000004142F" data-uri="chapter03.xhtml#P700049702700000000000000004142F" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← max(<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>)</td>
<td id="P7000497027000000000000000041430" data-uri="chapter03.xhtml#P7000497027000000000000000041430" class="calibre20 pcalibre pcalibre1">Floating-point maximum</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041431" data-uri="chapter03.xhtml#P7000497027000000000000000041431" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041432" data-uri="chapter03.xhtml#P7000497027000000000000000041432" class="calibre10 pcalibre pcalibre1">vminss</code></td>
<td id="P7000497027000000000000000041433" data-uri="chapter03.xhtml#P7000497027000000000000000041433" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041434" data-uri="chapter03.xhtml#P7000497027000000000000000041434" class="calibre10 pcalibre pcalibre1">vminsd</code></td>
<td id="P7000497027000000000000000041435" data-uri="chapter03.xhtml#P7000497027000000000000000041435" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← min(<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>)</td>
<td id="P7000497027000000000000000041436" data-uri="chapter03.xhtml#P7000497027000000000000000041436" class="calibre20 pcalibre pcalibre1">Floating-point minimum</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041437" data-uri="chapter03.xhtml#P7000497027000000000000000041437" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041438" data-uri="chapter03.xhtml#P7000497027000000000000000041438" class="calibre10 pcalibre pcalibre1">sqrtss</code></td>
<td id="P7000497027000000000000000041439" data-uri="chapter03.xhtml#P7000497027000000000000000041439" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004143A" data-uri="chapter03.xhtml#P700049702700000000000000004143A" class="calibre10 pcalibre pcalibre1">sqrtsd</code></td>
<td id="P700049702700000000000000004143B" data-uri="chapter03.xhtml#P700049702700000000000000004143B" class="calibre20 pcalibre pcalibre1"><span class="inlineequation1 pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="69" altimg-height="18" altimg="../images/ch03-eq8.png"><m:mrow><m:mi>D</m:mi><m:mo>←</m:mo><m:msqrt><m:mrow><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub></m:mrow></m:msqrt></m:mrow></m:math></span></td>
<td id="P700049702700000000000000004143C" data-uri="chapter03.xhtml#P700049702700000000000000004143C" class="calibre20 pcalibre pcalibre1">Floating-point square root</td>
</tr>
</tbody>
</table>
<figcaption id="P700049702700000000000000004143D" data-uri="chapter03.xhtml#P700049702700000000000000004143D" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004143E" data-uri="chapter03.xhtml#P700049702700000000000000004143E" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.49 </span>Scalar floating-point arithmetic operations.</h1></header><div class="caption pcalibre pcalibre1" id="P700049702700000000000000004143F" data-uri="chapter03.xhtml#P700049702700000000000000004143F"><p id="P7000497027000000000000000041440" data-uri="chapter03.xhtml#P7000497027000000000000000041440" class="pcalibre calibre3 pcalibre1">These have either one or two source operands and a destination operand.</p></div></figcaption>
</figure>
<pre id="P7000497027000000000000000041441" data-uri="chapter03.xhtml#P7000497027000000000000000041441" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041442" data-uri="chapter03.xhtml#P7000497027000000000000000041442" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000031EF" title="303" data-uri="chapter03.xhtml#P70004970270000000000000000031EF" epub:type="pagebreak"></span>7	vsubsd	%xmm2, %xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Subtract from a*x</i>
8	ret				<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<p id="P7000497027000000000000000041443" data-uri="chapter03.xhtml#P7000497027000000000000000041443" class="pcalibre1 pcalibre calibre2">The three floating-point arguments <code id="P7000497027000000000000000041444" data-uri="chapter03.xhtml#P7000497027000000000000000041444" class="pcalibre1 calibre8 pcalibre">a, x</code>, and <code id="P7000497027000000000000000041445" data-uri="chapter03.xhtml#P7000497027000000000000000041445" class="pcalibre1 calibre8 pcalibre">b</code> are passed in XMM registers <code id="P7000497027000000000000000041446" data-uri="chapter03.xhtml#P7000497027000000000000000041446" class="pcalibre1 calibre8 pcalibre">%xmm0-%xmm2</code>, while integer argument <code id="P7000497027000000000000000041447" data-uri="chapter03.xhtml#P7000497027000000000000000041447" class="pcalibre1 calibre8 pcalibre">i</code> is passed in register <code id="P7000497027000000000000000041448" data-uri="chapter03.xhtml#P7000497027000000000000000041448" class="pcalibre1 calibre8 pcalibre">%edi</code>. The standard two-instruction sequence is used to convert argument <code id="P7000497027000000000000000041449" data-uri="chapter03.xhtml#P7000497027000000000000000041449" class="pcalibre1 calibre8 pcalibre">x</code> to double (lines 2-3). Another conversion instruction is required to convert argument <code id="P700049702700000000000000004144A" data-uri="chapter03.xhtml#P700049702700000000000000004144A" class="pcalibre1 calibre8 pcalibre">i</code> to double (line 5). The function value is returned in register <code id="P700049702700000000000000004144B" data-uri="chapter03.xhtml#P700049702700000000000000004144B" class="pcalibre1 calibre8 pcalibre">%xmm0</code>.</p>
<section id="P70004970270000000000000000031F9" data-uri="chapter03.xhtml#P70004970270000000000000000031F9" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000004144C" data-uri="chapter03.xhtml#P700049702700000000000000004144C" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.53 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000039B2">348</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004144D" data-uri="chapter03.xhtml#P700049702700000000000000004144D">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004144E" data-uri="chapter03.xhtml#P700049702700000000000000004144E">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004144F" data-uri="chapter03.xhtml#P700049702700000000000000004144F"><p id="P7000497027000000000000000041450" data-uri="chapter03.xhtml#P7000497027000000000000000041450" class="pcalibre calibre3 pcalibre1">For the following C function, the types of the four arguments are defined by <code id="P7000497027000000000000000041451" data-uri="chapter03.xhtml#P7000497027000000000000000041451" class="pcalibre1 calibre8 pcalibre">typedef</code>:</p>
<pre id="P7000497027000000000000000041452" data-uri="chapter03.xhtml#P7000497027000000000000000041452" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041453" data-uri="chapter03.xhtml#P7000497027000000000000000041453" class="calibre10 pcalibre pcalibre1">
double funct1(arg1_t p, arg2_t q, arg3_t r, arg4_t s)
{
	return p/(q+r) - s;
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P7000497027000000000000000041454" data-uri="chapter03.xhtml#P7000497027000000000000000041454">When compiled, <span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following code:</p>
<pre id="P7000497027000000000000000041455" data-uri="chapter03.xhtml#P7000497027000000000000000041455" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041456" data-uri="chapter03.xhtml#P7000497027000000000000000041456" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double funct1(arg1_t p, arg2_t q, arg3_t r, arg4_t s)</i>
1	funct1:
2	  vcvtsi2ssq	%rsi, %xmm2, %xmm2
3	  vaddss	%xmm0, %xmm2, %xmm0
4	  vcvtsi2ss	%edi, %xmm2, %xmm2
5	  vdivss	%xmm0, %xmm2, %xmm0
6	  vunpcklps	%xmm0, %xmm0, %xmm0
7	  vcvtps2pd	%xmm0, %xmm0
8	  vsubsd	%xmm1, %xmm0, %xmm0
9	  ret
</code></pre>
<p id="P7000497027000000000000000041457" data-uri="chapter03.xhtml#P7000497027000000000000000041457" class="pcalibre calibre3 pcalibre1">Determine the possible combinations of types of the four arguments (there may be more than one).</p>
</div></li></ol>
</section>
<section id="P7000497027000000000000000003206" data-uri="chapter03.xhtml#P7000497027000000000000000003206" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000041458" data-uri="chapter03.xhtml#P7000497027000000000000000041458" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.54 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003A2D">349</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000041459" data-uri="chapter03.xhtml#P7000497027000000000000000041459">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004145A" data-uri="chapter03.xhtml#P700049702700000000000000004145A">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004145B" data-uri="chapter03.xhtml#P700049702700000000000000004145B"><p id="P700049702700000000000000004145C" data-uri="chapter03.xhtml#P700049702700000000000000004145C" class="pcalibre calibre3 pcalibre1">Function <code id="P700049702700000000000000004145D" data-uri="chapter03.xhtml#P700049702700000000000000004145D" class="pcalibre1 calibre8 pcalibre">funct2</code> has the following prototype:</p>
<pre id="P700049702700000000000000004145E" data-uri="chapter03.xhtml#P700049702700000000000000004145E" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004145F" data-uri="chapter03.xhtml#P700049702700000000000000004145F" class="calibre10 pcalibre pcalibre1">
double funct2(double w, int x, float y, long z);
</code></pre>
<p id="P7000497027000000000000000041460" data-uri="chapter03.xhtml#P7000497027000000000000000041460" class="pcalibre calibre3 pcalibre1">G<span class="smallcaps pcalibre pcalibre1">cc </span>generates the following code for the function:</p>
<pre id="P7000497027000000000000000041461" data-uri="chapter03.xhtml#P7000497027000000000000000041461" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041462" data-uri="chapter03.xhtml#P7000497027000000000000000041462" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double funct2(double w, int x, float y, long z) w in %xmm0, x in %edi, y in %xmm1, z in %rsi</i>
1	funct2:
2	  vcvtsi2ss	%edi, %xmm2, %xmm2
3	  vmulss	%xmm1, %xmm2, %xmm1
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000003212" title="304" data-uri="chapter03.xhtml#P7000497027000000000000000003212" epub:type="pagebreak"></span>4	  vunpcklps	%xmm1, %xmm1, %xmm1
5	  vcvtps2pd	%xmm1, %xmm2
6	  vcvtsi2sdq	%rsi, %xmm1, %xmm1
7	  vdivsd	%xmm1, %xmm0, %xmm0
8	  vsubsd	%xmm0, %xmm2, %xmm0
9	  ret
</code></pre>
<p id="P7000497027000000000000000041463" data-uri="chapter03.xhtml#P7000497027000000000000000041463" class="pcalibre calibre3 pcalibre1">Write a C version of <code id="P7000497027000000000000000041464" data-uri="chapter03.xhtml#P7000497027000000000000000041464" class="pcalibre1 calibre8 pcalibre">funct2</code>.</p>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000003215" data-uri="chapter03.xhtml#P7000497027000000000000000003215" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000041465" data-uri="chapter03.xhtml#P7000497027000000000000000041465" epub:type="title"><span class="pcalibre label pcalibre1">3.11.4 </span>Defining and Using Floating-Point Constants</h1></header>
<p id="P7000497027000000000000000041466" data-uri="chapter03.xhtml#P7000497027000000000000000041466" class="pcalibre1 pcalibre calibre2">Unlike integer arithmetic operations, AVX floating-point operations cannot have immediate values as operands. Instead, the compiler must allocate and initialize storage for any constant values. The code then reads the values from memory. This is illustrated by the following Celsius to Fahrenheit conversion function:</p>
<pre id="P7000497027000000000000000041467" data-uri="chapter03.xhtml#P7000497027000000000000000041467" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041468" data-uri="chapter03.xhtml#P7000497027000000000000000041468" class="calibre10 pcalibre pcalibre1">
double cel2fahr(double temp)
{
	return 1.8 * temp + 32.0;
}
</code></pre>
<p id="P7000497027000000000000000041469" data-uri="chapter03.xhtml#P7000497027000000000000000041469" class="pcalibre1 pcalibre calibre2">The relevant parts of the x86-64 assembly code are as follows:</p>
<pre id="P700049702700000000000000004146A" data-uri="chapter03.xhtml#P700049702700000000000000004146A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004146B" data-uri="chapter03.xhtml#P700049702700000000000000004146B" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double cel2fahr(double temp) temp in %xmm0</i>
1	cel2fahr:
2	  vmulsd	.LC2(%rip), %xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Multiply by 1.8</i>
3	  vaddsd	.LC3(%rip), %xmm0, %xmm0	<i class="calibre5 pcalibre pcalibre1">Add 32.0</i>
4	  ret
5	.LC2:
6	  .long	3435973837				<i class="calibre5 pcalibre pcalibre1">Low-order 4 bytes of 1.8</i>
7	  .long	1073532108				<i class="calibre5 pcalibre pcalibre1">High-order 4 bytes of 1.8</i>
8	.LC3:
9	  .long	0					<i class="calibre5 pcalibre pcalibre1">Low-order 4 bytes of 32.0</i>
10	  .long	1077936128				<i class="calibre5 pcalibre pcalibre1">High-order 4 bytes of 32.0</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004146C" data-uri="chapter03.xhtml#P700049702700000000000000004146C">We see that the function reads the value 1.8 from the memory location labeled <code id="P700049702700000000000000004146D" data-uri="chapter03.xhtml#P700049702700000000000000004146D" class="pcalibre1 calibre8 pcalibre">.LC2</code> and the value 32.0 from the memory location labeled <code id="P700049702700000000000000004146E" data-uri="chapter03.xhtml#P700049702700000000000000004146E" class="pcalibre1 calibre8 pcalibre">.LC3.</code> Looking at the values associated with these labels, we see that each is specified by a pair of .long declarations with the values given in decimal. How should these be interpreted as floating-point values? Looking at the declaration labeled .<code id="P700049702700000000000000004146F" data-uri="chapter03.xhtml#P700049702700000000000000004146F" class="pcalibre1 calibre8 pcalibre">LC2</code>, we see that the two values are 3435973837 (<code id="P7000497027000000000000000041470" data-uri="chapter03.xhtml#P7000497027000000000000000041470" class="pcalibre1 calibre8 pcalibre">0xcccccccd</code>) and 1073532108 (<code id="P7000497027000000000000000041471" data-uri="chapter03.xhtml#P7000497027000000000000000041471" class="pcalibre1 calibre8 pcalibre">0x3ffccccc</code>.) Since the machine uses little-endian byte ordering, the first value gives the low-order 4 bytes, while the second gives the high-order 4 bytes. From the high-order bytes, we can extract an exponent field of <code id="P7000497027000000000000000041472" data-uri="chapter03.xhtml#P7000497027000000000000000041472" class="pcalibre1 calibre8 pcalibre">0x3ff</code> (1023), from which we subtract a bias of 1023 to get an exponent of 0. Concatenating the fraction bits of the two values, we get a fraction field of <code id="P7000497027000000000000000041473" data-uri="chapter03.xhtml#P7000497027000000000000000041473" class="pcalibre1 calibre8 pcalibre">0xccccccccccccd</code>, which can be shown to be the fractional binary representation of 0.8, to which we add the implied leading one to get 1.8.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003225" data-uri="chapter03.xhtml#P7000497027000000000000000003225">
<table id="P7000497027000000000000000041474" data-uri="chapter03.xhtml#P7000497027000000000000000041474" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000041475" data-uri="chapter03.xhtml#P7000497027000000000000000041475" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003228" title="305" data-uri="chapter03.xhtml#P7000497027000000000000000003228" epub:type="pagebreak"></span>Single</th>
<th id="P7000497027000000000000000041476" data-uri="chapter03.xhtml#P7000497027000000000000000041476" class="calibre18 pcalibre pcalibre1">Double</th>
<th id="P7000497027000000000000000041477" data-uri="chapter03.xhtml#P7000497027000000000000000041477" class="calibre18 pcalibre pcalibre1">Effect</th>
<th id="P7000497027000000000000000041478" data-uri="chapter03.xhtml#P7000497027000000000000000041478" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000041479" data-uri="chapter03.xhtml#P7000497027000000000000000041479" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004147A" data-uri="chapter03.xhtml#P700049702700000000000000004147A" class="calibre10 pcalibre pcalibre1">vxorps</code></td>
<td id="P700049702700000000000000004147B" data-uri="chapter03.xhtml#P700049702700000000000000004147B" class="calibre20 pcalibre pcalibre1"><code id="P700049702700000000000000004147C" data-uri="chapter03.xhtml#P700049702700000000000000004147C" class="calibre10 pcalibre pcalibre1">xorpd</code></td>
<td id="P700049702700000000000000004147D" data-uri="chapter03.xhtml#P700049702700000000000000004147D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> ^ <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P700049702700000000000000004147E" data-uri="chapter03.xhtml#P700049702700000000000000004147E" class="calibre20 pcalibre pcalibre1">Bitwise <span class="smallcaps1 pcalibre pcalibre1">exclusive-or</span></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004147F" data-uri="chapter03.xhtml#P700049702700000000000000004147F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041480" data-uri="chapter03.xhtml#P7000497027000000000000000041480" class="calibre10 pcalibre pcalibre1">vandps</code></td>
<td id="P7000497027000000000000000041481" data-uri="chapter03.xhtml#P7000497027000000000000000041481" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000041482" data-uri="chapter03.xhtml#P7000497027000000000000000041482" class="calibre10 pcalibre pcalibre1">andpd</code></td>
<td id="P7000497027000000000000000041483" data-uri="chapter03.xhtml#P7000497027000000000000000041483" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">D</var> ← <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> &amp; <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P7000497027000000000000000041484" data-uri="chapter03.xhtml#P7000497027000000000000000041484" class="calibre20 pcalibre pcalibre1">Bitwise <span class="smallcaps1 pcalibre pcalibre1">and</span></td>
</tr>
</tbody>
</table>
<figcaption id="P7000497027000000000000000041485" data-uri="chapter03.xhtml#P7000497027000000000000000041485" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000041486" data-uri="chapter03.xhtml#P7000497027000000000000000041486" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.50 </span>Bitwise operations on packed data.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000041487" data-uri="chapter03.xhtml#P7000497027000000000000000041487"><p id="P7000497027000000000000000041488" data-uri="chapter03.xhtml#P7000497027000000000000000041488" class="pcalibre calibre3 pcalibre1">These instructions perform Boolean operations on all 128 bits in an XMM register.</p></div></figcaption>
</figure>
<section id="P700049702700000000000000000323C" data-uri="chapter03.xhtml#P700049702700000000000000000323C" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000041489" data-uri="chapter03.xhtml#P7000497027000000000000000041489" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.55 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003A2D">349</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004148A" data-uri="chapter03.xhtml#P700049702700000000000000004148A">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004148B" data-uri="chapter03.xhtml#P700049702700000000000000004148B">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004148C" data-uri="chapter03.xhtml#P700049702700000000000000004148C"><p id="P700049702700000000000000004148D" data-uri="chapter03.xhtml#P700049702700000000000000004148D" class="pcalibre calibre3 pcalibre1">Show how the numbers declared at label <code id="P700049702700000000000000004148E" data-uri="chapter03.xhtml#P700049702700000000000000004148E" class="pcalibre1 calibre8 pcalibre">.LC3</code> encode the number 32.0.</p></div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000003243" data-uri="chapter03.xhtml#P7000497027000000000000000003243" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004148F" data-uri="chapter03.xhtml#P700049702700000000000000004148F" epub:type="title"><span class="pcalibre label pcalibre1">3.11.5 </span>Using Bitwise Operations in Floating-Point Code</h1></header>
<p id="P7000497027000000000000000041490" data-uri="chapter03.xhtml#P7000497027000000000000000041490" class="pcalibre1 pcalibre calibre2">At times, we find <span class="smallcaps pcalibre pcalibre1">gcc </span>generating code that performs bitwise operations on XMM registers to implement useful floating-point results. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003225"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.50</span></a> shows some relevant instructions, similar to their counterparts for operating on general-purpose registers. These operations all act on packed data, meaning that they update the entire destination XMM register, applying the bitwise operation to all the data in the two source registers. Once again, our only interest for scalar data is the effect these instructions have on the low-order 4 or 8 bytes of the destination. These operations are often simple and convenient ways to manipulate floating-point values, as is explored in the following problem.</p>
<section id="P7000497027000000000000000003246" data-uri="chapter03.xhtml#P7000497027000000000000000003246" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000041491" data-uri="chapter03.xhtml#P7000497027000000000000000041491" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.56 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003A4A">350</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000041492" data-uri="chapter03.xhtml#P7000497027000000000000000041492">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000041493" data-uri="chapter03.xhtml#P7000497027000000000000000041493">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000041494" data-uri="chapter03.xhtml#P7000497027000000000000000041494"><p id="P7000497027000000000000000041495" data-uri="chapter03.xhtml#P7000497027000000000000000041495" class="pcalibre calibre3 pcalibre1">Consider the following C function, where <code id="P7000497027000000000000000041496" data-uri="chapter03.xhtml#P7000497027000000000000000041496" class="pcalibre1 calibre8 pcalibre">EXPR</code> is a macro defined with #define:</p>
<pre id="P7000497027000000000000000041497" data-uri="chapter03.xhtml#P7000497027000000000000000041497" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000041498" data-uri="chapter03.xhtml#P7000497027000000000000000041498" class="calibre10 pcalibre pcalibre1">
double simplefun(double x)
{
	return EXPR(x);
}
</code></pre>
<p id="P7000497027000000000000000041499" data-uri="chapter03.xhtml#P7000497027000000000000000041499" class="pcalibre calibre3 pcalibre1">Below, we show the AVX2 code generated for different definitions of <code id="P700049702700000000000000004149A" data-uri="chapter03.xhtml#P700049702700000000000000004149A" class="pcalibre1 calibre8 pcalibre">EXPR</code>, where value x is held in <code id="P700049702700000000000000004149B" data-uri="chapter03.xhtml#P700049702700000000000000004149B" class="pcalibre1 calibre8 pcalibre">%xmm0</code>. All of them correspond to some useful operation on floating-point values. Identify what the operations are. Your answers will require you to understand the bit patterns of the constant words being retrieved from memory.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P700049702700000000000000004149C" data-uri="chapter03.xhtml#P700049702700000000000000004149C">
<li id="P700049702700000000000000004149D" data-uri="chapter03.xhtml#P700049702700000000000000004149D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004149E" data-uri="chapter03.xhtml#P700049702700000000000000004149E" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P700049702700000000000000004149F" data-uri="chapter03.xhtml#P700049702700000000000000004149F" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000414A0" data-uri="chapter03.xhtml#P70004970270000000000000000414A0" class="calibre10 pcalibre pcalibre1">
1	  vmovsd	.LC1(%rip), %xmm1
2	  vandpd	%xmm1, %xmm0, %xmm0
3	.LC1:
4	  .long		4294967295
5	  .long		2147483647
6	  .long		0
7	  .long		0
</code></pre>
</li>
<li id="P70004970270000000000000000414A1" data-uri="chapter03.xhtml#P70004970270000000000000000414A1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414A2" data-uri="chapter03.xhtml#P70004970270000000000000000414A2" class="pcalibre calibre3 pcalibre1"></p>
<pre id="P70004970270000000000000000414A3" data-uri="chapter03.xhtml#P70004970270000000000000000414A3" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000414A4" data-uri="chapter03.xhtml#P70004970270000000000000000414A4" class="calibre10 pcalibre pcalibre1">
1	vxorpd	%xmm0, %xmm0, %xmm0
</code></pre>
</li>
<li id="P70004970270000000000000000414A5" data-uri="chapter03.xhtml#P70004970270000000000000000414A5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414A6" data-uri="chapter03.xhtml#P70004970270000000000000000414A6" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000325D" title="306" data-uri="chapter03.xhtml#P700049702700000000000000000325D" epub:type="pagebreak"></span></p>
<pre id="P70004970270000000000000000414A7" data-uri="chapter03.xhtml#P70004970270000000000000000414A7" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000414A8" data-uri="chapter03.xhtml#P70004970270000000000000000414A8" class="calibre10 pcalibre pcalibre1">
1	  vmovsd	.LC2(%rip), %xmm1
2	  vxorpd	%xmm1, %xmm0, %xmm0
3	.LC2:	
4	  .long		0
5	  .long		-2147483648
6	  .long		0
7	  .long		0
</code></pre>
</li>
</ol></div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000003260" data-uri="chapter03.xhtml#P7000497027000000000000000003260" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000414A9" data-uri="chapter03.xhtml#P70004970270000000000000000414A9" epub:type="title"><span class="pcalibre label pcalibre1">3.11.6 </span>Floating-Point Comparison Operations</h1></header>
<p id="P70004970270000000000000000414AA" data-uri="chapter03.xhtml#P70004970270000000000000000414AA" class="pcalibre1 pcalibre calibre2">AVX2 provides two instructions for comparing floating-point values:</p>
<table id="P70004970270000000000000000414AB" data-uri="chapter03.xhtml#P70004970270000000000000000414AB" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000414AC" data-uri="chapter03.xhtml#P70004970270000000000000000414AC" class="calibre18 pcalibre pcalibre1">Instruction</th>
<th id="P70004970270000000000000000414AD" data-uri="chapter03.xhtml#P70004970270000000000000000414AD" class="calibre18 pcalibre pcalibre1">Based on</th>
<th id="P70004970270000000000000000414AE" data-uri="chapter03.xhtml#P70004970270000000000000000414AE" class="calibre18 pcalibre pcalibre1">Description</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414AF" data-uri="chapter03.xhtml#P70004970270000000000000000414AF" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000414B0" data-uri="chapter03.xhtml#P70004970270000000000000000414B0" class="calibre10 pcalibre pcalibre1">ucomiss</code> <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P70004970270000000000000000414B1" data-uri="chapter03.xhtml#P70004970270000000000000000414B1" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>-<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000414B2" data-uri="chapter03.xhtml#P70004970270000000000000000414B2" class="calibre20 pcalibre pcalibre1">Compare single precision</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414B3" data-uri="chapter03.xhtml#P70004970270000000000000000414B3" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000414B4" data-uri="chapter03.xhtml#P70004970270000000000000000414B4" class="calibre10 pcalibre pcalibre1">ucomisd</code> <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub>, <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub></td>
<td id="P70004970270000000000000000414B5" data-uri="chapter03.xhtml#P70004970270000000000000000414B5" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>-<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000414B6" data-uri="chapter03.xhtml#P70004970270000000000000000414B6" class="calibre20 pcalibre pcalibre1">Compare double precision</td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000414B7" data-uri="chapter03.xhtml#P70004970270000000000000000414B7" class="pcalibre1 pcalibre calibre2">These instructions are similar to the <span class="smallcaps pcalibre pcalibre1">cmp </span>instructions (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002339"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6</span></a>), in that they compare operands <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> and <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub> (but in the opposite order one might expect) and set the condition codes to indicate their relative values. As with <code id="P70004970270000000000000000414B8" data-uri="chapter03.xhtml#P70004970270000000000000000414B8" class="pcalibre1 calibre8 pcalibre">cmpq</code>, they follow the ATT-format convention of listing the operands in reverse order. Argument <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub> must be in an XMM register, while <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub> can be either in an XMM register or in memory.</p>
<p id="P70004970270000000000000000414B9" data-uri="chapter03.xhtml#P70004970270000000000000000414B9" class="pcalibre1 pcalibre calibre2">The floating-point comparison instructions set three condition codes: the zero flag <code id="P70004970270000000000000000414BA" data-uri="chapter03.xhtml#P70004970270000000000000000414BA" class="pcalibre1 calibre8 pcalibre">ZF</code>, the carry flag <code id="P70004970270000000000000000414BB" data-uri="chapter03.xhtml#P70004970270000000000000000414BB" class="pcalibre1 calibre8 pcalibre">CF</code>, and the parity flag <code id="P70004970270000000000000000414BC" data-uri="chapter03.xhtml#P70004970270000000000000000414BC" class="pcalibre1 calibre8 pcalibre">PF</code>. We did not document the parity flag in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P700049702700000000000000000233F"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.1</span></a>, because it is not commonly found in <span class="smallcaps pcalibre pcalibre1">gcc</span>-generated x86 code. For integer operations, this flag is set when the most recent arithmetic or logical operation yielded a value where the least significant byte has even parity (i.e., an even number of ones in the byte). For floating-point comparisons, however, the flag is set when either operand is <i class="calibre5 pcalibre pcalibre1">NaN</i>. By convention, any comparison in C is considered to fail when one of the arguments is <i class="calibre5 pcalibre pcalibre1">NaN</i>, and this flag is used to detect such a condition. For example, even the comparison <code id="P70004970270000000000000000414BD" data-uri="chapter03.xhtml#P70004970270000000000000000414BD" class="pcalibre1 calibre8 pcalibre">x == x</code> yields 0 when <code id="P70004970270000000000000000414BE" data-uri="chapter03.xhtml#P70004970270000000000000000414BE" class="pcalibre1 calibre8 pcalibre">x</code> is <i class="calibre5 pcalibre pcalibre1">NaN</i>.</p>
<p id="P70004970270000000000000000414BF" data-uri="chapter03.xhtml#P70004970270000000000000000414BF" class="pcalibre1 pcalibre calibre2">The condition codes are set as follows:</p>
<table id="P70004970270000000000000000414C0" data-uri="chapter03.xhtml#P70004970270000000000000000414C0" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000414C1" data-uri="chapter03.xhtml#P70004970270000000000000000414C1" class="calibre18 pcalibre pcalibre1">Ordering <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub>:<var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></th>
<th id="P70004970270000000000000000414C2" data-uri="chapter03.xhtml#P70004970270000000000000000414C2" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000414C3" data-uri="chapter03.xhtml#P70004970270000000000000000414C3" class="calibre10 pcalibre pcalibre1">CF</code></th>
<th id="P70004970270000000000000000414C4" data-uri="chapter03.xhtml#P70004970270000000000000000414C4" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000414C5" data-uri="chapter03.xhtml#P70004970270000000000000000414C5" class="calibre10 pcalibre pcalibre1">ZF</code></th>
<th id="P70004970270000000000000000414C6" data-uri="chapter03.xhtml#P70004970270000000000000000414C6" class="calibre18 pcalibre pcalibre1"><code id="P70004970270000000000000000414C7" data-uri="chapter03.xhtml#P70004970270000000000000000414C7" class="calibre10 pcalibre pcalibre1">PF</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414C8" data-uri="chapter03.xhtml#P70004970270000000000000000414C8" class="calibre20 pcalibre pcalibre1">Unordered</td>
<td id="P70004970270000000000000000414C9" data-uri="chapter03.xhtml#P70004970270000000000000000414C9" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000414CA" data-uri="chapter03.xhtml#P70004970270000000000000000414CA" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000414CB" data-uri="chapter03.xhtml#P70004970270000000000000000414CB" class="calibre20 pcalibre pcalibre1">1</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414CC" data-uri="chapter03.xhtml#P70004970270000000000000000414CC" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> &lt; <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000414CD" data-uri="chapter03.xhtml#P70004970270000000000000000414CD" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000414CE" data-uri="chapter03.xhtml#P70004970270000000000000000414CE" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P70004970270000000000000000414CF" data-uri="chapter03.xhtml#P70004970270000000000000000414CF" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414D0" data-uri="chapter03.xhtml#P70004970270000000000000000414D0" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> = <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000414D1" data-uri="chapter03.xhtml#P70004970270000000000000000414D1" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P70004970270000000000000000414D2" data-uri="chapter03.xhtml#P70004970270000000000000000414D2" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P70004970270000000000000000414D3" data-uri="chapter03.xhtml#P70004970270000000000000000414D3" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000414D4" data-uri="chapter03.xhtml#P70004970270000000000000000414D4" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">2</sub> &gt; <var class="calibre5 pcalibre pcalibre1">S</var><sub class="calibre59 pcalibre pcalibre1">1</sub></td>
<td id="P70004970270000000000000000414D5" data-uri="chapter03.xhtml#P70004970270000000000000000414D5" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P70004970270000000000000000414D6" data-uri="chapter03.xhtml#P70004970270000000000000000414D6" class="calibre20 pcalibre pcalibre1">0</td>
<td id="P70004970270000000000000000414D7" data-uri="chapter03.xhtml#P70004970270000000000000000414D7" class="calibre20 pcalibre pcalibre1">0</td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000414D8" data-uri="chapter03.xhtml#P70004970270000000000000000414D8" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">unordered</i> case occurs when either operand is <i class="calibre5 pcalibre pcalibre1">NaN</i>. This can be detected with the parity flag. Commonly, the <code id="P70004970270000000000000000414D9" data-uri="chapter03.xhtml#P70004970270000000000000000414D9" class="pcalibre1 calibre8 pcalibre">jp</code> (for "jump on parity") instruction is used to conditionally jump when a floating-point comparison yields an unordered result. Except for this case, the values of the carry and zero flags are the same as those for an unsigned comparison: <code id="P70004970270000000000000000414DA" data-uri="chapter03.xhtml#P70004970270000000000000000414DA" class="pcalibre1 calibre8 pcalibre">ZF</code> is set when the two operands are equal, and <code id="P70004970270000000000000000414DB" data-uri="chapter03.xhtml#P70004970270000000000000000414DB" class="pcalibre1 calibre8 pcalibre">CF</code> is</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000003294" data-uri="chapter03.xhtml#P7000497027000000000000000003294">
<p id="P70004970270000000000000000414DC" data-uri="chapter03.xhtml#P70004970270000000000000000414DC" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000003296" title="307" data-uri="chapter03.xhtml#P7000497027000000000000000003296" epub:type="pagebreak"></span>(a) C code</p>
<pre id="P70004970270000000000000000414DD" data-uri="chapter03.xhtml#P70004970270000000000000000414DD" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000414DE" data-uri="chapter03.xhtml#P70004970270000000000000000414DE" class="calibre10 pcalibre pcalibre1">
typedef enum {NEG, ZERO, POS, OTHER} range_t;

range_t find_range(float x)
{
	int result;
	if (x &lt; 0)
	  result = NEG;
	else if (x == 0)
	  result = ZERO;
	else if (x &gt; 0)
	  result = POS;
	else
	result = OTHER;
return result;
}
</code></pre>
<p id="P70004970270000000000000000414DF" data-uri="chapter03.xhtml#P70004970270000000000000000414DF" class="pcalibre1 pcalibre calibre2">(b) Generated assembly code</p>
<pre id="P70004970270000000000000000414E0" data-uri="chapter03.xhtml#P70004970270000000000000000414E0" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000414E1" data-uri="chapter03.xhtml#P70004970270000000000000000414E1" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">range_t find_range(float x) x in %xmm0</i>
1	find_range:
2	  vxorps	%xmm1, %xmm1, %xmm1		<i class="calibre5 pcalibre pcalibre1">Set %xmm1 = 0</i>
3	  vucomiss	%xmm0, %xmm1			<i class="calibre5 pcalibre pcalibre1">Compare 0:x</i>
4	  ja	.L5					<i class="calibre5 pcalibre pcalibre1">If &gt;, goto</i> <b class="calibre4 pcalibre pcalibre1">neg</b>
5	  vucomiss	%xmm1, %xmm0			<i class="calibre5 pcalibre pcalibre1">Compare x:0</i>
6	  jp	.L8					<i class="calibre5 pcalibre pcalibre1">If NaN, goto</i> <b class="calibre4 pcalibre pcalibre1">posornan</b>
7	  movl	$1, %eax				<i class="calibre5 pcalibre pcalibre1">result = ZERO</i>
8	  je	.L3					<i class="calibre5 pcalibre pcalibre1">If =, goto</i> <b class="calibre4 pcalibre pcalibre1">done</b>
9	.L8:					  <b class="calibre4 pcalibre pcalibre1">posornan:</b>
10	  vucomiss	.LC0(%rip), %xmm0		<i class="calibre5 pcalibre pcalibre1">Compare x:0</i>
11	  setbe	%al					<i class="calibre5 pcalibre pcalibre1">Set result = NaN ? 1 : 0</i>
12	  movzbl	%al, %eax			<i class="calibre5 pcalibre pcalibre1">Zero-extend</i>
13	  addl	$2, %eax				<i class="calibre5 pcalibre pcalibre1">result += 2 (POS for &gt; 0, OTHER for NaN)</i>
14	  ret						<i class="calibre5 pcalibre pcalibre1">Return</i>
15	.L5:					  <b class="calibre4 pcalibre pcalibre1">neg:</b>
16	  movl	$0, %eax				<i class="calibre5 pcalibre pcalibre1">result = NEG</i>
17	.L3:					  <b class="calibre4 pcalibre pcalibre1">done:</b>
18	  rep; ret					<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<figcaption id="P70004970270000000000000000414E2" data-uri="chapter03.xhtml#P70004970270000000000000000414E2" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000414E3" data-uri="chapter03.xhtml#P70004970270000000000000000414E3" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.51 </span>Illustration of conditional branching in floating-point code.</h1></header></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000414E4" data-uri="chapter03.xhtml#P70004970270000000000000000414E4"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000329F" title="308" data-uri="chapter03.xhtml#P700049702700000000000000000329F" epub:type="pagebreak"></span>set when <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">2</sub> &lt; <var class="calibre5 pcalibre pcalibre1">S</var><sub class="pcalibre1 calibre47 pcalibre">1</sub>. Instructions such as <code id="P70004970270000000000000000414E5" data-uri="chapter03.xhtml#P70004970270000000000000000414E5" class="pcalibre1 calibre8 pcalibre">ja</code> and <code id="P70004970270000000000000000414E6" data-uri="chapter03.xhtml#P70004970270000000000000000414E6" class="pcalibre1 calibre8 pcalibre">jb</code> are used to conditionally jump on various combinations of these flags.</p>
<p id="P70004970270000000000000000414E7" data-uri="chapter03.xhtml#P70004970270000000000000000414E7" class="pcalibre1 pcalibre calibre2">As an example of floating-point comparisons, the C function of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003294"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.51(a)</span></a> classifies argument <code id="P70004970270000000000000000414E8" data-uri="chapter03.xhtml#P70004970270000000000000000414E8" class="pcalibre1 calibre8 pcalibre">x</code> according to its relation to 0.0, returning an enumerated type as the result. Enumerated types in C are encoded as integers, and so the possible function values are: <code id="P70004970270000000000000000414E9" data-uri="chapter03.xhtml#P70004970270000000000000000414E9" class="pcalibre1 calibre8 pcalibre">0 (NEG), 1 (ZERO), 2 (POS)</code>, and <code id="P70004970270000000000000000414EA" data-uri="chapter03.xhtml#P70004970270000000000000000414EA" class="pcalibre1 calibre8 pcalibre">3 (OTHER)</code>. This final outcome occurs when the value of <code id="P70004970270000000000000000414EB" data-uri="chapter03.xhtml#P70004970270000000000000000414EB" class="pcalibre1 calibre8 pcalibre">x</code> is <i class="calibre5 pcalibre pcalibre1">NaN</i>.</p>
<p id="P70004970270000000000000000414EC" data-uri="chapter03.xhtml#P70004970270000000000000000414EC" class="pcalibre1 pcalibre calibre2">G<span class="smallcaps pcalibre pcalibre1">cc </span>generates the code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000003294"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.51(b)</span></a> for <code id="P70004970270000000000000000414ED" data-uri="chapter03.xhtml#P70004970270000000000000000414ED" class="pcalibre1 calibre8 pcalibre">find_range</code>. The code is not very efficient—it compares <code id="P70004970270000000000000000414EE" data-uri="chapter03.xhtml#P70004970270000000000000000414EE" class="pcalibre1 calibre8 pcalibre">x</code> to 0.0 three times, even though the required information could be obtained with a single comparison. It also generates floating point constant 0.0 twice—once using <code id="P70004970270000000000000000414EF" data-uri="chapter03.xhtml#P70004970270000000000000000414EF" class="pcalibre1 calibre8 pcalibre">vxorps</code>, and once by reading the value from memory. Let us trace the flow of the function for the four possible comparison results:</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000414F0" data-uri="chapter03.xhtml#P70004970270000000000000000414F0">
<li id="P70004970270000000000000000414F1" data-uri="chapter03.xhtml#P70004970270000000000000000414F1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414F2" data-uri="chapter03.xhtml#P70004970270000000000000000414F2" class="calibre13 pcalibre pcalibre1">x &lt; 0.0 The ja branch on line 4 will be taken, jumping to the end with a return value of 0.</p></li>
<li id="P70004970270000000000000000414F3" data-uri="chapter03.xhtml#P70004970270000000000000000414F3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414F4" data-uri="chapter03.xhtml#P70004970270000000000000000414F4" class="calibre13 pcalibre pcalibre1">x = 0.0 The <code id="P70004970270000000000000000414F5" data-uri="chapter03.xhtml#P70004970270000000000000000414F5" class="pcalibre1 calibre8 pcalibre">ja</code> (line 4) and <code id="P70004970270000000000000000414F6" data-uri="chapter03.xhtml#P70004970270000000000000000414F6" class="pcalibre1 calibre8 pcalibre">jp</code> (line 6) branches will not be taken, but the <code id="P70004970270000000000000000414F7" data-uri="chapter03.xhtml#P70004970270000000000000000414F7" class="pcalibre1 calibre8 pcalibre">je</code> branch (line 8) will, returning with <code id="P70004970270000000000000000414F8" data-uri="chapter03.xhtml#P70004970270000000000000000414F8" class="pcalibre1 calibre8 pcalibre">%eax</code> equal to 1.</p></li>
<li id="P70004970270000000000000000414F9" data-uri="chapter03.xhtml#P70004970270000000000000000414F9" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414FA" data-uri="chapter03.xhtml#P70004970270000000000000000414FA" class="calibre13 pcalibre pcalibre1">x &gt; 0.0 None of the three branches will be taken. The set be (line 11) will yield 0, and this will be incremented by the <code id="P70004970270000000000000000414FB" data-uri="chapter03.xhtml#P70004970270000000000000000414FB" class="pcalibre1 calibre8 pcalibre">addl</code> instruction (line 13) to give a return value of 2.</p></li>
<li id="P70004970270000000000000000414FC" data-uri="chapter03.xhtml#P70004970270000000000000000414FC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000414FD" data-uri="chapter03.xhtml#P70004970270000000000000000414FD" class="calibre13 pcalibre pcalibre1">x = <i class="calibre5 pcalibre pcalibre1">NaN</i> The jp branch (line 6) will be taken. The third <code id="P70004970270000000000000000414FE" data-uri="chapter03.xhtml#P70004970270000000000000000414FE" class="pcalibre1 calibre8 pcalibre">vucomiss</code> instruction (line 10) will set both the carry and the zero flag, and so the set be instruction (line 11) and the following instruction will set <code id="P70004970270000000000000000414FF" data-uri="chapter03.xhtml#P70004970270000000000000000414FF" class="pcalibre1 calibre8 pcalibre">%eax</code> to 1. This gets incremented by the <code id="P7000497027000000000000000041500" data-uri="chapter03.xhtml#P7000497027000000000000000041500" class="pcalibre1 calibre8 pcalibre">addl</code> instruction (line 13) to give a return value of 3.</p></li>
</ul>
<p id="P7000497027000000000000000041501" data-uri="chapter03.xhtml#P7000497027000000000000000041501" class="pcalibre1 pcalibre calibre2">In Homework <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000032E1.xhtml#P700049702700000000000000000342C"><span class="pcalibre label pcalibre1">Problems </span><span class="pcalibre label pcalibre1">3.73</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000032E1.xhtml#P7000497027000000000000000003433"><span class="pcalibre label pcalibre1">3.74</span></a>, you are challenged to hand-generate more efficient implementations of <code id="P7000497027000000000000000041502" data-uri="chapter03.xhtml#P7000497027000000000000000041502" class="pcalibre1 calibre8 pcalibre">find_range</code>.</p>
<section id="P70004970270000000000000000032BE" data-uri="chapter03.xhtml#P70004970270000000000000000032BE" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000041503" data-uri="chapter03.xhtml#P7000497027000000000000000041503" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.57 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P7000497027000000000000000003A4A">350</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000041504" data-uri="chapter03.xhtml#P7000497027000000000000000041504">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000041505" data-uri="chapter03.xhtml#P7000497027000000000000000041505">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000041506" data-uri="chapter03.xhtml#P7000497027000000000000000041506"><p id="P7000497027000000000000000041507" data-uri="chapter03.xhtml#P7000497027000000000000000041507" class="pcalibre calibre3 pcalibre1">Function <code id="P7000497027000000000000000041508" data-uri="chapter03.xhtml#P7000497027000000000000000041508" class="pcalibre1 calibre8 pcalibre">funct3</code> has the following prototype:</p>
<pre id="P7000497027000000000000000041509" data-uri="chapter03.xhtml#P7000497027000000000000000041509" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004150A" data-uri="chapter03.xhtml#P700049702700000000000000004150A" class="calibre10 pcalibre pcalibre1">
double funct3(int *ap, double b, long c, float *dp);
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P700049702700000000000000004150B" data-uri="chapter03.xhtml#P700049702700000000000000004150B">For this function, <span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following code:</p>
<pre id="P700049702700000000000000004150C" data-uri="chapter03.xhtml#P700049702700000000000000004150C" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004150D" data-uri="chapter03.xhtml#P700049702700000000000000004150D" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">double funct3(int *ap, double b, long c, float *dp)</i>
	<i class="calibre5 pcalibre pcalibre1">ap in %rdi, b in %xmm0, c in %rsi, dp in %rdx</i>
1	funct3:
2	  vmovss	(%rdx), %xmm1
3	  vcvtsi2sd	(%rdi), %xmm2, %xmm2
4	  vucomisd	%xmm2, %xmm0
5	  jbe	.L8
6	  vcvtsi2ssq	%rsi, %xmm0, %xmm0
7	  vmulss	%xmm1, %xmm0, %xmm1
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000032CA" title="309" data-uri="chapter03.xhtml#P70004970270000000000000000032CA" epub:type="pagebreak"></span>8	  vunpcklps	%xmm1, %xmm1, %xmm1
9	  vcvtps2pd	%xmm1, %xmm0
10	  ret
11	.L8:
12	  vaddss	%xmm1, %xmm1, %xmm1
13	  vcvtsi2ssq	%rsi, %xmm0, %xmm0
14	  vaddss	%xmm1, %xmm0, %xmm0
15	  vunpcklps	%xmm0, %xmm0, %xmm0
16	  vcvtps2pd	%xmm0, %xmm0
17	  ret
</code></pre>
<p id="P700049702700000000000000004150E" data-uri="chapter03.xhtml#P700049702700000000000000004150E" class="pcalibre calibre3 pcalibre1">Write a C version of <code id="P700049702700000000000000004150F" data-uri="chapter03.xhtml#P700049702700000000000000004150F" class="pcalibre1 calibre8 pcalibre">funct3</code>.</p>
</div></li></ol>
</section>
</section>
<section id="P70004970270000000000000000032CD" data-uri="chapter03.xhtml#P70004970270000000000000000032CD" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000041510" data-uri="chapter03.xhtml#P7000497027000000000000000041510" epub:type="title"><span class="pcalibre label pcalibre1">3.11.7 </span>Observations about Floating-Point Code</h1></header>
<p id="P7000497027000000000000000041511" data-uri="chapter03.xhtml#P7000497027000000000000000041511" class="pcalibre1 pcalibre calibre2">We see that the general style of machine code generated for operating on floating-point data with AVX2 is similar to what we have seen for operating on integer data. Both use a collection of registers to hold and operate on values, and they use these registers for passing function arguments.</p>
<p id="P7000497027000000000000000041512" data-uri="chapter03.xhtml#P7000497027000000000000000041512" class="pcalibre1 pcalibre calibre2">Of course, there are many complexities in dealing with the different data types and the rules for evaluating expressions containing a mixture of data types, and AVX2 code involves many more different instructions and formats than is usually seen with functions that perform only integer arithmetic.</p>
<p id="P7000497027000000000000000041513" data-uri="chapter03.xhtml#P7000497027000000000000000041513" class="pcalibre1 pcalibre calibre2">AVX2 also has the potential to make computations run faster by performing parallel operations on packed data. Compiler developers are working on automating the conversion of scalar code to parallel code, but currently the most reliable way to achieve higher performance through parallelism is to use the extensions to the C language supported by <span class="smallcaps pcalibre pcalibre1">gcc </span>for manipulating vectors of data. See Web Aside <span class="smallcaps pcalibre pcalibre1">opt:simd </span>on page 546 to see how this can be done.</p>
</section>
</section></body></html>
