<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>10.8 Sharing Files</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000007A61" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000046534" data-uri="chapter10.xhtml#P7000497027000000000000000046534" epub:type="title"><span class="pcalibre label pcalibre1">10.8 </span>Sharing Files</h1></header>
<p id="P7000497027000000000000000046535" data-uri="chapter10.xhtml#P7000497027000000000000000046535" class="pcalibre1 pcalibre calibre2">Linux files can be shared in a number of different ways. Unless you have a clear picture of how the kernel represents open files, the idea of file sharing can be quite confusing. The kernel represents open files using three related data structures:</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000046536" data-uri="chapter10.xhtml#P7000497027000000000000000046536">
<li id="P7000497027000000000000000046537" data-uri="chapter10.xhtml#P7000497027000000000000000046537" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046538" data-uri="chapter10.xhtml#P7000497027000000000000000046538" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Descriptor table. </span>Each process has its own separate <i class="calibre5 pcalibre pcalibre1">descriptor table</i> whose entries are indexed by the process's open file descriptors. Each open descriptor entry points to an entry in the <i class="calibre5 pcalibre pcalibre1">file table.</i></p></li>
<li id="P7000497027000000000000000046539" data-uri="chapter10.xhtml#P7000497027000000000000000046539" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004653A" data-uri="chapter10.xhtml#P700049702700000000000000004653A" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">File table. </span>The set of open files is represented by a file table that is shared by all processes. Each file table entry consists of (for our purposes) the current file position, a <i class="calibre5 pcalibre pcalibre1">reference count</i> of the number of descriptor entries that currently point to it, and a pointer to an entry in the <i class="calibre5 pcalibre pcalibre1">v-node table</i>. Closing a descriptor decrements the reference count in the associated file table entry. The kernel will not delete the file table entry until its reference count is zero.</p></li>
<li id="P700049702700000000000000004653B" data-uri="chapter10.xhtml#P700049702700000000000000004653B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004653C" data-uri="chapter10.xhtml#P700049702700000000000000004653C" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">v-node table. </span>Like the file table, the v-node table is shared by all processes. Each entry contains most of the information in the <code id="P700049702700000000000000004653D" data-uri="chapter10.xhtml#P700049702700000000000000004653D" class="pcalibre1 calibre8 pcalibre">stat</code> structure, including the <code id="P700049702700000000000000004653E" data-uri="chapter10.xhtml#P700049702700000000000000004653E" class="pcalibre1 calibre8 pcalibre">st_mode</code> and <code id="P700049702700000000000000004653F" data-uri="chapter10.xhtml#P700049702700000000000000004653F" class="pcalibre1 calibre8 pcalibre">st_size</code> members.</p></li>
</ul>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007A6E" data-uri="chapter10.xhtml#P7000497027000000000000000007A6E">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007A6F" title="907" data-uri="chapter10.xhtml#P7000497027000000000000000007A6F" epub:type="pagebreak"></span>
<img alt="A diagram shows paths through tables." id="P7000497027000000000000000046540" data-uri="P700049702700000000000000000B7B4" src="../images/p907-1.png" class="pcalibre1 pcalibre calibre310"/>
<figcaption id="P7000497027000000000000000046541" data-uri="chapter10.xhtml#P7000497027000000000000000046541" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046542" data-uri="chapter10.xhtml#P7000497027000000000000000046542" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">10.12 </span>Typical kernel data structures for open files.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046543" data-uri="chapter10.xhtml#P7000497027000000000000000046543"><p id="P7000497027000000000000000046544" data-uri="chapter10.xhtml#P7000497027000000000000000046544" class="pcalibre calibre3 pcalibre1">In this example, two descriptors reference distinct files. There is no sharing.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000268A4" data-uri="chapter10.xhtml#P70004970270000000000000000268A4">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000046545" data-uri="chapter10.xhtml#P7000497027000000000000000046545" class="pcalibre1 pcalibre calibre2">The tables are summarized below.</p>
<ul id="P7000497027000000000000000046546" data-uri="chapter10.xhtml#P7000497027000000000000000046546" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000046547" data-uri="chapter10.xhtml#P7000497027000000000000000046547" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046548" data-uri="chapter10.xhtml#P7000497027000000000000000046548" class="pcalibre calibre3 pcalibre1">Descriptor table (one table per process), with the following entries:</p>
<ul id="P7000497027000000000000000046549" data-uri="chapter10.xhtml#P7000497027000000000000000046549" class="pcalibre calibre39 pcalibre1">
<li id="P700049702700000000000000004654A" data-uri="chapter10.xhtml#P700049702700000000000000004654A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004654B" data-uri="chapter10.xhtml#P700049702700000000000000004654B" class="pcalibre calibre3 pcalibre1">Fd 0 (stdin)</p></li>
<li id="P700049702700000000000000004654C" data-uri="chapter10.xhtml#P700049702700000000000000004654C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004654D" data-uri="chapter10.xhtml#P700049702700000000000000004654D" class="pcalibre calibre3 pcalibre1">Fd 1 (stdout), arrow to beginning of File A table</p></li>
<li id="P700049702700000000000000004654E" data-uri="chapter10.xhtml#P700049702700000000000000004654E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004654F" data-uri="chapter10.xhtml#P700049702700000000000000004654F" class="pcalibre calibre3 pcalibre1">Fd 2 (stderr)</p></li>
<li id="P7000497027000000000000000046550" data-uri="chapter10.xhtml#P7000497027000000000000000046550" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046551" data-uri="chapter10.xhtml#P7000497027000000000000000046551" class="pcalibre calibre3 pcalibre1">Fd 3</p></li>
<li id="P7000497027000000000000000046552" data-uri="chapter10.xhtml#P7000497027000000000000000046552" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046553" data-uri="chapter10.xhtml#P7000497027000000000000000046553" class="pcalibre calibre3 pcalibre1">Fd 4, arrow to beginning of File B table</p></li>
</ul></li>
<li id="P7000497027000000000000000046554" data-uri="chapter10.xhtml#P7000497027000000000000000046554" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046555" data-uri="chapter10.xhtml#P7000497027000000000000000046555" class="pcalibre calibre3 pcalibre1">Open file table (shared by all processes), File A to File B, each with the following entries</p>
<ul id="P7000497027000000000000000046556" data-uri="chapter10.xhtml#P7000497027000000000000000046556" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046557" data-uri="chapter10.xhtml#P7000497027000000000000000046557" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046558" data-uri="chapter10.xhtml#P7000497027000000000000000046558" class="pcalibre calibre3 pcalibre1">(blank)</p></li>
<li id="P7000497027000000000000000046559" data-uri="chapter10.xhtml#P7000497027000000000000000046559" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004655A" data-uri="chapter10.xhtml#P700049702700000000000000004655A" class="pcalibre calibre3 pcalibre1">File pos</p></li>
<li id="P700049702700000000000000004655B" data-uri="chapter10.xhtml#P700049702700000000000000004655B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004655C" data-uri="chapter10.xhtml#P700049702700000000000000004655C" class="pcalibre calibre3 pcalibre1">refcnt=1</p></li>
<li id="P700049702700000000000000004655D" data-uri="chapter10.xhtml#P700049702700000000000000004655D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004655E" data-uri="chapter10.xhtml#P700049702700000000000000004655E" class="pcalibre calibre3 pcalibre1">…</p></li>
</ul></li>
<li id="P700049702700000000000000004655F" data-uri="chapter10.xhtml#P700049702700000000000000004655F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046560" data-uri="chapter10.xhtml#P7000497027000000000000000046560" class="pcalibre calibre3 pcalibre1">V-node table (shared by all processes); arrows from open file tables to beginning of these two tables, respectively, with the following entries:</p>
<ul id="P7000497027000000000000000046561" data-uri="chapter10.xhtml#P7000497027000000000000000046561" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000046562" data-uri="chapter10.xhtml#P7000497027000000000000000046562" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046563" data-uri="chapter10.xhtml#P7000497027000000000000000046563" class="pcalibre calibre3 pcalibre1">File access</p></li>
<li id="P7000497027000000000000000046564" data-uri="chapter10.xhtml#P7000497027000000000000000046564" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046565" data-uri="chapter10.xhtml#P7000497027000000000000000046565" class="pcalibre calibre3 pcalibre1">File size</p></li>
<li id="P7000497027000000000000000046566" data-uri="chapter10.xhtml#P7000497027000000000000000046566" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046567" data-uri="chapter10.xhtml#P7000497027000000000000000046567" class="pcalibre calibre3 pcalibre1">File type</p></li>
<li id="P7000497027000000000000000046568" data-uri="chapter10.xhtml#P7000497027000000000000000046568" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046569" data-uri="chapter10.xhtml#P7000497027000000000000000046569" class="pcalibre calibre3 pcalibre1">…</p></li>
</ul>
</li>
</ul>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007A75" data-uri="chapter10.xhtml#P7000497027000000000000000007A75">
<img alt="A diagram illustrates filing sharing with arrows from the blank entries in File A and File B each leading to beginning of one v-node table." id="P700049702700000000000000004656A" data-uri="P700049702700000000000000000B7B5" src="../images/p907-2.png" class="pcalibre calibre311 pcalibre1"/>
<figcaption id="P700049702700000000000000004656B" data-uri="chapter10.xhtml#P700049702700000000000000004656B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004656C" data-uri="chapter10.xhtml#P700049702700000000000000004656C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">10.13 </span>File sharing.</h1></header>
<div class="caption pcalibre pcalibre1" id="P700049702700000000000000004656D" data-uri="chapter10.xhtml#P700049702700000000000000004656D"><p id="P700049702700000000000000004656E" data-uri="chapter10.xhtml#P700049702700000000000000004656E" class="pcalibre calibre3 pcalibre1">This example shows two descriptors sharing the same disk file through two open file table entries.</p></div></figcaption>
</figure>
<p id="P700049702700000000000000004656F" data-uri="chapter10.xhtml#P700049702700000000000000004656F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A6E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.12</span></a> shows an example where descriptors 1 and 4 reference two different files through distinct open file table entries. This is the typical situation, where files are not shared and where each descriptor corresponds to a distinct file.</p>
<p id="P7000497027000000000000000046570" data-uri="chapter10.xhtml#P7000497027000000000000000046570" class="pcalibre1 pcalibre calibre2">Multiple descriptors can also reference the same file through different file table entries, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A75"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.13</span></a>. This might happen, for example, if you were to call the <code id="P7000497027000000000000000046571" data-uri="chapter10.xhtml#P7000497027000000000000000046571" class="pcalibre1 calibre8 pcalibre">open</code> function twice with the same filename. The key idea is that each descriptor has its own distinct file position, so different reads on different descriptors can fetch data from different locations in the file.</p>
<p id="P7000497027000000000000000046572" data-uri="chapter10.xhtml#P7000497027000000000000000046572" class="pcalibre1 pcalibre calibre2">We can also understand how parent and child processes share files. Suppose that before a call to <code id="P7000497027000000000000000046573" data-uri="chapter10.xhtml#P7000497027000000000000000046573" class="pcalibre1 calibre8 pcalibre">fork</code>, the parent process has the open files shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A6E"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.12</span></a>. Then <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A82"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">10.14</span></a> shows the situation after the call to <code id="P7000497027000000000000000046574" data-uri="chapter10.xhtml#P7000497027000000000000000046574" class="pcalibre1 calibre8 pcalibre">fork</code>.</p>
<p id="P7000497027000000000000000046575" data-uri="chapter10.xhtml#P7000497027000000000000000046575" class="pcalibre1 pcalibre calibre2">The child gets its own duplicate copy of the parent's descriptor table. Parent and child share the same set of open file tables and thus share the same file position. An important consequence is that the parent and child must both close their descriptors before the kernel will delete the corresponding file table entry.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000007A82" data-uri="chapter10.xhtml#P7000497027000000000000000007A82">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007A83" title="908" data-uri="chapter10.xhtml#P7000497027000000000000000007A83" epub:type="pagebreak"></span>
<img alt="A diagram depicts tables with Parent and Child descriptor tables, each leading to File A and File B, which lead to separate v-node tables." id="P7000497027000000000000000046576" data-uri="P700049702700000000000000000B7B6" src="../images/p908-1.png" class="pcalibre1 calibre312 pcalibre"/>
<figcaption id="P7000497027000000000000000046577" data-uri="chapter10.xhtml#P7000497027000000000000000046577" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000046578" data-uri="chapter10.xhtml#P7000497027000000000000000046578" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">10.14 </span>How a child process inherits the parent's open files.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000046579" data-uri="chapter10.xhtml#P7000497027000000000000000046579"><p id="P700049702700000000000000004657A" data-uri="chapter10.xhtml#P700049702700000000000000004657A" class="pcalibre calibre3 pcalibre1">The initial situation is in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000007A6E"><span class="pcalibre label pcalibre1">Figure </span><span class="number pcalibre pcalibre1">10.12</span></a>.</p></div></figcaption>
</figure>
<section id="P7000497027000000000000000007A89" data-uri="chapter10.xhtml#P7000497027000000000000000007A89" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004657B" data-uri="chapter10.xhtml#P700049702700000000000000004657B" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">10.2 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000007B24.xhtml#P7000497027000000000000000007B41">915</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P700049702700000000000000004657C" data-uri="chapter10.xhtml#P700049702700000000000000004657C">
<li class="general-problem pcalibre pcalibre1" id="P700049702700000000000000004657D" data-uri="chapter10.xhtml#P700049702700000000000000004657D">
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004657E" data-uri="chapter10.xhtml#P700049702700000000000000004657E"><p id="P700049702700000000000000004657F" data-uri="chapter10.xhtml#P700049702700000000000000004657F" class="pcalibre calibre3 pcalibre1">Suppose the disk file <code id="P7000497027000000000000000046580" data-uri="chapter10.xhtml#P7000497027000000000000000046580" class="pcalibre1 calibre8 pcalibre">foobar.txt</code> consists of the six ASCII characters <code id="P7000497027000000000000000046581" data-uri="chapter10.xhtml#P7000497027000000000000000046581" class="pcalibre1 calibre8 pcalibre">foobar</code>. Then what is the output of the following program?</p>
<pre id="P7000497027000000000000000046582" data-uri="chapter10.xhtml#P7000497027000000000000000046582" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046583" data-uri="chapter10.xhtml#P7000497027000000000000000046583" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main()
4	{
5		int fd1, fd2;
6		char c;
7	
8		fd1 = Open("foobar.txt", O_RDONLY, 0);
9		fd2 = Open("foobar.txt", O_RDONLY, 0);
10		Read(fd1, &amp;c, 1);
11		Read(fd2, &amp;c, 1);
12		printf("c = %c\n", c);
13		exit(0);
14	}
</code></pre>
</div></li>
</ol>
</section>
<section id="P7000497027000000000000000007A93" data-uri="chapter10.xhtml#P7000497027000000000000000007A93" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046584" data-uri="chapter10.xhtml#P7000497027000000000000000046584" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">10.3 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000007B24.xhtml#P7000497027000000000000000007B41">915</a>)</h1></header>
<p id="P7000497027000000000000000046585" data-uri="chapter10.xhtml#P7000497027000000000000000046585" class="pcalibre1 pcalibre calibre2">As before, suppose the disk file <code id="P7000497027000000000000000046586" data-uri="chapter10.xhtml#P7000497027000000000000000046586" class="pcalibre1 calibre8 pcalibre">foobar.txt</code> consists of the six ASCII characters <code id="P7000497027000000000000000046587" data-uri="chapter10.xhtml#P7000497027000000000000000046587" class="pcalibre1 calibre8 pcalibre">foobar</code>. Then what is the output of the following program?</p>
<pre id="P7000497027000000000000000046588" data-uri="chapter10.xhtml#P7000497027000000000000000046588" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046589" data-uri="chapter10.xhtml#P7000497027000000000000000046589" class="calibre10 pcalibre pcalibre1">
1	#include "csapp.h"
2	
3	int main()
4	{
5		int fd;
6		char c;
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007A9A" title="909" data-uri="chapter10.xhtml#P7000497027000000000000000007A9A" epub:type="pagebreak"></span>7	
8		fd = Open("foobar.txt", O_RDONLY, 0);
9		if (Fork() == 0) {
10			Read(fd, &amp;c, 1);
11			exit(0);
12		}
13		Wait(NULL);
14		Read(fd, &amp;c, 1);
15		printf("c = %c\n", c);
16		exit(0);
17	}
</code></pre>
</section>
</section></body></html>
