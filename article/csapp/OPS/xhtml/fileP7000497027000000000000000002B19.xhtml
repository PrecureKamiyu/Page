<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>3.8 Array Allocation and Access</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000002B19" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000040D69" data-uri="chapter03.xhtml#P7000497027000000000000000040D69" epub:type="title"><span class="pcalibre label pcalibre1">3.8 </span>Array Allocation and Access</h1></header>
<p id="P7000497027000000000000000040D6A" data-uri="chapter03.xhtml#P7000497027000000000000000040D6A" class="pcalibre1 pcalibre calibre2">Arrays in C are one means of aggregating scalar data into larger data types. C uses a particularly simple implementation of arrays, and hence the translation into machine code is fairly straightforward. One unusual feature of C is that we can generate pointers to elements within arrays and perform arithmetic with these pointers. These are translated into address computations in machine code.</p>
<p id="P7000497027000000000000000040D6B" data-uri="chapter03.xhtml#P7000497027000000000000000040D6B" class="pcalibre1 pcalibre calibre2">Optimizing compilers are particularly good at simplifying the address computations used by array indexing. This can make the correspondence between the C code and its translation into machine code somewhat difficult to decipher.</p>
<section id="P7000497027000000000000000002B1D" data-uri="chapter03.xhtml#P7000497027000000000000000002B1D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040D6C" data-uri="chapter03.xhtml#P7000497027000000000000000040D6C" epub:type="title"><span class="pcalibre label pcalibre1">3.8.1 </span>Basic Principles</h1></header>
<p id="P7000497027000000000000000040D6D" data-uri="chapter03.xhtml#P7000497027000000000000000040D6D" class="pcalibre1 pcalibre calibre2">For data type <var class="calibre5 pcalibre pcalibre1">T</var> and integer constant <var class="calibre5 pcalibre pcalibre1">N</var>, consider a declaration of the form</p>
<pre id="P7000497027000000000000000040D6E" data-uri="chapter03.xhtml#P7000497027000000000000000040D6E" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D6F" data-uri="chapter03.xhtml#P7000497027000000000000000040D6F" class="calibre10 pcalibre pcalibre1">
<var class="calibre5 pcalibre pcalibre1">T</var> A[<var class="calibre5 pcalibre pcalibre1">N</var>]
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040D70" data-uri="chapter03.xhtml#P7000497027000000000000000040D70"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002B23" title="256" data-uri="chapter03.xhtml#P7000497027000000000000000002B23" epub:type="pagebreak"></span>Let us denote the starting location as <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040D71" data-uri="chapter03.xhtml#P7000497027000000000000000040D71" class="pcalibre1 pcalibre calibre74">A</code></sub>. The declaration has two effects. First, it allocates a contiguous region of <var class="calibre5 pcalibre pcalibre1">L</var> · <var class="calibre5 pcalibre pcalibre1">N</var> bytes in memory, where <var class="calibre5 pcalibre pcalibre1">L</var> is the size (in bytes) of data type <var class="calibre5 pcalibre pcalibre1">T</var>. Second, it introduces an identifier <code id="P7000497027000000000000000040D72" data-uri="chapter03.xhtml#P7000497027000000000000000040D72" class="pcalibre1 calibre8 pcalibre">A</code> that can be used as a pointer to the beginning of the array. The value of this pointer will be <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040D73" data-uri="chapter03.xhtml#P7000497027000000000000000040D73" class="pcalibre1 pcalibre calibre74">A</code></sub>. The array elements can be accessed using an integer index ranging between 0 and <var class="calibre5 pcalibre pcalibre1">N</var>–1. Array element <var class="calibre5 pcalibre pcalibre1">i</var> will be stored at address <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040D74" data-uri="chapter03.xhtml#P7000497027000000000000000040D74" class="pcalibre1 pcalibre calibre74">A</code></sub> + <var class="calibre5 pcalibre pcalibre1">L</var> · <var class="calibre5 pcalibre pcalibre1">i</var>.</p>
<p id="P7000497027000000000000000040D75" data-uri="chapter03.xhtml#P7000497027000000000000000040D75" class="pcalibre1 pcalibre calibre2">As examples, consider the following declarations:</p>
<pre id="P7000497027000000000000000040D76" data-uri="chapter03.xhtml#P7000497027000000000000000040D76" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040D77" data-uri="chapter03.xhtml#P7000497027000000000000000040D77" class="calibre10 pcalibre pcalibre1">
char	A[12];
char	*B[8];
int		C[6];
double	*D[5];
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040D78" data-uri="chapter03.xhtml#P7000497027000000000000000040D78">These declarations will generate arrays with the following parameters:</p>
<table id="P7000497027000000000000000040D79" data-uri="chapter03.xhtml#P7000497027000000000000000040D79" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040D7A" data-uri="chapter03.xhtml#P7000497027000000000000000040D7A" class="calibre18 pcalibre pcalibre1">Array</th>
<th id="P7000497027000000000000000040D7B" data-uri="chapter03.xhtml#P7000497027000000000000000040D7B" class="calibre18 pcalibre pcalibre1">Element size</th>
<th id="P7000497027000000000000000040D7C" data-uri="chapter03.xhtml#P7000497027000000000000000040D7C" class="calibre18 pcalibre pcalibre1">Total size</th>
<th id="P7000497027000000000000000040D7D" data-uri="chapter03.xhtml#P7000497027000000000000000040D7D" class="calibre18 pcalibre pcalibre1">Start address</th>
<th id="P7000497027000000000000000040D7E" data-uri="chapter03.xhtml#P7000497027000000000000000040D7E" class="calibre18 pcalibre pcalibre1">Element <var class="calibre5 pcalibre pcalibre1">i</var></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040D7F" data-uri="chapter03.xhtml#P7000497027000000000000000040D7F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040D80" data-uri="chapter03.xhtml#P7000497027000000000000000040D80" class="calibre10 pcalibre pcalibre1">A</code></td>
<td id="P7000497027000000000000000040D81" data-uri="chapter03.xhtml#P7000497027000000000000000040D81" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000040D82" data-uri="chapter03.xhtml#P7000497027000000000000000040D82" class="calibre20 pcalibre pcalibre1">12</td>
<td id="P7000497027000000000000000040D83" data-uri="chapter03.xhtml#P7000497027000000000000000040D83" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D84" data-uri="chapter03.xhtml#P7000497027000000000000000040D84" class="pcalibre1 pcalibre calibre74">A</code></sub></td>
<td id="P7000497027000000000000000040D85" data-uri="chapter03.xhtml#P7000497027000000000000000040D85" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D86" data-uri="chapter03.xhtml#P7000497027000000000000000040D86" class="pcalibre1 pcalibre calibre74">A</code></sub> + <var class="calibre5 pcalibre pcalibre1">i</var></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040D87" data-uri="chapter03.xhtml#P7000497027000000000000000040D87" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040D88" data-uri="chapter03.xhtml#P7000497027000000000000000040D88" class="calibre10 pcalibre pcalibre1">B</code></td>
<td id="P7000497027000000000000000040D89" data-uri="chapter03.xhtml#P7000497027000000000000000040D89" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000040D8A" data-uri="chapter03.xhtml#P7000497027000000000000000040D8A" class="calibre20 pcalibre pcalibre1">64</td>
<td id="P7000497027000000000000000040D8B" data-uri="chapter03.xhtml#P7000497027000000000000000040D8B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D8C" data-uri="chapter03.xhtml#P7000497027000000000000000040D8C" class="pcalibre1 pcalibre calibre74">B</code></sub></td>
<td id="P7000497027000000000000000040D8D" data-uri="chapter03.xhtml#P7000497027000000000000000040D8D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D8E" data-uri="chapter03.xhtml#P7000497027000000000000000040D8E" class="pcalibre1 pcalibre calibre74">B</code></sub> + 8<var class="calibre5 pcalibre pcalibre1">i</var></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040D8F" data-uri="chapter03.xhtml#P7000497027000000000000000040D8F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040D90" data-uri="chapter03.xhtml#P7000497027000000000000000040D90" class="calibre10 pcalibre pcalibre1">C</code></td>
<td id="P7000497027000000000000000040D91" data-uri="chapter03.xhtml#P7000497027000000000000000040D91" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000040D92" data-uri="chapter03.xhtml#P7000497027000000000000000040D92" class="calibre20 pcalibre pcalibre1">24</td>
<td id="P7000497027000000000000000040D93" data-uri="chapter03.xhtml#P7000497027000000000000000040D93" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D94" data-uri="chapter03.xhtml#P7000497027000000000000000040D94" class="pcalibre1 pcalibre calibre74">C</code></sub></td>
<td id="P7000497027000000000000000040D95" data-uri="chapter03.xhtml#P7000497027000000000000000040D95" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D96" data-uri="chapter03.xhtml#P7000497027000000000000000040D96" class="pcalibre1 pcalibre calibre74">C</code></sub> + 4<var class="calibre5 pcalibre pcalibre1">i</var></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040D97" data-uri="chapter03.xhtml#P7000497027000000000000000040D97" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040D98" data-uri="chapter03.xhtml#P7000497027000000000000000040D98" class="calibre10 pcalibre pcalibre1">D</code></td>
<td id="P7000497027000000000000000040D99" data-uri="chapter03.xhtml#P7000497027000000000000000040D99" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P7000497027000000000000000040D9A" data-uri="chapter03.xhtml#P7000497027000000000000000040D9A" class="calibre20 pcalibre pcalibre1">40</td>
<td id="P7000497027000000000000000040D9B" data-uri="chapter03.xhtml#P7000497027000000000000000040D9B" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D9C" data-uri="chapter03.xhtml#P7000497027000000000000000040D9C" class="pcalibre1 pcalibre calibre74">D</code></sub></td>
<td id="P7000497027000000000000000040D9D" data-uri="chapter03.xhtml#P7000497027000000000000000040D9D" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040D9E" data-uri="chapter03.xhtml#P7000497027000000000000000040D9E" class="pcalibre1 pcalibre calibre74">D</code></sub> + 8<var class="calibre5 pcalibre pcalibre1">i</var></td>
</tr>
</tbody>
</table>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040D9F" data-uri="chapter03.xhtml#P7000497027000000000000000040D9F">Array <code id="P7000497027000000000000000040DA0" data-uri="chapter03.xhtml#P7000497027000000000000000040DA0" class="pcalibre1 calibre8 pcalibre">A</code> consists of 12 single-byte (char) elements. Array <code id="P7000497027000000000000000040DA1" data-uri="chapter03.xhtml#P7000497027000000000000000040DA1" class="pcalibre1 calibre8 pcalibre">C</code> consists of 6 integers, each requiring 4 bytes. <code id="P7000497027000000000000000040DA2" data-uri="chapter03.xhtml#P7000497027000000000000000040DA2" class="pcalibre1 calibre8 pcalibre">B</code> and <code id="P7000497027000000000000000040DA3" data-uri="chapter03.xhtml#P7000497027000000000000000040DA3" class="pcalibre1 calibre8 pcalibre">D</code> are both arrays of pointers, and hence the array elements are 8 bytes each.</p>
<p id="P7000497027000000000000000040DA4" data-uri="chapter03.xhtml#P7000497027000000000000000040DA4" class="pcalibre1 pcalibre calibre2">The memory referencing instructions of x86-64 are designed to simplify array access. For example, suppose <code id="P7000497027000000000000000040DA5" data-uri="chapter03.xhtml#P7000497027000000000000000040DA5" class="pcalibre1 calibre8 pcalibre">E</code> is an array of values of type int and we wish to evaluate <code id="P7000497027000000000000000040DA6" data-uri="chapter03.xhtml#P7000497027000000000000000040DA6" class="pcalibre1 calibre8 pcalibre">E[i]</code>, where the address of <code id="P7000497027000000000000000040DA7" data-uri="chapter03.xhtml#P7000497027000000000000000040DA7" class="pcalibre1 calibre8 pcalibre">E</code> is stored in register <code id="P7000497027000000000000000040DA8" data-uri="chapter03.xhtml#P7000497027000000000000000040DA8" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <var class="calibre5 pcalibre pcalibre1">i</var> is stored in register <code id="P7000497027000000000000000040DA9" data-uri="chapter03.xhtml#P7000497027000000000000000040DA9" class="pcalibre1 calibre8 pcalibre">%rcx</code>. Then the instruction</p>
<pre id="P7000497027000000000000000040DAA" data-uri="chapter03.xhtml#P7000497027000000000000000040DAA" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040DAB" data-uri="chapter03.xhtml#P7000497027000000000000000040DAB" class="calibre10 pcalibre pcalibre1">
movl (%rdx,%rcx,4),%eax
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040DAC" data-uri="chapter03.xhtml#P7000497027000000000000000040DAC">will perform the address computation <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040DAD" data-uri="chapter03.xhtml#P7000497027000000000000000040DAD" class="pcalibre1 pcalibre calibre74">E</code></sub> + 4<var class="calibre5 pcalibre pcalibre1">i</var>, read that memory location, and copy the result to register <code id="P7000497027000000000000000040DAE" data-uri="chapter03.xhtml#P7000497027000000000000000040DAE" class="pcalibre1 calibre8 pcalibre">%eax</code>. The allowed scaling factors of 1, 2, 4, and 8 cover the sizes of the common primitive data types.</p>
<section id="P7000497027000000000000000002B62" data-uri="chapter03.xhtml#P7000497027000000000000000002B62" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040DAF" data-uri="chapter03.xhtml#P7000497027000000000000000040DAF" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.36 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000037B1">341</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040DB0" data-uri="chapter03.xhtml#P7000497027000000000000000040DB0">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040DB1" data-uri="chapter03.xhtml#P7000497027000000000000000040DB1">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040DB2" data-uri="chapter03.xhtml#P7000497027000000000000000040DB2"><p id="P7000497027000000000000000040DB3" data-uri="chapter03.xhtml#P7000497027000000000000000040DB3" class="pcalibre calibre3 pcalibre1">Consider the following declarations:</p>
<pre id="P7000497027000000000000000040DB4" data-uri="chapter03.xhtml#P7000497027000000000000000040DB4" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040DB5" data-uri="chapter03.xhtml#P7000497027000000000000000040DB5" class="calibre10 pcalibre pcalibre1">
short	S[7];
short	*T[3];
short	**U[6];
int		V[8];
double	*W[4];
</code></pre>
<p id="P7000497027000000000000000040DB6" data-uri="chapter03.xhtml#P7000497027000000000000000040DB6" class="pcalibre calibre3 pcalibre1">Fill in the following table describing the element size, the total size, and the address of element <var class="calibre5 pcalibre pcalibre1">i</var> for each of these arrays.</p>
<table id="P7000497027000000000000000040DB7" data-uri="chapter03.xhtml#P7000497027000000000000000040DB7" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040DB8" data-uri="chapter03.xhtml#P7000497027000000000000000040DB8" class="calibre18 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002B6D" title="257" data-uri="chapter03.xhtml#P7000497027000000000000000002B6D" epub:type="pagebreak"></span>Array</th>
<th id="P7000497027000000000000000040DB9" data-uri="chapter03.xhtml#P7000497027000000000000000040DB9" class="calibre18 pcalibre pcalibre1">Element size</th>
<th id="P7000497027000000000000000040DBA" data-uri="chapter03.xhtml#P7000497027000000000000000040DBA" class="calibre18 pcalibre pcalibre1">Total size</th>
<th id="P7000497027000000000000000040DBB" data-uri="chapter03.xhtml#P7000497027000000000000000040DBB" class="calibre18 pcalibre pcalibre1">Start address</th>
<th id="P7000497027000000000000000040DBC" data-uri="chapter03.xhtml#P7000497027000000000000000040DBC" class="calibre18 pcalibre pcalibre1">Element <var class="calibre5 pcalibre pcalibre1">i</var></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DBD" data-uri="chapter03.xhtml#P7000497027000000000000000040DBD" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DBE" data-uri="chapter03.xhtml#P7000497027000000000000000040DBE" class="calibre10 pcalibre pcalibre1">S</code></td>
<td id="P7000497027000000000000000040DBF" data-uri="chapter03.xhtml#P7000497027000000000000000040DBF" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DC0" data-uri="chapter03.xhtml#P7000497027000000000000000040DC0" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DC1" data-uri="chapter03.xhtml#P7000497027000000000000000040DC1" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040DC2" data-uri="chapter03.xhtml#P7000497027000000000000000040DC2" class="pcalibre1 pcalibre calibre74">S</code></sub></td>
<td id="P7000497027000000000000000040DC3" data-uri="chapter03.xhtml#P7000497027000000000000000040DC3" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DC4" data-uri="chapter03.xhtml#P7000497027000000000000000040DC4" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DC5" data-uri="chapter03.xhtml#P7000497027000000000000000040DC5" class="calibre10 pcalibre pcalibre1">T</code></td>
<td id="P7000497027000000000000000040DC6" data-uri="chapter03.xhtml#P7000497027000000000000000040DC6" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DC7" data-uri="chapter03.xhtml#P7000497027000000000000000040DC7" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DC8" data-uri="chapter03.xhtml#P7000497027000000000000000040DC8" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040DC9" data-uri="chapter03.xhtml#P7000497027000000000000000040DC9" class="pcalibre1 pcalibre calibre74">T</code></sub></td>
<td id="P7000497027000000000000000040DCA" data-uri="chapter03.xhtml#P7000497027000000000000000040DCA" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DCB" data-uri="chapter03.xhtml#P7000497027000000000000000040DCB" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DCC" data-uri="chapter03.xhtml#P7000497027000000000000000040DCC" class="calibre10 pcalibre pcalibre1">U</code></td>
<td id="P7000497027000000000000000040DCD" data-uri="chapter03.xhtml#P7000497027000000000000000040DCD" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DCE" data-uri="chapter03.xhtml#P7000497027000000000000000040DCE" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DCF" data-uri="chapter03.xhtml#P7000497027000000000000000040DCF" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040DD0" data-uri="chapter03.xhtml#P7000497027000000000000000040DD0" class="pcalibre1 pcalibre calibre74">U</code></sub></td>
<td id="P7000497027000000000000000040DD1" data-uri="chapter03.xhtml#P7000497027000000000000000040DD1" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DD2" data-uri="chapter03.xhtml#P7000497027000000000000000040DD2" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DD3" data-uri="chapter03.xhtml#P7000497027000000000000000040DD3" class="calibre10 pcalibre pcalibre1">V</code></td>
<td id="P7000497027000000000000000040DD4" data-uri="chapter03.xhtml#P7000497027000000000000000040DD4" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DD5" data-uri="chapter03.xhtml#P7000497027000000000000000040DD5" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DD6" data-uri="chapter03.xhtml#P7000497027000000000000000040DD6" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040DD7" data-uri="chapter03.xhtml#P7000497027000000000000000040DD7" class="pcalibre1 pcalibre calibre74">V</code></sub></td>
<td id="P7000497027000000000000000040DD8" data-uri="chapter03.xhtml#P7000497027000000000000000040DD8" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DD9" data-uri="chapter03.xhtml#P7000497027000000000000000040DD9" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DDA" data-uri="chapter03.xhtml#P7000497027000000000000000040DDA" class="calibre10 pcalibre pcalibre1">W</code></td>
<td id="P7000497027000000000000000040DDB" data-uri="chapter03.xhtml#P7000497027000000000000000040DDB" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DDC" data-uri="chapter03.xhtml#P7000497027000000000000000040DDC" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040DDD" data-uri="chapter03.xhtml#P7000497027000000000000000040DDD" class="calibre20 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre59 pcalibre pcalibre1"><code id="P7000497027000000000000000040DDE" data-uri="chapter03.xhtml#P7000497027000000000000000040DDE" class="pcalibre1 pcalibre calibre74">W</code></sub></td>
<td id="P7000497027000000000000000040DDF" data-uri="chapter03.xhtml#P7000497027000000000000000040DDF" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002B95" data-uri="chapter03.xhtml#P7000497027000000000000000002B95" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040DE0" data-uri="chapter03.xhtml#P7000497027000000000000000040DE0" epub:type="title"><span class="pcalibre label pcalibre1">3.8.2 </span>Pointer Arithmetic</h1></header>
<p id="P7000497027000000000000000040DE1" data-uri="chapter03.xhtml#P7000497027000000000000000040DE1" class="pcalibre1 pcalibre calibre2">C allows arithmetic on pointers, where the computed value is scaled according to the size of the data type referenced by the pointer. That is, if <code id="P7000497027000000000000000040DE2" data-uri="chapter03.xhtml#P7000497027000000000000000040DE2" class="pcalibre1 calibre8 pcalibre">p</code> is a pointer to data of type <var class="calibre5 pcalibre pcalibre1">T</var>, and the value of <code id="P7000497027000000000000000040DE3" data-uri="chapter03.xhtml#P7000497027000000000000000040DE3" class="pcalibre1 calibre8 pcalibre">p</code> is <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040DE4" data-uri="chapter03.xhtml#P7000497027000000000000000040DE4" class="pcalibre1 pcalibre calibre74">p</code></sub>, then the expression <code id="P7000497027000000000000000040DE5" data-uri="chapter03.xhtml#P7000497027000000000000000040DE5" class="pcalibre1 calibre8 pcalibre">p+i</code> has value <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040DE6" data-uri="chapter03.xhtml#P7000497027000000000000000040DE6" class="pcalibre1 pcalibre calibre74">p</code></sub> + <var class="calibre5 pcalibre pcalibre1">L</var> · <var class="calibre5 pcalibre pcalibre1">i</var>, where <var class="calibre5 pcalibre pcalibre1">L</var> is the size of data type <var class="calibre5 pcalibre pcalibre1">T</var>.</p>
<p id="P7000497027000000000000000040DE7" data-uri="chapter03.xhtml#P7000497027000000000000000040DE7" class="pcalibre1 pcalibre calibre2">The unary operators `<code id="P7000497027000000000000000040DE8" data-uri="chapter03.xhtml#P7000497027000000000000000040DE8" class="pcalibre1 calibre8 pcalibre">&amp;</code>' and `*' allow the generation and dereferencing of pointers. That is, for an expression <code id="P7000497027000000000000000040DE9" data-uri="chapter03.xhtml#P7000497027000000000000000040DE9" class="pcalibre1 calibre8 pcalibre"><i class="calibre5 pcalibre pcalibre1">Expr</i></code> denoting some object, <code id="P7000497027000000000000000040DEA" data-uri="chapter03.xhtml#P7000497027000000000000000040DEA" class="pcalibre1 calibre8 pcalibre">&amp;<i class="calibre5 pcalibre pcalibre1">Expr</i></code> is a pointer giving the address of the object. For an expression <code id="P7000497027000000000000000040DEB" data-uri="chapter03.xhtml#P7000497027000000000000000040DEB" class="pcalibre1 calibre8 pcalibre"><i class="calibre5 pcalibre pcalibre1">AExpr</i></code> denoting an address, <code id="P7000497027000000000000000040DEC" data-uri="chapter03.xhtml#P7000497027000000000000000040DEC" class="pcalibre1 calibre8 pcalibre">*<i class="calibre5 pcalibre pcalibre1">AExpr</i></code> gives the value at that address. The expressions <code id="P7000497027000000000000000040DED" data-uri="chapter03.xhtml#P7000497027000000000000000040DED" class="pcalibre1 calibre8 pcalibre"><i class="calibre5 pcalibre pcalibre1">Expr</i></code> and <code id="P7000497027000000000000000040DEE" data-uri="chapter03.xhtml#P7000497027000000000000000040DEE" class="pcalibre1 calibre8 pcalibre">*&amp;<i class="calibre5 pcalibre pcalibre1">Expr</i></code> are therefore equivalent. The array subscripting operation can be applied to both arrays and pointers. The array reference <code id="P7000497027000000000000000040DEF" data-uri="chapter03.xhtml#P7000497027000000000000000040DEF" class="pcalibre1 calibre8 pcalibre">A[i]</code> is identical to the expression <code id="P7000497027000000000000000040DF0" data-uri="chapter03.xhtml#P7000497027000000000000000040DF0" class="pcalibre1 calibre8 pcalibre">*(A+i)</code>. It computes the address of the <var class="calibre5 pcalibre pcalibre1">i</var>th array element and then accesses this memory location.</p>
<p id="P7000497027000000000000000040DF1" data-uri="chapter03.xhtml#P7000497027000000000000000040DF1" class="pcalibre1 pcalibre calibre2">Expanding on our earlier example, suppose the starting address of integer array <code id="P7000497027000000000000000040DF2" data-uri="chapter03.xhtml#P7000497027000000000000000040DF2" class="pcalibre1 calibre8 pcalibre">E</code> and integer index <var class="calibre5 pcalibre pcalibre1">i</var> are stored in registers <code id="P7000497027000000000000000040DF3" data-uri="chapter03.xhtml#P7000497027000000000000000040DF3" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000040DF4" data-uri="chapter03.xhtml#P7000497027000000000000000040DF4" class="pcalibre1 calibre8 pcalibre">%rcx</code>, respectively. The following are some expressions involving <code id="P7000497027000000000000000040DF5" data-uri="chapter03.xhtml#P7000497027000000000000000040DF5" class="pcalibre1 calibre8 pcalibre">E</code>. We also show an assembly-code implementation of each expression, with the result being stored in either register <code id="P7000497027000000000000000040DF6" data-uri="chapter03.xhtml#P7000497027000000000000000040DF6" class="pcalibre1 calibre8 pcalibre">%eax</code> (for data) or register <code id="P7000497027000000000000000040DF7" data-uri="chapter03.xhtml#P7000497027000000000000000040DF7" class="pcalibre1 calibre8 pcalibre">%rax</code> (for pointers).</p>
<table id="P7000497027000000000000000040DF8" data-uri="chapter03.xhtml#P7000497027000000000000000040DF8" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040DF9" data-uri="chapter03.xhtml#P7000497027000000000000000040DF9" class="calibre18 pcalibre pcalibre1">Expression</th>
<th id="P7000497027000000000000000040DFA" data-uri="chapter03.xhtml#P7000497027000000000000000040DFA" class="calibre18 pcalibre pcalibre1">Type</th>
<th id="P7000497027000000000000000040DFB" data-uri="chapter03.xhtml#P7000497027000000000000000040DFB" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P7000497027000000000000000040DFC" data-uri="chapter03.xhtml#P7000497027000000000000000040DFC" class="calibre18 pcalibre pcalibre1">Assembly code</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040DFD" data-uri="chapter03.xhtml#P7000497027000000000000000040DFD" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040DFE" data-uri="chapter03.xhtml#P7000497027000000000000000040DFE" class="calibre10 pcalibre pcalibre1">E</code></td>
<td id="P7000497027000000000000000040DFF" data-uri="chapter03.xhtml#P7000497027000000000000000040DFF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E00" data-uri="chapter03.xhtml#P7000497027000000000000000040E00" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P7000497027000000000000000040E01" data-uri="chapter03.xhtml#P7000497027000000000000000040E01" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E02" data-uri="chapter03.xhtml#P7000497027000000000000000040E02" class="calibre10 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub></code></td>
<td id="P7000497027000000000000000040E03" data-uri="chapter03.xhtml#P7000497027000000000000000040E03" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E04" data-uri="chapter03.xhtml#P7000497027000000000000000040E04" class="calibre10 pcalibre pcalibre1">movl %rdx,%rax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E05" data-uri="chapter03.xhtml#P7000497027000000000000000040E05" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E06" data-uri="chapter03.xhtml#P7000497027000000000000000040E06" class="calibre10 pcalibre pcalibre1">E[0]</code></td>
<td id="P7000497027000000000000000040E07" data-uri="chapter03.xhtml#P7000497027000000000000000040E07" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E08" data-uri="chapter03.xhtml#P7000497027000000000000000040E08" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P7000497027000000000000000040E09" data-uri="chapter03.xhtml#P7000497027000000000000000040E09" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E0A" data-uri="chapter03.xhtml#P7000497027000000000000000040E0A" class="calibre10 pcalibre pcalibre1">M[<var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub>]</code></td>
<td id="P7000497027000000000000000040E0B" data-uri="chapter03.xhtml#P7000497027000000000000000040E0B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E0C" data-uri="chapter03.xhtml#P7000497027000000000000000040E0C" class="calibre10 pcalibre pcalibre1">movl (%rdx),%eax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E0D" data-uri="chapter03.xhtml#P7000497027000000000000000040E0D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E0E" data-uri="chapter03.xhtml#P7000497027000000000000000040E0E" class="calibre10 pcalibre pcalibre1">E[i]</code></td>
<td id="P7000497027000000000000000040E0F" data-uri="chapter03.xhtml#P7000497027000000000000000040E0F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E10" data-uri="chapter03.xhtml#P7000497027000000000000000040E10" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P7000497027000000000000000040E11" data-uri="chapter03.xhtml#P7000497027000000000000000040E11" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E12" data-uri="chapter03.xhtml#P7000497027000000000000000040E12" class="calibre10 pcalibre pcalibre1">M[<var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub> + 4<var class="calibre5 pcalibre pcalibre1">i</var>]</code></td>
<td id="P7000497027000000000000000040E13" data-uri="chapter03.xhtml#P7000497027000000000000000040E13" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E14" data-uri="chapter03.xhtml#P7000497027000000000000000040E14" class="calibre10 pcalibre pcalibre1">movl (%rdx,%rcx,4),%eax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E15" data-uri="chapter03.xhtml#P7000497027000000000000000040E15" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E16" data-uri="chapter03.xhtml#P7000497027000000000000000040E16" class="calibre10 pcalibre pcalibre1">&amp;E[2]</code></td>
<td id="P7000497027000000000000000040E17" data-uri="chapter03.xhtml#P7000497027000000000000000040E17" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E18" data-uri="chapter03.xhtml#P7000497027000000000000000040E18" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P7000497027000000000000000040E19" data-uri="chapter03.xhtml#P7000497027000000000000000040E19" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E1A" data-uri="chapter03.xhtml#P7000497027000000000000000040E1A" class="calibre10 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub> +8</code></td>
<td id="P7000497027000000000000000040E1B" data-uri="chapter03.xhtml#P7000497027000000000000000040E1B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E1C" data-uri="chapter03.xhtml#P7000497027000000000000000040E1C" class="calibre10 pcalibre pcalibre1">leaq 8(%rdx),%rax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E1D" data-uri="chapter03.xhtml#P7000497027000000000000000040E1D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E1E" data-uri="chapter03.xhtml#P7000497027000000000000000040E1E" class="calibre10 pcalibre pcalibre1">E+i–1</code></td>
<td id="P7000497027000000000000000040E1F" data-uri="chapter03.xhtml#P7000497027000000000000000040E1F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E20" data-uri="chapter03.xhtml#P7000497027000000000000000040E20" class="calibre10 pcalibre pcalibre1">int *</code></td>
<td id="P7000497027000000000000000040E21" data-uri="chapter03.xhtml#P7000497027000000000000000040E21" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E22" data-uri="chapter03.xhtml#P7000497027000000000000000040E22" class="calibre10 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub> + 4<var class="calibre5 pcalibre pcalibre1">i</var> – 4</code></td>
<td id="P7000497027000000000000000040E23" data-uri="chapter03.xhtml#P7000497027000000000000000040E23" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E24" data-uri="chapter03.xhtml#P7000497027000000000000000040E24" class="calibre10 pcalibre pcalibre1">leaq -4(%rdx,%rcx,4),%rax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E25" data-uri="chapter03.xhtml#P7000497027000000000000000040E25" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E26" data-uri="chapter03.xhtml#P7000497027000000000000000040E26" class="calibre10 pcalibre pcalibre1">*(E+i–3)</code></td>
<td id="P7000497027000000000000000040E27" data-uri="chapter03.xhtml#P7000497027000000000000000040E27" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E28" data-uri="chapter03.xhtml#P7000497027000000000000000040E28" class="calibre10 pcalibre pcalibre1">int</code></td>
<td id="P7000497027000000000000000040E29" data-uri="chapter03.xhtml#P7000497027000000000000000040E29" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E2A" data-uri="chapter03.xhtml#P7000497027000000000000000040E2A" class="calibre10 pcalibre pcalibre1">M[<var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">E</sub> + 4<var class="calibre5 pcalibre pcalibre1">i</var> – 12] <var class="calibre5 pcalibre pcalibre1">i</var></code></td>
<td id="P7000497027000000000000000040E2B" data-uri="chapter03.xhtml#P7000497027000000000000000040E2B" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E2C" data-uri="chapter03.xhtml#P7000497027000000000000000040E2C" class="calibre10 pcalibre pcalibre1">movl –12(%rdx,%rcx,4),%eax</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E2D" data-uri="chapter03.xhtml#P7000497027000000000000000040E2D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E2E" data-uri="chapter03.xhtml#P7000497027000000000000000040E2E" class="calibre10 pcalibre pcalibre1">&amp;E[i]–E</code></td>
<td id="P7000497027000000000000000040E2F" data-uri="chapter03.xhtml#P7000497027000000000000000040E2F" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E30" data-uri="chapter03.xhtml#P7000497027000000000000000040E30" class="calibre10 pcalibre pcalibre1">long</code></td>
<td id="P7000497027000000000000000040E31" data-uri="chapter03.xhtml#P7000497027000000000000000040E31" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E32" data-uri="chapter03.xhtml#P7000497027000000000000000040E32" class="calibre10 pcalibre pcalibre1"><var class="calibre5 pcalibre pcalibre1">i</var></code></td>
<td id="P7000497027000000000000000040E33" data-uri="chapter03.xhtml#P7000497027000000000000000040E33" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E34" data-uri="chapter03.xhtml#P7000497027000000000000000040E34" class="calibre10 pcalibre pcalibre1">movq %rcx,%rax</code></td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000040E35" data-uri="chapter03.xhtml#P7000497027000000000000000040E35" class="pcalibre1 pcalibre calibre2">In these examples, we see that operations that return array values have type <code id="P7000497027000000000000000040E36" data-uri="chapter03.xhtml#P7000497027000000000000000040E36" class="pcalibre1 calibre8 pcalibre">int</code>, and hence involve 4-byte operations (e.g., <code id="P7000497027000000000000000040E37" data-uri="chapter03.xhtml#P7000497027000000000000000040E37" class="pcalibre1 calibre8 pcalibre">movl</code>) and registers (e.g., <code id="P7000497027000000000000000040E38" data-uri="chapter03.xhtml#P7000497027000000000000000040E38" class="pcalibre1 calibre8 pcalibre">%eax</code>). Those that return pointers have type <code id="P7000497027000000000000000040E39" data-uri="chapter03.xhtml#P7000497027000000000000000040E39" class="pcalibre1 calibre8 pcalibre">int *</code>, and hence involve 8-byte operations (e.g., <code id="P7000497027000000000000000040E3A" data-uri="chapter03.xhtml#P7000497027000000000000000040E3A" class="pcalibre1 calibre8 pcalibre">leaq</code>) and registers (e.g., <code id="P7000497027000000000000000040E3B" data-uri="chapter03.xhtml#P7000497027000000000000000040E3B" class="pcalibre1 calibre8 pcalibre">%rax</code>). The final example shows that one can compute the difference of two pointers within the same data structure, with the result being data having type <code id="P7000497027000000000000000040E3C" data-uri="chapter03.xhtml#P7000497027000000000000000040E3C" class="pcalibre1 calibre8 pcalibre">long</code> and value equal to the difference of the two addresses divided by the size of the data type.</p>
<section id="P7000497027000000000000000002BF3" data-uri="chapter03.xhtml#P7000497027000000000000000002BF3" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040E3D" data-uri="chapter03.xhtml#P7000497027000000000000000040E3D" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002BF5" title="258" data-uri="chapter03.xhtml#P7000497027000000000000000002BF5" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.37 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000037B1">341</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040E3E" data-uri="chapter03.xhtml#P7000497027000000000000000040E3E">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040E3F" data-uri="chapter03.xhtml#P7000497027000000000000000040E3F">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040E40" data-uri="chapter03.xhtml#P7000497027000000000000000040E40"><p id="P7000497027000000000000000040E41" data-uri="chapter03.xhtml#P7000497027000000000000000040E41" class="pcalibre calibre3 pcalibre1">Suppose <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040E42" data-uri="chapter03.xhtml#P7000497027000000000000000040E42" class="pcalibre1 pcalibre calibre74">S</code></sub>, the address of short integer array <code id="P7000497027000000000000000040E43" data-uri="chapter03.xhtml#P7000497027000000000000000040E43" class="pcalibre1 calibre8 pcalibre">S</code>, and long integer index <var class="calibre5 pcalibre pcalibre1">i</var> are stored in registers <code id="P7000497027000000000000000040E44" data-uri="chapter03.xhtml#P7000497027000000000000000040E44" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000040E45" data-uri="chapter03.xhtml#P7000497027000000000000000040E45" class="pcalibre1 calibre8 pcalibre">%rcx</code>, respectively. For each of the following expressions, give its type, a formula for its value, and an assembly-code implementation. The result should be stored in register <code id="P7000497027000000000000000040E46" data-uri="chapter03.xhtml#P7000497027000000000000000040E46" class="pcalibre1 calibre8 pcalibre">%rax</code> if it is a pointer and register element <code id="P7000497027000000000000000040E47" data-uri="chapter03.xhtml#P7000497027000000000000000040E47" class="pcalibre1 calibre8 pcalibre">%ax</code> if it has data type short.</p>
<table id="P7000497027000000000000000040E48" data-uri="chapter03.xhtml#P7000497027000000000000000040E48" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040E49" data-uri="chapter03.xhtml#P7000497027000000000000000040E49" class="calibre18 pcalibre pcalibre1">Expression</th>
<th id="P7000497027000000000000000040E4A" data-uri="chapter03.xhtml#P7000497027000000000000000040E4A" class="calibre18 pcalibre pcalibre1">Type</th>
<th id="P7000497027000000000000000040E4B" data-uri="chapter03.xhtml#P7000497027000000000000000040E4B" class="calibre18 pcalibre pcalibre1">Value</th>
<th id="P7000497027000000000000000040E4C" data-uri="chapter03.xhtml#P7000497027000000000000000040E4C" class="calibre18 pcalibre pcalibre1">Assembly code</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E4D" data-uri="chapter03.xhtml#P7000497027000000000000000040E4D" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E4E" data-uri="chapter03.xhtml#P7000497027000000000000000040E4E" class="calibre10 pcalibre pcalibre1">S+1</code></td>
<td id="P7000497027000000000000000040E4F" data-uri="chapter03.xhtml#P7000497027000000000000000040E4F" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E50" data-uri="chapter03.xhtml#P7000497027000000000000000040E50" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E51" data-uri="chapter03.xhtml#P7000497027000000000000000040E51" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E52" data-uri="chapter03.xhtml#P7000497027000000000000000040E52" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E53" data-uri="chapter03.xhtml#P7000497027000000000000000040E53" class="calibre10 pcalibre pcalibre1">S[3]</code></td>
<td id="P7000497027000000000000000040E54" data-uri="chapter03.xhtml#P7000497027000000000000000040E54" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E55" data-uri="chapter03.xhtml#P7000497027000000000000000040E55" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E56" data-uri="chapter03.xhtml#P7000497027000000000000000040E56" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E57" data-uri="chapter03.xhtml#P7000497027000000000000000040E57" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E58" data-uri="chapter03.xhtml#P7000497027000000000000000040E58" class="calibre10 pcalibre pcalibre1">&amp;S[i]</code></td>
<td id="P7000497027000000000000000040E59" data-uri="chapter03.xhtml#P7000497027000000000000000040E59" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E5A" data-uri="chapter03.xhtml#P7000497027000000000000000040E5A" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E5B" data-uri="chapter03.xhtml#P7000497027000000000000000040E5B" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E5C" data-uri="chapter03.xhtml#P7000497027000000000000000040E5C" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E5D" data-uri="chapter03.xhtml#P7000497027000000000000000040E5D" class="calibre10 pcalibre pcalibre1">S[4*i+1]</code></td>
<td id="P7000497027000000000000000040E5E" data-uri="chapter03.xhtml#P7000497027000000000000000040E5E" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E5F" data-uri="chapter03.xhtml#P7000497027000000000000000040E5F" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E60" data-uri="chapter03.xhtml#P7000497027000000000000000040E60" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E61" data-uri="chapter03.xhtml#P7000497027000000000000000040E61" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000040E62" data-uri="chapter03.xhtml#P7000497027000000000000000040E62" class="calibre10 pcalibre pcalibre1">S+i-5</code></td>
<td id="P7000497027000000000000000040E63" data-uri="chapter03.xhtml#P7000497027000000000000000040E63" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E64" data-uri="chapter03.xhtml#P7000497027000000000000000040E64" class="calibre20 pcalibre pcalibre1">__________</td>
<td id="P7000497027000000000000000040E65" data-uri="chapter03.xhtml#P7000497027000000000000000040E65" class="calibre20 pcalibre pcalibre1">__________</td>
</tr>
</tbody>
</table>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002C1E" data-uri="chapter03.xhtml#P7000497027000000000000000002C1E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040E66" data-uri="chapter03.xhtml#P7000497027000000000000000040E66" epub:type="title"><span class="pcalibre label pcalibre1">3.8.3 </span>Nested Arrays</h1></header>
<p id="P7000497027000000000000000040E67" data-uri="chapter03.xhtml#P7000497027000000000000000040E67" class="pcalibre1 pcalibre calibre2">The general principles of array allocation and referencing hold even when we create arrays of arrays. For example, the declaration</p>
<pre id="P7000497027000000000000000040E68" data-uri="chapter03.xhtml#P7000497027000000000000000040E68" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040E69" data-uri="chapter03.xhtml#P7000497027000000000000000040E69" class="calibre10 pcalibre pcalibre1">
int A[5][3];
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040E6A" data-uri="chapter03.xhtml#P7000497027000000000000000040E6A">is equivalent to the declaration</p>
<pre id="P7000497027000000000000000040E6B" data-uri="chapter03.xhtml#P7000497027000000000000000040E6B" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040E6C" data-uri="chapter03.xhtml#P7000497027000000000000000040E6C" class="calibre10 pcalibre pcalibre1">
typedef int row3_t[3];
row3_t A[5];
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040E6D" data-uri="chapter03.xhtml#P7000497027000000000000000040E6D">Data type <code id="P7000497027000000000000000040E6E" data-uri="chapter03.xhtml#P7000497027000000000000000040E6E" class="pcalibre1 calibre8 pcalibre">row3_t</code> is defined to be an array of three integers. Array <code id="P7000497027000000000000000040E6F" data-uri="chapter03.xhtml#P7000497027000000000000000040E6F" class="pcalibre1 calibre8 pcalibre">A</code> contains five such elements, each requiring 12 bytes to store the three integers. The total array size is then 4 · 5 · 3 = 60 bytes.</p>
<p id="P7000497027000000000000000040E70" data-uri="chapter03.xhtml#P7000497027000000000000000040E70" class="pcalibre1 pcalibre calibre2">Array <code id="P7000497027000000000000000040E71" data-uri="chapter03.xhtml#P7000497027000000000000000040E71" class="pcalibre1 calibre8 pcalibre">A</code> can also be viewed as a two-dimensional array with five rows and three columns, referenced as <code id="P7000497027000000000000000040E72" data-uri="chapter03.xhtml#P7000497027000000000000000040E72" class="pcalibre1 calibre8 pcalibre">A[0][0]</code> through <code id="P7000497027000000000000000040E73" data-uri="chapter03.xhtml#P7000497027000000000000000040E73" class="pcalibre1 calibre8 pcalibre">A[4][2]</code>. The array elements are ordered in memory in <i class="calibre5 pcalibre pcalibre1">row-major</i> order, meaning all elements of row 0, which can be written <code id="P7000497027000000000000000040E74" data-uri="chapter03.xhtml#P7000497027000000000000000040E74" class="pcalibre1 calibre8 pcalibre">A[0]</code>, followed by all elements of row 1 <code id="P7000497027000000000000000040E75" data-uri="chapter03.xhtml#P7000497027000000000000000040E75" class="pcalibre1 calibre8 pcalibre">(A[1])</code>, and so on. This is illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C3A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.36</span></a>.</p>
<p id="P7000497027000000000000000040E76" data-uri="chapter03.xhtml#P7000497027000000000000000040E76" class="pcalibre1 pcalibre calibre2">This ordering is a consequence of our nested declaration. Viewing <code id="P7000497027000000000000000040E77" data-uri="chapter03.xhtml#P7000497027000000000000000040E77" class="pcalibre1 calibre8 pcalibre">A</code> as an array of five elements, each of which is an array of three <code id="P7000497027000000000000000040E78" data-uri="chapter03.xhtml#P7000497027000000000000000040E78" class="pcalibre1 calibre8 pcalibre">int</code>'s, we first have <code id="P7000497027000000000000000040E79" data-uri="chapter03.xhtml#P7000497027000000000000000040E79" class="pcalibre1 calibre8 pcalibre">A[0]</code>, followed by <code id="P7000497027000000000000000040E7A" data-uri="chapter03.xhtml#P7000497027000000000000000040E7A" class="pcalibre1 calibre8 pcalibre">A[1]</code>, and so on.</p>
<p id="P7000497027000000000000000040E7B" data-uri="chapter03.xhtml#P7000497027000000000000000040E7B" class="pcalibre1 pcalibre calibre2">Toaccess elements of multidimensional arrays, the compiler generates code to compute the off set of the desired element and then uses one of the <span class="smallcaps pcalibre pcalibre1">mov </span>instructions with the start of the array as the base address and the (possibly scaled) offset as an index. In general, for an array declared as</p>
<pre id="P7000497027000000000000000040E7C" data-uri="chapter03.xhtml#P7000497027000000000000000040E7C" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040E7D" data-uri="chapter03.xhtml#P7000497027000000000000000040E7D" class="calibre10 pcalibre pcalibre1">
<var class="calibre5 pcalibre pcalibre1">T</var> D[<var class="calibre5 pcalibre pcalibre1">R</var>][<var class="calibre5 pcalibre pcalibre1">C</var>];
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040E7E" data-uri="chapter03.xhtml#P7000497027000000000000000040E7E">array element <code id="P7000497027000000000000000040E7F" data-uri="chapter03.xhtml#P7000497027000000000000000040E7F" class="pcalibre1 calibre8 pcalibre">D[i][j]</code> is at memory address</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000002C39" data-uri="chapter03.xhtml#P7000497027000000000000000002C39"><m:math display="block" alttext="" data-uri="" altimg-width="175" altimg-height="14" altimg="../images/ch03-eq6.png"><m:mrow><m:mo>&amp;</m:mo><m:mtext>D</m:mtext><m:mrow><m:mo>[</m:mo> <m:mtext>i</m:mtext> <m:mo>]</m:mo></m:mrow><m:mrow><m:mo>[</m:mo> <m:mtext>j</m:mtext> <m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:msub><m:mi>x</m:mi><m:mi>D</m:mi></m:msub><m:mo>+</m:mo><m:mi>L</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>C</m:mi><m:mo>⋅</m:mo><m:mi>i</m:mi><m:mo>+</m:mo><m:mi>j</m:mi></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math>
<span class="number3 pcalibre pcalibre1">(3.1)</span>
</div>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002C3A" data-uri="chapter03.xhtml#P7000497027000000000000000002C3A">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002C3B" title="259" data-uri="chapter03.xhtml#P7000497027000000000000000002C3B" epub:type="pagebreak"></span>
<img alt="A diagram lists elements of array within five major rows." id="P7000497027000000000000000040E80" data-uri="P700049702700000000000000000B6BB" src="../images/p259-1.png" class="calibre92 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000040E81" data-uri="chapter03.xhtml#P7000497027000000000000000040E81" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040E82" data-uri="chapter03.xhtml#P7000497027000000000000000040E82" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">3.36 </span>Elements of array in row-major order.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000021158" data-uri="chapter03.xhtml#P7000497027000000000000000021158">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000040E83" data-uri="chapter03.xhtml#P7000497027000000000000000040E83" class="pcalibre1 pcalibre calibre2">A diagram is reproduced in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000040E84" data-uri="chapter03.xhtml#P7000497027000000000000000040E84">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000040E85" data-uri="chapter03.xhtml#P7000497027000000000000000040E85" class="calibre18 pcalibre pcalibre1">Row</th>
<th id="P7000497027000000000000000040E86" data-uri="chapter03.xhtml#P7000497027000000000000000040E86" class="calibre18 pcalibre pcalibre1">Element</th>
<th id="P7000497027000000000000000040E87" data-uri="chapter03.xhtml#P7000497027000000000000000040E87" class="calibre18 pcalibre pcalibre1">Address</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E88" data-uri="chapter03.xhtml#P7000497027000000000000000040E88" class="calibre20 pcalibre pcalibre1">A[0]</td>
<td id="P7000497027000000000000000040E89" data-uri="chapter03.xhtml#P7000497027000000000000000040E89" class="calibre20 pcalibre pcalibre1">A[0][0]</td>
<td id="P7000497027000000000000000040E8A" data-uri="chapter03.xhtml#P7000497027000000000000000040E8A" class="calibre20 pcalibre pcalibre1">xA</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E8B" data-uri="chapter03.xhtml#P7000497027000000000000000040E8B" class="calibre20 pcalibre pcalibre1">A[0][1]</td>
<td id="P7000497027000000000000000040E8C" data-uri="chapter03.xhtml#P7000497027000000000000000040E8C" class="calibre20 pcalibre pcalibre1">xA + 4</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E8D" data-uri="chapter03.xhtml#P7000497027000000000000000040E8D" class="calibre20 pcalibre pcalibre1">A[0][2]</td>
<td id="P7000497027000000000000000040E8E" data-uri="chapter03.xhtml#P7000497027000000000000000040E8E" class="calibre20 pcalibre pcalibre1">xA + 8</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E8F" data-uri="chapter03.xhtml#P7000497027000000000000000040E8F" class="calibre20 pcalibre pcalibre1">A[1]</td>
<td id="P7000497027000000000000000040E90" data-uri="chapter03.xhtml#P7000497027000000000000000040E90" class="calibre20 pcalibre pcalibre1">A[1][0]</td>
<td id="P7000497027000000000000000040E91" data-uri="chapter03.xhtml#P7000497027000000000000000040E91" class="calibre20 pcalibre pcalibre1">xA + 12</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E92" data-uri="chapter03.xhtml#P7000497027000000000000000040E92" class="calibre20 pcalibre pcalibre1">A[1][1]</td>
<td id="P7000497027000000000000000040E93" data-uri="chapter03.xhtml#P7000497027000000000000000040E93" class="calibre20 pcalibre pcalibre1">xA + 16</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E94" data-uri="chapter03.xhtml#P7000497027000000000000000040E94" class="calibre20 pcalibre pcalibre1">A[1][2]</td>
<td id="P7000497027000000000000000040E95" data-uri="chapter03.xhtml#P7000497027000000000000000040E95" class="calibre20 pcalibre pcalibre1">xA + 20</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E96" data-uri="chapter03.xhtml#P7000497027000000000000000040E96" class="calibre20 pcalibre pcalibre1">A[2]</td>
<td id="P7000497027000000000000000040E97" data-uri="chapter03.xhtml#P7000497027000000000000000040E97" class="calibre20 pcalibre pcalibre1">A[2][0]</td>
<td id="P7000497027000000000000000040E98" data-uri="chapter03.xhtml#P7000497027000000000000000040E98" class="calibre20 pcalibre pcalibre1">xA + 24</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E99" data-uri="chapter03.xhtml#P7000497027000000000000000040E99" class="calibre20 pcalibre pcalibre1">A[2][1]</td>
<td id="P7000497027000000000000000040E9A" data-uri="chapter03.xhtml#P7000497027000000000000000040E9A" class="calibre20 pcalibre pcalibre1">xA + 28</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040E9B" data-uri="chapter03.xhtml#P7000497027000000000000000040E9B" class="calibre20 pcalibre pcalibre1">A[2][2]</td>
<td id="P7000497027000000000000000040E9C" data-uri="chapter03.xhtml#P7000497027000000000000000040E9C" class="calibre20 pcalibre pcalibre1">xA + 32</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040E9D" data-uri="chapter03.xhtml#P7000497027000000000000000040E9D" class="calibre20 pcalibre pcalibre1">A[3]</td>
<td id="P7000497027000000000000000040E9E" data-uri="chapter03.xhtml#P7000497027000000000000000040E9E" class="calibre20 pcalibre pcalibre1">A[3][0]</td>
<td id="P7000497027000000000000000040E9F" data-uri="chapter03.xhtml#P7000497027000000000000000040E9F" class="calibre20 pcalibre pcalibre1">xA + 36</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040EA0" data-uri="chapter03.xhtml#P7000497027000000000000000040EA0" class="calibre20 pcalibre pcalibre1">A[3][1]</td>
<td id="P7000497027000000000000000040EA1" data-uri="chapter03.xhtml#P7000497027000000000000000040EA1" class="calibre20 pcalibre pcalibre1">xA + 40</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040EA2" data-uri="chapter03.xhtml#P7000497027000000000000000040EA2" class="calibre20 pcalibre pcalibre1">A[3][2]</td>
<td id="P7000497027000000000000000040EA3" data-uri="chapter03.xhtml#P7000497027000000000000000040EA3" class="calibre20 pcalibre pcalibre1">xA + 44</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000040EA4" data-uri="chapter03.xhtml#P7000497027000000000000000040EA4" class="calibre20 pcalibre pcalibre1">A[4]</td>
<td id="P7000497027000000000000000040EA5" data-uri="chapter03.xhtml#P7000497027000000000000000040EA5" class="calibre20 pcalibre pcalibre1">A[4][0]</td>
<td id="P7000497027000000000000000040EA6" data-uri="chapter03.xhtml#P7000497027000000000000000040EA6" class="calibre20 pcalibre pcalibre1">xA + 48</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040EA7" data-uri="chapter03.xhtml#P7000497027000000000000000040EA7" class="calibre20 pcalibre pcalibre1">A[4][1]</td>
<td id="P7000497027000000000000000040EA8" data-uri="chapter03.xhtml#P7000497027000000000000000040EA8" class="calibre20 pcalibre pcalibre1">xA + 52</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000040EA9" data-uri="chapter03.xhtml#P7000497027000000000000000040EA9" class="calibre20 pcalibre pcalibre1">A[4][2]</td>
<td id="P7000497027000000000000000040EAA" data-uri="chapter03.xhtml#P7000497027000000000000000040EAA" class="calibre20 pcalibre pcalibre1">xA + 56</td>
</tr>
</tbody>
</table>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040EAB" data-uri="chapter03.xhtml#P7000497027000000000000000040EAB">where <var class="calibre5 pcalibre pcalibre1">L</var> is the size of data type <var class="calibre5 pcalibre pcalibre1">T</var> in bytes. As an example, consider the 5×3 integer array <code id="P7000497027000000000000000040EAC" data-uri="chapter03.xhtml#P7000497027000000000000000040EAC" class="pcalibre1 calibre8 pcalibre">A</code> defined earlier. Suppose <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040EAD" data-uri="chapter03.xhtml#P7000497027000000000000000040EAD" class="pcalibre1 pcalibre calibre74">A</code></sub>, <i class="calibre5 pcalibre pcalibre1"><code id="P7000497027000000000000000040EAE" data-uri="chapter03.xhtml#P7000497027000000000000000040EAE" class="pcalibre1 calibre8 pcalibre">i</code></i>, and <i class="calibre5 pcalibre pcalibre1"><code id="P7000497027000000000000000040EAF" data-uri="chapter03.xhtml#P7000497027000000000000000040EAF" class="pcalibre1 calibre8 pcalibre">j</code></i> are in registers <code id="P7000497027000000000000000040EB0" data-uri="chapter03.xhtml#P7000497027000000000000000040EB0" class="pcalibre1 calibre8 pcalibre">%rdi, %rsi</code>, and <code id="P7000497027000000000000000040EB1" data-uri="chapter03.xhtml#P7000497027000000000000000040EB1" class="pcalibre1 calibre8 pcalibre">%rdx</code>, respectively. Then array element <code id="P7000497027000000000000000040EB2" data-uri="chapter03.xhtml#P7000497027000000000000000040EB2" class="pcalibre1 calibre8 pcalibre">A[i][j]</code> can be copied to register <code id="P7000497027000000000000000040EB3" data-uri="chapter03.xhtml#P7000497027000000000000000040EB3" class="pcalibre1 calibre8 pcalibre">%eax</code> by the following code:</p>
<pre id="P7000497027000000000000000040EB4" data-uri="chapter03.xhtml#P7000497027000000000000000040EB4" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EB5" data-uri="chapter03.xhtml#P7000497027000000000000000040EB5" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">A in %rdi, i in %rsi, and j in %rdx</i>
1	leaq	(%rsi,%rsi,2), %rax		<i class="calibre5 pcalibre pcalibre1">Compute</i> 3<var class="calibre5 pcalibre pcalibre1">i</var>
2	leaq	(%rdi,%rax,4), %rax		<i class="calibre5 pcalibre pcalibre1">Compute x</i><sub class="calibre85 pcalibre pcalibre1">A</sub> + 12<var class="calibre5 pcalibre pcalibre1">i</var>
3	movl	(%rax,%rdx,4), %eax		<i class="calibre5 pcalibre pcalibre1">Read from</i> M[<var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">A</sub> + 12<var class="calibre5 pcalibre pcalibre1">i</var> + 4]
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040EB6" data-uri="chapter03.xhtml#P7000497027000000000000000040EB6">As can be seen, this code computes the element's address as <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040EB7" data-uri="chapter03.xhtml#P7000497027000000000000000040EB7" class="pcalibre1 pcalibre calibre74">A</code></sub> + 12<var class="calibre5 pcalibre pcalibre1">i</var> + 4<var class="calibre5 pcalibre pcalibre1">j</var> = <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040EB8" data-uri="chapter03.xhtml#P7000497027000000000000000040EB8" class="pcalibre1 pcalibre calibre74">A</code></sub> + 4(3<var class="calibre5 pcalibre pcalibre1">i</var> + <var class="calibre5 pcalibre pcalibre1">j</var>) using the scaling and addition capabilities of x86-64 address arithmetic.</p>
<section id="P7000497027000000000000000002C4D" data-uri="chapter03.xhtml#P7000497027000000000000000002C4D" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040EB9" data-uri="chapter03.xhtml#P7000497027000000000000000040EB9" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.38 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P70004970270000000000000000037B1">341</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040EBA" data-uri="chapter03.xhtml#P7000497027000000000000000040EBA">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040EBB" data-uri="chapter03.xhtml#P7000497027000000000000000040EBB">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040EBC" data-uri="chapter03.xhtml#P7000497027000000000000000040EBC"><p id="P7000497027000000000000000040EBD" data-uri="chapter03.xhtml#P7000497027000000000000000040EBD" class="pcalibre calibre3 pcalibre1">Consider the following source code, where <var class="calibre5 pcalibre pcalibre1">M</var> and <var class="calibre5 pcalibre pcalibre1">N</var> are constants declared with <code id="P7000497027000000000000000040EBE" data-uri="chapter03.xhtml#P7000497027000000000000000040EBE" class="pcalibre1 calibre8 pcalibre">#define</code>:</p>
<pre id="P7000497027000000000000000040EBF" data-uri="chapter03.xhtml#P7000497027000000000000000040EBF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EC0" data-uri="chapter03.xhtml#P7000497027000000000000000040EC0" class="calibre10 pcalibre pcalibre1">
long P[M][N];
long Q[N][M];
long sum_element(long i, long j) {
	return P[i][j] + Q[j][i];
}
</code></pre>
<p class="pcalibre calibre3 pcalibre1" id="P7000497027000000000000000040EC1" data-uri="chapter03.xhtml#P7000497027000000000000000040EC1">In compiling this program, <span class="smallcaps pcalibre pcalibre1">gcc </span>generates the following assembly code:</p>
<pre id="P7000497027000000000000000040EC2" data-uri="chapter03.xhtml#P7000497027000000000000000040EC2" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EC3" data-uri="chapter03.xhtml#P7000497027000000000000000040EC3" class="calibre10 pcalibre pcalibre1">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002C59" title="260" data-uri="chapter03.xhtml#P7000497027000000000000000002C59" epub:type="pagebreak"></span>	<i class="calibre5 pcalibre pcalibre1">long sum_element(long i, long j)</i>
	<i class="calibre5 pcalibre pcalibre1">i in %rdi, j in %rsi</i>
1	sum_element:
2	leaq	0(,%rdi,8), %rdx
3	subq	%rdi, %rdx
4	addq	%rsi, %rdx
5	leaq	(%rsi,%rsi,4), %rax
6	addq	%rax, %rdi
7	movq	Q(,%rdi,8), %rax
8	addq	P(,%rdx,8), %rax
9	ret
</code></pre>
<p id="P7000497027000000000000000040EC4" data-uri="chapter03.xhtml#P7000497027000000000000000040EC4" class="pcalibre calibre3 pcalibre1">Use your reverse engineering skills to determine the values of <var class="calibre5 pcalibre pcalibre1">M</var> and <var class="calibre5 pcalibre pcalibre1">N</var> based on this assembly code.</p>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002C5B" data-uri="chapter03.xhtml#P7000497027000000000000000002C5B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040EC5" data-uri="chapter03.xhtml#P7000497027000000000000000040EC5" epub:type="title"><span class="pcalibre label pcalibre1">3.8.4 </span>Fixed-Size Arrays</h1></header>
<p id="P7000497027000000000000000040EC6" data-uri="chapter03.xhtml#P7000497027000000000000000040EC6" class="pcalibre1 pcalibre calibre2">The C compiler is able to make many optimizations for code operating on multidimensional arrays of fixed size. Here we demonstrate some of the optimizations made by <span class="smallcaps pcalibre pcalibre1">gcc </span>when the optimization level is set with the flag <code id="P7000497027000000000000000040EC7" data-uri="chapter03.xhtml#P7000497027000000000000000040EC7" class="pcalibre1 calibre8 pcalibre">-01</code>. Suppose we declare data type <code id="P7000497027000000000000000040EC8" data-uri="chapter03.xhtml#P7000497027000000000000000040EC8" class="pcalibre1 calibre8 pcalibre">fix_matrix</code> to be 16 × 16 arrays of integers as follows:</p>
<pre id="P7000497027000000000000000040EC9" data-uri="chapter03.xhtml#P7000497027000000000000000040EC9" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040ECA" data-uri="chapter03.xhtml#P7000497027000000000000000040ECA" class="calibre10 pcalibre pcalibre1">
#define N 16
typedef int fix_matrix[N][N];
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040ECB" data-uri="chapter03.xhtml#P7000497027000000000000000040ECB">(This example illustrates a good coding practice. Whenever a program uses some constant as an array dimension or buffer size, it is best to associate a name with it via a <code id="P7000497027000000000000000040ECC" data-uri="chapter03.xhtml#P7000497027000000000000000040ECC" class="pcalibre1 calibre8 pcalibre">#define</code> declaration, and then use this name consistently, rather than the numeric value. That way, if an occasion ever arises to change the value, it can be done by simply modifying the <code id="P7000497027000000000000000040ECD" data-uri="chapter03.xhtml#P7000497027000000000000000040ECD" class="pcalibre1 calibre8 pcalibre">#define</code> declaration.) The code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37(a)</span></a> computes element <i class="calibre5 pcalibre pcalibre1">i, k</i> of the product of arrays <code id="P7000497027000000000000000040ECE" data-uri="chapter03.xhtml#P7000497027000000000000000040ECE" class="pcalibre1 calibre8 pcalibre">A</code> and <code id="P7000497027000000000000000040ECF" data-uri="chapter03.xhtml#P7000497027000000000000000040ECF" class="pcalibre1 calibre8 pcalibre">B</code>—that is, the inner product of row <var class="calibre5 pcalibre pcalibre1">i</var> from <code id="P7000497027000000000000000040ED0" data-uri="chapter03.xhtml#P7000497027000000000000000040ED0" class="pcalibre1 calibre8 pcalibre">A</code> and column <var class="calibre5 pcalibre pcalibre1">k</var> from <code id="P7000497027000000000000000040ED1" data-uri="chapter03.xhtml#P7000497027000000000000000040ED1" class="pcalibre1 calibre8 pcalibre">B</code>. This product is given by the formula <span class="inlineequation pcalibre pcalibre1"><m:math display="inline" alttext="" data-uri="" altimg-width="112" altimg-height="17" altimg="../images/ch03-eq7.png"><m:mrow><m:mstyle displaystyle="true"><m:msub><m:mo>∑</m:mo><m:mrow><m:mn>0</m:mn><m:mo>≤</m:mo><m:mi>j</m:mi><m:mo>&lt;</m:mo><m:mi>N</m:mi></m:mrow></m:msub><m:mrow><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mo>,</m:mo><m:mi>j</m:mi></m:mrow></m:msub><m:mo>⋅</m:mo><m:msub><m:mi>b</m:mi><m:mrow><m:mi>j</m:mi><m:mo>,</m:mo><m:mi>k</m:mi></m:mrow></m:msub></m:mrow></m:mstyle></m:mrow></m:math></span>. G<span class="smallcaps pcalibre pcalibre1">cc </span>generates code that we then recoded into C, shown as function <code id="P7000497027000000000000000040ED2" data-uri="chapter03.xhtml#P7000497027000000000000000040ED2" class="pcalibre1 calibre8 pcalibre">fix_prod_ele_opt</code> in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37(b)</span></a>. This code contains a number of clever optimizations. It removes the integer index <code id="P7000497027000000000000000040ED3" data-uri="chapter03.xhtml#P7000497027000000000000000040ED3" class="pcalibre1 calibre8 pcalibre">j</code> and converts all array references to pointer dereferences. This involves (1) generating a pointer, which we have named <code id="P7000497027000000000000000040ED4" data-uri="chapter03.xhtml#P7000497027000000000000000040ED4" class="pcalibre1 calibre8 pcalibre">Aptr</code>, that points to successive elements in row <var class="calibre5 pcalibre pcalibre1">i</var> of <code id="P7000497027000000000000000040ED5" data-uri="chapter03.xhtml#P7000497027000000000000000040ED5" class="pcalibre1 calibre8 pcalibre">A</code>, (2) generating a pointer, which we have named <code id="P7000497027000000000000000040ED6" data-uri="chapter03.xhtml#P7000497027000000000000000040ED6" class="pcalibre1 calibre8 pcalibre">Bptr</code>, that points to successive elements in column <var class="calibre5 pcalibre pcalibre1">k</var> of <code id="P7000497027000000000000000040ED7" data-uri="chapter03.xhtml#P7000497027000000000000000040ED7" class="pcalibre1 calibre8 pcalibre">B</code>, and (3) generating a pointer, which we have named Bend, that equals the value <code id="P7000497027000000000000000040ED8" data-uri="chapter03.xhtml#P7000497027000000000000000040ED8" class="pcalibre1 calibre8 pcalibre">Bptr</code> will have when it is time to terminate the loop. The initial value for <code id="P7000497027000000000000000040ED9" data-uri="chapter03.xhtml#P7000497027000000000000000040ED9" class="pcalibre1 calibre8 pcalibre">Aptr</code> is the address of the first element of row <var class="calibre5 pcalibre pcalibre1">i</var> of <code id="P7000497027000000000000000040EDA" data-uri="chapter03.xhtml#P7000497027000000000000000040EDA" class="pcalibre1 calibre8 pcalibre">A</code>, given by the C expression <code id="P7000497027000000000000000040EDB" data-uri="chapter03.xhtml#P7000497027000000000000000040EDB" class="pcalibre1 calibre8 pcalibre">&amp;A[i][0]</code>. The initial value for <code id="P7000497027000000000000000040EDC" data-uri="chapter03.xhtml#P7000497027000000000000000040EDC" class="pcalibre1 calibre8 pcalibre">Bptr</code> is the address of the first element of column <var class="calibre5 pcalibre pcalibre1">k</var> of <code id="P7000497027000000000000000040EDD" data-uri="chapter03.xhtml#P7000497027000000000000000040EDD" class="pcalibre1 calibre8 pcalibre">B</code>, given by the C expression <code id="P7000497027000000000000000040EDE" data-uri="chapter03.xhtml#P7000497027000000000000000040EDE" class="pcalibre1 calibre8 pcalibre">&amp;B[0][k]</code>. The value for <code id="P7000497027000000000000000040EDF" data-uri="chapter03.xhtml#P7000497027000000000000000040EDF" class="pcalibre1 calibre8 pcalibre">Bend</code> is the index of what would be the (<var class="calibre5 pcalibre pcalibre1">n</var> + 1)st element in column <var class="calibre5 pcalibre pcalibre1">j</var> of <code id="P7000497027000000000000000040EE0" data-uri="chapter03.xhtml#P7000497027000000000000000040EE0" class="pcalibre1 calibre8 pcalibre">B</code>, given by the C expression <code id="P7000497027000000000000000040EE1" data-uri="chapter03.xhtml#P7000497027000000000000000040EE1" class="pcalibre1 calibre8 pcalibre">&amp;B[N][k]</code>.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002C79" data-uri="chapter03.xhtml#P7000497027000000000000000002C79">
<p id="P7000497027000000000000000040EE2" data-uri="chapter03.xhtml#P7000497027000000000000000040EE2" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002C7B" title="261" data-uri="chapter03.xhtml#P7000497027000000000000000002C7B" epub:type="pagebreak"></span>(a) Original C code</p>
<pre id="P7000497027000000000000000040EE3" data-uri="chapter03.xhtml#P7000497027000000000000000040EE3" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EE4" data-uri="chapter03.xhtml#P7000497027000000000000000040EE4" class="calibre10 pcalibre pcalibre1">
/* Compute i,k of fixed matrix product */
int fix_prod_ele (fix_matrix A, fix_matrix B, long i, long k) {
	long j;
	int result = 0;

	for (j = 0; j &lt; N; j++)
	  result += A[i][j] * B[j][k];
	return result;
}
</code></pre>
<p id="P7000497027000000000000000040EE5" data-uri="chapter03.xhtml#P7000497027000000000000000040EE5" class="pcalibre1 pcalibre calibre2">(b) Optimized C code</p>
<pre id="P7000497027000000000000000040EE6" data-uri="chapter03.xhtml#P7000497027000000000000000040EE6" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EE7" data-uri="chapter03.xhtml#P7000497027000000000000000040EE7" class="calibre10 pcalibre pcalibre1">
1	/* Compute i,k of fixed matrix product */
2	int fix_prod_ele_opt(fix_matrix A, fix_matrix B, long i, long k) {
3		int *Aptr = &amp;A[i][0];	/* Points to elements in row i of A		*/
4		int *Bptr = &amp;B[0][k];	/* Points to elements in column k of B	*/
5		int *Bend = &amp;B[N][k];	/* Marks stopping point for Bptr		*/
6		int result = 0;
7		do {					/* No need for initial test */
8			result += *Aptr * *Bptr;	/* Add next product to sum */
9			Aptr ++;			/* Move Aptr to next column */
10			Bptr += N;			/* Move Bptr to next row */
11		} while (Bptr != Bend);			/* Test for stopping point */
12		return result;
13	}
</code></pre>
<figcaption id="P7000497027000000000000000040EE8" data-uri="chapter03.xhtml#P7000497027000000000000000040EE8" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040EE9" data-uri="chapter03.xhtml#P7000497027000000000000000040EE9" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.37 </span>Original and optimized code to compute element <i class="calibre5 pcalibre pcalibre1">i, k</i> of matrix product for fixed-length arrays.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040EEA" data-uri="chapter03.xhtml#P7000497027000000000000000040EEA"><p id="P7000497027000000000000000040EEB" data-uri="chapter03.xhtml#P7000497027000000000000000040EEB" class="pcalibre calibre3 pcalibre1">The compiler performs these optimizations automatically.</p></div></figcaption>
</figure>

<p id="P7000497027000000000000000040EEC" data-uri="chapter03.xhtml#P7000497027000000000000000040EEC" class="pcalibre1 pcalibre calibre2">The following is the actual assembly code generated by <span class="smallcaps pcalibre pcalibre1">gcc </span>for function <code id="P7000497027000000000000000040EED" data-uri="chapter03.xhtml#P7000497027000000000000000040EED" class="pcalibre1 calibre8 pcalibre">fix_prod_ele</code>. We see that four registers are used as follows: <code id="P7000497027000000000000000040EEE" data-uri="chapter03.xhtml#P7000497027000000000000000040EEE" class="pcalibre1 calibre8 pcalibre">%eax</code> holds result, <code id="P7000497027000000000000000040EEF" data-uri="chapter03.xhtml#P7000497027000000000000000040EEF" class="pcalibre1 calibre8 pcalibre">%rdi</code> holds <code id="P7000497027000000000000000040EF0" data-uri="chapter03.xhtml#P7000497027000000000000000040EF0" class="pcalibre1 calibre8 pcalibre">Aptr, %rcx</code> holds <code id="P7000497027000000000000000040EF1" data-uri="chapter03.xhtml#P7000497027000000000000000040EF1" class="pcalibre1 calibre8 pcalibre">Bptr</code>, and <code id="P7000497027000000000000000040EF2" data-uri="chapter03.xhtml#P7000497027000000000000000040EF2" class="pcalibre1 calibre8 pcalibre">%rsi</code> holds <code id="P7000497027000000000000000040EF3" data-uri="chapter03.xhtml#P7000497027000000000000000040EF3" class="pcalibre1 calibre8 pcalibre">Bend</code>.</p>
<pre id="P7000497027000000000000000040EF4" data-uri="chapter03.xhtml#P7000497027000000000000000040EF4" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040EF5" data-uri="chapter03.xhtml#P7000497027000000000000000040EF5" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">int fix_prod_ele_opt(fix_matrix A, fix_matrix B, long i, long k)</i>
	<i class="calibre5 pcalibre pcalibre1">A in %rdi, B in %rsi, i in %rdx, k in %rcx</i>
1	fix_prod_ele:
2	  salq	 $6, %rdx		<i class="calibre5 pcalibre pcalibre1">Compute 64 * i</i>
3	  addq	 %rdx, %rdi		<i class="calibre5 pcalibre pcalibre1">Compute Aptr = x</i><sub class="calibre85 pcalibre pcalibre1">A</sub> + 64<i class="calibre5 pcalibre pcalibre1">i = &amp;A[i][0]</i>
4	  leaq	(%rsi,%rcx,4), %rcx	<i class="calibre5 pcalibre pcalibre1">Compute Bptr = x</i><sub class="calibre85 pcalibre pcalibre1">B</sub> + 4<i class="calibre5 pcalibre pcalibre1">k = &amp;B[0][k]</i>
5	  leaq	 1024(%rcx), %rsi	<i class="calibre5 pcalibre pcalibre1">Compute Bend = x</i><sub class="calibre85 pcalibre pcalibre1">B</sub> + 4<var class="calibre5 pcalibre pcalibre1">k</var> + 1024 <i class="calibre5 pcalibre pcalibre1">= &amp;B[N][k]</i>
6	  movl	 $0, %eax		<i class="calibre5 pcalibre pcalibre1">Set result = 0</i>
7	.L7:		<b class="calibre4 pcalibre pcalibre1">loop:</b>
8	  movl	(%rdi), %edx		<i class="calibre5 pcalibre pcalibre1">Read *Aptr</i>
9	  imull	(%rcx), %edx		<i class="calibre5 pcalibre pcalibre1">Multiply by *Bptr</i>
10	  addl	%edx, %eax		<i class="calibre5 pcalibre pcalibre1">Add to result</i>
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002C8F" title="262" data-uri="chapter03.xhtml#P7000497027000000000000000002C8F" epub:type="pagebreak"></span>11	  addq	$4, %rdi		<i class="calibre5 pcalibre pcalibre1">Increment Aptr ++</i>
12	  addq	$64, %rcx		<i class="calibre5 pcalibre pcalibre1">Increment Bptr += N</i>
13	  cmpq	%rsi, %rcx		<i class="calibre5 pcalibre pcalibre1">Compare Bptr:Bend</i>
14	  jne		.L7		<i class="calibre5 pcalibre pcalibre1">If !=, goto</i> <b class="calibre4 pcalibre pcalibre1">loop</b>
15	  rep; ret			<i class="calibre5 pcalibre pcalibre1">Return</i>
</code></pre>
<section id="P7000497027000000000000000002C90" data-uri="chapter03.xhtml#P7000497027000000000000000002C90" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040EF6" data-uri="chapter03.xhtml#P7000497027000000000000000040EF6" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.39 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P700049702700000000000000000381C">342</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040EF7" data-uri="chapter03.xhtml#P7000497027000000000000000040EF7">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040EF8" data-uri="chapter03.xhtml#P7000497027000000000000000040EF8">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040EF9" data-uri="chapter03.xhtml#P7000497027000000000000000040EF9"><p id="P7000497027000000000000000040EFA" data-uri="chapter03.xhtml#P7000497027000000000000000040EFA" class="pcalibre calibre3 pcalibre1">Use <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C39"><span class="pcalibre label pcalibre1">Equation </span><span class="pcalibre label pcalibre1">3.1</span></a> to explain how the computations of the initial values for <code id="P7000497027000000000000000040EFB" data-uri="chapter03.xhtml#P7000497027000000000000000040EFB" class="pcalibre1 calibre8 pcalibre">Aptr</code>, <code id="P7000497027000000000000000040EFC" data-uri="chapter03.xhtml#P7000497027000000000000000040EFC" class="pcalibre1 calibre8 pcalibre">Bptr</code>, and Bend in the C code of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37(b)</span></a> (lines 3–5) correctly describe their computations in the assembly code generated for <code id="P7000497027000000000000000040EFD" data-uri="chapter03.xhtml#P7000497027000000000000000040EFD" class="pcalibre1 calibre8 pcalibre">fix_prod_ele</code> (lines 3–5).</p></div></li></ol>
</section>
<section id="P7000497027000000000000000002C99" data-uri="chapter03.xhtml#P7000497027000000000000000002C99" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P7000497027000000000000000040EFE" data-uri="chapter03.xhtml#P7000497027000000000000000040EFE" epub:type="title"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">3.40 </span>(solution page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP700049702700000000000000000344D_split_001.xhtml#P700049702700000000000000000381C">342</a>)</h1></header>
<ol class="practicelist pcalibre pcalibre1" id="P7000497027000000000000000040EFF" data-uri="chapter03.xhtml#P7000497027000000000000000040EFF">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000040F00" data-uri="chapter03.xhtml#P7000497027000000000000000040F00">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000040F01" data-uri="chapter03.xhtml#P7000497027000000000000000040F01"><p id="P7000497027000000000000000040F02" data-uri="chapter03.xhtml#P7000497027000000000000000040F02" class="pcalibre calibre3 pcalibre1">The following C code sets the diagonal elements of one of our fixed-size arrays to <code id="P7000497027000000000000000040F03" data-uri="chapter03.xhtml#P7000497027000000000000000040F03" class="pcalibre1 calibre8 pcalibre">val</code>:</p>
<pre id="P7000497027000000000000000040F04" data-uri="chapter03.xhtml#P7000497027000000000000000040F04" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F05" data-uri="chapter03.xhtml#P7000497027000000000000000040F05" class="calibre10 pcalibre pcalibre1">
/* Set all diagonal elements to val */
void fix_set_diag(fix_matrix A, int val) {
	long i;
	for (i = 0; i &lt; N; i++)
	  A[i][i] = val;
}
</code></pre>
<p id="P7000497027000000000000000040F06" data-uri="chapter03.xhtml#P7000497027000000000000000040F06" class="pcalibre calibre3 pcalibre1">When compiled with optimization level <code id="P7000497027000000000000000040F07" data-uri="chapter03.xhtml#P7000497027000000000000000040F07" class="pcalibre1 calibre8 pcalibre">-01, <span class="smallcaps pcalibre pcalibre1">gcc</span></code> generates the following assembly code:</p>
<pre id="P7000497027000000000000000040F08" data-uri="chapter03.xhtml#P7000497027000000000000000040F08" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F09" data-uri="chapter03.xhtml#P7000497027000000000000000040F09" class="calibre10 pcalibre pcalibre1">
1	fix_set_diag:
	<i class="calibre5 pcalibre pcalibre1">void fix_set_diag(fix_matrix A, int val)</i>
	<i class="calibre5 pcalibre pcalibre1">A in %rdi, val in %rsi</i>
2		movl	$0, %eax
3	.L13:
4		movl	%esi, (%rdi,%rax)
5		addq	$68, %rax
6		cmpq	$1088, %rax
7		jne	.L13
8		rep; ret
</code></pre>
<p id="P7000497027000000000000000040F0A" data-uri="chapter03.xhtml#P7000497027000000000000000040F0A" class="pcalibre calibre3 pcalibre1">Create a C code program <code id="P7000497027000000000000000040F0B" data-uri="chapter03.xhtml#P7000497027000000000000000040F0B" class="pcalibre1 calibre8 pcalibre">fix_set_diag_opt</code> that uses optimizations similar to those in the assembly code, in the same style as the code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37(b)</span></a>. Use expressions involving the parameter <var class="calibre5 pcalibre pcalibre1">N</var> rather than integer constants, so that your code will work correctly if <var class="calibre5 pcalibre pcalibre1">N</var> is redefined.</p>
</div></li></ol>
</section>
</section>
<section id="P7000497027000000000000000002CA8" data-uri="chapter03.xhtml#P7000497027000000000000000002CA8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000040F0C" data-uri="chapter03.xhtml#P7000497027000000000000000040F0C" epub:type="title"><span class="pcalibre label pcalibre1">3.8.5 </span>Variable-Size Arrays</h1></header>
<p id="P7000497027000000000000000040F0D" data-uri="chapter03.xhtml#P7000497027000000000000000040F0D" class="pcalibre1 pcalibre calibre2">Historically, C only supported multidimensional arrays where the sizes (with the possible exception of the first dimension) could be determined at compile time. <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002CAB" title="263" data-uri="chapter03.xhtml#P7000497027000000000000000002CAB" epub:type="pagebreak"></span>Programmers requiring variable-size arrays had to allocate storage for these arrays using functions such as <code id="P7000497027000000000000000040F0E" data-uri="chapter03.xhtml#P7000497027000000000000000040F0E" class="pcalibre1 calibre8 pcalibre">malloc</code> or <code id="P7000497027000000000000000040F0F" data-uri="chapter03.xhtml#P7000497027000000000000000040F0F" class="pcalibre1 calibre8 pcalibre">calloc</code>, and they had to explicitly encode the mapping of multidimensional arrays into single-dimension ones via row-major indexing, as expressed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C39"><span class="pcalibre label pcalibre1">Equation </span><span class="pcalibre label pcalibre1">3.1</span></a>. ISO C99 introduced the capability of having array dimension expressions that are computed as the array is being allocated.</p>
<p id="P7000497027000000000000000040F10" data-uri="chapter03.xhtml#P7000497027000000000000000040F10" class="pcalibre1 pcalibre calibre2">In the C version of variable-size arrays, we can declare an array</p>
<pre id="P7000497027000000000000000040F11" data-uri="chapter03.xhtml#P7000497027000000000000000040F11" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F12" data-uri="chapter03.xhtml#P7000497027000000000000000040F12" class="calibre10 pcalibre pcalibre1">
int A<i class="calibre5 pcalibre pcalibre1">[expr1] [expr2]</i>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040F13" data-uri="chapter03.xhtml#P7000497027000000000000000040F13">either as a local variable or as an argument to a function, and then the dimensions of the array are determined by evaluating the expressions <i class="calibre5 pcalibre pcalibre1">expr1</i> and <i class="calibre5 pcalibre pcalibre1">expr2</i> at the time the declaration is encountered. So, for example, we can write a function to access element <i class="calibre5 pcalibre pcalibre1">i, j</i> of an <var class="calibre5 pcalibre pcalibre1">n</var> × <var class="calibre5 pcalibre pcalibre1">n</var> array as follows:</p>
<pre id="P7000497027000000000000000040F14" data-uri="chapter03.xhtml#P7000497027000000000000000040F14" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F15" data-uri="chapter03.xhtml#P7000497027000000000000000040F15" class="calibre10 pcalibre pcalibre1">
int var_ele(long n, int A[n][n], long i, long j) {
	return A[i][j];
}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040F16" data-uri="chapter03.xhtml#P7000497027000000000000000040F16">The parameter <code id="P7000497027000000000000000040F17" data-uri="chapter03.xhtml#P7000497027000000000000000040F17" class="pcalibre1 calibre8 pcalibre">n</code> must precede the parameter <code id="P7000497027000000000000000040F18" data-uri="chapter03.xhtml#P7000497027000000000000000040F18" class="pcalibre1 calibre8 pcalibre">A[n][n]</code>, so that the function can compute the array dimensions as the parameter is encountered.</p>
<p id="P7000497027000000000000000040F19" data-uri="chapter03.xhtml#P7000497027000000000000000040F19" class="pcalibre1 pcalibre calibre2">G<span class="smallcaps pcalibre pcalibre1">cc </span>generates code for this referencing function as</p>
<pre id="P7000497027000000000000000040F1A" data-uri="chapter03.xhtml#P7000497027000000000000000040F1A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F1B" data-uri="chapter03.xhtml#P7000497027000000000000000040F1B" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">int var_ele(long n, int A[n][n], long i, long j)</i>
	<i class="calibre5 pcalibre pcalibre1">n in %rdi, A in %rsi, i in %rdx, j in %rcx</i>
1	var_ele:
2		imulq	%rdx, %rdi			<i class="calibre5 pcalibre pcalibre1">Compute n · i</i>
3		leaq	(%rsi,%rdi,4), %rax		<i class="calibre5 pcalibre pcalibre1">Compute x</i><sub class="calibre85 pcalibre pcalibre1">A</sub> + 4(<i class="calibre5 pcalibre pcalibre1">n · i</i>
4		movl	(%rax,%rcx,4), %eax		<i class="calibre5 pcalibre pcalibre1">Read from</i> M[<var class="calibre5 pcalibre pcalibre1">x</var><sub class="calibre85 pcalibre pcalibre1">A</sub> + 4(<var class="calibre5 pcalibre pcalibre1">n</var> · <var class="calibre5 pcalibre pcalibre1">i</var>) + 4<var class="calibre5 pcalibre pcalibre1">j</var>]
5		ret
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040F1C" data-uri="chapter03.xhtml#P7000497027000000000000000040F1C">As the annotations show, this code computes the address of element <i class="calibre5 pcalibre pcalibre1">i, j</i> as <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040F1D" data-uri="chapter03.xhtml#P7000497027000000000000000040F1D" class="pcalibre1 pcalibre calibre74">A</code></sub> + 4(<var class="calibre5 pcalibre pcalibre1">n</var> · <var class="calibre5 pcalibre pcalibre1">i</var>) + 4<var class="calibre5 pcalibre pcalibre1">j</var> = <var class="calibre5 pcalibre pcalibre1">x</var><sub class="pcalibre1 calibre47 pcalibre"><code id="P7000497027000000000000000040F1E" data-uri="chapter03.xhtml#P7000497027000000000000000040F1E" class="pcalibre1 pcalibre calibre74">A</code></sub> + 4(<var class="calibre5 pcalibre pcalibre1">n</var> · <var class="calibre5 pcalibre pcalibre1">i</var> + <var class="calibre5 pcalibre pcalibre1">j</var>). The address computation is similar to that of the fixed-size array (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C1E"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.8.3</span></a>), except that (1) the register usage changes due to added parameter <code id="P7000497027000000000000000040F1F" data-uri="chapter03.xhtml#P7000497027000000000000000040F1F" class="pcalibre1 calibre8 pcalibre">n</code>, and (2) a multiply instruction is used (line 2) to compute <var class="calibre5 pcalibre pcalibre1">n</var> · <var class="calibre5 pcalibre pcalibre1">i</var>, rather than an <code id="P7000497027000000000000000040F20" data-uri="chapter03.xhtml#P7000497027000000000000000040F20" class="pcalibre1 calibre8 pcalibre">leaq</code> instruction to compute 3<var class="calibre5 pcalibre pcalibre1">i</var>. We see therefore that referencing variable-size arrays requires only a slight generalization over fixed-size ones. The dynamic version must use a multiplication instruction to scale <var class="calibre5 pcalibre pcalibre1">i</var> by <var class="calibre5 pcalibre pcalibre1">n</var>, rather than a series of shifts and adds. In some processors, this multiplication can incur a significant performance penalty, but it is unavoidable in this case.</p>
<p id="P7000497027000000000000000040F21" data-uri="chapter03.xhtml#P7000497027000000000000000040F21" class="pcalibre1 pcalibre calibre2">When variable-size arrays are referenced within a loop, the compiler can often optimize the index computations by exploiting the regularity of the access patterns. For example, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002CC3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.38(a)</span></a> shows C code to compute element <var class="calibre5 pcalibre pcalibre1">i</var>, <var class="calibre5 pcalibre pcalibre1">k</var> of the product of two <var class="calibre5 pcalibre pcalibre1">n</var> × <var class="calibre5 pcalibre pcalibre1">n</var> arrays <code id="P7000497027000000000000000040F22" data-uri="chapter03.xhtml#P7000497027000000000000000040F22" class="pcalibre1 calibre8 pcalibre">A</code> and <code id="P7000497027000000000000000040F23" data-uri="chapter03.xhtml#P7000497027000000000000000040F23" class="pcalibre1 calibre8 pcalibre">B</code>. G<span class="smallcaps pcalibre pcalibre1">cc </span>generates assembly code, which we have recast into C (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002CC3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.38(b)</span></a>). This code follows a different style from the optimized code for the fixed-size array (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37</span></a>), but that is more an artifact of the choices made by the compiler, rather than a fundamental requirement for the two different functions. The code of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002CC3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.38(b)</span></a> retains loop variable <code id="P7000497027000000000000000040F24" data-uri="chapter03.xhtml#P7000497027000000000000000040F24" class="pcalibre1 calibre8 pcalibre">j</code>, both to detect when</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000002CC3" data-uri="chapter03.xhtml#P7000497027000000000000000002CC3">
<p id="P7000497027000000000000000040F25" data-uri="chapter03.xhtml#P7000497027000000000000000040F25" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak1 pcalibre1" id="P7000497027000000000000000002CC5" title="264" data-uri="chapter03.xhtml#P7000497027000000000000000002CC5" epub:type="pagebreak"></span>(a) Original C code</p>
<pre id="P7000497027000000000000000040F26" data-uri="chapter03.xhtml#P7000497027000000000000000040F26" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F27" data-uri="chapter03.xhtml#P7000497027000000000000000040F27" class="calibre10 pcalibre pcalibre1">
1	/* Compute i,k of variable matrix product */
2	int var_prod_ele(long n, int A[n][n], int B[n][n], long i, long k) {
3		long j;
4		int result = 0;
5
6		for (j = 0; j &lt; n; j++)
7			result += A[i][j] * B[j][k];
8
9		return result;
10	}
</code></pre>
<p id="P7000497027000000000000000040F28" data-uri="chapter03.xhtml#P7000497027000000000000000040F28" class="pcalibre1 pcalibre calibre2">(b) Optimized C code</p>
<pre id="P7000497027000000000000000040F29" data-uri="chapter03.xhtml#P7000497027000000000000000040F29" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F2A" data-uri="chapter03.xhtml#P7000497027000000000000000040F2A" class="calibre10 pcalibre pcalibre1">
/* Compute i,k of variable matrix product */
int var_prod_ele_opt(long n, int A[n][n], int B[n][n], long i, long k) {
	int *Arow = A[i];
	int *Bptr = &amp;B[0][k];
	int result = 0;
	long j;
	for (j = 0; j &lt; n; j++) {
	  result += Arow[j] * *Bptr;
	  Bptr += n;
	}
	return result;
}
</code></pre>
<figcaption id="P7000497027000000000000000040F2B" data-uri="chapter03.xhtml#P7000497027000000000000000040F2B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000040F2C" data-uri="chapter03.xhtml#P7000497027000000000000000040F2C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">3.38 </span>Original and optimized code to compute element <i class="calibre5 pcalibre pcalibre1">i, k</i> of matrix product for variable-size arrays.</h1></header><div class="caption pcalibre pcalibre1" id="P7000497027000000000000000040F2D" data-uri="chapter03.xhtml#P7000497027000000000000000040F2D"><p id="P7000497027000000000000000040F2E" data-uri="chapter03.xhtml#P7000497027000000000000000040F2E" class="pcalibre calibre3 pcalibre1">The compiler performs these optimizations automatically.</p></div></figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040F2F" data-uri="chapter03.xhtml#P7000497027000000000000000040F2F">the loop has terminated and to index into an array consisting of the elements of row <var class="calibre5 pcalibre pcalibre1">i</var> of <code id="P7000497027000000000000000040F30" data-uri="chapter03.xhtml#P7000497027000000000000000040F30" class="pcalibre1 calibre8 pcalibre">A</code>.</p>
<p id="P7000497027000000000000000040F31" data-uri="chapter03.xhtml#P7000497027000000000000000040F31" class="pcalibre1 pcalibre calibre2">The following is the assembly code for the loop of <code id="P7000497027000000000000000040F32" data-uri="chapter03.xhtml#P7000497027000000000000000040F32" class="pcalibre1 calibre8 pcalibre">var_prod_ele</code>:</p>
<pre id="P7000497027000000000000000040F33" data-uri="chapter03.xhtml#P7000497027000000000000000040F33" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000040F34" data-uri="chapter03.xhtml#P7000497027000000000000000040F34" class="calibre10 pcalibre pcalibre1">
	<i class="calibre5 pcalibre pcalibre1">Registers: n in %rdi, Arow in %rsi, Bptr in %rcx</i>
	<i class="calibre5 pcalibre pcalibre1">4n in %r9, result in %eax, j in %edx</i>
1	.L24:				<b class="calibre4 pcalibre pcalibre1">loop:</b>
2	movl	(%rsi,%rdx,4), %r8d	<i class="calibre5 pcalibre pcalibre1">Read Arow[j]</i>
3	imull	(%rcx), %r8d		<i class="calibre5 pcalibre pcalibre1">Multiply by *Bptr</i>
4	addl	%r8d, %eax		<i class="calibre5 pcalibre pcalibre1">Add to result</i>
5	addq	$1, %rdx		<i class="calibre5 pcalibre pcalibre1">j++</i>
6	addq	%r9, %rcx		<i class="calibre5 pcalibre pcalibre1">Bptr += n</i>
7	cmpq	%rdi, %rdx		<i class="calibre5 pcalibre pcalibre1">Compare j:n</i>
8	jne	.L24			<i class="calibre5 pcalibre pcalibre1">If !=, goto</i> <b class="calibre4 pcalibre pcalibre1">loop</b>
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000040F35" data-uri="chapter03.xhtml#P7000497027000000000000000040F35">We see that the program makes use of both a scaled value 4<var class="calibre5 pcalibre pcalibre1">n</var> (register <code id="P7000497027000000000000000040F36" data-uri="chapter03.xhtml#P7000497027000000000000000040F36" class="pcalibre1 calibre8 pcalibre">%r9</code>) for incrementing <code id="P7000497027000000000000000040F37" data-uri="chapter03.xhtml#P7000497027000000000000000040F37" class="pcalibre1 calibre8 pcalibre">Bptr</code> as well as the value of <var class="calibre5 pcalibre pcalibre1">n</var> (register <code id="P7000497027000000000000000040F38" data-uri="chapter03.xhtml#P7000497027000000000000000040F38" class="pcalibre1 calibre8 pcalibre">%rdi</code>) to check the loop <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000002CD9" title="265" data-uri="chapter03.xhtml#P7000497027000000000000000002CD9" epub:type="pagebreak"></span>bounds. The need for two values does not show upin the C code, due to the scaling of pointer arithmetic.</p>
<p id="P7000497027000000000000000040F39" data-uri="chapter03.xhtml#P7000497027000000000000000040F39" class="pcalibre1 pcalibre calibre2">We have seen that, with optimizations enabled, <span class="smallcaps pcalibre pcalibre1">gcc </span>is able to recognize patterns that arise when a program steps through the elements of a multidimensional array. It can then generate code that avoids the multiplication that would result from a direct application of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C39"><span class="pcalibre label pcalibre1">Equation </span><span class="pcalibre label pcalibre1">3.1</span></a>. Whether it generates the pointer-based code of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002C79"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.37(b)</span></a> or the array-based code of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000002CC3"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">3.38(b)</span></a>, these optimizations will significantly improve program performance.</p>
</section>
</section></body></html>
