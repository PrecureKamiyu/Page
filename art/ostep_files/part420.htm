<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>39.4 Reading and Writing Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part419.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part421.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">39.4 Reading and Writing Files</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Once we have some files, of course we might like to read or write them. Let’s start by reading an existing file. If we were typing at a command line, we might just use the program <span class="s41">cat </span>to dump the contents of the file to the screen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">prompt&gt; echo hello &gt; foo prompt&gt; cat foo</p><p class="s38" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">hello prompt&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">In this code snippet, we redirect the output of the program <span class="s41">echo </span>to the file <span class="s41">foo</span>, which then contains the word “hello” in it. We then use <span class="s41">cat </span>to see the contents of the file. But how does the <span class="s41">cat </span>program access the file <span class="s41">foo</span>?</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To find this out, we’ll use an incredibly useful tool to trace the system calls made by a program. On Linux, the tool is called <b>strace</b>; other sys- tems have similar tools (see <b>dtruss </b>on Mac OS X, or <b>truss </b>on some older U<span class="s7">NIX </span>variants). What <span class="s41">strace </span>does is trace every system call made by a program while it runs, and dump the trace to the screen for you to see.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 70pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: U<span class="s7">SE </span><span class="s38">S T R A C E </span>(A<span class="s7">ND </span>S<span class="s7">IMILAR </span>T<span class="s7">OOLS</span>)</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The <span class="s41">strace </span>tool provides an awesome way to see what programs are up to. By running it, you can trace which system calls a program makes, see the arguments and return codes, and generally get a very good idea of what is going on.</p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The tool also takes some arguments which can be quite useful. For ex- ample, <span class="s41">-f </span>follows any fork’d children too; <span class="s41">-t </span>reports the time of day at each call; <span class="s41">-e trace=open,close,read,write </span>only traces calls to those system calls and ignores all others. There are many more powerful flags – read the man pages and find out how to harness this wonderful tool.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">Here is an example of using <span class="s41">strace </span>to figure out what <span class="s41">cat </span>is doing (some calls removed for readability):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">prompt&gt; strace cat foo</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">...</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">open(&quot;foo&quot;, O_RDONLY|O_LARGEFILE)   = 3</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">read(3, &quot;hello\n&quot;, 4096)      = 6</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">write(1, &quot;hello\n&quot;, 6)       = 6 hello</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">read(3, &quot;&quot;, 4096)         = 0</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">close(3)             = 0</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">...</p><p class="s38" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">prompt&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_575.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_576.png"/></span></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">The first thing that <span class="s41">cat </span>does is open the file for reading. A couple of things we should note about this; first, that the file is only opened for reading (not writing), as indicated by the <span class="s41">O RDONLY </span>flag; second, that the 64-bit offset be used (<span class="s41">O LARGEFILE</span>); third, that the call to <span class="s41">open() </span>succeeds and returns a file descriptor, which has the value of 3.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Why does the first call to <span class="s41">open() </span>return 3, not 0 or perhaps 1 as you might expect? As it turns out, each running process already has three files open, standard input (which the process can read to receive input), standard output (which the process can write to in order to dump infor- mation to the screen), and standard error (which the process can write error messages to). These are represented by file descriptors 0, 1, and 2, respectively. Thus, when you first open another file (as <span class="s41">cat </span>does above), it will almost certainly be file descriptor 3.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">After the open succeeds, <span class="s41">cat </span>uses the <span class="s41">read() </span>system call to repeat- edly read some bytes from a file. The first argument to <span class="s41">read() </span>is the file descriptor, thus telling the file system which file to read; a process can of course have multiple files open at once, and thus the descriptor enables the operating system to know which file a particular read refers to. The second argument points to a buffer where the result of the <span class="s41">read() </span>will be placed; in the system-call trace above, strace shows the results of the read in this spot (“hello”). The third argument is the size of the buffer, which</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;line-height: 88%;text-align: justify;">in this case is 4 KB. The call to <span class="s41">read() </span>returns successfully as well, here returning the number of bytes it read (6, which includes 5 for the letters in the word “hello” and one for an end-of-line marker).</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">At this point, you see another interesting result of the strace: a single call to the <span class="s41">write() </span>system call, to the file descriptor 1. As we mentioned above, this descriptor is known as the standard output, and thus is used to write the word “hello” to the screen as the program <span class="s41">cat </span>is meant to do. But does it call <span class="s41">write() </span>directly? Maybe (if it is highly optimized). But if not, what <span class="s41">cat </span>might do is call the library routine <span class="s41">printf()</span>; in- ternally, <span class="s41">printf() </span>figures out all the formatting details passed to it, and eventually calls write on the standard output to print the results to the screen.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: right;">The <span class="s41">cat </span>program then tries to read more from the file, but since there are no bytes left in the file, the <span class="s41">read() </span>returns 0 and the program knows that this means it has read the entire file. Thus, the program calls <span class="s41">close() </span>to indicate that it is done with the file “foo”, passing in the corresponding file descriptor. The file is thus closed, and the reading of it thus complete.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">Writing a file is accomplished via a similar set of steps. First, a file is opened for writing, then the <span class="s41">write() </span>system call is called, perhaps repeatedly for larger files, and then <span class="s41">close()</span>. Use <span class="s41">strace </span>to trace writes to a file, perhaps of a program you wrote yourself, or by tracing the <span class="s41">dd </span>utility, e.g., <span class="s41">dd if=foo of=bar</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part419.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part421.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
