<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>4.5 Pipelined Y86-64 Implementations</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000041EB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000042482" data-uri="chapter04.xhtml#P7000497027000000000000000042482" epub:type="title"><span class="pcalibre label pcalibre1">4.5 </span>Pipelined Y86-64 Implementations</h1></header>
<p id="P7000497027000000000000000042483" data-uri="chapter04.xhtml#P7000497027000000000000000042483" class="pcalibre1 pcalibre calibre2">We are finally ready for the major task of this chapter—designing a pipelined Y86-64 processor. We start by making a small adaptation of the sequential processor SEQ to shift the computation of the PC into the fetch stage. We then add pipeline registers between the stages. Our first attempt at this does not handle the different data and control dependencies properly. By making some modifications, however, we achieve our goal of an efficient pipelined processor that implements the Y86-64 ISA.</p>


<section id="P70004970270000000000000000041EE" data-uri="chapter04.xhtml#P70004970270000000000000000041EE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042484" data-uri="chapter04.xhtml#P7000497027000000000000000042484" epub:type="title"><span class="pcalibre label pcalibre1">4.5.1 </span>SEQ+: Rearranging the Computation Stages</h1></header>
<p id="P7000497027000000000000000042485" data-uri="chapter04.xhtml#P7000497027000000000000000042485" class="pcalibre1 pcalibre calibre2">As a transitional step toward a pipelined design, we must slightly rearrange the order of the five stages in SEQ so that the PC update stage comes at the beginning of the clock cycle, rather than at the end. This transformation requires only minimal change to the overall hardware structure, and it will work better with the sequencing of activities within the pipeline stages. We refer to this modified design as SEQ+.</p>
<p id="P7000497027000000000000000042486" data-uri="chapter04.xhtml#P7000497027000000000000000042486" class="pcalibre1 pcalibre calibre2">We can move the PC update stage so that its logic is active at the beginning of the clock cycle by making it compute the PC value for the <i class="calibre5 pcalibre pcalibre1">current</i> instruction. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000041F2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.39</span></a> shows how SEQ and SEQ+ differ in their PC computation. With SEQ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000041F2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.39</span></a>(a)), the PC computation takes place at the end of the clock cycle, computing the new value for the PC register based on the values of signals computed during the current clock cycle. With SEQ+ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000041F2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.39</span></a>(b)), we create state registers to hold the signals computed during an instruction. Then, as a new clock cycle begins, the values propagate through the exact same logic to compute the PC for the now-current instruction. We label the registers “pIcode,”</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000041F2" data-uri="chapter04.xhtml#P70004970270000000000000000041F2">
<img alt="Diagrams illustrate PC computations." id="P7000497027000000000000000042487" data-uri="P700049702700000000000000000B6EC" src="../images/p421-1.png" class="calibre137 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042488" data-uri="chapter04.xhtml#P7000497027000000000000000042488" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042489" data-uri="chapter04.xhtml#P7000497027000000000000000042489" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.39 </span>Shifting the timing of the PC computation.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004248A" data-uri="chapter04.xhtml#P700049702700000000000000004248A"><p id="P700049702700000000000000004248B" data-uri="chapter04.xhtml#P700049702700000000000000004248B" class="pcalibre1 pcalibre calibre2"> With SEQ+, we compute the value of the program counter for the current state as the first step in instruction execution.</p><p id="P700049702700000000000000004248C" data-uri="chapter04.xhtml#P700049702700000000000000004248C" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022765" data-uri="chapter04.xhtml#P7000497027000000000000000022765">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<ol class="pcalibre1 pcalibre ol_lower-alpha1" id="P700049702700000000000000004248D" data-uri="chapter04.xhtml#P700049702700000000000000004248D">
<li id="P700049702700000000000000004248E" data-uri="chapter04.xhtml#P700049702700000000000000004248E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004248F" data-uri="chapter04.xhtml#P700049702700000000000000004248F" class="pcalibre calibre3 pcalibre1">SEQ new PC computation: New PC with inputs icode, Cnd, valC, valM, and valP and output PC</p></li>
<li id="P7000497027000000000000000042490" data-uri="chapter04.xhtml#P7000497027000000000000000042490" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042491" data-uri="chapter04.xhtml#P7000497027000000000000000042491" class="pcalibre calibre3 pcalibre1">SEQ+ PC selection: PC with inputs picode, pCnd, pValM, pValC, and PValP and output PC.</p></li>
</ol>
</details>
</figcaption>
</figure>
<aside class="sidebar pcalibre5 pcalibre" id="P70004970270000000000000000041F8" data-uri="chapter04.xhtml#P70004970270000000000000000041F8"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042492" data-uri="chapter04.xhtml#P7000497027000000000000000042492" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000041FA" title="422" data-uri="chapter04.xhtml#P70004970270000000000000000041FA" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Where is the PC in SEQ+?</h1></header>
<p id="P7000497027000000000000000042493" data-uri="chapter04.xhtml#P7000497027000000000000000042493" class="pcalibre calibre3 pcalibre1">One curious feature of SEQ+ is that there is no hardware register storing the program counter. Instead, the PC is computed dynamically based on some state information stored from the previous instruction. This is a small illustration of the fact that we can implement a processor in a way that differs from the conceptual model implied by the ISA, as long as the processor correctly executes arbitrary machine-language programs. We need not encode the state in the form indicated by the programmer-visible state, as long as the processor can generate correct values for any part of the programmer-visible state (such as the program counter). We will exploit this principle even more in creating a pipelined design. Out-of-order processing techniques, as described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004B6C.xhtml#P7000497027000000000000000004B6C"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">5.7</span></a>, take this idea to an extreme by executing instructions in a completely different order than they occur in the machine-level program.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042494" data-uri="chapter04.xhtml#P7000497027000000000000000042494">“pCnd,” and so on, to indicate that on any given cycle, they hold the control signals generated during the previous cycle.</p>
<p id="P7000497027000000000000000042495" data-uri="chapter04.xhtml#P7000497027000000000000000042495" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.40</span></a> shows a more detailed view of the SEQ+ hardware. We can see that it contains the exact same hardware units and control blocks that we had in SEQ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.23</span></a>), but with the PC logic shifted from the top, where it was active at the end of the clock cycle, to the bottom, where it is active at the beginning.</p>
<p id="P7000497027000000000000000042496" data-uri="chapter04.xhtml#P7000497027000000000000000042496" class="pcalibre1 pcalibre calibre2">The shift of state elements from SEQ to SEQ+ is an example of a general transformation known as <i class="calibre5 pcalibre pcalibre1">circuit retiming</i> <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B42B">[68]</a>. Retiming changes the state representation for a system without changing its logical behavior. It is often used to balance the delays between the different stages of a pipelined system.</p>
</section>

<section id="P70004970270000000000000000041FF" data-uri="chapter04.xhtml#P70004970270000000000000000041FF" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042497" data-uri="chapter04.xhtml#P7000497027000000000000000042497" epub:type="title"><span class="pcalibre label pcalibre1">4.5.2 </span>Inserting Pipeline Registers</h1></header>
<p id="P7000497027000000000000000042498" data-uri="chapter04.xhtml#P7000497027000000000000000042498" class="pcalibre1 pcalibre calibre2">In our first attempt at creating a pipelined Y86-64 processor, we insert pipeline registers between the stages of SEQ+ and rearrange signals somewhat, yielding the PIPE— processor, where the "-" in the name signifies that this processor has somewhat less performance than our ultimate processor design. The structure of PIPE— is illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>. The pipeline registers are shown in this figure as blue boxes, each containing different fields that are shown as white boxes. As indicated by the multiple fields, each pipeline register holds multiple bytes and words. Unlike the labels shown in rounded boxes in the hardware structure of the two sequential processors (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000403D"><span class="pcalibre label pcalibre1">Figures </span><span class="pcalibre label pcalibre1">4.23</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004273"><span class="pcalibre label pcalibre1">4.40</span></a>), these white boxes represent actual hardware components.</p>
<p id="P7000497027000000000000000042499" data-uri="chapter04.xhtml#P7000497027000000000000000042499" class="pcalibre1 pcalibre calibre2">Observe that PIPE— uses nearly the same set of hardware units as our sequential design SEQ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.40</span></a>), but with the pipeline registers separating the stages. The differences between the signals in the two systems is discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P700049702700000000000000000422D"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.3</span></a>.</p>
<p id="P700049702700000000000000004249A" data-uri="chapter04.xhtml#P700049702700000000000000004249A" class="pcalibre1 pcalibre calibre2">The pipeline registers are labeled as follows:</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000004249B" data-uri="chapter04.xhtml#P700049702700000000000000004249B">
<li id="P700049702700000000000000004249C" data-uri="chapter04.xhtml#P700049702700000000000000004249C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004249D" data-uri="chapter04.xhtml#P700049702700000000000000004249D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">F </span>holds a <i class="calibre5 pcalibre pcalibre1">predicted</i> value of the program counter, as will be discussed shortly.</p></li>
<li id="P700049702700000000000000004249E" data-uri="chapter04.xhtml#P700049702700000000000000004249E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004249F" data-uri="chapter04.xhtml#P700049702700000000000000004249F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">D </span>sits between the fetch and decode stages. It holds information about the most recently fetched instruction for processing by the decode stage.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004209" data-uri="chapter04.xhtml#P7000497027000000000000000004209">
<span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000420A" title="423" data-uri="chapter04.xhtml#P700049702700000000000000000420A" epub:type="pagebreak"></span><img alt="A diagram illustrates SEQ+ hardware structure." id="P70004970270000000000000000424A0" data-uri="P700049702700000000000000000B6ED" src="../images/p423-1.png" class="calibre138 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000424A1" data-uri="chapter04.xhtml#P70004970270000000000000000424A1" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000424A2" data-uri="chapter04.xhtml#P70004970270000000000000000424A2" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.40 </span>SEQ+ hardware structure.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000424A3" data-uri="chapter04.xhtml#P70004970270000000000000000424A3"><p id="P70004970270000000000000000424A4" data-uri="chapter04.xhtml#P70004970270000000000000000424A4" class="calibre13 pcalibre pcalibre1">Shifting the PC computation from the end of the clock cycle to the beginning makes it more suitable for pipelining.</p><p id="P70004970270000000000000000424A5" data-uri="chapter04.xhtml#P70004970270000000000000000424A5" class="pcalibre1 calibre32 pcalibre">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002277E" data-uri="chapter04.xhtml#P700049702700000000000000002277E">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000424A6" data-uri="chapter04.xhtml#P70004970270000000000000000424A6" class="calibre13 pcalibre pcalibre1">A diagram shows a flow through elements, as summarized in order below, from bottom to top:</p>
<ul id="P70004970270000000000000000424A7" data-uri="chapter04.xhtml#P70004970270000000000000000424A7" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000424A8" data-uri="chapter04.xhtml#P70004970270000000000000000424A8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424A9" data-uri="chapter04.xhtml#P70004970270000000000000000424A9" class="calibre13 pcalibre pcalibre1">PC: pC with output PC and the following inputs:</p>
<ul id="P70004970270000000000000000424AA" data-uri="chapter04.xhtml#P70004970270000000000000000424AA" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424AB" data-uri="chapter04.xhtml#P70004970270000000000000000424AB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424AC" data-uri="chapter04.xhtml#P70004970270000000000000000424AC" class="calibre13 pcalibre pcalibre1">Picode from instruction memory</p></li>
<li id="P70004970270000000000000000424AD" data-uri="chapter04.xhtml#P70004970270000000000000000424AD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424AE" data-uri="chapter04.xhtml#P70004970270000000000000000424AE" class="calibre13 pcalibre pcalibre1">pCnd from Cnd from ALU</p></li>
<li id="P70004970270000000000000000424AF" data-uri="chapter04.xhtml#P70004970270000000000000000424AF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424B0" data-uri="chapter04.xhtml#P70004970270000000000000000424B0" class="calibre13 pcalibre pcalibre1">pValM from valM from Data memory</p></li>
<li id="P70004970270000000000000000424B1" data-uri="chapter04.xhtml#P70004970270000000000000000424B1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424B2" data-uri="chapter04.xhtml#P70004970270000000000000000424B2" class="calibre13 pcalibre pcalibre1">pValC from valC from instruction memory</p></li>
<li id="P70004970270000000000000000424B3" data-uri="chapter04.xhtml#P70004970270000000000000000424B3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424B4" data-uri="chapter04.xhtml#P70004970270000000000000000424B4" class="calibre13 pcalibre pcalibre1">pValP from valP from PC increment</p></li>
</ul></li>
<li id="P70004970270000000000000000424B5" data-uri="chapter04.xhtml#P70004970270000000000000000424B5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424B6" data-uri="chapter04.xhtml#P70004970270000000000000000424B6" class="calibre13 pcalibre pcalibre1">Fetch, with input from PC:</p>
<ul id="P70004970270000000000000000424B7" data-uri="chapter04.xhtml#P70004970270000000000000000424B7" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424B8" data-uri="chapter04.xhtml#P70004970270000000000000000424B8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424B9" data-uri="chapter04.xhtml#P70004970270000000000000000424B9" class="calibre13 pcalibre pcalibre1">Instruction memory, with instr_valid and Imem_error leading to Stat in PC update, with outputs:</p>
<ul id="P70004970270000000000000000424BA" data-uri="chapter04.xhtml#P70004970270000000000000000424BA" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000424BB" data-uri="chapter04.xhtml#P70004970270000000000000000424BB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424BC" data-uri="chapter04.xhtml#P70004970270000000000000000424BC" class="calibre13 pcalibre pcalibre1">icode, to Stat at PC update and picode in PC</p></li>
<li id="P70004970270000000000000000424BD" data-uri="chapter04.xhtml#P70004970270000000000000000424BD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424BE" data-uri="chapter04.xhtml#P70004970270000000000000000424BE" class="calibre13 pcalibre pcalibre1">ifun</p></li>
<li id="P70004970270000000000000000424BF" data-uri="chapter04.xhtml#P70004970270000000000000000424BF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424C0" data-uri="chapter04.xhtml#P70004970270000000000000000424C0" class="calibre13 pcalibre pcalibre1">rA</p></li>
<li id="P70004970270000000000000000424C1" data-uri="chapter04.xhtml#P70004970270000000000000000424C1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424C2" data-uri="chapter04.xhtml#P70004970270000000000000000424C2" class="calibre13 pcalibre pcalibre1">rB</p></li>
<li id="P70004970270000000000000000424C3" data-uri="chapter04.xhtml#P70004970270000000000000000424C3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424C4" data-uri="chapter04.xhtml#P70004970270000000000000000424C4" class="calibre13 pcalibre pcalibre1">valC, to PC and ALU A</p></li>
</ul></li>
<li id="P70004970270000000000000000424C5" data-uri="chapter04.xhtml#P70004970270000000000000000424C5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424C6" data-uri="chapter04.xhtml#P70004970270000000000000000424C6" class="calibre13 pcalibre pcalibre1">PC increment with output valP, to Data in memory and PC</p></li>
</ul></li>
<li id="P70004970270000000000000000424C7" data-uri="chapter04.xhtml#P70004970270000000000000000424C7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424C8" data-uri="chapter04.xhtml#P70004970270000000000000000424C8" class="calibre13 pcalibre pcalibre1">Decode: Register file with outputs and inputs:</p>
<ul id="P70004970270000000000000000424C9" data-uri="chapter04.xhtml#P70004970270000000000000000424C9" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424CA" data-uri="chapter04.xhtml#P70004970270000000000000000424CA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424CB" data-uri="chapter04.xhtml#P70004970270000000000000000424CB" class="calibre13 pcalibre pcalibre1">Outputs A and B to valA and valB, respectively</p>
<ul id="P70004970270000000000000000424CC" data-uri="chapter04.xhtml#P70004970270000000000000000424CC" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000424CD" data-uri="chapter04.xhtml#P70004970270000000000000000424CD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424CE" data-uri="chapter04.xhtml#P70004970270000000000000000424CE" class="calibre13 pcalibre pcalibre1">valA to ALU A as well as Addr and Data in memory</p></li>
<li id="P70004970270000000000000000424CF" data-uri="chapter04.xhtml#P70004970270000000000000000424CF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424D0" data-uri="chapter04.xhtml#P70004970270000000000000000424D0" class="calibre13 pcalibre pcalibre1">valB to ALU B</p></li>
</ul></li>
<li id="P70004970270000000000000000424D1" data-uri="chapter04.xhtml#P70004970270000000000000000424D1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424D2" data-uri="chapter04.xhtml#P70004970270000000000000000424D2" class="calibre13 pcalibre pcalibre1">Inputs M and E</p>
<ul id="P70004970270000000000000000424D3" data-uri="chapter04.xhtml#P70004970270000000000000000424D3" class="pcalibre calibre31 pcalibre1">
<li id="P70004970270000000000000000424D4" data-uri="chapter04.xhtml#P70004970270000000000000000424D4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424D5" data-uri="chapter04.xhtml#P70004970270000000000000000424D5" class="calibre13 pcalibre pcalibre1">M from output valM from Data memory</p></li>
<li id="P70004970270000000000000000424D6" data-uri="chapter04.xhtml#P70004970270000000000000000424D6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424D7" data-uri="chapter04.xhtml#P70004970270000000000000000424D7" class="calibre13 pcalibre pcalibre1">E as write back from output valE from ALU</p></li>
</ul></li></ul></li>
<li id="P70004970270000000000000000424D8" data-uri="chapter04.xhtml#P70004970270000000000000000424D8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424D9" data-uri="chapter04.xhtml#P70004970270000000000000000424D9" class="calibre13 pcalibre pcalibre1">Execute: ALU with inputs and outputs:</p>
<ul id="P70004970270000000000000000424DA" data-uri="chapter04.xhtml#P70004970270000000000000000424DA" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424DB" data-uri="chapter04.xhtml#P70004970270000000000000000424DB" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424DC" data-uri="chapter04.xhtml#P70004970270000000000000000424DC" class="calibre13 pcalibre pcalibre1">Input ALU A from valC and valA</p></li>
<li id="P70004970270000000000000000424DD" data-uri="chapter04.xhtml#P70004970270000000000000000424DD" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424DE" data-uri="chapter04.xhtml#P70004970270000000000000000424DE" class="calibre13 pcalibre pcalibre1">Input ALU B from valB</p></li>
<li id="P70004970270000000000000000424DF" data-uri="chapter04.xhtml#P70004970270000000000000000424DF" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424E0" data-uri="chapter04.xhtml#P70004970270000000000000000424E0" class="calibre13 pcalibre pcalibre1">Input ALU fun.</p></li>
<li id="P70004970270000000000000000424E1" data-uri="chapter04.xhtml#P70004970270000000000000000424E1" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424E2" data-uri="chapter04.xhtml#P70004970270000000000000000424E2" class="calibre13 pcalibre pcalibre1">Output CC to Cnd, to dstE, dstM, srcA, and srcB, each with own outputs</p></li>
<li id="P70004970270000000000000000424E3" data-uri="chapter04.xhtml#P70004970270000000000000000424E3" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424E4" data-uri="chapter04.xhtml#P70004970270000000000000000424E4" class="calibre13 pcalibre pcalibre1">Output valE to Addr input to Data memory and to Register file E as write back</p></li>
</ul></li>
<li id="P70004970270000000000000000424E5" data-uri="chapter04.xhtml#P70004970270000000000000000424E5" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424E6" data-uri="chapter04.xhtml#P70004970270000000000000000424E6" class="calibre13 pcalibre pcalibre1">Memory: Data memory with inputs and outputs:</p>
<ul id="P70004970270000000000000000424E7" data-uri="chapter04.xhtml#P70004970270000000000000000424E7" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424E8" data-uri="chapter04.xhtml#P70004970270000000000000000424E8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424E9" data-uri="chapter04.xhtml#P70004970270000000000000000424E9" class="calibre13 pcalibre pcalibre1">Inputs read and write from Mem. Control</p></li>
<li id="P70004970270000000000000000424EA" data-uri="chapter04.xhtml#P70004970270000000000000000424EA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424EB" data-uri="chapter04.xhtml#P70004970270000000000000000424EB" class="calibre13 pcalibre pcalibre1">Input Addr from valE and valA</p></li>
<li id="P70004970270000000000000000424EC" data-uri="chapter04.xhtml#P70004970270000000000000000424EC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424ED" data-uri="chapter04.xhtml#P70004970270000000000000000424ED" class="calibre13 pcalibre pcalibre1">Input Data from valP and valA</p></li>
<li id="P70004970270000000000000000424EE" data-uri="chapter04.xhtml#P70004970270000000000000000424EE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424EF" data-uri="chapter04.xhtml#P70004970270000000000000000424EF" class="calibre13 pcalibre pcalibre1">Data out to valM, leading to Register file M and PC</p></li>
<li id="P70004970270000000000000000424F0" data-uri="chapter04.xhtml#P70004970270000000000000000424F0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424F1" data-uri="chapter04.xhtml#P70004970270000000000000000424F1" class="calibre13 pcalibre pcalibre1">Dmem_error to Stat</p></li></ul></li>
<li id="P70004970270000000000000000424F2" data-uri="chapter04.xhtml#P70004970270000000000000000424F2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424F3" data-uri="chapter04.xhtml#P70004970270000000000000000424F3" class="calibre13 pcalibre pcalibre1">Stat output from Stat, with inputs from Instruction memory, icode output of Instruction memory, and Data memory.</p></li>
</ul>
</details>
</figcaption>
</figure>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004210" data-uri="chapter04.xhtml#P7000497027000000000000000004210">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004211" title="424" data-uri="chapter04.xhtml#P7000497027000000000000000004211" epub:type="pagebreak"></span><img alt="A diagram illustrates a hardware structure divided into a five-stage pipeline." id="P70004970270000000000000000424F4" data-uri="P700049702700000000000000000B6EE" src="../images/p424-1.png" class="calibre139 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000424F5" data-uri="chapter04.xhtml#P70004970270000000000000000424F5" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000424F6" data-uri="chapter04.xhtml#P70004970270000000000000000424F6" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.41 </span>Hardware structure of PIPE—, an initial pipelined implementation.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000424F7" data-uri="chapter04.xhtml#P70004970270000000000000000424F7"><p id="P70004970270000000000000000424F8" data-uri="chapter04.xhtml#P70004970270000000000000000424F8" class="calibre13 pcalibre pcalibre1"> By inserting pipeline registers into SEQ+ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209"><span class="pcalibre label pcalibre1">Figure </span><span class="number pcalibre pcalibre1">4.40</span></a>), we create a five-stage pipeline. There are several shortcomings of this version that we will deal with shortly.</p><p id="P70004970270000000000000000424F9" data-uri="chapter04.xhtml#P70004970270000000000000000424F9" class="pcalibre1 calibre32 pcalibre">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000227D4" data-uri="chapter04.xhtml#P70004970270000000000000000227D4">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000424FA" data-uri="chapter04.xhtml#P70004970270000000000000000424FA" class="calibre13 pcalibre pcalibre1">The five pipelines in the structure are summarized below, from bottom to top.</p>
<ul id="P70004970270000000000000000424FB" data-uri="chapter04.xhtml#P70004970270000000000000000424FB" class="pcalibre calibre39 pcalibre1">
<li id="P70004970270000000000000000424FC" data-uri="chapter04.xhtml#P70004970270000000000000000424FC" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000424FD" data-uri="chapter04.xhtml#P70004970270000000000000000424FD" class="calibre13 pcalibre pcalibre1">F, below Fetch contains predPC with input form Predict PC and output to Select PC, which has:</p>
<ul id="P70004970270000000000000000424FE" data-uri="chapter04.xhtml#P70004970270000000000000000424FE" class="calibre112 pcalibre pcalibre1">
<li id="P70004970270000000000000000424FF" data-uri="chapter04.xhtml#P70004970270000000000000000424FF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042500" data-uri="chapter04.xhtml#P7000497027000000000000000042500" class="calibre13 pcalibre pcalibre1">Inputs M_valA from pipeline M and W_valM from pipeline W</p></li>
<li id="P7000497027000000000000000042501" data-uri="chapter04.xhtml#P7000497027000000000000000042501" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042502" data-uri="chapter04.xhtml#P7000497027000000000000000042502" class="calibre13 pcalibre pcalibre1">Output f_pc to instruction memory and PC increment, each with output to Predict PC</p></li>
</ul></li>
<li id="P7000497027000000000000000042503" data-uri="chapter04.xhtml#P7000497027000000000000000042503" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042504" data-uri="chapter04.xhtml#P7000497027000000000000000042504" class="calibre13 pcalibre pcalibre1">D, between Fetch and Decode: includes the following, from left to right:</p>
<ul id="P7000497027000000000000000042505" data-uri="chapter04.xhtml#P7000497027000000000000000042505" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000042506" data-uri="chapter04.xhtml#P7000497027000000000000000042506" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042507" data-uri="chapter04.xhtml#P7000497027000000000000000042507" class="calibre13 pcalibre pcalibre1">Stat: input f_stat from Stat, with input imem_error and instr_valid from Instruction memory; output to stat in pipeline E</p></li>
<li id="P7000497027000000000000000042508" data-uri="chapter04.xhtml#P7000497027000000000000000042508" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042509" data-uri="chapter04.xhtml#P7000497027000000000000000042509" class="calibre13 pcalibre pcalibre1">Icode: input from instruction memory; output to icode in pipeline E</p></li>
<li id="P700049702700000000000000004250A" data-uri="chapter04.xhtml#P700049702700000000000000004250A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004250B" data-uri="chapter04.xhtml#P700049702700000000000000004250B" class="calibre13 pcalibre pcalibre1">Ifun: input from instruction memory; output ifun in pipeline E</p></li>
<li id="P700049702700000000000000004250C" data-uri="chapter04.xhtml#P700049702700000000000000004250C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004250D" data-uri="chapter04.xhtml#P700049702700000000000000004250D" class="calibre13 pcalibre pcalibre1">rA from instruction memory</p></li>
<li id="P700049702700000000000000004250E" data-uri="chapter04.xhtml#P700049702700000000000000004250E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004250F" data-uri="chapter04.xhtml#P700049702700000000000000004250F" class="calibre13 pcalibre pcalibre1">rB from instruction memory</p></li>
<li id="P7000497027000000000000000042510" data-uri="chapter04.xhtml#P7000497027000000000000000042510" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042511" data-uri="chapter04.xhtml#P7000497027000000000000000042511" class="calibre13 pcalibre pcalibre1">valC: input from instruction memory; output valC in pipeline E</p></li>
<li id="P7000497027000000000000000042512" data-uri="chapter04.xhtml#P7000497027000000000000000042512" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042513" data-uri="chapter04.xhtml#P7000497027000000000000000042513" class="calibre13 pcalibre pcalibre1">valP: input from PC increment; output Select A to valA in pipeline E</p></li>
</ul></li>
<li id="P7000497027000000000000000042514" data-uri="chapter04.xhtml#P7000497027000000000000000042514" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042515" data-uri="chapter04.xhtml#P7000497027000000000000000042515" class="calibre13 pcalibre pcalibre1">E, between Execute and Decode: includes the following, from left to right:</p>
<ul id="P7000497027000000000000000042516" data-uri="chapter04.xhtml#P7000497027000000000000000042516" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000042517" data-uri="chapter04.xhtml#P7000497027000000000000000042517" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042518" data-uri="chapter04.xhtml#P7000497027000000000000000042518" class="calibre13 pcalibre pcalibre1">Stat: from stat in D; output E_stat to stat in M</p></li>
<li id="P7000497027000000000000000042519" data-uri="chapter04.xhtml#P7000497027000000000000000042519" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004251A" data-uri="chapter04.xhtml#P700049702700000000000000004251A" class="calibre13 pcalibre pcalibre1">Icode: from icode in D to icode in M</p></li>
<li id="P700049702700000000000000004251B" data-uri="chapter04.xhtml#P700049702700000000000000004251B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004251C" data-uri="chapter04.xhtml#P700049702700000000000000004251C" class="calibre13 pcalibre pcalibre1">Ifun, from ifun in D</p></li>
<li id="P700049702700000000000000004251D" data-uri="chapter04.xhtml#P700049702700000000000000004251D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004251E" data-uri="chapter04.xhtml#P700049702700000000000000004251E" class="calibre13 pcalibre pcalibre1">valC, from valC in D; output ALU to ALU</p></li>
<li id="P700049702700000000000000004251F" data-uri="chapter04.xhtml#P700049702700000000000000004251F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042520" data-uri="chapter04.xhtml#P7000497027000000000000000042520" class="calibre13 pcalibre pcalibre1">valA: input from Select A, which receives input form valP and d_rvalA from Register file; output to ALU A and valA in pipeline M</p></li>
<li id="P7000497027000000000000000042521" data-uri="chapter04.xhtml#P7000497027000000000000000042521" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042522" data-uri="chapter04.xhtml#P7000497027000000000000000042522" class="calibre13 pcalibre pcalibre1">dstE: input dstE and output dstE to dstE in M, with input e_Cnd from CC from ALU</p></li>
<li id="P7000497027000000000000000042523" data-uri="chapter04.xhtml#P7000497027000000000000000042523" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042524" data-uri="chapter04.xhtml#P7000497027000000000000000042524" class="calibre13 pcalibre pcalibre1">dstM: input dstM and output dstM in M</p></li>
<li id="P7000497027000000000000000042525" data-uri="chapter04.xhtml#P7000497027000000000000000042525" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042526" data-uri="chapter04.xhtml#P7000497027000000000000000042526" class="calibre13 pcalibre pcalibre1">srcA, with input d_srcA from srcA</p></li>
<li id="P7000497027000000000000000042527" data-uri="chapter04.xhtml#P7000497027000000000000000042527" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042528" data-uri="chapter04.xhtml#P7000497027000000000000000042528" class="calibre13 pcalibre pcalibre1">srcB with input d_srcB from srcB</p></li>
</ul></li>
<li id="P7000497027000000000000000042529" data-uri="chapter04.xhtml#P7000497027000000000000000042529" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004252A" data-uri="chapter04.xhtml#P700049702700000000000000004252A" class="calibre13 pcalibre pcalibre1">M, between Memory and Execute: includes the following from left to right:</p>
<ul id="P700049702700000000000000004252B" data-uri="chapter04.xhtml#P700049702700000000000000004252B" class="calibre112 pcalibre pcalibre1">
<li id="P700049702700000000000000004252C" data-uri="chapter04.xhtml#P700049702700000000000000004252C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004252D" data-uri="chapter04.xhtml#P700049702700000000000000004252D" class="calibre13 pcalibre pcalibre1">Stat from stat in E with output M_stat to Stat, which has output m_stat in W</p></li>
<li id="P700049702700000000000000004252E" data-uri="chapter04.xhtml#P700049702700000000000000004252E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004252F" data-uri="chapter04.xhtml#P700049702700000000000000004252F" class="calibre13 pcalibre pcalibre1">Icode from E to W</p></li>
<li id="P7000497027000000000000000042530" data-uri="chapter04.xhtml#P7000497027000000000000000042530" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042531" data-uri="chapter04.xhtml#P7000497027000000000000000042531" class="calibre13 pcalibre pcalibre1">Cnd: input e_Cnd from CC, from ALU (input from ALU A, ALU B, and ALU fun.); output M_Cnd to Select PC</p></li>
<li id="P7000497027000000000000000042532" data-uri="chapter04.xhtml#P7000497027000000000000000042532" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042533" data-uri="chapter04.xhtml#P7000497027000000000000000042533" class="calibre13 pcalibre pcalibre1">valE: input from ALU; outputs Addr to Data memory and valE in W</p></li>
<li id="P7000497027000000000000000042534" data-uri="chapter04.xhtml#P7000497027000000000000000042534" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042535" data-uri="chapter04.xhtml#P7000497027000000000000000042535" class="calibre13 pcalibre pcalibre1">valA: input from valA in E; output data in to Data memory</p></li>
<li id="P7000497027000000000000000042536" data-uri="chapter04.xhtml#P7000497027000000000000000042536" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042537" data-uri="chapter04.xhtml#P7000497027000000000000000042537" class="calibre13 pcalibre pcalibre1">dstE: input from dstE, from dstE in E and e_Cnd from CC; output dstE in W</p></li>
<li id="P7000497027000000000000000042538" data-uri="chapter04.xhtml#P7000497027000000000000000042538" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042539" data-uri="chapter04.xhtml#P7000497027000000000000000042539" class="calibre13 pcalibre pcalibre1">dstM: from E to W</p></li>
</ul></li>
<li id="P700049702700000000000000004253A" data-uri="chapter04.xhtml#P700049702700000000000000004253A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004253B" data-uri="chapter04.xhtml#P700049702700000000000000004253B" class="calibre13 pcalibre pcalibre1">W, between Write back and Memory: includes the following from left to right:</p>
<ul id="P700049702700000000000000004253C" data-uri="chapter04.xhtml#P700049702700000000000000004253C" class="calibre112 pcalibre pcalibre1">
<li id="P700049702700000000000000004253D" data-uri="chapter04.xhtml#P700049702700000000000000004253D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004253E" data-uri="chapter04.xhtml#P700049702700000000000000004253E" class="calibre13 pcalibre pcalibre1">Stat: input m_stat from Stat, with input M_stat from M and dmem_error from Data memory; output W_stat to Stat in Write back</p></li>
<li id="P700049702700000000000000004253F" data-uri="chapter04.xhtml#P700049702700000000000000004253F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042540" data-uri="chapter04.xhtml#P7000497027000000000000000042540" class="calibre13 pcalibre pcalibre1">Icode from M</p></li>
<li id="P7000497027000000000000000042541" data-uri="chapter04.xhtml#P7000497027000000000000000042541" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042542" data-uri="chapter04.xhtml#P7000497027000000000000000042542" class="calibre13 pcalibre pcalibre1">valE: input from M; output W_valE to E in Register file</p></li>
<li id="P7000497027000000000000000042543" data-uri="chapter04.xhtml#P7000497027000000000000000042543" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042544" data-uri="chapter04.xhtml#P7000497027000000000000000042544" class="calibre13 pcalibre pcalibre1">valM: input data out from Data memory; output W_valM to M in Register file and to Select PC</p></li>
<li id="P7000497027000000000000000042545" data-uri="chapter04.xhtml#P7000497027000000000000000042545" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042546" data-uri="chapter04.xhtml#P7000497027000000000000000042546" class="calibre13 pcalibre pcalibre1">dstE from M</p></li>
<li id="P7000497027000000000000000042547" data-uri="chapter04.xhtml#P7000497027000000000000000042547" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042548" data-uri="chapter04.xhtml#P7000497027000000000000000042548" class="calibre13 pcalibre pcalibre1">dstM from M</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
</li>
<li id="P7000497027000000000000000042549" data-uri="chapter04.xhtml#P7000497027000000000000000042549" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004254A" data-uri="chapter04.xhtml#P700049702700000000000000004254A" class="calibre13 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004219" title="425" data-uri="chapter04.xhtml#P7000497027000000000000000004219" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">E </span>sits between the decode and execute stages. It holds information about the most recently decoded instruction and the values read from the register file for processing by the execute stage.</p></li>
<li id="P700049702700000000000000004254B" data-uri="chapter04.xhtml#P700049702700000000000000004254B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004254C" data-uri="chapter04.xhtml#P700049702700000000000000004254C" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">M </span>sits between the execute and memory stages. It holds the results of the most recently executed instruction for processing by the memory stage. It also holds information about branch conditions and branch targets for processing conditional jumps.</p></li>
<li id="P700049702700000000000000004254D" data-uri="chapter04.xhtml#P700049702700000000000000004254D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004254E" data-uri="chapter04.xhtml#P700049702700000000000000004254E" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">W </span>sits between the memory stage and the feedback paths that supply the computed results to the register file for writing and the return address to the PC selection logic when completing a <code id="P700049702700000000000000004254F" data-uri="chapter04.xhtml#P700049702700000000000000004254F" class="pcalibre1 calibre8 pcalibre">ret</code> instruction.</p></li>
</ul>

<p id="P7000497027000000000000000042550" data-uri="chapter04.xhtml#P7000497027000000000000000042550" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004224"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.42</span></a> shows how the following code sequence would flow through our five-stage pipeline, where the comments identify the instructions as <code id="P7000497027000000000000000042551" data-uri="chapter04.xhtml#P7000497027000000000000000042551" class="pcalibre1 calibre8 pcalibre">I1</code> to <code id="P7000497027000000000000000042552" data-uri="chapter04.xhtml#P7000497027000000000000000042552" class="pcalibre1 calibre8 pcalibre">I5</code> for reference:</p>
<pre id="P7000497027000000000000000042553" data-uri="chapter04.xhtml#P7000497027000000000000000042553" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042554" data-uri="chapter04.xhtml#P7000497027000000000000000042554" class="calibre10 pcalibre pcalibre1">1	irmovq	$1,%rax # I1
2	irmovq	$2,%rbx # I2
3	irmovq	$3,%rcx # I3
4	irmovq	$4,%rdx # I4
5	halt		#I5
</code>
</pre>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004224" data-uri="chapter04.xhtml#P7000497027000000000000000004224">
<img alt="A diagram illustrates instruction flow through a pipeline." id="P7000497027000000000000000042555" data-uri="P700049702700000000000000000B6EF" src="../images/p425-1.png" class="calibre140 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042556" data-uri="chapter04.xhtml#P7000497027000000000000000042556" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042557" data-uri="chapter04.xhtml#P7000497027000000000000000042557" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.42 </span>Example of instruction flow through pipeline.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022833" data-uri="chapter04.xhtml#P7000497027000000000000000022833">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042558" data-uri="chapter04.xhtml#P7000497027000000000000000042558" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline divided into cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042559" data-uri="chapter04.xhtml#P7000497027000000000000000042559">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004255A" data-uri="chapter04.xhtml#P700049702700000000000000004255A" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004255B" data-uri="chapter04.xhtml#P700049702700000000000000004255B" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004255C" data-uri="chapter04.xhtml#P700049702700000000000000004255C" class="calibre18 pcalibre pcalibre1"/>
<th id="P700049702700000000000000004255D" data-uri="chapter04.xhtml#P700049702700000000000000004255D" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P700049702700000000000000004255E" data-uri="chapter04.xhtml#P700049702700000000000000004255E" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P700049702700000000000000004255F" data-uri="chapter04.xhtml#P700049702700000000000000004255F" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042560" data-uri="chapter04.xhtml#P7000497027000000000000000042560" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042561" data-uri="chapter04.xhtml#P7000497027000000000000000042561" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042562" data-uri="chapter04.xhtml#P7000497027000000000000000042562" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042563" data-uri="chapter04.xhtml#P7000497027000000000000000042563" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P7000497027000000000000000042564" data-uri="chapter04.xhtml#P7000497027000000000000000042564" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P7000497027000000000000000042565" data-uri="chapter04.xhtml#P7000497027000000000000000042565" class="calibre18 pcalibre pcalibre1">9</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042566" data-uri="chapter04.xhtml#P7000497027000000000000000042566" class="calibre20 pcalibre pcalibre1">irmovq</td>
<td id="P7000497027000000000000000042567" data-uri="chapter04.xhtml#P7000497027000000000000000042567" class="calibre20 pcalibre pcalibre1">$1, %rax</td>
<td id="P7000497027000000000000000042568" data-uri="chapter04.xhtml#P7000497027000000000000000042568" class="calibre20 pcalibre pcalibre1">#I1</td>
<td id="P7000497027000000000000000042569" data-uri="chapter04.xhtml#P7000497027000000000000000042569" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004256A" data-uri="chapter04.xhtml#P700049702700000000000000004256A" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004256B" data-uri="chapter04.xhtml#P700049702700000000000000004256B" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004256C" data-uri="chapter04.xhtml#P700049702700000000000000004256C" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004256D" data-uri="chapter04.xhtml#P700049702700000000000000004256D" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004256E" data-uri="chapter04.xhtml#P700049702700000000000000004256E" class="calibre20 pcalibre pcalibre1">irmovq</td>
<td id="P700049702700000000000000004256F" data-uri="chapter04.xhtml#P700049702700000000000000004256F" class="calibre20 pcalibre pcalibre1">$2, %rbx</td>
<td id="P7000497027000000000000000042570" data-uri="chapter04.xhtml#P7000497027000000000000000042570" class="calibre20 pcalibre pcalibre1">#I2</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042571" data-uri="chapter04.xhtml#P7000497027000000000000000042571" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042572" data-uri="chapter04.xhtml#P7000497027000000000000000042572" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042573" data-uri="chapter04.xhtml#P7000497027000000000000000042573" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042574" data-uri="chapter04.xhtml#P7000497027000000000000000042574" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042575" data-uri="chapter04.xhtml#P7000497027000000000000000042575" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042576" data-uri="chapter04.xhtml#P7000497027000000000000000042576" class="calibre20 pcalibre pcalibre1">Irmovq</td>
<td id="P7000497027000000000000000042577" data-uri="chapter04.xhtml#P7000497027000000000000000042577" class="calibre20 pcalibre pcalibre1">$3, %rcx</td>
<td id="P7000497027000000000000000042578" data-uri="chapter04.xhtml#P7000497027000000000000000042578" class="calibre20 pcalibre pcalibre1">#I3</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042579" data-uri="chapter04.xhtml#P7000497027000000000000000042579" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004257A" data-uri="chapter04.xhtml#P700049702700000000000000004257A" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004257B" data-uri="chapter04.xhtml#P700049702700000000000000004257B" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004257C" data-uri="chapter04.xhtml#P700049702700000000000000004257C" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004257D" data-uri="chapter04.xhtml#P700049702700000000000000004257D" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004257E" data-uri="chapter04.xhtml#P700049702700000000000000004257E" class="calibre20 pcalibre pcalibre1">Irmovq</td>
<td id="P700049702700000000000000004257F" data-uri="chapter04.xhtml#P700049702700000000000000004257F" class="calibre20 pcalibre pcalibre1"> $4, %rdx</td>
<td id="P7000497027000000000000000042580" data-uri="chapter04.xhtml#P7000497027000000000000000042580" class="calibre20 pcalibre pcalibre1">#I4</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042581" data-uri="chapter04.xhtml#P7000497027000000000000000042581" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042582" data-uri="chapter04.xhtml#P7000497027000000000000000042582" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042583" data-uri="chapter04.xhtml#P7000497027000000000000000042583" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042584" data-uri="chapter04.xhtml#P7000497027000000000000000042584" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042585" data-uri="chapter04.xhtml#P7000497027000000000000000042585" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042586" data-uri="chapter04.xhtml#P7000497027000000000000000042586" class="calibre20 pcalibre pcalibre1">halt</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042587" data-uri="chapter04.xhtml#P7000497027000000000000000042587" class="calibre20 pcalibre pcalibre1">#I5</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042588" data-uri="chapter04.xhtml#P7000497027000000000000000042588" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042589" data-uri="chapter04.xhtml#P7000497027000000000000000042589" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004258A" data-uri="chapter04.xhtml#P700049702700000000000000004258A" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004258B" data-uri="chapter04.xhtml#P700049702700000000000000004258B" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004258C" data-uri="chapter04.xhtml#P700049702700000000000000004258C" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000004258D" data-uri="chapter04.xhtml#P700049702700000000000000004258D" class="pcalibre calibre3 pcalibre1">Cycle 5 is illustrated with W I1, MI2, EI3, DI4, and FI5.</p>
</details>
</figcaption>
</figure>
<p id="P700049702700000000000000004258E" data-uri="chapter04.xhtml#P700049702700000000000000004258E" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004229" title="426" data-uri="chapter04.xhtml#P7000497027000000000000000004229" epub:type="pagebreak"></span>The right side of the figure shows a pipeline diagram for this instruction sequence. As with the pipeline diagrams for the simple pipelined computation units of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004152.xhtml#P7000497027000000000000000004152"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.4</span></a>, this diagram shows the progression of each instruction through the pipeline stages, with time increasing from left to right. The numbers along the top identify the clock cycles at which the different stages occur. For example, in cycle 1, instruction <code id="P700049702700000000000000004258F" data-uri="chapter04.xhtml#P700049702700000000000000004258F" class="pcalibre1 calibre8 pcalibre">I1</code> is fetched, and it then proceeds through the pipeline stages, with its result being written to the register file after the end of cycle 5. Instruction <code id="P7000497027000000000000000042590" data-uri="chapter04.xhtml#P7000497027000000000000000042590" class="pcalibre1 calibre8 pcalibre">I2</code> is fetched in cycle 2, and its result is written back after the end of cycle 6, and so on. At the bottom, we show an expanded view of the pipeline for cycle 5. At this point, there is an instruction in each of the pipeline stages.</p>
<p id="P7000497027000000000000000042591" data-uri="chapter04.xhtml#P7000497027000000000000000042591" class="pcalibre1 pcalibre calibre2">From <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004224"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.42</span></a>, we can also justify our convention of drawing processors so that the instructions flow from bottom to top. The expanded view for cycle 5 shows the pipeline stages with the fetch stage on the bottom and the write-back stage on the top, just as do our diagrams of the pipeline hardware (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>). If we look at the ordering of instructions in the pipeline stages, we see that they appear in the same order as they do in the program listing. Since normal program flow goes from top to bottom of a listing, we preserve this ordering by having the pipeline flow go from bottom to top. This convention is particularly useful when working with the simulators that accompany this text.</p>
</section>
<section id="P700049702700000000000000000422D" data-uri="chapter04.xhtml#P700049702700000000000000000422D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042592" data-uri="chapter04.xhtml#P7000497027000000000000000042592" epub:type="title"><span class="pcalibre label pcalibre1">4.5.3 </span>Rearranging and Relabeling Signals</h1></header>
<p id="P7000497027000000000000000042593" data-uri="chapter04.xhtml#P7000497027000000000000000042593" class="pcalibre1 pcalibre calibre2">Our sequential implementations SEQ and SEQ+ only process one instruction at a time, and so there are unique values for signals such as valC, srcA, and valE. In our pipelined design, there will be multiple versions of these values associated with the different instructions flowing through the system. For example, in the detailed structure of PIPE—, there are four white boxes labeled "Stat" that hold the status codes for four different instructions (see <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>). We need to take great care to make sure we use the proper version of a signal, or else we could have serious errors, such as storing the result computed for one instruction at the destination register specified by another instruction. We adopt a naming scheme where a signal stored in a pipeline register can be uniquely identified by prefixing its name with that of the pipe register written in uppercase. For example, the four status codes are named D_stat, E_stat, M_stat, and W_stat. We also need to refer to some signals that have just been computed within a stage. These are labeled by prefixing the signal name with the first character of the stage name, written in lowercase. Using the status codes as examples, we can see control logic blocks labeled "Stat" in the fetch and memory stages. The outputs of these blocks are therefore named f_stat and m_stat. We can also see that the actual status of the overall processor Stat is computed by a block in the write-back stage, based on the status value in pipeline register W.</p>
<p id="P7000497027000000000000000042594" data-uri="chapter04.xhtml#P7000497027000000000000000042594" class="pcalibre1 pcalibre calibre2">The decode stages of SEQ+ and PIPE— both generate signals dstE and dstM indicating the destination register for values valE and valM. In SEQ+, we could connect these signals directly to the address inputs of the register file write ports. With PIPE-, these signals are carried along in the pipeline through the execute and memory stages and are directed to the register file only once they reach</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000004231" data-uri="chapter04.xhtml#P7000497027000000000000000004231"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000042595" data-uri="chapter04.xhtml#P7000497027000000000000000042595" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004233" title="427" data-uri="chapter04.xhtml#P7000497027000000000000000004233" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>What is the difference between signals M_stat and m_stat?</h1></header>
<p id="P7000497027000000000000000042596" data-uri="chapter04.xhtml#P7000497027000000000000000042596" class="calibre13 pcalibre pcalibre1">With our naming system, the uppercase prefixes `D', `E', `M', and `W refer to pipeline <i class="calibre5 pcalibre pcalibre1">registers</i>, and so M_stat refers to the status code field of pipeline register M. The lowercase prefixes `f', `d', `e', `m', and `w' refer to the pipeline <i class="calibre5 pcalibre pcalibre1">stages</i>, and so m_stat refers to the status signal generated in the memory stage by a control logic block.</p>
<p id="P7000497027000000000000000042597" data-uri="chapter04.xhtml#P7000497027000000000000000042597" class="pcalibre calibre3 pcalibre1">Understanding this naming convention is critical to understanding the operation of our pipelined processors.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042598" data-uri="chapter04.xhtml#P7000497027000000000000000042598">the write-back stage (shown in the more detailed views of the stages). We do this to make sure the write port address and data inputs hold values from the same instruction. Otherwise, the write back would be writing the values for the instruction in the write-back stage, but with register IDs from the instruction in the decode stage. As a general principle, we want to keep all of the information about a particular instruction contained within a single pipeline stage.</p>
<p id="P7000497027000000000000000042599" data-uri="chapter04.xhtml#P7000497027000000000000000042599" class="pcalibre1 pcalibre calibre2">One block of PIPE— that is not present in SEQ+ in the exact same form is the block labeled "Select A" in the decode stage. We can see that this block generates the value valA for the pipeline register E by choosing either valP from pipeline register D or the value read from the A port of the register file. This block is included to reduce the amount of state that must be carried forward to pipeline registers E and M. Of all the different instructions, only the <code id="P700049702700000000000000004259A" data-uri="chapter04.xhtml#P700049702700000000000000004259A" class="pcalibre1 calibre8 pcalibre">call</code> requires valP in the memory stage. Only the jump instructions require the value of valP in the execute stage (in the event the jump is not taken). None of these instructions requires a value read from the register file. Therefore, we can reduce the amount of pipeline register state by merging these two signals and carrying them through the pipeline as a single signal valA. This eliminates the need for the block labeled "Data" in SEQ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003FCB"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.23</span></a>) and SEQ+ (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.40</span></a>), which served a similar purpose. In hardware design, it is common to carefully identify how signals get used and then reduce the amount of register state and wiring by merging signals such as these.</p>
<p id="P700049702700000000000000004259B" data-uri="chapter04.xhtml#P700049702700000000000000004259B" class="pcalibre1 pcalibre calibre2">As shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>, our pipeline registers include a field for the status code stat, initially computed during the fetch stage and possibly modified during the memory stage. We will discuss how to implement the processing of exceptional events in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P700049702700000000000000000438D"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.6</span></a>, after we have covered the implementation of normal instruction execution. Suffice it to say at this point that the most systematic approach is to associate a status code with each instruction as it passes through the pipeline, as we have indicated in the figure.</p>
</section>
<section id="P700049702700000000000000000423A" data-uri="chapter04.xhtml#P700049702700000000000000000423A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004259C" data-uri="chapter04.xhtml#P700049702700000000000000004259C" epub:type="title"><span class="pcalibre label pcalibre1">4.5.4 </span>Next PC Prediction</h1></header>
<p id="P700049702700000000000000004259D" data-uri="chapter04.xhtml#P700049702700000000000000004259D" class="pcalibre1 pcalibre calibre2">We have taken some measures in the design of PIPE— to properly handle control dependencies. Our goal in the pipelined design is to <i class="calibre5 pcalibre pcalibre1">issue</i> a new instruction on every clock cycle, meaning that on each clock cycle, a new instruction proceeds into the execute stage and will ultimately be completed. Achieving this goal would</p>

<aside class="sidebar pcalibre5 pcalibre" id="P700049702700000000000000000423D" data-uri="chapter04.xhtml#P700049702700000000000000000423D"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P700049702700000000000000004259E" data-uri="chapter04.xhtml#P700049702700000000000000004259E" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000423F" title="428" data-uri="chapter04.xhtml#P700049702700000000000000000423F" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Other branch prediction strategies</h1></header>
<p id="P700049702700000000000000004259F" data-uri="chapter04.xhtml#P700049702700000000000000004259F" class="calibre13 pcalibre pcalibre1">Our design uses an <i class="calibre5 pcalibre pcalibre1">always taken</i> branch prediction strategy. Studies show this strategy has around a 60% success rate <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3FA">[44,</a> <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B499">122]</a>. Conversely, a <i class="calibre5 pcalibre pcalibre1">never taken</i> (NT) strategy has around a 40% success rate. A slightly more sophisticated strategy, known as <i class="calibre5 pcalibre pcalibre1">backward taken, forward not taken</i> (BTFNT), predicts that branches to lower addresses than the next instruction will be taken, while those to higher addresses will not be taken. This strategy has a success rate of around 65%. This improvement stems from the fact that loops are closed by backward branches and loops are generally executed multiple times. Forward branches are used for conditional operations, and these are less likely to be taken. In Problems 4.55 and 4.56, you can modify the Y86-64 pipeline processor to implement the NT and BTFNT branch prediction strategies.</p>
<p id="P70004970270000000000000000425A0" data-uri="chapter04.xhtml#P70004970270000000000000000425A0" class="pcalibre calibre3 pcalibre1">As we saw in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_000.xhtml#P7000497027000000000000000002578"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.6</span></a>, mispredicted branches can degrade the performance of a program considerably, thus motivating the use of conditional data transfer rather than conditional control transfer when possible.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000425A1" data-uri="chapter04.xhtml#P70004970270000000000000000425A1">yield a throughput of one instruction per cycle. To do this, we must determine the location of the next instruction right after fetching the current instruction. Unfortunately, if the fetched instruction is a conditional branch, we will not know whether or not the branch should be taken until several cycles later, after the instruction has passed through the execute stage. Similarly, if the fetched instruction is a ret, we cannot determine the return location until the instruction has passed through the memory stage.</p>
<p id="P70004970270000000000000000425A2" data-uri="chapter04.xhtml#P70004970270000000000000000425A2" class="pcalibre1 pcalibre calibre2">With the exception of conditional jump instructions and ret, we can determine the address of the next instruction based on information computed during the fetch stage. For <code id="P70004970270000000000000000425A3" data-uri="chapter04.xhtml#P70004970270000000000000000425A3" class="pcalibre1 calibre8 pcalibre">call</code> and <code id="P70004970270000000000000000425A4" data-uri="chapter04.xhtml#P70004970270000000000000000425A4" class="pcalibre1 calibre8 pcalibre">jmp</code> (unconditional jump), it will be valC, the constant word in the instruction, while for all others it will be valP, the address of the next instruction. We can therefore achieve our goal of issuing a new instruction every clock cycle in most cases by <i class="calibre5 pcalibre pcalibre1">predicting</i> the next value of the PC. For most instruction types, our prediction will be completely reliable. For conditional jumps, we can predict either that a jump will be taken, so that the new PC value would be valC, or that it will not be taken, so that the new PC value would be valP. In either case, we must somehow deal with the case where our prediction was incorrect and therefore we have fetched and partially executed the wrong instructions. We will return to this matter in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a>.</p>
<p id="P70004970270000000000000000425A5" data-uri="chapter04.xhtml#P70004970270000000000000000425A5" class="pcalibre1 pcalibre calibre2">This technique of guessing the branch direction and then initiating the fetching of instructions according to our guess is known as <i class="calibre5 pcalibre pcalibre1">branch prediction</i>. It is used in some form by virtually all processors. Extensive experiments have been conducted on effective strategies for predicting whether or not branches will be taken <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3FE">[46,</a> <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000CB3_split_000.xhtml#P7000497027000000000000000000CB3"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">2.3</span></a>]. Some systems devote large amounts of hardware to this task. In our design, we will use the simple strategy of predicting that conditional branches are always taken, and so we predict the new value of the PC to be valC.</p>
<p id="P70004970270000000000000000425A6" data-uri="chapter04.xhtml#P70004970270000000000000000425A6" class="pcalibre1 pcalibre calibre2">We are still left with predicting the new PC value resulting from a <code id="P70004970270000000000000000425A7" data-uri="chapter04.xhtml#P70004970270000000000000000425A7" class="pcalibre1 calibre8 pcalibre">ret</code> instruction. Unlike conditional jumps, we have a nearly unbounded set of possible</p>

<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000004249" data-uri="chapter04.xhtml#P7000497027000000000000000004249"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P70004970270000000000000000425A8" data-uri="chapter04.xhtml#P70004970270000000000000000425A8" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000424B" title="429" data-uri="chapter04.xhtml#P700049702700000000000000000424B" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>Return address prediction with a stack</h1></header>
<p id="P70004970270000000000000000425A9" data-uri="chapter04.xhtml#P70004970270000000000000000425A9" class="pcalibre calibre3 pcalibre1">With most programs, it is very easy to predict return addresses, since procedure calls and returns occur in matched pairs. Most of the time that a procedure is called, it returns to the instruction following the call. This property is exploited in high-performance processors by including a hardware stack within the instruction fetch unit that holds the return address generated by procedure call instructions. Every time a procedure call instruction is executed, its return address is pushed onto the stack. When a return instruction is fetched, the top value is popped from this stack and used as the predicted return address. Like branch prediction, a mechanism must be provided to recover when the prediction was incorrect, since there are times when calls and returns do not match. In general, the prediction is highly reliable. This hardware stack is not part of the programmer-visible state.</p>
</aside>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000425AA" data-uri="chapter04.xhtml#P70004970270000000000000000425AA">results, since the return address will be whatever word is on the top of the stack. In our design, we will not attempt to predict any value for the return address. Instead, we will simply hold off processing any more instructions until the <code id="P70004970270000000000000000425AB" data-uri="chapter04.xhtml#P70004970270000000000000000425AB" class="pcalibre1 calibre8 pcalibre">ret</code> instruction passes through the write-back stage. We will return to this part of the implementation in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a>.</p>
<p id="P70004970270000000000000000425AC" data-uri="chapter04.xhtml#P70004970270000000000000000425AC" class="pcalibre1 pcalibre calibre2">The PIPE— fetch stage, diagrammed at the bottom of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>, is responsible for both predicting the next value of the PC and selecting the actual PC for the instruction fetch. We can see the block labeled "Predict PC" can choose either valP (as computed by the PC incrementer) or valC (from the fetched instruction). This value is stored in pipeline register F as the <i class="calibre5 pcalibre pcalibre1">predicted</i> value of the program counter. The block labeled "Select PC" is similar to the block labeled "PC" in the SEQ+ PC selection stage (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004209"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.40</span></a>). It chooses one of three values to serve as the address for the instruction memory: the predicted PC, the value of valP for a not-taken branch instruction that reaches pipeline register M (stored in register M_valA), or the value of the return address when a <code id="P70004970270000000000000000425AD" data-uri="chapter04.xhtml#P70004970270000000000000000425AD" class="pcalibre1 calibre8 pcalibre">ret</code> instruction reaches pipeline register W (stored in W_valM).</p>
</section>
<section id="P7000497027000000000000000004251" data-uri="chapter04.xhtml#P7000497027000000000000000004251" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000425AE" data-uri="chapter04.xhtml#P70004970270000000000000000425AE" epub:type="title"><span class="pcalibre label pcalibre1">4.5.5 </span>Pipeline Hazards</h1></header>
<p id="P70004970270000000000000000425AF" data-uri="chapter04.xhtml#P70004970270000000000000000425AF" class="pcalibre1 pcalibre calibre2">Our structure PIPE— is a good start at creating a pipelined Y86-64 processor. Recall from our discussion in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041CB"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.4.4</span></a>, however, that introducing pipelining into a system with feedback can lead to problems when there are dependencies between successive instructions. We must resolve this issue before we can complete our design. These dependencies can take two forms: (1) <i class="calibre5 pcalibre pcalibre1">data</i> dependencies, where the results computed by one instruction are used as the data for a following instruction, and (2) <i class="calibre5 pcalibre pcalibre1">control</i> dependencies, where one instruction determines the location of the following instruction, such as when executing a jump, call, or return. When such dependencies have the potential to cause an erroneous computation by the pipeline, they are called <i class="calibre5 pcalibre pcalibre1">hazards</i>. Like dependencies, hazards can be classified as either <i class="calibre5 pcalibre pcalibre1">data hazards</i> or <i class="calibre5 pcalibre pcalibre1">control hazards</i>. We first concern ourselves with data hazards and then consider control hazards.</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004254" data-uri="chapter04.xhtml#P7000497027000000000000000004254">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004255" title="430" data-uri="chapter04.xhtml#P7000497027000000000000000004255" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipelined execution of prog1." id="P70004970270000000000000000425B0" data-uri="P700049702700000000000000000B6F0" src="../images/p430-1.png" class="calibre141 pcalibre pcalibre1"/>
<figcaption id="P70004970270000000000000000425B1" data-uri="chapter04.xhtml#P70004970270000000000000000425B1" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000425B2" data-uri="chapter04.xhtml#P70004970270000000000000000425B2" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.43 </span>Pipelined execution of <code id="P70004970270000000000000000425B3" data-uri="chapter04.xhtml#P70004970270000000000000000425B3" class="pcalibre1 calibre8 pcalibre">prog1</code> without special pipeline control.</h1></header>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000425B4" data-uri="chapter04.xhtml#P70004970270000000000000000425B4"><p id="P70004970270000000000000000425B5" data-uri="chapter04.xhtml#P70004970270000000000000000425B5" class="pcalibre1 pcalibre calibre2">In cycle 6, the second <code id="P70004970270000000000000000425B6" data-uri="chapter04.xhtml#P70004970270000000000000000425B6" class="pcalibre1 calibre8 pcalibre">irmovq</code> writes its result to program register <code id="P70004970270000000000000000425B7" data-uri="chapter04.xhtml#P70004970270000000000000000425B7" class="pcalibre1 calibre8 pcalibre">%rax</code>. The <code id="P70004970270000000000000000425B8" data-uri="chapter04.xhtml#P70004970270000000000000000425B8" class="pcalibre1 calibre8 pcalibre">addq</code> instruction reads its source operands in cycle 7, so it gets correct values for both <code id="P70004970270000000000000000425B9" data-uri="chapter04.xhtml#P70004970270000000000000000425B9" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P70004970270000000000000000425BA" data-uri="chapter04.xhtml#P70004970270000000000000000425BA" class="pcalibre1 calibre8 pcalibre">%rax</code>.</p><p id="P70004970270000000000000000425BB" data-uri="chapter04.xhtml#P70004970270000000000000000425BB" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000022897" data-uri="chapter04.xhtml#P7000497027000000000000000022897">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000425BC" data-uri="chapter04.xhtml#P70004970270000000000000000425BC" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P70004970270000000000000000425BD" data-uri="chapter04.xhtml#P70004970270000000000000000425BD">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000425BE" data-uri="chapter04.xhtml#P70004970270000000000000000425BE" class="calibre18 pcalibre pcalibre1">Prog1</th>
<th id="P70004970270000000000000000425BF" data-uri="chapter04.xhtml#P70004970270000000000000000425BF" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P70004970270000000000000000425C0" data-uri="chapter04.xhtml#P70004970270000000000000000425C0" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P70004970270000000000000000425C1" data-uri="chapter04.xhtml#P70004970270000000000000000425C1" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P70004970270000000000000000425C2" data-uri="chapter04.xhtml#P70004970270000000000000000425C2" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P70004970270000000000000000425C3" data-uri="chapter04.xhtml#P70004970270000000000000000425C3" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P70004970270000000000000000425C4" data-uri="chapter04.xhtml#P70004970270000000000000000425C4" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P70004970270000000000000000425C5" data-uri="chapter04.xhtml#P70004970270000000000000000425C5" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P70004970270000000000000000425C6" data-uri="chapter04.xhtml#P70004970270000000000000000425C6" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P70004970270000000000000000425C7" data-uri="chapter04.xhtml#P70004970270000000000000000425C7" class="calibre18 pcalibre pcalibre1">9</th>
<th id="P70004970270000000000000000425C8" data-uri="chapter04.xhtml#P70004970270000000000000000425C8" class="calibre18 pcalibre pcalibre1">10</th>
<th id="P70004970270000000000000000425C9" data-uri="chapter04.xhtml#P70004970270000000000000000425C9" class="calibre18 pcalibre pcalibre1">11</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425CA" data-uri="chapter04.xhtml#P70004970270000000000000000425CA" class="calibre20 pcalibre pcalibre1">0x000: irmovq $10, %rdx</td>
<td id="P70004970270000000000000000425CB" data-uri="chapter04.xhtml#P70004970270000000000000000425CB" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425CC" data-uri="chapter04.xhtml#P70004970270000000000000000425CC" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425CD" data-uri="chapter04.xhtml#P70004970270000000000000000425CD" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425CE" data-uri="chapter04.xhtml#P70004970270000000000000000425CE" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425CF" data-uri="chapter04.xhtml#P70004970270000000000000000425CF" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425D0" data-uri="chapter04.xhtml#P70004970270000000000000000425D0" class="calibre20 pcalibre pcalibre1">0x00a: irmovq $3, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425D1" data-uri="chapter04.xhtml#P70004970270000000000000000425D1" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425D2" data-uri="chapter04.xhtml#P70004970270000000000000000425D2" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425D3" data-uri="chapter04.xhtml#P70004970270000000000000000425D3" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425D4" data-uri="chapter04.xhtml#P70004970270000000000000000425D4" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425D5" data-uri="chapter04.xhtml#P70004970270000000000000000425D5" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425D6" data-uri="chapter04.xhtml#P70004970270000000000000000425D6" class="calibre20 pcalibre pcalibre1">0x014: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425D7" data-uri="chapter04.xhtml#P70004970270000000000000000425D7" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425D8" data-uri="chapter04.xhtml#P70004970270000000000000000425D8" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425D9" data-uri="chapter04.xhtml#P70004970270000000000000000425D9" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425DA" data-uri="chapter04.xhtml#P70004970270000000000000000425DA" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425DB" data-uri="chapter04.xhtml#P70004970270000000000000000425DB" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425DC" data-uri="chapter04.xhtml#P70004970270000000000000000425DC" class="calibre20 pcalibre pcalibre1">0x015: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425DD" data-uri="chapter04.xhtml#P70004970270000000000000000425DD" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425DE" data-uri="chapter04.xhtml#P70004970270000000000000000425DE" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425DF" data-uri="chapter04.xhtml#P70004970270000000000000000425DF" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425E0" data-uri="chapter04.xhtml#P70004970270000000000000000425E0" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425E1" data-uri="chapter04.xhtml#P70004970270000000000000000425E1" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425E2" data-uri="chapter04.xhtml#P70004970270000000000000000425E2" class="calibre20 pcalibre pcalibre1">0x016: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425E3" data-uri="chapter04.xhtml#P70004970270000000000000000425E3" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425E4" data-uri="chapter04.xhtml#P70004970270000000000000000425E4" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425E5" data-uri="chapter04.xhtml#P70004970270000000000000000425E5" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425E6" data-uri="chapter04.xhtml#P70004970270000000000000000425E6" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425E7" data-uri="chapter04.xhtml#P70004970270000000000000000425E7" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425E8" data-uri="chapter04.xhtml#P70004970270000000000000000425E8" class="calibre20 pcalibre pcalibre1">0x017: addq %rdx, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425E9" data-uri="chapter04.xhtml#P70004970270000000000000000425E9" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425EA" data-uri="chapter04.xhtml#P70004970270000000000000000425EA" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425EB" data-uri="chapter04.xhtml#P70004970270000000000000000425EB" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425EC" data-uri="chapter04.xhtml#P70004970270000000000000000425EC" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425ED" data-uri="chapter04.xhtml#P70004970270000000000000000425ED" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000425EE" data-uri="chapter04.xhtml#P70004970270000000000000000425EE" class="calibre20 pcalibre pcalibre1">0x019: halt</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000425EF" data-uri="chapter04.xhtml#P70004970270000000000000000425EF" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000425F0" data-uri="chapter04.xhtml#P70004970270000000000000000425F0" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000425F1" data-uri="chapter04.xhtml#P70004970270000000000000000425F1" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000425F2" data-uri="chapter04.xhtml#P70004970270000000000000000425F2" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000425F3" data-uri="chapter04.xhtml#P70004970270000000000000000425F3" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000425F4" data-uri="chapter04.xhtml#P70004970270000000000000000425F4" class="pcalibre calibre3 pcalibre1">Cycle 6 is illustrated with W R[%rax] ← 3. Cycle 7 is illustrated with D valA ← R[%rdx] = 10, valB ← R[%rax] = 3.</p>
</details>
</figcaption>
</figure>
<p id="P70004970270000000000000000425F5" data-uri="chapter04.xhtml#P70004970270000000000000000425F5" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004254"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.43</span></a> illustrates the processing of a sequence of instructions we refer to as <code id="P70004970270000000000000000425F6" data-uri="chapter04.xhtml#P70004970270000000000000000425F6" class="pcalibre1 calibre8 pcalibre">prog1</code> by the PIPE— processor. Let us assume in this example and successive ones that the program registers initially all have value 0. The code loads values 10 and 3 into program registers <code id="P70004970270000000000000000425F7" data-uri="chapter04.xhtml#P70004970270000000000000000425F7" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P70004970270000000000000000425F8" data-uri="chapter04.xhtml#P70004970270000000000000000425F8" class="pcalibre1 calibre8 pcalibre">%rax</code>, executes three <code id="P70004970270000000000000000425F9" data-uri="chapter04.xhtml#P70004970270000000000000000425F9" class="pcalibre1 calibre8 pcalibre">nop</code> instructions, and then adds register <code id="P70004970270000000000000000425FA" data-uri="chapter04.xhtml#P70004970270000000000000000425FA" class="pcalibre1 calibre8 pcalibre">%rdx</code> to <code id="P70004970270000000000000000425FB" data-uri="chapter04.xhtml#P70004970270000000000000000425FB" class="pcalibre1 calibre8 pcalibre">%rax</code>. We focus our attention on the potential data hazards resulting from the data dependencies between the two <code id="P70004970270000000000000000425FC" data-uri="chapter04.xhtml#P70004970270000000000000000425FC" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions and the <code id="P70004970270000000000000000425FD" data-uri="chapter04.xhtml#P70004970270000000000000000425FD" class="pcalibre1 calibre8 pcalibre">addq</code> instruction. On the right-hand side of the figure, we show a pipeline diagram for the instruction sequence. The pipeline stages for cycles 6 and 7 are shown highlighted in the pipeline diagram. Below this, we show an expanded view of the write-back activity in cycle 6 and the decode activity during cycle 7. After the start of cycle 7, both of the <code id="P70004970270000000000000000425FE" data-uri="chapter04.xhtml#P70004970270000000000000000425FE" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions have passed through the write back stage, and so the register file holds the updated values of <code id="P70004970270000000000000000425FF" data-uri="chapter04.xhtml#P70004970270000000000000000425FF" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000042600" data-uri="chapter04.xhtml#P7000497027000000000000000042600" class="pcalibre1 calibre8 pcalibre">%rax</code>. As the <code id="P7000497027000000000000000042601" data-uri="chapter04.xhtml#P7000497027000000000000000042601" class="pcalibre1 calibre8 pcalibre">addq</code> instruction passes through the decode stage during cycle 7, it will therefore read the correct values for its source operands. The data dependencies between the two <code id="P7000497027000000000000000042602" data-uri="chapter04.xhtml#P7000497027000000000000000042602" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions and the <code id="P7000497027000000000000000042603" data-uri="chapter04.xhtml#P7000497027000000000000000042603" class="pcalibre1 calibre8 pcalibre">addq</code> instruction have not created data hazards in this example.</p>
<p id="P7000497027000000000000000042604" data-uri="chapter04.xhtml#P7000497027000000000000000042604" class="pcalibre1 pcalibre calibre2">We saw that <code id="P7000497027000000000000000042605" data-uri="chapter04.xhtml#P7000497027000000000000000042605" class="pcalibre1 calibre8 pcalibre">prog1</code> will flow through our pipeline and get the correct results, because the three <code id="P7000497027000000000000000042606" data-uri="chapter04.xhtml#P7000497027000000000000000042606" class="pcalibre1 calibre8 pcalibre">nop</code> instructions create a delay between instructions with data</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004273" data-uri="chapter04.xhtml#P7000497027000000000000000004273">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004274" title="431" data-uri="chapter04.xhtml#P7000497027000000000000000004274" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipelined execution of prog2." id="P7000497027000000000000000042607" data-uri="P700049702700000000000000000B6F1" src="../images/p431-1.png" class="calibre142 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042608" data-uri="chapter04.xhtml#P7000497027000000000000000042608" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042609" data-uri="chapter04.xhtml#P7000497027000000000000000042609" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.44 </span>Pipelined execution of <code id="P700049702700000000000000004260A" data-uri="chapter04.xhtml#P700049702700000000000000004260A" class="pcalibre1 calibre8 pcalibre">prog2</code> without special pipeline control.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004260B" data-uri="chapter04.xhtml#P700049702700000000000000004260B"><p id="P700049702700000000000000004260C" data-uri="chapter04.xhtml#P700049702700000000000000004260C" class="pcalibre1 pcalibre calibre2">The write to program register <code id="P700049702700000000000000004260D" data-uri="chapter04.xhtml#P700049702700000000000000004260D" class="pcalibre1 calibre8 pcalibre">%rax</code> does not occur until the start of cycle 7, and so the <code id="P700049702700000000000000004260E" data-uri="chapter04.xhtml#P700049702700000000000000004260E" class="pcalibre1 calibre8 pcalibre">addq</code> instruction gets the incorrect value for this register in the decode stage.</p><p id="P700049702700000000000000004260F" data-uri="chapter04.xhtml#P700049702700000000000000004260F" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000228EB" data-uri="chapter04.xhtml#P70004970270000000000000000228EB">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042610" data-uri="chapter04.xhtml#P7000497027000000000000000042610" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042611" data-uri="chapter04.xhtml#P7000497027000000000000000042611">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042612" data-uri="chapter04.xhtml#P7000497027000000000000000042612" class="calibre18 pcalibre pcalibre1">Prog2</th>
<th id="P7000497027000000000000000042613" data-uri="chapter04.xhtml#P7000497027000000000000000042613" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000042614" data-uri="chapter04.xhtml#P7000497027000000000000000042614" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000042615" data-uri="chapter04.xhtml#P7000497027000000000000000042615" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042616" data-uri="chapter04.xhtml#P7000497027000000000000000042616" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042617" data-uri="chapter04.xhtml#P7000497027000000000000000042617" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042618" data-uri="chapter04.xhtml#P7000497027000000000000000042618" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042619" data-uri="chapter04.xhtml#P7000497027000000000000000042619" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P700049702700000000000000004261A" data-uri="chapter04.xhtml#P700049702700000000000000004261A" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P700049702700000000000000004261B" data-uri="chapter04.xhtml#P700049702700000000000000004261B" class="calibre18 pcalibre pcalibre1">9</th>
<th id="P700049702700000000000000004261C" data-uri="chapter04.xhtml#P700049702700000000000000004261C" class="calibre18 pcalibre pcalibre1">10</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004261D" data-uri="chapter04.xhtml#P700049702700000000000000004261D" class="calibre20 pcalibre pcalibre1">0x000: irmovq $10, %rdx</td>
<td id="P700049702700000000000000004261E" data-uri="chapter04.xhtml#P700049702700000000000000004261E" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004261F" data-uri="chapter04.xhtml#P700049702700000000000000004261F" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042620" data-uri="chapter04.xhtml#P7000497027000000000000000042620" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042621" data-uri="chapter04.xhtml#P7000497027000000000000000042621" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042622" data-uri="chapter04.xhtml#P7000497027000000000000000042622" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042623" data-uri="chapter04.xhtml#P7000497027000000000000000042623" class="calibre20 pcalibre pcalibre1">0x00a: irmovq $3, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042624" data-uri="chapter04.xhtml#P7000497027000000000000000042624" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042625" data-uri="chapter04.xhtml#P7000497027000000000000000042625" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042626" data-uri="chapter04.xhtml#P7000497027000000000000000042626" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042627" data-uri="chapter04.xhtml#P7000497027000000000000000042627" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042628" data-uri="chapter04.xhtml#P7000497027000000000000000042628" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042629" data-uri="chapter04.xhtml#P7000497027000000000000000042629" class="calibre20 pcalibre pcalibre1">0x014: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004262A" data-uri="chapter04.xhtml#P700049702700000000000000004262A" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004262B" data-uri="chapter04.xhtml#P700049702700000000000000004262B" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004262C" data-uri="chapter04.xhtml#P700049702700000000000000004262C" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004262D" data-uri="chapter04.xhtml#P700049702700000000000000004262D" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004262E" data-uri="chapter04.xhtml#P700049702700000000000000004262E" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004262F" data-uri="chapter04.xhtml#P700049702700000000000000004262F" class="calibre20 pcalibre pcalibre1">0x015: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042630" data-uri="chapter04.xhtml#P7000497027000000000000000042630" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042631" data-uri="chapter04.xhtml#P7000497027000000000000000042631" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042632" data-uri="chapter04.xhtml#P7000497027000000000000000042632" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042633" data-uri="chapter04.xhtml#P7000497027000000000000000042633" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042634" data-uri="chapter04.xhtml#P7000497027000000000000000042634" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042635" data-uri="chapter04.xhtml#P7000497027000000000000000042635" class="calibre20 pcalibre pcalibre1">0x016: addq %rdx, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042636" data-uri="chapter04.xhtml#P7000497027000000000000000042636" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042637" data-uri="chapter04.xhtml#P7000497027000000000000000042637" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042638" data-uri="chapter04.xhtml#P7000497027000000000000000042638" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042639" data-uri="chapter04.xhtml#P7000497027000000000000000042639" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004263A" data-uri="chapter04.xhtml#P700049702700000000000000004263A" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004263B" data-uri="chapter04.xhtml#P700049702700000000000000004263B" class="calibre20 pcalibre pcalibre1">0x018: halt </td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004263C" data-uri="chapter04.xhtml#P700049702700000000000000004263C" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004263D" data-uri="chapter04.xhtml#P700049702700000000000000004263D" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004263E" data-uri="chapter04.xhtml#P700049702700000000000000004263E" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004263F" data-uri="chapter04.xhtml#P700049702700000000000000004263F" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042640" data-uri="chapter04.xhtml#P7000497027000000000000000042640" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000042641" data-uri="chapter04.xhtml#P7000497027000000000000000042641" class="pcalibre calibre3 pcalibre1">Cycle 6 is illustrated with W R[%rax] ← 3 and D valA ← R[%rdx] = 10, valB ← R[%rax] = 0 (error).</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042642" data-uri="chapter04.xhtml#P7000497027000000000000000042642">dependencies. Let us see what happens as these <code id="P7000497027000000000000000042643" data-uri="chapter04.xhtml#P7000497027000000000000000042643" class="pcalibre1 calibre8 pcalibre">nop</code> instructions are removed. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004273"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.44</span></a> illustrates the pipeline flow of a program, named <code id="P7000497027000000000000000042644" data-uri="chapter04.xhtml#P7000497027000000000000000042644" class="pcalibre1 calibre8 pcalibre">prog2</code>, containing two <code id="P7000497027000000000000000042645" data-uri="chapter04.xhtml#P7000497027000000000000000042645" class="pcalibre1 calibre8 pcalibre">nop</code> instructions between the two <code id="P7000497027000000000000000042646" data-uri="chapter04.xhtml#P7000497027000000000000000042646" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions generating values for registers <code id="P7000497027000000000000000042647" data-uri="chapter04.xhtml#P7000497027000000000000000042647" class="pcalibre1 calibre8 pcalibre">%rdx</code> and <code id="P7000497027000000000000000042648" data-uri="chapter04.xhtml#P7000497027000000000000000042648" class="pcalibre1 calibre8 pcalibre">%rax</code> and the <code id="P7000497027000000000000000042649" data-uri="chapter04.xhtml#P7000497027000000000000000042649" class="pcalibre1 calibre8 pcalibre">addq</code> instruction having these two registers as operands. In this case, the crucial step occurs in cycle 6, when the <code id="P700049702700000000000000004264A" data-uri="chapter04.xhtml#P700049702700000000000000004264A" class="pcalibre1 calibre8 pcalibre">addq</code> instruction reads its operands from the register file. An expanded view of the pipeline activities during this cycle is shown at the bottom of the figure. The first <code id="P700049702700000000000000004264B" data-uri="chapter04.xhtml#P700049702700000000000000004264B" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction has passed through the write-back stage, and so program register <code id="P700049702700000000000000004264C" data-uri="chapter04.xhtml#P700049702700000000000000004264C" class="pcalibre1 calibre8 pcalibre">%rdx</code> has been updated in the register file. The second <code id="P700049702700000000000000004264D" data-uri="chapter04.xhtml#P700049702700000000000000004264D" class="pcalibre1 calibre8 pcalibre">irmovq</code> instruction is in the write-back stage during this cycle, and so the write to program register <code id="P700049702700000000000000004264E" data-uri="chapter04.xhtml#P700049702700000000000000004264E" class="pcalibre1 calibre8 pcalibre">%rax</code> only occurs at the start of cycle 7 as the clock rises. As a result, the incorrect value zero would be read for register <code id="P700049702700000000000000004264F" data-uri="chapter04.xhtml#P700049702700000000000000004264F" class="pcalibre1 calibre8 pcalibre">%rax</code> (recall that we assume all registers are initially zero), since the pending write for this register has not yet occurred. Clearly, we will have to adapt our pipeline to handle this hazard properly.</p>
<p id="P7000497027000000000000000042650" data-uri="chapter04.xhtml#P7000497027000000000000000042650" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004291"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.45</span></a> shows what happens when we have only one <code id="P7000497027000000000000000042651" data-uri="chapter04.xhtml#P7000497027000000000000000042651" class="pcalibre1 calibre8 pcalibre">nop</code> instruction between the <code id="P7000497027000000000000000042652" data-uri="chapter04.xhtml#P7000497027000000000000000042652" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions and the <code id="P7000497027000000000000000042653" data-uri="chapter04.xhtml#P7000497027000000000000000042653" class="pcalibre1 calibre8 pcalibre">addq</code> instruction, yielding a program <code id="P7000497027000000000000000042654" data-uri="chapter04.xhtml#P7000497027000000000000000042654" class="pcalibre1 calibre8 pcalibre">prog3</code>. Now we must examine the behavior of the pipeline during cycle 5 as the <code id="P7000497027000000000000000042655" data-uri="chapter04.xhtml#P7000497027000000000000000042655" class="pcalibre1 calibre8 pcalibre">addq</code> instruction passes through the decode stage. Unfortunately, the pending</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004291" data-uri="chapter04.xhtml#P7000497027000000000000000004291">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004292" title="432" data-uri="chapter04.xhtml#P7000497027000000000000000004292" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipelined execution of prog3." id="P7000497027000000000000000042656" data-uri="P700049702700000000000000000B6F2" src="../images/p432-1.png" class="calibre143 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042657" data-uri="chapter04.xhtml#P7000497027000000000000000042657" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042658" data-uri="chapter04.xhtml#P7000497027000000000000000042658" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.45 </span>Pipelined execution of <code id="P7000497027000000000000000042659" data-uri="chapter04.xhtml#P7000497027000000000000000042659" class="pcalibre1 calibre8 pcalibre">prog3</code> without special pipeline control.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004265A" data-uri="chapter04.xhtml#P700049702700000000000000004265A"><p id="P700049702700000000000000004265B" data-uri="chapter04.xhtml#P700049702700000000000000004265B" class="pcalibre1 pcalibre calibre2">In cycle 5, the <code id="P700049702700000000000000004265C" data-uri="chapter04.xhtml#P700049702700000000000000004265C" class="pcalibre1 calibre8 pcalibre">addq</code> instruction reads its source operands from the register file. The pending write to register <code id="P700049702700000000000000004265D" data-uri="chapter04.xhtml#P700049702700000000000000004265D" class="pcalibre1 calibre8 pcalibre">%rdx</code> is still in the write-back stage, and the pending write to register <code id="P700049702700000000000000004265E" data-uri="chapter04.xhtml#P700049702700000000000000004265E" class="pcalibre1 calibre8 pcalibre">%rax</code> is still in the memory stage. Both operands valA and valB get incorrect values.</p><p id="P700049702700000000000000004265F" data-uri="chapter04.xhtml#P700049702700000000000000004265F" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002293B" data-uri="chapter04.xhtml#P700049702700000000000000002293B">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042660" data-uri="chapter04.xhtml#P7000497027000000000000000042660" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000042661" data-uri="chapter04.xhtml#P7000497027000000000000000042661">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042662" data-uri="chapter04.xhtml#P7000497027000000000000000042662" class="calibre18 pcalibre pcalibre1">Prog3</th>
<th id="P7000497027000000000000000042663" data-uri="chapter04.xhtml#P7000497027000000000000000042663" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P7000497027000000000000000042664" data-uri="chapter04.xhtml#P7000497027000000000000000042664" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P7000497027000000000000000042665" data-uri="chapter04.xhtml#P7000497027000000000000000042665" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P7000497027000000000000000042666" data-uri="chapter04.xhtml#P7000497027000000000000000042666" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P7000497027000000000000000042667" data-uri="chapter04.xhtml#P7000497027000000000000000042667" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P7000497027000000000000000042668" data-uri="chapter04.xhtml#P7000497027000000000000000042668" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P7000497027000000000000000042669" data-uri="chapter04.xhtml#P7000497027000000000000000042669" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P700049702700000000000000004266A" data-uri="chapter04.xhtml#P700049702700000000000000004266A" class="calibre18 pcalibre pcalibre1">8</th>
<th id="P700049702700000000000000004266B" data-uri="chapter04.xhtml#P700049702700000000000000004266B" class="calibre18 pcalibre pcalibre1">9</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004266C" data-uri="chapter04.xhtml#P700049702700000000000000004266C" class="calibre20 pcalibre pcalibre1">0x000: irmovq $10, %rdx</td>
<td id="P700049702700000000000000004266D" data-uri="chapter04.xhtml#P700049702700000000000000004266D" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004266E" data-uri="chapter04.xhtml#P700049702700000000000000004266E" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004266F" data-uri="chapter04.xhtml#P700049702700000000000000004266F" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042670" data-uri="chapter04.xhtml#P7000497027000000000000000042670" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042671" data-uri="chapter04.xhtml#P7000497027000000000000000042671" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042672" data-uri="chapter04.xhtml#P7000497027000000000000000042672" class="calibre20 pcalibre pcalibre1">0x00a: irmovq $3, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042673" data-uri="chapter04.xhtml#P7000497027000000000000000042673" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042674" data-uri="chapter04.xhtml#P7000497027000000000000000042674" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042675" data-uri="chapter04.xhtml#P7000497027000000000000000042675" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042676" data-uri="chapter04.xhtml#P7000497027000000000000000042676" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042677" data-uri="chapter04.xhtml#P7000497027000000000000000042677" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042678" data-uri="chapter04.xhtml#P7000497027000000000000000042678" class="calibre20 pcalibre pcalibre1">0x014: nop</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042679" data-uri="chapter04.xhtml#P7000497027000000000000000042679" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P700049702700000000000000004267A" data-uri="chapter04.xhtml#P700049702700000000000000004267A" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P700049702700000000000000004267B" data-uri="chapter04.xhtml#P700049702700000000000000004267B" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P700049702700000000000000004267C" data-uri="chapter04.xhtml#P700049702700000000000000004267C" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P700049702700000000000000004267D" data-uri="chapter04.xhtml#P700049702700000000000000004267D" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004267E" data-uri="chapter04.xhtml#P700049702700000000000000004267E" class="calibre20 pcalibre pcalibre1">0x015: addq %rdx, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004267F" data-uri="chapter04.xhtml#P700049702700000000000000004267F" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042680" data-uri="chapter04.xhtml#P7000497027000000000000000042680" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042681" data-uri="chapter04.xhtml#P7000497027000000000000000042681" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042682" data-uri="chapter04.xhtml#P7000497027000000000000000042682" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042683" data-uri="chapter04.xhtml#P7000497027000000000000000042683" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042684" data-uri="chapter04.xhtml#P7000497027000000000000000042684" class="calibre20 pcalibre pcalibre1">0x017: halt</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042685" data-uri="chapter04.xhtml#P7000497027000000000000000042685" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P7000497027000000000000000042686" data-uri="chapter04.xhtml#P7000497027000000000000000042686" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P7000497027000000000000000042687" data-uri="chapter04.xhtml#P7000497027000000000000000042687" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P7000497027000000000000000042688" data-uri="chapter04.xhtml#P7000497027000000000000000042688" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P7000497027000000000000000042689" data-uri="chapter04.xhtml#P7000497027000000000000000042689" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P700049702700000000000000004268A" data-uri="chapter04.xhtml#P700049702700000000000000004268A" class="pcalibre calibre3 pcalibre1">Cycle 5 is illustrated with W R[%rdx] ← 10, M M_valE = 3, M_dstE = %rax, and D valA ← R[%rdx] = 0 (error), valB ← R[%rax] = 0 (error).</p>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000004268B" data-uri="chapter04.xhtml#P700049702700000000000000004268B">write to register <code id="P700049702700000000000000004268C" data-uri="chapter04.xhtml#P700049702700000000000000004268C" class="pcalibre1 calibre8 pcalibre">%rdx</code> is still in the write-back stage, and the pending write to <code id="P700049702700000000000000004268D" data-uri="chapter04.xhtml#P700049702700000000000000004268D" class="pcalibre1 calibre8 pcalibre">%rax</code> is still in the memory stage. Therefore, the <code id="P700049702700000000000000004268E" data-uri="chapter04.xhtml#P700049702700000000000000004268E" class="pcalibre1 calibre8 pcalibre">addq</code> instruction would get the incorrect values for both operands.</p>
<p id="P700049702700000000000000004268F" data-uri="chapter04.xhtml#P700049702700000000000000004268F" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000042AA"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.46</span></a> shows what happens when we remove all of the <code id="P7000497027000000000000000042690" data-uri="chapter04.xhtml#P7000497027000000000000000042690" class="pcalibre1 calibre8 pcalibre">nop</code> instructions between the <code id="P7000497027000000000000000042691" data-uri="chapter04.xhtml#P7000497027000000000000000042691" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions and the <code id="P7000497027000000000000000042692" data-uri="chapter04.xhtml#P7000497027000000000000000042692" class="pcalibre1 calibre8 pcalibre">addq</code> instruction, yielding a program <code id="P7000497027000000000000000042693" data-uri="chapter04.xhtml#P7000497027000000000000000042693" class="pcalibre1 calibre8 pcalibre">prog4</code>. Now we must examine the behavior of the pipeline during cycle 4 as the <code id="P7000497027000000000000000042694" data-uri="chapter04.xhtml#P7000497027000000000000000042694" class="pcalibre1 calibre8 pcalibre">addq</code> instruction passes through the decode stage. Unfortunately, the pending write to register <code id="P7000497027000000000000000042695" data-uri="chapter04.xhtml#P7000497027000000000000000042695" class="pcalibre1 calibre8 pcalibre">%rdx</code> is still in the memory stage, and the new value for <code id="P7000497027000000000000000042696" data-uri="chapter04.xhtml#P7000497027000000000000000042696" class="pcalibre1 calibre8 pcalibre">%rax</code> is just being computed in the execute stage. Therefore, the <code id="P7000497027000000000000000042697" data-uri="chapter04.xhtml#P7000497027000000000000000042697" class="pcalibre1 calibre8 pcalibre">addq</code> instruction would get the incorrect values for both operands.</p>
<p id="P7000497027000000000000000042698" data-uri="chapter04.xhtml#P7000497027000000000000000042698" class="pcalibre1 pcalibre calibre2">These examples illustrate that a data hazard can arise for an instruction when one of its operands is updated by any of the three preceding instructions. These hazards occur because our pipelined processor reads the operands for an instruction from the register file in the decode stage but does not write the results for the instruction to the register file until three cycles later, after the instruction passes through the write-back stage.</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000042AA" data-uri="chapter04.xhtml#P70004970270000000000000000042AA">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000042AB" title="433" data-uri="chapter04.xhtml#P70004970270000000000000000042AB" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipelined execution of prog4." id="P7000497027000000000000000042699" data-uri="P700049702700000000000000000B6F3" src="../images/p433-1.png" class="pcalibre calibre144 pcalibre1"/>
<figcaption id="P700049702700000000000000004269A" data-uri="chapter04.xhtml#P700049702700000000000000004269A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000004269B" data-uri="chapter04.xhtml#P700049702700000000000000004269B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.46 </span>Pipelined execution of <code id="P700049702700000000000000004269C" data-uri="chapter04.xhtml#P700049702700000000000000004269C" class="pcalibre1 calibre8 pcalibre">prog4</code> <b class="calibre4 pcalibre pcalibre1">without special pipeline control.</b></h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000004269D" data-uri="chapter04.xhtml#P700049702700000000000000004269D"><p id="P700049702700000000000000004269E" data-uri="chapter04.xhtml#P700049702700000000000000004269E" class="pcalibre1 pcalibre calibre2">In cycle 4, the <code id="P700049702700000000000000004269F" data-uri="chapter04.xhtml#P700049702700000000000000004269F" class="pcalibre1 calibre8 pcalibre">addq</code> instruction reads its source operands from the register file. The pending write to register <code id="P70004970270000000000000000426A0" data-uri="chapter04.xhtml#P70004970270000000000000000426A0" class="pcalibre1 calibre8 pcalibre">%rdx</code> is still in the memory stage, and the new value for register <code id="P70004970270000000000000000426A1" data-uri="chapter04.xhtml#P70004970270000000000000000426A1" class="pcalibre1 calibre8 pcalibre">%rax</code> is just being computed in the execute stage. Both operands valA and valB get incorrect values.</p><p id="P70004970270000000000000000426A2" data-uri="chapter04.xhtml#P70004970270000000000000000426A2" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002297E" data-uri="chapter04.xhtml#P700049702700000000000000002297E">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P70004970270000000000000000426A3" data-uri="chapter04.xhtml#P70004970270000000000000000426A3" class="pcalibre1 pcalibre calibre2">A diagram illustrates a pipeline with cycles, as summarized in the following table.</p>
<table class="pcalibre largetable pcalibre1" id="P70004970270000000000000000426A4" data-uri="chapter04.xhtml#P70004970270000000000000000426A4">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000426A5" data-uri="chapter04.xhtml#P70004970270000000000000000426A5" class="calibre18 pcalibre pcalibre1">Prog4</th>
<th id="P70004970270000000000000000426A6" data-uri="chapter04.xhtml#P70004970270000000000000000426A6" class="calibre18 pcalibre pcalibre1">1</th>
<th id="P70004970270000000000000000426A7" data-uri="chapter04.xhtml#P70004970270000000000000000426A7" class="calibre18 pcalibre pcalibre1">2</th>
<th id="P70004970270000000000000000426A8" data-uri="chapter04.xhtml#P70004970270000000000000000426A8" class="calibre18 pcalibre pcalibre1">3</th>
<th id="P70004970270000000000000000426A9" data-uri="chapter04.xhtml#P70004970270000000000000000426A9" class="calibre18 pcalibre pcalibre1">4</th>
<th id="P70004970270000000000000000426AA" data-uri="chapter04.xhtml#P70004970270000000000000000426AA" class="calibre18 pcalibre pcalibre1">5</th>
<th id="P70004970270000000000000000426AB" data-uri="chapter04.xhtml#P70004970270000000000000000426AB" class="calibre18 pcalibre pcalibre1">6</th>
<th id="P70004970270000000000000000426AC" data-uri="chapter04.xhtml#P70004970270000000000000000426AC" class="calibre18 pcalibre pcalibre1">7</th>
<th id="P70004970270000000000000000426AD" data-uri="chapter04.xhtml#P70004970270000000000000000426AD" class="calibre18 pcalibre pcalibre1">8</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000426AE" data-uri="chapter04.xhtml#P70004970270000000000000000426AE" class="calibre20 pcalibre pcalibre1">0x000: irmovq $10, %rdx</td>
<td id="P70004970270000000000000000426AF" data-uri="chapter04.xhtml#P70004970270000000000000000426AF" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000426B0" data-uri="chapter04.xhtml#P70004970270000000000000000426B0" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000426B1" data-uri="chapter04.xhtml#P70004970270000000000000000426B1" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000426B2" data-uri="chapter04.xhtml#P70004970270000000000000000426B2" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000426B3" data-uri="chapter04.xhtml#P70004970270000000000000000426B3" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000426B4" data-uri="chapter04.xhtml#P70004970270000000000000000426B4" class="calibre20 pcalibre pcalibre1">0x00a: irmovq $3, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000426B5" data-uri="chapter04.xhtml#P70004970270000000000000000426B5" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000426B6" data-uri="chapter04.xhtml#P70004970270000000000000000426B6" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000426B7" data-uri="chapter04.xhtml#P70004970270000000000000000426B7" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000426B8" data-uri="chapter04.xhtml#P70004970270000000000000000426B8" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000426B9" data-uri="chapter04.xhtml#P70004970270000000000000000426B9" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000426BA" data-uri="chapter04.xhtml#P70004970270000000000000000426BA" class="calibre20 pcalibre pcalibre1">0x014: addq %rdx, %rax</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000426BB" data-uri="chapter04.xhtml#P70004970270000000000000000426BB" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000426BC" data-uri="chapter04.xhtml#P70004970270000000000000000426BC" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000426BD" data-uri="chapter04.xhtml#P70004970270000000000000000426BD" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000426BE" data-uri="chapter04.xhtml#P70004970270000000000000000426BE" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000426BF" data-uri="chapter04.xhtml#P70004970270000000000000000426BF" class="calibre20 pcalibre pcalibre1">W</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000426C0" data-uri="chapter04.xhtml#P70004970270000000000000000426C0" class="calibre20 pcalibre pcalibre1">0x016: halt </td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000426C1" data-uri="chapter04.xhtml#P70004970270000000000000000426C1" class="calibre20 pcalibre pcalibre1">F</td>
<td id="P70004970270000000000000000426C2" data-uri="chapter04.xhtml#P70004970270000000000000000426C2" class="calibre20 pcalibre pcalibre1">D</td>
<td id="P70004970270000000000000000426C3" data-uri="chapter04.xhtml#P70004970270000000000000000426C3" class="calibre20 pcalibre pcalibre1">E</td>
<td id="P70004970270000000000000000426C4" data-uri="chapter04.xhtml#P70004970270000000000000000426C4" class="calibre20 pcalibre pcalibre1">M</td>
<td id="P70004970270000000000000000426C5" data-uri="chapter04.xhtml#P70004970270000000000000000426C5" class="calibre20 pcalibre pcalibre1">W</td>
</tr>
</tbody>
</table>
<p id="P70004970270000000000000000426C6" data-uri="chapter04.xhtml#P70004970270000000000000000426C6" class="pcalibre calibre3 pcalibre1">Cycle 4 is illustrated with M M_valE = 10, M_dstE = %rdx, E e_valE ← 0 + 3 = 3, E_dstE = %rax, and D valA ← R[%rdx] = 0 (error), valB ← R[%rax] = 0 (error).</p>
</details>
</figcaption>
</figure>
<section id="P70004970270000000000000000042B5" data-uri="chapter04.xhtml#P70004970270000000000000000042B5" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P70004970270000000000000000426C7" data-uri="chapter04.xhtml#P70004970270000000000000000426C7" epub:type="title">Avoiding Data Hazards by Stalling</h1></header>
<p id="P70004970270000000000000000426C8" data-uri="chapter04.xhtml#P70004970270000000000000000426C8" class="pcalibre1 pcalibre calibre2">One very general technique for avoiding hazards involves <i class="calibre5 pcalibre pcalibre1">stalling</i>, where the processor holds back one or more instructions in the pipeline until the hazard condition no longer holds. Our processor can avoid data hazards by holding back an instruction in the decode stage until the instructions generating its source operands have passed through the write-back stage. The details of this mechanism will be discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004435"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">4.5.8</span></a>. It involves simple enhancements to the pipeline control logic. The effect of stalling is diagrammed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P70004970270000000000000000042C2"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.47</span></a> (<code id="P70004970270000000000000000426C9" data-uri="chapter04.xhtml#P70004970270000000000000000426C9" class="pcalibre1 calibre8 pcalibre">prog2</code>) and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000042CF"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.48</span></a> (<code id="P70004970270000000000000000426CA" data-uri="chapter04.xhtml#P70004970270000000000000000426CA" class="pcalibre1 calibre8 pcalibre">prog4</code>). (We omit <code id="P70004970270000000000000000426CB" data-uri="chapter04.xhtml#P70004970270000000000000000426CB" class="pcalibre1 calibre8 pcalibre">prog3</code> from this discussion, since it operates similarly to the other two examples.) When the <code id="P70004970270000000000000000426CC" data-uri="chapter04.xhtml#P70004970270000000000000000426CC" class="pcalibre1 calibre8 pcalibre">addq</code> instruction is in the decode stage, the pipeline control logic detects that at least one of the instructions in the execute, memory, or write-back stage will update either register <code id="P70004970270000000000000000426CD" data-uri="chapter04.xhtml#P70004970270000000000000000426CD" class="pcalibre1 calibre8 pcalibre">%rdx</code> or register <code id="P70004970270000000000000000426CE" data-uri="chapter04.xhtml#P70004970270000000000000000426CE" class="pcalibre1 calibre8 pcalibre">%rax</code>. Rather than letting the <code id="P70004970270000000000000000426CF" data-uri="chapter04.xhtml#P70004970270000000000000000426CF" class="pcalibre1 calibre8 pcalibre">addq</code> instruction pass through the stage with the incorrect results, it stalls the instruction, holding it back in the decode stage for either one (for <code id="P70004970270000000000000000426D0" data-uri="chapter04.xhtml#P70004970270000000000000000426D0" class="pcalibre1 calibre8 pcalibre">prog2</code>) or three (for <code id="P70004970270000000000000000426D1" data-uri="chapter04.xhtml#P70004970270000000000000000426D1" class="pcalibre1 calibre8 pcalibre">prog4</code>) extra cycles. For all three programs, the <code id="P70004970270000000000000000426D2" data-uri="chapter04.xhtml#P70004970270000000000000000426D2" class="pcalibre1 calibre8 pcalibre">addq</code> instruction finally gets correct values for its two source operands in cycle 7 and then proceeds down the pipeline.</p>

<figure class="pcalibre5 figure pcalibre" id="P70004970270000000000000000042C2" data-uri="chapter04.xhtml#P70004970270000000000000000042C2">
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000042C3" title="434" data-uri="chapter04.xhtml#P70004970270000000000000000042C3" epub:type="pagebreak"></span><img alt="A diagram illustrates a pipelined execution of prog2 using stalls." id="P70004970270000000000000000426D3" data-uri="P700049702700000000000000000B6F4" src="../images/p434-1.png" class="pcalibre1 pcalibre calibre145"/>
</figure>
</section>
</section>
</section></body></html>
