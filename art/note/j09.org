* MVC 模式

** What is Java Swing? 

Java Swing is a lightweight Java graphical user interface (GUI) widget
toolkit that includes a rich set of widgets. It is part of the Java
Foundation Classes (JFC) and includes several packages for developing
rich desktop applications in Java. Swing provides a rich set of
widgets and packages to make sophisticated GUI components for Java
applications. Swing is a Java Foundation Classes [JFC] library and an
extension of the Abstract Window Toolkit *[AWT]*. Swing offers
much-improved functionality over AWT, new components, expanded
components features, and excellent event handling with drag-and-drop
support.

不同平台上 AWT 用户有不同的 Bug. Swing 使用纯 Java 实现. 不再依赖于本
地平台的图形界面

** What is the advantages of Java Swing?

Some of the key advantages of Java Swing are:

- Platform Independence: Swing is written entirely in Java, which
  makes it platform-independent. It can run on any platform that
  supports Java, without any modification1.

- Lightweight: Swing components are lightweight and can be easily
  customized2.

- Pluggable Look and Feel: Swing provides a pluggable look and feel
  that allows developers to change the appearance of their
  applications without changing the code2.

- Rich Set of Components: Swing provides a rich set of components such
  as text boxes, buttons, split panes, and tables3.

- Event Handling: Swing provides excellent event handling with
  drag-and-drop support4.

reference: 
1. [[https://www.prepbytes.com/blog/java/introduction-to-java-swing/]]
2. [[https://www.geeksforgeeks.org/introduction-to-java-swing/]]
3. [[https://devdojo.com/anvesh_kumar/the-battle-of-javafx-vs-java-swing-which-one-is-best-for-you]]

** What is MVC pattern? 

*MVC* (*Model-View-Controller*) is a pattern in software design commonly
used to implement user interfaces, data, and controlling logic1. It
emphasizes a separation between the software’s business logic and
display _1_. This “separation of concerns” provides for a better division
of labor and improved maintenance _1_. The pattern divides an interactive
application into three components _2_:

1. Model: The model represents the data and business logic of the
   application. 

   It represents the data and business rules that govern how the data
   is stored, processed, and manipulated. The model component is
   responsible for retrieving data from a database or other data
   source, processing that data, and storing it back in the
   database. It also contains the application’s business logic, which
   defines how the data should be processed. The model component is
   independent of both the view and controller components. This means
   that changes to the view or controller components do not affect the
   model component.

2. View: The view represents the user interface of the application.


3. Controller: The controller acts as an intermediary between the
   model and view components.  

   It receives input from the user and updates both the model and view
   components. The controller component is responsible for
   interpreting user input and determining how that input should be
   processed. It then updates the model component with any changes
   that need to be made. Finally, it updates the view component to
   reflect any changes that have been made to the model component.

The model component manages the data and business logic of the
application _3_. The view component displays the data to the user
_3_. The controller component receives input from the user and updates
both the model and view components _3_.

reference: 
1. [[https://developer.mozilla.org/en-US/docs/Glossary/MVC]]
2. [[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]]
3. [[https://www.tutorialspoint.com/design_pattern/mvc_pattern.htm]]

Users interactive with the *controller* to take input and receive
messages from the *view*. While *controller* passes the input to the
*Model*, then the model manipulate with the data and returns
value. Then the *controller* pass the data to *View* to renew the
display content.

** What is component and container in Swing?

In Swing, a *container* is a component that holds other components1. It
provides a space where a component can be located and aids with
grouping related components together in the GUI2. A container is
responsible for displaying the components according to your
layout1. If a button is placed on the top left corner, every time the
window is resized, the button will still be on the top left corner1.

reference:
1. [[https://stackoverflow.com/questions/700314/what-is-the-use-of-container-in-swing]]
2. [[https://www.tutorialspoint.com/swing/swing_containers.htm]]


In Swing, a *component* can be defined as a control that can be
represented visually and is usually independent _1_. It has got a
specific functionality and is represented as an individual class in
Swing API _1_. Swing has a wide range of various components, including
buttons, check boxes, sliders, and list boxes _2_. For example, class
JButton in swing API is a button component and provides the
functionality of a button _1_.

reference: 
1. [[https://www.softwaretestinghelp.com/java/java-swing-tutorial/]]
2. [[https://zetcode.com/javaswing/basicswingcomponents/]]

** Heavyweight and Lightweight

In Java Swing, a *component* is an independent visual control that can
be added to a *container* and manipulated separately from other
components. Swing components are derived from the JComponent class and
provide functionality that is common to all components.

A *container* is a component that can hold other components inside
it. 

Swing supports two types of containers: heavyweight and lightweight
containers. Heavyweight containers are implemented by the operating
system’s windowing toolkit and are used for top-level containers such
as JFrame and JDialog. Lightweight containers are implemented
entirely in Java and are used for intermediate-level containers such
as JPanel.



* Swing 图形处理, 绘制颜色的原理

* 事件机制

* Swing 基本用户组件