<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>9.11 Common Memory-Related Bugs in C Programs</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000075E8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000460F2" data-uri="chapter09.xhtml#P70004970270000000000000000460F2" epub:type="title"><span class="pcalibre label pcalibre1">9.11 </span>Common Memory-Related Bugs in C Programs</h1></header>
<p id="P70004970270000000000000000460F3" data-uri="chapter09.xhtml#P70004970270000000000000000460F3" class="pcalibre1 pcalibre calibre2">Managing and using virtual memory can be a difficult and error-prone task for C programmers. Memory-related bugs are among the most frightening because they often manifest themselves at a distance, in both time and space, from the source of the bug. Write the wrong data to the wrong location, and your program can run for hours before it finally fails in some distant part of the program. We conclude our discussion of virtual memory with a look at of some of the common memory-related bugs.</p>
<section id="P70004970270000000000000000075EB" data-uri="chapter09.xhtml#P70004970270000000000000000075EB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000460F4" data-uri="chapter09.xhtml#P70004970270000000000000000460F4" epub:type="title"><span class="pcalibre label pcalibre1">9.11.1 </span>Dereferencing Bad Pointers</h1></header>
<p id="P70004970270000000000000000460F5" data-uri="chapter09.xhtml#P70004970270000000000000000460F5" class="pcalibre1 pcalibre calibre2">As we learned in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007216.xhtml#P7000497027000000000000000007269"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">9.7.2</span></a>, there are large holes in the virtual address space of a process that are not mapped to any meaningful data. If we attempt to dereference a pointer into one of these holes, the operating system will terminate our program with a segmentation exception. Also, some areas of virtual memory are read-only. Attempting to write to one of these areas terminates the program with a protection exception.</p>
<p id="P70004970270000000000000000460F6" data-uri="chapter09.xhtml#P70004970270000000000000000460F6" class="pcalibre1 pcalibre calibre2">A common example of dereferencing a bad pointer is the classic <code id="P70004970270000000000000000460F7" data-uri="chapter09.xhtml#P70004970270000000000000000460F7" class="pcalibre1 calibre8 pcalibre">scanf</code> bug. Suppose we want to use <code id="P70004970270000000000000000460F8" data-uri="chapter09.xhtml#P70004970270000000000000000460F8" class="pcalibre1 calibre8 pcalibre">scanf</code> to read an integer from <code id="P70004970270000000000000000460F9" data-uri="chapter09.xhtml#P70004970270000000000000000460F9" class="pcalibre1 calibre8 pcalibre">stdin</code> into a variable. The correct way to do this is to pass <code id="P70004970270000000000000000460FA" data-uri="chapter09.xhtml#P70004970270000000000000000460FA" class="pcalibre1 calibre8 pcalibre">scanf</code> a format string and the <i class="calibre5 pcalibre pcalibre1">address</i> of the variable:</p>
<pre id="P70004970270000000000000000460FB" data-uri="chapter09.xhtml#P70004970270000000000000000460FB" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000460FC" data-uri="chapter09.xhtml#P70004970270000000000000000460FC" class="calibre10 pcalibre pcalibre1">
scanf ("%d", &amp;val)
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P70004970270000000000000000460FD" data-uri="chapter09.xhtml#P70004970270000000000000000460FD">However, it is easy for new C programmers (and experienced ones too!) to pass the <i class="calibre5 pcalibre pcalibre1">contents</i> of <code id="P70004970270000000000000000460FE" data-uri="chapter09.xhtml#P70004970270000000000000000460FE" class="pcalibre1 calibre8 pcalibre">val</code> instead of its address:</p>
<pre id="P70004970270000000000000000460FF" data-uri="chapter09.xhtml#P70004970270000000000000000460FF" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046100" data-uri="chapter09.xhtml#P7000497027000000000000000046100" class="calibre10 pcalibre pcalibre1">
scanf ("%d", val)
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046101" data-uri="chapter09.xhtml#P7000497027000000000000000046101"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000075FA" title="871" data-uri="chapter09.xhtml#P70004970270000000000000000075FA" epub:type="pagebreak"></span>In this case, <code id="P7000497027000000000000000046102" data-uri="chapter09.xhtml#P7000497027000000000000000046102" class="pcalibre1 calibre8 pcalibre">scanf</code> will interpret the contents of <code id="P7000497027000000000000000046103" data-uri="chapter09.xhtml#P7000497027000000000000000046103" class="pcalibre1 calibre8 pcalibre">val</code> as an address and attempt to write a word to that location. In the best case, the program terminates immediately with an exception. In the worst case, the contents of <code id="P7000497027000000000000000046104" data-uri="chapter09.xhtml#P7000497027000000000000000046104" class="pcalibre1 calibre8 pcalibre">val</code> correspond to some valid read/write area of virtual memory, and we overwrite memory, usually with disastrous and baffling consequences much later.</p>
</section>
<section id="P70004970270000000000000000075FE" data-uri="chapter09.xhtml#P70004970270000000000000000075FE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046105" data-uri="chapter09.xhtml#P7000497027000000000000000046105" epub:type="title"><span class="pcalibre label pcalibre1">9.11.2 </span>Reading Uninitialized Memory</h1></header>
<p id="P7000497027000000000000000046106" data-uri="chapter09.xhtml#P7000497027000000000000000046106" class="pcalibre1 pcalibre calibre2">While bss memory locations (such as uninitialized global C variables) are always initialized to zeros by the loader, this is not true for heap memory. A common error is to assume that heap memory is initialized to zero:</p>
<pre id="P7000497027000000000000000046107" data-uri="chapter09.xhtml#P7000497027000000000000000046107" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046108" data-uri="chapter09.xhtml#P7000497027000000000000000046108" class="calibre10 pcalibre pcalibre1">
1	/* Return y = Ax */
2	int *matvec(int **A, int *x, int n)
3	{
4		int i, j;
5	
6		int *y = (int *)Malloc(n * sizeof(int));
7	
8		for (i = 0; i &lt; n; i++)
9			for (j = 0; j &lt; n; j++)
10				y[i] += A[i] [j] * x[j];
11		return y;
12	}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046109" data-uri="chapter09.xhtml#P7000497027000000000000000046109">In this example, the programmer has incorrectly assumed that vector <code id="P700049702700000000000000004610A" data-uri="chapter09.xhtml#P700049702700000000000000004610A" class="pcalibre1 calibre8 pcalibre">y</code> has been initialized to zero. A correct implementation would explicitly zero <code id="P700049702700000000000000004610B" data-uri="chapter09.xhtml#P700049702700000000000000004610B" class="pcalibre1 calibre8 pcalibre">y[i]</code> or use <code id="P700049702700000000000000004610C" data-uri="chapter09.xhtml#P700049702700000000000000004610C" class="pcalibre1 calibre8 pcalibre">calloc</code>.</p>
</section>
<section id="P7000497027000000000000000007607" data-uri="chapter09.xhtml#P7000497027000000000000000007607" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004610D" data-uri="chapter09.xhtml#P700049702700000000000000004610D" epub:type="title"><span class="pcalibre label pcalibre1">9.11.3 </span>Allowing Stack Buffer Overflows</h1></header>
<p id="P700049702700000000000000004610E" data-uri="chapter09.xhtml#P700049702700000000000000004610E" class="pcalibre1 pcalibre calibre2">As we saw in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002185.xhtml#P7000497027000000000000000002185"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.10.3</span></a>, a program has a <i class="calibre5 pcalibre pcalibre1">buffer overflow bug</i> if it writes to a target buffer on the stack without examining the size of the input string. For example, the following function has a buffer overflow bug because the <code id="P700049702700000000000000004610F" data-uri="chapter09.xhtml#P700049702700000000000000004610F" class="pcalibre1 calibre8 pcalibre">gets</code> function copies an arbitrary-length string to the buffer. To fix this, we would need to use the <code id="P7000497027000000000000000046110" data-uri="chapter09.xhtml#P7000497027000000000000000046110" class="pcalibre1 calibre8 pcalibre">fgets</code> function, which limits the size of the input string.</p>
<pre id="P7000497027000000000000000046111" data-uri="chapter09.xhtml#P7000497027000000000000000046111" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046112" data-uri="chapter09.xhtml#P7000497027000000000000000046112" class="calibre10 pcalibre pcalibre1">
1	void bufoverflow()
2	{
3		char buf [64];
4	
5		gets(buf); /* Here is the stack buffer overflow bug */
6		return;
7	}
</code></pre>
</section>
<section id="P700049702700000000000000000760E" data-uri="chapter09.xhtml#P700049702700000000000000000760E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046113" data-uri="chapter09.xhtml#P7000497027000000000000000046113" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007610" title="872" data-uri="chapter09.xhtml#P7000497027000000000000000007610" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">9.11.4 </span>Assuming That Pointers and the Objects They Point to Are the Same Size</h1></header>
<p id="P7000497027000000000000000046114" data-uri="chapter09.xhtml#P7000497027000000000000000046114" class="pcalibre1 pcalibre calibre2">One common mistake is to assume that pointers to objects are the same size as the objects they point to:</p>
<pre id="P7000497027000000000000000046115" data-uri="chapter09.xhtml#P7000497027000000000000000046115" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046116" data-uri="chapter09.xhtml#P7000497027000000000000000046116" class="calibre10 pcalibre pcalibre1">
1	/* Create an nxm array */
2	int **makeArray1(int n, int m)
3	{
4		int i;
5		int **A = (int **)Malloc(n * sizeof(int));
6	
7		for (i = 0; i &lt; n; i++)
8			A[i] = (int *)Malloc(m * sizeof(int));
9		return A;
10	}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046117" data-uri="chapter09.xhtml#P7000497027000000000000000046117">The intent here is to create an array of <var class="calibre5 pcalibre pcalibre1">n</var> pointers, each of which points to an array of <var class="calibre5 pcalibre pcalibre1">m</var> <code id="P7000497027000000000000000046118" data-uri="chapter09.xhtml#P7000497027000000000000000046118" class="pcalibre1 calibre8 pcalibre">ints</code>. However, because the programmer has written <code id="P7000497027000000000000000046119" data-uri="chapter09.xhtml#P7000497027000000000000000046119" class="pcalibre1 calibre8 pcalibre">sizeof (int)</code> instead of <code id="P700049702700000000000000004611A" data-uri="chapter09.xhtml#P700049702700000000000000004611A" class="pcalibre1 calibre8 pcalibre">sizeof (int *)</code> in line 5, the code actually creates an array of <code id="P700049702700000000000000004611B" data-uri="chapter09.xhtml#P700049702700000000000000004611B" class="pcalibre1 calibre8 pcalibre">ints</code>.</p>
<p id="P700049702700000000000000004611C" data-uri="chapter09.xhtml#P700049702700000000000000004611C" class="pcalibre1 pcalibre calibre2">This code will run fine on machines where <code id="P700049702700000000000000004611D" data-uri="chapter09.xhtml#P700049702700000000000000004611D" class="pcalibre1 calibre8 pcalibre">ints</code> and pointers to <code id="P700049702700000000000000004611E" data-uri="chapter09.xhtml#P700049702700000000000000004611E" class="pcalibre1 calibre8 pcalibre">ints</code> are the same size. But if we run this code on a machine like the Core i7, where a pointer is larger than an <code id="P700049702700000000000000004611F" data-uri="chapter09.xhtml#P700049702700000000000000004611F" class="pcalibre1 calibre8 pcalibre">int</code>, then the loop in lines 7–8 will write past the end of the A array. Since one of these words will likely be the boundary-tag footer of the allocated block, we may not discover the error until we free the block much later in the program, at which point the coalescing code in the allocator will fail dramatically and for no apparent reason. This is an insidious example of the kind of "action at a distance" that is so typical of memory-related programming bugs.</p>
</section>
<section id="P700049702700000000000000000761D" data-uri="chapter09.xhtml#P700049702700000000000000000761D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046120" data-uri="chapter09.xhtml#P7000497027000000000000000046120" epub:type="title"><span class="pcalibre label pcalibre1">9.11.5 </span>Making Off-by-One Errors</h1></header>
<p id="P7000497027000000000000000046121" data-uri="chapter09.xhtml#P7000497027000000000000000046121" class="pcalibre1 pcalibre calibre2">Off-by-one errors are another common source of overwriting bugs:</p>
<pre id="P7000497027000000000000000046122" data-uri="chapter09.xhtml#P7000497027000000000000000046122" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046123" data-uri="chapter09.xhtml#P7000497027000000000000000046123" class="calibre10 pcalibre pcalibre1">
1	/* Create an nxm array */
2	int **makeArray2(int n, int m)
3	{
4		int i;
5		int **A = (int **)Malloc(n * sizeof(int *));
6	
7		for (i = 0; i &lt;= n; i++)
8			A[i] = (int *)Malloc(m * sizeof(int));
9		return A;
10	}
</code></pre>
<p id="P7000497027000000000000000046124" data-uri="chapter09.xhtml#P7000497027000000000000000046124" class="pcalibre1 pcalibre calibre2">This is another version of the program in the previous section. Here we have created an <var class="calibre5 pcalibre pcalibre1">n</var>-element array of pointers in line 5 but then tried to initialize <var class="calibre5 pcalibre pcalibre1">n</var> + 1 of its elements in lines 7 and 8, in the process overwriting some memory that follows the A array.</p>
</section>
<section id="P7000497027000000000000000007623" data-uri="chapter09.xhtml#P7000497027000000000000000007623" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046125" data-uri="chapter09.xhtml#P7000497027000000000000000046125" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007625" title="873" data-uri="chapter09.xhtml#P7000497027000000000000000007625" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">9.11.6 </span>Referencing a Pointer Instead of the Object It Points To</h1></header>
<p id="P7000497027000000000000000046126" data-uri="chapter09.xhtml#P7000497027000000000000000046126" class="pcalibre1 pcalibre calibre2">If we are not careful about the precedence and associativity of C operators, then we incorrectly manipulate a pointer instead of the object it points to. For example, consider the following function, whose purpose is to remove the first item in a binary heap of <code id="P7000497027000000000000000046127" data-uri="chapter09.xhtml#P7000497027000000000000000046127" class="pcalibre1 calibre8 pcalibre">*size</code> items and then reheapify the remaining <code id="P7000497027000000000000000046128" data-uri="chapter09.xhtml#P7000497027000000000000000046128" class="pcalibre1 calibre8 pcalibre">*size</code> - 1 items:</p>
<pre id="P7000497027000000000000000046129" data-uri="chapter09.xhtml#P7000497027000000000000000046129" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004612A" data-uri="chapter09.xhtml#P700049702700000000000000004612A" class="calibre10 pcalibre pcalibre1">
1	int *binheapDelete(int **binheap, int *size)
2	{
3		int *packet = binheap[0];
4	
5		binheap [0] = binheap [*size - 1];
6		*size--; /* This should be (*size)-- */
7		heapify(binheap, *size, 0);
8		return(packet);
9	}
</code></pre>
<p id="P700049702700000000000000004612B" data-uri="chapter09.xhtml#P700049702700000000000000004612B" class="pcalibre1 pcalibre calibre2">In line 6, the intent is to decrement the integer value pointed to by the size pointer. However, because the unary -- and * operators have the same precedence and associate from right to left, the code in line 6 actually decrements the pointer itself instead of the integer value that it points to. If we are lucky, the program will crash immediately. But more likely we will be left scratching our heads when the program produces an incorrect answer much later in its execution. The moral here is to use parentheses whenever in doubt about precedence and associativity. For example, in line 6, we should have clearly stated our intent by using the expression (<code id="P700049702700000000000000004612C" data-uri="chapter09.xhtml#P700049702700000000000000004612C" class="pcalibre1 calibre8 pcalibre">*size</code>)--.</p>
</section>
<section id="P700049702700000000000000000762D" data-uri="chapter09.xhtml#P700049702700000000000000000762D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004612D" data-uri="chapter09.xhtml#P700049702700000000000000004612D" epub:type="title"><span class="pcalibre label pcalibre1">9.11.7 </span>Misunderstanding Pointer Arithmetic</h1></header>
<p id="P700049702700000000000000004612E" data-uri="chapter09.xhtml#P700049702700000000000000004612E" class="pcalibre1 pcalibre calibre2">Another common mistake is to forget that arithmetic operations on pointers are performed in units that are the size of the objects they point to, which are not necessarily bytes. For example, the intent of the following function is to scan an array of <code id="P700049702700000000000000004612F" data-uri="chapter09.xhtml#P700049702700000000000000004612F" class="pcalibre1 calibre8 pcalibre">ints</code> and return a pointer to the first occurrence of <code id="P7000497027000000000000000046130" data-uri="chapter09.xhtml#P7000497027000000000000000046130" class="pcalibre1 calibre8 pcalibre">val</code>:</p>
<pre id="P7000497027000000000000000046131" data-uri="chapter09.xhtml#P7000497027000000000000000046131" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046132" data-uri="chapter09.xhtml#P7000497027000000000000000046132" class="calibre10 pcalibre pcalibre1">
1	int *search(int *p, int val)
2	{
3		while (*p &amp;&amp; *p != val)
4			p += sizeof(int); /* Should be p++ */
5		return p;
6	}
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000046133" data-uri="chapter09.xhtml#P7000497027000000000000000046133">However, because line 4 increments the pointer by 4 (the number of bytes in an integer) each time through the loop, the function incorrectly scans every fourth integer in the array.</p>
</section>
<section id="P7000497027000000000000000007635" data-uri="chapter09.xhtml#P7000497027000000000000000007635" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046134" data-uri="chapter09.xhtml#P7000497027000000000000000046134" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000007637" title="874" data-uri="chapter09.xhtml#P7000497027000000000000000007637" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">9.11.8 </span>Referencing Nonexistent Variables</h1></header>
<p id="P7000497027000000000000000046135" data-uri="chapter09.xhtml#P7000497027000000000000000046135" class="pcalibre1 pcalibre calibre2">Naive C programmers who do not understand the stack discipline will sometimes reference local variables that are no longer valid, as in the following example:</p>
<pre id="P7000497027000000000000000046136" data-uri="chapter09.xhtml#P7000497027000000000000000046136" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046137" data-uri="chapter09.xhtml#P7000497027000000000000000046137" class="calibre10 pcalibre pcalibre1">
1	int *stackref ()
2	{
3		int val;
4	
5		return &amp;val;
6	}
</code></pre>
<p id="P7000497027000000000000000046138" data-uri="chapter09.xhtml#P7000497027000000000000000046138" class="pcalibre1 pcalibre calibre2">This function returns a pointer (say, p) to a local variable on the stack and then pops its stack frame. Although <code id="P7000497027000000000000000046139" data-uri="chapter09.xhtml#P7000497027000000000000000046139" class="pcalibre1 calibre8 pcalibre">p</code> still points to a valid memory address, it no longer points to a valid variable. When other functions are called later in the program, the memory will be reused for their stack frames. Later, if the program assigns some value to <code id="P700049702700000000000000004613A" data-uri="chapter09.xhtml#P700049702700000000000000004613A" class="pcalibre1 calibre8 pcalibre">*p</code>, then it might actually be modifying an entry in another function's stack frame, with potentially disastrous and baffling consequences.</p>
</section>
<section id="P700049702700000000000000000763E" data-uri="chapter09.xhtml#P700049702700000000000000000763E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004613B" data-uri="chapter09.xhtml#P700049702700000000000000004613B" epub:type="title"><span class="pcalibre label pcalibre1">9.11.9 </span>Referencing Data in Free Heap Blocks</h1></header>
<p id="P700049702700000000000000004613C" data-uri="chapter09.xhtml#P700049702700000000000000004613C" class="pcalibre1 pcalibre calibre2">A similar error is to reference data in heap blocks that have already been freed. Consider the following example, which allocates an integer array <code id="P700049702700000000000000004613D" data-uri="chapter09.xhtml#P700049702700000000000000004613D" class="pcalibre1 calibre8 pcalibre">x</code> in line 6, prematurely frees block <code id="P700049702700000000000000004613E" data-uri="chapter09.xhtml#P700049702700000000000000004613E" class="pcalibre1 calibre8 pcalibre">x</code> in line 10, and then later references it in line 14:</p>
<pre id="P700049702700000000000000004613F" data-uri="chapter09.xhtml#P700049702700000000000000004613F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000046140" data-uri="chapter09.xhtml#P7000497027000000000000000046140" class="calibre10 pcalibre pcalibre1">
1	int *heapref(int n, int m)
2	{
3		int i;
4		int *x, *y;
5	
6		x = (int *)Malloc(n * sizeof(int));
7	
8		⋮ // <i class="calibre5 pcalibre pcalibre1">Other calls to malloc and free go here</i>
9	
10		free(x); 11
12		y = (int *)Malloc(m * sizeof(int));
13		for (i = 0; i &lt; m; i++)
14			y[i] = x[i]++; /* Oops! x[i] is a word in a free block */
15	
16		return y;
17	}
</code></pre>
<p id="P7000497027000000000000000046141" data-uri="chapter09.xhtml#P7000497027000000000000000046141" class="pcalibre1 pcalibre calibre2">Depending on the pattern of <code id="P7000497027000000000000000046142" data-uri="chapter09.xhtml#P7000497027000000000000000046142" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P7000497027000000000000000046143" data-uri="chapter09.xhtml#P7000497027000000000000000046143" class="pcalibre1 calibre8 pcalibre">fre</code>e calls that occur between lines 6 and 10, when the program references <code id="P7000497027000000000000000046144" data-uri="chapter09.xhtml#P7000497027000000000000000046144" class="pcalibre1 calibre8 pcalibre">x[i]</code> in line 14, the array <code id="P7000497027000000000000000046145" data-uri="chapter09.xhtml#P7000497027000000000000000046145" class="pcalibre1 calibre8 pcalibre">x</code> might be part of some other allocated heap block and may have been overwritten. As with many <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000764A" title="875" data-uri="chapter09.xhtml#P700049702700000000000000000764A" epub:type="pagebreak"></span>memory-related bugs, the error will only become evident later in the program when we notice that the values in <code id="P7000497027000000000000000046146" data-uri="chapter09.xhtml#P7000497027000000000000000046146" class="pcalibre1 calibre8 pcalibre">y</code> are corrupted.</p>
</section>
<section id="P700049702700000000000000000764C" data-uri="chapter09.xhtml#P700049702700000000000000000764C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000046147" data-uri="chapter09.xhtml#P7000497027000000000000000046147" epub:type="title"><span class="pcalibre label pcalibre1">9.11.10 </span>Introducing Memory Leaks</h1></header>
<p id="P7000497027000000000000000046148" data-uri="chapter09.xhtml#P7000497027000000000000000046148" class="pcalibre1 pcalibre calibre2">Memory leaks are slow, silent killers that occur when programmers inadvertently create garbage in the heap by forgetting to free allocated blocks. For example, the following function allocates a heap block <code id="P7000497027000000000000000046149" data-uri="chapter09.xhtml#P7000497027000000000000000046149" class="pcalibre1 calibre8 pcalibre">x</code> and then returns without freeing it:</p>
<pre id="P700049702700000000000000004614A" data-uri="chapter09.xhtml#P700049702700000000000000004614A" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000004614B" data-uri="chapter09.xhtml#P700049702700000000000000004614B" class="calibre10 pcalibre pcalibre1">
1	void leak(int n)
2	{
3		int *x = (int *)Malloc(n * sizeof(int));
4	
5		return; /* x is garbage at this point */
6	}
</code></pre>
<p id="P700049702700000000000000004614C" data-uri="chapter09.xhtml#P700049702700000000000000004614C" class="pcalibre1 pcalibre calibre2">If <code id="P700049702700000000000000004614D" data-uri="chapter09.xhtml#P700049702700000000000000004614D" class="pcalibre1 calibre8 pcalibre">leak</code> is called frequently, then the heap will gradually fill up with garbage, in the worst case consuming the entire virtual address space. Memory leaks are particularly serious for programs such as daemons and servers, which by definition never terminate.</p>
</section>
</section></body></html>
