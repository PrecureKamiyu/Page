#+TITLE: SICP: a book for new bie
you need to note that the note here is only for a temporary note for myself, the individual, but not for the readers (note the plural here).

* Python Version 

- Note taken on [2023-06-22 Thu 22:47] \\
  I shall not divide the chapter. I think that is very useless.
- Note taken on [2023-06-22 Thu 22:46] \\
  Python Version is from [[https:composingprograms.com][Composing Programs]]. And the basic structure is very similar but there is no exercise but four labs.

** Building Abstraction with Functions

The chapter is about functions.

Quote: A language isn't something you learn s omuch as something you join.

One may not get it. It says that mastering the grammar of a language does not make you the master of the language.

Note on 1.1.3 interactive controls: it won't work on emacs shell

The example on Shakespeare is not that good. You should note that.

*Evaluation and Executation*: the two concepts are what you should notice.
And the two purposes are what we should notice too, that are 1. compute some value and carry out some action. 

The section tells about the *Object*. You can just pass it.

The discussion about debugging is very useful (at the first sight). Ok, I admit, it is useless.

End of section one. Section one is easy.

Python use /infix/ notation. that is to say the operator is placed between the operands. for example (1 - 1). There is also prefix notation. Scheme use prefix notation. For example (- 1 1).

#+begin_example
max (7.5 , 9.5)
#+end_example

The operator specifies a function. When this call expression is evaluated, we say that the function max is /called/ with /arguments/ 7.5 and 9.5, and /returns/ a value of 9.5.

the concepts of *call, argument, and return value* are very important.

importing library is not necessary right now. But it is the feature of python. you should know it. But you should try learning it.

Because you should import some operators that will be used for future. Anyway, this is the exact way to make python be of more features of scheme.

In scheme you write + as
#+begin_example
(+ 1 2)
#+end_example
the value should be 3. The nested expression could be very intoleratable for scheme.

Names are called identifier (maybe). "Name" should be enough. The value is actually /binded/ to name. That is, you write name, the interpreter find the value based on the name.

The environment is something important too.

#+begin_example
x , y = 3, 4.5
#+end_example

the expression above is something not interesting, but many languages do not have the feature (of course, there are some other languages do have the feature).

To evaluate a call expression, Python will do the following:

1. Evaluate the operator and operand subexpressions, then
2. Apply the function that is the value of the operator subexpression to the arguments that are the values of the operand subexpressions.

The word "recursive" appeared for the first time. And evaluating an expression needs to know something like the information about the language and parse tree and the context-free grammar. OK, I have forgotten about the terminologies there (I mean the context-free grammar or something). 

The expression tree can be called parse tree, too.

Execution and evaluation: For example
#+begin_example
>>> x = 3
#+end_example
the statement is not evaluated but executed. Although in scheme, the interpreter will still return a value (that is ~x~ itself).

this is an example of assignment statement, which is different from expression. It actually do something and does not have a value. (And of course expression has a value) You can not just print the value of the assignment expressions
#+begin_example
print(x = 3)
#+end_example
is not valid here.


If you use scheme, the difference between pure function and non-pure function will be more clear. The interpreter of scheme must print the return value of the S-expression, so it will definitely print the return value of the display function (that is the ~print~ function in scheme).

when you read the section 1.3, you should import the function (the operators) like ~mul~ and ~add~ in the previous chapter.

When you are in the shell using python3, you should be careful about the indent.


What the fuck is intrinsic name and bound name.
There is difference between the two: different names may refer the smae functio, but that function itself has only one intrinsic name. 

For example, when you define a function, like an add_one function:
#+begin_example
def add_one (x):
    return x+1
#+end_example
and you just get a function. Intrinsic name is the name to name the function. The bound name is the name that is bounded to the functions.

For  example, I enter the next prompt
#+begin_example
another_add_one = add_one
#+end_example
that is to say ~another_add_one~ is the bound name. I shall print some results here:
#+begin_example
>>> def add_one (x):
...  return x + 1
... 
>>> another_add_one = add_one
>>> another_add_one
<function add_one at 0x7fcc49ff6820>
>>> add_one
<function add_one at 0x7fcc49ff6820>
>>> 
#+end_example

You can see that the ~add_one~ is the intrinsic name. When I call the interpreter to print the information of ~my_add_one~, it prints 
#+begin_example
<function add_one at 0x7fcc49ff6820>
#+end_example
as well. Very cool.

Evaluation:
To evaluate a call expression whose operator names a user-defined
function, the Python interpreter follows a computational process.
As with any call expression, the interpreter evaluates the operator
and operand expressions, and then applies the named function to
the resulting arguments.



And you should know what is frame now.  It is an important concept as well

Local name. It is cool that you don't understand the concept when you are programming. But when you are about to write an interpreter, the concept is inevitable.

The book should just note the definition of the local name with the mark  ~Def~, just like that in the mathematics textbook.

Here is where the concept of the scope is used:  

Critically, this is not the case: the binding for x in different
local frames are unrelated. The model of computation is carefully designed to
ensure this independence.

We say that the /scope/ of a local name is limited to the body of the user-defined
function that defines it. When a name is no longer accessible, it is out of scope.
This scoping behavior isn't a new fact about our model; it is a consequence of
the way environments work.


The elements of a function here: the domain, the range and the intent.
What the fuck is indent? Never heard of it before.

The section of the operators is simple. But about the operators, you should know that there is something you should notice: that is the relation between an operator and an function for example like: ~+~ and ~add~. 
And it  is also important that the approach that evaluation uses is very important.

And you should now be familiar with the terminology of evaluation.

section 1.4 Designing functions

First it tells about what a good function looks like.

Docstring is slightly different from the comments. Cool.

Define a function when defining a function is a way to keep the global frame clean. The function inside of a function is called closures. Or just local function.





* Original Version (Scheme Version)



