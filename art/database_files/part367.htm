<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>20.2  Centralized Database Systems</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part366.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part368.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">20.2  <span style=" color: #00AEEF;">Centralized Database Systems</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Centralized database systems are those that run on a single computer system. Such database systems span a range from single-user database systems running on mobile devices or personal computers to high-performance database systems running on a server with multiple <span class="s44">CPU </span>cores and disks and a large amount of main memory that can be accessed by any of the <span class="s44">CPU </span>cores. Centralized database systems are widely used for enterprise-scale applications.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We distinguish two ways in which computers are used: as single-user systems and as multiuser systems. Smartphones and personal computers fall into the ﬁrst category. A typical <span class="s63">single-user system </span>is a system used by a single person, usually with only one processor (usually with multiple cores), and one or two disks.<span class="s76">1</span> A typical <span class="s63">multiuser system</span>, on the other hand, has multiple disks, a large amount of memory, and multiple processors. Such systems serve a large number of users who are connected to the system remotely, and they are called <span class="s63">server systems</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Database systems designed for single-user systems usually do not provide many of the facilities that a multiuser database provides. In particular, they may support very simple concurrency control schemes, since highly concurrent access to the database is very unlikely. Provisions for crash recovery in such systems may also be either very basic (e.g., making a copy of data before updating it), or even absent in some cases. Such systems may not support <span class="s44">SQL </span>and may instead provide an <span class="s44">API </span>for data access. Such database systems are referred to as <span class="s63">embedded databases</span>, since they are usually designed to be linked to a single application program and are accessible only from that application.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">In contrast, multiuser database systems support the full transactional features that we have studied earlier. Such databases are usually designed as <span class="s63">servers</span>, which service requests received from application programs; the requests could be in the form of <span class="s44">SQL </span>queries, or they could be requests for retrieving, storing, or updating data speciﬁed using an <span class="s44">API</span>.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most general-purpose computer systems in use today have a few multicore proces- sors (typically one to four), with each multicore processor having a few cores (typically</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_3093.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">1<span class="s78">Recall that we use the term </span><span class="s111">disk </span><span class="s80">to refer to hard disks as well as solid-state drives.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: right;"><a name="bookmark452">4 to 8). Main memory is shared across all the processors. Parallelism with such a small number of cores, and with shared memory, is referred to as </a><span class="s63">coarse-grained parallelism</span>. Operating systems that run on single-processor systems support multitasking, al- lowing multiple processes to run on the same processor in a time-shared manner. Ac- tions of diﬀerent processes may thus be interleaved. Databases designed for single- processor machines have long been designed to allow multiple processes or threads to access shared database structures concurrently. Thus, many of the issues in han- dling multiple processes running truly in parallel, such as concurrent access to data, are already addressed by databases designed for single-processor machines. As a result, database systems designed for time-shared single-processor machines could be adapted<a name="bookmark499">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">relatively easily to run on coarse-grained parallel systems.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Databases running on coarse-grained parallel machines traditionally did not at- tempt to partition a single query among the processors; instead, they ran each query on a single processor, allowing multiple queries to run concurrently. Thus, such sys- tems support a higher throughput; that is, they allow a greater number of transactions to run per second, although individual transactions do not run any faster. In recent years, with even mobile phones supporting multiple cores, such systems are evolving to support parallel processing of individual queries.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In contrast, machines with <span class="s63">fine-grained parallelism </span>have a large number of proces- sors, and database systems running on such machines attempt to parallelize single tasks (queries, for example) submitted by users.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Parallelism has emerged as a critical issue in the design of software systems in gen- eral, and in particular in the design of database systems. As a result, parallel database systems, which once were specialized systems running on specially designed hardware, are increasingly becoming the norm. We study the architecture of parallel database systems in Section 20.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part366.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part368.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
