<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>7.9 Loading Executable Object Files</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000006385" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000044B28" data-uri="chapter07.xhtml#P7000497027000000000000000044B28" epub:type="title"><span class="pcalibre label pcalibre1">7.9 </span>Loading Executable Object Files</h1></header>
<p id="P7000497027000000000000000044B29" data-uri="chapter07.xhtml#P7000497027000000000000000044B29" class="pcalibre1 pcalibre calibre2">To run an executable object file <code id="P7000497027000000000000000044B2A" data-uri="chapter07.xhtml#P7000497027000000000000000044B2A" class="pcalibre1 calibre8 pcalibre">prog</code>, we can type its name to the Linux shell's command line:</p>
<pre id="P7000497027000000000000000044B2B" data-uri="chapter07.xhtml#P7000497027000000000000000044B2B" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000044B2C" data-uri="chapter07.xhtml#P7000497027000000000000000044B2C" class="calibre10 pcalibre pcalibre1">linux&gt; <i class="calibre5 pcalibre pcalibre1">./prog</i></code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044B2D" data-uri="chapter07.xhtml#P7000497027000000000000000044B2D">Since <code id="P7000497027000000000000000044B2E" data-uri="chapter07.xhtml#P7000497027000000000000000044B2E" class="pcalibre1 calibre8 pcalibre">prog</code> does not correspond to a built-in shell command, the shell assumes that <code id="P7000497027000000000000000044B2F" data-uri="chapter07.xhtml#P7000497027000000000000000044B2F" class="pcalibre1 calibre8 pcalibre">prog</code> is an executable object file, which it runs for us by invoking some memory-resident operating system code known as the <code id="P7000497027000000000000000044B30" data-uri="chapter07.xhtml#P7000497027000000000000000044B30" class="pcalibre1 calibre8 pcalibre">loader</code>. Any Linux program can invoke the loader by calling the <code id="P7000497027000000000000000044B31" data-uri="chapter07.xhtml#P7000497027000000000000000044B31" class="pcalibre1 calibre8 pcalibre">execve</code> function, which we will describe in detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000685D.xhtml#P70004970270000000000000000069EF"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">8.4.6</span></a>. The loader copies the code and data in the executable object file from disk into memory and then runs the program by jumping to its first instruction, or <i class="calibre5 pcalibre pcalibre1">entry point</i>. This process of copying the program into memory and then running it is known as <i class="calibre5 pcalibre pcalibre1">loading</i>.</p>
<p id="P7000497027000000000000000044B32" data-uri="chapter07.xhtml#P7000497027000000000000000044B32" class="pcalibre1 pcalibre calibre2">Every running Linux program has a run-time memory image similar to the one in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006397"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.15</span></a>. On Linux x86-64 systems, the code segment starts at address <code id="P7000497027000000000000000044B33" data-uri="chapter07.xhtml#P7000497027000000000000000044B33" class="pcalibre1 calibre8 pcalibre">0x400000</code>, followed by the data segment. The run-time <i class="calibre5 pcalibre pcalibre1">heap</i> follows the data segment and grows upward via calls to the <code id="P7000497027000000000000000044B34" data-uri="chapter07.xhtml#P7000497027000000000000000044B34" class="pcalibre1 calibre8 pcalibre">malloc</code> library.(We will describe <code id="P7000497027000000000000000044B35" data-uri="chapter07.xhtml#P7000497027000000000000000044B35" class="pcalibre1 calibre8 pcalibre">malloc</code> and the heap in detail in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000733C.xhtml#P700049702700000000000000000733C"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">9.9</span></a>.) This is followed by a region that is reserved for shared modules. The user stack starts below the largest legal user address (2<sup class="calibre51 pcalibre pcalibre1">48</sup> - 1) and grows down, toward smaller memory addresses. The region above the stack, starting at address 2<sup class="calibre51 pcalibre pcalibre1">48</sup>, is reserved for the code and data in the <i class="calibre5 pcalibre pcalibre1">kernel</i>, which is the memory-resident part of the operating system.</p>
<p id="P7000497027000000000000000044B36" data-uri="chapter07.xhtml#P7000497027000000000000000044B36" class="pcalibre1 pcalibre calibre2">For simplicity, we've drawn the heap, data, and code segments as abutting each other, and we've placed the top of the stack at the largest legal user address. In practice, there is a gap between the code and data segments due to the alignment requirement on the <code id="P7000497027000000000000000044B37" data-uri="chapter07.xhtml#P7000497027000000000000000044B37" class="pcalibre1 calibre8 pcalibre">.data</code> segment (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006348.xhtml#P7000497027000000000000000006348"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">7.8</span></a>). Also, the linker uses address-space layout randomization (ASLR, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002E6D.xhtml#P7000497027000000000000000002FAD"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.10.4</span></a>) when it assigns runtime addresses to the stack, shared library, and heap segments. Even though the locations of these regions change each time the program is run, their relative positions are the same.</p>
<p id="P7000497027000000000000000044B38" data-uri="chapter07.xhtml#P7000497027000000000000000044B38" class="pcalibre1 pcalibre calibre2">When the loader runs, it creates a memory image similar to the one shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000006397"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">7.15</span></a>. Guided by the program header table, it copies chunks of the</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000006397" data-uri="chapter07.xhtml#P7000497027000000000000000006397">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000006398" title="698" data-uri="chapter07.xhtml#P7000497027000000000000000006398" epub:type="pagebreak"></span>
<img alt="A diagram illustrates Linus x86-64 run-time memory image." id="P7000497027000000000000000044B39" data-uri="P700049702700000000000000000B75C" src="../images/p698-1.png" class="calibre234 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000044B3A" data-uri="chapter07.xhtml#P7000497027000000000000000044B3A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000044B3B" data-uri="chapter07.xhtml#P7000497027000000000000000044B3B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">7.15 </span>Linux x86-64 run-time memory image.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000044B3C" data-uri="chapter07.xhtml#P7000497027000000000000000044B3C"><p id="P7000497027000000000000000044B3D" data-uri="chapter07.xhtml#P7000497027000000000000000044B3D" class="pcalibre calibre3 pcalibre1">Gaps due to segment alignment requirements and address-space layout randomization (ASLR) are not shown. Not to scale.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000024E51" data-uri="chapter07.xhtml#P7000497027000000000000000024E51">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000044B3E" data-uri="chapter07.xhtml#P7000497027000000000000000044B3E" class="pcalibre1 pcalibre calibre2">A diagram shows a stack with sections summarized below from bottom to top.</p>
<ul id="P7000497027000000000000000044B3F" data-uri="chapter07.xhtml#P7000497027000000000000000044B3F" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000044B40" data-uri="chapter07.xhtml#P7000497027000000000000000044B40" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B41" data-uri="chapter07.xhtml#P7000497027000000000000000044B41" class="pcalibre calibre3 pcalibre1">Gap from 0 to 0x400000</p></li>
<li id="P7000497027000000000000000044B42" data-uri="chapter07.xhtml#P7000497027000000000000000044B42" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B43" data-uri="chapter07.xhtml#P7000497027000000000000000044B43" class="pcalibre calibre3 pcalibre1">Loaded from the executable file:</p>
<ul id="P7000497027000000000000000044B44" data-uri="chapter07.xhtml#P7000497027000000000000000044B44" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000044B45" data-uri="chapter07.xhtml#P7000497027000000000000000044B45" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B46" data-uri="chapter07.xhtml#P7000497027000000000000000044B46" class="pcalibre calibre3 pcalibre1">Read-only code segment (.init, .text, .rodata)</p></li>
<li id="P7000497027000000000000000044B47" data-uri="chapter07.xhtml#P7000497027000000000000000044B47" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B48" data-uri="chapter07.xhtml#P7000497027000000000000000044B48" class="pcalibre calibre3 pcalibre1">Read/write segment (.data, .bss)</p></li>
</ul></li>
<li id="P7000497027000000000000000044B49" data-uri="chapter07.xhtml#P7000497027000000000000000044B49" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B4A" data-uri="chapter07.xhtml#P7000497027000000000000000044B4A" class="pcalibre calibre3 pcalibre1">Run-time heap (created by malloc), to brk</p></li>
<li id="P7000497027000000000000000044B4B" data-uri="chapter07.xhtml#P7000497027000000000000000044B4B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B4C" data-uri="chapter07.xhtml#P7000497027000000000000000044B4C" class="pcalibre calibre3 pcalibre1">Gap</p></li>
<li id="P7000497027000000000000000044B4D" data-uri="chapter07.xhtml#P7000497027000000000000000044B4D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B4E" data-uri="chapter07.xhtml#P7000497027000000000000000044B4E" class="pcalibre calibre3 pcalibre1">Memory-mapped region for shared libraries</p></li>
<li id="P7000497027000000000000000044B4F" data-uri="chapter07.xhtml#P7000497027000000000000000044B4F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B50" data-uri="chapter07.xhtml#P7000497027000000000000000044B50" class="pcalibre calibre3 pcalibre1">Gap to %esp (stack pointer)</p></li>
<li id="P7000497027000000000000000044B51" data-uri="chapter07.xhtml#P7000497027000000000000000044B51" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B52" data-uri="chapter07.xhtml#P7000497027000000000000000044B52" class="pcalibre calibre3 pcalibre1">User stack (created at run time), to 2<sup class="calibre51 pcalibre pcalibre1">48</sup> minus 1</p></li>
<li id="P7000497027000000000000000044B53" data-uri="chapter07.xhtml#P7000497027000000000000000044B53" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000044B54" data-uri="chapter07.xhtml#P7000497027000000000000000044B54" class="pcalibre calibre3 pcalibre1">Kernel memory, to memory invisible to user code</p></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000044B55" data-uri="chapter07.xhtml#P7000497027000000000000000044B55">executable object file into the code and data segments. Next, the loader jumps to the program's entry point, which is always the address of the <code id="P7000497027000000000000000044B56" data-uri="chapter07.xhtml#P7000497027000000000000000044B56" class="pcalibre1 calibre8 pcalibre">_start</code> function. This function is defined in the system object file <code id="P7000497027000000000000000044B57" data-uri="chapter07.xhtml#P7000497027000000000000000044B57" class="pcalibre1 calibre8 pcalibre">crt1.o</code> and is the same for all C programs. The <code id="P7000497027000000000000000044B58" data-uri="chapter07.xhtml#P7000497027000000000000000044B58" class="pcalibre1 calibre8 pcalibre">_start</code> function calls the <i class="calibre5 pcalibre pcalibre1">system startup function</i>, <code id="P7000497027000000000000000044B59" data-uri="chapter07.xhtml#P7000497027000000000000000044B59" class="pcalibre1 calibre8 pcalibre">__libc_start_main</code>, which is defined in <code id="P7000497027000000000000000044B5A" data-uri="chapter07.xhtml#P7000497027000000000000000044B5A" class="pcalibre1 calibre8 pcalibre">libc.so</code>. It initializes the execution environment, calls the user-level <code id="P7000497027000000000000000044B5B" data-uri="chapter07.xhtml#P7000497027000000000000000044B5B" class="pcalibre1 calibre8 pcalibre">main</code> function, handles its return value, and if necessary returns control to the kernel.</p>
</section></body></html>
