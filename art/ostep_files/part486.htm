<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>43.8 What About Directories?</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part485.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part487.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">43.8 What About Directories?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Thus far, we’ve simplified our discussion a bit by only considering in- odes and data blocks. However, to access a file in a file system (such as</p><p class="s41" style="padding-left: 41pt;text-indent: 0pt;line-height: 88%;text-align: left;">/home/remzi/foo<span class="p">, one of our favorite fake file names), some directo- ries must be accessed too. So how does LFS store directory data?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Fortunately, directory structure is basically identical to classic U<span class="s7">NIX </span>file systems, in that a directory is just a collection of (name, inode number) mappings. For example, when creating a file on disk, LFS must both write a new inode, some data, as well as the directory data and its inode that refer to this file. Remember that LFS will do so sequentially on the disk (after buffering the updates for some time). Thus, creating a file <span class="s41">foo </span>in a directory would lead to the following new structures on disk:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="348" height="1" alt="image" src="Image_647.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="348" height="22" alt="image" src="Image_648.png"/></span></p><p class="s46" style="padding-top: 3pt;padding-left: 1pt;text-indent: 1pt;line-height: 117%;text-align: left;">map[k]:A1 map[dir]:A3</p><p class="s227" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">imap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">blk[0]:A2</p><p class="s227" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">I[dir]</p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">(foo, k)</p><p class="s229" style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">D<span class="s230">[dir]</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s46" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: center;">blk[0]:A0</p><p class="s227" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: center;">I[k]</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s231" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">D<span class="s230">[k]</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">A0    A1    A2    A3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The piece of the inode map contains the information for the location of both the directory file <span class="s43">dir </span>as well as the newly-created file <span class="s43">f </span>. Thus, when accessing file <span class="s41">foo </span>(with inode number <span class="s43">f </span>), you would first look in the inode map (usually cached in memory) to find the location of the inode of directory <span class="s43">dir </span>(<span class="s43">A</span><span class="s44">3</span>); you then read the directory inode, which gives you the location of the directory data (<span class="s43">A</span><span class="s44">2</span>); reading this data block gives you the name-to-inode-number mapping of (<span class="s41">foo</span>, <span class="s43">k</span>). You then consult the inode map again to find the location of inode number <span class="s43">k </span>(<span class="s43">A</span><span class="s44">1</span>), and finally read the desired data block at address <span class="s43">A</span><span class="s44">0</span>.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">There is one other serious problem in LFS that the inode map solves, known as the <b>recursive update problem </b>[Z+12]. The problem arises in any file system that never updates in place (such as LFS), but rather moves updates to new locations on the disk.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: left;">Specifically, whenever an inode is updated, its location on disk changes. If we hadn’t been careful, this would have also entailed an update to the directory that points to this file, which then would have mandated a change to the parent of that directory, and so on, all the way up the file system tree.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">LFS cleverly avoids this problem with the inode map. Even though the location of an inode may change, the change is never reflected in the directory itself; rather, the imap structure is updated while the directory holds the same name-to-inumber mapping. Thus, through indirection, LFS avoids the recursive update problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part485.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part487.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
