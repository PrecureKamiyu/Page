<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Homework Problems </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000045E1" epub:type="practice" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000042D23" data-uri="chapter04.xhtml#P7000497027000000000000000042D23" epub:type="title"><span class="pcalibre label pcalibre1">Homework Problems </span></h1></header>

<section id="P70004970270000000000000000045E3" data-uri="chapter04.xhtml#P70004970270000000000000000045E3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D24" data-uri="chapter04.xhtml#P7000497027000000000000000042D24" epub:type="title">4.45 </h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042D25" data-uri="chapter04.xhtml#P7000497027000000000000000042D25"><p id="P7000497027000000000000000042D26" data-uri="chapter04.xhtml#P7000497027000000000000000042D26" class="pcalibre1 pcalibre calibre2">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001FFB"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.4.2</span></a>, the x86-64 <code id="P7000497027000000000000000042D27" data-uri="chapter04.xhtml#P7000497027000000000000000042D27" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction was described as decrementing the stack pointer and then storing the register at the stack pointer location. So, if we had an instruction of the form <code id="P7000497027000000000000000042D28" data-uri="chapter04.xhtml#P7000497027000000000000000042D28" class="pcalibre1 calibre8 pcalibre">pushq</code> <i class="calibre5 pcalibre pcalibre1">REG</i>, for some register <i class="calibre5 pcalibre pcalibre1">REG</i>, it would be equivalent to the code sequence</p>
<pre id="P7000497027000000000000000042D29" data-uri="chapter04.xhtml#P7000497027000000000000000042D29" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042D2A" data-uri="chapter04.xhtml#P7000497027000000000000000042D2A" class="calibre10 pcalibre pcalibre1">subq $8,%rsp		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Decrement stack pointer</i></b>
movq <i class="calibre5 pcalibre pcalibre1">REG</i>, (%rsp)	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Store REG on stack</i></b>
</code></pre></div>
<ol class="practicelist1 pcalibre pcalibre1" id="P7000497027000000000000000042D2B" data-uri="chapter04.xhtml#P7000497027000000000000000042D2B">
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000042D2C" data-uri="chapter04.xhtml#P7000497027000000000000000042D2C">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042D2D" data-uri="chapter04.xhtml#P7000497027000000000000000042D2D"><p id="P7000497027000000000000000042D2E" data-uri="chapter04.xhtml#P7000497027000000000000000042D2E" class="pcalibre calibre3 pcalibre1">In light of analysis done in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C54"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.7</span></a>, does this code sequence correctly describe the behavior of the instruction <code id="P7000497027000000000000000042D2F" data-uri="chapter04.xhtml#P7000497027000000000000000042D2F" class="pcalibre1 calibre8 pcalibre">pushq</code> <code id="P7000497027000000000000000042D30" data-uri="chapter04.xhtml#P7000497027000000000000000042D30" class="pcalibre1 calibre8 pcalibre">%rsp</code>? Explain.</p></div></li>
<li class="general-problem pcalibre pcalibre1" id="P7000497027000000000000000042D31" data-uri="chapter04.xhtml#P7000497027000000000000000042D31">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042D32" data-uri="chapter04.xhtml#P7000497027000000000000000042D32"><p id="P7000497027000000000000000042D33" data-uri="chapter04.xhtml#P7000497027000000000000000042D33" class="pcalibre calibre3 pcalibre1">How could you rewrite the code sequence so that it correctly describes both the cases where <i class="calibre5 pcalibre pcalibre1">REG</i> is <code id="P7000497027000000000000000042D34" data-uri="chapter04.xhtml#P7000497027000000000000000042D34" class="pcalibre1 calibre8 pcalibre">%rsp</code> as well as any other register?</p></div></li>
</ol>
</section>
<section id="P70004970270000000000000000045F2" data-uri="chapter04.xhtml#P70004970270000000000000000045F2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D35" data-uri="chapter04.xhtml#P7000497027000000000000000042D35" epub:type="title">4.46 </h1></header>
<p id="P7000497027000000000000000042D36" data-uri="chapter04.xhtml#P7000497027000000000000000042D36" class="pcalibre1 pcalibre calibre2">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001F3C.xhtml#P7000497027000000000000000001FFB"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.4.2</span></a>, the x86-64 <code id="P7000497027000000000000000042D37" data-uri="chapter04.xhtml#P7000497027000000000000000042D37" class="pcalibre1 calibre8 pcalibre">popq</code> instruction was described as copying the result from the top of the stack to the destination register and then incrementing the stack pointer. So, if we had an instruction of the form <code id="P7000497027000000000000000042D38" data-uri="chapter04.xhtml#P7000497027000000000000000042D38" class="pcalibre1 calibre8 pcalibre">popq</code> <i class="calibre5 pcalibre pcalibre1">REG</i>, it would be equivalent to the code sequence</p>
<p id="P7000497027000000000000000042D39" data-uri="chapter04.xhtml#P7000497027000000000000000042D39" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000045F8" title="474" data-uri="chapter04.xhtml#P70004970270000000000000000045F8" epub:type="pagebreak"></span></p>
<pre id="P7000497027000000000000000042D3A" data-uri="chapter04.xhtml#P7000497027000000000000000042D3A" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042D3B" data-uri="chapter04.xhtml#P7000497027000000000000000042D3B" class="calibre10 pcalibre pcalibre1">movq (%rsp), REG	<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Read REG from stack</i></b>
addq $8,%rsp		<b class="calibre4 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">Increment stack pointer</i></b>
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042D3C" data-uri="chapter04.xhtml#P7000497027000000000000000042D3C">
<li id="P7000497027000000000000000042D3D" data-uri="chapter04.xhtml#P7000497027000000000000000042D3D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042D3E" data-uri="chapter04.xhtml#P7000497027000000000000000042D3E" class="pcalibre calibre3 pcalibre1">In light of analysis done in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C64"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.8</span></a>, does this code sequence correctly describe the behavior of the instruction <code id="P7000497027000000000000000042D3F" data-uri="chapter04.xhtml#P7000497027000000000000000042D3F" class="pcalibre1 calibre8 pcalibre">popq</code> <code id="P7000497027000000000000000042D40" data-uri="chapter04.xhtml#P7000497027000000000000000042D40" class="pcalibre1 calibre8 pcalibre">%rsp</code>? Explain.</p></li>
<li id="P7000497027000000000000000042D41" data-uri="chapter04.xhtml#P7000497027000000000000000042D41" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042D42" data-uri="chapter04.xhtml#P7000497027000000000000000042D42" class="pcalibre calibre3 pcalibre1">How could you rewrite the code sequence so that it correctly describes both the cases where <i class="calibre5 pcalibre pcalibre1">REG</i> is <code id="P7000497027000000000000000042D43" data-uri="chapter04.xhtml#P7000497027000000000000000042D43" class="pcalibre1 calibre8 pcalibre">%rsp</code> as well as any other register?</p></li>
</ol>
</section>
<section id="P7000497027000000000000000004603" data-uri="chapter04.xhtml#P7000497027000000000000000004603" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D44" data-uri="chapter04.xhtml#P7000497027000000000000000042D44" epub:type="title">4.47 </h1></header>
<p id="P7000497027000000000000000042D45" data-uri="chapter04.xhtml#P7000497027000000000000000042D45" class="pcalibre1 pcalibre calibre2">Your assignment will be to write a Y86-64 program to perform bubblesort. For reference, the following C function implements bubblesort using array referencing:</p>
<pre id="P7000497027000000000000000042D46" data-uri="chapter04.xhtml#P7000497027000000000000000042D46" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042D47" data-uri="chapter04.xhtml#P7000497027000000000000000042D47" class="calibre10 pcalibre pcalibre1">1	/* Bubble sort: Array version */
2	void bubble_a(long *data, long count) {
3	    long i, last ;
4	    for (last = count-1; last &gt; 0; last--) {
5	        for (i = 0; i &lt; last; i++)
6	            if (data[i+1] &lt; data[i]) {
7	                /* Swap adjacent elements */
8	                long t = data[i+1];
9	                data[i+1] = data[i];
10	                data[i] = t;
11	            }
12	       }
13	}
</code></pre>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042D48" data-uri="chapter04.xhtml#P7000497027000000000000000042D48">
<li id="P7000497027000000000000000042D49" data-uri="chapter04.xhtml#P7000497027000000000000000042D49" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042D4A" data-uri="chapter04.xhtml#P7000497027000000000000000042D4A" class="pcalibre calibre3 pcalibre1">Write and test a C version that references the array elements with pointers, rather than using array indexing.</p></li>
<li id="P7000497027000000000000000042D4B" data-uri="chapter04.xhtml#P7000497027000000000000000042D4B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042D4C" data-uri="chapter04.xhtml#P7000497027000000000000000042D4C" class="pcalibre calibre3 pcalibre1">Write and test a Y86-64 program consisting of the function and test code. You may find it useful to pattern your implementation after x86-64 code generated by compiling your C code. Although pointer comparisons are normally done using unsigned arithmetic, you can use signed arithmetic for this exercise.</p></li>
</ol>
</section>
<section id="P700049702700000000000000000460D" data-uri="chapter04.xhtml#P700049702700000000000000000460D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D4D" data-uri="chapter04.xhtml#P7000497027000000000000000042D4D" epub:type="title">4.48 </h1></header>
<p id="P7000497027000000000000000042D4E" data-uri="chapter04.xhtml#P7000497027000000000000000042D4E" class="pcalibre1 pcalibre calibre2">Modify the code you wrote for <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004603"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.47</span></a> to implement the test and swap in the bubblesort function (lines 6-11) using no jumps and at most three conditional moves.</p>
</section>
<section id="P7000497027000000000000000004610" data-uri="chapter04.xhtml#P7000497027000000000000000004610" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D4F" data-uri="chapter04.xhtml#P7000497027000000000000000042D4F" epub:type="title">4.49 </h1></header>
<p id="P7000497027000000000000000042D50" data-uri="chapter04.xhtml#P7000497027000000000000000042D50" class="pcalibre1 pcalibre calibre2">Modify the code you wrote for <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004603"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.47</span></a> to implement the test and swap in the bubblesort function (lines 6-11) using no jumps and just one conditional move.</p>
</section>
<section id="P7000497027000000000000000004613" data-uri="chapter04.xhtml#P7000497027000000000000000004613" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D51" data-uri="chapter04.xhtml#P7000497027000000000000000042D51" epub:type="title">4.50 </h1></header>
<p id="P7000497027000000000000000042D52" data-uri="chapter04.xhtml#P7000497027000000000000000042D52" class="pcalibre1 pcalibre calibre2">In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000002339_split_001.xhtml#P7000497027000000000000000002799"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">3.6.8</span></a>, we saw that a common way to implement <code id="P7000497027000000000000000042D53" data-uri="chapter04.xhtml#P7000497027000000000000000042D53" class="pcalibre1 calibre8 pcalibre">switch</code> statements is to create a set of code blocks and then index those blocks using a jump table. Consider</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004617" data-uri="chapter04.xhtml#P7000497027000000000000000004617">


<pre id="P7000497027000000000000000042D54" data-uri="chapter04.xhtml#P7000497027000000000000000042D54" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042D55" data-uri="chapter04.xhtml#P7000497027000000000000000042D55" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak1 pcalibre1" id="P700049702700000000000000000461A" title="475" data-uri="chapter04.xhtml#P700049702700000000000000000461A" epub:type="pagebreak"></span>#include &lt;stdio.h&gt;
/* Example use of switch statement */
long switchv(long idx) {
	long result = 0;
	switch(idx) {
	case 0:
		result = 0xaaa;
		break;
	case 2:
	case 5:
		result = 0xbbb;
		break;
	case 3:
		result = 0xccc;
		break;
	default :
		result = 0xddd;
	}
	return result;
}
/* Testing Code */
#define CNT 8
#define MINVAL -1

int main() {
	long vais [CNT];
	long i;
	for (i = 0; i &lt; CNT; i++) {
		vals[i] = switchv(i + MINVAL);
		printf ("idx = %ld, val = 0x%lx\n", i + MINVAL, vais [i] );
	}
	return 0;
}
</code>
</pre>
<figcaption id="P7000497027000000000000000042D56" data-uri="chapter04.xhtml#P7000497027000000000000000042D56" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042D57" data-uri="chapter04.xhtml#P7000497027000000000000000042D57" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.69 </span>Switch statements can be translated into Y86-64 code.</h1></header>
<div class="caption pcalibre pcalibre1" id="P7000497027000000000000000042D58" data-uri="chapter04.xhtml#P7000497027000000000000000042D58"><p id="P7000497027000000000000000042D59" data-uri="chapter04.xhtml#P7000497027000000000000000042D59" class="pcalibre1 pcalibre calibre2"> This requires implementation of a jump table.</p><p id="P7000497027000000000000000042D5A" data-uri="chapter04.xhtml#P7000497027000000000000000042D5A" class="pcalibre calibre3 pcalibre1">
</p></div>
</figcaption>


</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042D5B" data-uri="chapter04.xhtml#P7000497027000000000000000042D5B">the C code shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004617"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.69</span></a> for a function <code id="P7000497027000000000000000042D5C" data-uri="chapter04.xhtml#P7000497027000000000000000042D5C" class="pcalibre1 calibre8 pcalibre">switchv</code>, along with associated test code.</p>
<p id="P7000497027000000000000000042D5D" data-uri="chapter04.xhtml#P7000497027000000000000000042D5D" class="pcalibre1 pcalibre calibre2">Implement <code id="P7000497027000000000000000042D5E" data-uri="chapter04.xhtml#P7000497027000000000000000042D5E" class="pcalibre1 calibre8 pcalibre">switchv</code> in Y86-64 using a jump table. Although the Y86-64 instruction set does not include an indirect jump instruction, you can get the same effect by pushing a computed address onto the stack and then executing the <code id="P7000497027000000000000000042D5F" data-uri="chapter04.xhtml#P7000497027000000000000000042D5F" class="pcalibre1 calibre8 pcalibre">ret</code> <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004624" title="476" data-uri="chapter04.xhtml#P7000497027000000000000000004624" epub:type="pagebreak"></span>instruction. Implement test code similar to what is shown in C to demonstrate that your implementation of <code id="P7000497027000000000000000042D60" data-uri="chapter04.xhtml#P7000497027000000000000000042D60" class="pcalibre1 calibre8 pcalibre">switchv</code> will handle both the cases handled explicitly as well as those that trigger the <code id="P7000497027000000000000000042D61" data-uri="chapter04.xhtml#P7000497027000000000000000042D61" class="pcalibre1 calibre8 pcalibre">default</code> case.</p>
</section>
<section id="P7000497027000000000000000004627" data-uri="chapter04.xhtml#P7000497027000000000000000004627" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D62" data-uri="chapter04.xhtml#P7000497027000000000000000042D62" epub:type="title">4.51 </h1></header>
<p id="P7000497027000000000000000042D63" data-uri="chapter04.xhtml#P7000497027000000000000000042D63" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C23"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.3</span></a> introduced the <code id="P7000497027000000000000000042D64" data-uri="chapter04.xhtml#P7000497027000000000000000042D64" class="pcalibre1 calibre8 pcalibre">iaddq</code> instruction to add immediate data to a register. Describe the computations performed to implement this instruction. Use the computations for <code id="P7000497027000000000000000042D65" data-uri="chapter04.xhtml#P7000497027000000000000000042D65" class="pcalibre1 calibre8 pcalibre">irmovq</code> and <code id="P7000497027000000000000000042D66" data-uri="chapter04.xhtml#P7000497027000000000000000042D66" class="pcalibre1 calibre8 pcalibre">OPq</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D82"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.18</span></a>) as a guide.</p>
</section>
<section id="P700049702700000000000000000462D" data-uri="chapter04.xhtml#P700049702700000000000000000462D" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D67" data-uri="chapter04.xhtml#P7000497027000000000000000042D67" epub:type="title">4.52 </h1></header>
<p id="P7000497027000000000000000042D68" data-uri="chapter04.xhtml#P7000497027000000000000000042D68" class="pcalibre1 pcalibre calibre2">The file <code id="P7000497027000000000000000042D69" data-uri="chapter04.xhtml#P7000497027000000000000000042D69" class="pcalibre1 calibre8 pcalibre">seq-full.hcl</code> contains the HCL description for SEQ, along with the declaration of a constant <code id="P7000497027000000000000000042D6A" data-uri="chapter04.xhtml#P7000497027000000000000000042D6A" class="pcalibre1 calibre8 pcalibre">IIADDQ</code> having hexadecimal value C, the instruction code for <code id="P7000497027000000000000000042D6B" data-uri="chapter04.xhtml#P7000497027000000000000000042D6B" class="pcalibre1 calibre8 pcalibre">iaddq</code>. Modify the HCL descriptions of the control logic blocks to implement the <code id="P7000497027000000000000000042D6C" data-uri="chapter04.xhtml#P7000497027000000000000000042D6C" class="pcalibre1 calibre8 pcalibre">iaddq</code> instruction, as described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C23"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.3</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004627"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.51</span></a>. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P7000497027000000000000000004634" data-uri="chapter04.xhtml#P7000497027000000000000000004634" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D6D" data-uri="chapter04.xhtml#P7000497027000000000000000042D6D" epub:type="title">4.53 </h1></header>
<p id="P7000497027000000000000000042D6E" data-uri="chapter04.xhtml#P7000497027000000000000000042D6E" class="pcalibre1 pcalibre calibre2">Suppose we wanted to create a lower-cost pipelined processor based on the structure we devised for PIPE— (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_000.xhtml#P7000497027000000000000000004210"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.41</span></a>), without any bypassing. This design would handle all data dependencies by stalling until the instruction generating a needed value has passed through the write-back stage.</p>
<p id="P7000497027000000000000000042D6F" data-uri="chapter04.xhtml#P7000497027000000000000000042D6F" class="pcalibre1 pcalibre calibre2">The file <code id="P7000497027000000000000000042D70" data-uri="chapter04.xhtml#P7000497027000000000000000042D70" class="pcalibre1 calibre8 pcalibre">pipe-stall.hcl</code> contains a modified version of the HCL code for PIPE in which the bypassing logic has been disabled. That is, the signals <code id="P7000497027000000000000000042D71" data-uri="chapter04.xhtml#P7000497027000000000000000042D71" class="pcalibre1 calibre8 pcalibre">e_valA</code> and <code id="P7000497027000000000000000042D72" data-uri="chapter04.xhtml#P7000497027000000000000000042D72" class="pcalibre1 calibre8 pcalibre">e_valB</code> are simply declared as follows:</p>
<pre id="P7000497027000000000000000042D73" data-uri="chapter04.xhtml#P7000497027000000000000000042D73" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042D74" data-uri="chapter04.xhtml#P7000497027000000000000000042D74" class="calibre10 pcalibre pcalibre1">## DO NOT MODIFY THE FOLLOWING CODE.
## No forwarding. valA is either valP or value from register file
word d_valA = [
	D_icode in { ICALL, IJXX } : D_valP; # Use incremented PC
	1 : d_rvalA; # Use value read from register file
];
## No forwarding. valB is value from register file
word d_valB = d_rvalB;
</code>
</pre>
<p id="P7000497027000000000000000042D75" data-uri="chapter04.xhtml#P7000497027000000000000000042D75" class="pcalibre1 pcalibre calibre2">Modify the pipeline control logic at the end of this file so that it correctly handles all possible control and data hazards. As part of your design effort, you should analyze the different combinations of control cases, as we did in the design of the pipeline control logic for PIPE. You will find that many different combinations can occur, since many more conditions require the pipeline to stall. Make sure your control logic handles each combination correctly. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P700049702700000000000000000463E" data-uri="chapter04.xhtml#P700049702700000000000000000463E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D76" data-uri="chapter04.xhtml#P7000497027000000000000000042D76" epub:type="title">4.54 </h1></header>
<p id="P7000497027000000000000000042D77" data-uri="chapter04.xhtml#P7000497027000000000000000042D77" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000042D78" data-uri="chapter04.xhtml#P7000497027000000000000000042D78" class="pcalibre1 calibre8 pcalibre">file pipe-full.hcl</code> contains a copy of the PIPE HCL description, along with a declaration of the constant value <code id="P7000497027000000000000000042D79" data-uri="chapter04.xhtml#P7000497027000000000000000042D79" class="pcalibre1 calibre8 pcalibre">IIADDQ</code>. Modify this file to implement the <code id="P7000497027000000000000000042D7A" data-uri="chapter04.xhtml#P7000497027000000000000000042D7A" class="pcalibre1 calibre8 pcalibre">iaddq</code> instruction, as described in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C23"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.3</span></a> and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004627"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.51</span></a>. See the lab <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004644" title="477" data-uri="chapter04.xhtml#P7000497027000000000000000004644" epub:type="pagebreak"></span>material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P7000497027000000000000000004645" data-uri="chapter04.xhtml#P7000497027000000000000000004645" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D7B" data-uri="chapter04.xhtml#P7000497027000000000000000042D7B" epub:type="title">4.55 </h1></header>
<p id="P7000497027000000000000000042D7C" data-uri="chapter04.xhtml#P7000497027000000000000000042D7C" class="pcalibre1 pcalibre calibre2">The file <code id="P7000497027000000000000000042D7D" data-uri="chapter04.xhtml#P7000497027000000000000000042D7D" class="pcalibre1 calibre8 pcalibre">pipe-nt.hcl</code> contains a copy of the HCL code for PIPE, plus a declaration of the constant <code id="P7000497027000000000000000042D7E" data-uri="chapter04.xhtml#P7000497027000000000000000042D7E" class="pcalibre1 calibre8 pcalibre">J_YES</code> with value 0, the function code for an unconditional jump instruction. Modify the branch prediction logic so that it predicts conditional jumps as being not taken while continuing to predict unconditional jumps and <code id="P7000497027000000000000000042D7F" data-uri="chapter04.xhtml#P7000497027000000000000000042D7F" class="pcalibre1 calibre8 pcalibre">call</code> as being taken. You will need to devise a way to get valC, the jump target address, to pipeline register M to recover from mispredicted branches. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P700049702700000000000000000464B" data-uri="chapter04.xhtml#P700049702700000000000000000464B" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D80" data-uri="chapter04.xhtml#P7000497027000000000000000042D80" epub:type="title">4.56 </h1></header>
<p id="P7000497027000000000000000042D81" data-uri="chapter04.xhtml#P7000497027000000000000000042D81" class="pcalibre1 pcalibre calibre2">The file <code id="P7000497027000000000000000042D82" data-uri="chapter04.xhtml#P7000497027000000000000000042D82" class="pcalibre1 calibre8 pcalibre">pipe-btfnt.hcl</code> contains a copy of the HCL code for PIPE, plus a declaration of the constant <code id="P7000497027000000000000000042D83" data-uri="chapter04.xhtml#P7000497027000000000000000042D83" class="pcalibre1 calibre8 pcalibre">J_YES</code> with value 0, the function code for an unconditional jump instruction. Modify the branch prediction logic so that it predicts conditional jumps as being taken when <code id="P7000497027000000000000000042D84" data-uri="chapter04.xhtml#P7000497027000000000000000042D84" class="pcalibre1 calibre8 pcalibre">valC &lt; valP</code> (backward branch) and as being not taken when <code id="P7000497027000000000000000042D85" data-uri="chapter04.xhtml#P7000497027000000000000000042D85" class="pcalibre1 calibre8 pcalibre">valC ≥ valP</code> (forward branch). (Since Y86-64 does not support unsigned arithmetic, you should implement this test using a signed comparison.) Continue to predict unconditional jumps and <code id="P7000497027000000000000000042D86" data-uri="chapter04.xhtml#P7000497027000000000000000042D86" class="pcalibre1 calibre8 pcalibre">call</code> as being taken. You will need to devise a way to get both <code id="P7000497027000000000000000042D87" data-uri="chapter04.xhtml#P7000497027000000000000000042D87" class="pcalibre1 calibre8 pcalibre">valC</code> and <code id="P7000497027000000000000000042D88" data-uri="chapter04.xhtml#P7000497027000000000000000042D88" class="pcalibre1 calibre8 pcalibre">vaIP</code> to pipeline register M to recover from mispredicted branches. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P7000497027000000000000000004655" data-uri="chapter04.xhtml#P7000497027000000000000000004655" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042D89" data-uri="chapter04.xhtml#P7000497027000000000000000042D89" epub:type="title">4.57 </h1></header>
<p id="P7000497027000000000000000042D8A" data-uri="chapter04.xhtml#P7000497027000000000000000042D8A" class="pcalibre1 pcalibre calibre2">In our design of PIPE, we generate a stall whenever one instruction performs a <i class="calibre5 pcalibre pcalibre1">load</i>, reading a value from memory into a register, and the next instruction has this register as a source operand. When the source gets used in the execute stage, this stalling is the only way to avoid a hazard. For cases where the second instruction stores the source operand to memory, such as with an <code id="P7000497027000000000000000042D8B" data-uri="chapter04.xhtml#P7000497027000000000000000042D8B" class="pcalibre1 calibre8 pcalibre">rmmovq</code> or <code id="P7000497027000000000000000042D8C" data-uri="chapter04.xhtml#P7000497027000000000000000042D8C" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction, this stalling is not necessary. Consider the following code examples:</p>
<pre id="P7000497027000000000000000042D8D" data-uri="chapter04.xhtml#P7000497027000000000000000042D8D" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042D8E" data-uri="chapter04.xhtml#P7000497027000000000000000042D8E" class="calibre10 pcalibre pcalibre1">1	mrmovq 0(%rcx),%rdx	# Load 1
2	pushq %rdx		# Store 1
3	nop
4	popq %rdx		# Load 2
5	rmmovq %rax,0(%rdx)	# Store 2
</code>
</pre>
<p id="P7000497027000000000000000042D8F" data-uri="chapter04.xhtml#P7000497027000000000000000042D8F" class="pcalibre1 pcalibre calibre2">In lines 1 and 2, the <code id="P7000497027000000000000000042D90" data-uri="chapter04.xhtml#P7000497027000000000000000042D90" class="pcalibre1 calibre8 pcalibre">mrmovq</code> instruction reads a value from memory into <code id="P7000497027000000000000000042D91" data-uri="chapter04.xhtml#P7000497027000000000000000042D91" class="pcalibre1 calibre8 pcalibre">%rdx</code>, and the <code id="P7000497027000000000000000042D92" data-uri="chapter04.xhtml#P7000497027000000000000000042D92" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction then pushes this value onto the stack. Our design for PIPE would stall the <code id="P7000497027000000000000000042D93" data-uri="chapter04.xhtml#P7000497027000000000000000042D93" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction to avoid a load/use hazard. Observe, however, that the value of <code id="P7000497027000000000000000042D94" data-uri="chapter04.xhtml#P7000497027000000000000000042D94" class="pcalibre1 calibre8 pcalibre">%rdx</code> is not required by the <code id="P7000497027000000000000000042D95" data-uri="chapter04.xhtml#P7000497027000000000000000042D95" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction until it reaches the memory stage. We can add an additional bypass path, as diagrammed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004665"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.70</span></a>, to forward the memory output (signal m_valM) to the valA field in pipeline register M. On the next clock cycle, this forwarded value can then be written to memory. This technique is known as <i class="calibre5 pcalibre pcalibre1">load forwarding.</i></p>
<p id="P7000497027000000000000000042D96" data-uri="chapter04.xhtml#P7000497027000000000000000042D96" class="pcalibre1 pcalibre calibre2">Note that the second example (lines 4 and 5) in the code sequence above cannot make use of load forwarding. The value loaded by the <code id="P7000497027000000000000000042D97" data-uri="chapter04.xhtml#P7000497027000000000000000042D97" class="pcalibre1 calibre8 pcalibre">popq</code> instruction is</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004665" data-uri="chapter04.xhtml#P7000497027000000000000000004665">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004666" title="478" data-uri="chapter04.xhtml#P7000497027000000000000000004666" epub:type="pagebreak"></span><img alt="A diagram shows a structure with execute and memory stages capable of load forwarding." id="P7000497027000000000000000042D98" data-uri="P700049702700000000000000000B709" src="../images/p478-1.png" class="calibre165 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042D99" data-uri="chapter04.xhtml#P7000497027000000000000000042D99" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042D9A" data-uri="chapter04.xhtml#P7000497027000000000000000042D9A" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">4.70 </span>Execute and memory stages capable of load forwarding.</h1></header>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000042D9B" data-uri="chapter04.xhtml#P7000497027000000000000000042D9B"><p id="P7000497027000000000000000042D9C" data-uri="chapter04.xhtml#P7000497027000000000000000042D9C" class="pcalibre1 pcalibre calibre2"> By adding a bypass path from the memory output to the source of valA in pipeline register M, we can use forwarding rather than stalling for one form of load/use hazard. This is the subject of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004655"><span class="pcalibre label pcalibre1">Problem </span><span class="number pcalibre pcalibre1">4.57</span></a>.</p><p id="P7000497027000000000000000042D9D" data-uri="chapter04.xhtml#P7000497027000000000000000042D9D" class="pcalibre calibre3 pcalibre1">
</p></div>
<details class="longdesc pcalibre pcalibre1" id="P7000497027000000000000000023075" data-uri="chapter04.xhtml#P7000497027000000000000000023075">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042D9E" data-uri="chapter04.xhtml#P7000497027000000000000000042D9E" class="pcalibre1 pcalibre calibre2">A diagram shows pipelines E, M, and W, as summarized from bottom to top, left to right, below.</p>
<ul id="P7000497027000000000000000042D9F" data-uri="chapter04.xhtml#P7000497027000000000000000042D9F" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042DA0" data-uri="chapter04.xhtml#P7000497027000000000000000042DA0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DA1" data-uri="chapter04.xhtml#P7000497027000000000000000042DA1" class="pcalibre calibre3 pcalibre1">E:</p>
<ul id="P7000497027000000000000000042DA2" data-uri="chapter04.xhtml#P7000497027000000000000000042DA2" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042DA3" data-uri="chapter04.xhtml#P7000497027000000000000000042DA3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DA4" data-uri="chapter04.xhtml#P7000497027000000000000000042DA4" class="pcalibre calibre3 pcalibre1">Stat to stat in M</p></li>
<li id="P7000497027000000000000000042DA5" data-uri="chapter04.xhtml#P7000497027000000000000000042DA5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DA6" data-uri="chapter04.xhtml#P7000497027000000000000000042DA6" class="pcalibre calibre3 pcalibre1">Icode to:</p>
<ul id="P7000497027000000000000000042DA7" data-uri="chapter04.xhtml#P7000497027000000000000000042DA7" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000042DA8" data-uri="chapter04.xhtml#P7000497027000000000000000042DA8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DA9" data-uri="chapter04.xhtml#P7000497027000000000000000042DA9" class="pcalibre calibre3 pcalibre1">Icode in M</p></li>
<li id="P7000497027000000000000000042DAA" data-uri="chapter04.xhtml#P7000497027000000000000000042DAA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DAB" data-uri="chapter04.xhtml#P7000497027000000000000000042DAB" class="pcalibre calibre3 pcalibre1">Set CC, with input from W_stat and m_stat, with output to CC, which has input from ALU, which receives input from ALU A, ALU B, and ALU fun</p></li>
<li id="P7000497027000000000000000042DAC" data-uri="chapter04.xhtml#P7000497027000000000000000042DAC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DAD" data-uri="chapter04.xhtml#P7000497027000000000000000042DAD" class="pcalibre calibre3 pcalibre1">ALU A</p></li>
<li id="P7000497027000000000000000042DAE" data-uri="chapter04.xhtml#P7000497027000000000000000042DAE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DAF" data-uri="chapter04.xhtml#P7000497027000000000000000042DAF" class="pcalibre calibre3 pcalibre1">ALU B</p></li>
<li id="P7000497027000000000000000042DB0" data-uri="chapter04.xhtml#P7000497027000000000000000042DB0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DB1" data-uri="chapter04.xhtml#P7000497027000000000000000042DB1" class="pcalibre calibre3 pcalibre1">ALU fun.</p></li>
<li id="P7000497027000000000000000042DB2" data-uri="chapter04.xhtml#P7000497027000000000000000042DB2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DB3" data-uri="chapter04.xhtml#P7000497027000000000000000042DB3" class="pcalibre calibre3 pcalibre1">Cond., which has input from CC and output e_Cnd to dstE and to Cnd in M</p></li>
<li id="P7000497027000000000000000042DB4" data-uri="chapter04.xhtml#P7000497027000000000000000042DB4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DB5" data-uri="chapter04.xhtml#P7000497027000000000000000042DB5" class="pcalibre calibre3 pcalibre1">E_icode to Fwd A, which sends output to valA in M</p></li>
</ul></li>
<li id="P7000497027000000000000000042DB6" data-uri="chapter04.xhtml#P7000497027000000000000000042DB6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DB7" data-uri="chapter04.xhtml#P7000497027000000000000000042DB7" class="pcalibre calibre3 pcalibre1">Ifun, to ALU fun. and to cond.</p></li>
<li id="P7000497027000000000000000042DB8" data-uri="chapter04.xhtml#P7000497027000000000000000042DB8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DB9" data-uri="chapter04.xhtml#P7000497027000000000000000042DB9" class="pcalibre calibre3 pcalibre1">valC, ALU A</p></li>
<li id="P7000497027000000000000000042DBA" data-uri="chapter04.xhtml#P7000497027000000000000000042DBA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DBB" data-uri="chapter04.xhtml#P7000497027000000000000000042DBB" class="pcalibre calibre3 pcalibre1">valA, to ALU A and Fwd A</p></li>
<li id="P7000497027000000000000000042DBC" data-uri="chapter04.xhtml#P7000497027000000000000000042DBC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DBD" data-uri="chapter04.xhtml#P7000497027000000000000000042DBD" class="pcalibre calibre3 pcalibre1">valB, to ALU B</p></li>
<li id="P7000497027000000000000000042DBE" data-uri="chapter04.xhtml#P7000497027000000000000000042DBE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DBF" data-uri="chapter04.xhtml#P7000497027000000000000000042DBF" class="pcalibre calibre3 pcalibre1">dstE, to dstE, which sends input to dstE in M</p></li>
<li id="P7000497027000000000000000042DC0" data-uri="chapter04.xhtml#P7000497027000000000000000042DC0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DC1" data-uri="chapter04.xhtml#P7000497027000000000000000042DC1" class="pcalibre calibre3 pcalibre1">dstM to dstM in M</p></li>
<li id="P7000497027000000000000000042DC2" data-uri="chapter04.xhtml#P7000497027000000000000000042DC2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DC3" data-uri="chapter04.xhtml#P7000497027000000000000000042DC3" class="pcalibre calibre3 pcalibre1">srcA, with output E_srcA to Fwd A</p></li>
<li id="P7000497027000000000000000042DC4" data-uri="chapter04.xhtml#P7000497027000000000000000042DC4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DC5" data-uri="chapter04.xhtml#P7000497027000000000000000042DC5" class="pcalibre calibre3 pcalibre1">srcB</p></li>
</ul></li>
<li id="P7000497027000000000000000042DC6" data-uri="chapter04.xhtml#P7000497027000000000000000042DC6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DC7" data-uri="chapter04.xhtml#P7000497027000000000000000042DC7" class="pcalibre calibre3 pcalibre1">M:</p>
<ul id="P7000497027000000000000000042DC8" data-uri="chapter04.xhtml#P7000497027000000000000000042DC8" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042DC9" data-uri="chapter04.xhtml#P7000497027000000000000000042DC9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DCA" data-uri="chapter04.xhtml#P7000497027000000000000000042DCA" class="pcalibre calibre3 pcalibre1">Sta, to Stat, which has output to stat in W and input dmem_error from data memory</p></li>
<li id="P7000497027000000000000000042DCB" data-uri="chapter04.xhtml#P7000497027000000000000000042DCB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DCC" data-uri="chapter04.xhtml#P7000497027000000000000000042DCC" class="pcalibre calibre3 pcalibre1">Icode to:</p>
<ul id="P7000497027000000000000000042DCD" data-uri="chapter04.xhtml#P7000497027000000000000000042DCD" class="calibre112 pcalibre pcalibre1">
<li id="P7000497027000000000000000042DCE" data-uri="chapter04.xhtml#P7000497027000000000000000042DCE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DCF" data-uri="chapter04.xhtml#P7000497027000000000000000042DCF" class="pcalibre calibre3 pcalibre1">Icode in in W</p></li>
<li id="P7000497027000000000000000042DD0" data-uri="chapter04.xhtml#P7000497027000000000000000042DD0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DD1" data-uri="chapter04.xhtml#P7000497027000000000000000042DD1" class="pcalibre calibre3 pcalibre1">Mem read.,which sends output read to Data memory</p></li>
<li id="P7000497027000000000000000042DD2" data-uri="chapter04.xhtml#P7000497027000000000000000042DD2" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DD3" data-uri="chapter04.xhtml#P7000497027000000000000000042DD3" class="pcalibre calibre3 pcalibre1">Mem. Write, which sends output write to Data memory</p></li>
<li id="P7000497027000000000000000042DD4" data-uri="chapter04.xhtml#P7000497027000000000000000042DD4" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DD5" data-uri="chapter04.xhtml#P7000497027000000000000000042DD5" class="pcalibre calibre3 pcalibre1">Addr, which sends output to Data memory</p></li>
</ul></li>
<li id="P7000497027000000000000000042DD6" data-uri="chapter04.xhtml#P7000497027000000000000000042DD6" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DD7" data-uri="chapter04.xhtml#P7000497027000000000000000042DD7" class="pcalibre calibre3 pcalibre1">Cnd</p></li>
<li id="P7000497027000000000000000042DD8" data-uri="chapter04.xhtml#P7000497027000000000000000042DD8" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DD9" data-uri="chapter04.xhtml#P7000497027000000000000000042DD9" class="pcalibre calibre3 pcalibre1">valE, to valE in W and Addrs</p></li>
<li id="P7000497027000000000000000042DDA" data-uri="chapter04.xhtml#P7000497027000000000000000042DDA" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DDB" data-uri="chapter04.xhtml#P7000497027000000000000000042DDB" class="pcalibre calibre3 pcalibre1">valA: input to Addr and input data in to Data memory</p></li>
<li id="P7000497027000000000000000042DDC" data-uri="chapter04.xhtml#P7000497027000000000000000042DDC" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DDD" data-uri="chapter04.xhtml#P7000497027000000000000000042DDD" class="pcalibre calibre3 pcalibre1">dstE to dstE in W</p></li>
<li id="P7000497027000000000000000042DDE" data-uri="chapter04.xhtml#P7000497027000000000000000042DDE" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DDF" data-uri="chapter04.xhtml#P7000497027000000000000000042DDF" class="pcalibre calibre3 pcalibre1">dstM: output to dstM in W, and output M_dstM to Fwd A</p></li>
</ul></li>
<li id="P7000497027000000000000000042DE0" data-uri="chapter04.xhtml#P7000497027000000000000000042DE0" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DE1" data-uri="chapter04.xhtml#P7000497027000000000000000042DE1" class="pcalibre calibre3 pcalibre1">W:</p>
<ul id="P7000497027000000000000000042DE2" data-uri="chapter04.xhtml#P7000497027000000000000000042DE2" class="pcalibre calibre39 pcalibre1">
<li id="P7000497027000000000000000042DE3" data-uri="chapter04.xhtml#P7000497027000000000000000042DE3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DE4" data-uri="chapter04.xhtml#P7000497027000000000000000042DE4" class="pcalibre calibre3 pcalibre1">Stat</p></li>
<li id="P7000497027000000000000000042DE5" data-uri="chapter04.xhtml#P7000497027000000000000000042DE5" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DE6" data-uri="chapter04.xhtml#P7000497027000000000000000042DE6" class="pcalibre calibre3 pcalibre1">Icode</p></li>
<li id="P7000497027000000000000000042DE7" data-uri="chapter04.xhtml#P7000497027000000000000000042DE7" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DE8" data-uri="chapter04.xhtml#P7000497027000000000000000042DE8" class="pcalibre calibre3 pcalibre1">valE</p></li>
<li id="P7000497027000000000000000042DE9" data-uri="chapter04.xhtml#P7000497027000000000000000042DE9" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DEA" data-uri="chapter04.xhtml#P7000497027000000000000000042DEA" class="pcalibre calibre3 pcalibre1">valM, with input from Data memory, which sends data out as m_valM to Fwd A</p></li>
<li id="P7000497027000000000000000042DEB" data-uri="chapter04.xhtml#P7000497027000000000000000042DEB" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DEC" data-uri="chapter04.xhtml#P7000497027000000000000000042DEC" class="pcalibre calibre3 pcalibre1">dstE</p></li>
<li id="P7000497027000000000000000042DED" data-uri="chapter04.xhtml#P7000497027000000000000000042DED" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DEE" data-uri="chapter04.xhtml#P7000497027000000000000000042DEE" class="pcalibre calibre3 pcalibre1">dstM</p></li>
</ul></li>
</ul>
</details>
</figcaption>
</figure>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042DEF" data-uri="chapter04.xhtml#P7000497027000000000000000042DEF">used as part of the address computation by the next instruction, and this value is required in the execute stage rather than the memory stage.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042DF0" data-uri="chapter04.xhtml#P7000497027000000000000000042DF0">
<li id="P7000497027000000000000000042DF1" data-uri="chapter04.xhtml#P7000497027000000000000000042DF1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DF2" data-uri="chapter04.xhtml#P7000497027000000000000000042DF2" class="pcalibre calibre3 pcalibre1">Write a logic formula describing the detection condition for a load/use hazard, similar to the one given in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004474"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.64</span></a>, except that it will not cause a stall in cases where load forwarding can be used.</p></li>
<li id="P7000497027000000000000000042DF3" data-uri="chapter04.xhtml#P7000497027000000000000000042DF3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042DF4" data-uri="chapter04.xhtml#P7000497027000000000000000042DF4" class="pcalibre calibre3 pcalibre1">The file <code id="P7000497027000000000000000042DF5" data-uri="chapter04.xhtml#P7000497027000000000000000042DF5" class="pcalibre1 calibre8 pcalibre">pipe-lf.hcl</code> contains a modified version of the control logic for PIPE. It contains the definition of a signal <code id="P7000497027000000000000000042DF6" data-uri="chapter04.xhtml#P7000497027000000000000000042DF6" class="pcalibre1 calibre8 pcalibre">e_valA</code> to implement the block labeled "Fwd A" in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004665"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.70</span></a>. It also has the conditions for a load/use hazard in the pipeline control logic set to zero, and so the pipeline control logic will not detect any forms of load/use hazards. Modify this HCL description to implement load forwarding. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p></li>
</ol>

</section>
<section id="P7000497027000000000000000004674" data-uri="chapter04.xhtml#P7000497027000000000000000004674" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042DF7" data-uri="chapter04.xhtml#P7000497027000000000000000042DF7" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004676" title="479" data-uri="chapter04.xhtml#P7000497027000000000000000004676" epub:type="pagebreak"></span>4.58 </h1></header>
<p id="P7000497027000000000000000042DF8" data-uri="chapter04.xhtml#P7000497027000000000000000042DF8" class="pcalibre1 pcalibre calibre2">Our pipelined design is a bit unrealistic in that we have two write ports for the register file, but only the <code id="P7000497027000000000000000042DF9" data-uri="chapter04.xhtml#P7000497027000000000000000042DF9" class="pcalibre1 calibre8 pcalibre">popq</code> instruction requires two simultaneous writes to the register file. The other instructions could therefore use a single write port, sharing this for writing <code id="P7000497027000000000000000042DFA" data-uri="chapter04.xhtml#P7000497027000000000000000042DFA" class="pcalibre1 calibre8 pcalibre">valE</code> and <code id="P7000497027000000000000000042DFB" data-uri="chapter04.xhtml#P7000497027000000000000000042DFB" class="pcalibre1 calibre8 pcalibre">valM</code>. The following figure shows a modified version of the write-back logic, in which we merge the write-back register IDs (<code id="P7000497027000000000000000042DFC" data-uri="chapter04.xhtml#P7000497027000000000000000042DFC" class="pcalibre1 calibre8 pcalibre">W_dstE</code> and <code id="P7000497027000000000000000042DFD" data-uri="chapter04.xhtml#P7000497027000000000000000042DFD" class="pcalibre1 calibre8 pcalibre">W_dstM</code>) into a single signal <code id="P7000497027000000000000000042DFE" data-uri="chapter04.xhtml#P7000497027000000000000000042DFE" class="pcalibre1 calibre8 pcalibre">w_dstE</code> and the write-back values (<code id="P7000497027000000000000000042DFF" data-uri="chapter04.xhtml#P7000497027000000000000000042DFF" class="pcalibre1 calibre8 pcalibre">W_valE</code> and <code id="P7000497027000000000000000042E00" data-uri="chapter04.xhtml#P7000497027000000000000000042E00" class="pcalibre1 calibre8 pcalibre">W_valM</code>) into a single signal <code id="P7000497027000000000000000042E01" data-uri="chapter04.xhtml#P7000497027000000000000000042E01" class="pcalibre1 calibre8 pcalibre">w_valE</code>:</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004681" data-uri="chapter04.xhtml#P7000497027000000000000000004681">
<img alt="A diagram illustrates outputs of pipeline W." id="P7000497027000000000000000042E02" data-uri="P700049702700000000000000000B70A" src="../images/p479-1.png" class="calibre166 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042E03" data-uri="chapter04.xhtml#P7000497027000000000000000042E03" class="calibre11 pcalibre pcalibre1">
<details class="longdesc pcalibre pcalibre1" id="P70004970270000000000000000230DC" data-uri="chapter04.xhtml#P70004970270000000000000000230DC">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042E04" data-uri="chapter04.xhtml#P7000497027000000000000000042E04" class="pcalibre1 pcalibre calibre2">A diagram shows outputs of pipeline W, as summarized from left to right below:</p>
<ul id="P7000497027000000000000000042E05" data-uri="chapter04.xhtml#P7000497027000000000000000042E05" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000042E06" data-uri="chapter04.xhtml#P7000497027000000000000000042E06" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E07" data-uri="chapter04.xhtml#P7000497027000000000000000042E07" class="pcalibre calibre3 pcalibre1">stat: output Stat</p></li>
<li id="P7000497027000000000000000042E08" data-uri="chapter04.xhtml#P7000497027000000000000000042E08" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E09" data-uri="chapter04.xhtml#P7000497027000000000000000042E09" class="pcalibre calibre3 pcalibre1">icode: output W_icode</p></li>
<li id="P7000497027000000000000000042E0A" data-uri="chapter04.xhtml#P7000497027000000000000000042E0A" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E0B" data-uri="chapter04.xhtml#P7000497027000000000000000042E0B" class="pcalibre calibre3 pcalibre1">ValE and ValM: outputs to ValE, which has input from dstM and output w_ValE</p></li>
<li id="P7000497027000000000000000042E0C" data-uri="chapter04.xhtml#P7000497027000000000000000042E0C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E0D" data-uri="chapter04.xhtml#P7000497027000000000000000042E0D" class="pcalibre calibre3 pcalibre1">dstE and dstM: outputs to dstE, which has output w_dstE</p></li>
</ul>
</details>
</figcaption>
</figure>
<p id="P7000497027000000000000000042E0E" data-uri="chapter04.xhtml#P7000497027000000000000000042E0E" class="pcalibre1 pcalibre calibre2">The logic for performing the merges is written in HCL as follows:</p>
<pre id="P7000497027000000000000000042E0F" data-uri="chapter04.xhtml#P7000497027000000000000000042E0F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E10" data-uri="chapter04.xhtml#P7000497027000000000000000042E10" class="calibre10 pcalibre pcalibre1">## Set E port register ID
word w_dstE = [
	  ## writing from valM
	  W_dstM != RNONE : W_dstM;
	  1: W_dstE;
];

## Set E port value
word w_valE = [
	  W_dstM != RNONE : W_valM;
	  1: W_valE;
];
</code></pre>
<p id="P7000497027000000000000000042E11" data-uri="chapter04.xhtml#P7000497027000000000000000042E11" class="pcalibre1 pcalibre calibre2">The control for these multiplexors is determined by <code id="P7000497027000000000000000042E12" data-uri="chapter04.xhtml#P7000497027000000000000000042E12" class="pcalibre1 calibre8 pcalibre">dstE</code>—when it indicates there is some register, then it selects the value for port E, and otherwise it selects the value for port M.</p>
<p id="P7000497027000000000000000042E13" data-uri="chapter04.xhtml#P7000497027000000000000000042E13" class="pcalibre1 pcalibre calibre2">In the simulation model, we can then disable register port M, as shown by the following HCL code:</p>
<pre id="P7000497027000000000000000042E14" data-uri="chapter04.xhtml#P7000497027000000000000000042E14" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E15" data-uri="chapter04.xhtml#P7000497027000000000000000042E15" class="calibre10 pcalibre pcalibre1">## Disable register port M
## Set M port register ID
word w_dstM = RNONE;

## Set M port value
word w_valM = 0;
</code></pre>
<p id="P7000497027000000000000000042E16" data-uri="chapter04.xhtml#P7000497027000000000000000042E16" class="pcalibre1 pcalibre calibre2">The challenge then becomes to devise a way to handle <code id="P7000497027000000000000000042E17" data-uri="chapter04.xhtml#P7000497027000000000000000042E17" class="pcalibre1 calibre8 pcalibre">popq</code>. One method is to use the control logic to dynamically process the instruction <code id="P7000497027000000000000000042E18" data-uri="chapter04.xhtml#P7000497027000000000000000042E18" class="pcalibre1 calibre8 pcalibre">popq</code> rA so that it has the same effect as the two-instruction sequence</p>

<pre id="P7000497027000000000000000042E19" data-uri="chapter04.xhtml#P7000497027000000000000000042E19" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E1A" data-uri="chapter04.xhtml#P7000497027000000000000000042E1A" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004690" title="480" data-uri="chapter04.xhtml#P7000497027000000000000000004690" epub:type="pagebreak"></span>iaddq $8, %rsp
mrmovq -8(%rsp), rA
</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042E1B" data-uri="chapter04.xhtml#P7000497027000000000000000042E1B">(See <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C23"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.3</span></a> for a description of the <code id="P7000497027000000000000000042E1C" data-uri="chapter04.xhtml#P7000497027000000000000000042E1C" class="pcalibre1 calibre8 pcalibre">iaddq</code> instruction.) Note the ordering of the two instructions to make sure <code id="P7000497027000000000000000042E1D" data-uri="chapter04.xhtml#P7000497027000000000000000042E1D" class="pcalibre1 calibre8 pcalibre">popq</code> <code id="P7000497027000000000000000042E1E" data-uri="chapter04.xhtml#P7000497027000000000000000042E1E" class="pcalibre1 calibre8 pcalibre">%rsp</code> works properly. You can do this by having the logic in the decode stage treat <code id="P7000497027000000000000000042E1F" data-uri="chapter04.xhtml#P7000497027000000000000000042E1F" class="pcalibre1 calibre8 pcalibre">popq</code> the same as it would the <code id="P7000497027000000000000000042E20" data-uri="chapter04.xhtml#P7000497027000000000000000042E20" class="pcalibre1 calibre8 pcalibre">iaddq</code> listed above, except that it predicts the next PC to be equal to the current PC. On the next cycle, the <code id="P7000497027000000000000000042E21" data-uri="chapter04.xhtml#P7000497027000000000000000042E21" class="pcalibre1 calibre8 pcalibre">popq</code> instruction is refetched, but the instruction code is converted to a special value <code id="P7000497027000000000000000042E22" data-uri="chapter04.xhtml#P7000497027000000000000000042E22" class="pcalibre1 calibre8 pcalibre">IP0P2</code>. This is treated as a special instruction that has the same behavior as the <code id="P7000497027000000000000000042E23" data-uri="chapter04.xhtml#P7000497027000000000000000042E23" class="pcalibre1 calibre8 pcalibre">mrmovq</code> instruction listed above.</p>
<p id="P7000497027000000000000000042E24" data-uri="chapter04.xhtml#P7000497027000000000000000042E24" class="pcalibre1 pcalibre calibre2">The file <code id="P7000497027000000000000000042E25" data-uri="chapter04.xhtml#P7000497027000000000000000042E25" class="pcalibre1 calibre8 pcalibre">pipe-lw.hcl</code> contains the modified write port logic described above. It contains a declaration of the constant <code id="P7000497027000000000000000042E26" data-uri="chapter04.xhtml#P7000497027000000000000000042E26" class="pcalibre1 calibre8 pcalibre">IP0P2</code> having hexadecimal value E. It also contains the definition of a signal f_icode that generates the icode field for pipeline register D. This definition can be modified to insert the instruction code <code id="P7000497027000000000000000042E27" data-uri="chapter04.xhtml#P7000497027000000000000000042E27" class="pcalibre1 calibre8 pcalibre">IP0P2</code> the second time the <code id="P7000497027000000000000000042E28" data-uri="chapter04.xhtml#P7000497027000000000000000042E28" class="pcalibre1 calibre8 pcalibre">popq</code> instruction is fetched. The HCL file also contains a declaration of the signal f_pc, the value of the program counter generated in the fetch stage by the block labeled "Select PC" (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043B4"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.57</span></a>).</p>
<p id="P7000497027000000000000000042E29" data-uri="chapter04.xhtml#P7000497027000000000000000042E29" class="pcalibre1 pcalibre calibre2">Modify the control logic in this file to process <code id="P7000497027000000000000000042E2A" data-uri="chapter04.xhtml#P7000497027000000000000000042E2A" class="pcalibre1 calibre8 pcalibre">popq</code> instructions in the manner we have described. See the lab material for directions on how to generate a simulator for your solution and how to test it.</p>
</section>
<section id="P70004970270000000000000000046A1" data-uri="chapter04.xhtml#P70004970270000000000000000046A1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E2B" data-uri="chapter04.xhtml#P7000497027000000000000000042E2B" epub:type="title">4.59 </h1></header>
<p id="P7000497027000000000000000042E2C" data-uri="chapter04.xhtml#P7000497027000000000000000042E2C" class="pcalibre1 pcalibre calibre2">Compare the performance of the three versions of bubblesort (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004603"><span class="pcalibre label pcalibre1">Problems </span><span class="pcalibre label pcalibre1">4.47</span></a>, <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P700049702700000000000000000460D"><span class="pcalibre label pcalibre1">4.48</span></a>, and <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004610"><span class="pcalibre label pcalibre1">4.49</span></a>). Explain why one version performs better than the other.</p>
</section>
</section></body></html>
