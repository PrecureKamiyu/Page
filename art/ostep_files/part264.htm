<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>26.3 The Heart of the Problem: Uncontrolled Scheduling</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part263.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part265.htm">下一个 &gt;</a></p><p class="s40" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">26.3 The Heart of the Problem: Uncontrolled Scheduling</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">To understand why this happens, we must understand the code se- quence that the compiler generates for the update to <span class="s41">counter</span>. In this case, we wish to simply add a number (1) to <span class="s41">counter</span>. Thus, the code sequence for doing so might look something like this (in x86);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">mov 0x8049a1c, %eax add $0x1, %eax</p><p class="s38" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">mov %eax, 0x8049a1c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">This example assumes that the variable <span class="s41">counter </span>is located at address 0x8049a1c. In this three-instruction sequence, the x86 <span class="s41">mov </span>instruction is used first to get the memory value at the address and put it into register <span class="s41">eax</span>. Then, the add is performed, adding 1 (0x1) to the contents of the <span class="s41">eax </span>register, and finally, the contents of <span class="s41">eax </span>are stored back into memory at the same address.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Let us imagine one of our two threads (Thread 1) enters this region of code, and is thus about to increment <span class="s41">counter </span>by one. It loads the value of <span class="s41">counter </span>(let’s say it’s 50 to begin with) into its register <span class="s41">eax</span>. Thus, <span class="s41">eax=50 </span>for Thread 1. Then it adds one to the register; thus <span class="s41">eax=51</span>. Now, something unfortunate happens: a timer interrupt goes off; thus, the OS saves the state of the currently running thread (its PC, its registers including <span class="s41">eax</span>, etc.) to the thread’s TCB.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Now something worse happens: Thread 2 is chosen to run, and it en- ters this same piece of code. It also executes the first instruction, getting the value of <span class="s41">counter </span>and putting it into its <span class="s41">eax </span>(remember: each thread when running has its own private registers; the registers are <b>virtualized </b>by the context-switch code that saves and restores them). The value of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 3pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">(after instruction)</p><table style="border-collapse:collapse;margin-left:77.5477pt" cellspacing="0"><tr style="height:8pt"><td style="width:57pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="padding-left: 6pt;text-indent: 0pt;line-height: 6pt;text-align: left;">OS</p></td><td style="width:67pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Thread 1</p></td><td style="width:74pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="text-indent: 0pt;line-height: 6pt;text-align: left;">Thread 2</p></td><td style="width:21pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="padding-right: 4pt;text-indent: 0pt;line-height: 6pt;text-align: right;">PC</p></td><td style="width:21pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="padding-left: 3pt;text-indent: 0pt;line-height: 6pt;text-align: center;">%eax</p></td><td style="width:31pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F"><p class="s69" style="padding-right: 5pt;text-indent: 0pt;line-height: 6pt;text-align: center;">counter</p></td></tr><tr style="height:8pt"><td style="width:57pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s134" style="text-indent: 0pt;line-height: 7pt;text-align: left;">before critical section</p></td><td style="width:74pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">100</p></td><td style="width:21pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s70" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:31pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">mov 0x8049a1c, %eax</p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">105</p></td><td style="width:21pt"><p class="s69" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">add $0x1, %eax</p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">108</p></td><td style="width:21pt"><p class="s69" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s69" style="padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: left;">interrupt</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:31pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s134" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">save T1’s state</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:31pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s134" style="text-indent: 0pt;line-height: 7pt;text-align: right;">restore T2’s state</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">100</p></td><td style="width:21pt"><p class="s70" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">0</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">mov 0x8049a1c, %eax</p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">105</p></td><td style="width:21pt"><p class="s69" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">add $0x1, %eax</p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">108</p></td><td style="width:21pt"><p class="s69" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">mov %eax, 0x8049a1c</p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">113</p></td><td style="width:21pt"><p class="s70" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td><td style="width:31pt"><p class="s69" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s69" style="padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: left;">interrupt</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:31pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s134" style="padding-left: 10pt;text-indent: 0pt;line-height: 7pt;text-align: left;">save T2’s state</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:31pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:57pt"><p class="s134" style="text-indent: 0pt;line-height: 7pt;text-align: right;">restore T1’s state</p></td><td style="width:67pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">108</p></td><td style="width:21pt"><p class="s70" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td><td style="width:31pt"><p class="s70" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">50</p></td></tr><tr style="height:8pt"><td style="width:57pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:67pt"><p class="s70" style="text-indent: 0pt;line-height: 7pt;text-align: left;">mov %eax, 0x8049a1c</p></td><td style="width:74pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:21pt"><p class="s70" style="padding-right: 3pt;text-indent: 0pt;line-height: 7pt;text-align: right;">113</p></td><td style="width:21pt"><p class="s70" style="padding-left: 2pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td><td style="width:31pt"><p class="s69" style="padding-right: 5pt;text-indent: 0pt;line-height: 7pt;text-align: center;">51</p></td></tr></table><p style="padding-top: 5pt;padding-left: 115pt;text-indent: 0pt;text-align: left;">Table 26.4: <b>The Problem: Up Close and Personal</b></p><p class="s41" style="padding-top: 7pt;padding-left: 68pt;text-indent: 0pt;line-height: 88%;text-align: justify;">counter <span class="p">is still 50 at this point, and thus Thread 2 has </span>eax=50<span class="p">. Let’s then assume that Thread 2 executes the next two instructions, increment- ing </span>eax <span class="p">by 1 (thus </span>eax=51<span class="p">), and then saving the contents of </span>eax <span class="p">into </span>counter <span class="p">(address 0x8049a1c). Thus, the global variable </span>counter <span class="p">now has the value 51.</span></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: justify;">Finally, another context switch occurs, and Thread 1 resumes running. Recall that it had just executed the <span class="s41">mov </span>and <span class="s41">add</span>, and is now about to perform the final <span class="s41">mov </span>instruction. Recall also that <span class="s41">eax=51</span>. Thus, the final <span class="s41">mov </span>instruction executes, and saves the value to memory; the counter is set to 51 again.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 88%;text-align: left;">Put simply, what has happened is this: the code to increment <span class="s41">counter </span>has been run twice, but <span class="s41">counter</span>, which started at 50, is now only equal to 51. A “correct” version of this program should have resulted in <span class="s41">counter </span>equal to 52.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">Here is a pictorial depiction of what happened and when in the ex- ample above. Assume, for this depiction, that the above code is loaded at address 100 in memory, like the following sequence (note for those of you used to nice, RISC-like instruction sets: x86 has variable-length instruc- tions; the <span class="s41">mov </span>instructions here take up 5 bytes of memory, whereas the <span class="s41">add </span>takes only 3):</p><p class="s38" style="padding-left: 73pt;text-indent: 0pt;text-align: left;">100 mov  0x8049a1c, %eax</p><p class="s38" style="padding-left: 73pt;text-indent: 0pt;text-align: left;">105 add  $0x1, %eax</p><p class="s38" style="padding-left: 73pt;text-indent: 0pt;text-align: left;">108 mov  %eax, 0x8049a1c</p><p style="padding-top: 1pt;padding-left: 68pt;text-indent: 11pt;line-height: 89%;text-align: justify;">With these assumptions, what happens is seen in Table <span style=" color: #00AEEF;">26.4</span>. Assume the counter starts at value 50, and trace through this example to make sure you understand what is going on.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">What we have demonstrated here is called a <b>race condition</b>: the results depend on the timing execution of the code. With some bad luck (i.e., context switches that occur at untimely points in the execution), we get the wrong result. In fact, we may get a different result each time; thus, instead of a nice <b>deterministic </b>computation (which we are used to from computers), we call this result <b>indeterminate</b>, where it is not known what the output will be and it is indeed likely to be different across runs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Because multiple threads executing this code can result in a race con- dition, we call this code a <b>critical section</b>. A critical section is a piece of code that accesses a shared variable (or more generally, a shared resource) and must not be concurrently executed by more than one thread.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">What we really want for this code is what we call <b>mutual exclusion</b>. This property guarantees that if one thread is executing within the critical section, the others will be prevented from doing so.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">Virtually all of these terms, by the way, were coined by Edsger Dijk- stra, who was a pioneer in the field and indeed won the Turing Award because of this and other work; see his 1968 paper on “Cooperating Se- quential Processes” [D68] for an amazingly clear description of the prob- lem. We’ll be hearing more about Dijkstra in this section of the book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part263.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part265.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
