<?xml version="1.0" encoding="utf-8"?><html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/"><head>
<meta name="dcterms.conformsTo" content="PXE Basic 1.0"></meta>
<meta name="generator" content="PXE Tools version 1.39.109"></meta>
<!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.109, partial=false-->
<title>9.3 Voice-over-IP</title><link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/sepia.css"></link><link rel="alternate stylesheet" type="text/css" title="night" href="../css/night.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/main.css"></link><link rel="stylesheet" type="text/css" title="day" href="../css/print.css"></link>
<script src="js/format_lg_obj.js"></script>
</head><body epub:type="bodymatter">
<section id="P7001011952000000000000000003477" class="level1"><header><h1 class="title" id="P700101195200000000000000000BB5F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB5F" epub:type="title"><span class="number">9.3</span> Voice-over-IP</h1></header>
<p id="P700101195200000000000000000BB60" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB60">Real-time conversational voice over the Internet is often referred to as <span class="keyword" id="P700101195200000000000000000347A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000347A"><b>Internet telephony</b></span>, since, from the user’s perspective, it is similar to the traditional circuit-switched telephone service. It is also commonly called <span class="keyword" id="P700101195200000000000000000347B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000347B"><b>Voice-over-IP (VoIP)</b></span>. In this section we describe the principles and protocols underlying VoIP. Conversational video is similar in many respects to VoIP, except that it includes the video of the participants as well as their voices. To keep the discussion focused and concrete, we focus here only on voice in this section rather than combined voice and video.</p>
<section id="P700101195200000000000000000347C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000347C" class="level2"><header><h1 class="title" id="P700101195200000000000000000BB61" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB61" epub:type="title"><span class="number">9.3.1</span> Limitations of the Best-Effort IP Service</h1></header>
<p id="P700101195200000000000000000BB62" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB62">The Internet’s network-layer protocol, IP, provides best-effort service. That is to say the service makes its best effort to move each datagram from source to destination as quickly as possible but makes no promises whatsoever about getting the packet <span class="pagebreak" title="689" id="P700101195200000000000000000347F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000347F" epub:type="pagebreak" role="doc-pagebreak"></span>to the destination within some delay bound or about a limit on the percentage of packets lost. The lack of such guarantees poses significant challenges to the design of real-time conversational applications, which are acutely sensitive to packet delay, jitter, and loss.</p>
<p id="P700101195200000000000000000BB63" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB63">In this section, we’ll cover several ways in which the performance of VoIP over a best-effort network can be enhanced. Our focus will be on application-layer techniques, that is, approaches that do not require any changes in the network core or even in the transport layer at the end hosts. To keep the discussion concrete, we’ll discuss the limitations of best-effort IP service in the context of a specific VoIP example. The sender generates bytes at a rate of 8,000 bytes per second; every 20 msecs the sender gathers these bytes into a chunk. A chunk and a special header (discussed below) are encapsulated in a UDP segment, via a call to the socket interface. Thus, the number of bytes in a chunk is <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="334" altimg-height="17" altimg="../images/ch09math17.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>20</m:mn><m:mtext> msecs</m:mtext></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>⋅</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>8</m:mn><m:mo>,</m:mo><m:mn>000</m:mn><m:mtext> bytes</m:mtext><m:mo>/</m:mo><m:mi>sec</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mn>160</m:mn><m:mtext> bytes</m:mtext><m:mo>,</m:mo></m:mrow></m:math></span> and a UDP segment is sent every 20 msecs.</p>
<p id="P700101195200000000000000000BB64" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB64">If each packet makes it to the receiver with a constant end-to-end delay, then packets arrive at the receiver periodically every 20 msecs. In these ideal conditions, the receiver can simply play back each chunk as soon as it arrives. But unfortunately, some packets can be lost and most packets will not have the same end-to-end delay, even in a lightly congested Internet. For this reason, the receiver must take more care in determining (1) when to play back a chunk, and (2) what to do with a missing chunk.</p>
<section id="P7001011952000000000000000003482" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003482" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB65" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB65" epub:type="title">Packet Loss</h1></header>
<p id="P700101195200000000000000000BB66" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB66">Consider one of the UDP segments generated by our VoIP application. The UDP segment is encapsulated in an IP datagram. As the datagram wanders through the network, it passes through router buffers (that is, queues) while waiting for transmission on outbound links. It is possible that one or more of the buffers in the path from sender to receiver is full, in which case the arriving IP datagram may be discarded, never to arrive at the receiving application.</p>
<p id="P700101195200000000000000000BB67" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB67">Loss could be eliminated by sending the packets over TCP (which provides for reliable data transfer) rather than over UDP. However, retransmission mechanisms are often considered unacceptable for conversational real-time audio applications such as VoIP, because they increase end-to-end delay <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003849" data-foobar="7">[Bolot 1996]</a>. Furthermore, due to TCP congestion control, packet loss may result in a reduction of the TCP sender’s transmission rate to a rate that is lower than the receiver’s drain rate, possibly leading to buffer starvation. This can have a severe impact on voice intelligibility at the receiver. For these reasons, most existing VoIP applications run over UDP by default. <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000382A" data-foobar="7">[Baset 2006]</a> reports that UDP is used by Skype unless a user is behind a NAT or firewall that blocks UDP segments (in which case TCP is used).</p>
<p id="P700101195200000000000000000BB68" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB68">But losing packets is not necessarily as disastrous as one might think. Indeed, packet loss rates between 1 and 20 percent can be tolerated, depending on how voice is encoded and transmitted, and on how the loss is concealed at the receiver. For example, forward error correction (FEC) can help conceal packet loss. We’ll see <span class="pagebreak" title="690" id="P7001011952000000000000000003487" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003487" epub:type="pagebreak" role="doc-pagebreak"></span>below that with FEC, redundant information is transmitted along with the original information so that some of the lost original data can be recovered from the redundant information. Nevertheless, if one or more of the links between sender and receiver is severely congested, and packet loss exceeds 10 to 20 percent (for example, on a wireless link), then there is really nothing that can be done to achieve acceptable audio quality. Clearly, best-effort service has its limitations.</p>
</section>
<section id="P7001011952000000000000000003488" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003488" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB69" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB69" epub:type="title">End-to-End Delay</h1></header>
<p id="P700101195200000000000000000BB6A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6A"><span class="keyword" id="P700101195200000000000000000348B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000348B"><b>End-to-end delay</b></span> is the accumulation of transmission, processing, and queuing delays in routers; propagation delays in links; and end-system processing delays. For real-time conversational applications, such as VoIP, end-to-end delays smaller than 150 msecs are not perceived by a human listener; delays between 150 and 400 msecs can be acceptable but are not ideal; and delays exceeding 400 msecs can seriously hinder the interactivity in voice conversations. The receiving side of a VoIP application will typically disregard any packets that are delayed more than a certain threshold, for example, more than 400 msecs. Thus, packets that are delayed by more than the threshold are effectively lost.</p>
</section>
<section id="P700101195200000000000000000348C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000348C" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB6B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6B" epub:type="title">Packet Jitter</h1></header>
<p id="P700101195200000000000000000BB6C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6C">A crucial component of end-to-end delay is the varying queuing delays that a packet experiences in the network’s routers. Because of these varying delays, the time from when a packet is generated at the source until it is received at the receiver can fluctuate from packet to packet, as shown in <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003439" data-foobar="7"><span class="label">Figure</span> <span class="number">9.1</span></a>. This phenomenon is called <span class="keyword" id="P700101195200000000000000000348F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000348F"><b>jitter</b></span>. As an example, consider two consecutive packets in our VoIP application. The sender sends the second packet 20 msecs after sending the first packet. But at the receiver, the spacing between these packets can become greater than 20 msecs. To see this, suppose the first packet arrives at a nearly empty queue at a router, but just before the second packet arrives at the queue a large number of packets from other sources arrive at the same queue. Because the first packet experiences a small queuing delay and the second packet suffers a large queuing delay at this router, the first and second packets become spaced by more than 20 msecs. The spacing between consecutive packets can also become less than 20 msecs. To see this, again consider two consecutive packets. Suppose the first packet joins the end of a queue with a large number of packets, and the second packet arrives at the queue before this first packet is transmitted and before any packets from other sources arrive at the queue. In this case, our two packets find themselves one right after the other in the queue. If the time it takes to transmit a packet on the router’s outbound link is less than 20 msecs, then the spacing between first and second packets becomes less than 20 msecs.</p>
<p id="P700101195200000000000000000BB6D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6D">The situation is analogous to driving cars on roads. Suppose you and your friend are each driving in your own cars from San Diego to Phoenix. Suppose you and your <span class="pagebreak" title="691" id="P7001011952000000000000000003491" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003491" epub:type="pagebreak" role="doc-pagebreak"></span>friend have similar driving styles, and that you both drive at 100 km/hour, traffic permitting. If your friend starts out one hour before you, depending on intervening traffic, you may arrive at Phoenix more or less than one hour after your friend.</p>
<p id="P700101195200000000000000000BB6E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6E">If the receiver ignores the presence of jitter and plays out chunks as soon as they arrive, then the resulting audio quality can easily become unintelligible at the receiver. Fortunately, jitter can often be removed by using <span class="keyword" id="P7001011952000000000000000003493" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003493"><b>sequence numbers</b></span>, <span class="keyword" id="P7001011952000000000000000003494" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003494"><b>timestamps</b></span>, and a <span class="keyword" id="P7001011952000000000000000003495" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003495"><b>playout delay</b></span>, as discussed below.</p>
</section>
</section>
<section id="P7001011952000000000000000003496" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003496" class="level2"><header><h1 class="title" id="P700101195200000000000000000BB6F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB6F" epub:type="title"><span class="number">9.3.2</span> Removing Jitter at the Receiver for Audio</h1></header>
<p id="P700101195200000000000000000BB70" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB70">For our VoIP application, where packets are being generated periodically, the receiver should attempt to provide periodic playout of voice chunks in the presence of random network jitter. This is typically done by combining the following two mechanisms:</p>
<ul id="P700101195200000000000000000BB71" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB71">
<li id="P700101195200000000000000000BB72" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB72"><p id="P700101195200000000000000000BB73" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB73"><span class="leadin">Prepending each chunk with a timestamp.</span> The sender stamps each chunk with the time at which the chunk was generated.</p></li>
<li id="P700101195200000000000000000BB74" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB74"><p id="P700101195200000000000000000BB75" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB75"><span class="leadin">Delaying playout of chunks at the receiver.</span> As we saw in our earlier discussion of <a class="xref" href="fileP700101195200000000000000000342F.xhtml#P7001011952000000000000000003439" data-foobar="7"><span class="label">Figure</span> <span class="number">9.1</span></a>, the playout delay of the received audio chunks must be long enough so that most of the packets are received before their scheduled playout times. This playout delay can either be fixed throughout the duration of the audio session or vary adaptively during the audio session lifetime.</p></li>
</ul>
<p class="continued" id="P700101195200000000000000000BB76" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB76">We now discuss how these three mechanisms, when combined, can alleviate or even eliminate the effects of jitter. We examine two playback strategies: fixed playout delay and adaptive playout delay.</p>
<section id="P700101195200000000000000000349F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000349F" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB77" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB77" epub:type="title">Fixed Playout Delay</h1></header>
<p id="P700101195200000000000000000BB78" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB78">With the fixed-delay strategy, the receiver attempts to play out each chunk exactly <i>q</i> msecs after the chunk is generated. So if a chunk is timestamped at the sender at time <i>t</i>, the receiver plays out the chunk at time <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="48" altimg-height="16" altimg="../images/ch09math18.png"><m:mrow><m:mi>t</m:mi><m:mo>+</m:mo><m:mi>q</m:mi><m:mo>,</m:mo></m:mrow></m:math></span> assuming the chunk has arrived by that time. Packets that arrive after their scheduled playout times are discarded and considered lost.</p>
<p id="P700101195200000000000000000BB79" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB79">What is a good choice for <i>q</i>? VoIP can support delays up to about 400 msecs, although a more satisfying conversational experience is achieved with smaller values of <i>q</i>. On the other hand, if <i>q</i> is made much smaller than 400 msecs, then many packets may miss their scheduled playback times due to the network-induced packet jitter. Roughly speaking, if large variations in end-to-end delay are typical, it is preferable to use a large <i>q</i>; on the other hand, if delay is small and variations in delay are also small, it is preferable to use a small <i>q</i>, perhaps less than 150 msecs.</p>
<p id="P700101195200000000000000000BB7A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB7A">The trade-off between the playback delay and packet loss is illustrated in <a class="xref" href="#P70010119520000000000000000034A5" data-foobar="1"><span class="label">Figure</span> <span class="number">9.4</span></a>. The figure shows the times at which packets are generated and played<span class="pagebreak" title="692" id="P70010119520000000000000000034A4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034A4" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000034A5" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034A5">
<img alt="Illustration of packet loss for different fixed playout delays." height="362" width="561" aria-describedby="P70010119520000000000000000034A9" id="P700101195200000000000000000BB7B" data-uri="P7001011952000000000000000005635" src="../images/4055109004.png"></img>
<figcaption id="P700101195200000000000000000BB7C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB7C"><header><h1 class="title" id="P700101195200000000000000000BB7D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB7D" epub:type="title"><span class="label">Figure </span><span class="number">9.4</span> Packet loss for different fixed playout delays</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000034A9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034A9" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109004.xhtml#la_4055109004"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000BB81" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB81">out for a single talk spurt. Two distinct initial playout delays are considered. As shown by the leftmost staircase, the sender generates packets at regular intervals—say, every 20 msecs. The first packet in this talk spurt is received at time <i>r</i>. As shown in the figure, the arrivals of subsequent packets are not evenly spaced due to the network jitter.</p>
<p id="P700101195200000000000000000BB82" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB82">For the first playout schedule, the fixed initial playout delay is set to <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="52" altimg-height="13" altimg="../images/ch09math19.png"><m:mrow><m:mi>p</m:mi><m:mo>−</m:mo><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> With this schedule, the fourth packet does not arrive by its scheduled playout time, and the receiver considers it lost. For the second playout schedule, the fixed initial playout delay is set to <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="18" altimg="../images/ch09math20.png"><m:mrow><m:msup><m:mi>p</m:mi><m:mo>′</m:mo></m:msup><m:mo>−</m:mo><m:mi>r</m:mi><m:mo>.</m:mo></m:mrow></m:math></span> For this schedule, all packets arrive before their scheduled playout times, and there is therefore no loss.</p>
</section>
<section id="P70010119520000000000000000034AF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034AF" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB83" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB83" epub:type="title">Adaptive Playout Delay</h1></header>
<p id="P700101195200000000000000000BB84" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB84">The previous example demonstrates an important delay-loss trade-off that arises when designing a playout strategy with fixed playout delays. By making the initial playout delay large, most packets will make their deadlines and there will therefore be negligible loss; however, for conversational services such as VoIP, long delays can become bothersome if not intolerable. Ideally, we would like the playout delay to be minimized subject to the constraint that the loss be below a few percent.</p>
<p id="P700101195200000000000000000BB85" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB85">The natural way to deal with this trade-off is to estimate the network delay and the variance of the network delay, and to adjust the playout delay accordingly at the beginning of each talk spurt. This adaptive adjustment of playout delays at the beginning of the talk spurts will cause the sender’s silent periods to be compressed and elongated; however, compression and elongation of silence by a small amount is not noticeable in speech.</p>
<p id="P700101195200000000000000000BB86" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB86"><span class="pagebreak" title="693" id="P70010119520000000000000000034B4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034B4" epub:type="pagebreak" role="doc-pagebreak"></span>Following <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AD0" data-foobar="7">[Ramjee 1994]</a>, we now describe a generic algorithm that the receiver can use to adaptively adjust its playout delays. To this end, let</p>
<ul class="ul_none" id="P700101195200000000000000000BB87" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB87">
<li id="P700101195200000000000000000BB88" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB88"><p id="P700101195200000000000000000BB89" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB89"><span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="33" altimg-height="19" altimg="../images/ch09math21.png"><m:mrow><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo></m:mrow></m:math></span> the timestamp of the <i>i</i>th packet <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="15" altimg-height="5" altimg="../images/ch09math22.png"><m:mo>=</m:mo></m:math></span> the time the packet was generated by the sender</p></li>
<li id="P700101195200000000000000000BB8A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8A"><p id="P700101195200000000000000000BB8B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8B"><span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="34" altimg-height="15" altimg="../images/ch09math23.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo></m:mrow></m:math></span> the time packet <i>i</i> is received by receiver</p></li>
<li id="P700101195200000000000000000BB8C" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8C"><p id="P700101195200000000000000000BB8D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8D"><span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="39" altimg-height="15" altimg="../images/ch09math24.png"><m:mrow><m:msub><m:mi>p</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo></m:mrow></m:math></span> the time packet <i>i</i> is played at receiver</p></li>
</ul>
<p id="P700101195200000000000000000BB8E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8E">The end-to-end network delay of the <i>i</i>th packet is <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="51" altimg-height="15" altimg="../images/ch09math25.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>.</m:mo></m:mrow></m:math></span> Due to network jitter, this delay will vary from packet to packet. Let <i>d<sub>i</sub></i> denote an estimate of the <i>average</i> network delay upon reception of the <i>i</i>th packet. This estimate is constructed from the timestamps as follows:</p>
<div class="informalequation" id="P70010119520000000000000000034BD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034BD"><m:math display="block" alttext="" data-uri="" altimg-width="241" altimg-height="17" altimg="../images/ch09math26.png"><m:mrow><m:msub><m:mi>d</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>u</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:msub><m:mi>d</m:mi><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>+</m:mo><m:mi>u</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:msub><m:mi>r</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000BB8F" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB8F">where <i>u</i> is a fixed constant (for example, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="73" altimg-height="16" altimg="../images/ch09math27.png"><m:mrow><m:mi>u</m:mi><m:mo>=</m:mo><m:mn>0.01</m:mn></m:mrow></m:math></span>). Thus <i>d<sub>i</sub></i> is a smoothed average of the observed network delays <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="151" altimg-height="15" altimg="../images/ch09math28.png"><m:mrow><m:msub><m:mi>r</m:mi><m:mn>1</m:mn></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mo>…</m:mo><m:mo>,</m:mo><m:msub><m:mi>r</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>.</m:mo></m:mrow></m:math></span> The estimate places more weight on the recently observed network delays than on the observed network delays of the distant past. This form of estimate should not be completely unfamiliar; a similar idea is used to estimate round-trip times in TCP, as discussed in <a class="xref" href="fileP70010119520000000000000000010EC.xhtml#P70010119520000000000000000010EC" data-foobar="7"><span class="label">Chapter</span> <span class="number">3</span></a>. Let <i>v<sub>i</sub></i> denote an estimate of the average deviation of the delay from the estimated average delay. This estimate is also constructed from the timestamps:</p>
<div class="informalequation" id="P70010119520000000000000000034BF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034BF"><m:math display="block" alttext="" data-uri="" altimg-width="284" altimg-height="21" altimg="../images/ch09math29.png"><m:mrow><m:msub><m:mi>v</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:mrow><m:mn>1</m:mn><m:mo>−</m:mo><m:mi>u</m:mi></m:mrow><m:mo>)</m:mo></m:mrow><m:msub><m:mi>v</m:mi><m:mrow><m:mi>i</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>+</m:mo><m:mi>u</m:mi><m:mrow><m:mo>|</m:mo> <m:mrow><m:msub><m:mi>r</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>d</m:mi><m:mi>i</m:mi></m:msub></m:mrow><m:mo>|</m:mo></m:mrow></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000BB90" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB90">The estimates <i>d<sub>i</sub></i> and <i>v<sub>i</sub></i> are calculated for every packet received, although they are used only to determine the playout point for the first packet in any talk spurt.</p>
<p id="P700101195200000000000000000BB91" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB91">Once having calculated these estimates, the receiver employs the following algorithm for the playout of packets. If packet <i>i</i> is the first packet of a talk spurt, its playout time, <i>p<sub>i</sub></i>, is computed as:</p>
<div class="informalequation" id="P70010119520000000000000000034C2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034C2"><m:math display="block" alttext="" data-uri="" altimg-width="148" altimg-height="17" altimg="../images/ch09math30.png"><m:mrow><m:msub><m:mi>p</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>+</m:mo><m:msub><m:mi>d</m:mi><m:mi>i</m:mi></m:msub><m:mo>+</m:mo><m:mi>K</m:mi><m:msub><m:mi>v</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000BB92" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB92">where <i>K</i> is a positive constant (for example, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="54" altimg-height="13" altimg="../images/ch09math31.png"><m:mrow><m:mi>K</m:mi><m:mo>=</m:mo><m:mn>4</m:mn></m:mrow></m:math></span>). The purpose of the <i>Kv<sub>i</sub></i> term is to set the playout time far enough into the future so that only a small fraction of the arriving packets in the talk spurt will be lost due to late arrivals. The playout point for any subsequent packet in a talk spurt is computed as an offset from the point in time when the first packet in the talk spurt was played out. In particular, let</p>
<div class="informalequation" id="P70010119520000000000000000034C4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034C4"><m:math display="block" alttext="" data-uri="" altimg-width="93" altimg-height="15" altimg="../images/ch09math32.png"><m:mrow><m:msub><m:mi>q</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:msub><m:mi>p</m:mi><m:mi>i</m:mi></m:msub><m:mo>−</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:math></div>
<p class="continued" id="P700101195200000000000000000BB93" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB93"><span class="pagebreak" title="694" id="P70010119520000000000000000034C6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034C6" epub:type="pagebreak" role="doc-pagebreak"></span>be the length of time from when the first packet in the talk spurt is generated until it is played out. If packet <i>j</i> also belongs to this talk spurt, it is played out at time</p>
<div class="informalequation" id="P70010119520000000000000000034C7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034C7"><m:math display="block" alttext="" data-uri="" altimg-width="95" altimg-height="19" altimg="../images/ch09math33.png"><m:mrow><m:msub><m:mi>p</m:mi><m:mi>j</m:mi></m:msub><m:mo>=</m:mo><m:msub><m:mi>t</m:mi><m:mi>j</m:mi></m:msub><m:mo>+</m:mo><m:msub><m:mi>q</m:mi><m:mi>i</m:mi></m:msub></m:mrow></m:math></div>
<p id="P700101195200000000000000000BB94" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB94">The algorithm just described makes perfect sense assuming that the receiver can tell whether a packet is the first packet in the talk spurt. This can be done by examining the signal energy in each received packet.</p>
</section>
</section>
<section id="P70010119520000000000000000034C9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034C9" class="level2"><header><h1 class="title" id="P700101195200000000000000000BB95" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB95" epub:type="title"><span class="number">9.3.3</span> Recovering from Packet Loss</h1></header>
<p id="P700101195200000000000000000BB96" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB96">We have discussed in some detail how a VoIP application can deal with packet jitter. We now briefly describe several schemes that attempt to preserve acceptable audio quality in the presence of packet loss. Such schemes are called <span class="keyword" id="P70010119520000000000000000034CC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034CC"><b>loss recovery schemes</b></span>. Here we define packet loss in a broad sense: A packet is lost either if it never arrives at the receiver or if it arrives after its scheduled playout time. Our VoIP example will again serve as a context for describing loss recovery schemes.</p>
<p id="P700101195200000000000000000BB97" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB97">As mentioned at the beginning of this section, retransmitting lost packets may not be feasible in a real-time conversational application such as VoIP. Indeed, retransmitting a packet that has missed its playout deadline serves absolutely no purpose. And retransmitting a packet that overflowed a router queue cannot normally be accomplished quickly enough. Because of these considerations, VoIP applications often use some type of loss anticipation scheme. Two types of loss anticipation schemes are <span class="keyword" id="P70010119520000000000000000034CE" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034CE"><b>forward error correction (FEC)</b> and <b>interleaving</b></span>.</p>
<section id="P70010119520000000000000000034CF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034CF" class="level3"><header><h1 class="title" id="P700101195200000000000000000BB98" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB98" epub:type="title">Forward Error Correction (FEC)</h1></header>
<p id="P700101195200000000000000000BB99" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB99">The basic idea of FEC is to add redundant information to the original packet stream. For the cost of marginally increasing the transmission rate, the redundant information can be used to reconstruct approximations or exact versions of some of the lost packets. Following <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003849" data-foobar="7">[Bolot 1996]</a> and <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AA2" data-foobar="7">[Perkins 1998]</a>, we now outline two simple FEC mechanisms. The first mechanism sends a redundant encoded chunk after every <i>n</i> chunks. The redundant chunk is obtained by exclusive OR-ing the <i>n</i> original chunks <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C09" data-foobar="7">[Shacham 1990]</a>. In this manner if any one packet of the group of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="13" altimg="../images/ch09math34.png"><m:mrow><m:mi>n</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> packets is lost, the receiver can fully reconstruct the lost packet. But if two or more packets in a group are lost, the receiver cannot reconstruct the lost packets. By keeping <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="47" altimg-height="13" altimg="../images/ch09math35.png"><m:mrow><m:mi>n</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:math></span>, the group size, small, a large fraction of the lost packets can be recovered when loss is not excessive. However, the smaller the group size, the greater the relative increase of the transmission rate. In particular, the transmission rate increases by a factor of 1/<i>n</i>, so that, if <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="55" altimg-height="16" altimg="../images/ch09math36.png"><m:mrow><m:mi>n</m:mi><m:mo>=</m:mo><m:mn>3</m:mn><m:mo>,</m:mo></m:mrow></m:math></span> then the transmission rate increases by 33 percent. Furthermore, this simple scheme increases the playout delay, as the receiver must wait to receive the entire group of packets before it can <span class="pagebreak" title="695" id="P70010119520000000000000000034D2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034D2" epub:type="pagebreak" role="doc-pagebreak"></span>begin playout. For more practical details about how FEC works for multimedia transport see <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003BAA" data-foobar="7">[RFC 5109]</a>.</p>
<p id="P700101195200000000000000000BB9A" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB9A">The second FEC mechanism is to send a lower-resolution audio stream as the redundant information. For example, the sender might create a nominal audio stream and a corresponding low-resolution, low-bit rate audio stream. (The nominal stream could be a PCM encoding at 64 kbps, and the lower-quality stream could be a GSM encoding at 13 kbps.) The low-bit rate stream is referred to as the redundant stream. As shown in <a class="xref" href="#P70010119520000000000000000034D5" data-foobar="1"><span class="label">Figure</span> <span class="number">9.5</span></a>, the sender constructs the <i>n</i>th packet by taking the <i>n</i>th chunk from the nominal stream and appending to it the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="17" altimg="../images/ch09math37.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>st chunk from the redundant stream. In this manner, whenever there is nonconsecutive packet loss, the receiver can conceal the loss by playing out the low-bit rate encoded chunk that arrives with the subsequent packet. Of course, low-bit rate chunks give lower quality than the nominal chunks. However, a stream of mostly high-quality chunks, occasional low-quality chunks, and no missing chunks gives good overall audio quality. Note that in this scheme, the receiver only has to receive two packets before playback, so that the increased playout delay is small. Furthermore, if the low-bit rate encoding is much less than the nominal encoding, then the marginal increase in the transmission rate will be small.</p>
<p id="P700101195200000000000000000BB9B" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB9B">In order to cope with consecutive loss, we can use a simple variation. Instead of appending just the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="17" altimg="../images/ch09math38.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>st low-bit rate chunk to the <i>n</i>th nominal chunk, the sender can append the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="17" altimg="../images/ch09math39.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>st and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="17" altimg="../images/ch09math40.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>2</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>nd low-bit rate chunk, or append the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="60" altimg-height="17" altimg="../images/ch09math41.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>st and <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="61" altimg-height="17" altimg="../images/ch09math42.png"><m:mrow><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>n</m:mi><m:mo>−</m:mo><m:mn>3</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span>rd low-bit rate chunk, and so on. By appending more low-bit rate chunks to each nominal chunk, the audio quality at the receiver becomes acceptable for a wider variety of harsh best-effort environments. On the other hand, the additional chunks increase the transmission bandwidth and the playout delay.</p>
<figure id="P70010119520000000000000000034D5" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034D5">
<img alt="Illustration of piggybacking lower-quality redundant information." height="352" width="628" aria-describedby="P70010119520000000000000000034D9" id="P700101195200000000000000000BB9C" data-uri="P7001011952000000000000000005636" src="../images/4055109005.png"></img>
<figcaption id="P700101195200000000000000000BB9D" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB9D"><header><h1 class="title" id="P700101195200000000000000000BB9E" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BB9E" epub:type="title"><span class="label">Figure </span><span class="number">9.5</span> Piggybacking lower-quality redundant information</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000034D9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034D9" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109005.xhtml#la_4055109005"><span class="label">Description</span></a></div>
</section>
<section id="P70010119520000000000000000034DD" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034DD" class="level3"><header><h1 class="title" id="P700101195200000000000000000BBA2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA2" epub:type="title"><span class="pagebreak" title="696" id="P70010119520000000000000000034DF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034DF" epub:type="pagebreak" role="doc-pagebreak"></span>Interleaving</h1></header>
<p id="P700101195200000000000000000BBA3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA3">As an alternative to redundant transmission, a VoIP application can send interleaved audio. As shown in <a class="xref" href="#P70010119520000000000000000034E5" data-foobar="1"><span class="label">Figure</span> <span class="number">9.6</span></a>, the sender resequences units of audio data before transmission, so that originally adjacent units are separated by a certain distance in the transmitted stream. Interleaving can mitigate the effect of packet losses. If, for example, units are 5 msecs in length and chunks are 20 msecs (that is, four units per chunk), then the first chunk could contain units 1, 5, 9, and 13; the second chunk could contain units 2, 6, 10, and 14; and so on. <a class="xref" href="#P70010119520000000000000000034E5" data-foobar="1"><span class="label">Figure</span> <span class="number">9.6</span></a> shows that the loss of a single packet from an interleaved stream results in multiple small gaps in the reconstructed stream, as opposed to the single large gap that would occur in a noninterleaved stream.</p>
<p id="P700101195200000000000000000BBA4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA4">Interleaving can significantly improve the perceived quality of an audio stream <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AA2" data-foobar="7">[Perkins 1998]</a>. It also has low overhead. The obvious disadvantage of interleaving is that it increases latency. This limits its use for conversational applications such as VoIP, although it can perform well for streaming stored audio. A major advantage of interleaving is that it does not increase the bandwidth requirements of a stream.</p>
</section>
<section id="P70010119520000000000000000034E2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034E2" class="level3"><header><h1 class="title" id="P700101195200000000000000000BBA5" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA5" epub:type="title">Error Concealment</h1></header>
<p id="P700101195200000000000000000BBA6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA6">Error concealment schemes attempt to produce a replacement for a lost packet that is similar to the original. As discussed in <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AA2" data-foobar="7">[Perkins 1998]</a>, this is possible since audio</p>
<figure id="P70010119520000000000000000034E5" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034E5">
<img alt="Sending interleaved audio." height="442" width="700" aria-describedby="P70010119520000000000000000034E9" id="P700101195200000000000000000BBA7" data-uri="P7001011952000000000000000005637" src="../images/4055109006.png"></img>
<figcaption id="P700101195200000000000000000BBA8" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA8"><header><h1 class="title" id="P700101195200000000000000000BBA9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBA9" epub:type="title"><span class="label">Figure </span><span class="number">9.6</span> Sending interleaved audio</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000034E9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034E9" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109006.xhtml#la_4055109006"><span class="label">Description</span></a></div>
<p class="continued" id="P700101195200000000000000000BBAF" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBAF"><span class="pagebreak" title="697" id="P70010119520000000000000000034F0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034F0" epub:type="pagebreak" role="doc-pagebreak"></span>signals, and in particular speech, exhibit large amounts of short-term self-similarity. As such, these techniques work for relatively small loss rates (less than 15 percent), and for small packets (4–40 msecs). When the loss length approaches the length of a phoneme (5–100 msecs) these techniques break down, since whole phonemes may be missed by the listener.</p>
<p id="P700101195200000000000000000BBB0" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB0">Perhaps the simplest form of receiver-based recovery is packet repetition. Packet repetition replaces lost packets with copies of the packets that arrived immediately before the loss. It has low computational complexity and performs reasonably well. Another form of receiver-based recovery is interpolation, which uses audio before and after the loss to interpolate a suitable packet to cover the loss. Interpolation performs somewhat better than packet repetition but is significantly more computationally intensive <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AA2" data-foobar="7">[Perkins 1998]</a>.</p>
</section>
</section>
<section id="P70010119520000000000000000034F2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034F2" class="level2"><header><h1 class="title" id="P700101195200000000000000000BBB1" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB1" epub:type="title"><span class="number">9.3.4</span> Case Study: VoIP with Skype</h1></header>
<p id="P700101195200000000000000000BBB2" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB2">Skype is an immensely popular VoIP application with over 50 million accounts active on a daily basis. In addition to providing host-to-host VoIP service, Skype offers host-to-phone services, phone-to-host services, and multi-party host-to-host video conferencing services. (Here, a host is again any Internet connected IP device, including PCs, tablets, and smartphones.) Skype was acquired by Microsoft in 2011.</p>
<p id="P700101195200000000000000000BBB3" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB3">Because the Skype protocol is proprietary, and because all Skype’s control and media packets are encrypted, it is difficult to precisely determine how Skype operates. Nevertheless, from the Skype Web site and several measurement studies, researchers have learned how Skype generally works <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000382A" data-foobar="7">[Baset 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003938" data-foobar="7">Guha 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P700101195200000000000000000387B" data-foobar="7">Chen 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C3B" data-foobar="7">Suh 2006</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AD4" data-foobar="7">Ren 2006</a>; Zhang X 2012]. For both voice and video, the Skype clients have at their disposal many different codecs, which are capable of encoding the media at a wide range of rates and qualities. For example, video rates for Skype have been measured to be as low as 30 kbps for a low-quality session up to almost 1 Mbps for a high quality session [Zhang X 2012]. Typically, Skype’s audio quality is better than the “POTS” (Plain Old Telephone Service) quality provided by the wire-line phone system. (Skype codecs typically sample voice at 16,000 samples/sec or higher, which provides richer tones than POTS, which samples at 8,000/sec.) By default, Skype sends audio and video packets over UDP. However, control packets are sent over TCP, and media packets are also sent over TCP when firewalls block UDP streams. Skype uses FEC for loss recovery for both voice and video streams sent over UDP. The Skype client also adapts the audio and video streams it sends to current network conditions, by changing video quality and FEC overhead [Zhang X 2012].</p>
<p id="P700101195200000000000000000BBB4" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB4">Skype uses P2P techniques in a number of innovative ways, nicely illustrating how P2P can be used in applications that go beyond content distribution and file sharing. As with instant messaging, host-to-host Internet telephony is inherently P2P since, at the heart of the application, pairs of users (that is, peers) communicate with each other in real time. But Skype also employs P2P techniques for two other important functions, namely, for user location and for NAT traversal.<span class="pagebreak" title="698" id="P70010119520000000000000000034F7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034F7" epub:type="pagebreak" role="doc-pagebreak"></span></p>
<figure id="P70010119520000000000000000034F8" class="figure" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034F8">
<img alt="Illustration of Skype peers." height="514" width="526" aria-describedby="P70010119520000000000000000034FC" id="P700101195200000000000000000BBB5" data-uri="P7001011952000000000000000005638" src="../images/4055109007.png"></img>
<figcaption id="P700101195200000000000000000BBB6" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB6"><header><h1 class="title" id="P700101195200000000000000000BBB7" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB7" epub:type="title"><span class="label">Figure </span><span class="number">9.7</span> Skype peers</h1></header>

</figcaption>
</figure><div class="longdesc" id="P70010119520000000000000000034FC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P70010119520000000000000000034FC" aria-hidden="false"><a class="xref" aria-hidden="false" href="../longalt/la_4055109007.xhtml#la_4055109007"><span class="label">Description</span></a></div>
<p id="P700101195200000000000000000BBB9" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBB9">As shown in <a class="xref" href="#P70010119520000000000000000034F8" data-foobar="1"><span class="label">Figure</span> <span class="number">9.7</span></a>, the peers (hosts) in Skype are organized into a hierarchical overlay network, with each peer classified as a super peer or an ordinary peer. Skype maintains an index that maps Skype usernames to current IP addresses (and port numbers). This index is distributed over the super peers. When Alice wants to call Bob, her Skype client searches the distributed index to determine Bob’s current IP address. Because the Skype protocol is proprietary, it is currently not known how the index mappings are organized across the super peers, although some form of DHT organization is very possible.</p>
<p id="P700101195200000000000000000BBBA" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBA">P2P techniques are also used in Skype <span class="keyword" id="P7001011952000000000000000003500" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003500"><b>relays</b></span>, which are useful for establishing calls between hosts in home networks. Many home network configurations provide access to the Internet through NATs, as discussed in <a class="xref" href="fileP70010119520000000000000000019C1.xhtml#P70010119520000000000000000019C1" data-foobar="7"><span class="label">Chapter</span> <span class="number">4</span></a>. Recall that a NAT prevents a host from outside the home network from initiating a connection to a host within the home network. If <i>both</i> Skype callers have NATs, then there is a problem—neither can accept a call initiated by the other, making a call seemingly impossible. The clever use of super peers and relays nicely solves this problem. Suppose that when Alice signs in, she is assigned to a non-NATed super peer and initiates a session to that super peer. (Since Alice is initiating the session, her NAT permits this session.) This session allows Alice and her super peer to exchange <span class="pagebreak" title="699" id="P7001011952000000000000000003501" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003501" epub:type="pagebreak" role="doc-pagebreak"></span>control messages. The same happens for Bob when he signs in. Now, when Alice wants to call Bob, she informs her super peer, who in turn informs Bob’s super peer, who in turn informs Bob of Alice’s incoming call. If Bob accepts the call, the two super peers select a third non-NATed super peer—the relay peer—whose job will be to relay data between Alice and Bob. Alice’s and Bob’s super peers then instruct Alice and Bob respectively to initiate a session with the relay. As shown in <a class="xref" href="#P70010119520000000000000000034F8" data-foobar="1"><span class="label">Figure</span> <span class="number">9.7</span></a>, Alice then sends voice packets to the relay over the Alice-to-relay connection (which was initiated by Alice), and the relay then forwards these packets over the relay-to-Bob connection (which was initiated by Bob); packets from Bob to Alice flow over these same two relay connections in reverse. And <i>voila!</i>—Bob and Alice have an end-to-end connection even though neither can accept a session originating from outside.</p>
<p id="P700101195200000000000000000BBBB" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBB">Up to now, our discussion on Skype has focused on calls involving two persons. Now let’s examine multi-party audio conference calls. With <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="54" altimg-height="14" altimg="../images/ch09math43.png"><m:mrow><m:mi>N</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn></m:mrow></m:math></span> participants, if each user were to send a copy of its audio stream to each of the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math44.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> other users, then a total of <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="77" altimg-height="17" altimg="../images/ch09math45.png"><m:mrow><m:mi>N</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span> audio streams would need to be sent into the network to support the audio conference. To reduce this bandwidth usage, Skype employs a clever distribution technique. Specifically, each user sends its audio stream to the conference initiator. The conference initiator combines the audio streams into one stream (basically by adding all the audio signals together) and then sends a copy of each combined stream to each of the other <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math46.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> participants. In this manner, the number of streams is reduced to <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="78" altimg-height="17" altimg="../images/ch09math47.png"><m:mrow><m:mn>2</m:mn><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow><m:mo>.</m:mo></m:mrow></m:math></span> For ordinary two-person video conversations, Skype routes the call peer-to-peer, unless NAT traversal is required, in which case the call is relayed through a non-NATed peer, as described earlier. For a video conference call involving <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="54" altimg-height="14" altimg="../images/ch09math48.png"><m:mrow><m:mi>N</m:mi><m:mo>&gt;</m:mo><m:mn>2</m:mn></m:mrow></m:math></span> participants, due to the nature of the video medium, Skype does not combine the call into one stream at one location and then redistribute the stream to all the participants, as it does for voice calls. Instead, each participant’s video stream is routed to a server cluster (located in Estonia as of 2011), which in turn relays to each participant the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math49.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> streams of the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math50.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> other participants [Zhang X 2012]. You may be wondering why each participant sends a copy to a server rather than directly sending a copy of its video stream to each of the other <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math51.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> participants? Indeed, for both approaches, <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="77" altimg-height="17" altimg="../images/ch09math52.png"><m:mrow><m:mi>N</m:mi><m:mrow><m:mo>(</m:mo><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mo>)</m:mo></m:mrow></m:mrow></m:math></span> video streams are being collectively received by the <i>N</i> participants in the conference. The reason is, because upstream link bandwidths are significantly lower than downstream link bandwidths in most access links, the upstream links may not be able to support the <span class="inlineequation"><m:math display="inline" alttext="" data-uri="" altimg-width="50" altimg-height="14" altimg="../images/ch09math53.png"><m:mrow><m:mi>N</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:math></span> streams with the P2P approach.</p>
<p id="P700101195200000000000000000BBBC" data-uri="M09_KURO4140_07_SE_C09.xhtml#P700101195200000000000000000BBBC">VoIP systems such as Skype, WeChat, and Google Talk introduce new privacy concerns. Specifically, when Alice and Bob communicate over VoIP, Alice can sniff Bob’s IP address and then use geo-location services <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A3F" data-foobar="7">[MaxMind 2016</a>; <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003AC6" data-foobar="7">Quova 2016]</a> to determine Bob’s current location and ISP (for example, his work or home ISP). In fact, with Skype it is possible for Alice to block the transmission of certain packets during call establishment so that she obtains Bob’s current IP address, say every hour, without Bob knowing that he is being tracked and without being on Bob’s <span class="pagebreak" title="700" id="P7001011952000000000000000003504" data-uri="M09_KURO4140_07_SE_C09.xhtml#P7001011952000000000000000003504" epub:type="pagebreak" role="doc-pagebreak"></span>contact list. Furthermore, the IP address discovered from Skype can be correlated with IP addresses found in BitTorrent, so that Alice can determine the files that Bob is downloading <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003A22" data-foobar="7">[LeBlond 2011]</a>. Moreover, it is possible to partially decrypt a Skype call by doing a traffic analysis of the packet sizes in a stream <a class="biblioref" href="fileP70010119520000000000000000037E0.xhtml#P7001011952000000000000000003C79" data-foobar="7">[White 2011]</a>.</p>
</section>
</section></body></html>