<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Preface </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="frontmatter" class="calibre pcalibre pcalibre1">
<section class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000008CB6" epub:type="preface">
<section id="P7000497027000000000000000008CE4" data-uri="fm.xhtml#P7000497027000000000000000008CE4" class="pcalibre halftitlepage pcalibre1">
<header class="calibre1 pcalibre pcalibre1">
<h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000047723" data-uri="fm.xhtml#P7000497027000000000000000047723" epub:type="title">Book Overview</h1></header>
<p id="P7000497027000000000000000047724" data-uri="fm.xhtml#P7000497027000000000000000047724" class="pcalibre1 pcalibre calibre2">The CS:APP book consists of 12 chapters designed to capture the core ideas in computer systems. Here is an overview.</p>
<ul class="pcalibre ul_none pcalibre1" id="P7000497027000000000000000047725" data-uri="fm.xhtml#P7000497027000000000000000047725">
<li id="P7000497027000000000000000047726" data-uri="fm.xhtml#P7000497027000000000000000047726" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047727" data-uri="fm.xhtml#P7000497027000000000000000047727" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000007F.xhtml#P700049702700000000000000000007F"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">1</span></a>: A Tour of Computer Systems. </span>This chapter introduces the major ideas and themes in computer systems by tracing the life cycle of a simple "hello, world" program.</p></li>
<li id="P7000497027000000000000000047728" data-uri="fm.xhtml#P7000497027000000000000000047728" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047729" data-uri="fm.xhtml#P7000497027000000000000000047729" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000279.xhtml#P7000497027000000000000000000279"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">2</span></a>: Representing and Manipulating Information. </span>We cover computer arithmetic, emphasizing the properties of unsigned and two's-complement number representations that affect programmers. We consider how numbers are represented and therefore what range of values can be encoded for a given word size. We consider the effect of casting between signed and unsigned numbers. We cover the mathematical properties of arithmetic operations. Novice programmers are often surprised to learn that the (two's-complement) sum or product of two positive numbers can be negative. On the other hand, two's-complement arithmetic satisfies many of the algebraic properties of integer arithmetic, and hence a compiler can safely transform multiplication by a constant into a sequence of shifts and adds. We use the bit-level operations of C to demonstrate the principles and applications of Boolean algebra. We cover the IEEE floating-point format in terms of how it represents values and the mathematical properties of floating-point operations.</p>
<p id="P700049702700000000000000004772A" data-uri="fm.xhtml#P700049702700000000000000004772A" class="calibre15 pcalibre pcalibre1">Having a solid understanding of computer arithmetic is critical to writing reliable programs. For example, programmers and compilers cannot replace the expression <code id="P700049702700000000000000004772B" data-uri="fm.xhtml#P700049702700000000000000004772B" class="pcalibre1 calibre8 pcalibre">(x&lt;y)</code> with <code id="P700049702700000000000000004772C" data-uri="fm.xhtml#P700049702700000000000000004772C" class="pcalibre1 calibre8 pcalibre">(x-y &lt; 0)</code>, due to the possibility of overflow. They cannot even replace it with the expression <code id="P700049702700000000000000004772D" data-uri="fm.xhtml#P700049702700000000000000004772D" class="pcalibre1 calibre8 pcalibre">(−y &lt; −x)</code>, due to the asymmetric range of negative and positive numbers in the two's-complement representation. Arithmetic overflow is a common source of programming errors and security vulnerabilities, yet few other books cover the properties of computer arithmetic from a programmer's perspective.</p></li>
<li id="P700049702700000000000000004772E" data-uri="fm.xhtml#P700049702700000000000000004772E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004772F" data-uri="fm.xhtml#P700049702700000000000000004772F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>: Machine-Level Representation of Programs. </span>We teach you how to read the x86-64 machine code generated by a C compiler. We cover the basic instruction patterns generated for different control constructs, such as conditionals, loops, and switch statements. We cover the implementation of procedures, including stack allocation, register usage conventions, and parameter passing. We cover the way different data structures such as structures, unions, and arrays are allocated and accessed. We cover the instructions that implement both integer and floating-point arithmetic. We also use the machine-level view of programs as a way to understand common code security vulnerabilities, such as buffer overflow, and steps that the programmer,</p>
<aside class="sidebar pcalibre5 pcalibre" id="P7000497027000000000000000008CF2" data-uri="fm.xhtml#P7000497027000000000000000008CF2"><header class="pcalibre halftitlepage pcalibre1"><h1 class="pcalibre1 title2 pcalibre" id="P7000497027000000000000000047730" data-uri="fm.xhtml#P7000497027000000000000000047730" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008CF4" title="xxiii" data-uri="fm.xhtml#P7000497027000000000000000008CF4" epub:type="pagebreak"></span><span class="pcalibre label1 pcalibre1">Aside </span>What is an aside?</h1></header>
<p id="P7000497027000000000000000047731" data-uri="fm.xhtml#P7000497027000000000000000047731" class="calibre13 pcalibre pcalibre1">You will encounter asides of this form throughout the text. Asides are parenthetical remarks that give you some additional insight into the current topic. Asides serve a number of purposes. Some are little history lessons. For example, where did C, Linux, and the Internet come from? Other asides are meant to clarify ideas that students often find confusing. For example, what is the difference between a cache line, set, and block? Other asides give real-world examples, such as how a floating-point error crashed a French rocket or the geometric and operational parameters of a commercial disk drive. Finally, some asides are just fun stuff. For example, what is a "hoinky"?</p>
</aside>
<p class="calibre13 pcalibre pcalibre1" id="P7000497027000000000000000047732" data-uri="fm.xhtml#P7000497027000000000000000047732">grammer, the compiler, and the operating system can take to reduce these threats. Learning the concepts in this chapter helps you become a better programmer, because you will understand how programs are represented on a machine. One certain benefit is that you will develop a thorough and concrete understanding of pointers.</p></li>
<li id="P7000497027000000000000000047733" data-uri="fm.xhtml#P7000497027000000000000000047733" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047734" data-uri="fm.xhtml#P7000497027000000000000000047734" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a>: Processor Architecture. </span>This chapter covers basic combinational and sequential logic elements, and then shows how these elements can be combined in a datapath that executes a simplified subset of the x86-64 instruction set called "Y86-64." We begin with the design of a single-cycle datapath. This design is conceptually very simple, but it would not be very fast. We then introduce <i class="calibre5 pcalibre pcalibre1">pipelining</i>, where the different steps required to process an instruction are implemented as separate stages. At any given time, each stage can work on a different instruction. Our five-stage processor pipeline is much more realistic. The control logic for the processor designs is described using a simple hardware description language called HCL. Hardware designs written in HCL can be compiled and linked into simulators provided with the textbook, and they can be used to generate Verilog descriptions suitable for synthesis into working hardware.</p></li>
<li id="P7000497027000000000000000047735" data-uri="fm.xhtml#P7000497027000000000000000047735" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047736" data-uri="fm.xhtml#P7000497027000000000000000047736" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a>: Optimizing Program Performance. </span>This chapter introduces a number of techniques for improving code performance, with the idea being that programmers learn to write their C code in such a way that a compiler can then generate efficient machine code. We start with transformations that reduce the work to be done by a program and hence should be standard practice when writing any program for any machine. We then progress to transformations that enhance the degree of instruction-level parallelism in the generated machine code, thereby improving their performance on modern "superscalar" processors. To motivate these transformations, we introduce a simple operational model of how modern out-of-order processors work, and show how to measure the potential performance of a program in terms of the critical paths through a graphical representation of a program. You will be surprised how much you can speed up a program by simple transformations of the C code.</p></li>
<li id="P7000497027000000000000000047737" data-uri="fm.xhtml#P7000497027000000000000000047737" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047738" data-uri="fm.xhtml#P7000497027000000000000000047738" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008CFD" title="xxiv" data-uri="fm.xhtml#P7000497027000000000000000008CFD" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a>: The Memory Hierarchy. </span>The memory system is one of the most visible parts of a computer system to application programmers. To this point, you have relied on a conceptual model of the memory system as a linear array with uniform access times. In practice, a memory system is a hierarchy of storage devices with different capacities, costs, and access times. We cover the different types of RAM and ROM memories and the geometry and organization of magnetic-disk and solid state drives. We describe how these storage devices are arranged in a hierarchy. We show how this hierarchy is made possible by locality of reference. We make these ideas concrete by introducing a unique view of a memory system as a "memory mountain" with ridges of temporal locality and slopes of spatial locality. Finally, we show you how to improve the performance of application programs by improving their temporal and spatial locality.</p></li>
<li id="P7000497027000000000000000047739" data-uri="fm.xhtml#P7000497027000000000000000047739" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004773A" data-uri="fm.xhtml#P700049702700000000000000004773A" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005FB4.xhtml#P7000497027000000000000000005FB4"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">7</span></a>: Linking. </span>This chapter covers both static and dynamic linking, including the ideas of relocatable and executable object files, symbol resolution, relocation, static libraries, shared object libraries, position-independent code, and library interpositioning. Linking is not covered in most systems texts, but we cover it for two reasons. First, some of the most confusing errors that programmers can encounter are related to glitches during linking, especially for large software packages. Second, the object files produced by linkers are tied to concepts such as loading, virtual memory, and memory mapping.</p></li>
<li id="P700049702700000000000000004773B" data-uri="fm.xhtml#P700049702700000000000000004773B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004773C" data-uri="fm.xhtml#P700049702700000000000000004773C" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000666E.xhtml#P700049702700000000000000000666E"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">8</span></a>: Exceptional Control Flow. </span>In this part of the presentation, we step beyond the single-program model by introducing the general concept of exceptional control flow (i.e., changes in control flow that are outside the normal branches and procedure calls). We cover examples of exceptional control flow that exist at all levels of the system, from low-level hardware exceptions and interrupts, to context switches between concurrent processes, to abrupt changes in control flow caused by the receipt of Linux signals, to the nonlocal jumps in C that break the stack discipline.</p>
<p id="P700049702700000000000000004773D" data-uri="fm.xhtml#P700049702700000000000000004773D" class="calibre15 pcalibre pcalibre1">This is the part of the book where we introduce the fundamental idea of a <i class="calibre5 pcalibre pcalibre1">process</i>, an abstraction of an executing program. You will learn how processes work and how they can be created and manipulated from application programs. We show how application programmers can make use of multiple processes via Linux system calls. When you finish this chapter, you will be able to write a simple Linux shell with job control. It is also your first introduction to the nondeterministic behavior that arises with concurrent program execution.</p></li>
<li id="P700049702700000000000000004773E" data-uri="fm.xhtml#P700049702700000000000000004773E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004773F" data-uri="fm.xhtml#P700049702700000000000000004773F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">9</span></a>: Virtual Memory. </span>Our presentation of the virtual memory system seeks to give some understanding of how it works and its characteristics. We want you to know how it is that the different simultaneous processes can each use an identical range of addresses, sharing some pages but having individual copies of others. We also cover issues involved in managing and manipulating virtual memory. In particular, we cover the operation of storage allocators such as the standard-library <code id="P7000497027000000000000000047740" data-uri="fm.xhtml#P7000497027000000000000000047740" class="pcalibre1 calibre8 pcalibre">malloc</code> and <code id="P7000497027000000000000000047741" data-uri="fm.xhtml#P7000497027000000000000000047741" class="pcalibre1 calibre8 pcalibre">free</code> operations. Covering <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D07" title="xxv" data-uri="fm.xhtml#P7000497027000000000000000008D07" epub:type="pagebreak"></span>this material serves several purposes. It reinforces the concept that the virtual memory space is just an array of bytes that the program can subdivide into different storage units. It helps you understand the effects of programs containing memory referencing errors such as storage leaks and invalid pointer references. Finally, many application programmers write their own storage allocators optimized toward the needs and characteristics of the application. This chapter, more than any other, demonstrates the benefit of covering both the hardware and the software aspects of computer systems in a unified way. Traditional computer architecture and operating systems texts present only part of the virtual memory story.</p></li>
<li id="P7000497027000000000000000047742" data-uri="fm.xhtml#P7000497027000000000000000047742" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047743" data-uri="fm.xhtml#P7000497027000000000000000047743" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007867.xhtml#P7000497027000000000000000007867"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">10</span></a>: System-Level I/O. </span>We cover the basic concepts of Unix I/O such as files and descriptors. We describe how files are shared, how I/O redirection works, and how to access file metadata. We also develop a robust buffered I/O package that deals correctly with a curious behavior known as <i class="calibre5 pcalibre pcalibre1">short counts</i>, where the library function reads only part of the input data. We cover the C standard I/O library and its relationship to Linux I/O, focusing on limitations of standard I/O that make it unsuitable for network programming. In general, the topics covered in this chapter are building blocks for the next two chapters on network and concurrent programming.</p></li>
<li id="P7000497027000000000000000047744" data-uri="fm.xhtml#P7000497027000000000000000047744" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047745" data-uri="fm.xhtml#P7000497027000000000000000047745" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007B7A.xhtml#P7000497027000000000000000007B7A"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">11</span></a>: Network Programming. </span>Networks are interesting I/O devices to program, tying together many of the ideas that we study earlier in the text, such as processes, signals, byte ordering, memory mapping, and dynamic storage allocation. Network programs also provide a compelling context for concurrency, which is the topic of the next chapter. This chapter is a thin slice through network programming that gets you to the point where you can write a simple Web server. We cover the client-server model that underlies all network applications. We present a programmer's view of the Internet and show how to write Internet clients and servers using the sockets interface. Finally, we introduce HTTP and develop a simple iterative Web server.</p></li>
<li id="P7000497027000000000000000047746" data-uri="fm.xhtml#P7000497027000000000000000047746" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047747" data-uri="fm.xhtml#P7000497027000000000000000047747" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a>: Concurrent Programming. </span>This chapter introduces concurrent programming using Internet server design as the running motivational example. We compare and contrast the three basic mechanisms for writing concurrent programs—processes, I/O multiplexing, and threads—and show how to use them to build concurrent Internet servers. We cover basic principles of synchronization using <var class="calibre5 pcalibre pcalibre1">P</var> and <var class="calibre5 pcalibre pcalibre1">V</var> semaphore operations, thread safety and reentrancy, race conditions, and deadlocks. Writing concurrent code is essential for most server applications. We also describe the use of thread-level programming to express parallelism in an application program, enabling faster execution on multi-core processors. Getting all of the cores working on a single computational problem requires a careful coordination of the concurrent threads, both for correctness and to achieve high performance.</p></li>
</ul>
</section>
<section id="P7000497027000000000000000008D0E" data-uri="fm.xhtml#P7000497027000000000000000008D0E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000047748" data-uri="fm.xhtml#P7000497027000000000000000047748" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D10" title="xxvi" data-uri="fm.xhtml#P7000497027000000000000000008D10" epub:type="pagebreak"></span>New to This Edition</h1></header>
<p id="P7000497027000000000000000047749" data-uri="fm.xhtml#P7000497027000000000000000047749" class="pcalibre1 pcalibre calibre2">The first edition of this book was published with a copyright of 2003, while the second had a copyright of 2011. Considering the rapid evolution of computer technology, the book content has held up surprisingly well. Intel x86 machines running C programs under Linux (and related operating systems) has proved to be a combination that continues to encompass many systems today. However, changes in hardware technology, compilers, program library interfaces, and the experience of many instructors teaching the material have prompted a substantial revision.</p>
<p id="P700049702700000000000000004774A" data-uri="fm.xhtml#P700049702700000000000000004774A" class="pcalibre1 pcalibre calibre2">The biggest overall change from the second edition is that we have switched our presentation from one based on a mix of IA32 and x86-64 to one based exclusively on x86-64. This shift in focus affected the contents of many of the chapters. Here is a summary of the significant changes.</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000004774B" data-uri="fm.xhtml#P700049702700000000000000004774B">
<li id="P700049702700000000000000004774C" data-uri="fm.xhtml#P700049702700000000000000004774C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004774D" data-uri="fm.xhtml#P700049702700000000000000004774D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000007F.xhtml#P700049702700000000000000000007F"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">1</span></a>: A Tour of Computer Systems </span>We have moved the discussion of Amdahl's Law from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a> into this chapter.</p></li>
<li id="P700049702700000000000000004774E" data-uri="fm.xhtml#P700049702700000000000000004774E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004774F" data-uri="fm.xhtml#P700049702700000000000000004774F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000000279.xhtml#P7000497027000000000000000000279"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">2</span></a>: Representing and Manipulating Information. </span>A consistent bit of feedback from readers and reviewers is that some of the material in this chapter can be a bit overwhelming. So we have tried to make the material more accessible by clarifying the points at which we delve into a more mathematical style of presentation. This enables readers to first skim over mathematical details to get a high-level overview and then return for a more thorough reading.</p></li>
<li id="P7000497027000000000000000047750" data-uri="fm.xhtml#P7000497027000000000000000047750" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047751" data-uri="fm.xhtml#P7000497027000000000000000047751" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>: Machine-Level Representation of Programs. </span>We have converted from the earlier presentation based on a mix of IA32 and x86-64 to one based entirely on x86-64. We have also updated for the style of code generated by more recent versions of <span class="smallcaps pcalibre pcalibre1">gcc</span>. The result is a substantial rewriting, including changing the order in which some of the concepts are presented. We also have included, for the first time, a presentation of the machine-level support for programs operating on floating-point data. We have created a Web aside describing IA32 machine code for legacy reasons.</p></li>
<li id="P7000497027000000000000000047752" data-uri="fm.xhtml#P7000497027000000000000000047752" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047753" data-uri="fm.xhtml#P7000497027000000000000000047753" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a>: Processor Architecture. </span>We have revised the earlier processor design, based on a 32-bit architecture, to one that supports 64-bit words and operations.</p></li>
<li id="P7000497027000000000000000047754" data-uri="fm.xhtml#P7000497027000000000000000047754" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047755" data-uri="fm.xhtml#P7000497027000000000000000047755" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a>: Optimizing Program Performance. </span>We have updated the material to reflect the performance capabilities of recent generations of x86-64 processors. With the introduction of more functional units and more sophisticated control logic, the model of program performance we developed based on a data-flow representation of programs has become a more reliable predictor of performance than it was before.</p></li>
<li id="P7000497027000000000000000047756" data-uri="fm.xhtml#P7000497027000000000000000047756" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047757" data-uri="fm.xhtml#P7000497027000000000000000047757" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a>: The Memory Hierarchy. </span>We have updated the material to reflect more recent technology.</p></li>
<li id="P7000497027000000000000000047758" data-uri="fm.xhtml#P7000497027000000000000000047758" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047759" data-uri="fm.xhtml#P7000497027000000000000000047759" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D22" title="xxvii" data-uri="fm.xhtml#P7000497027000000000000000008D22" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005FB4.xhtml#P7000497027000000000000000005FB4"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">7</span></a>: Linking. </span>We have rewritten this chapter for x86-64, expanded the discussion of using the GOT and PLT to create position-independent code, and added a new section on a powerful linking technique known as <i class="calibre5 pcalibre pcalibre1">library interpositioning.</i></p></li>
<li id="P700049702700000000000000004775A" data-uri="fm.xhtml#P700049702700000000000000004775A" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004775B" data-uri="fm.xhtml#P700049702700000000000000004775B" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000666E.xhtml#P700049702700000000000000000666E"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">8</span></a>: Exceptional Control Flow. </span>We have added a more rigorous treatment of signal handlers, including async-signal-safe functions, specific guidelines for writing signal handlers, and using sigsuspend to wait for handlers.</p></li>
<li id="P700049702700000000000000004775C" data-uri="fm.xhtml#P700049702700000000000000004775C" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004775D" data-uri="fm.xhtml#P700049702700000000000000004775D" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000006FF7.xhtml#P7000497027000000000000000006FF7"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">9</span></a>: Virtual Memory. </span>This chapter has changed only slightly.</p></li>
<li id="P700049702700000000000000004775E" data-uri="fm.xhtml#P700049702700000000000000004775E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004775F" data-uri="fm.xhtml#P700049702700000000000000004775F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007867.xhtml#P7000497027000000000000000007867"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">10</span></a>: System-Level I/O. </span>We have added a new section on files and the file hierarchy, but otherwise, this chapter has changed only slightly.</p></li>
<li id="P7000497027000000000000000047760" data-uri="fm.xhtml#P7000497027000000000000000047760" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047761" data-uri="fm.xhtml#P7000497027000000000000000047761" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007B7A.xhtml#P7000497027000000000000000007B7A"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">11</span></a>: Network Programming. </span>We have introduced techniques for protocol-independent and thread-safe network programming using the modern getaddrinfo and getnameinfo functions, which replace the obsolete and non-reentrant gethostbyname and gethostbyaddr functions.</p></li>
<li id="P7000497027000000000000000047762" data-uri="fm.xhtml#P7000497027000000000000000047762" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047763" data-uri="fm.xhtml#P7000497027000000000000000047763" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008060.xhtml#P7000497027000000000000000008060"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">12</span></a>: Concurrent Programming. </span>We have increased our coverage of using thread-level parallelism to make programs run faster on multi-core machines.</p></li>
</ul>
<p id="P7000497027000000000000000047764" data-uri="fm.xhtml#P7000497027000000000000000047764" class="pcalibre1 pcalibre calibre2">In addition, we have added and revised a number of practice and homework problems throughout the text.</p>
</section>
<section id="P7000497027000000000000000008D2E" data-uri="fm.xhtml#P7000497027000000000000000008D2E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000047765" data-uri="fm.xhtml#P7000497027000000000000000047765" epub:type="title">Origins of the Book</h1></header>
<p id="P7000497027000000000000000047766" data-uri="fm.xhtml#P7000497027000000000000000047766" class="pcalibre1 pcalibre calibre2">This book stems from an introductory course that we developed at Carnegie Mellon University in the fall of 1998, called 15−213: Introduction to Computer Systems (ICS) [<a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000B39D.xhtml#P700049702700000000000000000B3BC">14</a>]. The ICS course has been taught every semester since then. Over 400 students take the course each semester. The students range from sophomores to graduate students in a wide variety of majors. It is a required core course for all undergraduates in the CS and ECE departments at Carnegie Mellon, and it has become a prerequisite for most upper-level systems courses in CS and ECE.</p>
<p id="P7000497027000000000000000047767" data-uri="fm.xhtml#P7000497027000000000000000047767" class="pcalibre1 pcalibre calibre2">The idea with ICS was to introduce students to computers in a different way. Few of our students would have the opportunity to build a computer system. On the other hand, most students, including all computer scientists and computer engineers, would be required to use and program computers on a daily basis. So we decided to teach about systems from the point of view of the programmer, using the following filter: we would cover a topic only if it affected the performance, correctness, or utility of user-level C programs.</p>
<p id="P7000497027000000000000000047768" data-uri="fm.xhtml#P7000497027000000000000000047768" class="pcalibre1 pcalibre calibre2">For example, topics such as hardware adder and bus designs were out. Topics such as machine language were in; but instead of focusing on how to write assembly language by hand, we would look at how a C compiler translates C constructs into machine code, including pointers, loops, procedure calls, and switch statements. Further, we would take a broader and more holistic view of the system as both hardware and systems software, covering such topics as linking, loading, <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D33" title="xxviii" data-uri="fm.xhtml#P7000497027000000000000000008D33" epub:type="pagebreak"></span>processes, signals, performance optimization, virtual memory, I/O, and network and concurrent programming.</p>
<p id="P7000497027000000000000000047769" data-uri="fm.xhtml#P7000497027000000000000000047769" class="pcalibre1 pcalibre calibre2">This approach allowed us to teach the ICS course in a way that is practical, concrete, hands-on, and exciting for the students. The response from our students and faculty colleagues was immediate and overwhelmingly positive, and we realized that others outside of CMU might benefit from using our approach. Hence this book, which we developed from the ICS lecture notes, and which we have now revised to reflect changes in technology and in how computer systems are implemented.</p>
<p id="P700049702700000000000000004776A" data-uri="fm.xhtml#P700049702700000000000000004776A" class="pcalibre1 pcalibre calibre2">Via the multiple editions and multiple translations of this book, ICS and many variants have become part of the computer science and computer engineering curricula at hundreds of colleges and universities worldwide.</p>
</section>
<section id="P7000497027000000000000000008D36" data-uri="fm.xhtml#P7000497027000000000000000008D36" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000004776B" data-uri="fm.xhtml#P700049702700000000000000004776B" epub:type="title">For Instructors: Courses Based on the Book</h1></header>
<p id="P700049702700000000000000004776C" data-uri="fm.xhtml#P700049702700000000000000004776C" class="pcalibre1 pcalibre calibre2">Instructors can use the CS:APP book to teach a number of different types of systems courses. Five categories of these courses are illustrated in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008CB6_split_001.xhtml#P7000497027000000000000000008D42"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2</span></a>. The particular course depends on curriculum requirements, personal taste, and the backgrounds and abilities of the students. From left to right in the figure, the courses are characterized by an increasing emphasis on the programmer's perspective of a system. Here is a brief description.</p>
<ul class="pcalibre ul_none pcalibre1" id="P700049702700000000000000004776D" data-uri="fm.xhtml#P700049702700000000000000004776D">
<li id="P700049702700000000000000004776E" data-uri="fm.xhtml#P700049702700000000000000004776E" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000004776F" data-uri="fm.xhtml#P700049702700000000000000004776F" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">ORG. </span>A computer organization course with traditional topics covered in an un-traditional style. Traditional topics such as logic design, processor architecture, assembly language, and memory systems are covered. However, there is more emphasis on the impact for the programmer. For example, data representations are related back to the data types and operations of C programs, and the presentation on assembly code is based on machine code generated by a C compiler rather than handwritten assembly code.</p></li>
<li id="P7000497027000000000000000047770" data-uri="fm.xhtml#P7000497027000000000000000047770" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047771" data-uri="fm.xhtml#P7000497027000000000000000047771" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">ORG+. </span>The ORG course with additional emphasis on the impact of hardware on the performance of application programs. Compared to ORG, students learn more about code optimization and about improving the memory performance of their C programs.</p></li>
<li id="P7000497027000000000000000047772" data-uri="fm.xhtml#P7000497027000000000000000047772" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047773" data-uri="fm.xhtml#P7000497027000000000000000047773" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">ICS. </span>The baseline ICS course, designed to produce enlightened programmers who understand the impact of the hardware, operating system, and compilation system on the performance and correctness of their application programs. A significant difference from ORG+ is that low-level processor architecture is not covered. Instead, programmers work with a higher-level model of a modern out-of-order processor. The ICS course fits nicely into a 10-week quarter, and can also be stretched to a 15-week semester if covered at a more leisurely pace.</p></li>
<li id="P7000497027000000000000000047774" data-uri="fm.xhtml#P7000497027000000000000000047774" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000047775" data-uri="fm.xhtml#P7000497027000000000000000047775" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">ICS+. </span>The baseline ICS course with additional coverage of systems programming topics such as system-level I/O, network programming, and concurrent programming. This is the semester-long Carnegie Mellon course, which covers every chapter in CS:APP except low-level processor architecture.</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000008D42" data-uri="fm.xhtml#P7000497027000000000000000008D42">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D43" title="xxix" data-uri="fm.xhtml#P7000497027000000000000000008D43" epub:type="pagebreak"></span>
<table class="pcalibre largetable pcalibre1" id="P7000497027000000000000000047776" data-uri="fm.xhtml#P7000497027000000000000000047776">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000047777" data-uri="fm.xhtml#P7000497027000000000000000047777" class="calibre18 pcalibre pcalibre1"/>
<th id="P7000497027000000000000000047778" data-uri="fm.xhtml#P7000497027000000000000000047778" class="calibre18 pcalibre pcalibre1"/>
<th colspan="5" id="P7000497027000000000000000047779" data-uri="fm.xhtml#P7000497027000000000000000047779" class="calibre18 pcalibre pcalibre1">Course</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P700049702700000000000000004777A" data-uri="fm.xhtml#P700049702700000000000000004777A" class="calibre18 pcalibre pcalibre1">Chapter</th>
<th id="P700049702700000000000000004777B" data-uri="fm.xhtml#P700049702700000000000000004777B" class="calibre18 pcalibre pcalibre1">Topic</th>
<th id="P700049702700000000000000004777C" data-uri="fm.xhtml#P700049702700000000000000004777C" class="calibre18 pcalibre pcalibre1">ORG</th>
<th id="P700049702700000000000000004777D" data-uri="fm.xhtml#P700049702700000000000000004777D" class="calibre18 pcalibre pcalibre1">ORG+</th>
<th id="P700049702700000000000000004777E" data-uri="fm.xhtml#P700049702700000000000000004777E" class="calibre18 pcalibre pcalibre1">ICS</th>
<th id="P700049702700000000000000004777F" data-uri="fm.xhtml#P700049702700000000000000004777F" class="calibre18 pcalibre pcalibre1">ICS+</th>
<th id="P7000497027000000000000000047780" data-uri="fm.xhtml#P7000497027000000000000000047780" class="calibre18 pcalibre pcalibre1">SP</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047781" data-uri="fm.xhtml#P7000497027000000000000000047781" class="calibre20 pcalibre pcalibre1">1</td>
<td id="P7000497027000000000000000047782" data-uri="fm.xhtml#P7000497027000000000000000047782" class="calibre20 pcalibre pcalibre1">Tour of systems</td>
<td id="P7000497027000000000000000047783" data-uri="fm.xhtml#P7000497027000000000000000047783" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047784" data-uri="fm.xhtml#P7000497027000000000000000047784" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047785" data-uri="fm.xhtml#P7000497027000000000000000047785" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047786" data-uri="fm.xhtml#P7000497027000000000000000047786" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047787" data-uri="fm.xhtml#P7000497027000000000000000047787" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047788" data-uri="fm.xhtml#P7000497027000000000000000047788" class="calibre20 pcalibre pcalibre1">2</td>
<td id="P7000497027000000000000000047789" data-uri="fm.xhtml#P7000497027000000000000000047789" class="calibre20 pcalibre pcalibre1">Data representation</td>
<td id="P700049702700000000000000004778A" data-uri="fm.xhtml#P700049702700000000000000004778A" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004778B" data-uri="fm.xhtml#P700049702700000000000000004778B" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004778C" data-uri="fm.xhtml#P700049702700000000000000004778C" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004778D" data-uri="fm.xhtml#P700049702700000000000000004778D" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004778E" data-uri="fm.xhtml#P700049702700000000000000004778E" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(d)</sup></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004778F" data-uri="fm.xhtml#P700049702700000000000000004778F" class="calibre20 pcalibre pcalibre1">3</td>
<td id="P7000497027000000000000000047790" data-uri="fm.xhtml#P7000497027000000000000000047790" class="calibre20 pcalibre pcalibre1">Machine language</td>
<td id="P7000497027000000000000000047791" data-uri="fm.xhtml#P7000497027000000000000000047791" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047792" data-uri="fm.xhtml#P7000497027000000000000000047792" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047793" data-uri="fm.xhtml#P7000497027000000000000000047793" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047794" data-uri="fm.xhtml#P7000497027000000000000000047794" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047795" data-uri="fm.xhtml#P7000497027000000000000000047795" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000047796" data-uri="fm.xhtml#P7000497027000000000000000047796" class="calibre20 pcalibre pcalibre1">4</td>
<td id="P7000497027000000000000000047797" data-uri="fm.xhtml#P7000497027000000000000000047797" class="calibre20 pcalibre pcalibre1">Processor architecture</td>
<td id="P7000497027000000000000000047798" data-uri="fm.xhtml#P7000497027000000000000000047798" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P7000497027000000000000000047799" data-uri="fm.xhtml#P7000497027000000000000000047799" class="calibre20 pcalibre pcalibre1">•</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004779A" data-uri="fm.xhtml#P700049702700000000000000004779A" class="calibre20 pcalibre pcalibre1">5</td>
<td id="P700049702700000000000000004779B" data-uri="fm.xhtml#P700049702700000000000000004779B" class="calibre20 pcalibre pcalibre1">Code optimization</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P700049702700000000000000004779C" data-uri="fm.xhtml#P700049702700000000000000004779C" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004779D" data-uri="fm.xhtml#P700049702700000000000000004779D" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P700049702700000000000000004779E" data-uri="fm.xhtml#P700049702700000000000000004779E" class="calibre20 pcalibre pcalibre1">•</td>
<td class="calibre20 pcalibre pcalibre1"/>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P700049702700000000000000004779F" data-uri="fm.xhtml#P700049702700000000000000004779F" class="calibre20 pcalibre pcalibre1">6</td>
<td id="P70004970270000000000000000477A0" data-uri="fm.xhtml#P70004970270000000000000000477A0" class="calibre20 pcalibre pcalibre1">Memory hierarchy</td>
<td id="P70004970270000000000000000477A1" data-uri="fm.xhtml#P70004970270000000000000000477A1" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(a)</sup></td>
<td id="P70004970270000000000000000477A2" data-uri="fm.xhtml#P70004970270000000000000000477A2" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477A3" data-uri="fm.xhtml#P70004970270000000000000000477A3" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477A4" data-uri="fm.xhtml#P70004970270000000000000000477A4" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477A5" data-uri="fm.xhtml#P70004970270000000000000000477A5" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(a)</sup></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477A6" data-uri="fm.xhtml#P70004970270000000000000000477A6" class="calibre20 pcalibre pcalibre1">7</td>
<td id="P70004970270000000000000000477A7" data-uri="fm.xhtml#P70004970270000000000000000477A7" class="calibre20 pcalibre pcalibre1">Linking</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000477A8" data-uri="fm.xhtml#P70004970270000000000000000477A8" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(c)</sup></td>
<td id="P70004970270000000000000000477A9" data-uri="fm.xhtml#P70004970270000000000000000477A9" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(d)</sup></td>
<td id="P70004970270000000000000000477AA" data-uri="fm.xhtml#P70004970270000000000000000477AA" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477AB" data-uri="fm.xhtml#P70004970270000000000000000477AB" class="calibre20 pcalibre pcalibre1">8</td>
<td id="P70004970270000000000000000477AC" data-uri="fm.xhtml#P70004970270000000000000000477AC" class="calibre20 pcalibre pcalibre1">Exceptional control flow</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000477AD" data-uri="fm.xhtml#P70004970270000000000000000477AD" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477AE" data-uri="fm.xhtml#P70004970270000000000000000477AE" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477AF" data-uri="fm.xhtml#P70004970270000000000000000477AF" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477B0" data-uri="fm.xhtml#P70004970270000000000000000477B0" class="calibre20 pcalibre pcalibre1">9</td>
<td id="P70004970270000000000000000477B1" data-uri="fm.xhtml#P70004970270000000000000000477B1" class="calibre20 pcalibre pcalibre1">Virtual memory</td>
<td id="P70004970270000000000000000477B2" data-uri="fm.xhtml#P70004970270000000000000000477B2" class="calibre20 pcalibre pcalibre1">⊙<sup class="pcalibre1 calibre21 pcalibre">(b)</sup></td>
<td id="P70004970270000000000000000477B3" data-uri="fm.xhtml#P70004970270000000000000000477B3" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477B4" data-uri="fm.xhtml#P70004970270000000000000000477B4" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477B5" data-uri="fm.xhtml#P70004970270000000000000000477B5" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477B6" data-uri="fm.xhtml#P70004970270000000000000000477B6" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477B7" data-uri="fm.xhtml#P70004970270000000000000000477B7" class="calibre20 pcalibre pcalibre1">10</td>
<td id="P70004970270000000000000000477B8" data-uri="fm.xhtml#P70004970270000000000000000477B8" class="calibre20 pcalibre pcalibre1">System-level I/O</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000477B9" data-uri="fm.xhtml#P70004970270000000000000000477B9" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477BA" data-uri="fm.xhtml#P70004970270000000000000000477BA" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477BB" data-uri="fm.xhtml#P70004970270000000000000000477BB" class="calibre20 pcalibre pcalibre1">11</td>
<td id="P70004970270000000000000000477BC" data-uri="fm.xhtml#P70004970270000000000000000477BC" class="calibre20 pcalibre pcalibre1">Network programming</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000477BD" data-uri="fm.xhtml#P70004970270000000000000000477BD" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477BE" data-uri="fm.xhtml#P70004970270000000000000000477BE" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000477BF" data-uri="fm.xhtml#P70004970270000000000000000477BF" class="calibre20 pcalibre pcalibre1">12</td>
<td id="P70004970270000000000000000477C0" data-uri="fm.xhtml#P70004970270000000000000000477C0" class="calibre20 pcalibre pcalibre1">Concurrent programming</td>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P70004970270000000000000000477C1" data-uri="fm.xhtml#P70004970270000000000000000477C1" class="calibre20 pcalibre pcalibre1">•</td>
<td id="P70004970270000000000000000477C2" data-uri="fm.xhtml#P70004970270000000000000000477C2" class="calibre20 pcalibre pcalibre1">•</td>
</tr>
</tbody>
</table>
<figcaption id="P70004970270000000000000000477C3" data-uri="fm.xhtml#P70004970270000000000000000477C3" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000477C4" data-uri="fm.xhtml#P70004970270000000000000000477C4" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">2 </span>Five systems courses based on the CS:APP book.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000477C5" data-uri="fm.xhtml#P70004970270000000000000000477C5"><p id="P70004970270000000000000000477C6" data-uri="fm.xhtml#P70004970270000000000000000477C6" class="pcalibre calibre3 pcalibre1">ICS+ is the 15−213 course from Carnegie Mellon. Notes: The <b class="calibre4 pcalibre pcalibre1">(c)</b> symbol denotes partial coverage of a chapter, as follows: (a) hardware only; (b) no dynamic storage allocation; (c) no dynamic linking; (d) no floating point.</p></div></figcaption></figure>
</li>
<li id="P70004970270000000000000000477C7" data-uri="fm.xhtml#P70004970270000000000000000477C7" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477C8" data-uri="fm.xhtml#P70004970270000000000000000477C8" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">SP. </span>A systems programming course. This course is similar to ICS+, but it drops floating point and performance optimization, and it places more emphasis on systems programming, including process control, dynamic linking, system-level I/O, network programming, and concurrent programming. Instructors might want to supplement from other sources for advanced topics such as daemons, terminal control, and Unix IPC.</p></li>
</ul>
<p id="P70004970270000000000000000477C9" data-uri="fm.xhtml#P70004970270000000000000000477C9" class="pcalibre1 pcalibre calibre2">The main message of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008CB6_split_001.xhtml#P7000497027000000000000000008D42"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">2</span></a> is that the CS:APP book gives a lot of options to students and instructors. If you want your students to be exposed to lower-level processor architecture, then that option is available via the ORG and ORG+ courses. On the other hand, if you want to switch from your current computer organization course to an ICS or ICS+ course, but are wary of making such a drastic change all at once, then you can move toward ICS incrementally. You can start with ORG, which teaches the traditional topics in a nontraditional way. Once you are comfortable with that material, then you can move to ORG+, and eventually to ICS. If students have no experience in C (e.g., they have only programmed in Java), you could spend several weeks on C and then cover the material of ORG or ICS.</p>
<p id="P70004970270000000000000000477CA" data-uri="fm.xhtml#P70004970270000000000000000477CA" class="pcalibre1 pcalibre calibre2">Finally, we note that the ORG+ and SP courses would make a nice two-term sequence (either quarters or semesters). Or you might consider offering ICS+ as one term of ICS and one term of SP.</p>
</section>
<section id="P7000497027000000000000000008D99" data-uri="fm.xhtml#P7000497027000000000000000008D99" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000477CB" data-uri="fm.xhtml#P70004970270000000000000000477CB" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008D9B" title="xxx" data-uri="fm.xhtml#P7000497027000000000000000008D9B" epub:type="pagebreak"></span>For Instructors: Classroom-Tested Laboratory Exercises</h1></header>
<p id="P70004970270000000000000000477CC" data-uri="fm.xhtml#P70004970270000000000000000477CC" class="pcalibre1 pcalibre calibre2">The ICS+ course at Carnegie Mellon receives very high evaluations from students. Median scores of 5.0/5.0 and means of 4.6/5.0 are typical for the student course evaluations. Students cite the fun, exciting, and relevant laboratory exercises as the primary reason. The labs are available from the CS:APP Web page. Here are examples of the labs that are provided with the book.</p>
<ul class="pcalibre ul_none pcalibre1" id="P70004970270000000000000000477CD" data-uri="fm.xhtml#P70004970270000000000000000477CD">
<li id="P70004970270000000000000000477CE" data-uri="fm.xhtml#P70004970270000000000000000477CE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477CF" data-uri="fm.xhtml#P70004970270000000000000000477CF" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Data Lab. </span>This lab requires students to implement simple logical and arithmetic functions, but using a highly restricted subset of C. For example, they must compute the absolute value of a number using only bit-level operations. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></li>
<li id="P70004970270000000000000000477D0" data-uri="fm.xhtml#P70004970270000000000000000477D0" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477D1" data-uri="fm.xhtml#P70004970270000000000000000477D1" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Binary Bomb Lab. </span>A <i class="calibre5 pcalibre pcalibre1">binary bomb</i> is a program provided to students as an object-code file. When run, it prompts the user to type in six different strings. If any of these are incorrect, the bomb "explodes," printing an error message and logging the event on a grading server. Students must "defuse" their own unique bombs by disassembling and reverse engineering the programs to determine what the six strings should be. The lab teaches students to understand assembly language and also forces them to learn how to use a debugger.</p></li>
<li id="P70004970270000000000000000477D2" data-uri="fm.xhtml#P70004970270000000000000000477D2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477D3" data-uri="fm.xhtml#P70004970270000000000000000477D3" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Buffer Overflow Lab. </span>Students are required to modify the run-time behavior of a binary executable by exploiting a buffer overflow vulnerability. This lab teaches the students about the stack discipline and about the danger of writing code that is vulnerable to buffer overflow attacks.</p></li>
<li id="P70004970270000000000000000477D4" data-uri="fm.xhtml#P70004970270000000000000000477D4" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477D5" data-uri="fm.xhtml#P70004970270000000000000000477D5" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Architecture Lab. </span>Several of the homework problems of <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a> can be combined into a lab assignment, where students modify the HCL description of a processor to add new instructions, change the branch prediction policy, or add or remove bypassing paths and register ports. The resulting processors can be simulated and run through automated tests that will detect most of the possible bugs. This lab lets students experience the exciting parts of processor design without requiring a complete background in logic design and hardware description languages.</p></li>
<li id="P70004970270000000000000000477D6" data-uri="fm.xhtml#P70004970270000000000000000477D6" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477D7" data-uri="fm.xhtml#P70004970270000000000000000477D7" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Performance Lab. </span>Students must optimize the performance of an application kernel function such as convolution or matrix transposition. This lab provides a very clear demonstration of the properties of cache memories and gives students experience with low-level program optimization.</p></li>
<li id="P70004970270000000000000000477D8" data-uri="fm.xhtml#P70004970270000000000000000477D8" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477D9" data-uri="fm.xhtml#P70004970270000000000000000477D9" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Cache Lab. </span>In this alternative to the performance lab, students write a general-purpose cache simulator, and then optimize a small matrix transpose kernel to minimize the number of misses on a simulated cache. We use the Valgrind tool to generate real address traces for the matrix transpose kernel.</p></li>
<li id="P70004970270000000000000000477DA" data-uri="fm.xhtml#P70004970270000000000000000477DA" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477DB" data-uri="fm.xhtml#P70004970270000000000000000477DB" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Shell Lab. </span>Students implement their own Unix shell program with job control, including the Ctrl+C and Ctrl+Z keystrokes and the <code id="P70004970270000000000000000477DC" data-uri="fm.xhtml#P70004970270000000000000000477DC" class="pcalibre1 calibre8 pcalibre">fg, bg,</code> and <code id="P70004970270000000000000000477DD" data-uri="fm.xhtml#P70004970270000000000000000477DD" class="pcalibre1 calibre8 pcalibre">jobs</code> commands. <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008DAE" title="xxxi" data-uri="fm.xhtml#P7000497027000000000000000008DAE" epub:type="pagebreak"></span>This is the student's first introduction to concurrency, and it gives them a clear idea of Unix process control, signals, and signal handling.</p></li>
<li id="P70004970270000000000000000477DE" data-uri="fm.xhtml#P70004970270000000000000000477DE" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477DF" data-uri="fm.xhtml#P70004970270000000000000000477DF" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Malloc Lab. </span>Students implement their own versions of <code id="P70004970270000000000000000477E0" data-uri="fm.xhtml#P70004970270000000000000000477E0" class="pcalibre1 calibre8 pcalibre">malloc, free,</code> and (optionally) <code id="P70004970270000000000000000477E1" data-uri="fm.xhtml#P70004970270000000000000000477E1" class="pcalibre1 calibre8 pcalibre">realloc.</code> This lab gives students a clear understanding of data layout and organization, and requires them to evaluate different trade-offs between space and time efficiency.</p></li>
<li id="P70004970270000000000000000477E2" data-uri="fm.xhtml#P70004970270000000000000000477E2" class="calibre12 pcalibre pcalibre1"><p id="P70004970270000000000000000477E3" data-uri="fm.xhtml#P70004970270000000000000000477E3" class="calibre13 pcalibre pcalibre1"><span class="pcalibre leadin pcalibre1">Proxy Lab. </span>Students implement a concurrent Web proxy that sits between their browsers and the rest of the World Wide Web. This lab exposes the students to such topics as Web clients and servers, and ties together many of the concepts from the course, such as byte ordering, file I/O, process control, signals, signal handling, memory mapping, sockets, and concurrency. Students like being able to see their programs in action with real Web browsers and Web servers.</p></li>
</ul>
<p id="P70004970270000000000000000477E4" data-uri="fm.xhtml#P70004970270000000000000000477E4" class="pcalibre1 pcalibre calibre2">The CS:APP instructor's manual has a detailed discussion of the labs, as well as directions for downloading the support software.</p>
</section>
<section id="P7000497027000000000000000008DB6" data-uri="fm.xhtml#P7000497027000000000000000008DB6" epub:type="acknowledgments" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000477E5" data-uri="fm.xhtml#P70004970270000000000000000477E5" epub:type="title">Acknowledgments for the Third Edition</h1></header>
<p id="P70004970270000000000000000477E6" data-uri="fm.xhtml#P70004970270000000000000000477E6" class="pcalibre1 pcalibre calibre2">It is a pleasure to acknowledge and thank those who have helped us produce this third edition of the CS:APP text.</p>
<p id="P70004970270000000000000000477E7" data-uri="fm.xhtml#P70004970270000000000000000477E7" class="pcalibre1 pcalibre calibre2">We would like to thank our Carnegie Mellon colleagues who have taught the ICS course over the years and who have provided so much insightful feedback and encouragement: Guy Blelloch, Roger Dannenberg, David Eckhardt, Franz Franchetti, Greg Ganger, Seth Goldstein, Khaled Harras, Greg Kesden, Bruce Maggs, Todd Mowry, Andreas Nowatzyk, Frank Pfenning, Markus Pueschel, and Anthony Rowe. David Winters was very helpful in installing and configuring the reference Linux box.</p>
<p id="P70004970270000000000000000477E8" data-uri="fm.xhtml#P70004970270000000000000000477E8" class="pcalibre1 pcalibre calibre2">Jason Fritts (St. Louis University) and Cindy Norris (Appalachian State) provided us with detailed and thoughtful reviews of the second edition. Yili Gong (Wuhan University) wrote the Chinese translation, maintained the errata page for the Chinese version, and contributed many bug reports. Godmar Back (Virginia Tech) helped us improve the text significantly by introducing us to the notions of async-signal safety and protocol-independent network programming.</p>
<p id="P70004970270000000000000000477E9" data-uri="fm.xhtml#P70004970270000000000000000477E9" class="pcalibre1 pcalibre calibre2">Many thanks to our eagle-eyed readers who reported bugs in the second edition: Rami Ammari, Paul Anagnostopoulos, Lucas Bärenfänger, Godmar Back, Ji Bin, Sharbel Bousemaan, Richard Callahan, Seth Chaiken, Cheng Chen, Libo Chen, Tao Du, Pascal Garcia, Yili Gong, Ronald Greenberg, Dorukhan Gülöz, Dong Han, Dominik Helm, Ronald Jones, Mustafa Kazdagli, Gordon Kindlmann, Sankar Krishnan, Kanak Kshetri, Junlin Lu, Qiangqiang Luo, Sebastian Luy, Lei Ma, Ashwin Nanjappa, Gregoire Paradis, Jonas Pfenninger, Karl Pichotta, David Ramsey, Kaustabh Roy, David Selvaraj, Sankar Shanmugam, Dominique Smulkowska, Dag Sørbø, Michael Spear, Yu Tanaka, Steven Tricanowicz, Scott Wright, Waiki Wright, Han Xu, Zhengshan Yan, Firo Yang, Shuang Yang, John Ye, Taketo Yoshida, Yan Zhu, and Michael Zink.</p>
<p id="P70004970270000000000000000477EA" data-uri="fm.xhtml#P70004970270000000000000000477EA" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008DBD" title="xxxii" data-uri="fm.xhtml#P7000497027000000000000000008DBD" epub:type="pagebreak"></span>Thanks also to our readers who have contributed to the labs, including God-mar Back (Virginia Tech), Taymon Beal (Worcester Polytechnic Institute), Aran Clauson (Western Washington University), Cary Gray (Wheaton College), Paul Haiduk (West Texas A&amp;M University), Len Hamey (Macquarie University), Eddie Kohler (Harvard), Hugh Lauer (Worcester Polytechnic Institute), Robert Marmorstein (Longwood University), and James Riely (DePaul University).</p>
<p id="P70004970270000000000000000477EB" data-uri="fm.xhtml#P70004970270000000000000000477EB" class="pcalibre1 pcalibre calibre2">Once again, Paul Anagnostopoulos of Windfall Software did a masterful job of typesetting the book and leading the production process. Many thanks to Paul and his stellar team: Richard Camp (copyediting), Jennifer McClain (proofreading), Laurel Muller (art production), and Ted Laux (indexing). Paul even spotted a bug in our description of the origins of the acronym BSS that had persisted undetected since the first edition!</p>
<p id="P70004970270000000000000000477EC" data-uri="fm.xhtml#P70004970270000000000000000477EC" class="pcalibre1 pcalibre calibre2">Finally, we would like to thank our friends at Prentice Hall. Marcia Horton and our editor, Matt Goldstein, have been unflagging in their support and encouragement, and we are deeply grateful to them.</p>
</section>
<section id="P7000497027000000000000000008DC0" data-uri="fm.xhtml#P7000497027000000000000000008DC0" epub:type="acknowledgments" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000477ED" data-uri="fm.xhtml#P70004970270000000000000000477ED" epub:type="title">Acknowledgments from the Second Edition</h1></header>
<p id="P70004970270000000000000000477EE" data-uri="fm.xhtml#P70004970270000000000000000477EE" class="pcalibre1 pcalibre calibre2">We are deeply grateful to the many people who have helped us produce this second edition of the CS:APP text.</p>
<p id="P70004970270000000000000000477EF" data-uri="fm.xhtml#P70004970270000000000000000477EF" class="pcalibre1 pcalibre calibre2">First and foremost, we would like to recognize our colleagues who have taught the ICS course at Carnegie Mellon for their insightful feedback and encouragement: Guy Blelloch, Roger Dannenberg, David Eckhardt, Greg Ganger, Seth Goldstein, Greg Kesden, Bruce Maggs, Todd Mowry, Andreas Nowatzyk, Frank Pfenning, and Markus Pueschel.</p>
<p id="P70004970270000000000000000477F0" data-uri="fm.xhtml#P70004970270000000000000000477F0" class="pcalibre1 pcalibre calibre2">Thanks also to our sharp-eyed readers who contributed reports to the errata page for the first edition: Daniel Amelang, Rui Baptista, Quarup Barreirinhas, Michael Bombyk, Jörg Brauer, Jordan Brough, Yixin Cao, James Caroll, Rui Carvalho, Hyoung-Kee Choi, Al Davis, Grant Davis, Christian Dufour, Mao Fan, Tim Freeman, Inge Frick, Max Gebhardt, Jeff Goldblat, Thomas Gross, Anita Gupta, John Hampton, Hiep Hong, Greg Israelsen, Ronald Jones, Haudy Kazemi, Brian Kell, Constantine Kousoulis, Sacha Krakowiak, Arun Krishnaswamy, Martin Kulas, Michael Li, Zeyang Li, Ricky Liu, Mario Lo Conte, Dirk Maas, Devon Macey, Carl Marcinik, Will Marrero, Simone Martins, Tao Men, Mark Morrissey, Venkata Naidu, Bhas Nalabothula, Thomas Niemann, Eric Peskin, David Po, Anne Rogers, John Ross, Michael Scott, Seiki, Ray Shih, Darren Shultz, Erik Silkensen, Suryanto, Emil Tarazi, Nawanan Theera-Ampornpunt, Joe Trdinich, Michael Trigoboff, James Troup, Martin Vopatek, Alan West, Betsy Wolff, Tim Wong, James Woodruff, Scott Wright, Jackie Xiao, Guanpeng Xu, Qing Xu, Caren Yang, Yin Yongsheng, Wang Yuanxuan, Steven Zhang, and Day Zhong. Special thanks to Inge Frick, who identified a subtle deep copy bug in our lock-and-copy example, and to Ricky Liu for his amazing proofreading skills.</p>
<p id="P70004970270000000000000000477F1" data-uri="fm.xhtml#P70004970270000000000000000477F1" class="pcalibre1 pcalibre calibre2">Our Intel Labs colleagues Andrew Chien and Limor Fix were exceptionally supportive throughout the writing of the text. Steve Schlosser graciously provided some disk drive characterizations. Casey Helfrich and Michael Ryan installed <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008DC6" title="xxxiii" data-uri="fm.xhtml#P7000497027000000000000000008DC6" epub:type="pagebreak"></span>and maintained our new Core i7 box. Michael Kozuch, Babu Pillai, and Jason Campbell provided valuable insight on memory system performance, multi-core systems, and the power wall. Phil Gibbons and Shimin Chen shared their considerable expertise on solid state disk designs.</p>
<p id="P70004970270000000000000000477F2" data-uri="fm.xhtml#P70004970270000000000000000477F2" class="pcalibre1 pcalibre calibre2">We have been able to call on the talents of many, including Wen-Mei Hwu, Markus Pueschel, and Jiri Simsa, to provide both detailed comments and high-level advice. James Hoe helped us create a Verilog version of the Y86 processor and did all of the work needed to synthesize working hardware.</p>
<p id="P70004970270000000000000000477F3" data-uri="fm.xhtml#P70004970270000000000000000477F3" class="pcalibre1 pcalibre calibre2">Many thanks to our colleagues who provided reviews of the draft manuscript: James Archibald (Brigham Young University), Richard Carver (George Mason University), Mirela Damian (Villanova University), Peter Dinda (Northwestern University), John Fiore (Temple University), Jason Fritts (St. Louis University), John Greiner (Rice University), Brian Harvey (University of California, Berkeley), Don Heller (Penn State University), Wei Chung Hsu (University of Minnesota), Michelle Hugue (University of Maryland), Jeremy Johnson (Drexel University), Geoff Kuenning (Harvey Mudd College), Ricky Liu, Sam Madden (MIT), Fred Martin (University of Massachusetts, Lowell), Abraham Matta (Boston University), Markus Pueschel (Carnegie Mellon University), Norman Ramsey (Tufts University), Glenn Reinmann (UCLA), Michela Taufer (University of Delaware), and Craig Zilles (UIUC).</p>
<p id="P70004970270000000000000000477F4" data-uri="fm.xhtml#P70004970270000000000000000477F4" class="pcalibre1 pcalibre calibre2">Paul Anagnostopoulos of Windfall Software did an outstanding job of typesetting the book and leading the production team. Many thanks to Paul and his superb team: Rick Camp (copyeditor), Joe Snowden (compositor), MaryEllen N. Oliver (proofreader), Laurel Muller (artist), and Ted Laux (indexer).</p>
<p id="P70004970270000000000000000477F5" data-uri="fm.xhtml#P70004970270000000000000000477F5" class="pcalibre1 pcalibre calibre2">Finally, we would like to thank our friends at Prentice Hall. Marcia Horton has always been there for us. Our editor, Matt Goldstein, provided stellar leadership from beginning to end. We are profoundly grateful for their help, encouragement, and insights.</p>
</section>
<section id="P7000497027000000000000000008DCB" data-uri="fm.xhtml#P7000497027000000000000000008DCB" epub:type="acknowledgments" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P70004970270000000000000000477F6" data-uri="fm.xhtml#P70004970270000000000000000477F6" epub:type="title">Acknowledgments from the First Edition</h1></header>
<p id="P70004970270000000000000000477F7" data-uri="fm.xhtml#P70004970270000000000000000477F7" class="pcalibre1 pcalibre calibre2">We are deeply indebted to many friends and colleagues for their thoughtful criticisms and encouragement. A special thanks to our 15−213 students, whose infectious energy and enthusiasm spurred us on. Nick Carter and Vinny Furia generously provided their malloc package.</p>
<p id="P70004970270000000000000000477F8" data-uri="fm.xhtml#P70004970270000000000000000477F8" class="pcalibre1 pcalibre calibre2">Guy Blelloch, Greg Kesden, Bruce Maggs, and Todd Mowry taught the course over multiple semesters, gave us encouragement, and helped improve the course material. Herb Derby provided early spiritual guidance and encouragement. Allan Fisher, Garth Gibson, Thomas Gross, Satya, Peter Steenkiste, and Hui Zhang encouraged us to develop the course from the start. A suggestion from Garth early on got the whole ball rolling, and this was picked up and refined with the help of a group led by Allan Fisher. Mark Stehlik and Peter Lee have been very supportive about building this material into the undergraduate curriculum. Greg Kesden provided helpful feedback on the impact of ICS on the OS course. Greg Ganger and Jiri Schindler graciously provided some disk drive characterizations <span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008DCF" title="xxxiv" data-uri="fm.xhtml#P7000497027000000000000000008DCF" epub:type="pagebreak"></span>and answered our questions on modern disks. Tom Stricker showed us the memory mountain. James Hoe provided useful ideas and feedback on how to present processor architecture.</p>
<p id="P70004970270000000000000000477F9" data-uri="fm.xhtml#P70004970270000000000000000477F9" class="pcalibre1 pcalibre calibre2">A special group of students—Khalil Amiri, Angela Demke Brown, Chris Colohan, Jason Crawford, Peter Dinda, Julio Lopez, Bruce Lowekamp, Jeff Pierce, Sanjay Rao, Balaji Sarpeshkar, Blake Scholl, Sanjit Seshia, Greg Steffan, Tiankai Tu, Kip Walker, and Yinglian Xie—were instrumental in helping us develop the content of the course. In particular, Chris Colohan established a fun (and funny) tone that persists to this day, and invented the legendary "binary bomb" that has proven to be a great tool for teaching machine code and debugging concepts.</p>
<p id="P70004970270000000000000000477FA" data-uri="fm.xhtml#P70004970270000000000000000477FA" class="pcalibre1 pcalibre calibre2">Chris Bauer, Alan Cox, Peter Dinda, Sandhya Dwarkadas, John Greiner, Don Heller, Bruce Jacob, Barry Johnson, Bruce Lowekamp, Greg Morrisett, Brian Noble, Bobbie Othmer, Bill Pugh, Michael Scott, Mark Smotherman, Greg Steffan, and Bob Wier took time that they did not have to read and advise us on early drafts of the book. A very special thanks to Al Davis (University of Utah), Peter Dinda (Northwestern University), John Greiner (Rice University), Wei Hsu (University of Minnesota), Bruce Lowekamp (College of William &amp; Mary), Bobbie Othmer (University of Minnesota), Michael Scott (University of Rochester), and Bob Wier (Rocky Mountain College) for class testing the beta version. A special thanks to their students as well!</p>
<p id="P70004970270000000000000000477FB" data-uri="fm.xhtml#P70004970270000000000000000477FB" class="pcalibre1 pcalibre calibre2">We would also like to thank our colleagues at Prentice Hall. Marcia Horton, Eric Frank, and Harold Stone have been unflagging in their support and vision. Harold also helped us present an accurate historical perspective on RISC and CISC processor architectures. Jerry Ralya provided sharp insights and taught us a lot about good writing.</p>
<p id="P70004970270000000000000000477FC" data-uri="fm.xhtml#P70004970270000000000000000477FC" class="pcalibre1 pcalibre calibre2">Finally, we would like to acknowledge the great technical writers Brian Kernighan and the late W. Richard Stevens, for showing us that technical books can be beautiful.</p>
<p id="P70004970270000000000000000477FD" data-uri="fm.xhtml#P70004970270000000000000000477FD" class="pcalibre1 pcalibre calibre2">Thank you all.</p>
<div class="edition pcalibre pcalibre1" id="P70004970270000000000000000477FE" data-uri="fm.xhtml#P70004970270000000000000000477FE">
<div class="author pcalibre pcalibre1" id="P70004970270000000000000000477FF" data-uri="fm.xhtml#P70004970270000000000000000477FF"><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000047800" data-uri="fm.xhtml#P7000497027000000000000000047800"><p id="P7000497027000000000000000047801" data-uri="fm.xhtml#P7000497027000000000000000047801" class="pcalibre calibre3 pcalibre1">Randy Bryant</p></div></div>
<div class="author pcalibre pcalibre1" id="P7000497027000000000000000047802" data-uri="fm.xhtml#P7000497027000000000000000047802"><div class="edition pcalibre pcalibre1" id="P7000497027000000000000000047803" data-uri="fm.xhtml#P7000497027000000000000000047803"><p id="P7000497027000000000000000047804" data-uri="fm.xhtml#P7000497027000000000000000047804" class="pcalibre calibre3 pcalibre1">Dave O'Hallaron</p></div></div>
<div class="affiliation pcalibre pcalibre1" id="P7000497027000000000000000047805" data-uri="fm.xhtml#P7000497027000000000000000047805">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000047806" data-uri="fm.xhtml#P7000497027000000000000000047806"><p id="P7000497027000000000000000047807" data-uri="fm.xhtml#P7000497027000000000000000047807" class="pcalibre calibre3 pcalibre1"><i class="calibre5 pcalibre pcalibre1">Pittsburgh, Pennsylvania</i></p></div>
</div></div>
</section>
</section></body></html>
