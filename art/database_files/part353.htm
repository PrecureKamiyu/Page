<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>19.7  High Availability Using Remote Backup Systems</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part352.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part354.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">19.7  <span style=" color: #00AEEF;">High Availability Using Remote Backup Systems</span></p><p style="padding-top: 11pt;padding-left: 120pt;text-indent: 0pt;text-align: right;">Traditional transaction-processing systems are centralized or client–server systems. Such systems are vulnerable to environmental disasters such as ﬁre, ﬂooding, or earth- quakes. Today’s applications need transaction-processing systems that can function in spite of system failures or environmental disasters. Such systems must provide <span class="s63">high availability</span>; that is, the time for which the system is unusable must be extremely short. We can achieve high availability by performing transaction processing at one site, called the <span class="s63">primary site</span>, and having a <span class="s63">remote backup </span>site where all the data from the pri- mary site are replicated. The remote backup site is sometimes also called the <span class="s63">secondary site</span>. The remote site must be kept synchronized with the primary site as updates are performed at the primary. We achieve synchronization by sending all log records from the primary site to the remote backup site. The remote backup site must be physically</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="358" height="121" alt="image" src="Image_3064.png"/></span></p><p class="s42" style="text-indent: 0pt;line-height: 11pt;text-align: left;">network</p><p style="text-indent: 0pt;text-align: left;"/><p class="s42" style="text-indent: 0pt;text-align: left;">log records</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">backup</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">primary</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="33" height="51" alt="image" src="Image_3065.png"/></span></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 19.6 <span class="s74">Architecture of remote backup system.</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">separated from the primary—for example, we can locate it in a diﬀerent state—so that a disaster such as a ﬁre, ﬂood or an earthquake at the primary does not also damage the remote backup site.<span class="s76">3</span> Figure 19.6 shows the architecture of a remote backup system.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When the primary site fails, the remote backup site takes over processing. First, however, it performs recovery, using its (perhaps outdated) copy of the data from the primary and the log records received from the primary. In eﬀect, the remote backup site is performing recovery actions that would have been performed at the primary site when the latter recovered. Standard recovery algorithms, with minor modiﬁcations, can be used for recovery at the remote backup site. Once recovery has been performed, the remote backup site starts processing transactions.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Availability is greatly increased over a single-site system, since the system can re- cover even if all data at the primary site are lost.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">Several issues must be addressed in designing a remote backup system:</p><p class="s39" style="padding-top: 9pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Detection of failure</span><span class="p">. It is important for the remote backup system to detect when the primary has failed. Failure of communication lines can fool the remote backup into believing that the primary has failed. To avoid this problem, we maintain sev- eral communication links with independent modes of failure between the primary and the remote backup. For example, several independent network connections, including perhaps a modem connection over a telephone line, may be used. These connections may be backed up via manual intervention by operators, who can communicate over the telephone system.</span></p><p class="s39" style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Transfer of control</span><span class="p">. When the primary fails, the backup site takes over processing and becomes the new primary. The decision to transfer control can be done man- ually or can be automated using software provided by database system vendors.</span></p><p style="padding-left: 107pt;text-indent: 13pt;text-align: justify;">Queries must now be sent to the new primary. To do so automatically, many sys- tems assign the <span class="s44">IP </span>address of the old primary to the new primary. Existing database connections will fail, but when an application tries to reopen a connection it gets connected to the new primary. Some systems instead use a <span class="s63">high availability proxy</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="96" height="1" alt="image" src="Image_3066.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">3<span class="s78">Since earthquakes can cause damage over a wide area, the backup is generally required to be in a diﬀerent seismic zone.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 139pt;text-indent: 0pt;text-align: justify;">machine. Application clients do not connect to the database directly, but connect through the proxy. The proxy transparently routes application requests to the cur- rent primary. (There can be more than one machine acting as proxy at the same time, to deal with a situation where a proxy machine fails; requests can be routed through any active proxy machine.)</p><p style="padding-left: 139pt;text-indent: 15pt;text-align: justify;">When the original primary site recovers, it can either play the role of remote backup or it can take over the role of primary site again. In either case, the old primary must receive a log of updates carried out by the backup site while the old primary was down. The old primary must catch up with the updates in the log by applying them locally. The old primary can then act as a remote backup site. If control must be transferred back, the new primary (which is the old backup site) can pretend to have failed, resulting in the old primary taking over.</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Time to recover</span><span class="p">. If the log at the remote backup grows large, recovery will take a long time. The remote backup site can periodically process the redo log records that it has received and can perform a checkpoint so that earlier parts of the log can be deleted. The delay before the remote backup takes over can be signiﬁcantly reduced as a result.</span></p><p style="padding-left: 139pt;text-indent: 14pt;text-align: justify;">A <span class="s63">hot-spare conﬁguration </span>can make takeover by the backup site almost instanta- neous. In this conﬁguration, the remote backup site continually processes redo log records as they arrive, applying the updates locally. As soon as the failure of the primary is detected, the backup site completes recovery by rolling back incomplete transactions; it is then ready to process new transactions.</p><p class="s39" style="padding-top: 3pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;">• <span class="s63">Time to commit</span><span class="p">. To ensure that the updates of a committed transaction are durable, a transaction must not be declared committed until its log records have reached the backup site. This delay can result in a longer wait to commit a transaction, and some systems therefore permit lower degrees of durability. The degrees of durability can be classiﬁed as follows:</span></p><p class="s50" style="padding-top: 10pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s63">One-safe</span><span class="p">. A transaction commits as soon as its commit log record is written to stable storage at the primary site.</span></p><p style="padding-left: 153pt;text-indent: 14pt;text-align: justify;">The problem with this scheme is that the updates of a committed transac- tion may not have made it to the backup site when the backup site takes over processing. Thus, the updates may appear to be lost. When the primary site recovers, the lost updates cannot be merged in directly, since the updates may conﬂict with later updates performed at the backup site. Thus, human inter- vention may be required to bring the database to a consistent state.</p><p class="s50" style="padding-top: 8pt;padding-left: 153pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s63">Two-very-safe</span><span class="p">. A transaction commits as soon as its commit log record is written to stable storage at the primary and the backup site.</span></p><p style="padding-left: 153pt;text-indent: 13pt;text-align: justify;">The problem with this scheme is that transaction processing cannot proceed if either the primary or the backup site is down. Thus, availability is actually less than in the single-site case, although the probability of data loss is much less.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-top: 6pt;padding-left: 122pt;text-indent: -8pt;line-height: 77%;text-align: justify;">° <span class="s63">Two-safe</span><span class="p">. This scheme is the same as two-very-safe if both primary and backup sites are active. If only the primary is active, the transaction is allowed to com-</span></p><p style="padding-left: 122pt;text-indent: 0pt;text-align: justify;">mit as soon as its commit log record is written to stable storage at the primary site.</p><p style="padding-left: 122pt;text-indent: 13pt;text-align: justify;">This scheme provides better availability than does two-very-safe, while avoid- ing the problem of lost transactions faced by the one-safe scheme. It results in a slower commit than the one-safe scheme, but the beneﬁts generally outweigh the cost.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Most database systems today provide support for replication to a backup copy, along with support for hot spares and quick switchover from the primary to the backup. Many database systems also allow replication to more than one backup; such a feature can be used to provide a local backup to deal with machine failures, along with a remote backup to deal with disasters.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Although update transactions cannot be executed at a backup server, many database systems allow read-only queries to be executed at backup servers. The load at the primary can be reduced by executing at least some of the read-only transactions at the backup. Snapshot-isolation can be used at the backup server to give readers a transaction consistent view of the data, while ensuring that updates are never blocked from being applied at the backup.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Remote backup is also supported at the level of ﬁle systems, typically by network ﬁle system or <span class="s44">NAS </span>implementations, as well as at the disk level, typically by storage area network (<span class="s44">SAN</span>) implementations. Remote backups are kept synchronized with the primary by ensuring that all block writes performed at the primary are also replicated at the backup. File-system level and disk level backups can be used to replicate the database data as well as log ﬁles. If the primary fails, the backup system can recover using its replica of the data and log ﬁles. However, to ensure that recovery will work correctly at the backup site, the ﬁle system level replication must be done in a way that ensures that the write-ahead logging (<span class="s44">WAL</span>) rule continues to hold. To do so, if the database forces a block to disk and then performs some other update actions at the primary, the block must also be forced to disk at the backup, before subsequent updates are performed at the backup system.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">An alternative way of achieving high availability is to use a <i>distributed database</i>, with data replicated at more than one site. Transactions are then required to update all replicas of any data item that they update. We study distributed databases, including replication, in Chapter 23. When properly implemented, distributed databases can pro- vide a higher level of availability than remote backup systems, but are more complex and expensive to implement and maintain.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">End-users typically interact with applications, rather than directly with database. To ensure availability of an application, as well as to support handling of a large number of requests per second, applications may run on multiple application servers. Requests from clients are <span class="s63">load-balanced </span>across the servers. The load-balancer ensures that all requests from a particular client are sent to a single application server, as long as the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><a name="bookmark402">application server is functional. If an application server fails, client requests are routed to other application servers, so users can continue to use the application. Although users may notice a small interruption, application servers can ensure that a user is not forced to login again, by sharing session information across application servers.</a><a name="bookmark442">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part352.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part354.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
