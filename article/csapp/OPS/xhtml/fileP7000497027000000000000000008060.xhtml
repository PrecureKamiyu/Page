<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Chapter 12 Concurrent Programming</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000008060" epub:type="chapter"><header class="calibre24 pcalibre pcalibre1"><h1 class="title4 pcalibre pcalibre1" id="P7000497027000000000000000046B6B" data-uri="chapter12.xhtml#P7000497027000000000000000046B6B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008062" title="971" data-uri="chapter12.xhtml#P7000497027000000000000000008062" epub:type="pagebreak"></span><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre number1 pcalibre1">12 </span>Concurrent Programming</h1></header>
<section class="pcalibre halftitlepage pcalibre1" id="d9e172027">
<nav class="pcalibre halftitlepage pcalibre1" id="P7000497027000000000000000046B6C" data-uri="chapter12.xhtml#P7000497027000000000000000046B6C" epub:type="toc">
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046B6D" data-uri="chapter12.xhtml#P7000497027000000000000000046B6D">
<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000046B6E" data-uri="chapter12.xhtml#P7000497027000000000000000046B6E">
<li id="P7000497027000000000000000046B6F" data-uri="chapter12.xhtml#P7000497027000000000000000046B6F" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B70" data-uri="chapter12.xhtml#P7000497027000000000000000046B70" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008097.xhtml#P7000497027000000000000000008097"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.1 </span>Concurrent Programming with Processes </span><span class="pcalibre pcalibre1" epub:type="pagebreak">973</span></a></p></li>
<li id="P7000497027000000000000000046B71" data-uri="chapter12.xhtml#P7000497027000000000000000046B71" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B72" data-uri="chapter12.xhtml#P7000497027000000000000000046B72" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000080DE.xhtml#P70004970270000000000000000080DE"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.2 </span>Concurrent Programming with I/O Multiplexing </span><span class="pcalibre pcalibre1" epub:type="pagebreak">977</span></a></p></li>
<li id="P7000497027000000000000000046B73" data-uri="chapter12.xhtml#P7000497027000000000000000046B73" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B74" data-uri="chapter12.xhtml#P7000497027000000000000000046B74" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000817D.xhtml#P700049702700000000000000000817D"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.3 </span>Concurrent Programming with Threads </span><span class="pcalibre pcalibre1" epub:type="pagebreak">985</span></a></p></li>
<li id="P7000497027000000000000000046B75" data-uri="chapter12.xhtml#P7000497027000000000000000046B75" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B76" data-uri="chapter12.xhtml#P7000497027000000000000000046B76" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000821D.xhtml#P700049702700000000000000000821D"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.4 </span>Shared Variables in Threaded Programs </span><span class="pcalibre pcalibre1" epub:type="pagebreak">992</span></a></p></li>
<li id="P7000497027000000000000000046B77" data-uri="chapter12.xhtml#P7000497027000000000000000046B77" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B78" data-uri="chapter12.xhtml#P7000497027000000000000000046B78" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000827E.xhtml#P700049702700000000000000000827E"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.5 </span>Synchronizing Threads with Semaphores </span><span class="pcalibre pcalibre1" epub:type="pagebreak">995</span></a></p></li>
<li id="P7000497027000000000000000046B79" data-uri="chapter12.xhtml#P7000497027000000000000000046B79" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B7A" data-uri="chapter12.xhtml#P7000497027000000000000000046B7A" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000849B.xhtml#P700049702700000000000000000849B"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.6 </span>Using Threads for Parallelism </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1013</span></a></p></li>
<li id="P7000497027000000000000000046B7B" data-uri="chapter12.xhtml#P7000497027000000000000000046B7B" class="tocpreface pcalibre pcalibre1" data-class="toclevel1"><p id="P7000497027000000000000000046B7C" data-uri="chapter12.xhtml#P7000497027000000000000000046B7C" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008577.xhtml#P7000497027000000000000000008577"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.7 </span>Other Concurrency Issues </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1020</span></a></p></li>
</ol></div>
<div class="edition pcalibre pcalibre1" id="P7000497027000000000000000046B7D" data-uri="chapter12.xhtml#P7000497027000000000000000046B7D">
<ol class="tocentrylist pcalibre pcalibre1" id="P7000497027000000000000000046B7E" data-uri="chapter12.xhtml#P7000497027000000000000000046B7E">
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000046B7F" data-uri="chapter12.xhtml#P7000497027000000000000000046B7F"><p id="P7000497027000000000000000046B80" data-uri="chapter12.xhtml#P7000497027000000000000000046B80" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008670.xhtml#P7000497027000000000000000008670"><span class="pcalibre pcalibre1" epub:type="title"><span class="pcalibre label pcalibre1">12.8 </span><span class="pcalibre label pcalibre1">Summary</span> </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1030</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000046B81" data-uri="chapter12.xhtml#P7000497027000000000000000046B81"><p id="P7000497027000000000000000046B82" data-uri="chapter12.xhtml#P7000497027000000000000000046B82" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000008676.xhtml#P7000497027000000000000000008676"><span class="pcalibre pcalibre1" epub:type="title">Bibliographic Notes </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1030</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000046B83" data-uri="chapter12.xhtml#P7000497027000000000000000046B83"><p id="P7000497027000000000000000046B84" data-uri="chapter12.xhtml#P7000497027000000000000000046B84" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000867A.xhtml#P700049702700000000000000000867A"><span class="pcalibre pcalibre1" epub:type="title">Homework Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1031</span></a></p></li>
<li class="tocpreface pcalibre pcalibre1" id="P7000497027000000000000000046B85" data-uri="chapter12.xhtml#P7000497027000000000000000046B85"><p id="P7000497027000000000000000046B86" data-uri="chapter12.xhtml#P7000497027000000000000000046B86" class="pcalibre calibre3 pcalibre1"><a class="xref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000875E.xhtml#P700049702700000000000000000875E"><span class="pcalibre pcalibre1" epub:type="title">Solutions to Practice Problems </span><span class="pcalibre pcalibre1" epub:type="pagebreak">1036</span></a></p></li>
</ol></div>
</nav>

<section id="P7000497027000000000000000046B87" data-uri="chapter12.xhtml#P7000497027000000000000000046B87" epub:type="introduction" class="introduction pcalibre pcalibre1">

<p id="P7000497027000000000000000046B88" data-uri="chapter12.xhtml#P7000497027000000000000000046B88" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008080" title="972" data-uri="chapter12.xhtml#P7000497027000000000000000008080" epub:type="pagebreak"></span>As we learned in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000666E.xhtml#P700049702700000000000000000666E"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">8</span></a>, logical control flows are <i class="calibre5 pcalibre pcalibre1">concurrent</i> if they overlap in time. This general phenomenon, known as <i class="calibre5 pcalibre pcalibre1">concurrency</i>, shows up at many different levels of a computer system. Hardware exception handlers, processes, and Linux signal handlers are all familiar examples.</p>
<p id="P7000497027000000000000000046B89" data-uri="chapter12.xhtml#P7000497027000000000000000046B89" class="pcalibre1 pcalibre calibre2">Thus far, we have treated concurrency mainly as a mechanism that the operating system kernel uses to run multiple application programs. But concurrency is not just limited to the kernel. It can play an important role in application programs as well. For example, we have seen how Linux signal handlers allow applications to respond to asynchronous events such as the user typing Ctrl+C or the program accessing an undefined area of virtual memory. Application-level concurrency is useful in other ways as well:</p>
<ul id="P7000497027000000000000000046B8A" data-uri="chapter12.xhtml#P7000497027000000000000000046B8A" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000046B8B" data-uri="chapter12.xhtml#P7000497027000000000000000046B8B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B8C" data-uri="chapter12.xhtml#P7000497027000000000000000046B8C" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Accessing slow I/O devices. </span>When an application is waiting for data to arrive from a slow I/O device such as a disk, the kernel keeps the CPU busy by running other processes. Individual applications can exploit concurrency in a similar way by overlapping useful work with I/O requests.</p></li>
<li id="P7000497027000000000000000046B8D" data-uri="chapter12.xhtml#P7000497027000000000000000046B8D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B8E" data-uri="chapter12.xhtml#P7000497027000000000000000046B8E" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Interacting with humans. </span>People who interact with computers demand the ability to perform multiple tasks at the same time. For example, they might want to resize a window while they are printing a document. Modern windowing systems use concurrency to provide this capability. Each time the user requests some action (say, by clicking the mouse), a separate concurrent logical flow is created to perform the action.</p></li>
<li id="P7000497027000000000000000046B8F" data-uri="chapter12.xhtml#P7000497027000000000000000046B8F" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B90" data-uri="chapter12.xhtml#P7000497027000000000000000046B90" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Reducing latency by deferring work. </span>Sometimes, applications can use concurrency to reduce the latency of certain operations by deferring other operations and performing them concurrently. For example, a dynamic storage allocator might reduce the latency of individual free operations by deferring coalescing to a concurrent "coalescing" flow that runs at a lower priority, soaking up spare CPU cycles as they become available.</p></li>
<li id="P7000497027000000000000000046B91" data-uri="chapter12.xhtml#P7000497027000000000000000046B91" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B92" data-uri="chapter12.xhtml#P7000497027000000000000000046B92" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Servicing multiple network clients. </span>The iterative network servers that we studied in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007B7A.xhtml#P7000497027000000000000000007B7A"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">11</span></a> are unrealistic because they can only service one client at a time. Thus, a single slow client can deny service to every other client. For a real server that might be expected to service hundreds or thousands of clients per second, it is not acceptable to allow one slow client to deny service to the others. A better approach is to build a <i class="calibre5 pcalibre pcalibre1">concurrent server</i> that creates a separate logical flow for each client. This allows the server to service multiple clients concurrently and precludes slow clients from monopolizing the server.</p></li>
<li id="P7000497027000000000000000046B93" data-uri="chapter12.xhtml#P7000497027000000000000000046B93" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B94" data-uri="chapter12.xhtml#P7000497027000000000000000046B94" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Computing in parallel on multi-core machines. </span>Many modern systems are equipped with multi-core processors that contain multiple CPUs. Applications that are partitioned into concurrent flows often run faster on multi-core machines than on uniprocessor machines because the flows execute in parallel rather than being interleaved.</p></li>
</ul>
<p id="P7000497027000000000000000046B95" data-uri="chapter12.xhtml#P7000497027000000000000000046B95" class="pcalibre1 pcalibre calibre2">Applications that use application-level concurrency are known as <i class="calibre5 pcalibre pcalibre1">concurrent programs</i>. Modern operating systems provide three basic approaches for building concurrent programs:</p>
<ul id="P7000497027000000000000000046B96" data-uri="chapter12.xhtml#P7000497027000000000000000046B96" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000046B97" data-uri="chapter12.xhtml#P7000497027000000000000000046B97" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B98" data-uri="chapter12.xhtml#P7000497027000000000000000046B98" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000008091" title="973" data-uri="chapter12.xhtml#P7000497027000000000000000008091" epub:type="pagebreak"></span><span class="pcalibre leadin pcalibre1">Processes. </span>With this approach, each logical control flow is a process that is scheduled and maintained by the kernel. Since processes have separate virtual address spaces, flows that want to communicate with each other must use some kind of explicit <i class="calibre5 pcalibre pcalibre1">interprocess communication (IPC)</i> mechanism.</p></li>
<li id="P7000497027000000000000000046B99" data-uri="chapter12.xhtml#P7000497027000000000000000046B99" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B9A" data-uri="chapter12.xhtml#P7000497027000000000000000046B9A" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">I/O multiplexing. </span>his is a form of concurrent programming where applications explicitly schedule their own logical flows in the context of a single process. Logical flows are modeled as state machines that the main program explicitly transitions from state to state as a result of data arriving on file descriptors. Since the program is a single process, all flows share the same address space.</p></li>
<li id="P7000497027000000000000000046B9B" data-uri="chapter12.xhtml#P7000497027000000000000000046B9B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000046B9C" data-uri="chapter12.xhtml#P7000497027000000000000000046B9C" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Threads. </span>Threads are logical flows that run in the context of a single process and are scheduled by the kernel. You can think of threads as a hybrid of the other two approaches, scheduled by the kernel like process flows and sharing the same virtual address space like I/O multiplexing flows.</p></li>
</ul>
<p id="P7000497027000000000000000046B9D" data-uri="chapter12.xhtml#P7000497027000000000000000046B9D" class="pcalibre1 pcalibre calibre2">This chapter investigates these three different concurrent programming techniques. To keep our discussion concrete, we will work with the same motivating application throughout—a concurrent version of the iterative echo server from <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007CC1.xhtml#P7000497027000000000000000007E4C"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">11.4.9</span></a>.</p>
</section>

</section>
<!--EOF:P7000497027000000000000000008097-->
<!--EOF:P70004970270000000000000000080DE-->
<!--EOF:P700049702700000000000000000817D-->
<!--EOF:P700049702700000000000000000821D-->
<!--EOF:P700049702700000000000000000827E-->
<!--EOF:P700049702700000000000000000849B-->
<!--EOF:P7000497027000000000000000008577-->

<!--EOF:P7000497027000000000000000008670-->
<!--EOF:P7000497027000000000000000008676-->
<!--EOF:P700049702700000000000000000867A-->
<!--EOF:P700049702700000000000000000875E-->

</section></body></html>
