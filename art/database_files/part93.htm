<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>3.9   Modification of the Database</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part92.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part94.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3.9   <span style=" color: #00AEEF;">Modification of the Database</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">We have restricted our attention until now to the extraction of information from the database. Now, we show how to add, remove, or change information with <span class="s44">SQL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">3.9.1 Deletion</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A <span class="s63">delete </span>request is expressed in much the same way as a query. We can delete only whole tuples; we cannot delete values on only particular attributes. <span class="s44">SQL </span>expresses a deletion by:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 248pt;text-indent: 0pt;text-align: left;">delete from <i>r</i></p><p class="s46" style="padding-left: 248pt;text-indent: 0pt;text-align: left;">where <i>P</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">where <i>P </i>represents a predicate and <i>r </i>represents a relation. The <b>delete </b>statement ﬁrst ﬁnds all tuples <i>t </i>in <i>r </i>for which <i>P</i>(<i>t</i>) is true, and then deletes them from <i>r</i>. The <b>where </b>clause can be omitted, in which case all tuples in <i>r </i>are deleted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Note that a <b>delete </b>command operates on only one relation. If we want to delete tuples from several relations, we must use one <b>delete </b>command for each relation. The predicate in the <b>where </b>clause may be as complex as a <b>select </b>command’s <b>where </b>clause. At the other extreme, the <b>where </b>clause may be empty. The request:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">delete from <i>instructor</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">deletes all tuples from the <i>instructor </i>relation. The <i>instructor </i>relation itself still exists, but it is empty.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: left;">Here are examples of <span class="s44">SQL </span>delete requests:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s40">Delete all tuples in the </span><span class="s13">instructor </span><span class="p">relation pertaining to instructors in the Finance department.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 253pt;text-indent: 0pt;text-align: left;">delete from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_521.png"/></span></p><p class="s46" style="padding-left: 253pt;text-indent: 0pt;text-align: left;">where <i>dept name </i><span class="s15">= </span><span class="p">&#39;Finance&#39;;</span></p><p class="s39" style="padding-top: 11pt;padding-left: 58pt;text-indent: 0pt;text-align: center;">• <span class="s40">Delete all instructors with a salary between $13,000 and $15,000.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 231pt;text-indent: 0pt;text-align: left;">delete from <i>instructor</i></p><p class="s46" style="padding-left: 231pt;text-indent: 0pt;text-align: left;">where <i>salary </i>between <span class="p">13000 </span>and <span class="p">15000;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 139pt;text-indent: -16pt;text-align: left;">• <span class="s40">Delete all tuples in the </span><span class="s13">instructor </span><span class="p">relation for those instructors associated with a department located in the Watson building.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 212pt;text-indent: 0pt;text-align: left;">delete from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_522.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_523.png"/></span></p><p class="s46" style="padding-left: 212pt;text-indent: 0pt;text-align: left;">where <i>dept name </i>in <span class="p">(</span>select <i>dept name</i></p><p class="s46" style="padding-left: 301pt;text-indent: 0pt;text-align: left;">from <i>department</i></p><p class="s46" style="padding-left: 301pt;text-indent: 0pt;text-align: left;">where <i>building </i><span class="s15">= </span><span class="p">&#39;Watson&#39;);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">This <b>delete </b>request ﬁrst ﬁnds all departments located in Watson and then deletes all <i>instructor </i>tuples pertaining to those departments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Note that, although we may delete tuples from only one relation at a time, we may reference any number of relations in a <b>select-from-where </b>nested in the <b>where </b>clause of a <b>delete</b>. The <b>delete </b>request can contain a nested <b>select </b>that references the relation from which tuples are to be deleted. For example, suppose that we want to delete the records of all instructors with salary below the average at the university. We could write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 233pt;text-indent: 0pt;line-height: 11pt;text-align: left;">delete from <i>instructor</i></p><p style="padding-left: 233pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><b>where </b><i>salary </i><span class="s83">&lt; </span>(<b>select avg </b>(<i>salary</i>)</p><p class="s46" style="padding-left: 303pt;text-indent: 0pt;line-height: 10pt;text-align: left;">from <i>instructor</i><span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The <b>delete </b>statement ﬁrst tests each tuple in the relation <i>instructor </i>to check whether the salary is less than the average salary of instructors in the university. Then, all tuples that pass the test— that is, represent an instructor with a lower-than-average salary— are deleted. Performing all the tests before performing any deletion is important— if some tuples are deleted before other tuples have been tested, the average salary may change, and the ﬁnal result of the <b>delete </b>would depend on the order in which the tuples were processed!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">3.9.2 Insertion</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">To insert data into a relation, we either specify a tuple to be inserted or write a query whose result is a set of tuples to be inserted. The attribute values for inserted tuples must be members of the corresponding attribute’s domain. Similarly, tuples inserted must have the correct number of attributes.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The simplest <span class="s63">insert </span>statement is a request to insert one tuple. Suppose that we wish to insert the fact that there is a course <span class="s44">CS</span>-437 in the Computer Science department with title “Database Systems” and four credit hours. We write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 146pt;text-indent: 0pt;text-align: left;">insert into <i>course</i></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: center;"><b>values </b>(&#39;<span class="s44">CS</span>-437&#39;, &#39;Database Systems&#39;, &#39;Comp. Sci.&#39;, 4);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">In this example, the values are speciﬁed in the order in which the corresponding at- tributes are listed in the relation schema. For the beneﬁt of users who may not re- member the order of the attributes, <span class="s44">SQL </span>allows the attributes to be speciﬁed as part of the <b>insert </b>statement. For example, the following <span class="s44">SQL </span><b>insert </b>statements are identical in function to the preceding one:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_524.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_525.png"/></span></p><p class="s13" style="padding-left: 146pt;text-indent: 0pt;text-align: left;"><b>insert into </b>course <span class="p">(</span>course id<span class="p">, </span>title<span class="p">, </span>dept name<span class="p">, </span>credits<span class="p">)</span></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: center;"><b>values </b>(&#39;<span class="s44">CS</span>-437&#39;, &#39;Database Systems&#39;, &#39;Comp. Sci.&#39;, 4);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_526.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_527.png"/></span></p><p class="s13" style="padding-left: 146pt;text-indent: 0pt;text-align: left;"><b>insert into </b>course <span class="p">(</span>title<span class="p">, </span>course id<span class="p">, </span>credits<span class="p">, </span>dept name<span class="p">)</span></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: center;"><b>values </b>(&#39;Database Systems&#39;, &#39;<span class="s44">CS</span>-437&#39;, 4, &#39;Comp. Sci.&#39;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">More generally, we might want to insert tuples on the basis of the result of a query. Suppose that we want to make each student in the Music department who has earned more than 144 credit hours an instructor in the Music department with a salary of</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">$18,000. We write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 162pt;text-indent: 0pt;text-align: left;">insert into <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_528.png"/></span></p><p style="padding-left: 189pt;text-indent: 0pt;text-align: left;"><b>select </b><span class="s69">ID</span>, <i>name</i>, <i>dept name</i>, 18000</p><p class="s46" style="padding-left: 189pt;text-indent: 0pt;line-height: 11pt;text-align: left;">from <i>student</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_529.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_530.png"/></span></p><p class="s46" style="padding-left: 189pt;text-indent: 0pt;line-height: 20pt;text-align: left;">where <i>dept name </i><span class="s15">= </span><span class="p">&#39;Music&#39; </span>and <i>tot cred </i><span class="s83">&gt; </span><span class="p">144;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_531.png"/></span></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Instead of specifying a tuple as we did earlier in this section, we use a <b>select </b>to specify a set of tuples. <span class="s44">SQL </span>evaluates the <b>select </b>statement ﬁrst, giving a set of tuples that is then inserted into the <i>instructor </i>relation. Each tuple has an <span class="s69">ID</span>,a <i>name</i>,a <i>dept name </i>(Music), and a salary of $18,000.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is important that the system evaluate the <b>select </b>statement fully before it performs any insertions. If it were to carry out some insertions while the <b>select </b>statement was being evaluated, a request such as:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 265pt;text-indent: 0pt;text-align: left;">insert into <i>student</i></p><p class="s46" style="padding-left: 292pt;text-indent: 0pt;text-align: left;">select <span class="p">*</span></p><p class="s46" style="padding-left: 292pt;text-indent: 0pt;text-align: left;">from <i>student</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">might insert an inﬁnite number of tuples, if the primary key constraint on <i>student </i>were absent. Without the primary key constraint, the request would insert the ﬁrst tuple in <i>student </i>again, creating a second copy of the tuple. Since this second copy is part of <i>student </i>now, the <b>select </b>statement may ﬁnd it, and a third copy would be inserted into <i>student</i>. The <b>select </b>statement may then ﬁnd this third copy and insert a fourth copy, and so on, forever. Evaluating the <b>select </b>statement completely before performing insertions avoids such problems. Thus, the above <b>insert </b>statement would simply duplicate every tuple in the <i>student </i>relation if the relation did not have a primary key constraint.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Our discussion of the <b>insert </b>statement considered only examples in which a value is given for every attribute in inserted tuples. It is possible for inserted tuples to be given values on only some attributes of the schema. The remaining attributes are assigned a null value denoted by <i>null</i>. Consider the request:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 6pt;text-indent: 0pt;text-align: center;">insert into <i>student</i></p><p style="padding-left: 153pt;text-indent: 0pt;text-align: center;"><b>values </b>(&#39;3003&#39;, &#39;Green&#39;, &#39;Finance&#39;, <i>null</i>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_532.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The tuple inserted by this request speciﬁed that a student with <span class="s69">ID </span>“3003” is in the Finance department, but the <i>tot cred </i>value for this student is not known.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Most relational database products have special “bulk loader” utilities to insert a large set of tuples into a relation. These utilities allow data to be read from format- ted text ﬁles, and they can execute much faster than an equivalent sequence of insert statements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">3.9.3 Updates</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In certain situations, we may wish to change a value in a tuple without changing <i>all </i>values in the tuple. For this purpose, the <b>update </b>statement can be used. As we could for <b>insert </b>and <b>delete</b>, we can choose the tuples to be updated by using a query.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Suppose that annual salary increases are being made, and salaries of all instructors are to be increased by 5 percent. We write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 221pt;text-indent: 0pt;text-align: left;">update <i>instructor</i></p><p class="s13" style="padding-left: 221pt;text-indent: 0pt;text-align: left;"><b>set </b>salary<span class="s15">= </span>salary <span class="p">* 1.05;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;">The preceding update statement is applied once to each of the tuples in the <i>instructor</i></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;">relation.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;">If a salary increase is to be paid only to instructors with a salary of less than</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;">$70,000, we can write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;text-align: left;">update <i>instructor</i></p><p class="s13" style="padding-left: 221pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>set </b>salary <span class="s15">= </span>salary <span class="p">* 1.05</span></p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;line-height: 20pt;text-align: left;">where <i>salary </i><span class="s83">&lt; </span><span class="p">70000;</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In general, the <b>where </b>clause of the <span class="s63">update </span>statement may contain any construct legal in the <b>where </b>clause of the <b>select </b>statement (including nested <b>select</b>s). As with <b>insert </b>and <b>delete</b>, a nested <b>select </b>within an <b>update </b>statement may reference the relation that is being updated. As before, <span class="s44">SQL </span>ﬁrst tests all tuples in the relation to see whether they should be updated, and it carries out the updates afterward. For example, we can write the request “Give a 5 percent salary raise to instructors whose salary is less than average” as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 201pt;text-indent: 0pt;text-align: left;">update <i>instructor</i></p><p class="s13" style="padding-left: 201pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>set </b>salary <span class="s15">= </span>salary <span class="p">* 1.05</span></p><p style="padding-left: 201pt;text-indent: 0pt;line-height: 17pt;text-align: left;"><b>where </b><i>salary </i><span class="s83">&lt; </span>(<b>select avg </b>(<i>salary</i>)</p><p class="s46" style="padding-left: 272pt;text-indent: 0pt;line-height: 10pt;text-align: left;">from <i>instructor</i><span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Let us now suppose that all instructors with salary over $100,000 receive a 3 per- cent raise, whereas all others receive a 5 percent raise. We could write two <b>update </b>statements:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;text-align: left;">update <i>instructor</i></p><p class="s13" style="padding-left: 221pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>set </b>salary <span class="s15">= </span>salary <span class="p">* 1.03</span></p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;line-height: 20pt;text-align: left;">where <i>salary </i><span class="s83">&gt; </span><span class="p">100000;</span></p><p class="s46" style="padding-top: 9pt;padding-left: 221pt;text-indent: 0pt;text-align: left;">update <i>instructor</i></p><p class="s13" style="padding-left: 221pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><b>set </b>salary <span class="s15">= </span>salary <span class="p">* 1.05</span></p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;line-height: 20pt;text-align: left;">where <i>salary </i><span class="s83">&lt;</span><span class="s15">= </span><span class="p">100000;</span></p><p style="padding-top: 8pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Note that the order of the two <b>update </b>statements is important. If we changed the order of the two statements, an instructor with a salary just under $100,000 would receive a raise of over 8 percent.</p><p class="s46" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">provides a </span>case <span class="p">construct that we can use to perform both updates with a single </span>update <span class="p">statement, avoiding the problem with the order of updates.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 32pt;text-indent: 0pt;text-align: center;">update <i>instructor</i></p><p class="s46" style="padding-left: 33pt;text-indent: 0pt;line-height: 12pt;text-align: center;">set <i>salary </i><span class="s15">= </span>case</p><p class="s46" style="padding-left: 197pt;text-indent: 0pt;line-height: 17pt;text-align: center;">when <i>salary </i><span class="s83">&lt;</span><span class="s15">= </span><span class="p">100000 </span>then <i>salary </i><span class="p">* 1.05</span></p><p class="s46" style="padding-left: 84pt;text-indent: 0pt;line-height: 10pt;text-align: center;">else <i>salary </i><span class="p">* 1.03</span></p><p class="s46" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">end</p><p style="padding-left: 14pt;text-indent: 0pt;text-align: center;">The general form of the case statement is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">case</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 9pt;padding-left: 119pt;text-indent: 0pt;text-align: right;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 1pt;text-indent: 0pt;line-height: 14pt;text-align: left;">when <i>pred</i><span class="s130">1 </span>then <i>result</i><span class="s130">1</span></p><p class="s46" style="padding-left: 1pt;text-indent: 0pt;line-height: 13pt;text-align: left;">when <i>pred</i><span class="s130">2 </span>then <i>result</i><span class="s130">2</span></p><p class="s15" style="padding-left: 1pt;text-indent: 0pt;line-height: 12pt;text-align: left;">…</p><p class="s46" style="padding-left: 1pt;text-indent: 0pt;line-height: 14pt;text-align: left;">when <i>pred</i><span class="s145">n </span>then <i>result</i><span class="s145">n</span></p><p class="s46" style="padding-left: 1pt;text-indent: 0pt;line-height: 12pt;text-align: left;">else <i>result</i><span class="s98">0</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">The operation returns </span>result<span class="s97">i</span><span class="p">, where </span>i <span class="p">is the ﬁrst of </span>pred<span class="s130">1</span><span class="s94">, </span>pred<span class="s130">2</span><span class="s94">, . . . , </span>pred<span class="s97">n </span><span class="p">that is satis- ﬁed; if none of the predicates is satisﬁed, the operation returns </span>result<span class="s98">0</span><span class="p">. Case statements can be used in any place where a value is expected.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_533.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Scalar subqueries are useful in <span class="s44">SQL </span>update statements, where they can be used in the <b>set </b>clause. We illustrate this using the <i>student </i>and <i>takes </i>relations that we introduced in Chapter 2. Consider an update where we set the <i>tot cred </i>attribute of each <i>student </i>tuple to the sum of the credits of courses successfully completed by the student. We assume that a course is successfully completed if the student has a grade that is neither &#39;F&#39; nor null. To specify this update, we need to use a subquery in the <b>set </b>clause, as shown below:</p><p class="s46" style="padding-top: 1pt;padding-left: 197pt;text-indent: 0pt;text-align: left;">update <i>student</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_534.png"/></span></p><p class="s46" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">set <i>tot cred </i><span class="s15">= </span><span class="p">(</span></p><p style="padding-left: 212pt;text-indent: 0pt;text-align: left;"><b>select sum</b>(<i>credits</i>) <b>from </b><i>takes</i>, <i>course</i></p><p style="padding-left: 212pt;text-indent: 0pt;text-align: left;"><b>where </b><i>student</i>.<span class="s69">ID</span>= <i>takes</i>.<span class="s69">ID </span><b>and</b></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_535.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_536.png"/></span></p><p class="s13" style="padding-left: 256pt;text-indent: 0pt;line-height: 12pt;text-align: left;">takes<span class="p">.</span>course id <span class="s15">= </span>course<span class="p">.</span>course id <b>and</b></p><p class="s13" style="padding-left: 256pt;text-indent: 0pt;line-height: 17pt;text-align: left;">takes<span class="p">.</span>grade <span class="s83">&lt;&gt; </span><span class="p">&#39;F&#39; </span><b>and</b></p><p class="s13" style="padding-left: 256pt;text-indent: 0pt;line-height: 10pt;text-align: left;">takes<span class="p">.</span>grade <b>is not null</b><span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_537.png"/></span></p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In case a student has not successfully completed any course, the preceding statement would set the <i>tot cred </i>attribute value to null. To set the value to 0 instead, we could use another <b>update </b>statement to replace null values with 0; a better alternative is to replace the clause “<b>select sum</b>(<i>credits</i>)” in the preceding subquery with the following <b>select </b>clause using a <b>case </b>expression:</p><p class="s46" style="padding-top: 3pt;padding-left: 194pt;text-indent: 0pt;text-align: justify;">select case</p><p style="padding-left: 221pt;text-indent: 0pt;text-align: left;"><b>when sum</b>(<i>credits</i>) <b>is not null then sum</b>(<i>credits</i>) <b>else </b>0</p><p class="s46" style="padding-left: 221pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 17pt;text-align: justify;"><a name="bookmark54">Many systems support a </a><b>coalesce </b>function, which we describe in more detail later, in Section 4.5.2, which provides a concise way of replacing nulls by other values. In the above example, we could have used <b>coalesce</b>(<b>sum</b>(<i>credits</i>), 0) instead of the <b>case </b>expression; this expression would return the aggregate result <b>sum</b>(<i>credits</i>) if it is not null, and 0 otherwise.<a name="bookmark96">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part92.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part94.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
