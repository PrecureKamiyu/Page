<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>43.13 Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part490.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part492.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">43.13 Summary</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">LFS introduces a new approach to updating the disk. Instead of over- writing files in places, LFS always writes to an unused portion of the disk, and then later reclaims that old space through cleaning. This ap- proach, which in database systems is called <b>shadow paging </b>[L77] and in file-system-speak is sometimes called <b>copy-on-write</b>, enables highly effi- cient writing, as LFS can gather all updates into an in-memory segment and then write them out together sequentially.</p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">The downside to this approach is that it generates garbage; old copies of the data are scattered throughout the disk, and if one wants to reclaim such space for subsequent usage, one must clean old segments periodi- cally. Cleaning became the focus of much controversy in LFS, and con-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 87pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: T<span class="s7">URN </span>F<span class="s7">LAWS </span>I<span class="s7">NTO </span>V<span class="s7">IRTUES</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Whenever your system has a fundamental flaw, see if you can turn it around into a feature or something useful. NetApp’s WAFL does this with old file contents; by making old versions available, WAFL no longer has to worry about cleaning, and thus provides a cool feature and re- moves the LFS cleaning problem all in one wonderful twist. Are there other examples of this in systems? Undoubtedly, but you’ll have to think of them yourself, because this chapter is over with a capital “O”. Over. Done. Kaput. We’re out. Peace!</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">cerns over cleaning costs [SS+95] perhaps limited LFS’s initial impact on the field. However, some modern commercial file systems, including Ne- tApp’s <b>WAFL </b>[HLM94], Sun’s <b>ZFS </b>[B07], and Linux <b>btrfs </b>[M07] adopt a similar copy-on-write approach to writing to disk, and thus the intel- lectual legacy of LFS lives on in these modern file systems. In particular, WAFL got around cleaning problems by turning them into a feature; by providing old versions of the file system via <b>snapshots</b>, users could ac- cess old files whenever they deleted current ones accidentally.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part490.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part492.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
