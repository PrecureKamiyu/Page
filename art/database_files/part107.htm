<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.5   SQL Data Types and Schemas</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part106.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part108.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 8pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">4.5   <span style=" color: #00AEEF;">SQL Data Types and Schemas</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In Chapter 3, we covered a number of built-in data types supported in <span class="s44">SQL</span>, such as integer types, real types, and character types. There are additional built-in data types supported by <span class="s44">SQL</span>, which we describe below. We also describe how to create basic user-deﬁned types in <span class="s44">SQL</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">4.5.1 Date and Time Types in SQL</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In addition to the basic data types we introduced in Section 3.2, the <span class="s44">SQL </span>standard supports several data types relating to dates and times:</p><p class="s39" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">• <span class="s63">date</span><span class="p">: A calendar date containing a (four-digit) year, month, and day of the month.</span></p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s63">time</span>: The time of day, in hours, minutes, and seconds. A variant, <b>time</b>(<i>p</i>), can be used to specify the number of fractional digits for seconds (the default being 0). It is also possible to store time-zone information along with the time by specifying <b>time with timezone</b>.</p><p style="padding-top: 3pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><b>timestamp</b>: A combination of <b>date </b>and <b>time</b>. A variant, <b>timestamp</b>(<i>p</i>), can be used to specify the number of fractional digits for seconds (the default here being 6). Time-zone information is also stored if <b>with timezone </b>is speciﬁed.</p><p style="padding-top: 6pt;padding-left: 106pt;text-indent: 0pt;text-align: justify;">Date and time values can be speciﬁed like this:</p><p class="s46" style="padding-top: 5pt;padding-left: 196pt;text-indent: 0pt;text-align: left;">date <span class="p">&#39;2018-04-25&#39;</span></p><p class="s46" style="padding-left: 196pt;text-indent: 0pt;text-align: left;">time <span class="p">&#39;09:30:00&#39;</span></p><p class="s46" style="padding-left: 196pt;text-indent: 0pt;text-align: left;">timestamp <span class="p">&#39;2018-04-25 10:29:01.45&#39;</span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Dates must be speciﬁed in the format year followed by month followed by day, as shown.<span class="s76">10</span> The seconds ﬁeld of <b>time </b>or <b>timestamp </b>can have a fractional part, as in the timestamp above.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_780.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_781.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">To extract individual ﬁelds of a <b>date </b>or <b>time </b>value <i>d</i>, we can use <b>extract </b>(<i>field </i><b>from </b><i>d</i>), where <i>field </i>can be one of <b>year, month, day, hour, minute</b>, or <b>second</b>. Time-zone information can be extracted using <b>timezone hour </b>and <b>timezone minute</b>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_782.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_783.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_784.png"/></span></p><p class="s46" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">deﬁnes several functions to get the current date and time. For example, </span>cur- rent date <span class="p">returns the current date, </span>current time <span class="p">returns the current time (with time zone), and </span>localtime <span class="p">returns the current local time (without time zone). Timestamps (date plus time) are returned by </span>current timestamp <span class="p">(with time zone) and </span>localtimes- tamp <span class="p">(local date and time without time zone).</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Some systems, including <span class="s44">M</span>y<span class="s44">SQL </span>oﬀer the <b>datetime </b>data type that represents a time that is not adjustable for time zone. In practice, speciﬁcation of time has numerous special cases, including the use of standard time versus “daylight” or “summer” time. Systems vary in the range of times representable.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">allows comparison operations on all the types listed here, and it allows both arithmetic and comparison operations on the various numeric types. </span><span class="s42">SQL </span><span class="s43">also provides a data type called </span><b>interval</b>, and it allows computations based on dates and times and on intervals. For example, if <i>x </i>and <i>y </i>are of type <b>date</b>, then <i>x </i><span class="s15">− </span><i>y </i>is an interval whose value is the number of days from date <i>x </i>to date <i>y</i>. Similarly, adding or subtracting an interval from a date or time gives back a date or time, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_785.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: center;">10<span class="s78">Many database systems oﬀer greater ﬂexibility in default conversions of strings to dates and timestamps.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">4.5.2 Type Conversion and Formatting Functions</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Although systems perform some data type <span class="s63">conversions </span>automatically, others need to be requested explicitly. We can use an expression of the form <b>cast </b>(<i>e </i><b>as </b><i>t</i>) to convert an expression <i>e </i>to the type <i>t</i>. Data-type conversions may be needed to perform certain operations or to enforce certain sort orders. For example, consider the <span class="s69">ID </span>attribute of <i>instructor</i>, which we have speciﬁed as being a string (<b>varchar</b>(5)). If we were to order output by this attribute, the <span class="s44">ID </span>11111 comes before the <span class="s44">ID </span>9, because the ﬁrst character, &#39;1&#39;, comes before &#39;9&#39;. However, if we were to write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_786.png"/></span></p><p class="s46" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">select cast<span class="p">(</span><span class="s69">ID </span>as numeric<span class="p">(5)) </span>as <i>inst id</i></p><p class="s46" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_787.png"/></span></p><p class="s46" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">order by <i>inst id</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">the result would be the sorted order we desire.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_788.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_789.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_790.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A diﬀerent type of conversion may be required for data to be displayed as the result of a query. For example, we may wish numbers to be shown with a speciﬁc number of digits, or data to be displayed in a particular format (such as month-day-year or day-month-year). These changes in display format are not conversion of data type but rather conversion of format. Database systems oﬀer a variety of formatting functions, and details vary among the leading systems. <span class="s44">M</span>y<span class="s44">SQL </span>oﬀers a <b>format </b>function. Oracle and <span class="s44">P</span>ostgre<span class="s44">SQL </span>oﬀer a set of functions, <b>to char, to number, </b>and <b>to date</b>. <span class="s44">SQL S</span>erver oﬀers a <b>convert </b>function.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Another issue in displaying results is the handling of null values. In this text, we use <i>null </i>for clarity of reading, but the default in most systems is just to leave the ﬁeld blank. We can choose how null values are output in a query result using the <b>coalesce </b>function. It takes an arbitrary number of arguments, all of which must be of the same type, and returns the ﬁrst non-null argument. For example, if we wished to display instructor <span class="s44">ID</span>s and salaries but to show null salaries as 0, we would write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 223pt;text-indent: 0pt;text-align: left;"><b>select </b><span class="s69">ID</span>, <b>coalesce</b>(<i>salary</i>, 0) <b>as </b><i>salary</i></p><p class="s46" style="padding-left: 223pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">A limitation of <b>coalesce </b>is the requirement that all the arguments must be of the same type. If we had wanted null salaries to appear as &#39;N/A&#39; to indicate “not available”, we would not be able to use <b>coalesce</b>. System-speciﬁc functions, such as Oracle’s <b>decode</b>, do allow such conversions. The general form of <b>decode </b>is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 187pt;text-indent: -21pt;text-align: left;"><b>decode </b><span class="p">(</span>value, match-1, replacement-1, match-2, replacement-2, <span class="s15">…</span>, match-N, replacement-N, default-replacement<span class="p">);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">It compares <i>value </i>against the <i>match </i>values and if a match is found, it replaces the at- tribute value with the corresponding replacement value. If no match succeeds, then the attribute value is replaced with the default replacement value. There are no require-</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">ments that datatypes match. Conveniently, the value <i>null </i>may appear as a <i>match </i>value and, unlike the usual case, <i>null </i>is treated as being equal to <i>null</i>. Thus, we could replace null salaries with &#39;N/A&#39; as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 158pt;text-indent: 0pt;text-align: left;"><b>select </b><span class="s69">ID</span>, <b>decode </b>(<i>salary</i>, <i>null</i>, &#39;N/A&#39;, <i>salary</i>) <b>as </b><i>salary</i></p><p class="s46" style="padding-left: 158pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.3 Default Values</p><p class="s42" style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">SQL <span class="s43">allows a </span><span class="s63">default </span><span class="p">value to be speciﬁed for an attribute as illustrated by the following</span></p><p class="s46" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">create table <span class="p">statement:</span></p><p class="s46" style="padding-top: 3pt;padding-left: 182pt;text-indent: 0pt;text-align: left;">create table <i>student</i></p><p style="padding-left: 202pt;text-indent: 0pt;text-align: left;">(<span class="s69">ID     </span><b>varchar </b>(5),</p><p class="s46" style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><i>name   </i>varchar <span class="p">(20) </span>not null<span class="p">,</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_791.png"/></span></p><p class="s13" style="padding-left: 205pt;text-indent: 0pt;text-align: left;">dept name  <b>varchar </b><span class="p">(20),</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_792.png"/></span></p><p class="s46" style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><i>tot cred   </i>numeric <span class="p">(3,0) </span>default <span class="p">0,</span></p><p style="padding-left: 205pt;text-indent: 0pt;text-align: left;"><b>primary key </b>(<span class="s69">ID</span>));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_793.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_794.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_795.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">The default value of the <i>tot cred </i>attribute is declared to be 0. As a result, when a tuple is inserted into the <i>student </i>relation, if no value is provided for the <i>tot cred </i>attribute, its value is set to 0. The following <span class="s63">insert </span>statement illustrates how an insertion can omit the value for the <i>tot cred </i>attribute.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_796.png"/></span></p><p style="padding-top: 9pt;padding-left: 25pt;text-indent: 0pt;text-align: center;"><b>insert into </b><i>student</i>(<span class="s69">ID</span>, <i>name</i>, <i>dept name</i>)</p><p class="s46" style="padding-left: 197pt;text-indent: 0pt;text-align: left;">values <span class="p">(&#39;12789&#39;, &#39;Newman&#39;, &#39;Comp. Sci.&#39;);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.4  Large-Object Types</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">Many database applications need to store attributes whose domain consists of large data items such as a photo, a high-resolution medical image, or a video. <span class="s44">SQL</span>, therefore, provides <span class="s63">large-object data types </span>for character data (<span class="s63">clob</span>) and binary data (<span class="s63">blob</span>). The letters “lob” in these data types stand for “Large OBject.” For example, we may declare attributes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_797.png"/></span></p><p class="s13" style="padding-top: 4pt;padding-left: 222pt;text-indent: 0pt;text-align: left;">book review <b>clob</b><span class="p">(10KB) </span>image <b>blob</b><span class="p">(10MB) </span>movie <b>blob</b><span class="p">(2GB)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">For result tuples containing large objects (multiple megabytes to gigabytes), it is ineﬃcient or impractical to retrieve an entire large object into memory. Instead, an application would usually use an <span class="s44">SQL </span>query to retrieve a “locator” for a large object and then use the locator to manipulate the object from the host language in which the application itself is written. For instance, the <span class="s44">JDBC </span>application program interface (described in Section 5.1.1) permits a locator to be fetched instead of the entire large</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="493" height="715" alt="image" src="Image_798.png"/></span></p><p class="s73" style="padding-left: 234pt;text-indent: 0pt;text-align: left;">Note 4.2 <span class="s146">TEMPORAL VALIDITY</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 129pt;text-indent: 0pt;text-align: justify;">In some situations, there is a need to include historical data, as, for example, if we wish to store not only the current salary of each instructor but also entire salary histories. It is easy enough to do this by adding two attributes to the <i>instructor </i>relation schema indicating the starting date for a given salary value and another indicating the end date. Then, an instructor may have several salary values, each corresponding to a speciﬁc pair of start and end dates. Those start and end dates are called the <i>valid time </i>values for the corresponding salary value.</p><p style="padding-left: 129pt;text-indent: 17pt;text-align: justify;">Observe that there may now be more than one tuple in the <i>instructor </i>relation with the same value of <span class="s44">ID</span>. Issues in specifying primary key and foreign key con- straints in the context of such temporal data are discussed in Section 7.10.</p><p style="padding-left: 129pt;text-indent: 17pt;text-align: justify;">For a database system to support such temporal constructs, a ﬁrst step is to provide syntax to specify that certain attributes deﬁne a valid time interval. We use Oracle 12’s syntax as an example. The <span class="s44">SQL DDL </span>for <i>instructor </i>is augmented using a <b>period </b>declaration as follows, to indicate that <i>start date </i>and <i>end date </i>attributes specify a valid-time interval.</p><p class="s46" style="padding-left: 206pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">create table <i>instructor</i></p><p style="padding-left: 219pt;text-indent: 0pt;text-align: left;">( <span class="s15">…</span></p><p class="s13" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">start date  <b>date</b><span class="p">,</span></p><p class="s13" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">end date   <b>date</b><span class="p">,</span></p><p class="s13" style="padding-left: 222pt;text-indent: 0pt;text-align: left;"><b>period for </b>valid time <span class="p">(</span>start date, end date)<span class="p">,</span></p><p class="s15" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">… <span class="p">);</span></p><p style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">Oracle 12c also provides several <span class="s44">DML </span>extensions to ease querying with temporal data. The <b>as of period for </b>construct can then be used in query to fetch only those tuples whose valid time period includes a speciﬁc time. To ﬁnd instructors and their salaries as of some time in the past, say January 20, 2014, we write:</p><p class="s13" style="padding-top: 5pt;padding-left: 186pt;text-indent: 0pt;text-align: justify;"><b>select </b>name<span class="p">, </span>salary<span class="p">, </span>start date, end date</p><p class="s46" style="padding-left: 186pt;text-indent: 0pt;text-align: justify;">from <i>instructor </i>as of period for <i>valid time </i><span class="p">&#39;</span><span class="s44">20-JAN-2014&#39;;</span></p><p style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: justify;">If we wish to ﬁnd tuples whose period of validity includes all or part of a period of time, say, January 20, 2014 to January 30, 2014, we write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 129pt;text-indent: 0pt;text-align: left;"><b>select </b>name<span class="p">, </span>salary<span class="p">, </span>start date, end date</p><p class="s46" style="padding-left: 129pt;text-indent: 0pt;text-align: left;">from <i>instructor </i>versions period for <i>valid time </i>between <span class="p">&#39;</span><span class="s44">20-JAN-2014&#39; </span><span class="s66">and </span><span class="s42">&#39;</span><span class="s140">30-JAN-2014&#39;;</span></p><p style="padding-top: 5pt;padding-left: 129pt;text-indent: 0pt;text-align: left;">Oracle 12c also implements a feature that allows stored database procedures (cov- ered in Chapter 5) to be run as of a speciﬁed time period.</p><p style="padding-left: 129pt;text-indent: 17pt;text-align: left;">The above constructs ease the speciﬁcation of the queries, although the queries can be written without using the constructs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">object; the locator can then be used to fetch the large object in small pieces, rather than all at once, much like reading data from an operating system ﬁle using a <span class="s49">read </span>function call.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.5 User-Defined Types</p><p class="s63" style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">supports two forms of </span>user-deﬁned data types<span class="p">. The ﬁrst form, which we cover here, is called </span>distinct types<span class="p">. The other form, called </span>structured data types<span class="p">, allows the creation of complex data types with nested record structures, arrays, and multisets. We do not cover structured data types in this chapter, but we describe them in Section 8.2.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_799.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_800.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_801.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">It is possible for several attributes to have the same data type. For example, the <i>name </i>attributes for student name and instructor name might have the same domain: the set of all person names. However, the domains of <i>budget </i>and <i>dept name </i>certainly ought to be distinct. It is perhaps less clear whether <i>name </i>and <i>dept name </i>should have the same domain. At the implementation level, both instructor names and department names are character strings. However, we would normally not consider the query “Find all instructors who have the same name as a department” to be a meaningful query. Thus, if we view the database at the conceptual, rather than the physical, level, <i>name </i>and <i>dept name </i>should have distinct domains.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">More importantly, at a practical level, assigning an instructor’s name to a depart- ment name is probably a programming error; similarly, comparing a monetary value expressed in dollars directly with a monetary value expressed in pounds is also almost surely a programming error. A good type system should be able to detect such assign- ments or comparisons. To support such checks, <span class="s44">SQL </span>provides the notion of <b>distinct types</b>.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">The <b>create type </b>clause can be used to deﬁne new types. For example, the statements:</p><p class="s46" style="padding-top: 5pt;padding-left: 182pt;text-indent: 0pt;text-align: justify;">create type <i>Dollars </i>as numeric<span class="p">(12,2) </span>ﬁnal<span class="p">; </span>create type <i>Pounds </i>as numeric<span class="p">(12,2) </span>ﬁnal<span class="p">;</span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">deﬁne the user-deﬁned types <i>Dollars </i>and <i>Pounds </i>to be decimal numbers with a total of 12 digits, two of which are placed after the decimal point.<span class="s76">11</span> The newly created types can then be used, for example, as types of attributes of relations. For example, we can declare the <i>department </i>table as:</p><p class="s46" style="padding-top: 5pt;padding-left: 206pt;text-indent: 0pt;text-align: justify;">create table <i>department</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_802.png"/></span></p><p style="padding-left: 219pt;text-indent: 0pt;text-align: left;">(<i>dept name  </i><b>varchar </b>(20),</p><p class="s13" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">building   <b>varchar </b><span class="p">(15),</span></p><p class="s13" style="padding-left: 222pt;text-indent: 0pt;text-align: left;">budget   Dollars<span class="p">);</span></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">An attempt to assign a value of type <i>Dollars </i>to a variable of type <i>Pounds </i>results in a compile-time error, although both are of the same numeric type. Such an assignment is likely to be due to a programmer error, where the programmer forgot about the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_803.png"/></span></p><p class="s80" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s77">11 </span><span class="s78">The keyword </span><b>ﬁnal </b>isn’t really meaningful in this context but is required by the <span class="s161">SQL:1999 </span>standard for reasons we won’t get into here; some implementations allow the <b>ﬁnal </b>keyword to be omitted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">diﬀerences in currency. Declaring diﬀerent types for diﬀerent currencies helps catch such errors.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">As a result of strong type checking, the expression (<i>department.budget</i>+20) would not be accepted since the attribute and the integer constant 20 have diﬀerent types. As we saw in Section 4.5.2, values of one type can be converted to another domain, as illustrated below:</p><p class="s46" style="padding-top: 7pt;padding-left: 84pt;text-indent: 0pt;text-align: center;">cast <span class="p">(</span><i>department.budget </i>to <i>numeric</i><span class="p">(12,2))</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">We could do addition on the numeric type, but to save the result back to an attribute of type <i>Dollars </i>we would have to use another cast expression to convert the type back to <i>Dollars</i>.</p><p class="s46" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="s42">SQL </span><span class="s43">provides </span>drop type <span class="p">and </span>alter type <span class="p">clauses to drop or modify types that have been created earlier.</span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Even before user-deﬁned types were added to <span class="s44">SQL </span>(in <span class="s44">SQL:1999</span>), <span class="s44">SQL </span>had a similar but subtly diﬀerent notion of <span class="s63">domain </span>(introduced in <span class="s44">SQL-92</span>), which can add integrity constraints to an underlying type. For example, we could deﬁne a domain <i>DDollars </i>as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 84pt;text-indent: 0pt;text-align: center;">create domain <i>DDollars </i>as numeric<span class="p">(12,2) </span>not null<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The domain <i>DDollars </i>can be used as an attribute type, just as we used the type <i>Dollars</i>. However, there are two signiﬁcant diﬀerences between types and domains:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: -16pt;text-align: justify;"><span class="s63">1. </span>Domains can have constraints, such as <b>not null</b>, speciﬁed on them, and can have default values deﬁned for variables of the domain type, whereas user-deﬁned types cannot have constraints or default values speciﬁed on them. User-deﬁned types are designed to be used not just for specifying attribute types, but also in proce- dural extensions to <span class="s44">SQL </span>where it may not be possible to enforce constraints.</p><p class="s63" style="padding-top: 6pt;padding-left: 145pt;text-indent: -17pt;text-align: justify;">2. <span class="p">Domains are not strongly typed. As a result, values of one domain type can be assigned to values of another domain type as long as the underlying types are compatible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When applied to a domain, the <b>check </b>clause permits the schema designer to specify a predicate that must be satisﬁed by any attribute declared to be from this domain. For instance, a <b>check </b>clause can ensure that an instructor’s salary domain allows only values greater than a speciﬁed value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 155pt;text-indent: 0pt;line-height: 11pt;text-align: left;">create domain <i>YearlySalary </i>numeric<span class="p">(8,2)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_804.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_805.png"/></span></p><p class="s46" style="padding-left: 218pt;text-indent: 0pt;line-height: 20pt;text-align: left;">constraint <i>salary value test </i>check<span class="p">(</span>value <span class="s83">&gt;</span><span class="s15">= </span><span class="p">29000.00);</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_806.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_807.png"/></span></p><p style="padding-top: 7pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The domain <i>YearlySalary </i>has a constraint that ensures that the <i>YearlySalary </i>is greater than or equal to $29,000.00. The clause <b>constraint </b><i>salary value test </i>is optional and is</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="493" height="443" alt="image" src="Image_808.png"/></span></p><p class="s73" style="padding-left: 59pt;text-indent: 0pt;text-align: center;">Note 4.3 <span class="s146">SUPPORT FOR TYPES AND DOMAINS</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: justify;">Although the <b>create type </b>and <b>create domain </b>constructs described in this section are part of the <span class="s44">SQL </span>standard, the forms of these constructs described here are not fully supported by most database implementations. <span class="s44">P</span>ostgre<span class="s44">SQL </span>supports the <b>create domain </b>construct, but its <b>create type </b>construct has a diﬀerent syntax and interpretation.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;"><span class="s42">IBM DB2 </span><span class="s43">supports a version of the </span><b>create type </b>that uses the syntax <b>create dis- tinct type</b>, but it does not support <b>create domain</b>. Microsoft <span class="s44">SQL S</span>erver implements a version of <b>create type </b>construct that supports domain constraints, similar to the <span class="s44">SQL </span><b>create domain </b>construct.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">Oracle does not support either construct as described here. Oracle, <span class="s44">IBM DB2</span>, <span class="s44">P</span>ostgre<span class="s44">SQL</span>, and <span class="s44">SQL S</span>erver all support object-oriented type systems using diﬀer- ent forms of the <b>create type </b>construct.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">However, <span class="s44">SQL </span>also deﬁnes a more complex object-oriented type system, which we study in Section 8.2. Types may have structure within them, like, for example, a <i>Name </i>type consisting of <i>firstname </i>and <i>lastname</i>. Subtyping is allowed as well; for example, a <i>Person </i>type may have subtypes <i>Student</i>, <i>Instructor</i>, etc. Inheritance rules are similar to those in object-oriented programming languages. It is possible to use references to tuples that behave much like references to objects in object- oriented programming languages. <span class="s44">SQL </span>allows array and multiset datatypes along with ways to manipulate those types.</p><p style="padding-left: 97pt;text-indent: 17pt;text-align: justify;">We do not cover the details of these features here. Database systems diﬀer in how they implement them, if they are implemented at all.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_809.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_810.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">used to give the name <i>salary value test </i>to the constraint. The name is used by the system to indicate the constraint that an update violated.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: left;">As another example, a domain can be restricted to contain only a speciﬁed set of values by using the <b>in </b>clause:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_811.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_812.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_813.png"/></span></p><p class="s46" style="padding-left: 155pt;text-indent: -28pt;text-align: left;">create domain <i>degree level </i>varchar<span class="p">(10) </span>constraint <i>degree level test</i></p><p class="s46" style="padding-left: 191pt;text-indent: 0pt;text-align: left;">check <span class="p">(</span>value in <span class="p">(&#39;Bachelors&#39;, &#39;Masters&#39;, &#39;Doctorate&#39;));</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.6 Generating Unique Key Values</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_814.png"/></span></p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">In our university example, we have seen primary-key attributes with diﬀerent data types. Some, like <i>dept name</i>, hold actual real-world information. Others, like <span class="s69">ID</span>, hold val- ues created by the enterprise solely for identiﬁcation purposes. Those latter types of primary-key domains generate the practical problem of new-value creation. Suppose</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">the university hires a new instructor. What <span class="s44">ID </span>should be assigned? How do we deter- mine that the new <span class="s44">ID </span>is unique? Although it is possible to write an <span class="s44">SQL </span>statement to do this, such a statement would need to check all preexisting <span class="s44">ID</span>s, which would harm system performance. Alternatively, one could set up a special table holding the largest <span class="s44">ID </span>value issued so far. Then, when a new <span class="s44">ID </span>is needed, that value can be incremented to the next one in sequence and stored as the new largest value.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Database systems oﬀer automatic management of unique key-value generation. The syntax diﬀers among the most popular systems and, sometimes, between versions of systems. The syntax we show here is close to that of Oracle and <span class="s44">DB2</span>. Suppose that instead of declaring instructor <span class="s44">ID</span>s in the <i>instructor </i>relation as “<span class="s69">ID </span><b>varchar</b>(5)”, we in- stead choose to let the system select a unique instructor <span class="s44">ID </span>value. Since this feature works only for numeric key- value data types, we change the type of <span class="s69">ID </span>to <b>number</b>, and write:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 214pt;text-indent: 0pt;text-align: left;"><span class="s69">ID </span>number<span class="p">(5) </span>generated always as identity</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_815.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">When the <b>always </b>option is used, any <b>insert </b>statement must avoid specifying a value for the automatically generated key. To do this, use the syntax for <b>insert </b>in which the attribute order is speciﬁed (see Section 3.9.2). For our example of <i>instructor</i>, we need specify only the values for <i>name</i>, <i>dept name</i>, and <i>salary</i>, as shown in the following ex- ample:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_816.png"/></span></p><p class="s13" style="padding-left: 204pt;text-indent: 0pt;text-align: left;"><b>insert into </b>instructor <span class="p">(</span>name<span class="p">, </span>dept name<span class="p">, </span>salary<span class="p">)</span></p><p class="s46" style="padding-left: 204pt;text-indent: 0pt;text-align: left;">values <span class="p">(&#39;Newprof&#39;, &#39;Comp. Sci.&#39;, 100000);</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">The generated <span class="s44">ID </span>value can be found via a normal <b>select </b>query. If we replace <b>always </b>with <b>by default</b>, we have the option of specifying our own choice of <span class="s69">ID </span>or relying on the system to generate one.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_817.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In <span class="s44">P</span>ostgre<span class="s44">SQL</span>, we can deﬁne the type of <span class="s69">ID </span>as <b>serial</b>, which tells <span class="s44">P</span>ostgre<span class="s44">SQL </span>to au- tomatically generate identiﬁers; in <span class="s44">M</span>y<span class="s44">SQL </span>we use <b>auto increment </b>in place of <b>generated always as identity</b>, while in <span class="s44">SQL S</span>erver we can use just <b>identity</b>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Additional options can be speciﬁed, with the <b>identity </b>speciﬁcation, depending on the database, including setting minimum and maximum values, choosing the starting value, choosing the increment from one value to the next, and so on.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Further, many databases support a <b>create sequence </b>construct, which creates a se- quence counter object separate from any relation, and allow <span class="s44">SQL </span>queries to get the next value from the sequence. Each call to get the next value increments the sequence counter. See the system manuals of the database to ﬁnd the exact syntax for creating sequences, and for retrieving the next value. Using sequences, we can generate iden- tiﬁers that are unique across multiple relations, for example, across <i>student</i>.<span class="s69">ID</span>, and <i>instructor</i>.<span class="s69">ID</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.7 Create Table Extensions</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">Applications often require the creation of tables that have the same schema as an ex- isting table. <span class="s44">SQL </span>provides a <b>create table like </b>extension to support this task:<span class="s76">12</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_818.png"/></span></p><p class="s46" style="padding-left: 56pt;text-indent: 0pt;text-align: center;">create table <i>temp instructor </i>like <i>instructor</i><span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_819.png"/></span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;">The above statement creates a new table <i>temp instructor </i>that has the same schema as</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">instructor<span class="p">.</span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">When writing a complex query, it is often useful to store the result of a query as a new table; the table is usually temporary. Two statements are required, one to create the table (with appropriate columns) and the second to insert the query result into the table. <span class="s44">SQL:2003 </span>provides a simpler technique to create a table containing the results of a query. For example, the following statement creates a table <i>t1 </i>containing the results of a query.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-top: 4pt;padding-left: 204pt;text-indent: 0pt;text-align: left;">create table <i>t1 </i>as</p><p style="padding-left: 225pt;text-indent: 0pt;text-align: left;">(<b>select </b>*</p><p class="s46" style="padding-left: 225pt;text-indent: 0pt;text-align: left;">from <i>instructor</i></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_820.png"/></span></p><p class="s46" style="padding-left: 225pt;text-indent: 0pt;text-align: left;">where <i>dept name </i><span class="p">= &#39;Music&#39;)</span></p><p class="s46" style="padding-left: 204pt;text-indent: 0pt;text-align: left;">with data<span class="p">;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">By default, the names and data types of the columns are inferred from the query result. Names can be explicitly given to the columns by listing the column names after the relation name.</p><p class="s46" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="p">As deﬁned by the </span><span class="s44">SQL:2003 </span><span class="p">standard, if the </span>with data <span class="p">clause is omitted, the table is created but not populated with data. However, many implementations populate the table with data by default even if the </span>with data <span class="p">clause is omitted. Note that several implementations support the functionality of </span>create table <span class="s15">… </span>like <span class="p">and </span>create table <span class="s15">… </span>as <span class="p">using diﬀerent syntax; see the respective system manuals for further details.</span></p><p class="s46" style="padding-left: 88pt;text-indent: 17pt;text-align: justify;"><span class="p">The above </span>create table <span class="s15">… </span>as <span class="p">statement, closely resembles the </span>create view <span class="p">statement and both are deﬁned by using queries. The main diﬀerence is that the contents of the table are set when the table is created, whereas the contents of a view always reﬂect the current query result.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">4.5.8 Schemas, Catalogs, and Environments</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">To understand the motivation for schemas and catalogs, consider how ﬁles are named in a ﬁle system. Early ﬁle systems were ﬂat; that is, all ﬁles were stored in a single directory. Current ﬁle systems have a directory (or, synonymously, folder) structure, with ﬁles stored within subdirectories. To name a ﬁle uniquely, we must specify the full path name of the ﬁle, for example, <span class="s49">/users/avi/db-book/chapter3.tex</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_821.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">12<span class="s78">This syntax is not supported in all systems.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">Like early ﬁle systems, early database systems also had a single name space for all relations. Users had to coordinate to make sure they did not try to use the same name for diﬀerent relations. Contemporary database systems provide a three-level hierarchy for naming relations. The top level of the hierarchy consists of <span class="s63">catalogs</span>, each of which can contain <span class="s63">schemas</span>. <span class="s44">SQL </span>objects such as relations and views are contained within a <b>schema</b>. (Some database implementations use the term <i>d</i>atabase in place of the term <i>c</i>atalog.)</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In order to perform any actions on a database, a user (or a program) must ﬁrst <i>connect </i>to the database. The user must provide the user name and usually, a password for verifying the identity of the user. Each user has a default catalog and schema, and the combination is unique to the user. When a user connects to a database system, the default catalog and schema are set up for the connection; this corresponds to the current directory being set to the user’s home directory when the user logs into an operating system.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: justify;">To identify a relation uniquely, a three-part name may be used, for example,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_822.png"/></span></p><p class="s13" style="padding-left: 247pt;text-indent: 0pt;text-align: left;">catalog5.univ schema.course</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_823.png"/></span></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">We may omit the catalog component, in which case the catalog part of the name is considered to be the default catalog for the connection. Thus, if <i>catalog5 </i>is the default catalog, we can use <i>univ schema.course </i>to identify the same relation uniquely.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_824.png"/></span></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If a user wishes to access a relation that exists in a diﬀerent schema than the default schema for that user, the name of the schema must be speciﬁed. However, if a relation is in the default schema for a particular user, then even the schema name may be omitted. Thus, we can use just <i>course </i>if the default catalog is <i>catalog5 </i>and the default schema is <i>univ schema</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">With multiple catalogs and schemas available, diﬀerent applications and diﬀerent users can work independently without worrying about name clashes. Moreover, multi- ple versions of an application— one a production version, other test versions— can run on the same database system.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The default catalog and schema are part of an <span class="s66">SQL </span><b>environment </b>that is set up for each connection. The environment additionally contains the user identiﬁer (also re- ferred to as the <i>authorization identifier</i>). All the usual <span class="s44">SQL </span>statements, including the <span class="s44">DDL </span>and <span class="s44">DML </span>statements, operate in the context of a schema.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">We can create and drop schemas by means of <b>create schema </b>and <b>drop schema </b>state- ments. In most database systems, schemas are also created automatically when user ac- counts are created, with the schema name set to the user account name. The schema is created in either a default catalog or a catalog speciﬁed when creating the user account. The newly created schema becomes the default schema for the user account.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Creation and dropping of catalogs is implementation dependent and not part of the <span class="s44">SQL </span>standard.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part106.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part108.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
