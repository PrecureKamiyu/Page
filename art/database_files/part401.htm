<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>22.2  Parallel Sort</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part400.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part402.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">22.2  <span style=" color: #00AEEF;">Parallel Sort</span></p><p style="padding-top: 11pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Suppose that we wish to sort a relation <i>r </i>that resides on <i>n </i>nodes <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s145">n</span>. If the relation has been range-partitioned on the attributes on which it is to be sorted, we can sort each partition separately and concatenate the results to get the full sorted relation. Since the tuples are partitioned on <i>n </i>nodes, the time required for reading the entire relation is reduced by a factor of <i>n </i>by the parallel access.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">If relation <i>r </i>has been partitioned in any other way, we can sort it in one of two ways:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: -16pt;text-align: justify;"><span class="s63">1. </span>We can range-partition <i>r </i>on the sort attributes, and then sort each partition sep- arately.</p><p class="s63" style="padding-top: 6pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">2. <span class="p">We can use a parallel version of the external sort-merge algorithm.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">22.2.1 Range-Partitioning Sort</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;"><span class="s63">Range-partitioning sort</span>, shown pictorially in Figure 22.1a, works in two steps: ﬁrst range-partitioning the relation, then sorting each partition separately. When we sort by range-partitioning the relation, it is not necessary to range-partition the relation on the same set of nodes as those on which that relation is stored. Suppose that we choose nodes <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s97">m </span>to sort the relation. There are two steps involved in this operation:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: -16pt;line-height: 94%;text-align: justify;"><span class="s63">1. </span>Redistribute the tuples in the relation, using a range-partition strategy, so that all tuples that lie within the <i>i</i>th range are sent to node <i>n</i><span class="s97">i</span>, which stores the relation temporarily on its local disk.</p><p style="padding-left: 145pt;text-indent: 17pt;text-align: justify;">To implement range partitioning, in parallel every node reads the tuples from its disk and sends each tuple to its destination node based on the partition func- tion. Each node <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s145">m </span>also receives tuples belonging to its partition and stores them locally. This step requires disk <span class="s44">I/O </span>and network communication.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="136" height="133" alt="image" src="Image_3173.png"/></span></p><p class="s111" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r <span class="s475">m</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s475">n</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s476">3</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s476">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">r<span class="s477">2</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">r<span class="s477">2</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s476">1</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s111" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s476">1</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="24" height="75" alt="image" src="Image_3174.png"/></span></p><p class="s111" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 185%;text-align: center;">r<span class="s476">1 </span>r<span class="s477">2</span></p><p class="s111" style="padding-left: 5pt;text-indent: 0pt;text-align: center;">r<span class="s476">3</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="24" height="50" alt="image" src="Image_3175.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s111" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">r<span class="s475">n</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="25" alt="image" src="Image_3176.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="25" alt="image" src="Image_3177.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="3" height="25" alt="image" src="Image_3178.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="24" height="50" alt="image" src="Image_3179.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s111" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">r <span class="s475">m</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="24" height="75" alt="image" src="Image_3180.png"/></span></p><p class="s111" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">r<span class="s476">1</span><span class="s203">‘</span></p><p class="s111" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">r<span class="s477">2</span><span class="s203">‘</span></p><p class="s111" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">r<span class="s476">3</span><span class="s203">‘</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="90" height="112" alt="image" src="Image_3181.png"/></span></p><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Merge</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Merge</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Merge</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Merge</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s230" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Local Sort</p><p style="text-indent: 0pt;text-align: left;"/><p class="s112" style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">1. Range Partition  2. Local Sort</p><p class="s478" style="padding-top: 3pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">1. Local Sort   <span class="s112">2. Range Partition and Merge</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s112" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: left;">(a) Range Partitioning Sort         (b) Parallel External Sort-Merge</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 22.1 <span class="s74">Parallel sorting algorithms.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s63" style="padding-left: 113pt;text-indent: -17pt;text-align: justify;">2. <span class="p">Each of the nodes sorts its partition of the relation locally, without interaction with the other nodes. Each node executes the same operation— namely, sorting— on a diﬀerent data set. (Execution of the same operation in parallel on diﬀerent sets of data are called </span>data parallelism<span class="p">.)</span></p><p class="s13" style="padding-top: 2pt;padding-left: 113pt;text-indent: 17pt;line-height: 76%;text-align: justify;"><span class="p">The ﬁnal merge operation is trivial, because the range partitioning in the ﬁrst phase ensures that, for 1 </span><span class="s86">≤ </span>i <span class="s83">&lt; </span>j <span class="s86">≤ </span>m<span class="p">, the key values in node </span>N<span class="s145">i </span><span class="p">are all less than the key values in </span>N<span class="s97">j </span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We must do range partitioning with a balanced range-partition vector so that each partition will have approximately the same number of tuples. We saw how to create such partition vectors in Section 21.3.1. Virtual node partitioning, as discussed in Section 21.3.2, can also be used to reduce skew. Recall that there are several times as many virtual nodes as real nodes, and virtual node partitioning creates a partition for each virtual node. Virtual nodes are then mapped to real nodes; doing so in a round-robin fashion tends to spreads virtual nodes across real nodes in a way that reduces the degree of skew at real nodes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">22.2.2 Parallel External Sort-Merge</p><p style="padding-top: 6pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;"><span class="s63">Parallel external sort-merge</span>, shown pictorially in Figure 22.1b, is an alternative to range partitioning sort. Suppose that a relation has already been partitioned among nodes <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s97">n </span>(it does not matter how the relation has been partitioned). Parallel ex-</p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">ternal sort-merge then works this way:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span class="s63">1. </span>Each node <i>N</i><span class="s97">i </span>sorts the data available at <i>N</i><span class="s97">i</span>.</p><p class="s63" style="padding-top: 4pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;">2. <span class="p">The system then merges the sorted runs on each node to get the ﬁnal sorted output.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;"><a name="bookmark474">The merging of the sorted runs in step 2 can be parallelized by this sequence of actions:</a><a name="bookmark519">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 145pt;text-indent: -16pt;line-height: 86%;text-align: justify;"><span class="s63">1. </span>The system range-partitions the sorted partitions at each node <i>N</i><span class="s97">i </span>(all by the same partition vector) across the nodes <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s97">m</span>. It sends the tuples in sorted order, so each node receives the tuples as sorted streams.</p><p style="padding-top: 7pt;padding-left: 145pt;text-indent: -17pt;line-height: 87%;text-align: justify;"><span class="s63">2. </span>Each node <i>N</i><span class="s97">i </span>performs a merge on the streams of tuples as they are received to get a single sorted run.</p><p style="padding-top: 7pt;padding-left: 145pt;text-indent: -17pt;line-height: 90%;text-align: justify;"><span class="s63">3. </span>The system concatenates the sorted runs on nodes <i>N</i><span class="s98">1</span>, <i>N</i><span class="s98">2</span>, <span class="s15">… </span>, <i>N</i><span class="s145">m </span>to get the ﬁnal result.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">As described, this sequence of actions results in an interesting form of <span class="s63">execution skew</span>, since at ﬁrst every node sends all tuples of partition 1 to <i>N</i><span class="s98">1</span>, then every node sends all tuples of partition 2 to <i>N</i><span class="s98">2</span>, and so on. Thus, while sending happens in parallel, receiving tuples becomes sequential: First only <i>N</i><span class="s98">1</span> receives tuples, then only <i>N</i><span class="s98">2</span> receives tuples, and so on. To avoid this problem, the sorted sequence of tuples <i>S</i><span class="s97">i</span><span class="s130">,</span><span class="s149">j </span>from any node <i>i</i></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">destined to any other node <i>j </i>is broken up into multiple blocks. Each node <i>N</i><span class="s145">i </span>sends</p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 94%;text-align: justify;">the ﬁrst block of tuples from <i>S</i><span class="s145">i</span><span class="s93">,</span><span class="s169">j </span>node <i>N</i><span class="s145">j </span>, for each <i>j</i>; it then sends the second block of tuples to each node <i>N</i><span class="s145">j </span>, and so on, until all blocks have been sent. Asa result, all nodes receive data in parallel. (Note that tuples are sent in blocks, rather than individually, to reduce network overheads.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part400.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part402.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
