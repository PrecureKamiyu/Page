<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>9.6   Application Architectures</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part187.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part189.htm">下一个 &gt;</a></p><p class="s65" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">9.6   <span style=" color: #00AEEF;">Application Architectures</span></p><p style="padding-top: 12pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">To handle their complexity, large applications are often broken into several layers:</p><p class="s13" style="padding-top: 6pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">The </span>presentation <span class="p">or </span>user-interface <span class="p">layer, which deals with user interaction. A sin- gle application may have several diﬀerent versions of this layer, corresponding to distinct kinds of interfaces such as web browsers and user interfaces of mobile phones, which have much smaller screens.</span></p><p style="padding-left: 139pt;text-indent: 12pt;text-align: justify;">In many implementations, the presentation/user-interface layer is itself concep- tually broken up into layers, based on the <span class="s63">model-view-controller </span>(<span class="s44">MVC</span>) architecture. The <span class="s63">model </span>corresponds to the business-logic layer, described below. The <span class="s63">view </span>de- ﬁnes the presentation of data; a single underlying model can have diﬀerent views depending on the speciﬁc software/device used to access the application. The <span class="s63">con- troller </span>receives events (user actions), executes actions on the model, and returns</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: 0pt;text-align: justify;">a view to the user. The <span class="s44">MVC </span>architecture is used in a number of web application frameworks.</p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The </span><span class="s63">business-logic </span><span class="p">layer, which provides a high-level view of data and actions on data. We discuss the business-logic layer in more detail in Section 9.6.1.</span></p><p class="s39" style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;text-align: justify;">• <span class="s40">The </span><span class="s63">data-access </span><span class="p">layer, which provides the interface between the business-logic layer and the underlying database. Many applications use an object-oriented language to code the business-logic layer and use an object-oriented model of data, while the underlying database is a relational database. In such cases, the data-access layer also provides the mapping from the object-oriented data model used by the business logic to the relational model supported by the database. We discuss such mappings in more detail in Section 9.6.2.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Figure 9.14 shows these layers, along with a sequence of steps taken to process a request from the web browser. The labels on the arrows in the ﬁgure indicate the order of the steps. When the request is received by the application server, the controller sends a request to the model. The model processes the request, using business logic, which may involve updating objects that are part of the model, followed by creating a result object. The model in turn uses the data-access layer to update or retrieve information from a database. The result object created by the model is sent to the view module, which creates an <span class="s44">HTML </span>view of the result to be displayed on the web browser. The view may be tailored based on the characteristics of the device used to view the result</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">— for example, whether it is a computer monitor with a large screen or a small screen on a phone. Increasingly, the view layer is implemented by code running at the client, instead of at the server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:344.449pt" cellspacing="0"><tr style="height:24pt"><td style="width:62pt;border-top-style:solid;border-top-width:2pt;border-top-color:#231F20;border-left-style:solid;border-left-width:2pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:2pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:2pt;border-right-color:#231F20" colspan="2" bgcolor="#E9F7FE"><p class="s213" style="padding-left: 7pt;padding-right: 1pt;text-indent: 0pt;line-height: 107%;text-align: left;">data-access layer</p></td></tr><tr style="height:13pt"><td style="width:31pt;border-top-style:solid;border-top-width:2pt;border-top-color:#231F20;border-right-style:solid;border-right-width:2pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:31pt;border-top-style:solid;border-top-width:2pt;border-top-color:#231F20;border-left-style:solid;border-left-width:2pt;border-left-color:#231F20"><p class="s213" style="padding-left: 1pt;text-indent: 0pt;line-height: 8pt;text-align: left;">4</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="390" height="219" alt="image" src="Image_2267.png"/></span></p><p class="s85" style="text-indent: 0pt;line-height: 10pt;text-align: left;">internet</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 10pt;text-align: left;">1</p><p class="s85" style="padding-top: 4pt;text-indent: 0pt;text-align: left;">8</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 10pt;text-align: left;">web browser</p><p style="text-indent: 0pt;text-align: left;"/><p class="s264" style="text-indent: 0pt;text-align: left;">7 <span class="s85">6</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s265" style="text-indent: 0pt;text-align: left;">5 <span class="s85">2</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 10pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="text-indent: 0pt;line-height: 10pt;text-align: left;">database</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">controller</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-top: 4pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">model</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">view</p><p style="text-indent: 0pt;text-align: left;"/><p class="s85" style="padding-top: 4pt;padding-left: 301pt;text-indent: 0pt;text-align: left;">web/application server</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.14 <span class="s74">Web application architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.6.1 The Business-Logic Layer</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The business-logic layer of an application for managing a university may provide ab- stractions of entities such as students, instructors, courses, sections, etc., and actions such as admitting a student to the university, enrolling a student in a course, and so on. The code implementing these actions ensures that <span class="s63">business rules </span>are satisﬁed; for example, the code would ensure that a student can enroll for a course only if she has already completed course prerequisites and has paid her tuition fees.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In addition, the business logic includes <span class="s63">workﬂows</span>, which describe how a particular task that involves multiple participants is handled. For example, if a candidate applies to the university, there is a workﬂow that deﬁnes who should see and approve the ap- plication ﬁrst, and if approved in the ﬁrst step, who should see the application next, and so on until either an oﬀer is made to the student, or a rejection note is sent out. Workﬂow management also needs to deal with error situations; for example, if a dead- line for approval/rejection is not met, a supervisor may need to be informed so she can intervene and ensure the application is processed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.6.2 The Data-Access Layer and Object-Relational Mapping</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In the simplest scenario, where the business-logic layer uses the same data model as the database, the data-access layer simply hides the details of interfacing with the database. However, when the business-logic layer is written using an object-oriented programming language, it is natural to model data as objects, with methods invoked on objects.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In early implementations, programmers had to write code for creating objects by fetching data from the database and for storing updated objects back in the database. However, such manual conversions between data models is cumbersome and error prone. One approach to handling this problem was to develop a database system that natively stores objects, and relationships between objects, and allows objects in the database to be accessed in exactly the same way as in-memory objects. Such databases, called <span class="s63">object-oriented databases</span>, were discussed in Section 8.2. However, object-oriented databases did not achieve commercial success for a variety of technical and commercial reasons.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: right;">An alternative approach is to use traditional relational databases to store data, but to automate the mapping of data in relation to in-memory objects, which are created on demand (since memory is usually not suﬃcient to store all data in the database), as well as the reverse mapping to store updated objects back as relations in the database. Several systems have been developed to implement such <span class="s63">object-relational mappings</span>.</p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">We describe the Hibernate and Django <span class="s44">ORM</span>s next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.6.2.1 Hibernate ORM</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The <span class="s63">Hibernate </span>system is widely used for mapping from Java objects to relations. Hiber- nate provides an implementation of the Java Persistence <span class="s44">API </span>(<span class="s44">JPA</span>). In Hibernate, the mapping from each Java class to one or more relations is speciﬁed in a mapping ﬁle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">The mapping ﬁle can specify, for example, that a Java class called <span class="s49">Student </span>is mapped to the relation <i>student</i>, with the Java attribute <span class="s49">ID </span>mapped to the attribute <i>student</i>.<span class="s44">ID</span>, and so on. Information about the database, such as the host on which it is running and user name and password for connecting to the database, are speciﬁed in a <i>properties </i>ﬁle. The program has to open a <i>session</i>, which sets up the connection to the database. Once the session is set up, a <span class="s49">Student </span>object <span class="s49">stud </span>created in Java can be stored in the database by invoking <span class="s49">session.save(stud)</span>. The Hibernate code generates the <span class="s44">SQL </span>com- mands required to store corresponding data in the <i>student </i>relation.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">While entities in an <span class="s44">E-R </span>model naturally correspond to objects in an object-oriented language such as Java, relationships often do not. Hibernate supports the ability to map such relationships as sets associated with objects. For example, the <i>takes </i>relationship between <i>student </i>and <i>section </i>can be modeled by associating a set of <i>section</i>s with each <i>student</i>, and a set of <i>student</i>s with each <i>section</i>. Once the appropriate mapping is spec- iﬁed, Hibernate populates these sets automatically from the database relation <i>takes</i>, and updates to the sets are reﬂected back to the database relation on commit.</p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">As an example of the use of Hibernate, we create a Java class corresponding to the</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">student <span class="p">relation as follows:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 236pt;text-indent: -31pt;text-align: left;">@Entity public class Student { @Id String ID;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2268.png"/></span></p><p class="s49" style="padding-left: 236pt;text-indent: 0pt;text-align: left;">String name; String department; int tot cred;</p><p class="s49" style="text-indent: 0pt;line-height: 12pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">To be precise, the class attributes should be declared as private, and getter/setter meth- ods should be provided to access the attributes, but we omit these details.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The mapping of the class attributes of <span class="s49">Student </span>to attributes of the relation <i>student </i>can be speciﬁed in a mapping ﬁle, in an <span class="s44">XML </span>format, or more conveniently, by means of annotations of the Java code. In the example above, the annotation <span class="s49">@Entity </span>denotes that the class is mapped to a database relation, whose name by default is the class name, and whose attributes are by default the same as the class attributes. The default relation name and attribute names can be overridden using <span class="s49">@Table </span>and <span class="s49">@Column </span>annotations. The <span class="s49">@Id </span>annotation in the example speciﬁes that <span class="s44">ID </span>is the primary key attribute.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The following code snippet then creates a <span class="s49">Student </span>object and saves it to the database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">Session session = getSessionFactory().openSession(); Transaction txn = session.beginTransaction();</p><p class="s49" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">Student stud = new Student(&quot;12328&quot;, &quot;John Smith&quot;, &quot;Comp. Sci.&quot;, 0); session.save(stud);</p><p class="s49" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">txn.commit(); session.close();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 0pt;text-align: left;">Hibernate automatically generates the required <span class="s44">SQL </span><b>insert </b>statement to create a <i>student</i></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;">tuple in the database.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: left;">Objects can be retrieved either by primary key or by a query, as illustrated in the following code snippet:</p><p class="s49" style="padding-top: 6pt;padding-left: 143pt;text-indent: 0pt;text-align: left;">Session session = getSessionFactory().openSession(); Transaction txn = session.beginTransaction();</p><p class="s49" style="padding-left: 143pt;text-indent: 0pt;line-height: 12pt;text-align: left;">// Retrieve student object by identifier</p><p class="s49" style="padding-left: 33pt;text-indent: 0pt;text-align: center;">Student stud1 = session.get(Student.class, &quot;12328&quot;);</p><p class="s49" style="padding-left: 30pt;text-indent: 0pt;text-align: center;">.. print out the Student information ..</p><p class="s49" style="padding-left: 50pt;text-indent: 0pt;text-align: center;">List students =</p><p class="s49" style="padding-left: 143pt;text-indent: 31pt;text-align: left;">session.createQuery(&quot;from Student as s order by s.ID asc&quot;).list(); for ( Iterator iter = students.iterator(); iter.hasNext(); ) {</p><p class="s49" style="padding-left: 174pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Student stud = (Student) iter.next();</p><p class="s49" style="padding-left: 174pt;text-indent: 0pt;text-align: left;">.. print out the Student information ..</p><p class="s49" style="padding-left: 143pt;text-indent: 0pt;text-align: left;">}</p><p class="s49" style="padding-left: 143pt;text-indent: 0pt;text-align: left;">txn.commit(); session.close();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">A single object can be retrieved using the <span class="s49">session.get() </span>method by providing its class and its primary key. The retrieved object can be updated in memory; when the transaction on the ongoing Hibernate session is committed, Hibernate automat- ically saves the updated objects by making corresponding updates on relations in the database.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">The preceding code snippet also shows a query in Hibernate’s <span class="s44">HQL </span>query language, which is based on <span class="s44">SQL </span>but designed to allow objects to be used directly in the query. The <span class="s44">HQL </span>query is automatically translated to <span class="s44">SQL </span>by Hibernate and executed, and the results are converted into a list of <span class="s49">Student </span>objects. The <span class="s49">for </span>loop iterates over the objects in this list.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">These features help to provide the programmer with a high-level model of data without bothering about the details of the relational storage. However, Hibernate, like other object-relational mapping systems, also allows queries to be written using <span class="s44">SQL </span>on the relations stored in the database; such direct database access, bypassing the object model, can be quite useful for writing complex queries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s183" style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">9.6.2.2 The Django ORM</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Several <span class="s44">ORM</span>s have been developed for the Python language. The <span class="s44">ORM </span>component of the Django framework is one of the most popular such <span class="s44">ORM</span>s, while <span class="s44">SQLA</span>lchemy is another popular Python <span class="s44">ORM</span>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Figure 9.15 shows a model deﬁnition for <span class="s49">Student </span>and <span class="s49">Instructor </span>in Django. Ob- serve that all of the ﬁelds of <i>student </i>and <i>instructor </i>have been deﬁned as ﬁelds in the class <span class="s49">Student </span>and <span class="s49">Instructor</span>, with appropriate type deﬁnitions.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In addition, the relation <i>advisor </i>has been modeled here as a many-to-many rela- tionship between <span class="s49">Student </span>and <span class="s49">Instructor</span>. The relationship is accessed by an attribute</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2269.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-top: 4pt;padding-left: 98pt;text-indent: 0pt;text-align: left;"><a name="bookmark191">from django.db import models</a><a name="bookmark211">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">class student(models.Model):</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2271.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2272.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">id = models.CharField(primary key=True, max length=5) name = models.CharField(max length=20)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2273.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2274.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">dept name = models.CharField(max length=20)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2275.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2276.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2277.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">tot cred = models.DecimalField(max digits=3, decimal places=0)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 98pt;text-indent: 0pt;text-align: left;">class instructor(models.Model):</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2278.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2279.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2280.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">id = models.CharField(primary key=True, max length=5) name = models.CharField(max length=20)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2281.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2282.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: left;">dept name = models.CharField(max length=20)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2283.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2284.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">salary = models.DecimalField(max digits=8, decimal places=2)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2285.png"/></span></p><p class="s49" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">advisees = models.ManyToManyField(student, related name=&quot;advisors&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="494" height="1" alt="image" src="Image_2286.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: center;">Figure 9.15 <span class="s74">Model definition in Django.</span></p><p style="padding-top: 10pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">called <span class="s49">advisees </span>in <span class="s49">Instructor</span>, which stores a set of references to <span class="s49">Student </span>objects. The reverse relationship from <span class="s49">Student </span>to <span class="s49">Instructor </span>is created automatically, and the model speciﬁes that the reverse relationship attribute in the <span class="s49">Student </span>class is named <span class="s49">advisors</span>; this attribute stores a set of references to <span class="s49">Instructor </span>objects.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2287.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2288.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_2289.png"/></span></p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">The Django view <span class="s49">person query model </span>shown in Figure 9.16 illustrates how to ac- cess database objects directly from the Python language, without using <span class="s44">SQL</span>. The expres- sion <span class="s49">Student.objects.filter() </span>returns all student objects that satisfy the speciﬁed ﬁlter condition; in this case, students with the given name. The student names are printed out along with the names of their advisors. The expression <span class="s49">Student.advisors.all() </span>returns a list of advisors (advisor objects) of a given student, whose names are then retrieved and returned by the <span class="s49">get names() </span>function. The case for instructors is similar, with instructor names being printed out along with the names of their advisees.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">Django provides a tool called <i>migrate</i>, which creates database relations from a given model. Models can be given version numbers. When migrate is invoked on a model with a new version number, while an earlier version number is already in the database, the migrate tool also generates <span class="s44">SQL </span>code for migrating the existing data from the old database schema to the new database schema. It is also possible to create Django mod- els from existing database schemas.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part187.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part189.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
