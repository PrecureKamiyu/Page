<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>Solutions to Practice Problems </title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P70004970270000000000000000046A4" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P7000497027000000000000000042E2D" data-uri="chapter04.xhtml#P7000497027000000000000000042E2D" epub:type="title"><span class="pcalibre label pcalibre1">Solutions to Practice Problems </span></h1></header>
<section id="P70004970270000000000000000046A6" data-uri="chapter04.xhtml#P70004970270000000000000000046A6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E2E" data-uri="chapter04.xhtml#P7000497027000000000000000042E2E" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B7A"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.1 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B77">360</a>)</h1></header>
<p id="P7000497027000000000000000042E2F" data-uri="chapter04.xhtml#P7000497027000000000000000042E2F" class="pcalibre1 pcalibre calibre2">Encoding instructions by hand is rather tedious, but it will solidify your understanding of the idea that assembly code gets turned into byte sequences by the assembler. In the following output from our Y86-64 assembler, each line shows an address and a byte sequence that starts at that address:</p>
<pre id="P7000497027000000000000000042E30" data-uri="chapter04.xhtml#P7000497027000000000000000042E30" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E31" data-uri="chapter04.xhtml#P7000497027000000000000000042E31" class="calibre10 pcalibre pcalibre1">1	0x100:				| .pos 0x100 # Start code at address 0x100
2	0x100: 30f30f00000000000000	|	irmovq $15,%rbx
3	0x10a: 2031			|	rrmovq %rbx,%rcx
4	0x10c:				| loop:
5	0x10c: 4013fdffffffffffffff	|	rmmovq %rcx,-3(%rbx)
6	0x116: 6031			|	addq %rbx,%rcx
7	0x118: 700c01000000000000	|	jmp loop
</code>
</pre>
<p id="P7000497027000000000000000042E32" data-uri="chapter04.xhtml#P7000497027000000000000000042E32" class="pcalibre1 pcalibre calibre2">Several features of this encoding are worth noting:</p>
<ul id="P7000497027000000000000000042E33" data-uri="chapter04.xhtml#P7000497027000000000000000042E33" class="calibre28 pcalibre pcalibre1">
<li id="P7000497027000000000000000042E34" data-uri="chapter04.xhtml#P7000497027000000000000000042E34" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E35" data-uri="chapter04.xhtml#P7000497027000000000000000042E35" class="pcalibre calibre3 pcalibre1">Decimal 15 (line 2) has hex representation <code id="P7000497027000000000000000042E36" data-uri="chapter04.xhtml#P7000497027000000000000000042E36" class="pcalibre1 calibre8 pcalibre">0x000000000000000f</code>. Writing the bytes in reverse order gives <code id="P7000497027000000000000000042E37" data-uri="chapter04.xhtml#P7000497027000000000000000042E37" class="pcalibre1 calibre8 pcalibre">Of 00 00 00 00 00 00 00</code>.</p>
</li>
<li id="P7000497027000000000000000042E38" data-uri="chapter04.xhtml#P7000497027000000000000000042E38" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E39" data-uri="chapter04.xhtml#P7000497027000000000000000042E39" class="pcalibre calibre3 pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000046B3" title="481" data-uri="chapter04.xhtml#P70004970270000000000000000046B3" epub:type="pagebreak"></span>Decimal -3 (line 5) has hex representation <code id="P7000497027000000000000000042E3A" data-uri="chapter04.xhtml#P7000497027000000000000000042E3A" class="pcalibre1 calibre8 pcalibre">0xfffffffffffffffd</code>. Writing the bytes in reverse order gives <code id="P7000497027000000000000000042E3B" data-uri="chapter04.xhtml#P7000497027000000000000000042E3B" class="pcalibre1 calibre8 pcalibre">fd ff ff ff ff ff ff ff</code>.</p></li>
<li id="P7000497027000000000000000042E3C" data-uri="chapter04.xhtml#P7000497027000000000000000042E3C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E3D" data-uri="chapter04.xhtml#P7000497027000000000000000042E3D" class="pcalibre calibre3 pcalibre1">The code starts at address <code id="P7000497027000000000000000042E3E" data-uri="chapter04.xhtml#P7000497027000000000000000042E3E" class="pcalibre1 calibre8 pcalibre">0x100</code>. The first instruction requires 10 bytes, while the second requires 2. Thus, the loop target will be <code id="P7000497027000000000000000042E3F" data-uri="chapter04.xhtml#P7000497027000000000000000042E3F" class="pcalibre1 calibre8 pcalibre">0x0000010c</code>. Writing these bytes in reverse order gives <code id="P7000497027000000000000000042E40" data-uri="chapter04.xhtml#P7000497027000000000000000042E40" class="pcalibre1 calibre8 pcalibre">0c 01 00 00 00 00 00 00</code>.</p></li>
</ul>
</section>
<section id="P70004970270000000000000000046BB" data-uri="chapter04.xhtml#P70004970270000000000000000046BB" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E41" data-uri="chapter04.xhtml#P7000497027000000000000000042E41" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B84"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.2 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003B77">360</a>)</h1></header>
<p id="P7000497027000000000000000042E42" data-uri="chapter04.xhtml#P7000497027000000000000000042E42" class="pcalibre1 pcalibre calibre2">Decoding a byte sequence by hand helps you understand the task faced by a processor. It must read byte sequences and determine what instructions are to be executed. In the following, we show the assembly code used to generate each of the byte sequences. To the left of the assembly code, you can see the address and byte sequence for each instruction.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042E43" data-uri="chapter04.xhtml#P7000497027000000000000000042E43">
<li id="P7000497027000000000000000042E44" data-uri="chapter04.xhtml#P7000497027000000000000000042E44" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E45" data-uri="chapter04.xhtml#P7000497027000000000000000042E45" class="pcalibre calibre3 pcalibre1">Some operations with immediate data and address displacements:</p>
<pre id="P7000497027000000000000000042E46" data-uri="chapter04.xhtml#P7000497027000000000000000042E46" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E47" data-uri="chapter04.xhtml#P7000497027000000000000000042E47" class="calibre10 pcalibre pcalibre1">0x100: 30f3fcffffffffffffff	|	 irmovq $-4,%rbx
0x10a: 40630008000000000000	|	 rmmovq %rsi,0x800(%rbx)
0x114: 00			|	 halt
</code>
</pre>
</li>
<li id="P7000497027000000000000000042E48" data-uri="chapter04.xhtml#P7000497027000000000000000042E48" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E49" data-uri="chapter04.xhtml#P7000497027000000000000000042E49" class="pcalibre calibre3 pcalibre1">Code including a function call:</p>
<pre id="P7000497027000000000000000042E4A" data-uri="chapter04.xhtml#P7000497027000000000000000042E4A" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E4B" data-uri="chapter04.xhtml#P7000497027000000000000000042E4B" class="calibre10 pcalibre pcalibre1">0x200: a06f			|	pushq %rsi
0x202: 800c02000000000000	|	call proc
0x20b: 00			|	halt
0x20c:				| proc:
0x20c: 30f30a00000000000000	|	irmovq $10,%rbx
0x216: 90			|	ret
</code>
</pre>
</li>
<li id="P7000497027000000000000000042E4C" data-uri="chapter04.xhtml#P7000497027000000000000000042E4C" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E4D" data-uri="chapter04.xhtml#P7000497027000000000000000042E4D" class="pcalibre calibre3 pcalibre1">Code containing illegal instruction specifier byte <code id="P7000497027000000000000000042E4E" data-uri="chapter04.xhtml#P7000497027000000000000000042E4E" class="pcalibre1 calibre8 pcalibre">0xf0</code>:</p>
<pre id="P7000497027000000000000000042E4F" data-uri="chapter04.xhtml#P7000497027000000000000000042E4F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E50" data-uri="chapter04.xhtml#P7000497027000000000000000042E50" class="calibre10 pcalibre pcalibre1">0x300: 50540700000000000000		|	<code id="P7000497027000000000000000042E51" data-uri="chapter04.xhtml#P7000497027000000000000000042E51" class="pcalibre1 calibre8 pcalibre">mrmovq</code> 7(%rsp),%rbp
0x30a: 10				|	nop
0x30b: fO				| .byte OxfO # Invalid instruction code
0x30c: b01f				|	popq %rcx
</code>
</pre>
</li>
<li id="P7000497027000000000000000042E52" data-uri="chapter04.xhtml#P7000497027000000000000000042E52" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E53" data-uri="chapter04.xhtml#P7000497027000000000000000042E53" class="pcalibre calibre3 pcalibre1">Code containing a jump operation:</p>
<pre id="P7000497027000000000000000042E54" data-uri="chapter04.xhtml#P7000497027000000000000000042E54" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E55" data-uri="chapter04.xhtml#P7000497027000000000000000042E55" class="calibre10 pcalibre pcalibre1">0x400:				| loop:
0x400: 6113			|	subq %rcx, %rbx
0x402: 730004000000000000	|	je loop
0x40b: 00			|	halt
</code>
</pre>
</li>
<li id="P7000497027000000000000000042E56" data-uri="chapter04.xhtml#P7000497027000000000000000042E56" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E57" data-uri="chapter04.xhtml#P7000497027000000000000000042E57" class="pcalibre calibre3 pcalibre1">Code containing an invalid second byte in a <code id="P7000497027000000000000000042E58" data-uri="chapter04.xhtml#P7000497027000000000000000042E58" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction:</p>
<pre id="P7000497027000000000000000042E59" data-uri="chapter04.xhtml#P7000497027000000000000000042E59" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E5A" data-uri="chapter04.xhtml#P7000497027000000000000000042E5A" class="calibre10 pcalibre pcalibre1">0x500: 6362		|	 xorq %rsi,%rdx
0x502: a0		|	 .byte 0xa0 # pushq instruction code
0x503: f0		|	 .byte 0xf0 # Invalid register specifier byte
</code>
</pre>
</li>
</ol>

</section>

<section id="P70004970270000000000000000046D6" data-uri="chapter04.xhtml#P70004970270000000000000000046D6" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E5B" data-uri="chapter04.xhtml#P7000497027000000000000000042E5B" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000046D8" title="482" data-uri="chapter04.xhtml#P70004970270000000000000000046D8" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C23"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.3 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C1A">369</a>)</h1></header>
<p id="P7000497027000000000000000042E5C" data-uri="chapter04.xhtml#P7000497027000000000000000042E5C" class="pcalibre1 pcalibre calibre2">Using the <code id="P7000497027000000000000000042E5D" data-uri="chapter04.xhtml#P7000497027000000000000000042E5D" class="pcalibre1 calibre8 pcalibre">iaddq</code> instruction, we can rewrite the <code id="P7000497027000000000000000042E5E" data-uri="chapter04.xhtml#P7000497027000000000000000042E5E" class="pcalibre1 calibre8 pcalibre">sum</code> function as</p>
<pre id="P7000497027000000000000000042E5F" data-uri="chapter04.xhtml#P7000497027000000000000000042E5F" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E60" data-uri="chapter04.xhtml#P7000497027000000000000000042E60" class="calibre10 pcalibre pcalibre1"># long sum(long *start, long count)
# start in %rdi, count in %rsi
sum:
	xorq %rax,%rax		# sum = 0
	andq %rsi,%rsi		# Set condition codes
	jmp test
loop:
	mrmovq (%rdi),%r10	# Get *start
	addq %r10,%rax		# Add to sum
	iaddq $8,%rdi		# start++
	iaddq $-1,%rsi		# count--
test :
	jne loop		# Stop when 0
	ret
</code>
</pre>
</section>

<section id="P70004970270000000000000000046DE" data-uri="chapter04.xhtml#P70004970270000000000000000046DE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E61" data-uri="chapter04.xhtml#P7000497027000000000000000042E61" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C31"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.4 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C33">370</a>)</h1></header>
<p id="P7000497027000000000000000042E62" data-uri="chapter04.xhtml#P7000497027000000000000000042E62" class="pcalibre1 pcalibre calibre2">G<span class="smallcaps pcalibre pcalibre1">cc</span>, running on an x86-64 machine, produces the following code for <code id="P7000497027000000000000000042E63" data-uri="chapter04.xhtml#P7000497027000000000000000042E63" class="pcalibre1 calibre8 pcalibre">rsum</code>:</p>
<pre id="P7000497027000000000000000042E64" data-uri="chapter04.xhtml#P7000497027000000000000000042E64" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E65" data-uri="chapter04.xhtml#P7000497027000000000000000042E65" class="calibre10 pcalibre pcalibre1"><i class="calibre5 pcalibre pcalibre1">long rsum(long * start, long count)</i>
<i class="calibre5 pcalibre pcalibre1">start in %rdi, count in %rsi</i>
rsum:
	movl	$0, %eax
	testq	%rsi, %rsi
	jle	.L9
	pushq	%rbx
	movq	(%rdi), %rbx
	subq	$1, %rsi
	addq	$8, %rdi
	call	rsum
	addq	%rbx, %rax
	popq	%rbx
.L9:
	rep; ret
</code>
</pre>
<p id="P7000497027000000000000000042E66" data-uri="chapter04.xhtml#P7000497027000000000000000042E66" class="pcalibre1 pcalibre calibre2">This can easily be adapted to produce Y86-64 code:</p>
<pre id="P7000497027000000000000000042E67" data-uri="chapter04.xhtml#P7000497027000000000000000042E67" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E68" data-uri="chapter04.xhtml#P7000497027000000000000000042E68" class="calibre10 pcalibre pcalibre1"># long rsum(long *start, long count)
# start in %rdi, count in %rsi
rsum:
	xorq %rax,%rax		# Set return value to 0
	andq %rsi,%rsi		# Set condition codes
	je return		# If count == 0, return 0
	pushq %rbx		# Save callee-saved register
	<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000046E7" title="483" data-uri="chapter04.xhtml#P70004970270000000000000000046E7" epub:type="pagebreak"></span>mrmovq (%rdi), %rbx	# Get *start
	irmovq $-1,%r10
	addq %r10,%rsi		# count--
	irmovq $8,%r10
	addq %r10,%rdi		# start++
	call rsum
	addq %rbx,%rax		# Add *start to sum
	popq %rbx		# Restore callee-saved register
return:
	ret
</code>
</pre>
</section>
<section id="P70004970270000000000000000046E8" data-uri="chapter04.xhtml#P70004970270000000000000000046E8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E69" data-uri="chapter04.xhtml#P7000497027000000000000000042E69" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C3C"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.5 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C33">370</a>)</h1></header>
<p id="P7000497027000000000000000042E6A" data-uri="chapter04.xhtml#P7000497027000000000000000042E6A" class="pcalibre1 pcalibre calibre2">This problem gives you a chance to try your hand at writing assembly code.</p>
<pre id="P7000497027000000000000000042E6B" data-uri="chapter04.xhtml#P7000497027000000000000000042E6B" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E6C" data-uri="chapter04.xhtml#P7000497027000000000000000042E6C" class="calibre10 pcalibre pcalibre1">1	# long absSum(long *start, long count)
2	# start in %rdi, count in %rsi
3	absSum:
4		irmovq $8,%r8			# Constant 8
5		irmovq $1,%r9			# Constant 1
6		xorq %rax,%rax			# sum = 0
7		andq %rsi,%rsi			# Set condition codes
8		jmp test
9	loop :
10		mrmovq (%rdi),%r10		# x = *start
11		xorq %r11,%r11			# Constant 0
12		subq %r10,%r11			# -x
13		jle pos				# Skip if -x &lt;= 0
14		rrmovq %r11,%r10		# x = -x
15	pos:
16		addq %r10,%rax			# Add to sum
17		addq %r8,%rdi			# start++
18		subq %r9,%rsi			# count--
19	test:
20		jne loop			# Stop when 0
21		ret
</code>
</pre>
</section>

<section id="P70004970270000000000000000046ED" data-uri="chapter04.xhtml#P70004970270000000000000000046ED" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E6D" data-uri="chapter04.xhtml#P7000497027000000000000000042E6D" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C43"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.6 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C33">370</a>)</h1></header>
<p id="P7000497027000000000000000042E6E" data-uri="chapter04.xhtml#P7000497027000000000000000042E6E" class="pcalibre1 pcalibre calibre2">This problem gives you a chance to try your hand at writing assembly code with conditional moves. We show only the code for the loop. The rest is the same as for <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C3C"><span class="pcalibre label pcalibre1">Problem </span><span class="pcalibre label pcalibre1">4.5</span></a>:</p>
<pre id="P7000497027000000000000000042E6F" data-uri="chapter04.xhtml#P7000497027000000000000000042E6F" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E70" data-uri="chapter04.xhtml#P7000497027000000000000000042E70" class="calibre10 pcalibre pcalibre1">9	loop :
10		mrmovq (%rdi),%r10	# x = *start
11		xorq %r11,%r11		# Constant 0
12		subq %r10,%r11		# -x
13		cmovg %r11,%10		# If -x &gt; 0 then x = -x
<span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000046F2" title="484" data-uri="chapter04.xhtml#P70004970270000000000000000046F2" epub:type="pagebreak"></span>14		addq %r10,%rax		# Add to sum
15		addq %r8,%rdi		# start++
16		subq %r9,%rsi		# count--
17	test:
18		jne loop		# Stop when 0
</code>
</pre>
</section>
<section id="P70004970270000000000000000046F3" data-uri="chapter04.xhtml#P70004970270000000000000000046F3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E71" data-uri="chapter04.xhtml#P7000497027000000000000000042E71" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C54"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.7 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C33">370</a>)</h1></header>
<p id="P7000497027000000000000000042E72" data-uri="chapter04.xhtml#P7000497027000000000000000042E72" class="pcalibre1 pcalibre calibre2">Although it is hard to imagine any practical use for this particular instruction, it is important when designing a system to avoid any ambiguities in the specification. We want to determine a reasonable convention for the instruction's behavior and to make sure each of our implementations adheres to this convention.</p>
<p id="P7000497027000000000000000042E73" data-uri="chapter04.xhtml#P7000497027000000000000000042E73" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000042E74" data-uri="chapter04.xhtml#P7000497027000000000000000042E74" class="pcalibre1 calibre8 pcalibre">subq</code> instruction in this test compares the starting value of <code id="P7000497027000000000000000042E75" data-uri="chapter04.xhtml#P7000497027000000000000000042E75" class="pcalibre1 calibre8 pcalibre">%rsp</code> to the value pushed onto the stack. The fact that the result of this subtraction is zero implies that the old value of <code id="P7000497027000000000000000042E76" data-uri="chapter04.xhtml#P7000497027000000000000000042E76" class="pcalibre1 calibre8 pcalibre">%rsp</code> gets pushed.</p>
</section>
<section id="P70004970270000000000000000046FA" data-uri="chapter04.xhtml#P70004970270000000000000000046FA" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E77" data-uri="chapter04.xhtml#P7000497027000000000000000042E77" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C64"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.8 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C5B">371</a>)</h1></header>
<p id="P7000497027000000000000000042E78" data-uri="chapter04.xhtml#P7000497027000000000000000042E78" class="pcalibre1 pcalibre calibre2">It is even more difficult to imagine why anyone would want to pop to the stack pointer. Still, we should decide on a convention and stick with it. This code sequence pushes <code id="P7000497027000000000000000042E79" data-uri="chapter04.xhtml#P7000497027000000000000000042E79" class="pcalibre1 calibre8 pcalibre">0xabcd</code> onto the stack, pops to <code id="P7000497027000000000000000042E7A" data-uri="chapter04.xhtml#P7000497027000000000000000042E7A" class="pcalibre1 calibre8 pcalibre">%rsp</code>, and returns the popped value. Since the result equals <code id="P7000497027000000000000000042E7B" data-uri="chapter04.xhtml#P7000497027000000000000000042E7B" class="pcalibre1 calibre8 pcalibre">0xabcd</code>, we can deduce that <code id="P7000497027000000000000000042E7C" data-uri="chapter04.xhtml#P7000497027000000000000000042E7C" class="pcalibre1 calibre8 pcalibre">popq %rsp</code> sets the stack pointer to the value read from memory. It is therefore equivalent to the instruction <code id="P7000497027000000000000000042E7D" data-uri="chapter04.xhtml#P7000497027000000000000000042E7D" class="pcalibre1 calibre8 pcalibre">mrmovq</code> (<code id="P7000497027000000000000000042E7E" data-uri="chapter04.xhtml#P7000497027000000000000000042E7E" class="pcalibre1 calibre8 pcalibre">%rsp</code>),<code id="P7000497027000000000000000042E7F" data-uri="chapter04.xhtml#P7000497027000000000000000042E7F" class="pcalibre1 calibre8 pcalibre">%rsp</code>.</p>
</section>
<section id="P7000497027000000000000000004704" data-uri="chapter04.xhtml#P7000497027000000000000000004704" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E80" data-uri="chapter04.xhtml#P7000497027000000000000000042E80" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CAE"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.9 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003C99">374</a>)</h1></header>
<p id="P7000497027000000000000000042E81" data-uri="chapter04.xhtml#P7000497027000000000000000042E81" class="pcalibre1 pcalibre calibre2">The <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>function requires that the 2 bits have opposite values:</p>
<p id="P7000497027000000000000000042E82" data-uri="chapter04.xhtml#P7000497027000000000000000042E82" class="pcalibre1 pcalibre calibre2"><code id="P7000497027000000000000000042E83" data-uri="chapter04.xhtml#P7000497027000000000000000042E83" class="pcalibre1 calibre8 pcalibre">bool xor = (!a &amp;&amp; b) || (a &amp;&amp; !b);</code></p>
<p id="P7000497027000000000000000042E84" data-uri="chapter04.xhtml#P7000497027000000000000000042E84" class="pcalibre1 pcalibre calibre2">In general, the signals <code id="P7000497027000000000000000042E85" data-uri="chapter04.xhtml#P7000497027000000000000000042E85" class="pcalibre1 calibre8 pcalibre">eq</code> and <code id="P7000497027000000000000000042E86" data-uri="chapter04.xhtml#P7000497027000000000000000042E86" class="pcalibre1 calibre8 pcalibre">xor</code> will be complements of each other. That is, one will equal 1 whenever the other is 0.</p>
</section>
<section id="P700049702700000000000000000470C" data-uri="chapter04.xhtml#P700049702700000000000000000470C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E87" data-uri="chapter04.xhtml#P7000497027000000000000000042E87" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CDD"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.10 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CDC">377</a>)</h1></header>
<p id="P7000497027000000000000000042E88" data-uri="chapter04.xhtml#P7000497027000000000000000042E88" class="pcalibre1 pcalibre calibre2">The outputs of the <span class="smallcaps pcalibre pcalibre1">exclusive-or </span>circuits will be the complements of the bit equality values. Using DeMorgan's laws (Web Aside <span class="smallcaps pcalibre pcalibre1">data:bool </span>on page 52), we can implement <span class="smallcaps pcalibre pcalibre1">and </span>using <span class="smallcaps pcalibre pcalibre1">or </span>and <span class="smallcaps pcalibre pcalibre1">not</span>, yielding the circuit shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004718"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.71</span></a>.</p>
</section>
<section id="P700049702700000000000000000470F" data-uri="chapter04.xhtml#P700049702700000000000000000470F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E89" data-uri="chapter04.xhtml#P7000497027000000000000000042E89" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D08"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.11 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CF5">379</a>)</h1></header>
<p id="P7000497027000000000000000042E8A" data-uri="chapter04.xhtml#P7000497027000000000000000042E8A" class="pcalibre1 pcalibre calibre2">We can see that the second part of the case expression can be written as</p>
<pre id="P7000497027000000000000000042E8B" data-uri="chapter04.xhtml#P7000497027000000000000000042E8B" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042E8C" data-uri="chapter04.xhtml#P7000497027000000000000000042E8C" class="calibre10 pcalibre pcalibre1">B &lt;= C	 : B;</code></pre>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042E8D" data-uri="chapter04.xhtml#P7000497027000000000000000042E8D">Since the first line will detect the case where A is the minimum element, the second line need only determine whether B or C is minimum.</p>
</section>

<section id="P7000497027000000000000000004715" data-uri="chapter04.xhtml#P7000497027000000000000000004715" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E8E" data-uri="chapter04.xhtml#P7000497027000000000000000042E8E" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D15"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.12 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003D0F">380</a>)</h1></header>
<p id="P7000497027000000000000000042E8F" data-uri="chapter04.xhtml#P7000497027000000000000000042E8F" class="pcalibre1 pcalibre calibre2">This design is a variant of the one to find the minimum of the three inputs:</p>

<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004718" data-uri="chapter04.xhtml#P7000497027000000000000000004718">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004719" title="485" data-uri="chapter04.xhtml#P7000497027000000000000000004719" epub:type="pagebreak"></span><img alt="A diagram illustrates gates." id="P7000497027000000000000000042E90" data-uri="P700049702700000000000000000B70B" src="../images/p485-1.png" class="calibre167 pcalibre pcalibre1"/>
<figcaption id="P7000497027000000000000000042E91" data-uri="chapter04.xhtml#P7000497027000000000000000042E91" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P7000497027000000000000000042E92" data-uri="chapter04.xhtml#P7000497027000000000000000042E92" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">4.71 </span>Solution for <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003C81.xhtml#P7000497027000000000000000003CDD"><span class="pcalibre1 label2 pcalibre">Problem </span><span class="number pcalibre pcalibre1">4.10</span></a>.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000002316C" data-uri="chapter04.xhtml#P700049702700000000000000002316C">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P7000497027000000000000000042E93" data-uri="chapter04.xhtml#P7000497027000000000000000042E93" class="pcalibre1 pcalibre calibre2">Four diagrams leda to an OR gate, which leads to a NOT and Eq:</p>
<ul id="P7000497027000000000000000042E94" data-uri="chapter04.xhtml#P7000497027000000000000000042E94" class="pcalibre calibre31 pcalibre1">
<li id="P7000497027000000000000000042E95" data-uri="chapter04.xhtml#P7000497027000000000000000042E95" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E96" data-uri="chapter04.xhtml#P7000497027000000000000000042E96" class="pcalibre calibre3 pcalibre1">Xor with inputs a<sub class="pcalibre1 calibre47 pcalibre">63</sub> and b<sub class="pcalibre1 calibre47 pcalibre">63</sub> and output ! eq<sub class="pcalibre1 calibre47 pcalibre">63</sub></p></li>
<li id="P7000497027000000000000000042E97" data-uri="chapter04.xhtml#P7000497027000000000000000042E97" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E98" data-uri="chapter04.xhtml#P7000497027000000000000000042E98" class="pcalibre calibre3 pcalibre1">Xor with inputs a<sub class="pcalibre1 calibre47 pcalibre">62</sub> and b<sub class="pcalibre1 calibre47 pcalibre">62</sub> and output ! eq<sub class="pcalibre1 calibre47 pcalibre">62</sub></p></li>
<li id="P7000497027000000000000000042E99" data-uri="chapter04.xhtml#P7000497027000000000000000042E99" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E9A" data-uri="chapter04.xhtml#P7000497027000000000000000042E9A" class="pcalibre calibre3 pcalibre1">Xor with inputs a<sub class="pcalibre1 calibre47 pcalibre">1</sub> and b<sub class="pcalibre1 calibre47 pcalibre">1</sub> and output ! eq<sub class="pcalibre1 calibre47 pcalibre">1</sub></p></li>
<li id="P7000497027000000000000000042E9B" data-uri="chapter04.xhtml#P7000497027000000000000000042E9B" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042E9C" data-uri="chapter04.xhtml#P7000497027000000000000000042E9C" class="pcalibre calibre3 pcalibre1">Xor with inputs a<sub class="pcalibre1 calibre47 pcalibre">0</sub> and b<sub class="pcalibre1 calibre47 pcalibre">0</sub> and output ! eq<sub class="pcalibre1 calibre47 pcalibre">0</sub></p></li>
</ul>
</details>
</figcaption>
</figure>
<pre id="P7000497027000000000000000042E9D" data-uri="chapter04.xhtml#P7000497027000000000000000042E9D" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042E9E" data-uri="chapter04.xhtml#P7000497027000000000000000042E9E" class="calibre10 pcalibre pcalibre1">word Med3 = [
	A &lt;= B &amp;&amp; B &lt;= C : B;
	C &lt;= B &amp;&amp; B &lt;= A : B;
	B &lt;= A &amp;&amp; A &lt;= C : A;
	C &lt;= A &amp;&amp; A &lt;= B : A;
	1		 : C;
];
</code>
</pre>
</section>

<section id="P700049702700000000000000000471F" data-uri="chapter04.xhtml#P700049702700000000000000000471F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042E9F" data-uri="chapter04.xhtml#P7000497027000000000000000042E9F" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003DAD"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.13 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003D85">387</a>)</h1></header>
<p id="P7000497027000000000000000042EA0" data-uri="chapter04.xhtml#P7000497027000000000000000042EA0" class="pcalibre1 pcalibre calibre2">These exercises help make the stage computations more concrete. We can see from the object code that this instruction is located at address <code id="P7000497027000000000000000042EA1" data-uri="chapter04.xhtml#P7000497027000000000000000042EA1" class="pcalibre1 calibre8 pcalibre">0x016</code>. It consists of 10 bytes, with the first two being <code id="P7000497027000000000000000042EA2" data-uri="chapter04.xhtml#P7000497027000000000000000042EA2" class="pcalibre1 calibre8 pcalibre">0x30</code> and <code id="P7000497027000000000000000042EA3" data-uri="chapter04.xhtml#P7000497027000000000000000042EA3" class="pcalibre1 calibre8 pcalibre">0xf4</code>. The last 8 bytes are a byte-reversed version of <code id="P7000497027000000000000000042EA4" data-uri="chapter04.xhtml#P7000497027000000000000000042EA4" class="pcalibre1 calibre8 pcalibre">0x0000000000000080</code> (decimal 128).</p>

<table id="P7000497027000000000000000042EA5" data-uri="chapter04.xhtml#P7000497027000000000000000042EA5" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042EA6" data-uri="chapter04.xhtml#P7000497027000000000000000042EA6" class="calibre18 pcalibre pcalibre1">Stage	</th><th id="P7000497027000000000000000042EA7" data-uri="chapter04.xhtml#P7000497027000000000000000042EA7" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042EA8" data-uri="chapter04.xhtml#P7000497027000000000000000042EA8" class="calibre10 pcalibre pcalibre1">irmovq</code> V, rB	</th><th id="P7000497027000000000000000042EA9" data-uri="chapter04.xhtml#P7000497027000000000000000042EA9" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000042EAA" data-uri="chapter04.xhtml#P7000497027000000000000000042EAA" class="calibre10 pcalibre pcalibre1">irmovq</code> $128, <code id="P7000497027000000000000000042EAB" data-uri="chapter04.xhtml#P7000497027000000000000000042EAB" class="calibre10 pcalibre pcalibre1">%rsp</code></th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042EAC" data-uri="chapter04.xhtml#P7000497027000000000000000042EAC" class="calibre20 pcalibre pcalibre1">Fetch	</td><td id="P7000497027000000000000000042EAD" data-uri="chapter04.xhtml#P7000497027000000000000000042EAD" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]	</td><td id="P7000497027000000000000000042EAE" data-uri="chapter04.xhtml#P7000497027000000000000000042EAE" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub><code id="P7000497027000000000000000042EAF" data-uri="chapter04.xhtml#P7000497027000000000000000042EAF" class="calibre10 pcalibre pcalibre1">[0x016] = 3:0</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
	<td id="P7000497027000000000000000042EB0" data-uri="chapter04.xhtml#P7000497027000000000000000042EB0" class="calibre20 pcalibre pcalibre1">rA:rB ← MfiTC + 1]	</td><td id="P7000497027000000000000000042EB1" data-uri="chapter04.xhtml#P7000497027000000000000000042EB1" class="calibre20 pcalibre pcalibre1">rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[<code id="P7000497027000000000000000042EB2" data-uri="chapter04.xhtml#P7000497027000000000000000042EB2" class="calibre10 pcalibre pcalibre1">0x017] = f:4</code></td></tr>
	<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042EB3" data-uri="chapter04.xhtml#P7000497027000000000000000042EB3" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 2]	</td><td id="P7000497027000000000000000042EB4" data-uri="chapter04.xhtml#P7000497027000000000000000042EB4" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub><code id="P7000497027000000000000000042EB5" data-uri="chapter04.xhtml#P7000497027000000000000000042EB5" class="calibre10 pcalibre pcalibre1">[0x018] = 128</code></td></tr>
	<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042EB6" data-uri="chapter04.xhtml#P7000497027000000000000000042EB6" class="calibre20 pcalibre pcalibre1">valP ← PC + 10	</td><td id="P7000497027000000000000000042EB7" data-uri="chapter04.xhtml#P7000497027000000000000000042EB7" class="calibre20 pcalibre pcalibre1">valP ← <code id="P7000497027000000000000000042EB8" data-uri="chapter04.xhtml#P7000497027000000000000000042EB8" class="calibre10 pcalibre pcalibre1">0x016 + 10 = 0x020</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EB9" data-uri="chapter04.xhtml#P7000497027000000000000000042EB9" class="calibre20 pcalibre pcalibre1">Decode		</td><td colspan="3" class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EBA" data-uri="chapter04.xhtml#P7000497027000000000000000042EBA" class="calibre20 pcalibre pcalibre1">Execute	</td><td id="P7000497027000000000000000042EBB" data-uri="chapter04.xhtml#P7000497027000000000000000042EBB" class="calibre20 pcalibre pcalibre1">valE ← 0 + valC	</td><td id="P7000497027000000000000000042EBC" data-uri="chapter04.xhtml#P7000497027000000000000000042EBC" class="calibre20 pcalibre pcalibre1">valE ← <code id="P7000497027000000000000000042EBD" data-uri="chapter04.xhtml#P7000497027000000000000000042EBD" class="calibre10 pcalibre pcalibre1">0+128=128</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EBE" data-uri="chapter04.xhtml#P7000497027000000000000000042EBE" class="calibre20 pcalibre pcalibre1">Memory		</td><td colspan="2" class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EBF" data-uri="chapter04.xhtml#P7000497027000000000000000042EBF" class="calibre20 pcalibre pcalibre1">Write back	</td><td id="P7000497027000000000000000042EC0" data-uri="chapter04.xhtml#P7000497027000000000000000042EC0" class="calibre20 pcalibre pcalibre1">R[rB] ← valE	</td><td id="P7000497027000000000000000042EC1" data-uri="chapter04.xhtml#P7000497027000000000000000042EC1" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042EC2" data-uri="chapter04.xhtml#P7000497027000000000000000042EC2" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE=128</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EC3" data-uri="chapter04.xhtml#P7000497027000000000000000042EC3" class="calibre20 pcalibre pcalibre1">PC update	</td><td id="P7000497027000000000000000042EC4" data-uri="chapter04.xhtml#P7000497027000000000000000042EC4" class="calibre20 pcalibre pcalibre1">PC ← valP	</td><td id="P7000497027000000000000000042EC5" data-uri="chapter04.xhtml#P7000497027000000000000000042EC5" class="calibre20 pcalibre pcalibre1">PC ← valP = <code id="P7000497027000000000000000042EC6" data-uri="chapter04.xhtml#P7000497027000000000000000042EC6" class="calibre10 pcalibre pcalibre1">0x020</code></td></tr>
</tbody>
</table>

<p id="P7000497027000000000000000042EC7" data-uri="chapter04.xhtml#P7000497027000000000000000042EC7" class="pcalibre1 pcalibre calibre2">This instruction sets register <code id="P7000497027000000000000000042EC8" data-uri="chapter04.xhtml#P7000497027000000000000000042EC8" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 128 and increments the PC by 10.</p>

</section>
<section id="P700049702700000000000000000474A" data-uri="chapter04.xhtml#P700049702700000000000000000474A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042EC9" data-uri="chapter04.xhtml#P7000497027000000000000000042EC9" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000474C" title="486" data-uri="chapter04.xhtml#P700049702700000000000000000474C" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E52"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.14 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E26">390</a>)</h1></header>
<p id="P7000497027000000000000000042ECA" data-uri="chapter04.xhtml#P7000497027000000000000000042ECA" class="pcalibre1 pcalibre calibre2">We can see that the instruction is located at address <code id="P7000497027000000000000000042ECB" data-uri="chapter04.xhtml#P7000497027000000000000000042ECB" class="pcalibre1 calibre8 pcalibre">0x02c</code> and consists of 2 bytes with values <code id="P7000497027000000000000000042ECC" data-uri="chapter04.xhtml#P7000497027000000000000000042ECC" class="pcalibre1 calibre8 pcalibre">0xb0</code> and <code id="P7000497027000000000000000042ECD" data-uri="chapter04.xhtml#P7000497027000000000000000042ECD" class="pcalibre1 calibre8 pcalibre">0x00f</code>. Register <code id="P7000497027000000000000000042ECE" data-uri="chapter04.xhtml#P7000497027000000000000000042ECE" class="pcalibre1 calibre8 pcalibre">%rsp</code> was set to 120 by the <code id="P7000497027000000000000000042ECF" data-uri="chapter04.xhtml#P7000497027000000000000000042ECF" class="pcalibre1 calibre8 pcalibre">pushq</code> instruction (line 6), which also stored 9 at this memory location.</p>

<table id="P7000497027000000000000000042ED0" data-uri="chapter04.xhtml#P7000497027000000000000000042ED0" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1"><th id="P7000497027000000000000000042ED1" data-uri="chapter04.xhtml#P7000497027000000000000000042ED1" class="calibre18 pcalibre pcalibre1">Stage</th><th id="P7000497027000000000000000042ED2" data-uri="chapter04.xhtml#P7000497027000000000000000042ED2" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042ED3" data-uri="chapter04.xhtml#P7000497027000000000000000042ED3" class="calibre10 pcalibre pcalibre1">popq</code> rA</th><th id="P7000497027000000000000000042ED4" data-uri="chapter04.xhtml#P7000497027000000000000000042ED4" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000042ED5" data-uri="chapter04.xhtml#P7000497027000000000000000042ED5" class="calibre10 pcalibre pcalibre1">popq %rax</code></th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042ED6" data-uri="chapter04.xhtml#P7000497027000000000000000042ED6" class="calibre20 pcalibre pcalibre1">Fetch</td><td id="P7000497027000000000000000042ED7" data-uri="chapter04.xhtml#P7000497027000000000000000042ED7" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]<br class="edition pcalibre pcalibre1"/>rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td>
<td id="P7000497027000000000000000042ED8" data-uri="chapter04.xhtml#P7000497027000000000000000042ED8" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub><code id="P7000497027000000000000000042ED9" data-uri="chapter04.xhtml#P7000497027000000000000000042ED9" class="calibre10 pcalibre pcalibre1">[0x02c] = b:0</code><br class="edition pcalibre pcalibre1"/>rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub><code id="P7000497027000000000000000042EDA" data-uri="chapter04.xhtml#P7000497027000000000000000042EDA" class="calibre10 pcalibre pcalibre1">[0x02d] = 0:f</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042EDB" data-uri="chapter04.xhtml#P7000497027000000000000000042EDB" class="calibre20 pcalibre pcalibre1">valP ← PC + 2</td><td id="P7000497027000000000000000042EDC" data-uri="chapter04.xhtml#P7000497027000000000000000042EDC" class="calibre20 pcalibre pcalibre1">valP ← <code id="P7000497027000000000000000042EDD" data-uri="chapter04.xhtml#P7000497027000000000000000042EDD" class="calibre10 pcalibre pcalibre1">0x02c + 2 = 0x02e</code></td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042EDE" data-uri="chapter04.xhtml#P7000497027000000000000000042EDE" class="calibre20 pcalibre pcalibre1">Decode</td><td id="P7000497027000000000000000042EDF" data-uri="chapter04.xhtml#P7000497027000000000000000042EDF" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042EE0" data-uri="chapter04.xhtml#P7000497027000000000000000042EE0" class="calibre10 pcalibre pcalibre1">%rsp</code>]<br class="edition pcalibre pcalibre1"/>valB ← R[<code id="P7000497027000000000000000042EE1" data-uri="chapter04.xhtml#P7000497027000000000000000042EE1" class="calibre10 pcalibre pcalibre1">%rsp</code>]</td><td id="P7000497027000000000000000042EE2" data-uri="chapter04.xhtml#P7000497027000000000000000042EE2" class="calibre20 pcalibre pcalibre1">valA ← R[<code id="P7000497027000000000000000042EE3" data-uri="chapter04.xhtml#P7000497027000000000000000042EE3" class="calibre10 pcalibre pcalibre1">%rsp</code>] = <code id="P7000497027000000000000000042EE4" data-uri="chapter04.xhtml#P7000497027000000000000000042EE4" class="calibre10 pcalibre pcalibre1">120</code> <br class="edition pcalibre pcalibre1"/>valB ← R[<code id="P7000497027000000000000000042EE5" data-uri="chapter04.xhtml#P7000497027000000000000000042EE5" class="calibre10 pcalibre pcalibre1">%rsp</code>] = <code id="P7000497027000000000000000042EE6" data-uri="chapter04.xhtml#P7000497027000000000000000042EE6" class="calibre10 pcalibre pcalibre1">120</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EE7" data-uri="chapter04.xhtml#P7000497027000000000000000042EE7" class="calibre20 pcalibre pcalibre1">Execute</td><td id="P7000497027000000000000000042EE8" data-uri="chapter04.xhtml#P7000497027000000000000000042EE8" class="calibre20 pcalibre pcalibre1">valE ← valB + 8</td><td id="P7000497027000000000000000042EE9" data-uri="chapter04.xhtml#P7000497027000000000000000042EE9" class="calibre20 pcalibre pcalibre1">valE ← <code id="P7000497027000000000000000042EEA" data-uri="chapter04.xhtml#P7000497027000000000000000042EEA" class="calibre10 pcalibre pcalibre1">120 + 8 = 128</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EEB" data-uri="chapter04.xhtml#P7000497027000000000000000042EEB" class="calibre20 pcalibre pcalibre1">Memory</td><td id="P7000497027000000000000000042EEC" data-uri="chapter04.xhtml#P7000497027000000000000000042EEC" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valA]</td><td id="P7000497027000000000000000042EED" data-uri="chapter04.xhtml#P7000497027000000000000000042EED" class="calibre20 pcalibre pcalibre1">valM ← M<sub class="calibre59 pcalibre pcalibre1">8</sub><code id="P7000497027000000000000000042EEE" data-uri="chapter04.xhtml#P7000497027000000000000000042EEE" class="calibre10 pcalibre pcalibre1">[120] = 9</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EEF" data-uri="chapter04.xhtml#P7000497027000000000000000042EEF" class="calibre20 pcalibre pcalibre1">Write back</td><td id="P7000497027000000000000000042EF0" data-uri="chapter04.xhtml#P7000497027000000000000000042EF0" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042EF1" data-uri="chapter04.xhtml#P7000497027000000000000000042EF1" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE <br class="edition pcalibre pcalibre1"/>R[rA] ← valM</td><td id="P7000497027000000000000000042EF2" data-uri="chapter04.xhtml#P7000497027000000000000000042EF2" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042EF3" data-uri="chapter04.xhtml#P7000497027000000000000000042EF3" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← 128 <br class="edition pcalibre pcalibre1"/>R[<code id="P7000497027000000000000000042EF4" data-uri="chapter04.xhtml#P7000497027000000000000000042EF4" class="calibre10 pcalibre pcalibre1">%rax</code>] ← <code id="P7000497027000000000000000042EF5" data-uri="chapter04.xhtml#P7000497027000000000000000042EF5" class="calibre10 pcalibre pcalibre1">9</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042EF6" data-uri="chapter04.xhtml#P7000497027000000000000000042EF6" class="calibre20 pcalibre pcalibre1">PC update</td><td id="P7000497027000000000000000042EF7" data-uri="chapter04.xhtml#P7000497027000000000000000042EF7" class="calibre20 pcalibre pcalibre1">PC ← valP</td><td id="P7000497027000000000000000042EF8" data-uri="chapter04.xhtml#P7000497027000000000000000042EF8" class="calibre20 pcalibre pcalibre1">PC ← <code id="P7000497027000000000000000042EF9" data-uri="chapter04.xhtml#P7000497027000000000000000042EF9" class="calibre10 pcalibre pcalibre1">0x02e</code></td></tr>
</tbody>

</table>
<p id="P7000497027000000000000000042EFA" data-uri="chapter04.xhtml#P7000497027000000000000000042EFA" class="pcalibre1 pcalibre calibre2">The instruction sets <code id="P7000497027000000000000000042EFB" data-uri="chapter04.xhtml#P7000497027000000000000000042EFB" class="pcalibre1 calibre8 pcalibre">%rax</code> to 9, sets <code id="P7000497027000000000000000042EFC" data-uri="chapter04.xhtml#P7000497027000000000000000042EFC" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 128, and increments the PC by 2.</p>
</section>
<section id="P7000497027000000000000000004780" data-uri="chapter04.xhtml#P7000497027000000000000000004780" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042EFD" data-uri="chapter04.xhtml#P7000497027000000000000000042EFD" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E9A"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.15 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E62">391</a>)</h1></header>
<p id="P7000497027000000000000000042EFE" data-uri="chapter04.xhtml#P7000497027000000000000000042EFE" class="pcalibre1 pcalibre calibre2">Tracing the steps listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a> with rA equal to <code id="P7000497027000000000000000042EFF" data-uri="chapter04.xhtml#P7000497027000000000000000042EFF" class="pcalibre1 calibre8 pcalibre">%rsp</code>, we can see that in the memory stage the instruction will store valA, the original value of the stack pointer, to memory, just as we found for x86-64.</p>
</section>
<section id="P7000497027000000000000000004784" data-uri="chapter04.xhtml#P7000497027000000000000000004784" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F00" data-uri="chapter04.xhtml#P7000497027000000000000000042F00" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003ED1"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.16 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EA3">392</a>)</h1></header>
<p id="P7000497027000000000000000042F01" data-uri="chapter04.xhtml#P7000497027000000000000000042F01" class="pcalibre1 pcalibre calibre2">Tracing the steps listed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003E5F"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.20</span></a> with rA equal to <code id="P7000497027000000000000000042F02" data-uri="chapter04.xhtml#P7000497027000000000000000042F02" class="pcalibre1 calibre8 pcalibre">%rsp</code>, we can see that both of the write-back operations will update <code id="P7000497027000000000000000042F03" data-uri="chapter04.xhtml#P7000497027000000000000000042F03" class="pcalibre1 calibre8 pcalibre">%rsp</code>. Since the one writing valM would occur last, the net effect of the instruction will be to write the value read from memory to <code id="P7000497027000000000000000042F04" data-uri="chapter04.xhtml#P7000497027000000000000000042F04" class="pcalibre1 calibre8 pcalibre">%rsp</code>, just as we saw for x86-64.</p>
</section>
<section id="P700049702700000000000000000478A" data-uri="chapter04.xhtml#P700049702700000000000000000478A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F05" data-uri="chapter04.xhtml#P7000497027000000000000000042F05" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003F08"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.17 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003EE1">393</a>)</h1></header>
<p id="P7000497027000000000000000042F06" data-uri="chapter04.xhtml#P7000497027000000000000000042F06" class="pcalibre1 pcalibre calibre2">Implementing conditional moves requires only minor changes from register-to-register moves. We simply condition the write-back step on the outcome of the conditional test:</p>
<table id="P7000497027000000000000000042F07" data-uri="chapter04.xhtml#P7000497027000000000000000042F07" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042F08" data-uri="chapter04.xhtml#P7000497027000000000000000042F08" class="calibre18 pcalibre pcalibre1">Stage	</th><th id="P7000497027000000000000000042F09" data-uri="chapter04.xhtml#P7000497027000000000000000042F09" class="calibre18 pcalibre pcalibre1"><code id="P7000497027000000000000000042F0A" data-uri="chapter04.xhtml#P7000497027000000000000000042F0A" class="calibre10 pcalibre pcalibre1">cmovXX</code> rA, rB</th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F0B" data-uri="chapter04.xhtml#P7000497027000000000000000042F0B" class="calibre20 pcalibre pcalibre1">Fetch	</td><td id="P7000497027000000000000000042F0C" data-uri="chapter04.xhtml#P7000497027000000000000000042F0C" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042F0D" data-uri="chapter04.xhtml#P7000497027000000000000000042F0D" class="calibre20 pcalibre pcalibre1">rA:rB ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC + 1]</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042F0E" data-uri="chapter04.xhtml#P7000497027000000000000000042F0E" class="calibre20 pcalibre pcalibre1">valP ← PC + 2</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F0F" data-uri="chapter04.xhtml#P7000497027000000000000000042F0F" class="calibre20 pcalibre pcalibre1">Decode	</td><td id="P7000497027000000000000000042F10" data-uri="chapter04.xhtml#P7000497027000000000000000042F10" class="calibre20 pcalibre pcalibre1">valA ← R[rA]</td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042F11" data-uri="chapter04.xhtml#P7000497027000000000000000042F11" class="calibre20 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004798" title="487" data-uri="chapter04.xhtml#P7000497027000000000000000004798" epub:type="pagebreak"></span>Execute	</td><td id="P7000497027000000000000000042F12" data-uri="chapter04.xhtml#P7000497027000000000000000042F12" class="calibre20 pcalibre pcalibre1">valE ← 0 + valA</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042F13" data-uri="chapter04.xhtml#P7000497027000000000000000042F13" class="calibre20 pcalibre pcalibre1">Cnd ← Cond(CC, ifun)</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F14" data-uri="chapter04.xhtml#P7000497027000000000000000042F14" class="calibre20 pcalibre pcalibre1">Memory	</td><td class="calibre20 pcalibre pcalibre1"/></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F15" data-uri="chapter04.xhtml#P7000497027000000000000000042F15" class="calibre20 pcalibre pcalibre1">Write back	</td><td id="P7000497027000000000000000042F16" data-uri="chapter04.xhtml#P7000497027000000000000000042F16" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000042F17" data-uri="chapter04.xhtml#P7000497027000000000000000042F17" class="calibre10 pcalibre pcalibre1">if</code> (Cnd) R[rB] ← valE</td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F18" data-uri="chapter04.xhtml#P7000497027000000000000000042F18" class="calibre20 pcalibre pcalibre1">PC update	</td><td id="P7000497027000000000000000042F19" data-uri="chapter04.xhtml#P7000497027000000000000000042F19" class="calibre20 pcalibre pcalibre1">PC ← valP</td></tr>
</tbody>
</table>
</section>



<section id="P70004970270000000000000000047A1" data-uri="chapter04.xhtml#P70004970270000000000000000047A1" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F1A" data-uri="chapter04.xhtml#P7000497027000000000000000042F1A" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003F4A"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.18 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003F23">394</a>)</h1></header>
<p id="P7000497027000000000000000042F1B" data-uri="chapter04.xhtml#P7000497027000000000000000042F1B" class="pcalibre1 pcalibre calibre2">We can see that this instruction is located at address <code id="P7000497027000000000000000042F1C" data-uri="chapter04.xhtml#P7000497027000000000000000042F1C" class="pcalibre1 calibre8 pcalibre">0x037</code> and is 9 bytes long. The first byte has value <code id="P7000497027000000000000000042F1D" data-uri="chapter04.xhtml#P7000497027000000000000000042F1D" class="pcalibre1 calibre8 pcalibre">0x80</code>, while the last 8 bytes are a byte-reversed version of <code id="P7000497027000000000000000042F1E" data-uri="chapter04.xhtml#P7000497027000000000000000042F1E" class="pcalibre1 calibre8 pcalibre">0x0000000000000041</code>, the call target. The stack pointer was set to 128 by the <code id="P7000497027000000000000000042F1F" data-uri="chapter04.xhtml#P7000497027000000000000000042F1F" class="pcalibre1 calibre8 pcalibre">popq</code> instruction (line 7).</p>

<table id="P7000497027000000000000000042F20" data-uri="chapter04.xhtml#P7000497027000000000000000042F20" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P7000497027000000000000000042F21" data-uri="chapter04.xhtml#P7000497027000000000000000042F21" class="calibre18 pcalibre pcalibre1">Stage</th><th id="P7000497027000000000000000042F22" data-uri="chapter04.xhtml#P7000497027000000000000000042F22" class="calibre18 pcalibre pcalibre1">Generic <code id="P7000497027000000000000000042F23" data-uri="chapter04.xhtml#P7000497027000000000000000042F23" class="calibre10 pcalibre pcalibre1">call</code> Dest</th><th id="P7000497027000000000000000042F24" data-uri="chapter04.xhtml#P7000497027000000000000000042F24" class="calibre18 pcalibre pcalibre1">Specific <code id="P7000497027000000000000000042F25" data-uri="chapter04.xhtml#P7000497027000000000000000042F25" class="calibre10 pcalibre pcalibre1">call 0x041</code></th></tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042F26" data-uri="chapter04.xhtml#P7000497027000000000000000042F26" class="calibre20 pcalibre pcalibre1">Fetch</td><td id="P7000497027000000000000000042F27" data-uri="chapter04.xhtml#P7000497027000000000000000042F27" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub>[PC]</td><td id="P7000497027000000000000000042F28" data-uri="chapter04.xhtml#P7000497027000000000000000042F28" class="calibre20 pcalibre pcalibre1">icode:ifun ← M<sub class="calibre59 pcalibre pcalibre1">1</sub><code id="P7000497027000000000000000042F29" data-uri="chapter04.xhtml#P7000497027000000000000000042F29" class="calibre10 pcalibre pcalibre1">[0x037] = 8:0</code>
</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td class="calibre20 pcalibre pcalibre1"/>
<td id="P7000497027000000000000000042F2A" data-uri="chapter04.xhtml#P7000497027000000000000000042F2A" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub>[PC + 1]<br class="edition pcalibre pcalibre1"/>valP ← PC + 9</td>
<td id="P7000497027000000000000000042F2B" data-uri="chapter04.xhtml#P7000497027000000000000000042F2B" class="calibre20 pcalibre pcalibre1">valC ← M<sub class="calibre59 pcalibre pcalibre1">8</sub><code id="P7000497027000000000000000042F2C" data-uri="chapter04.xhtml#P7000497027000000000000000042F2C" class="calibre10 pcalibre pcalibre1">[0x038] = 0x041</code><br class="edition pcalibre pcalibre1"/>
valP ← <code id="P7000497027000000000000000042F2D" data-uri="chapter04.xhtml#P7000497027000000000000000042F2D" class="calibre10 pcalibre pcalibre1">0x037 + 9 = 0x040</code></td></tr>

<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F2E" data-uri="chapter04.xhtml#P7000497027000000000000000042F2E" class="calibre20 pcalibre pcalibre1">Decode</td>		<td colspan="2" class="calibre20 pcalibre pcalibre1"/></tr>
	<tr class="pcalibre calibre17 pcalibre1"><td class="calibre20 pcalibre pcalibre1"/><td id="P7000497027000000000000000042F2F" data-uri="chapter04.xhtml#P7000497027000000000000000042F2F" class="calibre20 pcalibre pcalibre1">valB ← R[<code id="P7000497027000000000000000042F30" data-uri="chapter04.xhtml#P7000497027000000000000000042F30" class="calibre10 pcalibre pcalibre1">%rsp</code>]	</td><td id="P7000497027000000000000000042F31" data-uri="chapter04.xhtml#P7000497027000000000000000042F31" class="calibre20 pcalibre pcalibre1">valB ← R[<code id="P7000497027000000000000000042F32" data-uri="chapter04.xhtml#P7000497027000000000000000042F32" class="calibre10 pcalibre pcalibre1">%rsp</code>] = <code id="P7000497027000000000000000042F33" data-uri="chapter04.xhtml#P7000497027000000000000000042F33" class="calibre10 pcalibre pcalibre1">128</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F34" data-uri="chapter04.xhtml#P7000497027000000000000000042F34" class="calibre20 pcalibre pcalibre1">Execute	</td><td id="P7000497027000000000000000042F35" data-uri="chapter04.xhtml#P7000497027000000000000000042F35" class="calibre20 pcalibre pcalibre1">valE ← valB + -8	</td><td id="P7000497027000000000000000042F36" data-uri="chapter04.xhtml#P7000497027000000000000000042F36" class="calibre20 pcalibre pcalibre1">valE ← <code id="P7000497027000000000000000042F37" data-uri="chapter04.xhtml#P7000497027000000000000000042F37" class="calibre10 pcalibre pcalibre1">128+ -8 = 120</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P7000497027000000000000000042F38" data-uri="chapter04.xhtml#P7000497027000000000000000042F38" class="calibre20 pcalibre pcalibre1">Memory	</td><td id="P7000497027000000000000000042F39" data-uri="chapter04.xhtml#P7000497027000000000000000042F39" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[valE] ← valP	</td><td id="P7000497027000000000000000042F3A" data-uri="chapter04.xhtml#P7000497027000000000000000042F3A" class="calibre20 pcalibre pcalibre1">M<sub class="calibre59 pcalibre pcalibre1">8</sub>[<code id="P7000497027000000000000000042F3B" data-uri="chapter04.xhtml#P7000497027000000000000000042F3B" class="calibre10 pcalibre pcalibre1">120</code>] ← <code id="P7000497027000000000000000042F3C" data-uri="chapter04.xhtml#P7000497027000000000000000042F3C" class="calibre10 pcalibre pcalibre1">0x040</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F3D" data-uri="chapter04.xhtml#P7000497027000000000000000042F3D" class="calibre20 pcalibre pcalibre1">Write back</td><td id="P7000497027000000000000000042F3E" data-uri="chapter04.xhtml#P7000497027000000000000000042F3E" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042F3F" data-uri="chapter04.xhtml#P7000497027000000000000000042F3F" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← valE</td><td id="P7000497027000000000000000042F40" data-uri="chapter04.xhtml#P7000497027000000000000000042F40" class="calibre20 pcalibre pcalibre1">R[<code id="P7000497027000000000000000042F41" data-uri="chapter04.xhtml#P7000497027000000000000000042F41" class="calibre10 pcalibre pcalibre1">%rsp</code>] ← <code id="P7000497027000000000000000042F42" data-uri="chapter04.xhtml#P7000497027000000000000000042F42" class="calibre10 pcalibre pcalibre1">120</code></td></tr>
<tr class="pcalibre calibre17 pcalibre1"><td id="P7000497027000000000000000042F43" data-uri="chapter04.xhtml#P7000497027000000000000000042F43" class="calibre20 pcalibre pcalibre1">PC update</td><td id="P7000497027000000000000000042F44" data-uri="chapter04.xhtml#P7000497027000000000000000042F44" class="calibre20 pcalibre pcalibre1">PC ← valC</td><td id="P7000497027000000000000000042F45" data-uri="chapter04.xhtml#P7000497027000000000000000042F45" class="calibre20 pcalibre pcalibre1">PC ← <code id="P7000497027000000000000000042F46" data-uri="chapter04.xhtml#P7000497027000000000000000042F46" class="calibre10 pcalibre pcalibre1">0x041</code></td></tr>
</tbody>
</table>
<p id="P7000497027000000000000000042F47" data-uri="chapter04.xhtml#P7000497027000000000000000042F47" class="pcalibre1 pcalibre calibre2">The effect of this instruction is to set <code id="P7000497027000000000000000042F48" data-uri="chapter04.xhtml#P7000497027000000000000000042F48" class="pcalibre1 calibre8 pcalibre">%rsp</code> to 120, to store <code id="P7000497027000000000000000042F49" data-uri="chapter04.xhtml#P7000497027000000000000000042F49" class="pcalibre1 calibre8 pcalibre">0x040</code> (the return address) at this memory address, and to set the PC to <code id="P7000497027000000000000000042F4A" data-uri="chapter04.xhtml#P7000497027000000000000000042F4A" class="pcalibre1 calibre8 pcalibre">0x041</code> (the call target).</p>
</section>

<section id="P70004970270000000000000000047D3" data-uri="chapter04.xhtml#P70004970270000000000000000047D3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F4B" data-uri="chapter04.xhtml#P7000497027000000000000000042F4B" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040D6"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.19 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040D3">406</a>)</h1></header>
<p id="P7000497027000000000000000042F4C" data-uri="chapter04.xhtml#P7000497027000000000000000042F4C" class="pcalibre1 pcalibre calibre2">All of the HCL code in this and other practice problems is straightforward, but trying to generate it yourself will help you think about the different instructions and how they are processed. For this problem, we can simply look at the set of Y86-64 instructions (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003ADE"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.2</span></a>) and determine which have a constant field.</p>
<pre id="P7000497027000000000000000042F4D" data-uri="chapter04.xhtml#P7000497027000000000000000042F4D" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F4E" data-uri="chapter04.xhtml#P7000497027000000000000000042F4E" class="calibre10 pcalibre pcalibre1">bool need_valC =
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL };
</code>
</pre>
</section>



<section id="P70004970270000000000000000047D8" data-uri="chapter04.xhtml#P70004970270000000000000000047D8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F4F" data-uri="chapter04.xhtml#P7000497027000000000000000042F4F" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000047DA" title="488" data-uri="chapter04.xhtml#P70004970270000000000000000047DA" epub:type="pagebreak"></span><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040F0"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.20 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040E5">407</a>)</h1></header>
<p id="P7000497027000000000000000042F50" data-uri="chapter04.xhtml#P7000497027000000000000000042F50" class="pcalibre1 pcalibre calibre2">This code is similar to the code for srcA.</p>
<pre id="P7000497027000000000000000042F51" data-uri="chapter04.xhtml#P7000497027000000000000000042F51" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F52" data-uri="chapter04.xhtml#P7000497027000000000000000042F52" class="calibre10 pcalibre pcalibre1">word srcB = [
	icode in { IOPQ, IRMMOVQ, IMRMOVQ } : rB; 
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP; 
	1 : RNONE; # Don't need register
];
</code>
</pre>
</section>
<section id="P70004970270000000000000000047DE" data-uri="chapter04.xhtml#P70004970270000000000000000047DE" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F53" data-uri="chapter04.xhtml#P7000497027000000000000000042F53" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040F7"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.21 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040F9">408</a>)</h1></header>
<p id="P7000497027000000000000000042F54" data-uri="chapter04.xhtml#P7000497027000000000000000042F54" class="pcalibre1 pcalibre calibre2">This code is similar to the code for dstE.</p>
<pre id="P7000497027000000000000000042F55" data-uri="chapter04.xhtml#P7000497027000000000000000042F55" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F56" data-uri="chapter04.xhtml#P7000497027000000000000000042F56" class="calibre10 pcalibre pcalibre1">word dstM = [
	icode in { IMRMOVQ, IPOPQ } : rA;
	1 : RNONE; # Don't write any register
];
</code>
</pre>
</section>
<section id="P70004970270000000000000000047E3" data-uri="chapter04.xhtml#P70004970270000000000000000047E3" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F57" data-uri="chapter04.xhtml#P7000497027000000000000000042F57" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040FB"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.22 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P70004970270000000000000000040F9">408</a>)</h1></header>
<p id="P7000497027000000000000000042F58" data-uri="chapter04.xhtml#P7000497027000000000000000042F58" class="pcalibre1 pcalibre calibre2">As we found in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_000.xhtml#P7000497027000000000000000003ED1"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.16</span></a>, we want the write via the M port to take priority over the write via the E port in order to store the value read from memory into <code id="P7000497027000000000000000042F59" data-uri="chapter04.xhtml#P7000497027000000000000000042F59" class="pcalibre1 calibre8 pcalibre">%rsp</code>.</p>
</section>
<section id="P70004970270000000000000000047E7" data-uri="chapter04.xhtml#P70004970270000000000000000047E7" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F5A" data-uri="chapter04.xhtml#P7000497027000000000000000042F5A" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004111"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.23 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000410E">409</a>)</h1></header>
<p id="P7000497027000000000000000042F5B" data-uri="chapter04.xhtml#P7000497027000000000000000042F5B" class="pcalibre1 pcalibre calibre2">This code is similar to the code for aluA.</p>
<pre id="P7000497027000000000000000042F5C" data-uri="chapter04.xhtml#P7000497027000000000000000042F5C" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F5D" data-uri="chapter04.xhtml#P7000497027000000000000000042F5D" class="calibre10 pcalibre pcalibre1">word aluB = [
	icode in { IRMMOVQ, IMRMOVQ, IOPQ, ICALL, IPUSHQ, IRET, IPOPQ } : valB;
	icode in { IRRMOVQ, IIRMOVQ } : 0;
	# Other instructions don't need ALU
];
</code>
</pre>
</section>

<section id="P70004970270000000000000000047EC" data-uri="chapter04.xhtml#P70004970270000000000000000047EC" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F5E" data-uri="chapter04.xhtml#P7000497027000000000000000042F5E" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000411D"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.24 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000410E">409</a>)</h1></header>
<p id="P7000497027000000000000000042F5F" data-uri="chapter04.xhtml#P7000497027000000000000000042F5F" class="pcalibre1 pcalibre calibre2">Implementing conditional moves is surprisingly simple: we disable writing to the register file by setting the destination register to <code id="P7000497027000000000000000042F60" data-uri="chapter04.xhtml#P7000497027000000000000000042F60" class="pcalibre1 calibre8 pcalibre">RNONE</code> when the condition does not hold.</p>
<pre id="P7000497027000000000000000042F61" data-uri="chapter04.xhtml#P7000497027000000000000000042F61" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F62" data-uri="chapter04.xhtml#P7000497027000000000000000042F62" class="calibre10 pcalibre pcalibre1">word dstE = [
	icode in { IRRMOVQ } &amp;&amp; Cnd : rB;
	icode in { IIRMOVQ, IOPQ} : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE; # Don't write any register
];
</code>
</pre>
</section>
<section id="P70004970270000000000000000047F2" data-uri="chapter04.xhtml#P70004970270000000000000000047F2" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F63" data-uri="chapter04.xhtml#P7000497027000000000000000042F63" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004130"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.25 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004126">410</a>)</h1></header>
<p id="P7000497027000000000000000042F64" data-uri="chapter04.xhtml#P7000497027000000000000000042F64" class="pcalibre1 pcalibre calibre2">This code is similar to the code for mem_addr.</p>

<pre id="P7000497027000000000000000042F65" data-uri="chapter04.xhtml#P7000497027000000000000000042F65" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F66" data-uri="chapter04.xhtml#P7000497027000000000000000042F66" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P70004970270000000000000000047F7" title="489" data-uri="chapter04.xhtml#P70004970270000000000000000047F7" epub:type="pagebreak"></span>word mem_data = [
	# Value from register
	icode in { IRMMOVQ, IPUSHQ } : valA;
	# Return PC
	icode == ICALL : valP;
	# Default: Don't write anything
];
</code>
</pre>
</section>
<section id="P70004970270000000000000000047F8" data-uri="chapter04.xhtml#P70004970270000000000000000047F8" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F67" data-uri="chapter04.xhtml#P7000497027000000000000000042F67" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004136"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.26 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004126">410</a>)</h1></header>
<p id="P7000497027000000000000000042F68" data-uri="chapter04.xhtml#P7000497027000000000000000042F68" class="pcalibre1 pcalibre calibre2">This code is similar to the code for mem_read.</p>
<pre id="P7000497027000000000000000042F69" data-uri="chapter04.xhtml#P7000497027000000000000000042F69" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042F6A" data-uri="chapter04.xhtml#P7000497027000000000000000042F6A" class="calibre10 pcalibre pcalibre1">bool mem_write = icode in { IRMMOVQ, IPUSHQ, ICALL };</code></pre>
</section>
<section id="P70004970270000000000000000047FD" data-uri="chapter04.xhtml#P70004970270000000000000000047FD" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F6B" data-uri="chapter04.xhtml#P7000497027000000000000000042F6B" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003D54_split_001.xhtml#P7000497027000000000000000004141"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.27 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000003D54_split_001.xhtml#P700049702700000000000000000413A">411</a>)</h1></header>
<p id="P7000497027000000000000000042F6C" data-uri="chapter04.xhtml#P7000497027000000000000000042F6C" class="pcalibre1 pcalibre calibre2">Computing the Stat field requires collecting status information from several stages:</p>
<pre id="P7000497027000000000000000042F6D" data-uri="chapter04.xhtml#P7000497027000000000000000042F6D" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F6E" data-uri="chapter04.xhtml#P7000497027000000000000000042F6E" class="calibre10 pcalibre pcalibre1">## Determine instruction status
word Stat = [
	imem_error | | dmem_error : SADR;
	!instr_valid: SINS;
	icode == IHALT : SHLT;
	1 : SAOK;
];
</code>
</pre>
</section>

<section id="P7000497027000000000000000004802" data-uri="chapter04.xhtml#P7000497027000000000000000004802" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F6F" data-uri="chapter04.xhtml#P7000497027000000000000000042F6F" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041A2"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.28 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004152.xhtml#P700049702700000000000000000419B">417</a>)</h1></header>
<p id="P7000497027000000000000000042F70" data-uri="chapter04.xhtml#P7000497027000000000000000042F70" class="pcalibre1 pcalibre calibre2">This problem is an interesting exercise in trying to find the optimal balance among a set of partitions. It provides a number of opportunities to compute throughputs and latencies in pipelines.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042F71" data-uri="chapter04.xhtml#P7000497027000000000000000042F71">
<li id="P7000497027000000000000000042F72" data-uri="chapter04.xhtml#P7000497027000000000000000042F72" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F73" data-uri="chapter04.xhtml#P7000497027000000000000000042F73" class="pcalibre calibre3 pcalibre1">For a two-stage pipeline, the best partition would be to have blocks A, B, and C in the first stage and D, E, and F in the second. The first stage has a delay of 170 ps, giving a total cycle time of 170 + 20 = 190 ps. We therefore have a throughput of 5.26 GIPS and a latency of 380 ps.</p></li>
<li id="P7000497027000000000000000042F74" data-uri="chapter04.xhtml#P7000497027000000000000000042F74" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F75" data-uri="chapter04.xhtml#P7000497027000000000000000042F75" class="pcalibre calibre3 pcalibre1">For a three-stage pipeline, we should have blocks A and B in the first stage, blocks C and D in the second, and blocks E and F in the third. The first two stages have a delay of 110 ps, giving a total cycle time of 130 ps and a throughput of 7.69 GIPS. The latency is 390 ps.</p></li>
<li id="P7000497027000000000000000042F76" data-uri="chapter04.xhtml#P7000497027000000000000000042F76" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F77" data-uri="chapter04.xhtml#P7000497027000000000000000042F77" class="pcalibre calibre3 pcalibre1">For a four-stage pipeline, we should have block A in the first stage, blocks B and C in the second, block D in the third, and blocks E and F in the fourth. The second stage requires 90 ps, giving a total cycle time of 110 ps and a throughput of 9.09 GIPS. The latency is 440 ps.</p></li>
<li id="P7000497027000000000000000042F78" data-uri="chapter04.xhtml#P7000497027000000000000000042F78" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F79" data-uri="chapter04.xhtml#P7000497027000000000000000042F79" class="pcalibre calibre3 pcalibre1">The optimal design would be a five-stage pipeline, with each block in its own stage, except that the fifth stage has blocks E and F The cycle time is 80 + 20 = 100 ps, for a throughput of around 10.00 GIPS and a latency of <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000480E" title="490" data-uri="chapter04.xhtml#P700049702700000000000000000480E" epub:type="pagebreak"></span>500 ps. Adding more stages would not help, since we cannot run the pipeline any faster than one cycle every 100 ps.</p></li>
</ol>
</section>

<section id="P700049702700000000000000000480F" data-uri="chapter04.xhtml#P700049702700000000000000000480F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F7A" data-uri="chapter04.xhtml#P7000497027000000000000000042F7A" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041B9"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.29 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP7000497027000000000000000004152.xhtml#P70004970270000000000000000041B0">418</a>)</h1></header>
<p id="P7000497027000000000000000042F7B" data-uri="chapter04.xhtml#P7000497027000000000000000042F7B" class="pcalibre1 pcalibre calibre2">Each stage would have combinational logic requiring 300/<var class="calibre5 pcalibre pcalibre1">k</var> ps and a pipeline register requiring 20 ps.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042F7C" data-uri="chapter04.xhtml#P7000497027000000000000000042F7C">
<li id="P7000497027000000000000000042F7D" data-uri="chapter04.xhtml#P7000497027000000000000000042F7D" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F7E" data-uri="chapter04.xhtml#P7000497027000000000000000042F7E" class="pcalibre calibre3 pcalibre1">The total latency would be 300 + 20<var class="calibre5 pcalibre pcalibre1">k</var> ps, while the throughput (in GIPS) would be</p>
<div class="informalequation pcalibre pcalibre1" id="P7000497027000000000000000042F7F" data-uri="chapter04.xhtml#P7000497027000000000000000042F7F">
<m:math display="block" alttext="" data-uri="" altimg-width="140" altimg-height="39" altimg="../images/ch04-eq4.png"><m:mrow><m:mfrac><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>000</m:mn></m:mrow><m:mrow><m:mfrac><m:mrow><m:mn>300</m:mn></m:mrow><m:mi>k</m:mi></m:mfrac><m:mo>+</m:mo><m:mn>20</m:mn></m:mrow></m:mfrac><m:mo>=</m:mo><m:mfrac><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>000</m:mn><m:mi>k</m:mi></m:mrow><m:mrow><m:mn>300</m:mn><m:mo>+</m:mo><m:mn>20</m:mn><m:mi>k</m:mi></m:mrow></m:mfrac></m:mrow></m:math>
</div>
</li>
<li id="P7000497027000000000000000042F80" data-uri="chapter04.xhtml#P7000497027000000000000000042F80" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042F81" data-uri="chapter04.xhtml#P7000497027000000000000000042F81" class="pcalibre calibre3 pcalibre1">As we let <var class="calibre5 pcalibre pcalibre1">k</var> go to infinity, the throughput becomes 1,000/20 = 50 GIPS. Of course, the latency would approach infinity as well.</p>
</li>
</ol>
<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042F82" data-uri="chapter04.xhtml#P7000497027000000000000000042F82">This exercise quantifies the diminishing returns of deep pipelining. As we try to subdivide the logic into many stages, the latency of the pipeline registers becomes a limiting factor.</p>
</section>
<section id="P7000497027000000000000000004819" data-uri="chapter04.xhtml#P7000497027000000000000000004819" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F83" data-uri="chapter04.xhtml#P7000497027000000000000000042F83" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043C6"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.30 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043C1">449</a>)</h1></header>
<p id="P7000497027000000000000000042F84" data-uri="chapter04.xhtml#P7000497027000000000000000042F84" class="pcalibre1 pcalibre calibre2">This code is very similar to the corresponding code for SEQ, except that we cannot yet determine whether the data memory will generate an error signal for this instruction.</p>
<pre id="P7000497027000000000000000042F85" data-uri="chapter04.xhtml#P7000497027000000000000000042F85" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F86" data-uri="chapter04.xhtml#P7000497027000000000000000042F86" class="calibre10 pcalibre pcalibre1"># Determine status code for fetched instruction
word f_stat = [
	imem_error: SADR;
	!instr_valid : SINS;
	f_icode == IHALT : SHLT;
	1 : SAOK;
];
</code>
</pre>
</section>
<section id="P700049702700000000000000000481E" data-uri="chapter04.xhtml#P700049702700000000000000000481E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F87" data-uri="chapter04.xhtml#P7000497027000000000000000042F87" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000043CC"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.31 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_001.xhtml#P70004970270000000000000000043C1">449</a>)</h1></header>
<p id="P7000497027000000000000000042F88" data-uri="chapter04.xhtml#P7000497027000000000000000042F88" class="pcalibre1 pcalibre calibre2">This code simply involves prefixing the signal names in the code for SEQ with <code id="P7000497027000000000000000042F89" data-uri="chapter04.xhtml#P7000497027000000000000000042F89" class="pcalibre1 calibre8 pcalibre">d_</code> and <code id="P7000497027000000000000000042F8A" data-uri="chapter04.xhtml#P7000497027000000000000000042F8A" class="pcalibre1 calibre8 pcalibre">D_</code>.</p>
<pre id="P7000497027000000000000000042F8B" data-uri="chapter04.xhtml#P7000497027000000000000000042F8B" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F8C" data-uri="chapter04.xhtml#P7000497027000000000000000042F8C" class="calibre10 pcalibre pcalibre1">word d_dstE = [
		D_icode in { IRRMOVQ, IIRMOVQ, IOPQ} : D_rB;
		D_icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
		1 : RNONE; # Don't write any register
];
</code>
</pre>
</section>
<section id="P7000497027000000000000000004825" data-uri="chapter04.xhtml#P7000497027000000000000000004825" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F8D" data-uri="chapter04.xhtml#P7000497027000000000000000042F8D" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004405"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.32 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000043FE">452</a>)</h1></header>
<p id="P7000497027000000000000000042F8E" data-uri="chapter04.xhtml#P7000497027000000000000000042F8E" class="pcalibre1 pcalibre calibre2">The <code id="P7000497027000000000000000042F8F" data-uri="chapter04.xhtml#P7000497027000000000000000042F8F" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction (line 5) would stall for one cycle due to a load/use hazard caused by the <code id="P7000497027000000000000000042F90" data-uri="chapter04.xhtml#P7000497027000000000000000042F90" class="pcalibre1 calibre8 pcalibre">popq</code> instruction (line 4). As it enters the decode stage, the <code id="P7000497027000000000000000042F91" data-uri="chapter04.xhtml#P7000497027000000000000000042F91" class="pcalibre1 calibre8 pcalibre">popq</code> instruction would be in the memory stage, giving both M_dstE and M_dstM equal to <code id="P7000497027000000000000000042F92" data-uri="chapter04.xhtml#P7000497027000000000000000042F92" class="pcalibre1 calibre8 pcalibre">%rsp</code>. If the two cases were reversed, then the write back from M_valE would take priority, causing the incremented stack pointer to be passed as the argument <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000482C" title="491" data-uri="chapter04.xhtml#P700049702700000000000000000482C" epub:type="pagebreak"></span>to the <code id="P7000497027000000000000000042F93" data-uri="chapter04.xhtml#P7000497027000000000000000042F93" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction. This would not be consistent with the convention for handling <code id="P7000497027000000000000000042F94" data-uri="chapter04.xhtml#P7000497027000000000000000042F94" class="pcalibre1 calibre8 pcalibre">popq %rsp</code> determined in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003AB0.xhtml#P7000497027000000000000000003C64"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.8</span></a>.</p>
</section>
<section id="P700049702700000000000000000482F" data-uri="chapter04.xhtml#P700049702700000000000000000482F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F95" data-uri="chapter04.xhtml#P7000497027000000000000000042F95" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000440D"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.33 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000043FE">452</a>)</h1></header>
<p id="P7000497027000000000000000042F96" data-uri="chapter04.xhtml#P7000497027000000000000000042F96" class="pcalibre1 pcalibre calibre2">This problem lets you experience one of the important tasks in processor design—devising test programs for a new processor. In general, we should have test programs that will exercise all of the different hazard possibilities and will generate incorrect results if some dependency is not handled properly.</p>
<p id="P7000497027000000000000000042F97" data-uri="chapter04.xhtml#P7000497027000000000000000042F97" class="pcalibre1 pcalibre calibre2">For this example, we can use a slightly modified version of the program shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004405"><span class="pcalibre label pcalibre1">Practice Problem </span><span class="pcalibre label pcalibre1">4.32</span></a>:</p>
<pre id="P7000497027000000000000000042F98" data-uri="chapter04.xhtml#P7000497027000000000000000042F98" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042F99" data-uri="chapter04.xhtml#P7000497027000000000000000042F99" class="calibre10 pcalibre pcalibre1">1	irmovq $5, %rdx
2	irmovq $0x100,%rsp
3	rmmovq %rdx,0(%rsp) popq%rsp
5	nop
6	nop
7	rrmovq %rsp,%rax
</code>
</pre>
<p id="P7000497027000000000000000042F9A" data-uri="chapter04.xhtml#P7000497027000000000000000042F9A" class="pcalibre1 pcalibre calibre2">The two <code id="P7000497027000000000000000042F9B" data-uri="chapter04.xhtml#P7000497027000000000000000042F9B" class="pcalibre1 calibre8 pcalibre">nop</code> instructions will cause the <code id="P7000497027000000000000000042F9C" data-uri="chapter04.xhtml#P7000497027000000000000000042F9C" class="pcalibre1 calibre8 pcalibre">popq</code> instruction to be in the write-back stage when the <code id="P7000497027000000000000000042F9D" data-uri="chapter04.xhtml#P7000497027000000000000000042F9D" class="pcalibre1 calibre8 pcalibre">rrmovq</code> instruction is in the decode stage. If the two forwarding sources in the write-back stage are given the wrong priority, then register <code id="P7000497027000000000000000042F9E" data-uri="chapter04.xhtml#P7000497027000000000000000042F9E" class="pcalibre1 calibre8 pcalibre">%rax</code> will be set to the incremented program counter rather than the value read from memory.</p>
</section>
<section id="P700049702700000000000000000483A" data-uri="chapter04.xhtml#P700049702700000000000000000483A" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042F9F" data-uri="chapter04.xhtml#P7000497027000000000000000042F9F" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004410"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.34 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004412">453</a>)</h1></header>
<p id="P7000497027000000000000000042FA0" data-uri="chapter04.xhtml#P7000497027000000000000000042FA0" class="pcalibre1 pcalibre calibre2">This logic only needs to check the five forwarding sources:</p>
<pre id="P7000497027000000000000000042FA1" data-uri="chapter04.xhtml#P7000497027000000000000000042FA1" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FA2" data-uri="chapter04.xhtml#P7000497027000000000000000042FA2" class="calibre10 pcalibre pcalibre1">word d_valB = [
	d_srcB == e_dstE : e_valE;	# Forward valE from execute
	d_srcB == M_dstM : m_valM;	# Forward valM from memory
	d_srcB == M_dstE : M_valE;	# Forward valE from memory
	d_srcB == W_dstM : W_valM;	# Forward valM from write back
	d_srcB == W_dstE : W_valE;	# Forward valE from write back
	1 : d_rvalB; # Use value read from register file
];
</code>
</pre>
</section>
<section id="P700049702700000000000000000483F" data-uri="chapter04.xhtml#P700049702700000000000000000483F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FA3" data-uri="chapter04.xhtml#P7000497027000000000000000042FA3" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000442A"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.35 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004423">454</a>)</h1></header>
<p id="P7000497027000000000000000042FA4" data-uri="chapter04.xhtml#P7000497027000000000000000042FA4" class="pcalibre1 pcalibre calibre2">This change would not handle the case where a conditional move fails to satisfy the condition, and therefore sets the dstE value to <code id="P7000497027000000000000000042FA5" data-uri="chapter04.xhtml#P7000497027000000000000000042FA5" class="pcalibre1 calibre8 pcalibre">RNONE</code>. The resulting value could get forwarded to the next instruction, even though the conditional transfer does not occur.</p>
<pre id="P7000497027000000000000000042FA6" data-uri="chapter04.xhtml#P7000497027000000000000000042FA6" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FA7" data-uri="chapter04.xhtml#P7000497027000000000000000042FA7" class="calibre10 pcalibre pcalibre1">1	irmovq $0x123,%rax	
2	irmovq $0x321,%rdx	
3	xorq %rcx/Zrcx		# CC = 100
4	cmovne %rax,%rdx	# Not transferred
5	addq %rdx,%rdx		# Should be 0x642
6	halt	
</code>
</pre>
<p id="P7000497027000000000000000042FA8" data-uri="chapter04.xhtml#P7000497027000000000000000042FA8" class="pcalibre1 pcalibre calibre2"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004846" title="492" data-uri="chapter04.xhtml#P7000497027000000000000000004846" epub:type="pagebreak"></span>This code initializes register <code id="P7000497027000000000000000042FA9" data-uri="chapter04.xhtml#P7000497027000000000000000042FA9" class="pcalibre1 calibre8 pcalibre">%rdx</code> to <code id="P7000497027000000000000000042FAA" data-uri="chapter04.xhtml#P7000497027000000000000000042FAA" class="pcalibre1 calibre8 pcalibre">0x321</code>. The conditional data transfer does not take place, and so the final <code id="P7000497027000000000000000042FAB" data-uri="chapter04.xhtml#P7000497027000000000000000042FAB" class="pcalibre1 calibre8 pcalibre">addq</code> instruction should double the value in <code id="P7000497027000000000000000042FAC" data-uri="chapter04.xhtml#P7000497027000000000000000042FAC" class="pcalibre1 calibre8 pcalibre">%rdx</code> to <code id="P7000497027000000000000000042FAD" data-uri="chapter04.xhtml#P7000497027000000000000000042FAD" class="pcalibre1 calibre8 pcalibre">0x642</code>. With the altered design, however, the conditional move source value <code id="P7000497027000000000000000042FAE" data-uri="chapter04.xhtml#P7000497027000000000000000042FAE" class="pcalibre1 calibre8 pcalibre">0x321</code> gets forwarded into ALU input valA, while input valB correctly gets operand value <code id="P7000497027000000000000000042FAF" data-uri="chapter04.xhtml#P7000497027000000000000000042FAF" class="pcalibre1 calibre8 pcalibre">0x123</code>. These inputs get added to produce result <code id="P7000497027000000000000000042FB0" data-uri="chapter04.xhtml#P7000497027000000000000000042FB0" class="pcalibre1 calibre8 pcalibre">0x444</code>.</p>
</section>
<section id="P700049702700000000000000000484F" data-uri="chapter04.xhtml#P700049702700000000000000000484F" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FB1" data-uri="chapter04.xhtml#P7000497027000000000000000042FB1" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004431"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.36 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004433">455</a>)</h1></header>
<p id="P7000497027000000000000000042FB2" data-uri="chapter04.xhtml#P7000497027000000000000000042FB2" class="pcalibre1 pcalibre calibre2">This code completes the computation of the status code for this instruction.</p>
<pre id="P7000497027000000000000000042FB3" data-uri="chapter04.xhtml#P7000497027000000000000000042FB3" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FB4" data-uri="chapter04.xhtml#P7000497027000000000000000042FB4" class="calibre10 pcalibre pcalibre1">## Update the status
word m_stat = [
	dmem_error : SADR;
	1 : M_stat;
];
</code>
</pre>
</section>
<section id="P7000497027000000000000000004854" data-uri="chapter04.xhtml#P7000497027000000000000000004854" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FB5" data-uri="chapter04.xhtml#P7000497027000000000000000042FB5" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044CF"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.37 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044BE">461</a>)</h1></header>
<p id="P7000497027000000000000000042FB6" data-uri="chapter04.xhtml#P7000497027000000000000000042FB6" class="pcalibre1 pcalibre calibre2">The following test program is designed to set up control combination A (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044BD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.67</span></a>) and detect whether something goes wrong:</p>
<pre id="P7000497027000000000000000042FB7" data-uri="chapter04.xhtml#P7000497027000000000000000042FB7" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FB8" data-uri="chapter04.xhtml#P7000497027000000000000000042FB8" class="calibre10 pcalibre pcalibre1">1	# Code to generate a combination of not-taken branch and ret
2		irmovq Stack, %rsp
3		irmovq rtnp,%rax
4		pushq %rax		# Set up return pointer
5		xorq %rax,%rax		# Set Z condition code
6		jne target		# Not taken (First part of combination)
7		irmovq $1,%rax		# Should execute this
8		halt
9	target: ret			# Second part of combination
10		irmovq $2,%rbx		# Should not execute this
11		halt
12	rtnp: irmovq $3,%rdx		# Should not execute this
13		halt
14	.pos 0x40
15	Stack:
</code>
</pre>
<p id="P7000497027000000000000000042FB9" data-uri="chapter04.xhtml#P7000497027000000000000000042FB9" class="pcalibre1 pcalibre calibre2">This program is designed so that if something goes wrong (for example, if the <code id="P7000497027000000000000000042FBA" data-uri="chapter04.xhtml#P7000497027000000000000000042FBA" class="pcalibre1 calibre8 pcalibre">ret</code> instruction is actually executed), then the program will execute one of the extra <code id="P7000497027000000000000000042FBB" data-uri="chapter04.xhtml#P7000497027000000000000000042FBB" class="pcalibre1 calibre8 pcalibre">irmovq</code> instructions and then halt. Thus, an error in the pipeline would cause some register to be updated incorrectly. This code illustrates the care required to implement a test program. It must set up a potential error condition and then detect whether or not an error occurs.</p>
</section>
<section id="P700049702700000000000000000485C" data-uri="chapter04.xhtml#P700049702700000000000000000485C" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FBC" data-uri="chapter04.xhtml#P7000497027000000000000000042FBC" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044F6"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.38 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044F1">462</a>)</h1></header>
<p id="P7000497027000000000000000042FBD" data-uri="chapter04.xhtml#P7000497027000000000000000042FBD" class="pcalibre1 pcalibre calibre2">The following test program is designed to set up control combination B (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P70004970270000000000000000044BD"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.67</span></a>). The simulator will detect a case where the bubble and stall control signals for a pipeline register are both set to zero, and so our test program need only set up the combination for it to be detected. The biggest challenge is to make the program do something sensible when handled correctly.</p>

<pre id="P7000497027000000000000000042FBE" data-uri="chapter04.xhtml#P7000497027000000000000000042FBE" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FBF" data-uri="chapter04.xhtml#P7000497027000000000000000042FBF" class="calibre10 pcalibre pcalibre1"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004861" title="493" data-uri="chapter04.xhtml#P7000497027000000000000000004861" epub:type="pagebreak"></span>1	# Test instruction that modifies %esp followed by ret
2		irmovq mem,%rbx
3		mrmovq 0(<code id="P7000497027000000000000000042FC0" data-uri="chapter04.xhtml#P7000497027000000000000000042FC0" class="pcalibre1 calibre8 pcalibre">%rbx</code>),%rsp	# Sets %rsp to point to return point
4		ret			# Returns to return point
5		halt			#
6	rtnpt: irmovq $5,%rsi		# Return point
7		halt
8	.pos 0x40
9	mem:	.quad stack		# Holds desired stack pointer
10	.pos 0x50
11	stack:	.quad rtnpt		# Top of stack: Holds return point
</code>
</pre>
<p id="P7000497027000000000000000042FC1" data-uri="chapter04.xhtml#P7000497027000000000000000042FC1" class="pcalibre1 pcalibre calibre2">This program uses two initialized words in memory. The first word (M<code id="P7000497027000000000000000042FC2" data-uri="chapter04.xhtml#P7000497027000000000000000042FC2" class="pcalibre1 calibre8 pcalibre">mem</code>) holds the address of the second (<code id="P7000497027000000000000000042FC3" data-uri="chapter04.xhtml#P7000497027000000000000000042FC3" class="pcalibre1 calibre8 pcalibre">stack</code>--the desired stack pointer). The second word holds the address of the desired return point for the <code id="P7000497027000000000000000042FC4" data-uri="chapter04.xhtml#P7000497027000000000000000042FC4" class="pcalibre1 calibre8 pcalibre">ret</code> instruction. The program loads the stack pointer into <code id="P7000497027000000000000000042FC5" data-uri="chapter04.xhtml#P7000497027000000000000000042FC5" class="pcalibre1 calibre8 pcalibre">%rsp</code> and executes the <code id="P7000497027000000000000000042FC6" data-uri="chapter04.xhtml#P7000497027000000000000000042FC6" class="pcalibre1 calibre8 pcalibre">ret</code> instruction.</p>
</section>

<section id="P7000497027000000000000000004869" data-uri="chapter04.xhtml#P7000497027000000000000000004869" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FC7" data-uri="chapter04.xhtml#P7000497027000000000000000042FC7" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004530"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.39 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004525">463</a>)</h1></header>
<p id="P7000497027000000000000000042FC8" data-uri="chapter04.xhtml#P7000497027000000000000000042FC8" class="pcalibre1 pcalibre calibre2">From <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a>, we can see that pipeline register D must be stalled for a load/use hazard:</p>
<pre id="P7000497027000000000000000042FC9" data-uri="chapter04.xhtml#P7000497027000000000000000042FC9" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FCA" data-uri="chapter04.xhtml#P7000497027000000000000000042FCA" class="calibre10 pcalibre pcalibre1">bool D_stall =
	# Conditions for a load/use hazard
	E_icode in { IMRMOVQ, IPOPQ } &amp;&amp;
	E_dstM in { d_srcA, d_srcB };
</code>
</pre>
</section>

<section id="P700049702700000000000000000486E" data-uri="chapter04.xhtml#P700049702700000000000000000486E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FCB" data-uri="chapter04.xhtml#P7000497027000000000000000042FCB" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004539"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.40 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004535">464</a>)</h1></header>
<p id="P7000497027000000000000000042FCC" data-uri="chapter04.xhtml#P7000497027000000000000000042FCC" class="pcalibre1 pcalibre calibre2">From <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004493"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">4.66</span></a>, we can see that pipeline register E must be set to bubble for a load/use hazard or for a mispredicted branch:</p>
<pre id="P7000497027000000000000000042FCD" data-uri="chapter04.xhtml#P7000497027000000000000000042FCD" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FCE" data-uri="chapter04.xhtml#P7000497027000000000000000042FCE" class="calibre10 pcalibre pcalibre1">bool E_bubble =
	# Mispredicted branch
	(E_icode == IJXX &amp;&amp; !e_Cnd) ||
	# Conditions for a load/use hazard
	E_icode in { IMRMOVQ, IPOPQ } &amp;&amp;
	 E_dstM in { d_srcA, d_srcB};
</code>
</pre>
</section>

<section id="P7000497027000000000000000004873" data-uri="chapter04.xhtml#P7000497027000000000000000004873" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FCF" data-uri="chapter04.xhtml#P7000497027000000000000000042FCF" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000453C"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.41 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004535">464</a>)</h1></header>
<p id="P7000497027000000000000000042FD0" data-uri="chapter04.xhtml#P7000497027000000000000000042FD0" class="pcalibre1 pcalibre calibre2">This control requires examining the code of the executing instruction and checking for exceptions further down the pipeline.</p>
<pre id="P7000497027000000000000000042FD1" data-uri="chapter04.xhtml#P7000497027000000000000000042FD1" class="calibre9 pcalibre pcalibre1">
<code id="P7000497027000000000000000042FD2" data-uri="chapter04.xhtml#P7000497027000000000000000042FD2" class="calibre10 pcalibre pcalibre1">## Should the condition codes be updated?
bool set_cc = E_icode == IOPQ &amp;&amp;
	# State changes only during normal operation
	!m_stat in { SADR, SINS, SHLT } &amp;&amp; !W_stat in { SADR, SINS, SHLT };
</code>
</pre>
</section>
<section id="P7000497027000000000000000004878" data-uri="chapter04.xhtml#P7000497027000000000000000004878" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FD3" data-uri="chapter04.xhtml#P7000497027000000000000000042FD3" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004540"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.42 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004535">464</a>)</h1></header>
<p id="P7000497027000000000000000042FD4" data-uri="chapter04.xhtml#P7000497027000000000000000042FD4" class="pcalibre1 pcalibre calibre2">Injecting a bubble into the memory stage on the next cycle involves checking for an exception in either the memory or the write-back stage during the current cycle.</p>

<p class="pcalibre1 pcalibre calibre2" id="P7000497027000000000000000042FD5" data-uri="chapter04.xhtml#P7000497027000000000000000042FD5"><span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000487C" title="494" data-uri="chapter04.xhtml#P700049702700000000000000000487C" epub:type="pagebreak"></span><code id="P7000497027000000000000000042FD6" data-uri="chapter04.xhtml#P7000497027000000000000000042FD6" class="pcalibre1 calibre8 pcalibre"># Start injecting bubbles as soon as exception passes through memory stage<br class="edition pcalibre pcalibre1"/>
bool M_bubble = m_stat in { SADR, SINS, SHLT } || W_stat in { SADR, SINS, SHLT };
</code></p>

<p id="P7000497027000000000000000042FD7" data-uri="chapter04.xhtml#P7000497027000000000000000042FD7" class="pcalibre1 pcalibre calibre2">For stalling the write-back stage, we check only the status of the instruction in this stage. If we also stalled when an excepting instruction was in the memory stage, then this instruction would not be able to enter the write-back stage.</p>
<pre id="P7000497027000000000000000042FD8" data-uri="chapter04.xhtml#P7000497027000000000000000042FD8" class="calibre9 pcalibre pcalibre1"><code id="P7000497027000000000000000042FD9" data-uri="chapter04.xhtml#P7000497027000000000000000042FD9" class="calibre10 pcalibre pcalibre1">bool W_stall = W_stat in { SADR, SINS, SHLT };</code></pre>
</section>

<section id="P7000497027000000000000000004881" data-uri="chapter04.xhtml#P7000497027000000000000000004881" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FDA" data-uri="chapter04.xhtml#P7000497027000000000000000042FDA" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000459B"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.43 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004599">468</a>)</h1></header>
<p id="P7000497027000000000000000042FDB" data-uri="chapter04.xhtml#P7000497027000000000000000042FDB" class="pcalibre1 pcalibre calibre2">We would then have a misprediction frequency of 0.35, giving <i class="calibre5 pcalibre pcalibre1">mp</i> = 0.20 × 0.35 × 2 = 0.14, giving an overall CPI of 1.25. This seems like a fairly marginal gain, but it would be worthwhile if the cost of implementing the new branch prediction strategy were not too high.</p>
</section>
<section id="P7000497027000000000000000004884" data-uri="chapter04.xhtml#P7000497027000000000000000004884" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P7000497027000000000000000042FDC" data-uri="chapter04.xhtml#P7000497027000000000000000042FDC" epub:type="title"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000041EB_split_002.xhtml#P700049702700000000000000000459E"><span class="pcalibre label pcalibre1">Solution to Problem </span><span class="pcalibre label pcalibre1">4.44 </span></a>(page <a class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" epub:type="pagebreak" href="fileP70004970270000000000000000041EB_split_002.xhtml#P7000497027000000000000000004599">468</a>)</h1></header>
<p id="P7000497027000000000000000042FDD" data-uri="chapter04.xhtml#P7000497027000000000000000042FDD" class="pcalibre1 pcalibre calibre2">This simplified analysis, where we focus on the inner loop, is a useful way to estimate program performance. As long as the array is sufficiently large, the time spent in other parts of the code will be negligible.</p>
<ol class="pcalibre ol_upper-alpha pcalibre1" id="P7000497027000000000000000042FDE" data-uri="chapter04.xhtml#P7000497027000000000000000042FDE">
<li id="P7000497027000000000000000042FDF" data-uri="chapter04.xhtml#P7000497027000000000000000042FDF" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042FE0" data-uri="chapter04.xhtml#P7000497027000000000000000042FE0" class="pcalibre calibre3 pcalibre1">The inner loop of the code using the conditional jump has 11 instructions, all of which are executed when the array element is zero or negative, and 10 of which are executed when the array element is positive. The average is 10.5. The inner loop of the code using the conditional move has 10 instructions, all of which are executed every time.</p></li>
<li id="P7000497027000000000000000042FE1" data-uri="chapter04.xhtml#P7000497027000000000000000042FE1" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042FE2" data-uri="chapter04.xhtml#P7000497027000000000000000042FE2" class="pcalibre calibre3 pcalibre1">The loop-closing jump will be predicted correctly, except when the loop terminates. For a very long array, this one misprediction will have a negligible effect on the performance. The only other source of bubbles for the jump-based code is the conditional jump, depending on whether or not the array element is positive. This will cause two bubbles, but it only occurs 50% of the time, so the average is 1.0. There are no bubbles in the conditional move code.</p></li>
<li id="P7000497027000000000000000042FE3" data-uri="chapter04.xhtml#P7000497027000000000000000042FE3" class="calibre12 pcalibre pcalibre1"><p id="P7000497027000000000000000042FE4" data-uri="chapter04.xhtml#P7000497027000000000000000042FE4" class="pcalibre calibre3 pcalibre1">Our conditional jump code requires an average of 10.5 + 1.0 = 11.5 cycles per array element (11 cycles in the best case and 12 cycles in the worst), while our conditional move code requires 10.0 cycles in all cases.</p></li>
</ol>
<p id="P7000497027000000000000000042FE5" data-uri="chapter04.xhtml#P7000497027000000000000000042FE5" class="pcalibre1 pcalibre calibre2">Our pipeline has a branch misprediction penalty of only two cycles—far better than those for the deep pipelines of higher-performance processors. As a result, using conditional moves does not affect program performance very much.</p>
</section>
</section></body></html>
