<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.2   Decomposition Using Functional Dependencies</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part152.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part154.htm">下一个 &gt;</a></p><p class="s65" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7.2   <span style=" color: #00AEEF;">Decomposition Using Functional Dependencies</span></p><p style="padding-top: 12pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">A database models a set of entities and relationships in the real world. There are usually a variety of constraints (rules) on the data in the real world. For example, some of the constraints that are expected to hold in a university database are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span class="s63">1. </span>Students and instructors are uniquely identiﬁed by their <span class="s44">ID</span>.</p><p class="s63" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">2. <span class="p">Each student and instructor has only one name.</span></p><p class="s63" style="padding-top: 6pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">3. <span class="p">Each instructor and student is (primarily) associated with only one department.</span><span class="s76">2</span></p><p class="s63" style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: left;">4. <span class="p">Each department has only one value for its budget, and only one associated build- ing.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1885.png"/></span></p><p class="s77" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">2<span class="s78">An instructor, in most real universities, can be associated with more than one department, for example, via a joint appointment or in the case of adjunct faculty. Similarly, a student may have two (or more) majors or a minor. Our simpliﬁed university schema models only the primary department associated with each instructor or student.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;">An instance of a relation that satisﬁes all such real-world constraints is called a <span class="s63">legal instance </span>of the relation; a legal instance of a database is one where all the relation instances are legal instances.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">7.2.1 Notational Conventions</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">In discussing algorithms for relational database design, we shall need to talk about arbitrary relations and their schema, rather than talking only about examples. Recalling our introduction to the relational model in Chapter 2, we summarize our notation here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">In general, we use Greek letters for sets of attributes (e.g., </span><span class="s15">α</span>). We use an uppercase Roman letter to refer to a relation schema. We use the notation <i>r</i>(<i>R</i>) to show that the schema <i>R </i>is for relation <i>r</i>.</p><p style="padding-left: 139pt;text-indent: 10pt;text-align: justify;">A relation schema is a set of attributes, but not all sets of attributes are schemas. When we use a lowercase Greek letter, we are referring to a set of attributes that may or may not be a schema. A Roman letter is used when we wish to indicate that the set of attributes is deﬁnitely a schema.</p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">When a set of attributes is a superkey, we may denote it by </span>K<span class="p">. A superkey pertains to a speciﬁc relation schema, so we use the terminology “</span>K <span class="p">is a superkey for </span>R<span class="p">.”</span></p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">We use a lowercase name for relations. In our examples, these names are intended to be realistic (e.g., </span>instructor<span class="p">), while in our deﬁnitions and algorithms, we use single letters, like </span>r<span class="p">.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">The notation </span>r<span class="p">(</span>R<span class="p">) thus refers to the relation </span>r <span class="p">with schema </span>R<span class="p">. When we write </span>r<span class="p">(</span>R<span class="p">), we thus refer both to the relation and its schema.</span></p><p class="s13" style="padding-top: 4pt;padding-left: 139pt;text-indent: -16pt;text-align: justify;"><span class="s39">• </span><span class="s40">A relation, has a particular value at any given time; we refer to that as an instance and use the term “instance of </span>r<span class="p">.” When it is clear that we are talking about an instance, we may use simply the relation name (e.g., </span>r<span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: justify;">For simplicity, we assume that attribute names have only one meaning within the database schema.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">7.2.2 Keys and Functional Dependencies</p><p style="padding-top: 6pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">Some of the most commonly used types of real-world constraints can be represented formally as keys (superkeys, candidate keys, and primary keys), or as functional depen- dencies, which we deﬁne below.</p><p class="s13" style="padding-left: 119pt;text-indent: 17pt;text-align: justify;"><span class="p">In Section 2.3, we deﬁned the notion of a </span>superkey <span class="p">as a set of one or more attributes that, taken collectively, allows us to identify uniquely a tuple in the relation. We restate that deﬁnition here as follows: Given </span>r<span class="p">(</span>R<span class="p">), a subset </span>K <span class="p">of </span>R <span class="p">is a </span><span class="s63">superkey </span><span class="p">of </span>r<span class="p">(</span>R<span class="p">) if, in any legal instance of </span>r<span class="p">(</span>R<span class="p">), for all pairs </span>t<span class="s130">1 </span><span class="s94">and </span>t<span class="s130">2 </span><span class="s94">of tuples in the instance of </span>r <span class="p">if </span>t<span class="s130">1 </span><span class="s86">≠ </span>t<span class="s130">2</span><span class="s94">,</span></p><p style="padding-left: 119pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">then <i>t</i><span class="s98">1</span>[<i>K</i>] <span class="s86">≠ </span><i>t</i><span class="s98">2</span>[<i>K</i>]. That is, no two tuples in any legal instance of relation <i>r</i>(<i>R</i>) may</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;text-align: justify;">have the same value on attribute set <i>K</i>.<span class="s76">3</span> If no two tuples in <i>r </i>have the same value on</p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">K<span class="p">, thena </span>K<span class="p">-value uniquely identiﬁes a tuple in </span>r<span class="p">.</span></p><p style="padding-top: 1pt;padding-left: 88pt;text-indent: 17pt;line-height: 92%;text-align: justify;">Whereas a superkey is a set of attributes that uniquely identiﬁes an entire tuple, a functional dependency allows us to express constraints that uniquely identify the values of certain attributes. Consider a relation schema <i>r</i>(<i>R</i>), and let <span class="s15">α </span><span class="s83">⊆ </span><i>R </i>and <span class="s15">β </span><span class="s83">⊆ </span><i>R</i>.</p><p style="padding-top: 6pt;padding-left: 107pt;text-indent: -16pt;line-height: 86%;text-align: justify;"><span class="s39">• </span><span class="s40">Given an instance of </span><i>r</i>(<i>R</i>), we say that the instance <span class="s63">satisfies </span>the <span class="s63">functional de- pendency </span><span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span>if for all pairs of tuples <i>t</i><span class="s98">1</span> and <i>t</i><span class="s98">2</span> in the instance such that <i>t</i><span class="s93">1</span><span class="s94">[</span><span class="s15">α</span>] <span class="s15">= </span><i>t</i><span class="s93">2</span><span class="s94">[</span><span class="s15">α</span>], it is also the case that <i>t</i><span class="s93">1</span><span class="s94">[</span><span class="s15">β</span>] <span class="s15">= </span><i>t</i><span class="s93">2</span><span class="s94">[</span><span class="s15">β</span>].</p><p style="padding-top: 4pt;padding-left: 107pt;text-indent: -16pt;line-height: 86%;text-align: justify;"><span class="s39">• </span><span class="s40">We say that the functional dependency </span><span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span><span class="s63">holds </span>on schema <i>r</i>(<i>R</i>) if, every legal instance of <i>r</i>(<i>R</i>) satisﬁes the functional dependency.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 88pt;text-indent: 17pt;line-height: 92%;text-align: justify;"><span class="p">Using the functional-dependency notation, we say that </span>K is a superkey for r<span class="p">(</span>R<span class="p">) if the functional dependency </span>K <span class="s86">→ </span>R <span class="p">holds on </span>r<span class="p">(</span>R<span class="p">). In other words, </span>K <span class="p">is a superkey if, for every legal instance of </span>r<span class="p">(</span>R<span class="p">), for every pair of tuples </span>t<span class="s98">1</span><span class="p"> and </span>t<span class="s98">2</span><span class="p"> from the instance, whenever </span>t<span class="s93">1</span><span class="s94">[</span>K<span class="p">] </span><span class="s15">= </span>t<span class="s93">2</span><span class="s94">[</span>K<span class="p">], it is also the case that </span>t<span class="s93">1</span><span class="s94">[</span>R<span class="p">] </span><span class="s15">= </span>t<span class="s93">2</span><span class="s94">[</span>R<span class="p">] (i.e., </span>t<span class="s93">1 </span><span class="s15">= </span>t<span class="s93">2</span><span class="s94">).</span><span class="s229">4</span></p><p style="padding-left: 106pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Functional dependencies allow us to express constraints that we cannot express</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">with superkeys. In Section 7.1, we considered the schema:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1886.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1887.png"/></span></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: center;"><i>in dep </i>(<span class="s69">ID</span>, <i>name</i>, <i>salary</i>, <i>dept name</i>, <i>building</i>, <i>budget</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1888.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1889.png"/></span></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 86%;text-align: left;"><span class="p">in which the functional dependency </span>dept name <span class="s86">→ </span>budget <span class="p">holds because for each de- partment (identiﬁed by </span>dept name<span class="p">) there is a unique budget amount.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1890.png"/></span></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;">We denote the fact that the pair of attributes (<span class="s69">ID</span>, <i>dept name</i>) forms a superkey for</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1891.png"/></span></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">in dep <span class="p">by writing:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1892.png"/></span></p><p class="s13" style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: center;"><span class="s69">ID</span><span class="p">, </span>dept name <span class="s86">→ </span>name<span class="p">, </span>salary<span class="p">, </span>building<span class="p">, </span>budget</p><p style="padding-top: 9pt;padding-left: 106pt;text-indent: 0pt;text-align: left;">We shall use functional dependencies in two ways:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: -16pt;text-align: justify;"><span class="s63">1. </span>To test instances of relations to see whether they <i>satisfy </i>a given set <i>F </i>of functional dependencies.</p><p style="padding-top: 6pt;padding-left: 113pt;text-indent: -17pt;text-align: justify;"><span class="s63">2. </span>To specify constraints on the set of legal relations. We shall thus concern our- selves with <i>only </i>those relation instances that satisfy a given set of functional de- pendencies. If we wish to constrain ourselves to relations on schema <i>r</i>(<i>R</i>) that satisfy a set <i>F </i>of functional dependencies, we say that <i>F </i><span class="s63">holds </span>on <i>r</i>(<i>R</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="95" height="1" alt="image" src="Image_1893.png"/></span></p><p class="s80" style="padding-top: 3pt;padding-left: 88pt;text-indent: 0pt;text-align: left;"><span class="s77">3</span><span class="s78">In our discussion of functional dependencies, we use equality (</span><span class="s230">=</span>) in the normal mathematical sense, not the three- valued-logic sense of <span class="s161">SQL</span>. Said diﬀerently, in discussing functional dependencies, we assume no null values.</p><p class="s78" style="padding-left: 88pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span class="s77">4</span>Note that we assume here that relations are sets. <span class="s153">SQL </span>deals with multisets, and a <b>primary key </b><span class="s80">declaration in </span><span class="s161">SQL </span><span class="s80">for a</span></p><p class="s80" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">set of attributes <i>K </i>requires not only that <i>t</i><span class="s231">1</span> <span class="s230">= </span><i>t</i><span class="s231">2</span> if <i>t</i><span class="s231">1</span>[<i>K</i>] <span class="s230">= </span><i>t</i><span class="s231">2</span>[<i>K</i>], but also that there be no duplicate tuples. <span class="s161">SQL </span>also requires that attributes in the set <i>K </i>cannot be assigned a <i>null </i>value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:251.824pt" cellspacing="0"><tr style="height:17pt"><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">A</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">B</p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="text-indent: 0pt;text-align: center;">C</p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">D</p></td></tr><tr style="height:17pt"><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 13pt;text-align: left;">a<span class="s232">1</span></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 13pt;text-align: left;">b<span class="s232">1</span></p></td><td style="width:26pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;text-indent: 0pt;line-height: 13pt;text-align: center;">c<span class="s232">1</span></p></td><td style="width:27pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;line-height: 13pt;text-align: left;">d<span class="s232">1</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a<span class="s232">1</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s232">2</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s232">1</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">d<span class="s232">2</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a<span class="s232">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s232">2</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s232">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">d<span class="s232">2</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a<span class="s232">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s232">3</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s232">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">d<span class="s232">3</span></p></td></tr><tr style="height:13pt"><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a<span class="s233">3</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">b<span class="s233">3</span></p></td><td style="width:26pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="text-indent: 0pt;line-height: 12pt;text-align: center;">c<span class="s233">2</span></p></td><td style="width:27pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s71" style="padding-left: 8pt;text-indent: 0pt;line-height: 12pt;text-align: left;">d<span class="s233">4</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 214pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 7.4 </span>Sample instance of relation <span class="s91">r</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 119pt;text-indent: 17pt;line-height: 92%;text-align: justify;"><span class="p">Let us consider the instance of relation </span>r <span class="p">of Figure 7.4, to see which functional dependencies are satisﬁed. Observe that </span>A <span class="s86">→ </span>C <span class="p">is satisﬁed. There are two tuples that have an </span>A <span class="p">value of </span>a<span class="s98">1</span><span class="p">. These tuples have the same </span>C <span class="p">value — namely, </span>c<span class="s98">1</span><span class="p">. Similarly, the two tuples with an </span>A <span class="p">value of </span>a<span class="s98">2</span><span class="p"> have the same </span>C <span class="p">value, </span>c<span class="s98">2</span><span class="p">. There are no other pairs of distinct tuples that have the same </span>A <span class="p">value. The functional dependency </span>C <span class="s86">→ </span>A <span class="p">is not</span></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><span class="p">satisﬁed, however. To see that it is not, consider the tuples </span>t<span class="s93">1 </span><span class="s15">= </span><span class="p">(</span>a<span class="s93">2</span><span class="s94">, </span>b<span class="s93">3</span><span class="s94">, </span>c<span class="s93">2</span><span class="s94">, </span>d<span class="s93">3</span><span class="s94">) and </span>t<span class="s93">2 </span><span class="s15">=</span></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 82%;text-align: justify;"><span class="p">(</span>a<span class="s130">3</span><span class="s94">, </span>b<span class="s130">3</span><span class="s94">, </span>c<span class="s130">2</span><span class="s94">, </span>d<span class="s130">4</span><span class="s94">). These two tuples have the same </span>C <span class="p">values, </span>c<span class="s130">2</span><span class="s94">, but they have diﬀerent </span>A <span class="p">values, </span>a<span class="s130">2 </span><span class="s94">and </span>a<span class="s130">3</span><span class="s94">, respectively. Thus, we have found a pair of tuples </span>t<span class="s130">1 </span><span class="s94">and </span>t<span class="s130">2 </span><span class="s94">such that </span>t<span class="s130">1</span><span class="s94">[</span>C<span class="p">] </span><span class="s15">= </span>t<span class="s130">2</span><span class="s94">[</span>C<span class="p">], but </span>t<span class="s130">1</span><span class="s94">[</span>A<span class="p">] </span><span class="s86">≠ </span>t<span class="s130">2</span><span class="s94">[</span>A<span class="p">].</span></p><p class="s13" style="padding-left: 119pt;text-indent: 17pt;line-height: 87%;text-align: justify;"><span class="p">Some functional dependencies are said to be </span><span class="s63">trivial </span><span class="p">because they are satisﬁed by all relations. For example, </span>A <span class="s86">→ </span>A <span class="p">is satisﬁed by all relations involving attribute </span>A<span class="p">. Reading the deﬁnition of functional dependency literally, we see that, for all tuples </span>t<span class="s98">1</span><span class="p"> and </span>t<span class="s98">2</span><span class="p"> such that </span>t<span class="s93">1</span><span class="s94">[</span>A<span class="p">] </span><span class="s15">= </span>t<span class="s93">2</span><span class="s94">[</span>A<span class="p">], it is the case that </span>t<span class="s93">1</span><span class="s94">[</span>A<span class="p">] </span><span class="s15">= </span>t<span class="s93">2</span><span class="s94">[</span>A<span class="p">]. Similarly, </span>AB <span class="s86">→ </span>A <span class="p">is satisﬁed by all relations involving attribute </span>A<span class="p">. In general, a functional dependency of the form </span><span class="s15">α </span><span class="s86">→ </span><span class="s15">β </span><span class="p">is trivial if </span><span class="s15">β </span><span class="s83">⊆ </span><span class="s15">α</span><span class="p">.</span></p><p style="padding-left: 137pt;text-indent: 0pt;line-height: 8pt;text-align: justify;">It is important to realize that an instance of a relation may satisfy some functional</p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1894.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1895.png"/></span></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="p">dependencies that are not required to hold on the relation’s schema. In the instance of the </span>classroom <span class="p">relation of Figure 7.5, we see that </span>room number <span class="s86">→ </span>capacity <span class="p">is satisﬁed. However, we believe that, in the real world, two classrooms in diﬀerent buildings can have the same room number but with diﬀerent room capacity. Thus, it is possible, at some time, to have an instance of the </span>classroom <span class="p">relation in which </span>room number <span class="s86">→</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1896.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1897.png"/></span></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">capacity <span class="p">is not satisﬁed. So, we would not include </span>room number <span class="s86">→ </span>capacity <span class="p">in the set of</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:220.084pt" cellspacing="0"><tr style="height:17pt"><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">building</p></td><td style="width:71pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;text-align: center;">room number</p></td><td style="width:49pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F" bgcolor="#C6E9FA"><p class="s71" style="padding-right: 6pt;text-indent: 0pt;text-align: right;">capacity</p></td></tr><tr style="height:16pt"><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Packard</p></td><td style="width:71pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">101</p></td><td style="width:49pt;border-top-style:solid;border-top-width:1pt;border-top-color:#221E1F;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-top: 2pt;padding-right: 6pt;text-indent: 0pt;line-height: 12pt;text-align: right;">500</p></td></tr><tr style="height:13pt"><td style="width:50pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Painter</p></td><td style="width:71pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">514</p></td><td style="width:49pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-right: 7pt;text-indent: 0pt;line-height: 12pt;text-align: right;">10</p></td></tr><tr style="height:13pt"><td style="width:50pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Taylor</p></td><td style="width:71pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">3128</p></td><td style="width:49pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-right: 6pt;text-indent: 0pt;line-height: 12pt;text-align: right;">70</p></td></tr><tr style="height:13pt"><td style="width:50pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Watson</p></td><td style="width:71pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">100</p></td><td style="width:49pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-right: 6pt;text-indent: 0pt;line-height: 12pt;text-align: right;">30</p></td></tr><tr style="height:14pt"><td style="width:50pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 7pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Watson</p></td><td style="width:71pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 12pt;text-align: center;">120</p></td><td style="width:49pt;border-left-style:solid;border-left-width:1pt;border-left-color:#221E1F;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#221E1F;border-right-style:solid;border-right-width:1pt;border-right-color:#221E1F"><p class="s72" style="padding-right: 6pt;text-indent: 0pt;line-height: 12pt;text-align: right;">50</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 4pt;padding-left: 200pt;text-indent: 0pt;text-align: left;"><span class="s73">Figure 7.5 </span>An instance of the <span class="s91">classroom </span>relation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1898.png"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 88pt;text-indent: 0pt;line-height: 88%;text-align: justify;"><span class="p">functional dependencies that hold on the schema for the </span>classroom <span class="p">relation. However, we would expect the functional dependency </span>building<span class="p">, </span>room number <span class="s86">→ </span>capacity <span class="p">to hold on the </span>classroom <span class="p">schema.</span></p><p class="s15" style="padding-top: 2pt;padding-left: 88pt;text-indent: 17pt;line-height: 80%;text-align: justify;"><span class="p">Because we assume that attribute names have only one meaning in the database schema, if we state that a functional dependency </span>α <span class="s86">→ </span>β <span class="p">holds as a constraint on the database, then for any schema </span><span class="s13">R </span><span class="p">such that </span>α <span class="s83">⊆ </span><span class="s13">R </span><span class="p">and </span>β <span class="s83">⊆ </span><span class="s13">R</span><span class="p">, </span>α <span class="s86">→ </span>β <span class="p">must hold.</span></p><p style="padding-left: 106pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">Given that a set of functional dependencies <i>F </i>holds on a relation <i>r</i>(<i>R</i>), it may</p><p class="s13" style="padding-top: 1pt;padding-left: 88pt;text-indent: 0pt;line-height: 84%;text-align: justify;"><span class="p">be possible to infer that certain other functional dependencies must also hold on the relation. For example, given a schema </span>r<span class="p">(</span>A<span class="p">, </span>B<span class="p">, </span>C<span class="p">), if functional dependencies </span>A <span class="s86">→ </span>B <span class="p">and </span>B <span class="s86">→ </span>C <span class="p">hold on </span>r<span class="p">, we can infer the functional dependency </span>A <span class="s86">→ </span>C <span class="p">must also hold on </span>r<span class="p">. This is because, given any value of </span>A<span class="p">, there can be only one corresponding value for </span>B<span class="p">,</span></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">and for that value of <i>B</i>, there can only be one corresponding value for <i>C</i>. We study in Section 7.4.1, how to make such inferences.</p><p style="padding-left: 88pt;text-indent: 17pt;text-align: justify;">We shall use the notation <i>F </i><span class="s181">+</span><span class="s15"> </span>to denote the <span class="s63">closure </span>of the set <i>F </i>, that is, the set of all functional dependencies that can be inferred given the set <i>F </i>. <i>F </i><span class="s181">+</span><span class="s15"> </span>contains all of the functional dependencies in <i>F </i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">7.2.3 Lossless Decomposition and Functional Dependencies</p><p class="s13" style="padding-top: 7pt;padding-left: 88pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">We can use functional dependencies to show when certain decompositions are lossless. Let </span>R<span class="p">, </span>R<span class="s130">1</span><span class="s94">, </span>R<span class="s130">2</span><span class="s94">, and </span>F <span class="p">be as above. </span>R<span class="s130">1 </span><span class="s94">and </span>R<span class="s130">2 </span><span class="s94">form a lossless decomposition of </span>R <span class="p">if at least one of the following functional dependencies is in </span>F <span class="s181">+</span><span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>R<span class="s93">1 </span><span class="s15">∩ </span>R<span class="s93">2 </span><span class="s86">→ </span>R<span class="s93">1</span></p><p class="s13" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s39">• </span>R<span class="s130">1 </span><span class="s15">∩ </span>R<span class="s130">2 </span><span class="s86">→ </span>R<span class="s130">2</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><span class="p">In other words, if </span>R<span class="s130">1 </span><span class="s15">∩</span>R<span class="s130">2 </span><span class="s94">forms a superkey for either </span>R<span class="s130">1 </span><span class="s94">or </span>R<span class="s130">2</span><span class="s94">, the decomposition of </span>R <span class="p">is a lossless decomposition. We can use attribute closure to test eﬃciently for superkeys, as we have seen earlier.</span></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: justify;">To illustrate this, consider the schema</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1899.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1900.png"/></span></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: center;"><i>in dep </i>(<span class="s69">ID</span>, <i>name</i>, <i>salary</i>, <i>dept name</i>, <i>building</i>, <i>budget</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: justify;">that we decomposed in Section 7.1 into the <i>instructor </i>and <i>department </i>schemas:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1901.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1902.png"/></span></p><p style="padding-left: 188pt;text-indent: -5pt;text-align: center;"><i>instructor </i>(<span class="s69">ID</span>, <i>name</i>, <i>dept name</i>, <i>salary</i>) <i>department </i>(<i>dept name</i>, <i>building</i>, <i>budget</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1903.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1904.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="1" alt="image" src="Image_1905.png"/></span></p><p class="s13" style="padding-left: 88pt;text-indent: 0pt;line-height: 88%;text-align: justify;"><span class="p">Consider the intersection of these two schemas, which is </span>dept name<span class="p">. We see that be- cause </span>dept name<span class="s86">→ </span>dept name<span class="p">, </span>building<span class="p">, </span>budget<span class="p">, the lossless-decomposition rule is sat- isﬁed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 119pt;text-indent: 17pt;text-align: justify;"><a name="bookmark136">For the general case of decomposition of a schema into multiple schemas at once, the test for lossless decomposition is more complicated. See the Further Reading sec- tion at the end of this chapter for references on this topic.</a><a name="bookmark164">&zwnj;</a></p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">While the test for binary decomposition is clearly a suﬃcient condition for lossless decomposition, it is a necessary condition only if all constraints are functional depen- dencies. We shall see other types of constraints later (in particular, a type of constraint called multivalued dependencies discussed in Section 7.6.1) that can ensure that a de- composition is lossless even if no functional dependencies are present.</p><p class="s13" style="padding-top: 1pt;padding-left: 119pt;text-indent: 17pt;line-height: 82%;text-align: justify;"><span class="p">Suppose we decompose a relation schema </span>r<span class="p">(</span>R<span class="p">) into </span>r<span class="s130">1</span><span class="s94">(</span>R<span class="s130">1</span><span class="s94">) and </span>r<span class="s130">2</span><span class="s94">(</span>R<span class="s130">2</span><span class="s94">), where </span>R<span class="s130">1 </span><span class="s15">∩ </span>R<span class="s98">2</span><span class="p"> </span><span class="s86">→ </span>R<span class="s98">1</span><span class="p">.</span><span class="s76">5</span><span class="p"> Then the following </span><span class="s44">SQL </span><span class="p">constraints must be imposed on the decomposed schema to ensure their contents are consistent with the original schema.</span></p><p class="s13" style="padding-top: 10pt;padding-left: 123pt;text-indent: 0pt;line-height: 16pt;text-align: left;"><span class="s39">• </span>R<span class="s130">1 </span><span class="s15">∩ </span>R<span class="s130">2 </span><span class="s94">is the primary key of </span>r<span class="s130">1</span><span class="s94">.</span></p><p style="padding-left: 139pt;text-indent: 0pt;line-height: 12pt;text-align: left;">This constraint enforces the functional dependency.</p><p class="s13" style="padding-top: 4pt;padding-left: 123pt;text-indent: 0pt;line-height: 16pt;text-align: left;"><span class="s39">• </span>R<span class="s93">1 </span><span class="s15">∩ </span>R<span class="s93">2 </span><span class="s94">is a foreign key from </span>r<span class="s93">2 </span><span class="s94">referencing </span>r<span class="s93">1</span><span class="s94">.</span></p><p style="padding-left: 139pt;text-indent: 0pt;line-height: 12pt;text-align: left;">This constraint ensures that each tuple in <i>r</i><span class="s98">2</span> has a matching tuple in <i>r</i><span class="s98">1</span>, without</p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;">which it would not appear in the natural join of <i>r</i><span class="s98">1</span> and <i>r</i><span class="s98">2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 119pt;text-indent: 0pt;line-height: 93%;text-align: justify;"><span class="p">If </span>r<span class="s98">1</span><span class="p"> or </span>r<span class="s98">2</span><span class="p"> is decomposed further, as long as the decomposition ensures that all attributes in </span>R<span class="s130">1 </span><span class="s15">∩ </span>R<span class="s130">2 </span><span class="s94">are in one relation, the primary or foreign-key constraint on </span>r<span class="s130">1 </span><span class="s94">or </span>r<span class="s130">2 </span><span class="s94">would be inherited by that relation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part152.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part154.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
