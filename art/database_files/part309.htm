<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>TRANSACTION MANAGEMENT</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part308.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part310.htm">下一个 &gt;</a></p><p class="s89" style="padding-top: 13pt;padding-left: 161pt;text-indent: 2pt;line-height: 93%;text-align: left;"><a name="bookmark365">TRANSACTION MANAGEMENT</a><a name="bookmark408">&zwnj;</a></p><p style="padding-top: 22pt;padding-left: 119pt;text-indent: 0pt;text-align: justify;">The term <i>transaction </i>refers to a collection of operations that form a single logical unit of work. For instance, transfer of money from one account to another is a transaction consisting of two updates, one to each account.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">It is important that either all actions of a transaction be executed completely, or, in case of some failure, partial eﬀects of each incomplete transaction be undone. This property is called <i>atomicity</i>. Further, once a transaction is successfully executed, its eﬀects must persist in the database— a system failure should not result in the database forgetting about a transaction that successfully completed. This property is called <i>dura- bility</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">In a database system where multiple transactions are executing concurrently, if updates to shared data are not controlled, there is potential for transactions to see in- consistent intermediate states created by updates of other transactions. Such a situation can result in erroneous updates to data stored in the database. Thus, database systems must provide mechanisms to isolate transactions from the eﬀects of other concurrently executing transactions. This property is called <i>isolation</i>.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Chapter 17 describes the concept of a transaction in detail, including the proper- ties of atomicity, durability, isolation, and other properties provided by the transaction abstraction. In particular, the chapter makes precise the notion of isolation by means of a concept called serializability.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Chapter 18 describes several concurrency-control techniques that help implement the isolation property. Chapter 19 describes the recovery management component of a database, which implements the atomicity and durability properties.</p><p style="padding-left: 119pt;text-indent: 17pt;text-align: justify;">Taken as a whole, the transaction-management component of a database system al- lows application developers to focus on the implementation of individual transactions, ignoring the issues of concurrency and fault tolerance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s191" style="padding-left: 119pt;text-indent: 0pt;text-align: right;">797</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="708" height="175" alt="image" src="Image_2974.png"/></span></p><p class="s61" style="padding-top: 52pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">CHAPTER <span class="h2">17</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part310.htm">Transactions</a><a class="toc1" href="part311.htm">17.1   Transaction Concept</a><a class="toc1" href="part312.htm">17.2  A Simple Transaction Model</a><a class="toc1" href="part313.htm">17.3  Storage Structure</a><a class="toc1" href="part314.htm">17.4  Transaction Atomicity and Durability</a><a class="toc1" href="part315.htm">17.5  Transaction Isolation</a><a class="toc1" href="part316.htm">17.6  Serializability</a><a class="toc1" href="part317.htm">17.7  Transaction Isolation and Atomicity</a><a class="toc1" href="part318.htm">17.8  Transaction Isolation Levels</a><a class="toc1" href="part319.htm">17.9  Implementation of Isolation Levels</a><a class="toc1" href="part320.htm">17.10  Transactions as SQL Statements</a><a class="toc1" href="part321.htm">17.11  Summary</a><a class="toc1" href="part322.htm">Review Terms</a><a class="toc1" href="part323.htm">Practice Exercises</a><a class="toc1" href="part324.htm">Exercises</a><a class="toc1" href="part325.htm">Further Reading</a><a class="toc1" href="part326.htm">Bibliography</a><a class="toc1" href="part327.htm">Credits</a><a class="toc0" href="part328.htm">Concurrency Control</a><a class="toc1" href="part329.htm">18.1   Lock-Based Protocols</a><a class="toc1" href="part330.htm">18.2  Deadlock Handling</a><a class="toc1" href="part331.htm">18.3  Multiple Granularity</a><a class="toc1" href="part332.htm">18.4  Insert Operations, Delete Operations, and Predicate Reads</a><a class="toc1" href="part333.htm">18.5  Timestamp-Based Protocols</a><a class="toc1" href="part334.htm">18.6  Validation-Based Protocols</a><a class="toc1" href="part335.htm">18.7  Multiversion Schemes</a><a class="toc1" href="part336.htm">18.8  Snapshot Isolation</a><a class="toc1" href="part337.htm">18.9  Weak Levels of Consistency in Practice</a><a class="toc1" href="part338.htm">18.10  Advanced Topics in Concurrency Control</a><a class="toc1" href="part339.htm">18.11  Summary</a><a class="toc1" href="part340.htm">Review Terms</a><a class="toc1" href="part341.htm">Practice Exercises</a><a class="toc1" href="part342.htm">Exercises</a><a class="toc1" href="part343.htm">Further Reading</a><a class="toc1" href="part344.htm">Bibliography</a><a class="toc1" href="part345.htm">Credits</a><a class="toc0" href="part346.htm">Recovery System</a><a class="toc1" href="part347.htm">19.1   Failure Classification</a><a class="toc1" href="part348.htm">19.2  Storage</a><a class="toc1" href="part349.htm">19.3  Recovery and Atomicity</a><a class="toc1" href="part350.htm">19.4  Recovery Algorithm</a><a class="toc1" href="part351.htm">19.5  Buffer Management</a><a class="toc1" href="part352.htm">19.6  Failure with Loss of Non-Volatile Storage</a><a class="toc1" href="part353.htm">19.7  High Availability Using Remote Backup Systems</a><a class="toc1" href="part354.htm">19.8  Early Lock Release and Logical Undo Operations</a><a class="toc1" href="part355.htm">19.9  ARIES</a><a class="toc1" href="part356.htm">19.10  Recovery in Main-Memory Databases</a><a class="toc1" href="part357.htm">19.11  Summary</a><a class="toc1" href="part358.htm">Review Terms</a><a class="toc1" href="part359.htm">Practice Exercises</a><a class="toc1" href="part360.htm">Exercises</a><a class="toc1" href="part361.htm">Further Reading</a><a class="toc1" href="part362.htm">Bibliography</a><a class="toc1" href="part363.htm">Credits</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part308.htm">&lt; 上一个</a><span> | </span><a href="../database.html">内容</a><span> | </span><a href="part310.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
