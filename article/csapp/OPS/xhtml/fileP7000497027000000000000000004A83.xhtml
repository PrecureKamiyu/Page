<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>5.5 Reducing Procedure Calls</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <script src="js/format_lg_obj.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P7000497027000000000000000004A83" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P70004970270000000000000000431D6" data-uri="chapter05.xhtml#P70004970270000000000000000431D6" epub:type="title"><span class="pcalibre label pcalibre1">5.5 </span>Reducing Procedure Calls</h1></header>
<p id="P70004970270000000000000000431D7" data-uri="chapter05.xhtml#P70004970270000000000000000431D7" class="pcalibre1 pcalibre calibre2">As we have seen, procedure calls can incur overhead and also block most forms of program optimization. We can see in the code for <code id="P70004970270000000000000000431D8" data-uri="chapter05.xhtml#P70004970270000000000000000431D8" class="pcalibre1 calibre8 pcalibre">combine2</code> (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP70004970270000000000000000049CE.xhtml#P70004970270000000000000000049F6"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.6</span></a>) that <code id="P70004970270000000000000000431D9" data-uri="chapter05.xhtml#P70004970270000000000000000431D9" class="pcalibre1 calibre8 pcalibre">get_vec_element</code> is called on every loop iteration to retrieve the next vector element. This function checks the vector index <code id="P70004970270000000000000000431DA" data-uri="chapter05.xhtml#P70004970270000000000000000431DA" class="pcalibre1 calibre8 pcalibre">i</code> against the loop bounds with every vector reference, a clear source of inefficiency. Bounds checking might be a useful feature when dealing with arbitrary array accesses, but a simple analysis of the code for <code id="P70004970270000000000000000431DB" data-uri="chapter05.xhtml#P70004970270000000000000000431DB" class="pcalibre1 calibre8 pcalibre">combine2</code> shows that all references will be valid.<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000004A8D" title="513" data-uri="chapter05.xhtml#P7000497027000000000000000004A8D" epub:type="pagebreak"></span></p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000004A8A" data-uri="chapter05.xhtml#P7000497027000000000000000004A8A">
<p id="P70004970270000000000000000431DC" data-uri="chapter05.xhtml#P70004970270000000000000000431DC" class="pcalibre1 pcalibre calibre2">---------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/opt/vec.c</i></p>
<pre id="P70004970270000000000000000431DD" data-uri="chapter05.xhtml#P70004970270000000000000000431DD" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000431DE" data-uri="chapter05.xhtml#P70004970270000000000000000431DE" class="calibre10 pcalibre pcalibre1">
1	data_t *get_vec_start(vec_ptr v)
2	{
3		return v-&gt;data;
4	}
</code></pre>
<p id="P70004970270000000000000000431DF" data-uri="chapter05.xhtml#P70004970270000000000000000431DF" class="pcalibre1 pcalibre calibre2">---------------------------------------------------------------------------<i class="calibre5 pcalibre pcalibre1">code/opt/vec.c</i></p>
<pre id="P70004970270000000000000000431E0" data-uri="chapter05.xhtml#P70004970270000000000000000431E0" class="calibre9 pcalibre pcalibre1"><code id="P70004970270000000000000000431E1" data-uri="chapter05.xhtml#P70004970270000000000000000431E1" class="calibre10 pcalibre pcalibre1">
1	/* Direct access to vector data */
2	void combine3(vec_ptr v, data_t *dest)
3	{
4		long i;
5		long length = vec_length(v);
6		data_t *data = get_vec_start(v); 
7
8		*dest = IDENT;
9		for (i = 0; i &lt; length; i++) {
10			*dest = *dest OP data[i];
11		}
12	}
</code></pre>
<figcaption id="P70004970270000000000000000431E2" data-uri="chapter05.xhtml#P70004970270000000000000000431E2" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P70004970270000000000000000431E3" data-uri="chapter05.xhtml#P70004970270000000000000000431E3" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">5.9 </span>Eliminating function calls within the loop.</h1></header>
<div class="caption pcalibre pcalibre1" id="P70004970270000000000000000431E4" data-uri="chapter05.xhtml#P70004970270000000000000000431E4"><p id="P70004970270000000000000000431E5" data-uri="chapter05.xhtml#P70004970270000000000000000431E5" class="pcalibre calibre3 pcalibre1">The resulting code does not show a performance gain, but it enables additional optimizations.</p></div></figcaption></figure>
<p id="P70004970270000000000000000431E6" data-uri="chapter05.xhtml#P70004970270000000000000000431E6" class="pcalibre1 pcalibre calibre2">Suppose instead that we add a function <code id="P70004970270000000000000000431E7" data-uri="chapter05.xhtml#P70004970270000000000000000431E7" class="pcalibre1 calibre8 pcalibre">get_vec_start</code> to our abstract data type. This function returns the starting address of the data array, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000004A8A"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">5.9</span></a>. We could then write the procedure shown as <code id="P70004970270000000000000000431E8" data-uri="chapter05.xhtml#P70004970270000000000000000431E8" class="pcalibre1 calibre8 pcalibre">combine3</code> in this figure, having no function calls in the inner loop. Rather than making a function call to retrieve each vector element, it accesses the array directly. A purist might say that this transformation seriously impairs the program modularity. In principle, the user of the vector abstract data type should not even need to know that the vector contents are stored as an array, rather than as some other data structure such as a linked list. A more pragmatic programmer would argue that this transformation is a necessary step toward achieving high-performance results.</p>
<table id="P70004970270000000000000000431E9" data-uri="chapter05.xhtml#P70004970270000000000000000431E9" class="pcalibre largetable pcalibre1">
<thead class="pcalibre1 pcalibre calibre16">
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000431EA" data-uri="chapter05.xhtml#P70004970270000000000000000431EA" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000431EB" data-uri="chapter05.xhtml#P70004970270000000000000000431EB" class="calibre18 pcalibre pcalibre1"/>
<th id="P70004970270000000000000000431EC" data-uri="chapter05.xhtml#P70004970270000000000000000431EC" class="calibre18 pcalibre pcalibre1"/>
<th colspan="2" id="P70004970270000000000000000431ED" data-uri="chapter05.xhtml#P70004970270000000000000000431ED" class="calibre18 pcalibre pcalibre1">Integer</th>
<th colspan="2" id="P70004970270000000000000000431EE" data-uri="chapter05.xhtml#P70004970270000000000000000431EE" class="calibre18 pcalibre pcalibre1">Floating point</th>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<th id="P70004970270000000000000000431EF" data-uri="chapter05.xhtml#P70004970270000000000000000431EF" class="calibre18 pcalibre pcalibre1">Function</th>
<th id="P70004970270000000000000000431F0" data-uri="chapter05.xhtml#P70004970270000000000000000431F0" class="calibre18 pcalibre pcalibre1">Page</th>
<th id="P70004970270000000000000000431F1" data-uri="chapter05.xhtml#P70004970270000000000000000431F1" class="calibre18 pcalibre pcalibre1">Method</th>
<th id="P70004970270000000000000000431F2" data-uri="chapter05.xhtml#P70004970270000000000000000431F2" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P70004970270000000000000000431F3" data-uri="chapter05.xhtml#P70004970270000000000000000431F3" class="calibre18 pcalibre pcalibre1">*</th>
<th id="P70004970270000000000000000431F4" data-uri="chapter05.xhtml#P70004970270000000000000000431F4" class="calibre18 pcalibre pcalibre1">+</th>
<th id="P70004970270000000000000000431F5" data-uri="chapter05.xhtml#P70004970270000000000000000431F5" class="calibre18 pcalibre pcalibre1">*</th>
</tr>
</thead>
<tbody class="calibre19 pcalibre pcalibre1">
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000431F6" data-uri="chapter05.xhtml#P70004970270000000000000000431F6" class="calibre20 pcalibre pcalibre1"><code id="P70004970270000000000000000431F7" data-uri="chapter05.xhtml#P70004970270000000000000000431F7" class="calibre10 pcalibre pcalibre1">combine2</code></td>
<td id="P70004970270000000000000000431F8" data-uri="chapter05.xhtml#P70004970270000000000000000431F8" class="calibre20 pcalibre pcalibre1">509</td>
<td id="P70004970270000000000000000431F9" data-uri="chapter05.xhtml#P70004970270000000000000000431F9" class="calibre20 pcalibre pcalibre1">Move <code id="P70004970270000000000000000431FA" data-uri="chapter05.xhtml#P70004970270000000000000000431FA" class="calibre10 pcalibre pcalibre1">vec_length</code></td>
<td id="P70004970270000000000000000431FB" data-uri="chapter05.xhtml#P70004970270000000000000000431FB" class="calibre20 pcalibre pcalibre1">7.02</td>
<td id="P70004970270000000000000000431FC" data-uri="chapter05.xhtml#P70004970270000000000000000431FC" class="calibre20 pcalibre pcalibre1">9.03</td>
<td id="P70004970270000000000000000431FD" data-uri="chapter05.xhtml#P70004970270000000000000000431FD" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P70004970270000000000000000431FE" data-uri="chapter05.xhtml#P70004970270000000000000000431FE" class="calibre20 pcalibre pcalibre1">11.03</td>
</tr>
<tr class="pcalibre calibre17 pcalibre1">
<td id="P70004970270000000000000000431FF" data-uri="chapter05.xhtml#P70004970270000000000000000431FF" class="calibre20 pcalibre pcalibre1"><code id="P7000497027000000000000000043200" data-uri="chapter05.xhtml#P7000497027000000000000000043200" class="calibre10 pcalibre pcalibre1">combine3</code></td>
<td id="P7000497027000000000000000043201" data-uri="chapter05.xhtml#P7000497027000000000000000043201" class="calibre20 pcalibre pcalibre1">513</td>
<td id="P7000497027000000000000000043202" data-uri="chapter05.xhtml#P7000497027000000000000000043202" class="calibre20 pcalibre pcalibre1">Direct data access</td>
<td id="P7000497027000000000000000043203" data-uri="chapter05.xhtml#P7000497027000000000000000043203" class="calibre20 pcalibre pcalibre1">7.17</td>
<td id="P7000497027000000000000000043204" data-uri="chapter05.xhtml#P7000497027000000000000000043204" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P7000497027000000000000000043205" data-uri="chapter05.xhtml#P7000497027000000000000000043205" class="calibre20 pcalibre pcalibre1">9.02</td>
<td id="P7000497027000000000000000043206" data-uri="chapter05.xhtml#P7000497027000000000000000043206" class="calibre20 pcalibre pcalibre1">11.03</td>
</tr>
</tbody>
</table>
<p id="P7000497027000000000000000043207" data-uri="chapter05.xhtml#P7000497027000000000000000043207" class="pcalibre1 pcalibre calibre2">Surprisingly, there is no apparent performance improvement. Indeed, the performance for integer sum has gotten slightly worse. Evidently, other operations in the inner loop are forming a bottleneck that limits the performance more than the call to <code id="P7000497027000000000000000043208" data-uri="chapter05.xhtml#P7000497027000000000000000043208" class="pcalibre1 calibre8 pcalibre">get_vec_element</code>. We will return to this function later (<a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004E9A.xhtml#P7000497027000000000000000004ED1"><span class="pcalibre label pcalibre1">Section </span><span class="pcalibre label pcalibre1">5.11.2</span></a>) and see why the repeated bounds checking by <code id="P7000497027000000000000000043209" data-uri="chapter05.xhtml#P7000497027000000000000000043209" class="pcalibre1 calibre8 pcalibre">combine2</code> does not incur a performance penalty. For now, we can view this transformation as one of a series of steps that will ultimately lead to greatly improved performance.</p>
</section></body></html>
