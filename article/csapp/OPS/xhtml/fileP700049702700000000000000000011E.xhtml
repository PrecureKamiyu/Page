<?xml version='1.0' encoding='utf-8'?>
<html xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" epub:prefix="index: http://www.index.com/">
  <head>
    <meta name="dcterms.conformsTo" content="PXE Basic 1.0"/>
    <meta name="generator" content="PXE Tools version 1.39.52"/>
    <!--Created by pxe.pl for standard version PXE Basic 1.0,data-profile-product=standard by PXE Tools 1.39.52, partial=false-->
    <title>1.4 Processors Read and Interpret Instructions Stored in Memory</title>
    <link rel="alternate stylesheet" type="text/css" title="night" href="../css/theme/night.css"/>
    <link rel="alternate stylesheet" type="text/css" title="sepia" href="../css/theme/sepia.css"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body epub:type="bodymatter" class="calibre pcalibre pcalibre1">
<section id="P700049702700000000000000000011E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title pcalibre1" id="P700049702700000000000000003E522" data-uri="chapter01.xhtml#P700049702700000000000000003E522" epub:type="title"><span class="pcalibre label pcalibre1">1.4 </span>Processors Read and Interpret Instructions Stored in Memory</h1></header>
<p id="P700049702700000000000000003E523" data-uri="chapter01.xhtml#P700049702700000000000000003E523" class="pcalibre1 pcalibre calibre2">At this point, our <code id="P700049702700000000000000003E524" data-uri="chapter01.xhtml#P700049702700000000000000003E524" class="pcalibre1 calibre8 pcalibre">hello.c</code> source program has been translated by the compilation system into an executable object file called <code id="P700049702700000000000000003E525" data-uri="chapter01.xhtml#P700049702700000000000000003E525" class="pcalibre1 calibre8 pcalibre">hello</code> that is stored on disk. To run the executable file on a Unix system, we type its name to an application program known as a <i class="calibre5 pcalibre pcalibre1">shell:</i></p>
<pre id="P700049702700000000000000003E526" data-uri="chapter01.xhtml#P700049702700000000000000003E526" class="calibre9 pcalibre pcalibre1"><code id="P700049702700000000000000003E527" data-uri="chapter01.xhtml#P700049702700000000000000003E527" class="calibre10 pcalibre pcalibre1">
linux&gt; <i class="calibre5 pcalibre pcalibre1">./hello</i>
hello, world
linux&gt;
</code></pre>
<p id="P700049702700000000000000003E528" data-uri="chapter01.xhtml#P700049702700000000000000003E528" class="pcalibre1 pcalibre calibre2">The shell is a command-line interpreter that prints a prompt, waits for you to type a command line, and then performs the command. If the first word of the command line does not correspond to a built-in shell command, then the shell</p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000000126" data-uri="chapter01.xhtml#P7000497027000000000000000000126">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000127" title="8" data-uri="chapter01.xhtml#P7000497027000000000000000000127" epub:type="pagebreak"></span>
<img alt="A diagram features the hardware organization of a typical system." id="P700049702700000000000000003E529" data-uri="P700049702700000000000000000B778" src="../images/p8-1.png" class="calibre33 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000003E52A" data-uri="chapter01.xhtml#P700049702700000000000000003E52A" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E52B" data-uri="chapter01.xhtml#P700049702700000000000000003E52B" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="number pcalibre pcalibre1">1.4 </span>Hardware organization of a typical system.</h1></header>
<div class="edition pcalibre pcalibre1" id="P700049702700000000000000003E52C" data-uri="chapter01.xhtml#P700049702700000000000000003E52C"><p id="P700049702700000000000000003E52D" data-uri="chapter01.xhtml#P700049702700000000000000003E52D" class="pcalibre calibre3 pcalibre1">CPU: central processing unit, ALU: arithmetic/logic unit, PC: program counter, USB: Universal Serial Bus.</p></div>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001E7F4" data-uri="chapter01.xhtml#P700049702700000000000000001E7F4">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E52E" data-uri="chapter01.xhtml#P700049702700000000000000003E52E" class="pcalibre calibre3 pcalibre1">A diagram shows the CPU consisting of a PC register file, which interacts with ALU and Bus interface. The bus interface interests with the I/O bridge, via that system bus, which when interacts with the main memory via the memory bus. The I/O bridge receives input from the I/O bus, which interacts with the USB controller (mouse and keyboard), Graphics adapter (display), Disk controller (Disk, storing hello executable), and expansion slots for other devices such as network adapters.</p>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E52F" data-uri="chapter01.xhtml#P700049702700000000000000003E52F">assumes that it is the name of an executable file that it should load and run. So in this case, the shell loads and runs the <code id="P700049702700000000000000003E530" data-uri="chapter01.xhtml#P700049702700000000000000003E530" class="pcalibre1 calibre8 pcalibre">hello</code> program and then waits for it to terminate. The <code id="P700049702700000000000000003E531" data-uri="chapter01.xhtml#P700049702700000000000000003E531" class="pcalibre1 calibre8 pcalibre">hello</code> program prints its message to the screen and then terminates. The shell then prints a prompt and waits for the next input command line.</p>
<section id="P7000497027000000000000000000130" data-uri="chapter01.xhtml#P7000497027000000000000000000130" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E532" data-uri="chapter01.xhtml#P700049702700000000000000003E532" epub:type="title"><span class="pcalibre label pcalibre1">1.4.1 </span>Hardware Organization of a System</h1></header>
<p id="P700049702700000000000000003E533" data-uri="chapter01.xhtml#P700049702700000000000000003E533" class="pcalibre1 pcalibre calibre2">To understand what happens to our <code id="P700049702700000000000000003E534" data-uri="chapter01.xhtml#P700049702700000000000000003E534" class="pcalibre1 calibre8 pcalibre">hello</code> program when we run it, we need to understand the hardware organization of a typical system, which is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000000126"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.4</span></a>. This particular picture is modeled after the family of recent Intel systems, but all systems have a similar look and feel. Don't worry about the complexity of this figure just now. We will get to its various details in stages throughout the course of the book.</p>
<section id="P7000497027000000000000000000134" data-uri="chapter01.xhtml#P7000497027000000000000000000134" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E535" data-uri="chapter01.xhtml#P700049702700000000000000003E535" epub:type="title">Buses</h1></header>
<p id="P700049702700000000000000003E536" data-uri="chapter01.xhtml#P700049702700000000000000003E536" class="pcalibre1 pcalibre calibre2">Running throughout the system is a collection of electrical conduits called <i class="calibre5 pcalibre pcalibre1">buses</i> that carry bytes of information back and forth between the components. Buses are typically designed to transfer fixed-size chunks of bytes known as <i class="calibre5 pcalibre pcalibre1">words</i>. The number of bytes in a word (the <i class="calibre5 pcalibre pcalibre1">word size</i>) is a fundamental system parameter that varies across systems. Most machines today have word sizes of either 4 bytes (32 bits) or 8 bytes (64 bits). In this book, we do not assume any fixed definition of word size. Instead, we will specify what we mean by a "word" in any context that requires this to be defined.</p>
</section>
<section id="P7000497027000000000000000000137" data-uri="chapter01.xhtml#P7000497027000000000000000000137" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E537" data-uri="chapter01.xhtml#P700049702700000000000000003E537" epub:type="title"><span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000139" title="9" data-uri="chapter01.xhtml#P7000497027000000000000000000139" epub:type="pagebreak"></span>I/O Devices</h1></header>
<p id="P700049702700000000000000003E538" data-uri="chapter01.xhtml#P700049702700000000000000003E538" class="pcalibre1 pcalibre calibre2">Input/output (I/O) devices are the system's connection to the external world. Our example system has four I/O devices: a keyboard and mouse for user input, a display for user output, and a disk drive (or simply disk) for long-term storage of data and programs. Initially, the executable <code id="P700049702700000000000000003E539" data-uri="chapter01.xhtml#P700049702700000000000000003E539" class="pcalibre1 calibre8 pcalibre">hello</code> program resides on the disk.</p>
<p id="P700049702700000000000000003E53A" data-uri="chapter01.xhtml#P700049702700000000000000003E53A" class="pcalibre1 pcalibre calibre2">Each I/O device is connected to the I/O bus by either a <i class="calibre5 pcalibre pcalibre1">controller</i> or an <i class="calibre5 pcalibre pcalibre1">adapter</i>. The distinction between the two is mainly one of packaging. Controllers are chip sets in the device itself or on the system's main printed circuit board (often called the <i class="calibre5 pcalibre pcalibre1">motherboard</i>). An adapter is a card that plugs into a slot on the motherboard. Regardless, the purpose of each is to transfer information back and forth between the I/O bus and an I/O device.</p>
<p id="P700049702700000000000000003E53B" data-uri="chapter01.xhtml#P700049702700000000000000003E53B" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a> has more to say about how I/O devices such as disks work. In <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000007867.xhtml#P7000497027000000000000000007867"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">10</span></a>, you will learn how to use the Unix I/O interface to access devices from your application programs. We focus on the especially interesting class of devices known as networks, but the techniques generalize to other kinds of devices as well.</p>
</section>
<section id="P700049702700000000000000000013E" data-uri="chapter01.xhtml#P700049702700000000000000000013E" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E53C" data-uri="chapter01.xhtml#P700049702700000000000000003E53C" epub:type="title">Main Memory</h1></header>
<p id="P700049702700000000000000003E53D" data-uri="chapter01.xhtml#P700049702700000000000000003E53D" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">main memory</i> is a temporary storage device that holds both a program and the data it manipulates while the processor is executing the program. Physically, main memory consists of a collection of <i class="calibre5 pcalibre pcalibre1">dynamic random access memory</i>(DRAM) chips. Logically, memory is organized as a linear array of bytes, each with its own unique address (array index) starting at zero. In general, each of the machine instructions that constitute a program can consist of a variable number of bytes. The sizes of data items that correspond to C program variables vary according to type. For example, on an x86-64 machine running Linux, data of type <code id="P700049702700000000000000003E53E" data-uri="chapter01.xhtml#P700049702700000000000000003E53E" class="pcalibre1 calibre8 pcalibre">short</code> require 2 bytes, types <code id="P700049702700000000000000003E53F" data-uri="chapter01.xhtml#P700049702700000000000000003E53F" class="pcalibre1 calibre8 pcalibre">int</code> and <code id="P700049702700000000000000003E540" data-uri="chapter01.xhtml#P700049702700000000000000003E540" class="pcalibre1 calibre8 pcalibre">float</code> 4 bytes, and types <code id="P700049702700000000000000003E541" data-uri="chapter01.xhtml#P700049702700000000000000003E541" class="pcalibre1 calibre8 pcalibre">long</code> and <code id="P700049702700000000000000003E542" data-uri="chapter01.xhtml#P700049702700000000000000003E542" class="pcalibre1 calibre8 pcalibre">double</code> 8 bytes.</p>
<p id="P700049702700000000000000003E543" data-uri="chapter01.xhtml#P700049702700000000000000003E543" class="pcalibre1 pcalibre calibre2"><a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a> has more to say about how memory technologies such as DRAM chips work, and how they are combined to form main memory.</p>
</section>
<section id="P7000497027000000000000000000147" data-uri="chapter01.xhtml#P7000497027000000000000000000147" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="title5 pcalibre pcalibre1" id="P700049702700000000000000003E544" data-uri="chapter01.xhtml#P700049702700000000000000003E544" epub:type="title">Processor</h1></header>
<p id="P700049702700000000000000003E545" data-uri="chapter01.xhtml#P700049702700000000000000003E545" class="pcalibre1 pcalibre calibre2">The <i class="calibre5 pcalibre pcalibre1">central processing unit</i> (CPU), or simply <i class="calibre5 pcalibre pcalibre1">processor</i>, is the engine that interprets (or <i class="calibre5 pcalibre pcalibre1">executes</i>) instructions stored in main memory. At its core is a word-size storage device (or <i class="calibre5 pcalibre pcalibre1">register</i>) called the <i class="calibre5 pcalibre pcalibre1">program counter</i> (PC). At any point in time, the PC points at (contains the address of) some machine-language instruction in main memory.<a class="noteref pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1" id="r__P7000497027000000000000000000273" epub:type="noteref" href="#P7000497027000000000000000000273">2</a></p><aside class="footnote pcalibre5 pcalibre" id="P7000497027000000000000000000273" data-uri="chapter01.xhtml#P7000497027000000000000000000273" epub:type="footnote"><p class="pcalibre calibre3 pcalibre1"><span class="pcalibre1 number2 pcalibre"><a href="#r__P7000497027000000000000000000273" class="ulink pcalibre pcalibre4 pcalibre2 pcalibre3 pcalibre1">2. </a></span>PC is also a commonly used acronym for "personal computer." However, the distinction between the two should be clear from the context.</p></aside>
<p id="P700049702700000000000000003E546" data-uri="chapter01.xhtml#P700049702700000000000000003E546" class="pcalibre1 pcalibre calibre2">From the time that power is applied to the system until the time that the power is shut off, a processor repeatedly executes the instruction pointed at by the program counter and updates the program counter to point to the next instruction. A processor <i class="calibre5 pcalibre pcalibre1">appears</i> to operate according to a very simple instruction execution model, defined by its <i class="calibre5 pcalibre pcalibre1">instruction set architecture</i>. In this model, instructions execute <span class="pcalibre pagebreak pcalibre1" id="P700049702700000000000000000014B" title="10" data-uri="chapter01.xhtml#P700049702700000000000000000014B" epub:type="pagebreak"></span>in strict sequence, and executing a single instruction involves performing a series of steps. The processor reads the instruction from memory pointed at by the program counter (PC), interprets the bits in the instruction, performs some simple operation dictated by the instruction, and then updates the PC to point to the next instruction, which may or may not be contiguous in memory to the instruction that was just executed.</p>
<p id="P700049702700000000000000003E547" data-uri="chapter01.xhtml#P700049702700000000000000003E547" class="pcalibre1 pcalibre calibre2">There are only a few of these simple operations, and they revolve around main memory, the <i class="calibre5 pcalibre pcalibre1">register file</i>, and the <i class="calibre5 pcalibre pcalibre1">arithmetic/logic unit</i> (ALU). The register file is a small storage device that consists of a collection of word-size registers, each with its own unique name. The ALU computes new data and address values. Here are some examples of the simple operations that the CPU might carry out at the request of an instruction:</p>
<ul id="P700049702700000000000000003E548" data-uri="chapter01.xhtml#P700049702700000000000000003E548" class="calibre28 pcalibre pcalibre1">
<li id="P700049702700000000000000003E549" data-uri="chapter01.xhtml#P700049702700000000000000003E549" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E54A" data-uri="chapter01.xhtml#P700049702700000000000000003E54A" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Load: </span>Copy a byte or a word from main memory into a register, overwriting the previous contents of the register.</p></li>
<li id="P700049702700000000000000003E54B" data-uri="chapter01.xhtml#P700049702700000000000000003E54B" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E54C" data-uri="chapter01.xhtml#P700049702700000000000000003E54C" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Store: </span>Copy a byte or a word from a register to a location in main memory, overwriting the previous contents of that location.</p></li>
<li id="P700049702700000000000000003E54D" data-uri="chapter01.xhtml#P700049702700000000000000003E54D" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E54E" data-uri="chapter01.xhtml#P700049702700000000000000003E54E" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Operate: </span>Copy the contents of two registers to the ALU, perform an arithmetic operation on the two words, and store the result in a register, overwriting the previous contents of that register.</p></li>
<li id="P700049702700000000000000003E54F" data-uri="chapter01.xhtml#P700049702700000000000000003E54F" class="calibre12 pcalibre pcalibre1"><p id="P700049702700000000000000003E550" data-uri="chapter01.xhtml#P700049702700000000000000003E550" class="pcalibre calibre3 pcalibre1"><span class="pcalibre leadin pcalibre1">Jump: </span>Extract a word from the instruction itself and copy that word into the program counter (PC), overwriting the previous value of the PC.</p></li>
</ul>
<p id="P700049702700000000000000003E551" data-uri="chapter01.xhtml#P700049702700000000000000003E551" class="pcalibre1 pcalibre calibre2">We say that a processor appears to be a simple implementation of its instruction set architecture, but in fact modern processors use far more complex mechanisms to speed up program execution. Thus, we can distinguish the processor's instruction set architecture, describing the effect of each machine-code instruction, from its <i class="calibre5 pcalibre pcalibre1">microarchitecture</i>, describing how the processor is actually implemented. When we study machine code in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000001DCE.xhtml#P7000497027000000000000000001DCE"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">3</span></a>, we will consider the abstraction provided by the machine's instruction set architecture. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000003A76.xhtml#P7000497027000000000000000003A76"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">4</span></a> has more to say about how processors are actually implemented. <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000004893.xhtml#P7000497027000000000000000004893"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">5</span></a> describes a model of how modern processors work that enables predicting and optimizing the performance of machine-language programs.</p>
</section>
</section>
<section id="P7000497027000000000000000000157" data-uri="chapter01.xhtml#P7000497027000000000000000000157" class="pcalibre halftitlepage pcalibre1"><header class="calibre1 pcalibre pcalibre1"><h1 class="pcalibre title1 pcalibre1" id="P700049702700000000000000003E552" data-uri="chapter01.xhtml#P700049702700000000000000003E552" epub:type="title"><span class="pcalibre label pcalibre1">1.4.2 </span>Running the <code id="P700049702700000000000000003E553" data-uri="chapter01.xhtml#P700049702700000000000000003E553" class="pcalibre1 calibre8 pcalibre">hello</code> Program</h1></header>
<p id="P700049702700000000000000003E554" data-uri="chapter01.xhtml#P700049702700000000000000003E554" class="pcalibre1 pcalibre calibre2">Given this simple view of a system's hardware organization and operation, we can begin to understand what happens when we run our example program. We must omit a lot of details here that will be filled in later, but for now we will be content with the big picture.</p>
<p id="P700049702700000000000000003E555" data-uri="chapter01.xhtml#P700049702700000000000000003E555" class="pcalibre1 pcalibre calibre2">Initially, the shell program is executing its instructions, waiting for us to type a command. As we type the characters <code id="P700049702700000000000000003E556" data-uri="chapter01.xhtml#P700049702700000000000000003E556" class="pcalibre1 calibre8 pcalibre">./hello</code> at the keyboard, the shell program reads each one into a register and then stores it in memory, as shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="#P7000497027000000000000000000160"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.5</span></a>.</p>
<p id="P700049702700000000000000003E557" data-uri="chapter01.xhtml#P700049702700000000000000003E557" class="pcalibre1 pcalibre calibre2">When we hit the enter key on the keyboard, the shell knows that we have finished typing the command. The shell then loads the executable <code id="P700049702700000000000000003E558" data-uri="chapter01.xhtml#P700049702700000000000000003E558" class="pcalibre1 calibre8 pcalibre">hello</code> file by executing a sequence of instructions that copies the code and data in the <code id="P700049702700000000000000003E559" data-uri="chapter01.xhtml#P700049702700000000000000003E559" class="pcalibre1 calibre8 pcalibre">hello</code></p>
<figure class="pcalibre5 figure pcalibre" id="P7000497027000000000000000000160" data-uri="chapter01.xhtml#P7000497027000000000000000000160">
<span class="pcalibre pagebreak pcalibre1" id="P7000497027000000000000000000161" title="11" data-uri="chapter01.xhtml#P7000497027000000000000000000161" epub:type="pagebreak"></span>
<img alt="A diagram of the hardware organization shows a path from the keyboard." id="P700049702700000000000000003E55A" data-uri="P700049702700000000000000000B6A0" src="../images/p11-1.png" class="calibre34 pcalibre pcalibre1"/>
<figcaption id="P700049702700000000000000003E55B" data-uri="chapter01.xhtml#P700049702700000000000000003E55B" class="calibre11 pcalibre pcalibre1"><header class="pcalibre halftitlepage pcalibre1"><h1 class="title3 pcalibre pcalibre1" id="P700049702700000000000000003E55C" data-uri="chapter01.xhtml#P700049702700000000000000003E55C" epub:type="title"><span class="pcalibre1 label2 pcalibre">Figure </span><span class="pcalibre label pcalibre1">1.5 </span>Reading the <code id="P700049702700000000000000003E55D" data-uri="chapter01.xhtml#P700049702700000000000000003E55D" class="pcalibre1 calibre8 pcalibre">hello</code> command from the keyboard.</h1></header>
<details class="longdesc pcalibre pcalibre1" id="P700049702700000000000000001E825" data-uri="chapter01.xhtml#P700049702700000000000000001E825">
<summary class="pcalibre6 pcalibre1 pcalibre calibre30"><span class="number pcalibre pcalibre1">Description</span></summary>
<p id="P700049702700000000000000003E55E" data-uri="chapter01.xhtml#P700049702700000000000000003E55E" class="pcalibre calibre3 pcalibre1">A diagram shows a path from the keyboard, where the user types “hello,” moving to the I/O bridge via the I/O bus. The path then moves to the bus interface, via the system bus, to the register file within the CPU, which then sends the path back along the system bus to the I/O bridge before moving to the main memory, via the memory bus, to store “hello.”</p>
</details>
</figcaption></figure>
<p class="pcalibre1 pcalibre calibre2" id="P700049702700000000000000003E55F" data-uri="chapter01.xhtml#P700049702700000000000000003E55F">object file from disk to main memory. The data includes the string of characters <code id="P700049702700000000000000003E560" data-uri="chapter01.xhtml#P700049702700000000000000003E560" class="pcalibre1 calibre8 pcalibre">hello, world\n</code> that will eventually be printed out.</p>
<p id="P700049702700000000000000003E561" data-uri="chapter01.xhtml#P700049702700000000000000003E561" class="pcalibre1 pcalibre calibre2">Using a technique known as <i class="calibre5 pcalibre pcalibre1">direct memory access</i> (DMA, discussed in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP7000497027000000000000000005190.xhtml#P7000497027000000000000000005190"><span class="pcalibre label pcalibre1">Chapter </span><span class="pcalibre label pcalibre1">6</span></a>), the data travel directly from disk to main memory, without passing through the processor. This step is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000016E.xhtml#P7000497027000000000000000000174"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.6</span></a>.</p>
<p id="P700049702700000000000000003E562" data-uri="chapter01.xhtml#P700049702700000000000000003E562" class="pcalibre1 pcalibre calibre2">Once the code and data in the <code id="P700049702700000000000000003E563" data-uri="chapter01.xhtml#P700049702700000000000000003E563" class="pcalibre1 calibre8 pcalibre">hello</code> object file are loaded into memory, the processor begins executing the machine-language instructions in the <code id="P700049702700000000000000003E564" data-uri="chapter01.xhtml#P700049702700000000000000003E564" class="pcalibre1 calibre8 pcalibre">hello</code> program's <code id="P700049702700000000000000003E565" data-uri="chapter01.xhtml#P700049702700000000000000003E565" class="pcalibre1 calibre8 pcalibre">main</code> routine. These instructions copy the bytes in the <code id="P700049702700000000000000003E566" data-uri="chapter01.xhtml#P700049702700000000000000003E566" class="pcalibre1 calibre8 pcalibre">hello, world\n</code> string from memory to the register file, and from there to the display device, where they are displayed on the screen. This step is shown in <a class="pcalibre xref1 pcalibre4 pcalibre2 pcalibre3 pcalibre1" href="fileP700049702700000000000000000016E.xhtml#P7000497027000000000000000000179"><span class="pcalibre label pcalibre1">Figure </span><span class="pcalibre label pcalibre1">1.7</span></a>.</p>
</section>
</section></body></html>
