<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part269.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part271.htm">下一个 &gt;</a></p><p class="s32" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">Questions</p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: -11pt;line-height: 89%;text-align: justify;">1. To start, let’s examine a simple program, “loop.s”. First, just look at the program, and see if you can understand it: <span class="s41">cat loop.s</span>. Then, run it with these arguments:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">./x86.py -p loop.s -t 1 -i 100 -R dx</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Tthis specifies a single thread, an interrupt every 100 instructions, and tracing of register <span class="s41">%dx</span>. Can you figure out what the value of</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 89%;text-align: justify;"><span class="s41">%dx </span>will be during the run? Once you have, run the same above and use the <span class="s41">-c </span>flag to check your answers; note the answers, on the left, show the value of the register (or memory value) <i>after </i>the instruction on the right has run.</p><p style="padding-top: 5pt;padding-left: 80pt;text-indent: 0pt;text-align: justify;">2. Now run the same code but with these flags:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">./x86.py -p loop.s -t 2 -i 100 -a dx=3,dx=3 -R dx</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Tthis specifies two threads, and initializes each %dx register to 3. What values will <span class="s41">%dx </span>see? Run with the <span class="s41">-c </span>flag to see the answers. Does the presence of multiple threads affect anything about your calculations? Is there a race condition in this code?</p><p style="padding-top: 3pt;padding-left: 80pt;text-indent: 0pt;text-align: justify;">3. Now run the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">./x86.py -p loop.s -t 2 -i 3 -r -a dx=3,dx=3 -R dx</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 89%;text-align: justify;">This makes the interrupt interval quite small and random; use dif- ferent seeds with <span class="s41">-s </span>to see different interleavings. Does the fre- quency of interruption change anything about this program?</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: -11pt;line-height: 89%;text-align: left;">4. Next we’ll examine a different program (<span class="s41">looping-race-nolock.s</span>). This program accesses a shared variable located at memory address 2000; we’ll call this variable <span class="s41">x </span>for simplicity. Run it with a single thread and make sure you understand what it does, like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">./x86.py -p looping-race-nolock.s -t 1 -M 2000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 88%;text-align: justify;">What value is found in <span class="s41">x </span>(i.e., at memory address 2000) throughout the run? Use <span class="s41">-c </span>to check your answer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">5. Now run with multiple iterations and threads:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">./x86.py -p looping-race-nolock.s -t 2 -a bx=3 -M 2000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Do you understand why the code in each thread loops three times? What will the final value of <span class="s41">x </span>be?</p><p style="padding-top: 3pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">6. Now run with random interrupt intervals:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">./x86.py -p looping-race-nolock.s -t 2 -M 2000 -i 4 -r -s 0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 88%;text-align: justify;">Then change the random seed, setting <span class="s41">-s 1</span>, then <span class="s41">-s 2</span>, etc. Can you tell, just by looking at the thread interleaving, what the final value of <span class="s41">x </span>will be? Does the exact location of the interrupt matter? Where can it safely occur? Where does an interrupt cause trouble? In other words, where is the critical section exactly?</p><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -11pt;line-height: 88%;text-align: justify;">7. Now use a fixed interrupt interval to explore the program further. Run:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 89%;text-align: justify;">See if you can guess what the final value of the shared variable <span class="s41">x </span>will be. What about when you change <span class="s41">-i 2</span>, <span class="s41">-i 3</span>, etc.? For which interrupt intervals does the program give the “correct” final answer?</p><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -11pt;line-height: 88%;text-align: justify;">8. Now run the same code for more loops (e.g., set <span class="s41">-a bx=100</span>). What interrupt intervals, set with the <span class="s41">-i </span>flag, lead to a “correct” outcome? Which intervals lead to surprising results?</p><p style="padding-top: 6pt;padding-left: 64pt;text-indent: -11pt;line-height: 88%;text-align: left;">9. We’ll examine one last program in this homework (<span class="s41">wait-for-me.s</span>). Run the code like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">./x86.py -p wait-for-me.s -a ax=1,ax=0 -R ax -M 2000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 88%;text-align: justify;">This sets the <span class="s41">%ax </span>register to 1 for thread 0, and 0 for thread 1, and watches the value of <span class="s41">%ax </span>and memory location 2000 throughout the run. How should the code behave? How is the value at location 2000 being used by the threads? What will its final value be?</p><p style="padding-top: 5pt;padding-left: 48pt;text-indent: 0pt;text-align: left;">10. Now switch the inputs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s38" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">./x86.py -p wait-for-me.s -a ax=0,ax=1 -R ax -M 2000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 89%;text-align: justify;">How do the threads behave? What is thread 0 doing? How would changing the interrupt interval (e.g., <span class="s41">-i 1000</span>, or perhaps to use random intervals) change the trace outcome? Is the program effi- ciently using the CPU?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="57" alt="image" src="Image_317.png"/></span></p><p class="s50" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">27</p><p style="text-indent: 0pt;text-align: left;"/><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part269.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part271.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
