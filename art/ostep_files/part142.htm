<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>15.2 An Example</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part141.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part143.htm">下一个 &gt;</a></p><p class="s40" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">15.2 An Example</p><p style="padding-top: 7pt;padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">To understand better what we need to do to implement address trans- lation, and why we need such a mechanism, let’s look at a simple exam- ple. Imagine there is a process whose address space as indicated in Figure</p><p class="s28" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">15.1<span style=" color: #231F20;">. What we are going to examine here is a short code sequence that</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 83pt;text-indent: 0pt;line-height: 11pt;text-align: left;">T<span class="s7">IP</span>: I<span class="s7">NTERPOSITION </span>I<span class="s7">S </span>P<span class="s7">OWERFUL</span></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Interposition is a generic and powerful technique that is often used to great effect in computer systems. In virtualizing memory, the hardware will interpose on each memory access, and translate each virtual address issued by the process to a physical address where the desired informa- tion is actually stored. However, the general technique of interposition is much more broadly applicable; indeed, almost any well-defined interface can be interposed upon, to add new functionality or improve some other aspect of the system. One of the usual benefits of such an approach is <b>transparency</b>; the interposition often is done without changing the client of the interface, thus requiring no changes to said client.</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 89%;text-align: justify;">loads a value from memory, increments it by three, and then stores the value back into memory. You can imagine the C-language representation of this code might look like this:</p><p class="s38" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">void func()</p><p class="s38" style="padding-left: 38pt;text-indent: 0pt;text-align: right;">int x;</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">...</p><p class="s38" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">x = x + 3; // this is the line of code we are interested in</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">The compiler turns this line of code into assembly, which might look something like this (in x86 assembly). Use <span class="s41">objdump </span>on Linux or <span class="s41">otool </span>on Mac OS X to disassemble it:</p><p class="s38" style="padding-top: 4pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">128: movl 0x0(%ebx), %eax  ;load 0+ebx into eax 132: addl $0x03, %eax    ;add 3 to eax register 135: movl %eax, 0x0(%ebx)  ;store eax back to mem</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 11pt;line-height: 88%;text-align: justify;">This code snippet is relatively straightforward; it presumes that the address of <span class="s41">x </span>has been placed in the register <span class="s41">ebx</span>, and then loads the value at that address into the general-purpose register <span class="s41">eax </span>using the <span class="s41">movl </span>in- struction (for “longword” move). The next instruction adds 3 to <span class="s41">eax</span>, and the final instruction stores the value in <span class="s41">eax </span>back into memory at that same location.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">In Figure <span style=" color: #00AEEF;">15.1</span>, you can see how both the code and data are laid out in the process’s address space; the three-instruction code sequence is located at address 128 (in the code section near the top), and the value of the variable x at address 15 KB (in the stack near the bottom). In the figure, the initial value of x is 3000, as shown in its location on the stack.</p><p style="padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">When these instructions run, from the perspective of the process, the following memory accesses take place.</p><p class="s4" style="padding-top: 7pt;padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">• <span class="p">Fetch instruction at address 128</span></p><p class="s4" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">• <span class="p">Execute this instruction (load from address 15 KB)</span></p><p class="s4" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">• <span class="p">Fetch instruction at address 132</span></p><p class="s4" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">• <span class="p">Execute this instruction (no memory reference)</span></p><p class="s4" style="padding-left: 54pt;text-indent: 0pt;line-height: 10pt;text-align: left;">• <span class="p">Fetch the instruction at address 135</span></p><p class="s4" style="padding-left: 54pt;text-indent: 0pt;line-height: 11pt;text-align: left;">• <span class="p">Execute this instruction (store to address 15 KB)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">0KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: right;">1KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s88" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;line-height: 5pt;text-align: left;">128</p><p style="text-indent: 0pt;text-align: left;"><span><img width="99" height="351" alt="image" src="Image_140.png"/></span></p><p class="s47" style="text-indent: 0pt;line-height: 7pt;text-align: left;">(free)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s47" style="text-indent: 0pt;line-height: 7pt;text-align: left;">Stack</p><p style="text-indent: 0pt;text-align: left;"/><p class="s88" style="text-indent: 0pt;line-height: 5pt;text-align: left;">3000</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 26pt;text-indent: 0pt;text-align: center;">Heap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s88" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 89%;text-align: left;">movl 0x0(%ebx),%eax addl 0x03, %eax</p><p class="s88" style="padding-left: 1pt;text-indent: 0pt;line-height: 5pt;text-align: left;">movl %eax,0x0(%ebx)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">Program Code</p><p style="text-indent: 0pt;text-align: left;"/><p class="s88" style="padding-left: 3pt;text-indent: 0pt;line-height: 5pt;text-align: left;">132</p><p class="s88" style="padding-left: 3pt;text-indent: 0pt;line-height: 5pt;text-align: left;">135</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">2KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">3KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">4KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">14KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">15KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s47" style="padding-top: 4pt;padding-left: 54pt;text-indent: 0pt;text-align: center;">16KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 121pt;text-indent: 0pt;text-align: left;">Figure 15.1: <b>A Process And Its Address Space</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 12pt;line-height: 89%;text-align: justify;">From the program’s perspective, its <b>address space </b>starts at address 0 and grows to a maximum of 16 KB; all memory references it generates should be within these bounds. However, to virtualize memory, the OS wants to place the process somewhere else in physical memory, not nec- essarily at address 0. Thus, we have the problem: how can we <b>relocate </b>this process in memory in a way that is <b>transparent </b>to the process? How can provide the illusion of a virtual address space starting at 0, when in reality the address space is located at some other physical address?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:40pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" bgcolor="#D3D3D3"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s89" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;text-align: center;">Operating System</p></td><td style="width:6pt;border-left-style:solid;border-left-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:40pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s89" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;text-align: center;">(not in use)</p></td><td style="width:6pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:5pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s90" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 3pt;text-align: center;">Code</p></td><td style="width:6pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:5pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s90" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 4pt;text-align: center;">Heap</p></td><td style="width:6pt;border-left-style:solid;border-left-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:25pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s90" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;text-align: center;">(allocated but not in use)</p></td><td style="width:6pt;border-left-style:solid;border-left-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:5pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s90" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 3pt;text-align: center;">Stack</p></td><td style="width:6pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:40pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s89" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;text-align: center;">(not in use)</p></td><td style="width:6pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="padding-top: 4pt;padding-left: 48pt;text-indent: 0pt;text-align: center;">0KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="55" alt="image" src="Image_141.png"/></span></p><p class="s91" style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">16KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Relocated Process</p><p style="text-indent: 0pt;text-align: left;"/><p class="s91" style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">32KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 193pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="2" height="7" alt="image" src="Image_142.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 193pt;text-indent: 0pt;line-height: 5pt;text-align: left;"><span><img width="2" height="7" alt="image" src="Image_143.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="91" height="55" alt="image" src="Image_144.png"/></span></p><p class="s91" style="padding-top: 1pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">48KB</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s91" style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">64KB</p><p style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Figure 15.2: <b>Physical Memory with a Single Relocated Process</b></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 11pt;line-height: 89%;text-align: justify;">An example of what physical memory might look like once this pro- cess’s address space has been placed in memory is found in Figure <span style=" color: #00AEEF;">15.2</span>. In the figure, you can see the OS using the first slot of physical memory for itself, and that it has relocated the process from the example above into the slot starting at physical memory address 32 KB. The other two slots are free (16 KB-32 KB and 48 KB-64 KB).</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part141.htm">&lt; 上一个</a><span> | </span><a href="../ostep.html">内容</a><span> | </span><a href="part143.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
